"descriptor","code"
"<io.flutter.embedding.android.s: void d(android.view.KeyEvent)>","/* JADX INFO: Access modifiers changed from: private */
public void d(KeyEvent keyEvent) {
    e eVar = this.f325c;
    if (eVar == null || eVar.a(keyEvent)) {
        return;
    }
    this.f324b.add(keyEvent);
    this.f325c.c(keyEvent);
    if (this.f324b.remove(keyEvent)) {
        l.b.g(""KeyboardManager"", ""A redispatched key event was consumed before reaching KeyboardManager"");
    }
}"
"<io.flutter.embedding.android.s: boolean a(android.view.KeyEvent)>","boolean a(KeyEvent keyEvent);"
"<io.flutter.embedding.android.s: void c()>","void c(KeyEvent keyEvent);"
"<z0.a: void c(g0.d,g0.d)>","public static final void c(d<? super q> dVar, d<?> dVar2) {
    d b2;
    try {
        b2 = c.b(dVar);
        k.a aVar = k.f144d;
        h.c(b2, k.a(q.f150a), null, 2, null);
    } catch (Throwable th) {
        b(dVar2, th);
    }
}"
"<z0.a: void b(g0.d,java.lang.Throwable)>","public static final void b(d<?> dVar, Throwable th) {
    k.a aVar = k.f144d;
    dVar.resumeWith(k.a(l.a(th)));
    throw th;
}"
"<z0.a: void e(n0.p,java.lang.Object,g0.d,n0.l,int,java.lang.Object)>","public static /* synthetic */
void e(p pVar, Object obj, d dVar, n0.l lVar, int i2, Object obj2) {
    if ((i2 & 4) != 0) {
        lVar = null;
    }
    d(pVar, obj, dVar, lVar);
}"
"<z0.a: void d(n0.p,java.lang.Object,g0.d,n0.l)>","public static final <R, T> void d(p<? super R, ? super d<? super T>, ? extends Object> pVar, R r2, d<? super T> dVar, n0.l<? super Throwable, q> lVar) {
    d a2;
    d b2;
    try {
        a2 = c.a(pVar, r2, dVar);
        b2 = c.b(a2);
        k.a aVar = k.f144d;
        h.b(b2, k.a(q.f150a), lVar);
    } catch (Throwable th) {
        b(dVar, th);
    }
}"
"<io.flutter.view.c: boolean x(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)>","@SuppressLint({ ""SwitchIntDef"" })
public boolean x(View view, View view2, AccessibilityEvent accessibilityEvent) {
    Integer recordFlutterId;
    if (!this.f812d.requestSendAccessibilityEvent(view, view2, accessibilityEvent) || (recordFlutterId = this.f812d.getRecordFlutterId(view, accessibilityEvent)) == null) {
        return false;
    }
    int eventType = accessibilityEvent.getEventType();
    if (eventType == 8) {
        this.f819k = recordFlutterId;
        this.f821m = null;
        return true;
    }
    if (eventType == 128) {
        this.f823o = null;
        return true;
    }
    if (eventType == 32768) {
        this.f818j = recordFlutterId;
        this.f817i = null;
        return true;
    }
    if (eventType != 65536) {
        return true;
    }
    this.f819k = null;
    this.f818j = null;
    return true;
}"
"<io.flutter.view.c: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>","/* JADX WARN: Removed duplicated region for block: B:180:0x0431  */
/* JADX WARN: Removed duplicated region for block: B:193:0x0462 A[LOOP:0: B:191:0x045c->B:193:0x0462, LOOP_END] */
/* JADX WARN: Removed duplicated region for block: B:198:0x0487  */
// android.view.accessibility.AccessibilityNodeProvider
@Override
@android.annotation.SuppressLint({ ""NewApi"" })
public /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int r17) {
    /*
            Method dump skipped, instructions count: 1217
            To view this dump add '--comments-level debug' option
        */
    throw new UnsupportedOperationException(""Method not decompiled: io.flutter.view.c.createAccessibilityNodeInfo(int):android.view.accessibility.AccessibilityNodeInfo"");
}"
"<io.flutter.view.c: void b0(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>","void b0(ByteBuffer byteBuffer, String[] strArr, ByteBuffer[] byteBufferArr) {
    l lVar;
    l lVar2;
    float f2;
    float f3;
    WindowInsets rootWindowInsets;
    View c2;
    ArrayList arrayList = new ArrayList();
    while (byteBuffer.hasRemaining()) {
        l A2 = A(byteBuffer.getInt());
        A2.D0(byteBuffer, strArr, byteBufferArr);
        if (!A2.v0(i.IS_HIDDEN)) {
            if (A2.v0(i.IS_FOCUSED)) {
                this.f821m = A2;
            }
            if (A2.B) {
                arrayList.add(A2);
            }
            if (A2.f910i != -1 && !this.f813e.d(A2.f910i) && (c2 = this.f813e.c(A2.f910i)) != null) {
                c2.setImportantForAccessibility(0);
            }
        }
    }
    HashSet hashSet = new HashSet();
    l B2 = B();
    ArrayList<l> arrayList2 = new ArrayList();
    if (B2 != null) {
        float[] fArr = new float[16];
        Matrix.setIdentityM(fArr, 0);
        int i2 = Build.VERSION.SDK_INT;
        if (i2 >= 23) {
            if ((i2 >= 28 ? w() : true) && (rootWindowInsets = this.f809a.getRootWindowInsets()) != null) {
                if (!this.f826r.equals(Integer.valueOf(rootWindowInsets.getSystemWindowInsetLeft()))) {
                    B2.Y = true;
                    B2.W = true;
                }
                this.f826r = Integer.valueOf(rootWindowInsets.getSystemWindowInsetLeft());
                Matrix.translateM(fArr, 0, r4.intValue(), 0.0f, 0.0f);
            }
        }
        B2.C0(fArr, hashSet, false);
        B2.e0(arrayList2);
    }
    l lVar3 = null;
    for (l lVar4 : arrayList2) {
        if (!this.f824p.contains(Integer.valueOf(lVar4.f903b))) {
            lVar3 = lVar4;
        }
    }
    if (lVar3 == null && arrayList2.size() > 0) {
        lVar3 = (l) arrayList2.get(arrayList2.size() - 1);
    }
    if (lVar3 != null && (lVar3.f903b != this.f825q || arrayList2.size() != this.f824p.size())) {
        this.f825q = lVar3.f903b;
        M(lVar3);
    }
    this.f824p.clear();
    Iterator it = arrayList2.iterator();
    while (it.hasNext()) {
        this.f824p.add(Integer.valueOf(((l) it.next()).f903b));
    }
    Iterator<Map.Entry<Integer, l>> it2 = this.f815g.entrySet().iterator();
    while (it2.hasNext()) {
        l value = it2.next().getValue();
        if (!hashSet.contains(value)) {
            c0(value);
            it2.remove();
        }
    }
    U(0);
    Iterator it3 = arrayList.iterator();
    while (it3.hasNext()) {
        l lVar5 = (l) it3.next();
        if (lVar5.h0()) {
            AccessibilityEvent H = H(lVar5.f903b, 4096);
            float f4 = lVar5.f913l;
            float f5 = lVar5.f914m;
            if (Float.isInfinite(lVar5.f914m)) {
                if (f4 > 70000.0f) {
                    f4 = 70000.0f;
                }
                f5 = 100000.0f;
            }
            if (Float.isInfinite(lVar5.f915n)) {
                f2 = f5 + 100000.0f;
                if (f4 < -70000.0f) {
                    f4 = -70000.0f;
                }
                f3 = f4 + 100000.0f;
            } else {
                f2 = f5 - lVar5.f915n;
                f3 = f4 - lVar5.f915n;
            }
            if (lVar5.s0(g.SCROLL_UP) || lVar5.s0(g.SCROLL_DOWN)) {
                H.setScrollY((int) f3);
                H.setMaxScrollY((int) f2);
            } else if (lVar5.s0(g.SCROLL_LEFT) || lVar5.s0(g.SCROLL_RIGHT)) {
                H.setScrollX((int) f3);
                H.setMaxScrollX((int) f2);
            }
            if (lVar5.f911j > 0) {
                H.setItemCount(lVar5.f911j);
                H.setFromIndex(lVar5.f912k);
                Iterator it4 = lVar5.S.iterator();
                int i3 = 0;
                while (it4.hasNext()) {
                    if (!((l) it4.next()).v0(i.IS_HIDDEN)) {
                        i3++;
                    }
                }
                H.setToIndex((lVar5.f912k + i3) - 1);
            }
            S(H);
        }
        if (lVar5.v0(i.IS_LIVE_REGION) && lVar5.g0()) {
            U(lVar5.f903b);
        }
        l lVar6 = this.f817i;
        if (lVar6 != null && lVar6.f903b == lVar5.f903b) {
            i iVar = i.IS_SELECTED;
            if (!lVar5.t0(iVar) && lVar5.v0(iVar)) {
                AccessibilityEvent H2 = H(lVar5.f903b, 4);
                H2.getText().add(lVar5.f916o);
                S(H2);
            }
        }
        l lVar7 = this.f821m;
        if (lVar7 != null && lVar7.f903b == lVar5.f903b && ((lVar2 = this.f822n) == null || lVar2.f903b != this.f821m.f903b)) {
            this.f822n = this.f821m;
            S(H(lVar5.f903b, 8));
        } else if (this.f821m == null) {
            this.f822n = null;
        }
        l lVar8 = this.f821m;
        if (lVar8 != null && lVar8.f903b == lVar5.f903b) {
            i iVar2 = i.IS_TEXT_FIELD;
            if (lVar5.t0(iVar2) && lVar5.v0(iVar2) && ((lVar = this.f817i) == null || lVar.f903b == this.f821m.f903b)) {
                String str = lVar5.J != null ? lVar5.J : """";
                String str2 = lVar5.f918q != null ? lVar5.f918q : """";
                AccessibilityEvent v2 = v(lVar5.f903b, str, str2);
                if (v2 != null) {
                    S(v2);
                }
                if (lVar5.E != lVar5.f908g || lVar5.F != lVar5.f909h) {
                    AccessibilityEvent H3 = H(lVar5.f903b, 8192);
                    H3.getText().add(str2);
                    H3.setFromIndex(lVar5.f908g);
                    H3.setToIndex(lVar5.f909h);
                    H3.setItemCount(str2.length());
                    S(H3);
                }
            }
        }
    }
}"
"<io.flutter.view.c: void Q()>","public void Q() {
    this.f829u = true;
    this.f813e.a();
    Y(null);
    this.f811c.removeAccessibilityStateChangeListener(this.f831w);
    if (Build.VERSION.SDK_INT >= 19) {
        this.f811c.removeTouchExplorationStateChangeListener(this.f832x);
    }
    this.f814f.unregisterContentObserver(this.f833y);
    this.f810b.g(null);
}"
"<io.flutter.view.c: boolean J(android.view.MotionEvent)>","public boolean J(MotionEvent motionEvent) {
    return K(motionEvent, false);
}"
"<io.flutter.view.c: void a0(java.nio.ByteBuffer,java.lang.String[])>","void a0(ByteBuffer byteBuffer, String[] strArr) {
    while (byteBuffer.hasRemaining()) {
        h z2 = z(byteBuffer.getInt());
        z2.f874c = byteBuffer.getInt();
        int i2 = byteBuffer.getInt();
        String str = null;
        z2.f875d = i2 == -1 ? null : strArr[i2];
        int i3 = byteBuffer.getInt();
        if (i3 != -1) {
            str = strArr[i3];
        }
        z2.f876e = str;
    }
}"
"<io.flutter.view.c: boolean N(io.flutter.view.c$l,int,android.os.Bundle,boolean)>","@TargetApi(18)
private boolean N(l lVar, int i2, Bundle bundle, boolean z2) {
    int i3 = bundle.getInt(""ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT"");
    boolean z3 = bundle.getBoolean(""ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN"");
    int i4 = lVar.f908g;
    int i5 = lVar.f909h;
    P(lVar, i3, z2, z3);
    if (i4 != lVar.f908g || i5 != lVar.f909h) {
        String str = lVar.f918q != null ? lVar.f918q : """";
        AccessibilityEvent H = H(lVar.f903b, 8192);
        H.getText().add(str);
        H.setFromIndex(lVar.f908g);
        H.setToIndex(lVar.f909h);
        H.setItemCount(str.length());
        S(H);
    }
    if (i3 == 1) {
        if (z2) {
            g gVar = g.MOVE_CURSOR_FORWARD_BY_CHARACTER;
            if (lVar.u0(gVar)) {
                this.f810b.c(i2, gVar, Boolean.valueOf(z3));
                return true;
            }
        }
        if (z2) {
            return false;
        }
        g gVar2 = g.MOVE_CURSOR_BACKWARD_BY_CHARACTER;
        if (!lVar.u0(gVar2)) {
            return false;
        }
        this.f810b.c(i2, gVar2, Boolean.valueOf(z3));
        return true;
    }
    if (i3 != 2) {
        return i3 == 4 || i3 == 8 || i3 == 16;
    }
    if (z2) {
        g gVar3 = g.MOVE_CURSOR_FORWARD_BY_WORD;
        if (lVar.u0(gVar3)) {
            this.f810b.c(i2, gVar3, Boolean.valueOf(z3));
            return true;
        }
    }
    if (z2) {
        return false;
    }
    g gVar4 = g.MOVE_CURSOR_BACKWARD_BY_WORD;
    if (!lVar.u0(gVar4)) {
        return false;
    }
    this.f810b.c(i2, gVar4, Boolean.valueOf(z3));
    return true;
}"
"<io.flutter.view.c: void W(boolean)>","/* JADX INFO: Access modifiers changed from: private */
public void W(boolean z2) {
    if (this.f828t == z2) {
        return;
    }
    this.f828t = z2;
    this.f820l = z2 ? this.f820l | f.ACCESSIBLE_NAVIGATION.f848d : this.f820l & (~f.ACCESSIBLE_NAVIGATION.f848d);
    T();
}"
"<io.flutter.view.c: boolean w()>","@TargetApi(28)
private boolean w() {
    Activity e2 = c0.h.e(this.f809a.getContext());
    if (e2 == null || e2.getWindow() == null) {
        return false;
    }
    int i2 = e2.getWindow().getAttributes().layoutInDisplayCutoutMode;
    return i2 == 2 || i2 == 0;
}"
"<io.flutter.view.c: void U(int)>","private void U(int i2) {
    AccessibilityEvent H = H(i2, 2048);
    if (Build.VERSION.SDK_INT >= 19) {
        H.setContentChangeTypes(1);
    }
    S(H);
}"
"<io.flutter.view.c: void P(io.flutter.view.c$l,int,boolean,boolean)>","/* JADX WARN: Code restructure failed: missing block: B:20:0x0022, code lost:
    
        if (r6 != false) goto L19;
     */
/* JADX WARN: Code restructure failed: missing block: B:21:0x0024, code lost:
    
        r5 = r4.f918q.length();
     */
/* JADX WARN: Code restructure failed: missing block: B:22:0x002c, code lost:
    
        r4.f909h = r5;
     */
/* JADX WARN: Code restructure failed: missing block: B:23:0x0031, code lost:
    
        r4.f909h = 0;
     */
/* JADX WARN: Code restructure failed: missing block: B:28:0x0060, code lost:
    
        if (r5.find() != false) goto L27;
     */
/* JADX WARN: Code restructure failed: missing block: B:29:0x0062, code lost:
    
        io.flutter.view.c.l.m(r4, r5.start(1));
     */
/* JADX WARN: Code restructure failed: missing block: B:34:0x008d, code lost:
    
        if (r5.find() != false) goto L33;
     */
/* JADX WARN: Code restructure failed: missing block: B:35:0x008f, code lost:
    
        r5 = r5.start(1);
     */
/* JADX WARN: Code restructure failed: missing block: B:40:0x00c1, code lost:
    
        if (r5.find() != false) goto L27;
     */
/* JADX WARN: Code restructure failed: missing block: B:45:0x00e6, code lost:
    
        if (r5.find() != false) goto L33;
     */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
private void P(io.flutter.view.c.l r4, int r5, boolean r6, boolean r7) {
    /*
            r3 = this;
            int r0 = io.flutter.view.c.l.k(r4)
            if (r0 < 0) goto L111
            int r0 = io.flutter.view.c.l.i(r4)
            if (r0 >= 0) goto Le
            goto L111
        Le:
            r0 = 1
            if (r5 == r0) goto Le9
            r1 = 2
            r2 = 0
            if (r5 == r1) goto L94
            r1 = 4
            if (r5 == r1) goto L36
            r0 = 8
            if (r5 == r0) goto L22
            r0 = 16
            if (r5 == r0) goto L22
            goto L108
        L22:
            if (r6 == 0) goto L31
        L24:
            java.lang.String r5 = io.flutter.view.c.l.q(r4)
            int r5 = r5.length()
        L2c:
            io.flutter.view.c.l.l(r4, r5)
            goto L108
        L31:
            io.flutter.view.c.l.l(r4, r2)
            goto L108
        L36:
            if (r6 == 0) goto L6b
            int r5 = io.flutter.view.c.l.k(r4)
            java.lang.String r1 = io.flutter.view.c.l.q(r4)
            int r1 = r1.length()
            if (r5 >= r1) goto L6b
            java.lang.String r5 = ""(?!^)(\\n)""
            java.util.regex.Pattern r5 = java.util.regex.Pattern.compile(r5)
            java.lang.String r6 = io.flutter.view.c.l.q(r4)
            int r1 = io.flutter.view.c.l.k(r4)
            java.lang.String r6 = r6.substring(r1)
            java.util.regex.Matcher r5 = r5.matcher(r6)
            boolean r6 = r5.find()
            if (r6 == 0) goto L24
        L62:
            int r5 = r5.start(r0)
            io.flutter.view.c.l.m(r4, r5)
            goto L108
        L6b:
            if (r6 != 0) goto L108
            int r5 = io.flutter.view.c.l.k(r4)
            if (r5 <= 0) goto L108
            java.lang.String r5 = ""(?s:.*)(\\n)""
            java.util.regex.Pattern r5 = java.util.regex.Pattern.compile(r5)
            java.lang.String r6 = io.flutter.view.c.l.q(r4)
            int r1 = io.flutter.view.c.l.k(r4)
            java.lang.String r6 = r6.substring(r2, r1)
            java.util.regex.Matcher r5 = r5.matcher(r6)
            boolean r6 = r5.find()
            if (r6 == 0) goto L31
        L8f:
            int r5 = r5.start(r0)
            goto L2c
        L94:
            if (r6 == 0) goto Lc4
            int r5 = io.flutter.view.c.l.k(r4)
            java.lang.String r1 = io.flutter.view.c.l.q(r4)
            int r1 = r1.length()
            if (r5 >= r1) goto Lc4
            java.lang.String r5 = ""\\p{L}(\\b)""
            java.util.regex.Pattern r5 = java.util.regex.Pattern.compile(r5)
            java.lang.String r6 = io.flutter.view.c.l.q(r4)
            int r1 = io.flutter.view.c.l.k(r4)
            java.lang.String r6 = r6.substring(r1)
            java.util.regex.Matcher r5 = r5.matcher(r6)
            r5.find()
            boolean r6 = r5.find()
            if (r6 == 0) goto L24
            goto L62
        Lc4:
            if (r6 != 0) goto L108
            int r5 = io.flutter.view.c.l.k(r4)
            if (r5 <= 0) goto L108
            java.lang.String r5 = ""(?s:.*)(\\b)\\p{L}""
            java.util.regex.Pattern r5 = java.util.regex.Pattern.compile(r5)
            java.lang.String r6 = io.flutter.view.c.l.q(r4)
            int r1 = io.flutter.view.c.l.k(r4)
            java.lang.String r6 = r6.substring(r2, r1)
            java.util.regex.Matcher r5 = r5.matcher(r6)
            boolean r6 = r5.find()
            if (r6 == 0) goto L108
            goto L8f
        Le9:
            if (r6 == 0) goto Lfd
            int r5 = io.flutter.view.c.l.k(r4)
            java.lang.String r1 = io.flutter.view.c.l.q(r4)
            int r1 = r1.length()
            if (r5 >= r1) goto Lfd
            io.flutter.view.c.l.m(r4, r0)
            goto L108
        Lfd:
            if (r6 != 0) goto L108
            int r5 = io.flutter.view.c.l.k(r4)
            if (r5 <= 0) goto L108
            io.flutter.view.c.l.n(r4, r0)
        L108:
            if (r7 != 0) goto L111
            int r5 = io.flutter.view.c.l.k(r4)
            io.flutter.view.c.l.j(r4, r5)
        L111:
            return
        */
    throw new UnsupportedOperationException(""Method not decompiled: io.flutter.view.c.P(io.flutter.view.c$l, int, boolean, boolean):void"");
}"
"<io.flutter.view.c: boolean F(io.flutter.view.c$l,io.flutter.view.c$l)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
boolean F(l lVar, l lVar2) {
    return lVar2 == lVar;
}"
"<io.flutter.view.c: int f(io.flutter.view.c,int)>","static /* synthetic */
int f(c cVar, int i2) {
    int i3 = i2 & cVar.f820l;
    cVar.f820l = i3;
    return i3;
}"
"<io.flutter.view.c: boolean performAction(int,int,android.os.Bundle)>","// android.view.accessibility.AccessibilityNodeProvider
@Override
public boolean performAction(int i2, int i3, Bundle bundle) {
    int i4;
    if (i2 >= 65536) {
        boolean performAction = this.f812d.performAction(i2, i3, bundle);
        if (performAction && i3 == 128) {
            this.f818j = null;
        }
        return performAction;
    }
    l lVar = this.f815g.get(Integer.valueOf(i2));
    boolean z2 = false;
    if (lVar == null) {
        return false;
    }
    switch(i3) {
        case 16:
            this.f810b.b(i2, g.TAP);
            return true;
        case 32:
            this.f810b.b(i2, g.LONG_PRESS);
            return true;
        case 64:
            if (this.f817i == null) {
                this.f809a.invalidate();
            }
            this.f817i = lVar;
            this.f810b.b(i2, g.DID_GAIN_ACCESSIBILITY_FOCUS);
            R(i2, 32768);
            if (lVar.u0(g.INCREASE) || lVar.u0(g.DECREASE)) {
                R(i2, 4);
            }
            return true;
        case 128:
            l lVar2 = this.f817i;
            if (lVar2 != null && lVar2.f903b == i2) {
                this.f817i = null;
            }
            Integer num = this.f818j;
            if (num != null && num.intValue() == i2) {
                this.f818j = null;
            }
            this.f810b.b(i2, g.DID_LOSE_ACCESSIBILITY_FOCUS);
            R(i2, 65536);
            return true;
        case 256:
            if (Build.VERSION.SDK_INT < 18) {
                return false;
            }
            return N(lVar, i2, bundle, true);
        case 512:
            if (Build.VERSION.SDK_INT < 18) {
                return false;
            }
            return N(lVar, i2, bundle, false);
        case 4096:
            g gVar = g.SCROLL_UP;
            if (!lVar.u0(gVar)) {
                gVar = g.SCROLL_LEFT;
                if (!lVar.u0(gVar)) {
                    gVar = g.INCREASE;
                    if (!lVar.u0(gVar)) {
                        return false;
                    }
                    lVar.f918q = lVar.f920s;
                    lVar.f919r = lVar.f921t;
                    R(i2, 4);
                }
            }
            this.f810b.b(i2, gVar);
            return true;
        case 8192:
            g gVar2 = g.SCROLL_DOWN;
            if (!lVar.u0(gVar2)) {
                gVar2 = g.SCROLL_RIGHT;
                if (!lVar.u0(gVar2)) {
                    gVar2 = g.DECREASE;
                    if (!lVar.u0(gVar2)) {
                        return false;
                    }
                    lVar.f918q = lVar.f922u;
                    lVar.f919r = lVar.f923v;
                    R(i2, 4);
                }
            }
            this.f810b.b(i2, gVar2);
            return true;
        case 16384:
            this.f810b.b(i2, g.COPY);
            return true;
        case 32768:
            this.f810b.b(i2, g.PASTE);
            return true;
        case 65536:
            this.f810b.b(i2, g.CUT);
            return true;
        case 131072:
            if (Build.VERSION.SDK_INT < 18) {
                return false;
            }
            HashMap hashMap = new HashMap();
            if (bundle != null && bundle.containsKey(""ACTION_ARGUMENT_SELECTION_START_INT"") && bundle.containsKey(""ACTION_ARGUMENT_SELECTION_END_INT"")) {
                z2 = true;
            }
            if (z2) {
                hashMap.put(""base"", Integer.valueOf(bundle.getInt(""ACTION_ARGUMENT_SELECTION_START_INT"")));
                i4 = bundle.getInt(""ACTION_ARGUMENT_SELECTION_END_INT"");
            } else {
                hashMap.put(""base"", Integer.valueOf(lVar.f909h));
                i4 = lVar.f909h;
            }
            hashMap.put(""extent"", Integer.valueOf(i4));
            this.f810b.c(i2, g.SET_SELECTION, hashMap);
            l lVar3 = this.f815g.get(Integer.valueOf(i2));
            lVar3.f908g = ((Integer) hashMap.get(""base"")).intValue();
            lVar3.f909h = ((Integer) hashMap.get(""extent"")).intValue();
            return true;
        case 1048576:
            this.f810b.b(i2, g.DISMISS);
            return true;
        case 2097152:
            if (Build.VERSION.SDK_INT < 21) {
                return false;
            }
            return O(lVar, i2, bundle);
        case R.id.accessibilityActionShowOnScreen:
            this.f810b.b(i2, g.SHOW_ON_SCREEN);
            return true;
        default:
            h hVar = this.f816h.get(Integer.valueOf(i3 - B));
            if (hVar == null) {
                return false;
            }
            this.f810b.c(i2, g.CUSTOM_ACTION, Integer.valueOf(hVar.f873b));
            return true;
    }
}"
"<io.flutter.view.c: void T()>","/* JADX INFO: Access modifiers changed from: private */
public void T() {
    this.f810b.f(this.f820l);
}"
"<io.flutter.view.c: void S(android.view.accessibility.AccessibilityEvent)>","/* JADX INFO: Access modifiers changed from: private */
public void S(AccessibilityEvent accessibilityEvent) {
    if (this.f811c.isEnabled()) {
        this.f809a.getParent().requestSendAccessibilityEvent(this.f809a, accessibilityEvent);
    }
}"
"<io.flutter.view.c: boolean G(io.flutter.view.c$l)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
boolean G(l lVar) {
    return lVar.v0(i.HAS_IMPLICIT_SCROLLING);
}"
"<io.flutter.view.c: void V(java.lang.String)>","@TargetApi(28)
private void V(String str) {
    this.f809a.setAccessibilityPaneTitle(str);
}"
"<io.flutter.view.c: boolean E()>","public boolean E() {
    return this.f811c.isTouchExplorationEnabled();
}"
"<io.flutter.view.c: void C(float,float,boolean)>","private void C(float f2, float f3, boolean z2) {
    l w02;
    if (this.f815g.isEmpty() || (w02 = B().w0(new float[] { f2, f3, 0.0f, 1.0f }, z2)) == this.f823o) {
        return;
    }
    if (w02 != null) {
        R(w02.f903b, 128);
    }
    l lVar = this.f823o;
    if (lVar != null) {
        R(lVar.f903b, 256);
    }
    this.f823o = w02;
}"
"<io.flutter.view.c: boolean D()>","public boolean D() {
    return this.f811c.isEnabled();
}"
"<io.flutter.view.c: void R(int,int)>","/* JADX INFO: Access modifiers changed from: private */
public void R(int i2, int i3) {
    if (this.f811c.isEnabled()) {
        S(H(i2, i3));
    }
}"
"<io.flutter.view.c: void c0(io.flutter.view.c$l)>","@TargetApi(19)
private void c0(l lVar) {
    View c2;
    Integer num;
    lVar.Q = null;
    if (lVar.f910i != -1 && (num = this.f818j) != null && this.f812d.platformViewOfNode(num.intValue()) == this.f813e.c(lVar.f910i)) {
        R(this.f818j.intValue(), 65536);
        this.f818j = null;
    }
    if (lVar.f910i != -1 && (c2 = this.f813e.c(lVar.f910i)) != null) {
        c2.setImportantForAccessibility(4);
    }
    l lVar2 = this.f817i;
    if (lVar2 == lVar) {
        R(lVar2.f903b, 65536);
        this.f817i = null;
    }
    if (this.f821m == lVar) {
        this.f821m = null;
    }
    if (this.f823o == lVar) {
        this.f823o = null;
    }
}"
"<io.flutter.view.c: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>","/* JADX WARN: Code restructure failed: missing block: B:19:0x0016, code lost:
    
        if (r2 != null) goto L14;
     */
// android.view.accessibility.AccessibilityNodeProvider
@Override
public /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
android.view.accessibility.AccessibilityNodeInfo findFocus(int r2) {
    /*
            r1 = this;
            r0 = 1
            if (r2 == r0) goto L7
            r0 = 2
            if (r2 == r0) goto L1d
            goto L27
        L7:
            io.flutter.view.c$l r2 = r1.f821m
            if (r2 == 0) goto L14
        Lb:
            int r2 = io.flutter.view.c.l.a(r2)
        Lf:
            android.view.accessibility.AccessibilityNodeInfo r2 = r1.createAccessibilityNodeInfo(r2)
            return r2
        L14:
            java.lang.Integer r2 = r1.f819k
            if (r2 == 0) goto L1d
        L18:
            int r2 = r2.intValue()
            goto Lf
        L1d:
            io.flutter.view.c$l r2 = r1.f817i
            if (r2 == 0) goto L22
            goto Lb
        L22:
            java.lang.Integer r2 = r1.f818j
            if (r2 == 0) goto L27
            goto L18
        L27:
            r2 = 0
            return r2
        */
    throw new UnsupportedOperationException(""Method not decompiled: io.flutter.view.c.findFocus(int):android.view.accessibility.AccessibilityNodeInfo"");
}"
"<io.flutter.view.c: boolean K(android.view.MotionEvent,boolean)>","public boolean K(MotionEvent motionEvent, boolean z2) {
    if (!this.f811c.isTouchExplorationEnabled() || this.f815g.isEmpty()) {
        return false;
    }
    l w02 = B().w0(new float[] { motionEvent.getX(), motionEvent.getY(), 0.0f, 1.0f }, z2);
    if (w02 != null && w02.f910i != -1) {
        if (z2) {
            return false;
        }
        return this.f812d.onAccessibilityHoverEvent(w02.f903b, motionEvent);
    }
    if (motionEvent.getAction() == 9 || motionEvent.getAction() == 7) {
        C(motionEvent.getX(), motionEvent.getY(), z2);
    } else {
        if (motionEvent.getAction() != 10) {
            l.b.a(""flutter"", ""unexpected accessibility hover event: "" + motionEvent);
            return false;
        }
        L();
    }
    return true;
}"
"<io.flutter.view.c: void Y(io.flutter.view.c$k)>","public void Y(k kVar) {
    this.f827s = kVar;
}"
"<io.flutter.view.c: boolean Z(io.flutter.view.c$l)>","private boolean Z(final l lVar) {
    return lVar.f911j > 0 && (l.A0(this.f817i, new // from class: io.flutter.view.a
    c0.d() {

        // c0.d
        @Override
        public final boolean test(Object obj) {
            boolean F;
            F = c.F(c.l.this, (c.l) obj);
            return F;
        }
    }) || !l.A0(this.f817i, new // from class: io.flutter.view.b
    c0.d() {

        // c0.d
        @Override
        public final boolean test(Object obj) {
            boolean G;
            G = c.G((c.l) obj);
            return G;
        }
    }));
}"
"<io.flutter.view.c: void L()>","/* JADX INFO: Access modifiers changed from: private */
public void L() {
    l lVar = this.f823o;
    if (lVar != null) {
        R(lVar.f903b, 256);
        this.f823o = null;
    }
}"
"<io.flutter.view.c: void X()>","@TargetApi(31)
private void X() {
    View view = this.f809a;
    if (view == null || view.getResources() == null) {
        return;
    }
    int i2 = this.f809a.getResources().getConfiguration().fontWeightAdjustment;
    this.f820l = i2 != Integer.MAX_VALUE && i2 >= 300 ? this.f820l | f.BOLD_TEXT.f848d : this.f820l & f.BOLD_TEXT.f848d;
    T();
}"
"<io.flutter.view.c: void M(io.flutter.view.c$l)>","private void M(l lVar) {
    String n02 = lVar.n0();
    if (n02 == null) {
        n02 = "" "";
    }
    if (Build.VERSION.SDK_INT >= 28) {
        V(n02);
        return;
    }
    AccessibilityEvent H = H(lVar.f903b, 32);
    H.getText().add(n02);
    S(H);
}"
"<io.flutter.view.c: int g(io.flutter.view.c,int)>","static /* synthetic */
int g(c cVar, int i2) {
    int i3 = i2 | cVar.f820l;
    cVar.f820l = i3;
    return i3;
}"
"<io.flutter.view.c: boolean O(io.flutter.view.c$l,int,android.os.Bundle)>","@TargetApi(21)
private boolean O(l lVar, int i2, Bundle bundle) {
    String string = (bundle == null || !bundle.containsKey(""ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE"")) ? """" : bundle.getString(""ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE"");
    this.f810b.c(i2, g.SET_TEXT, string);
    lVar.f918q = string;
    lVar.f919r = null;
    return true;
}"
"<org.chromium.support_lib_boundary.StaticsBoundaryInterface: void initSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>","void initSafeBrowsing(Context context, ValueCallback<Boolean> valueCallback);"
"<org.chromium.support_lib_boundary.StaticsBoundaryInterface: void setSafeBrowsingAllowlist(java.util.Set,android.webkit.ValueCallback)>","void setSafeBrowsingAllowlist(Set<String> set, ValueCallback<Boolean> valueCallback);"
"<org.chromium.support_lib_boundary.StaticsBoundaryInterface: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>","void setSafeBrowsingWhitelist(List<String> list, ValueCallback<Boolean> valueCallback);"
"<org.chromium.support_lib_boundary.StaticsBoundaryInterface: boolean isMultiProcessEnabled()>","boolean isMultiProcessEnabled();"
"<j.g: boolean a(java.lang.String)>","public static boolean a(String str) {
    return j.b(str);
}"
"<androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)>","private final void callbackRemovedForActivity(Activity activity) {
    ExtensionInterfaceCompat extensionInterfaceCompat;
    CopyOnWriteArrayList<WindowLayoutChangeCallbackWrapper> copyOnWriteArrayList = this.windowLayoutChangeCallbacks;
    boolean z2 = false;
    if (!(copyOnWriteArrayList instanceof Collection) || !copyOnWriteArrayList.isEmpty()) {
        Iterator<T> it = copyOnWriteArrayList.iterator();
        while (true) {
            if (!it.hasNext()) {
                break;
            } else if (i.a(((WindowLayoutChangeCallbackWrapper) it.next()).getActivity(), activity)) {
                z2 = true;
                break;
            }
        }
    }
    if (z2 || (extensionInterfaceCompat = this.windowExtension) == null) {
        return;
    }
    extensionInterfaceCompat.onWindowLayoutChangeListenerRemoved(activity);
}"
"<androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()>","public static /* synthetic */
void getWindowLayoutChangeCallbacks$annotations() {
}"
"<androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)>","public final void setWindowExtension(ExtensionInterfaceCompat extensionInterfaceCompat) {
    this.windowExtension = extensionInterfaceCompat;
}"
"<androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)>","private final boolean isActivityRegistered(Activity activity) {
    CopyOnWriteArrayList<WindowLayoutChangeCallbackWrapper> copyOnWriteArrayList = this.windowLayoutChangeCallbacks;
    if ((copyOnWriteArrayList instanceof Collection) && copyOnWriteArrayList.isEmpty()) {
        return false;
    }
    Iterator<T> it = copyOnWriteArrayList.iterator();
    while (it.hasNext()) {
        if (i.a(((WindowLayoutChangeCallbackWrapper) it.next()).getActivity(), activity)) {
            return true;
        }
    }
    return false;
}"
"<androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(e.a)>","// androidx.window.layout.WindowBackend
@Override
public void unregisterLayoutChangeCallback(e.a<WindowLayoutInfo> callback) {
    i.e(callback, ""callback"");
    synchronized (globalLock) {
        if (getWindowExtension() == null) {
            return;
        }
        ArrayList arrayList = new ArrayList();
        Iterator<WindowLayoutChangeCallbackWrapper> it = getWindowLayoutChangeCallbacks().iterator();
        while (it.hasNext()) {
            WindowLayoutChangeCallbackWrapper callbackWrapper = it.next();
            if (callbackWrapper.getCallback() == callback) {
                i.d(callbackWrapper, ""callbackWrapper"");
                arrayList.add(callbackWrapper);
            }
        }
        getWindowLayoutChangeCallbacks().removeAll(arrayList);
        Iterator it2 = arrayList.iterator();
        while (it2.hasNext()) {
            callbackRemovedForActivity(((WindowLayoutChangeCallbackWrapper) it2.next()).getActivity());
        }
        q qVar = q.f150a;
    }
}"
"<androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,e.a)>","// androidx.window.layout.WindowBackend
@Override
public void registerLayoutChangeCallback(Activity activity, Executor executor, e.a<WindowLayoutInfo> callback) {
    WindowLayoutInfo windowLayoutInfo;
    Object obj;
    List b2;
    i.e(activity, ""activity"");
    i.e(executor, ""executor"");
    i.e(callback, ""callback"");
    ReentrantLock reentrantLock = globalLock;
    reentrantLock.lock();
    try {
        ExtensionInterfaceCompat windowExtension = getWindowExtension();
        if (windowExtension == null) {
            b2 = e0.i.b();
            callback.accept(new WindowLayoutInfo(b2));
            return;
        }
        boolean isActivityRegistered = isActivityRegistered(activity);
        WindowLayoutChangeCallbackWrapper windowLayoutChangeCallbackWrapper = new WindowLayoutChangeCallbackWrapper(activity, executor, callback);
        getWindowLayoutChangeCallbacks().add(windowLayoutChangeCallbackWrapper);
        if (isActivityRegistered) {
            Iterator<T> it = getWindowLayoutChangeCallbacks().iterator();
            while (true) {
                windowLayoutInfo = null;
                if (!it.hasNext()) {
                    obj = null;
                    break;
                } else {
                    obj = it.next();
                    if (i.a(activity, ((WindowLayoutChangeCallbackWrapper) obj).getActivity())) {
                        break;
                    }
                }
            }
            WindowLayoutChangeCallbackWrapper windowLayoutChangeCallbackWrapper2 = (WindowLayoutChangeCallbackWrapper) obj;
            if (windowLayoutChangeCallbackWrapper2 != null) {
                windowLayoutInfo = windowLayoutChangeCallbackWrapper2.getLastInfo();
            }
            if (windowLayoutInfo != null) {
                windowLayoutChangeCallbackWrapper.accept(windowLayoutInfo);
            }
        } else {
            windowExtension.onWindowLayoutChangeListenerAdded(activity);
        }
        q qVar = q.f150a;
    } finally {
        reentrantLock.unlock();
    }
}"
"<io.flutter.embedding.android.h: void j(int,int)>","/* JADX INFO: Access modifiers changed from: private */
public void j(int i2, int i3) {
    if (this.f248e == null) {
        throw new IllegalStateException(""changeSurfaceSize() should only be called when flutterRenderer is non-null."");
    }
    l.b.f(""FlutterSurfaceView"", ""Notifying FlutterRenderer that Android surface size has changed to "" + i2 + "" x "" + i3);
    this.f248e.u(i2, i3);
}"
"<io.flutter.embedding.android.h: boolean gatherTransparentRegion(android.graphics.Region)>","// android.view.SurfaceView, android.view.View
@Override
public boolean gatherTransparentRegion(Region region) {
    if (getAlpha() < 1.0f) {
        return false;
    }
    int[] iArr = new int[2];
    getLocationInWindow(iArr);
    region.op(iArr[0], iArr[1], (iArr[0] + getRight()) - getLeft(), (iArr[1] + getBottom()) - getTop(), Region.Op.DIFFERENCE);
    return true;
}"
"<io.flutter.embedding.android.h: void m()>","private void m() {
    if (this.f244a) {
        getHolder().setFormat(-2);
        setZOrderOnTop(true);
    }
    getHolder().addCallback(this.f249f);
    setAlpha(0.0f);
}"
"<io.flutter.embedding.android.h: void l()>","/* JADX INFO: Access modifiers changed from: private */
public void l() {
    w.a aVar = this.f248e;
    if (aVar == null) {
        throw new IllegalStateException(""disconnectSurfaceFromRenderer() should only be called when flutterRenderer is non-null."");
    }
    aVar.t();
}"
"<io.flutter.embedding.android.h: w.a getAttachedRenderer()>","// w.c
@Override
public w.a getAttachedRenderer() {
    return this.f248e;
}"
"<io.flutter.embedding.android.h: void c()>","// w.c
@Override
public void c() {
    if (this.f248e == null) {
        l.b.g(""FlutterSurfaceView"", ""detachFromRenderer() invoked when no FlutterRenderer was attached."");
        return;
    }
    if (getWindowToken() != null) {
        l.b.f(""FlutterSurfaceView"", ""Disconnecting FlutterRenderer from Android surface."");
        l();
    }
    setAlpha(0.0f);
    this.f248e.p(this.f250g);
    this.f248e = null;
    this.f247d = false;
}"
"<io.flutter.embedding.android.h: void b(w.a)>","// w.c
@Override
public void b(w.a aVar) {
    l.b.f(""FlutterSurfaceView"", ""Attaching to FlutterRenderer."");
    if (this.f248e != null) {
        l.b.f(""FlutterSurfaceView"", ""Already connected to a FlutterRenderer. Detaching from old one and attaching to new one."");
        this.f248e.t();
        this.f248e.p(this.f250g);
    }
    this.f248e = aVar;
    this.f247d = true;
    aVar.f(this.f250g);
    if (this.f245b) {
        l.b.f(""FlutterSurfaceView"", ""Surface is available for rendering. Connecting FlutterRenderer to Android surface."");
        k();
    }
    this.f246c = false;
}"
"<io.flutter.embedding.android.h: void k()>","/* JADX INFO: Access modifiers changed from: private */
public void k() {
    if (this.f248e == null || getHolder() == null) {
        throw new IllegalStateException(""connectSurfaceToRenderer() should only be called when flutterRenderer and getHolder() are non-null."");
    }
    this.f248e.s(getHolder().getSurface(), this.f246c);
}"
"<io.flutter.embedding.android.h: void a()>","// w.c
@Override
public void a() {
    if (this.f248e == null) {
        l.b.g(""FlutterSurfaceView"", ""pause() invoked when no FlutterRenderer was attached."");
        return;
    }
    this.f248e = null;
    this.f246c = true;
    this.f247d = false;
}"
"<io.flutter.embedding.android.h: void f(io.flutter.embedding.android.h)>","// w.b
@Override
public void f() {
}"
"<kotlinx.coroutines.internal.c0: int a(java.lang.String,int,int,int)>","public static final int a(String str, int i2, int i3, int i4) {
    return (int) a0.c(str, i2, i3, i4);
}"
"<kotlinx.coroutines.internal.c0: long b(java.lang.String,long,long,long)>","public static final long b(String str, long j2, long j3, long j4) {
    Long h2;
    String d2 = a0.d(str);
    if (d2 == null) {
        return j2;
    }
    h2 = t0.l.h(d2);
    if (h2 == null) {
        throw new IllegalStateException((""System property '"" + str + ""' has unrecognized value '"" + d2 + '\'').toString());
    }
    long longValue = h2.longValue();
    boolean z2 = false;
    if (j3 <= longValue && longValue <= j4) {
        z2 = true;
    }
    if (z2) {
        return longValue;
    }
    throw new IllegalStateException((""System property '"" + str + ""' should be in range "" + j3 + "".."" + j4 + "", but is '"" + longValue + '\'').toString());
}"
"<kotlinx.coroutines.internal.c0: int d(java.lang.String,int,int,int,int,java.lang.Object)>","public static /* synthetic */
int d(String str, int i2, int i3, int i4, int i5, Object obj) {
    if ((i5 & 4) != 0) {
        i3 = 1;
    }
    if ((i5 & 8) != 0) {
        i4 = Integer.MAX_VALUE;
    }
    return a0.b(str, i2, i3, i4);
}"
"<kotlinx.coroutines.internal.c0: long e(java.lang.String,long,long,long,int,java.lang.Object)>","public static /* synthetic */
long e(String str, long j2, long j3, long j4, int i2, Object obj) {
    if ((i2 & 4) != 0) {
        j3 = 1;
    }
    long j5 = j3;
    if ((i2 & 8) != 0) {
        j4 = Long.MAX_VALUE;
    }
    return a0.c(str, j2, j5, j4);
}"
"<kotlinx.coroutines.internal.c0: boolean c(java.lang.String,boolean)>","public static final boolean c(String str, boolean z2) {
    String d2 = a0.d(str);
    return d2 == null ? z2 : Boolean.parseBoolean(d2);
}"
"<io.flutter.embedding.engine.b: void c(java.lang.String,io.flutter.embedding.engine.a)>","public void c(String str, a aVar) {
    if (aVar != null) {
        this.f379a.put(str, aVar);
    } else {
        this.f379a.remove(str);
    }
}"
"<io.flutter.embedding.engine.b: void d(java.lang.String)>","public void d(String str) {
    c(str, null);
}"
"<u0.r: void y(java.lang.Throwable)>","// u0.a0
@Override
public void y(Throwable th) {
    this.f1333h.g(z());
}"
"<u0.r: boolean f(java.lang.Throwable)>","// u0.q
@Override
public boolean f(Throwable th) {
    return z().D(th);
}"
"<io.flutter.plugins.webviewflutter.m2: void postMessage(java.lang.String)>","@JavascriptInterface
public void postMessage(final String str) {
    Runnable runnable = new // from class: io.flutter.plugins.webviewflutter.l2
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            m2.this.f(str);
        }
    };
    if (this.f704a.getLooper() == Looper.myLooper()) {
        runnable.run();
    } else {
        this.f704a.post(runnable);
    }
}"
"<io.flutter.plugins.webviewflutter.m2: void e(java.lang.Void)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
void e(Void r02) {
}"
"<io.flutter.plugins.webviewflutter.m2: void g(java.lang.Void)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
void g(Void r02) {
}"
"<io.flutter.plugins.webviewflutter.m2: void f(java.lang.String)>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void f(String str) {
    n2 n2Var = this.f706c;
    if (n2Var != null) {
        n2Var.j(this, str, new // from class: io.flutter.plugins.webviewflutter.j2
        k.j.a() {

            // io.flutter.plugins.webviewflutter.k.j.a
            @Override
            public final void a(Object obj) {
                m2.e((Void) obj);
            }
        });
    }
}"
"<io.flutter.plugins.webviewflutter.m2: void a()>","// io.flutter.plugins.webviewflutter.k.j.a
@Override
public final void a(Object obj) {
    m2.e((Void) obj);
}"
"<e0.r: void add(java.lang.Object)>","// java.util.ListIterator
@Override
public /* bridge */
/* synthetic */
void add(Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.r: boolean hasPrevious()>","// java.util.ListIterator
@Override
public boolean hasPrevious() {
    return false;
}"
"<e0.r: void set(java.lang.Object)>","// java.util.ListIterator
@Override
public /* bridge */
/* synthetic */
void set(Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.r: void remove()>","// java.util.ListIterator, java.util.Iterator
@Override
public void remove() {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.r: int previousIndex()>","// java.util.ListIterator
@Override
public int previousIndex() {
    return -1;
}"
"<e0.r: int nextIndex()>","// java.util.ListIterator
@Override
public int nextIndex() {
    return 0;
}"
"<e0.r: boolean hasNext()>","// java.util.ListIterator, java.util.Iterator
@Override
public boolean hasNext() {
    return false;
}"
"<u0.l1: void a(java.lang.Throwable)>","// u0.j
@Override
public void a(Throwable th) {
    this.f1313d.invoke(th);
}"
"<io.flutter.plugins.webviewflutter.y2: void b(java.lang.Long,java.lang.Boolean)>","// androidx.webkit.WebViewClientCompat
@Override
@SuppressLint({ ""RequiresFeature"" })
public void b(WebView webView, WebResourceRequest webResourceRequest, j.e eVar) {
    x2 x2Var = this.f790b;
    if (x2Var != null) {
        x2Var.F(this, webView, webResourceRequest, eVar, new // from class: io.flutter.plugins.webviewflutter.d3
        k.y.a() {

            // io.flutter.plugins.webviewflutter.k.y.a
            @Override
            public final void a(Object obj) {
                y2.b.m((Void) obj);
            }
        });
    }
}"
"<u0.d2: boolean Q(java.lang.Throwable)>","// u0.v1
@Override
protected boolean Q(Throwable th) {
    h0.a(getContext(), th);
    return true;
}"
"<androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!i.a(HardwareFoldingFeature.class, obj == null ? null : obj.getClass())) {
        return false;
    }
    Objects.requireNonNull(obj, ""null cannot be cast to non-null type androidx.window.layout.HardwareFoldingFeature"");
    HardwareFoldingFeature hardwareFoldingFeature = (HardwareFoldingFeature) obj;
    return i.a(this.featureBounds, hardwareFoldingFeature.featureBounds) && i.a(this.type, hardwareFoldingFeature.type) && i.a(getState(), hardwareFoldingFeature.getState());
}"
"<androidx.window.layout.HardwareFoldingFeature: int hashCode()>","public int hashCode() {
    return (((this.featureBounds.hashCode() * 31) + this.type.hashCode()) * 31) + getState().hashCode();
}"
"<androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()>","// androidx.window.layout.FoldingFeature
@Override
public boolean isSeparating() {
    Type type = this.type;
    Type.Companion companion = Type.Companion;
    if (i.a(type, companion.getHINGE())) {
        return true;
    }
    return i.a(this.type, companion.getFOLD()) && i.a(getState(), FoldingFeature.State.HALF_OPENED);
}"
"<org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface: int getErrorCode()>","int getErrorCode();"
"<io.flutter.plugins.webviewflutter.q3: void e(java.lang.Long,java.lang.Long)>","// io.flutter.plugin.platform.f
@Override
public void e(View view) {
    setContainerView(view);
}"
"<io.flutter.plugins.webviewflutter.q3: void n(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void n(Long l2, Long l3) {
    ((WebView) this.f740a.h(l2.longValue())).setWebChromeClient((WebChromeClient) this.f740a.h(l3.longValue()));
}"
"<io.flutter.plugins.webviewflutter.q3: void a(java.lang.Long)>","// io.flutter.plugins.webviewflutter.p2
@Override
public void a() {
    this.f744d.b();
    this.f745e.b();
    this.f746f.b();
    Iterator<b<m2>> it = this.f747g.values().iterator();
    while (it.hasNext()) {
        it.next().b();
    }
    this.f747g.clear();
}"
"<io.flutter.plugins.webviewflutter.q3: void A(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void A(Long l2, Boolean bool) {
    ((WebView) this.f740a.h(l2.longValue())).clearCache(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.q3: void w(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void w(Long l2, Long l3) {
    ((WebView) this.f740a.h(l2.longValue())).setBackgroundColor(l3.intValue());
}"
"<io.flutter.plugins.webviewflutter.q3: void p(java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void p(Long l2) {
    ((WebView) this.f740a.h(l2.longValue())).goForward();
}"
"<io.flutter.plugins.webviewflutter.q3: void y(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void y(Long l2, Long l3) {
    ((WebView) this.f740a.h(l2.longValue())).setWebViewClient((WebViewClient) this.f740a.h(l3.longValue()));
}"
"<io.flutter.plugins.webviewflutter.q3: void j(java.lang.Long,java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void j(Long l2, Long l3, Long l4) {
    ((WebView) this.f740a.h(l2.longValue())).scrollBy(l3.intValue(), l4.intValue());
}"
"<io.flutter.plugins.webviewflutter.q3: void s(java.lang.Long,java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void s(Long l2, Long l3, Long l4) {
    ((WebView) this.f740a.h(l2.longValue())).scrollTo(l3.intValue(), l4.intValue());
}"
"<io.flutter.plugins.webviewflutter.q3: void q(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void q(Long l2, Long l3) {
    WebView webView = (WebView) this.f740a.h(l2.longValue());
    m2 m2Var = (m2) this.f740a.h(l3.longValue());
    webView.addJavascriptInterface(m2Var, m2Var.f705b);
}"
"<io.flutter.plugins.webviewflutter.q3: void v(java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void v(Long l2) {
    ((WebView) this.f740a.h(l2.longValue())).goBack();
}"
"<io.flutter.plugins.webviewflutter.q3: void l(java.lang.Long,java.lang.String,java.lang.String,java.lang.String)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void l(Long l2, String str, String str2, String str3) {
    ((WebView) this.f740a.h(l2.longValue())).loadData(str, str2, str3);
}"
"<io.flutter.plugins.webviewflutter.q3: void o(java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$n)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void o(Long l2, String str, final k.n<String> nVar) {
    WebView webView = (WebView) this.f740a.h(l2.longValue());
    Objects.requireNonNull(nVar);
    webView.evaluateJavascript(str, new // from class: io.flutter.plugins.webviewflutter.p3
    ValueCallback() {

        // android.webkit.ValueCallback
        @Override
        public final void onReceiveValue(Object obj) {
            k.n.this.a((String) obj);
        }
    });
}"
"<io.flutter.plugins.webviewflutter.q3: void z(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void z(Long l2, Long l3) {
    ((WebView) this.f740a.h(l2.longValue())).setDownloadListener((DownloadListener) this.f740a.h(l3.longValue()));
}"
"<io.flutter.plugins.webviewflutter.q3: void m(java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void m(Long l2) {
    ((WebView) this.f740a.h(l2.longValue())).reload();
}"
"<io.flutter.plugins.webviewflutter.q3: void B(android.content.Context)>","public void B(Context context) {
    this.f743d = context;
}"
"<io.flutter.plugins.webviewflutter.q3: void c(java.lang.Boolean)>","// io.flutter.plugin.platform.f
@Override
public void c() {
    k();
}"
"<io.flutter.plugins.webviewflutter.q3: void u(java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void u(Long l2, String str, String str2, String str3, String str4, String str5) {
    ((WebView) this.f740a.h(l2.longValue())).loadDataWithBaseURL(str, str2, str3, str4, str5);
}"
"<io.flutter.plugins.webviewflutter.q3: void b(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.g2, io.flutter.plugin.platform.f
@Override
public void b() {
    super.b();
    destroy();
}"
"<io.flutter.plugins.webviewflutter.q3: void r(java.lang.Long,java.lang.String,java.util.Map)>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void r(Long l2, String str, Map<String, String> map) {
    ((WebView) this.f740a.h(l2.longValue())).loadUrl(str, map);
}"
"<io.flutter.plugins.webviewflutter.q3: void h(java.lang.Long,java.lang.String,byte[])>","// io.flutter.plugins.webviewflutter.k.c0
@Override
public void h(Long l2, String str, byte[] bArr) {
    ((WebView) this.f740a.h(l2.longValue())).postUrl(str, bArr);
}"
"<io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()>","public void detachFromNativeAndReleaseResources() {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    this.shellHolderLock.writeLock().lock();
    try {
        nativeDestroy(this.nativeShellHolderId.longValue());
        this.nativeShellHolderId = null;
    } finally {
        this.shellHolderLock.writeLock().unlock();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)>","public long performNativeAttach(FlutterJNI flutterJNI) {
    return nativeAttach(flutterJNI);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)>","private native void nativeUpdateJavaAssetManager(long j2, AssetManager assetManager, String str);"
"<io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])>","public void loadDartDeferredLibrary(int i2, String[] strArr) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeLoadDartDeferredLibrary(this.nativeShellHolderId.longValue(), i2, strArr);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)>","private native void nativeDeferredComponentInstallFailure(int i2, String str, boolean z2);"
"<io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()>","private void ensureRunningOnMainThread() {
    if (Looper.myLooper() == this.mainLooper) {
        return;
    }
    throw new RuntimeException(""Methods marked with @UiThread must be executed on the main thread. Current thread: "" + Thread.currentThread().getName());
}"
"<io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.c$g,java.lang.Object)>","public void dispatchSemanticsAction(int i2, int i3, ByteBuffer byteBuffer, int i4) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeDispatchSemanticsAction(this.nativeShellHolderId.longValue(), i2, i3, byteBuffer, i4);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)>","private native void nativeSurfaceCreated(long j2, Surface surface);"
"<io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$b)>","public void setAsyncWaitForVsyncDelegate(b bVar) {
    asyncWaitForVsyncDelegate = bVar;
}"
"<io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()>","public void onSurfaceDestroyed() {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    onRenderingStopped();
    nativeSurfaceDestroyed(this.nativeShellHolderId.longValue());
}"
"<io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.a$b)>","public void addEngineLifecycleListener(a.b bVar) {
    ensureRunningOnMainThread();
    this.engineLifecycleListeners.add(bVar);
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)>","private native boolean nativeFlutterTextUtilsIsEmojiModifierBase(int i2);"
"<io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)>","public boolean isCodePointEmojiModifierBase(int i2) {
    return nativeFlutterTextUtilsIsEmojiModifierBase(i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()>","void onRenderingStopped() {
    ensureRunningOnMainThread();
    Iterator<w.b> it = this.flutterUiDisplayListeners.iterator();
    while (it.hasNext()) {
        it.next().f();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)>","private native void nativeMarkTextureFrameAvailable(long j2, long j3);"
"<io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.c$g)>","public void dispatchSemanticsAction(int i2, int i3, ByteBuffer byteBuffer, int i4) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeDispatchSemanticsAction(this.nativeShellHolderId.longValue(), i2, i3, byteBuffer, i4);
}"
"<io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(m.d)>","public void setPlatformMessageHandler(m.d dVar) {
    ensureRunningOnMainThread();
    this.platformMessageHandler = dVar;
}"
"<io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(w.b)>","public void addIsDisplayingFlutterUiListener(w.b bVar) {
    ensureRunningOnMainThread();
    this.flutterUiDisplayListeners.add(bVar);
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)>","public boolean isCodePointVariantSelector(int i2) {
    return nativeFlutterTextUtilsIsVariationSelector(i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)>","private native void nativeInvokePlatformMessageResponseCallback(long j2, int i2, ByteBuffer byteBuffer, int i3);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)>","private native void nativeInvokePlatformMessageEmptyResponseCallback(long j2, int i2);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)>","private native void nativeSetAccessibilityFeatures(long j2, int i2);"
"<io.flutter.embedding.engine.FlutterJNI: void loadLibrary()>","public void loadLibrary() {
    if (loadLibraryCalled) {
        l.b.g(TAG, ""FlutterJNI.loadLibrary called more than once"");
    }
    System.loadLibrary(""flutter"");
    loadLibraryCalled = true;
}"
"<io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(z.a)>","public void setLocalizationPlugin(z.a aVar) {
    ensureRunningOnMainThread();
    this.localizationPlugin = aVar;
}"
"<io.flutter.embedding.engine.FlutterJNI: void lambda$decodeImage$0(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
void lambda$decodeImage$0(long j2, ImageDecoder imageDecoder, ImageDecoder.ImageInfo imageInfo, ImageDecoder.Source source) {
    imageDecoder.setTargetColorSpace(ColorSpace.get(ColorSpace.Named.SRGB));
    imageDecoder.setAllocator(1);
    Size size = imageInfo.getSize();
    nativeImageHeaderCallback(j2, size.getWidth(), size.getHeight());
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean isAttached()>","public boolean isAttached() {
    return this.nativeShellHolderId != null;
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)>","private native void nativeDispatchPlatformMessage(long j2, String str, ByteBuffer byteBuffer, int i2, int i3);"
"<io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$a)>","public void setAccessibilityDelegate(a aVar) {
    ensureRunningOnMainThread();
    this.accessibilityDelegate = aVar;
}"
"<io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)>","public void onSurfaceCreated(Surface surface) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeSurfaceCreated(this.nativeShellHolderId.longValue(), surface);
}"
"<io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)>","public void setAccessibilityFeatures(int i2) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeSetAccessibilityFeatures(this.nativeShellHolderId.longValue(), i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()>","public void notifyLowMemoryWarning() {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeNotifyLowMemoryWarning(this.nativeShellHolderId.longValue());
}"
"<io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)>","public void unregisterTexture(long j2) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeUnregisterTexture(this.nativeShellHolderId.longValue(), j2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)>","public void dispatchSemanticsAction(int i2, int i3, ByteBuffer byteBuffer, int i4) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeDispatchSemanticsAction(this.nativeShellHolderId.longValue(), i2, i3, byteBuffer, i4);
}"
"<io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)>","public void updateJavaAssetManager(AssetManager assetManager, String str) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeUpdateJavaAssetManager(this.nativeShellHolderId.longValue(), assetManager, str);
}"
"<io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.a$b)>","public void removeEngineLifecycleListener(a.b bVar) {
    ensureRunningOnMainThread();
    this.engineLifecycleListeners.remove(bVar);
}"
"<io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()>","public void prefetchDefaultFontManager() {
    if (prefetchDefaultFontManagerCalled) {
        l.b.g(TAG, ""FlutterJNI.prefetchDefaultFontManager called more than once"");
    }
    nativePrefetchDefaultFontManager();
    prefetchDefaultFontManagerCalled = true;
}"
"<io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.q)>","public void setPlatformViewsController(q qVar) {
    ensureRunningOnMainThread();
    this.platformViewsController = qVar;
}"
"<io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])>","private void updateCustomAccessibilityActions(ByteBuffer byteBuffer, String[] strArr) {
    ensureRunningOnMainThread();
    a aVar = this.accessibilityDelegate;
    if (aVar != null) {
        aVar.b(byteBuffer, strArr);
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)>","public boolean isCodePointEmoji(int i2) {
    return nativeFlutterTextUtilsIsEmoji(i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)>","public void setSemanticsEnabled(boolean z2) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeSetSemanticsEnabled(this.nativeShellHolderId.longValue(), z2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)>","public void onDisplayOverlaySurface(int i2, int i3, int i4, int i5, int i6) {
    ensureRunningOnMainThread();
    q qVar = this.platformViewsController;
    if (qVar == null) {
        throw new RuntimeException(""platformViewsController must be set before attempting to position an overlay surface"");
    }
    qVar.Y(i2, i3, i4, i5, i6);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)>","private native void nativeUnregisterTexture(long j2, long j3);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)>","private native void nativeDispatchEmptyPlatformMessage(long j2, String str, int i2);"
"<io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>","private void updateSemantics(ByteBuffer byteBuffer, String[] strArr, ByteBuffer[] byteBufferArr) {
    ensureRunningOnMainThread();
    a aVar = this.accessibilityDelegate;
    if (aVar != null) {
        aVar.a(byteBuffer, strArr, byteBufferArr);
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)>","private native boolean nativeFlutterTextUtilsIsVariationSelector(int i2);"
"<io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(w.b)>","public void removeIsDisplayingFlutterUiListener(w.b bVar) {
    ensureRunningOnMainThread();
    this.flutterUiDisplayListeners.remove(bVar);
}"
"<io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)>","public void dispatchPointerDataPacket(ByteBuffer byteBuffer, int i2) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeDispatchPointerDataPacket(this.nativeShellHolderId.longValue(), byteBuffer, i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()>","private void ensureAttachedToNative() {
    if (this.nativeShellHolderId == null) {
        throw new RuntimeException(""Cannot execute operation because FlutterJNI is not attached to native."");
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)>","private native void nativeSetSemanticsEnabled(long j2, boolean z2);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)>","private native void nativeSurfaceWindowChanged(long j2, Surface surface);"
"<io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)>","public void dispatchEmptyPlatformMessage(String str, int i2) {
    ensureRunningOnMainThread();
    if (isAttached()) {
        nativeDispatchEmptyPlatformMessage(this.nativeShellHolderId.longValue(), str, i2);
        return;
    }
    l.b.g(TAG, ""Tried to send a platform message to Flutter, but FlutterJNI was detached from native C++. Could not send. Channel: "" + str + "". Response ID: "" + i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)>","public boolean isCodePointEmojiModifier(int i2) {
    return nativeFlutterTextUtilsIsEmojiModifier(i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)>","public void requestDartDeferredLibrary(int i2) {
    n.a aVar = this.deferredComponentManager;
    if (aVar != null) {
        aVar.c(i2, null);
    } else {
        l.b.b(TAG, ""No DeferredComponentManager found. Android setup must be completed before using split AOT deferred components."");
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void a(long,android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>","void a(ByteBuffer byteBuffer, String[] strArr, ByteBuffer[] byteBufferArr);"
"<io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)>","private native boolean nativeFlutterTextUtilsIsRegionalIndicator(int i2);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])>","private native void nativeSetViewportMetrics(long j2, float f2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, int i14, int i15, int i16, int[] iArr, int[] iArr2, int[] iArr3);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)>","private native void nativeSurfaceDestroyed(long j2);"
"<io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()>","private void onPreEngineRestart() {
    Iterator<a.b> it = this.engineLifecycleListeners.iterator();
    while (it.hasNext()) {
        it.next().a();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)>","public void dispatchPlatformMessage(String str, ByteBuffer byteBuffer, int i2, int i3) {
    ensureRunningOnMainThread();
    if (isAttached()) {
        nativeDispatchPlatformMessage(this.nativeShellHolderId.longValue(), str, byteBuffer, i2, i3);
        return;
    }
    l.b.g(TAG, ""Tried to send a platform message to Flutter, but FlutterJNI was detached from native C++. Could not send. Channel: "" + str + "". Response ID: "" + i3);
}"
"<io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)>","public void invokePlatformMessageResponseCallback(int i2, ByteBuffer byteBuffer, int i3) {
    if (!byteBuffer.isDirect()) {
        throw new IllegalArgumentException(""Expected a direct ByteBuffer."");
    }
    this.shellHolderLock.readLock().lock();
    try {
        if (isAttached()) {
            nativeInvokePlatformMessageResponseCallback(this.nativeShellHolderId.longValue(), i2, byteBuffer, i3);
        } else {
            l.b.g(TAG, ""Tried to send a platform message response, but FlutterJNI was detached from native C++. Could not send. Response ID: "" + i2);
        }
    } finally {
        this.shellHolderLock.readLock().unlock();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)>","public void onSurfaceWindowChanged(Surface surface) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeSurfaceWindowChanged(this.nativeShellHolderId.longValue(), surface);
}"
"<io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)>","private static void asyncWaitForVsync(long j2) {
    b bVar = asyncWaitForVsyncDelegate;
    if (bVar == null) {
        throw new IllegalStateException(""An AsyncWaitForVsyncDelegate must be registered with FlutterJNI before asyncWaitForVsync() is invoked."");
    }
    bVar.a(j2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)>","private native void nativeRegisterTexture(long j2, long j3, WeakReference<SurfaceTextureWrapper> weakReference);"
"<io.flutter.embedding.engine.FlutterJNI: void updateRefreshRate()>","public void updateRefreshRate() {
    if (loadLibraryCalled) {
        nativeUpdateRefreshRate(refreshRateFPS);
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])>","public void setViewportMetrics(float f2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, int i14, int i15, int i16, int[] iArr, int[] iArr2, int[] iArr3) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeSetViewportMetrics(this.nativeShellHolderId.longValue(), f2, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, iArr, iArr2, iArr3);
}"
"<io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)>","private native long nativeAttach(FlutterJNI flutterJNI);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)>","private native void nativeRunBundleAndSnapshotFromLibrary(long j2, String str, String str2, String str3, AssetManager assetManager, List<String> list);"
"<io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)>","public void invokePlatformMessageEmptyResponseCallback(int i2) {
    this.shellHolderLock.readLock().lock();
    try {
        if (isAttached()) {
            nativeInvokePlatformMessageEmptyResponseCallback(this.nativeShellHolderId.longValue(), i2);
        } else {
            l.b.g(TAG, ""Tried to send a platform message response, but FlutterJNI was detached from native C++. Could not send. Response ID: "" + i2);
        }
    } finally {
        this.shellHolderLock.readLock().unlock();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)>","public void onSurfaceChanged(int i2, int i3) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeSurfaceChanged(this.nativeShellHolderId.longValue(), i2, i3);
}"
"<io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)>","public void setRefreshRateFPS(float f2) {
    refreshRateFPS = f2;
    updateRefreshRate();
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)>","private native void nativeDestroy(long j2);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeUpdateRefreshRate(float)>","private native void nativeUpdateRefreshRate(float f2);"
"<io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(n.a)>","public void setDeferredComponentManager(n.a aVar) {
    ensureRunningOnMainThread();
    this.deferredComponentManager = aVar;
    if (aVar != null) {
        aVar.f(this);
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()>","private static native void nativePrefetchDefaultFontManager();"
"<io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)>","private native void nativeOnVsync(long j2, long j3, long j4);"
"<io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)>","private native boolean nativeFlutterTextUtilsIsEmoji(int i2);"
"<io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)>","public boolean isCodePointRegionalIndicator(int i2) {
    return nativeFlutterTextUtilsIsRegionalIndicator(i2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)>","public void registerTexture(long j2, SurfaceTextureWrapper surfaceTextureWrapper) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeRegisterTexture(this.nativeShellHolderId.longValue(), j2, new WeakReference<>(surfaceTextureWrapper));
}"
"<io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)>","public void init(Context context, String[] strArr, String str, String str2, String str3, long j2) {
    if (initCalled) {
        l.b.g(TAG, ""FlutterJNI.init called more than once"");
    }
    nativeInit(context, strArr, str, str2, str3, j2);
    initCalled = true;
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()>","private native boolean nativeGetIsSoftwareRenderingEnabled();"
"<io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)>","private void handlePlatformMessageResponse(int i2, ByteBuffer byteBuffer) {
    m.d dVar = this.platformMessageHandler;
    if (dVar != null) {
        dVar.e(i2, byteBuffer);
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)>","public void onVsync(long j2, long j3, long j4) {
    nativeOnVsync(j2, j3, j4);
}"
"<io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()>","public void destroyOverlaySurfaces() {
    ensureRunningOnMainThread();
    q qVar = this.platformViewsController;
    if (qVar == null) {
        throw new RuntimeException(""platformViewsController must be set before attempting to destroy an overlay surface"");
    }
    qVar.I();
}"
"<io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)>","public void handlePlatformMessage(String str, ByteBuffer byteBuffer, int i2, long j2) {
    m.d dVar = this.platformMessageHandler;
    if (dVar != null) {
        dVar.b(str, byteBuffer, i2, j2);
    } else {
        nativeCleanupMessageData(j2);
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)>","private static native void nativeInit(Context context, String[] strArr, String str, String str2, String str3, long j2);"
"<io.flutter.embedding.engine.FlutterJNI: void attachToNative()>","public void attachToNative() {
    ensureRunningOnMainThread();
    ensureNotAttachedToNative();
    this.shellHolderLock.writeLock().lock();
    try {
        this.nativeShellHolderId = Long.valueOf(performNativeAttach(this));
    } finally {
        this.shellHolderLock.writeLock().unlock();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)>","private native void nativeDispatchSemanticsAction(long j2, int i2, int i3, ByteBuffer byteBuffer, int i4);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)>","private native void nativeNotifyLowMemoryWarning(long j2);"
"<io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)>","private native void nativeDispatchPointerDataPacket(long j2, ByteBuffer byteBuffer, int i2);"
"<io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()>","public void onFirstFrame() {
    ensureRunningOnMainThread();
    Iterator<w.b> it = this.flutterUiDisplayListeners.iterator();
    while (it.hasNext()) {
        it.next().d();
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)>","private native void nativeCleanupMessageData(long j2);"
"<io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)>","public void markTextureFrameAvailable(long j2) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeMarkTextureFrameAvailable(this.nativeShellHolderId.longValue(), j2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)>","public void runBundleAndSnapshotFromLibrary(String str, String str2, String str3, AssetManager assetManager, List<String> list) {
    ensureRunningOnMainThread();
    ensureAttachedToNative();
    nativeRunBundleAndSnapshotFromLibrary(this.nativeShellHolderId.longValue(), str, str2, str3, assetManager, list);
}"
"<io.flutter.embedding.engine.FlutterJNI: void onEndFrame()>","public void onEndFrame() {
    ensureRunningOnMainThread();
    q qVar = this.platformViewsController;
    if (qVar == null) {
        throw new RuntimeException(""platformViewsController must be set before attempting to end the frame"");
    }
    qVar.a0();
}"
"<io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)>","public void cleanupMessageData(long j2) {
    nativeCleanupMessageData(j2);
}"
"<io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()>","public boolean getIsSoftwareRenderingEnabled() {
    return nativeGetIsSoftwareRenderingEnabled();
}"
"<io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)>","public void deferredComponentInstallFailure(int i2, String str, boolean z2) {
    ensureRunningOnMainThread();
    nativeDeferredComponentInstallFailure(i2, str, z2);
}"
"<io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()>","public void onBeginFrame() {
    ensureRunningOnMainThread();
    q qVar = this.platformViewsController;
    if (qVar == null) {
        throw new RuntimeException(""platformViewsController must be set before attempting to begin the frame"");
    }
    qVar.W();
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)>","private native void nativeSurfaceChanged(long j2, int i2, int i3);"
"<io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()>","private void ensureNotAttachedToNative() {
    if (this.nativeShellHolderId != null) {
        throw new RuntimeException(""Cannot execute operation because FlutterJNI is attached to native."");
    }
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])>","private native void nativeLoadDartDeferredLibrary(long j2, int i2, String[] strArr);"
"<io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)>","public void onDisplayPlatformView(int i2, int i3, int i4, int i5, int i6, int i7, int i8, FlutterMutatorsStack flutterMutatorsStack) {
    ensureRunningOnMainThread();
    q qVar = this.platformViewsController;
    if (qVar == null) {
        throw new RuntimeException(""platformViewsController must be set before attempting to position a platform view"");
    }
    qVar.Z(i2, i3, i4, i5, i6, i7, i8, flutterMutatorsStack);
}"
"<io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)>","public static native void nativeImageHeaderCallback(long j2, int i2, int i3);"
"<io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)>","private native boolean nativeFlutterTextUtilsIsEmojiModifier(int i2);"
"<org.chromium.support_lib_boundary.WebResourceRequestBoundaryInterface: boolean isRedirect()>","boolean isRedirect();"
"<k.h: j.d[] e(android.webkit.WebMessagePort[])>","public static j.d[] e(WebMessagePort[] webMessagePortArr) {
    if (webMessagePortArr == null) {
        return null;
    }
    j.d[] dVarArr = new j.d[webMessagePortArr.length];
    for (int i2 = 0; i2 < webMessagePortArr.length; i2++) {
        dVarArr[i2] = new h(webMessagePortArr[i2]);
    }
    return dVarArr;
}"
"<k.h: j.c c(android.webkit.WebMessage)>","public static j.c c(WebMessage webMessage) {
    return b.d(webMessage);
}"
"<j0.a: void a(java.lang.Throwable,java.lang.Throwable)>","// i0.a
@Override
public void a(Throwable cause, Throwable exception) {
    i.e(cause, ""cause"");
    i.e(exception, ""exception"");
    cause.addSuppressed(exception);
}"
"<o0.c: int b()>","// o0.c
@Override
public int b() {
    return c.f1220e.b();
}"
"<o.d: void k(android.content.Context)>","public void k(Context context) {
    l(context, new c());
}"
"<o.d: boolean j(android.os.Bundle)>","private static boolean j(Bundle bundle) {
    if (bundle == null) {
        return true;
    }
    return bundle.getBoolean(""io.flutter.embedding.android.LeakVM"", true);
}"
"<o.d: void e(android.content.Context,java.lang.String[])>","/* JADX WARN: Removed duplicated region for block: B:38:0x0190  */
/* JADX WARN: Removed duplicated region for block: B:43:0x0193  */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public void e(android.content.Context r10, java.lang.String[] r11) {
    /*
            Method dump skipped, instructions count: 495
            To view this dump add '--comments-level debug' option
        */
    throw new UnsupportedOperationException(""Method not decompiled: o.d.e(android.content.Context, java.lang.String[]):void"");
}"
"<o.d: void l(android.content.Context,o.d$c)>","public void l(Context context, c cVar) {
    if (this.f1206b != null) {
        return;
    }
    if (Looper.myLooper() != Looper.getMainLooper()) {
        throw new IllegalStateException(""startInitialization must be called on the main thread"");
    }
    c0.e.a(""FlutterLoader#startInitialization"");
    try {
        Context applicationContext = context.getApplicationContext();
        this.f1206b = cVar;
        this.f1207c = SystemClock.uptimeMillis();
        this.f1208d = o.a.e(applicationContext);
        (Build.VERSION.SDK_INT >= 17 ? io.flutter.view.e.g((DisplayManager) applicationContext.getSystemService(""display""), this.f1209e) : io.flutter.view.e.f(((WindowManager) applicationContext.getSystemService(""window"")).getDefaultDisplay().getRefreshRate(), this.f1209e)).h();
        this.f1211g = this.f1210f.submit(new a(applicationContext));
    } finally {
        c0.e.d();
    }
}"
"<o.d: boolean d()>","public boolean d() {
    return this.f1208d.f1203g;
}"
"<androidx.window.layout.FoldingFeature: boolean isSeparating()>","boolean isSeparating();"
"<io.flutter.plugin.platform.h: boolean a(java.lang.String,io.flutter.plugin.platform.g)>","boolean a(String str, g gVar);"
"<u0.i2: g0.g minusKey(g0.g$c)>","// g0.g
@Override
public g0.g minusKey(g.c<?> cVar) {
    return g.b.a.c(this, cVar);
}"
"<u0.i2: g0.g plus(g0.g)>","// g0.g
@Override
public g0.g plus(g0.g gVar) {
    return g.b.a.d(this, gVar);
}"
"<u0.y: boolean a()>","/* JADX WARN: Type inference failed for: r0v0, types: [int, boolean] */
public final boolean a() {
    return this._handled;
}"
"<u0.y: boolean b()>","public final boolean b() {
    return f1372b.compareAndSet(this, 0, 1);
}"
"<io.flutter.embedding.android.d: boolean s()>","// io.flutter.embedding.android.e.c
@Override
public boolean s() {
    return true;
}"
"<io.flutter.embedding.android.d: androidx.lifecycle.c e()>","// io.flutter.embedding.android.e.c, androidx.lifecycle.f
@Override
public androidx.lifecycle.c e() {
    return this.f214b;
}"
"<io.flutter.embedding.android.d: void b()>","// io.flutter.embedding.android.e.c
@Override
public void b() {
    l.b.g(""FlutterActivity"", ""FlutterActivity "" + this + "" connection to the engine "" + H() + "" evicted by another attaching activity"");
    e eVar = this.f213a;
    if (eVar != null) {
        eVar.s();
        this.f213a.t();
    }
}"
"<io.flutter.embedding.android.d: boolean c()>","// io.flutter.plugin.platform.c.d
@Override
public boolean c() {
    return false;
}"
"<io.flutter.embedding.android.d: void t(io.flutter.embedding.android.i)>","// io.flutter.embedding.android.e.c
@Override
public void t(i iVar) {
}"
"<io.flutter.embedding.android.d: void C(io.flutter.embedding.android.h)>","// io.flutter.embedding.android.e.c
@Override
public void C(h hVar) {
}"
"<io.flutter.embedding.android.d: void O()>","private void O() {
    try {
        Bundle I = I();
        if (I != null) {
            int i2 = I.getInt(""io.flutter.embedding.android.NormalTheme"", -1);
            if (i2 != -1) {
                setTheme(i2);
            }
        } else {
            l.b.f(""FlutterActivity"", ""Using the launch theme as normal theme."");
        }
    } catch (PackageManager.NameNotFoundException unused) {
        l.b.b(""FlutterActivity"", ""Could not read meta-data for FlutterActivity. Using the launch theme as normal theme."");
    }
}"
"<io.flutter.embedding.android.d: void onActivityResult(int,int,android.content.Intent)>","// android.app.Activity
@Override
protected void onActivityResult(int i2, int i3, Intent intent) {
    if (N(""onActivityResult"")) {
        this.f213a.o(i2, i3, intent);
    }
}"
"<io.flutter.embedding.android.d: boolean n()>","// io.flutter.embedding.android.e.c
@Override
public boolean n() {
    return true;
}"
"<io.flutter.embedding.android.d: void onNewIntent(android.content.Intent)>","// android.app.Activity
@Override
protected void onNewIntent(Intent intent) {
    super.onNewIntent(intent);
    if (N(""onNewIntent"")) {
        this.f213a.u(intent);
    }
}"
"<io.flutter.embedding.android.d: void onSaveInstanceState(android.os.Bundle)>","// android.app.Activity
@Override
protected void onSaveInstanceState(Bundle bundle) {
    super.onSaveInstanceState(bundle);
    if (N(""onSaveInstanceState"")) {
        this.f213a.A(bundle);
    }
}"
"<io.flutter.embedding.android.d: void onCreate(android.os.Bundle)>","// android.app.Activity
@Override
protected void onCreate(Bundle bundle) {
    O();
    super.onCreate(bundle);
    e eVar = new e(this);
    this.f213a = eVar;
    eVar.p(this);
    this.f213a.y(bundle);
    this.f214b.g(c.a.ON_CREATE);
    L();
    E();
    setContentView(F());
    D();
}"
"<io.flutter.embedding.android.d: io.flutter.embedding.engine.a H()>","protected io.flutter.embedding.engine.a H() {
    return this.f213a.k();
}"
"<io.flutter.embedding.android.d: void onStop()>","// android.app.Activity
@Override
protected void onStop() {
    super.onStop();
    if (N(""onStop"")) {
        this.f213a.C();
    }
    this.f214b.g(c.a.ON_STOP);
}"
"<io.flutter.embedding.android.d: void L()>","public void L() {
    if (Build.VERSION.SDK_INT >= 33) {
        getOnBackInvokedDispatcher().registerOnBackInvokedCallback(0, this.f215c);
    }
}"
"<io.flutter.embedding.android.d: void onStart()>","// android.app.Activity
@Override
protected void onStart() {
    super.onStart();
    this.f214b.g(c.a.ON_START);
    if (N(""onStart"")) {
        this.f213a.B();
    }
}"
"<io.flutter.embedding.android.d: boolean w()>","// io.flutter.embedding.android.e.c
@Override
public boolean w() {
    return getIntent().hasExtra(""enable_state_restoration"") ? getIntent().getBooleanExtra(""enable_state_restoration"", false) : u() == null;
}"
"<io.flutter.embedding.android.d: void onPause()>","// android.app.Activity
@Override
protected void onPause() {
    super.onPause();
    if (N(""onPause"")) {
        this.f213a.v();
    }
    this.f214b.g(c.a.ON_PAUSE);
}"
"<io.flutter.embedding.android.d: void y(io.flutter.embedding.engine.a)>","// io.flutter.embedding.android.e.c
@Override
public void y(io.flutter.embedding.engine.a aVar) {
}"
"<io.flutter.embedding.android.d: void onTrimMemory(int)>","// android.app.Activity, android.content.ComponentCallbacks2
@Override
public void onTrimMemory(int i2) {
    super.onTrimMemory(i2);
    if (N(""onTrimMemory"")) {
        this.f213a.D(i2);
    }
}"
"<io.flutter.embedding.android.d: boolean q()>","// io.flutter.embedding.android.e.c
@Override
public boolean q() {
    try {
        Bundle I = I();
        if (I != null) {
            return I.getBoolean(""flutter_deeplinking_enabled"");
        }
        return false;
    } catch (PackageManager.NameNotFoundException unused) {
        return false;
    }
}"
"<io.flutter.embedding.android.d: void onRequestPermissionsResult(int,java.lang.String[],int[])>","// android.app.Activity
@Override
public void onRequestPermissionsResult(int i2, String[] strArr, int[] iArr) {
    if (N(""onRequestPermissionsResult"")) {
        this.f213a.x(i2, strArr, iArr);
    }
}"
"<io.flutter.embedding.android.d: void onBackPressed()>","// android.app.Activity
@Override
public void onBackPressed() {
    if (N(""onBackPressed"")) {
        this.f213a.q();
    }
}"
"<io.flutter.embedding.android.d: void P()>","public void P() {
    if (Build.VERSION.SDK_INT >= 33) {
        getOnBackInvokedDispatcher().unregisterOnBackInvokedCallback(this.f215c);
    }
}"
"<io.flutter.embedding.android.d: void onResume()>","// android.app.Activity
@Override
protected void onResume() {
    super.onResume();
    this.f214b.g(c.a.ON_RESUME);
    if (N(""onResume"")) {
        this.f213a.z();
    }
}"
"<io.flutter.embedding.android.d: void onDestroy()>","// android.app.Activity
@Override
protected void onDestroy() {
    super.onDestroy();
    if (N(""onDestroy"")) {
        this.f213a.s();
        this.f213a.t();
    }
    M();
    this.f214b.g(c.a.ON_DESTROY);
}"
"<io.flutter.embedding.android.d: boolean p()>","// io.flutter.embedding.android.e.c
@Override
public boolean p() {
    boolean booleanExtra = getIntent().getBooleanExtra(""destroy_engine_with_activity"", false);
    return (u() != null || this.f213a.m()) ? booleanExtra : getIntent().getBooleanExtra(""destroy_engine_with_activity"", true);
}"
"<io.flutter.embedding.android.d: void E()>","private void E() {
    if (G() == f.transparent) {
        getWindow().setBackgroundDrawable(new ColorDrawable(0));
    }
}"
"<io.flutter.embedding.android.d: boolean K()>","private boolean K() {
    return (getApplicationInfo().flags & 2) != 0;
}"
"<io.flutter.embedding.android.d: void onUserLeaveHint()>","// android.app.Activity
@Override
public void onUserLeaveHint() {
    if (N(""onUserLeaveHint"")) {
        this.f213a.E();
    }
}"
"<io.flutter.embedding.android.d: void d()>","// io.flutter.embedding.android.e.c
@Override
public void d() {
    if (Build.VERSION.SDK_INT >= 29) {
        reportFullyDrawn();
    }
}"
"<io.flutter.embedding.android.d: void onPostResume()>","// android.app.Activity
@Override
public void onPostResume() {
    super.onPostResume();
    if (N(""onPostResume"")) {
        this.f213a.w();
    }
}"
"<io.flutter.embedding.android.d: void M()>","public void M() {
    P();
    e eVar = this.f213a;
    if (eVar != null) {
        eVar.F();
        this.f213a = null;
    }
}"
"<io.flutter.embedding.android.d: void D()>","private void D() {
    if (Build.VERSION.SDK_INT >= 21) {
        Window window = getWindow();
        window.addFlags(Integer.MIN_VALUE);
        window.setStatusBarColor(1073741824);
        window.getDecorView().setSystemUiVisibility(1280);
    }
}"
"<io.flutter.embedding.android.d: void f()>","// io.flutter.embedding.android.e.c
@Override
public void f() {
}"
"<io.flutter.embedding.android.d: boolean N(java.lang.String)>","private boolean N(String str) {
    StringBuilder sb;
    String str2;
    e eVar = this.f213a;
    if (eVar == null) {
        sb = new StringBuilder();
        sb.append(""FlutterActivity "");
        sb.append(hashCode());
        sb.append("" "");
        sb.append(str);
        str2 = "" called after release."";
    } else {
        if (eVar.l()) {
            return true;
        }
        sb = new StringBuilder();
        sb.append(""FlutterActivity "");
        sb.append(hashCode());
        sb.append("" "");
        sb.append(str);
        str2 = "" called after detach."";
    }
    sb.append(str2);
    l.b.g(""FlutterActivity"", sb.toString());
    return false;
}"
"<io.flutter.embedding.android.d: void v(io.flutter.embedding.engine.a)>","// io.flutter.embedding.android.e.c
@Override
public void v(io.flutter.embedding.engine.a aVar) {
    if (this.f213a.m()) {
        return;
    }
    v.a.a(aVar);
}"
"<io.flutter.embedding.android.d: io.flutter.plugin.platform.c B(android.app.Activity,io.flutter.embedding.engine.a)>","// io.flutter.embedding.android.e.c
@Override
public io.flutter.plugin.platform.c B(Activity activity, io.flutter.embedding.engine.a aVar) {
    return new io.flutter.plugin.platform.c(a(), aVar.m(), this);
}"
"<io.flutter.embedding.android.d: io.flutter.embedding.engine.e h()>","// io.flutter.embedding.android.e.c
@Override
public io.flutter.embedding.engine.e h() {
    return io.flutter.embedding.engine.e.a(getIntent());
}"
"<io.flutter.embedding.android.d: io.flutter.embedding.engine.a m(android.content.Context)>","// io.flutter.embedding.android.e.c
@Override
public io.flutter.embedding.engine.a m(Context context) {
    return null;
}"
"<u0.t0: void run()>","// java.lang.Runnable
@Override
public final void run() {
    Object a2;
    Object a3;
    Object a4;
    if (p0.a()) {
        if (!(this.f1339f != -1)) {
            throw new AssertionError();
        }
    }
    kotlinx.coroutines.scheduling.j jVar = this.f1129e;
    try {
        kotlinx.coroutines.internal.g gVar = (kotlinx.coroutines.internal.g) c();
        g0.d<T> dVar = gVar.f1034h;
        Object obj = gVar.f1036j;
        g0.g context = dVar.getContext();
        Object c2 = kotlinx.coroutines.internal.d0.c(context, obj);
        h2<?> e2 = c2 != kotlinx.coroutines.internal.d0.f1022a ? e0.e(dVar, context, c2) : null;
        try {
            g0.g context2 = dVar.getContext();
            Object h2 = h();
            Throwable d2 = d(h2);
            o1 o1Var = (d2 == null && u0.b(this.f1339f)) ? (o1) context2.get(o1.f1325c) : null;
            if (o1Var != null && !o1Var.a()) {
                Throwable h3 = o1Var.h();
                a(h2, h3);
                k.a aVar = d0.k.f144d;
                if (p0.d() && (dVar instanceof kotlin.coroutines.jvm.internal.e)) {
                    h3 = kotlinx.coroutines.internal.y.a(h3, (kotlin.coroutines.jvm.internal.e) dVar);
                }
                a3 = d0.k.a(d0.l.a(h3));
            } else if (d2 != null) {
                k.a aVar2 = d0.k.f144d;
                a3 = d0.k.a(d0.l.a(d2));
            } else {
                T e3 = e(h2);
                k.a aVar3 = d0.k.f144d;
                a3 = d0.k.a(e3);
            }
            dVar.resumeWith(a3);
            d0.q qVar = d0.q.f150a;
            try {
                k.a aVar4 = d0.k.f144d;
                jVar.f();
                a4 = d0.k.a(qVar);
            } catch (Throwable th) {
                k.a aVar5 = d0.k.f144d;
                a4 = d0.k.a(d0.l.a(th));
            }
            g(null, d0.k.b(a4));
        } finally {
            if (e2 == null || e2.y0()) {
                kotlinx.coroutines.internal.d0.a(context, c2);
            }
        }
    } catch (Throwable th2) {
        try {
            k.a aVar6 = d0.k.f144d;
            jVar.f();
            a2 = d0.k.a(d0.q.f150a);
        } catch (Throwable th3) {
            k.a aVar7 = d0.k.f144d;
            a2 = d0.k.a(d0.l.a(th3));
        }
        g(th2, d0.k.b(a2));
    }
}"
"<u0.t0: void a(java.lang.Object,java.lang.Throwable)>","public void a(Object obj, Throwable th) {
}"
"<u0.t0: void g(java.lang.Throwable,java.lang.Throwable)>","public final void g(Throwable th, Throwable th2) {
    if (th == null && th2 == null) {
        return;
    }
    if (th != null && th2 != null) {
        d0.b.a(th, th2);
    }
    if (th == null) {
        th = th2;
    }
    kotlin.jvm.internal.i.b(th);
    h0.a(c().getContext(), new o0(""Fatal exception in coroutines machinery for "" + this + "". Please read KDoc to 'handleFatalException' method and report this incident to maintainers"", th));
}"
"<io.flutter.plugins.webviewflutter.r2: void h(android.webkit.WebChromeClient,io.flutter.plugins.webviewflutter.k$o$a)>","public void h(WebChromeClient webChromeClient, k.o.a<Void> aVar) {
    if (this.f754b.f(webChromeClient)) {
        c(Long.valueOf(i(webChromeClient)), aVar);
    } else {
        aVar.a(null);
    }
}"
"<io.flutter.plugins.webviewflutter.r2: void j(android.webkit.WebChromeClient,android.webkit.WebView,java.lang.Long,io.flutter.plugins.webviewflutter.k$o$a)>","public void j(WebChromeClient webChromeClient, WebView webView, Long l2, k.o.a<Void> aVar) {
    Long g2 = this.f754b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    super.g(Long.valueOf(i(webChromeClient)), g2, l2, aVar);
}"
"<io.flutter.plugins.webviewflutter.r2: long i(android.webkit.WebChromeClient)>","private long i(WebChromeClient webChromeClient) {
    Long g2 = this.f754b.g(webChromeClient);
    if (g2 != null) {
        return g2.longValue();
    }
    throw new IllegalStateException(""Could not find identifier for WebChromeClient."");
}"
"<d0.l: void b(java.lang.Object)>","public static final void b(Object obj) {
    if (obj instanceof k.b) {
        throw ((k.b) obj).f145d;
    }
}"
"<x.e: void d()>","public void d() {
    l.b.f(""LifecycleChannel"", ""Sending AppLifecycleState.resumed message."");
    this.f1487a.c(""AppLifecycleState.resumed"");
}"
"<x.e: void a()>","public void a() {
    l.b.f(""LifecycleChannel"", ""Sending AppLifecycleState.detached message."");
    this.f1487a.c(""AppLifecycleState.detached"");
}"
"<x.e: void c()>","public void c() {
    l.b.f(""LifecycleChannel"", ""Sending AppLifecycleState.paused message."");
    this.f1487a.c(""AppLifecycleState.paused"");
}"
"<x.e: void b()>","public void b() {
    l.b.f(""LifecycleChannel"", ""Sending AppLifecycleState.inactive message."");
    this.f1487a.c(""AppLifecycleState.inactive"");
}"
"<io.flutter.embedding.android.z: void b(e.a)>","public void b(e.a<WindowLayoutInfo> aVar) {
    this.f356a.removeWindowLayoutInfoListener(aVar);
}"
"<io.flutter.embedding.android.z: void a(android.app.Activity,java.util.concurrent.Executor,e.a)>","public void a(Activity activity, Executor executor, e.a<WindowLayoutInfo> aVar) {
    this.f356a.addWindowLayoutInfoListener(activity, executor, aVar);
}"
"<android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.a)>","public static void write(RemoteActionCompat remoteActionCompat, a aVar) {
    androidx.core.app.RemoteActionCompatParcelizer.write(remoteActionCompat, aVar);
}"
"<androidx.versionedparcelable.ParcelImpl: int describeContents()>","// android.os.Parcelable
@Override
public int describeContents() {
    return 0;
}"
"<androidx.versionedparcelable.ParcelImpl: void writeToParcel(android.os.Parcel,int)>","// android.os.Parcelable
@Override
public void writeToParcel(Parcel parcel, int i2) {
    new b(parcel).L(this.f73d);
}"
"<g.a: void a(android.view.inputmethod.EditorInfo,java.lang.String[])>","public static void a(EditorInfo editorInfo, String[] strArr) {
    if (Build.VERSION.SDK_INT >= 25) {
        editorInfo.contentMimeTypes = strArr;
        return;
    }
    if (editorInfo.extras == null) {
        editorInfo.extras = new Bundle();
    }
    editorInfo.extras.putStringArray(""androidx.core.view.inputmethod.EditorInfoCompat.CONTENT_MIME_TYPES"", strArr);
    editorInfo.extras.putStringArray(""android.support.v13.view.inputmethod.EditorInfoCompat.CONTENT_MIME_TYPES"", strArr);
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()>","// androidx.window.embedding.EmbeddingBackend
@Override
public boolean isSplitSupported() {
    return this.embeddingExtension != null;
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)>","// androidx.window.embedding.EmbeddingBackend
@Override
public void registerRule(EmbeddingRule rule) {
    i.e(rule, ""rule"");
    if (this.splitRules.contains(rule)) {
        return;
    }
    this.splitRules.add(rule);
    EmbeddingInterfaceCompat embeddingInterfaceCompat = this.embeddingExtension;
    if (embeddingInterfaceCompat == null) {
        return;
    }
    embeddingInterfaceCompat.setSplitRules(this.splitRules);
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()>","public static /* synthetic */
void getSplitChangeCallbacks$annotations() {
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)>","// androidx.window.embedding.EmbeddingBackend
@Override
public void unregisterRule(EmbeddingRule rule) {
    i.e(rule, ""rule"");
    if (this.splitRules.contains(rule)) {
        this.splitRules.remove(rule);
        EmbeddingInterfaceCompat embeddingInterfaceCompat = this.embeddingExtension;
        if (embeddingInterfaceCompat == null) {
            return;
        }
        embeddingInterfaceCompat.setSplitRules(this.splitRules);
    }
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,e.a)>","// androidx.window.embedding.EmbeddingBackend
@Override
public void registerSplitListenerForActivity(Activity activity, Executor executor, e.a<List<SplitInfo>> callback) {
    List<SplitInfo> b2;
    List<SplitInfo> b3;
    i.e(activity, ""activity"");
    i.e(executor, ""executor"");
    i.e(callback, ""callback"");
    ReentrantLock reentrantLock = globalLock;
    reentrantLock.lock();
    try {
        if (getEmbeddingExtension() == null) {
            Log.v(TAG, ""Extension not loaded, skipping callback registration."");
            b3 = e0.i.b();
            callback.accept(b3);
            return;
        }
        SplitListenerWrapper splitListenerWrapper = new SplitListenerWrapper(activity, executor, callback);
        getSplitChangeCallbacks().add(splitListenerWrapper);
        if (this.splitInfoEmbeddingCallback.getLastInfo() != null) {
            b2 = this.splitInfoEmbeddingCallback.getLastInfo();
            i.b(b2);
        } else {
            b2 = e0.i.b();
        }
        splitListenerWrapper.accept(b2);
        q qVar = q.f150a;
    } finally {
        reentrantLock.unlock();
    }
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(e.a)>","// androidx.window.embedding.EmbeddingBackend
@Override
public void unregisterSplitListenerForActivity(e.a<List<SplitInfo>> consumer) {
    i.e(consumer, ""consumer"");
    ReentrantLock reentrantLock = globalLock;
    reentrantLock.lock();
    try {
        Iterator<SplitListenerWrapper> it = getSplitChangeCallbacks().iterator();
        while (true) {
            if (!it.hasNext()) {
                break;
            }
            SplitListenerWrapper next = it.next();
            if (i.a(next.getCallback(), consumer)) {
                getSplitChangeCallbacks().remove(next);
                break;
            }
        }
        q qVar = q.f150a;
    } finally {
        reentrantLock.unlock();
    }
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)>","public final void setEmbeddingExtension(EmbeddingInterfaceCompat embeddingInterfaceCompat) {
    this.embeddingExtension = embeddingInterfaceCompat;
}"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)>","// androidx.window.embedding.EmbeddingBackend
@Override
public void setSplitRules(Set<? extends EmbeddingRule> rules) {
    i.e(rules, ""rules"");
    this.splitRules.clear();
    this.splitRules.addAll(rules);
    EmbeddingInterfaceCompat embeddingInterfaceCompat = this.embeddingExtension;
    if (embeddingInterfaceCompat == null) {
        return;
    }
    embeddingInterfaceCompat.setSplitRules(this.splitRules);
}"
"<u0.x1: void e0()>","// u0.v1
@Override
protected void e0() {
    z0.a.c(this.f1371f, this);
}"
"<kotlinx.coroutines.internal.h: void c(g0.d,java.lang.Object,n0.l,int,java.lang.Object)>","public static /* synthetic */
void c(g0.d dVar, Object obj, n0.l lVar, int i2, Object obj2) {
    if ((i2 & 2) != 0) {
        lVar = null;
    }
    b(dVar, obj, lVar);
}"
"<kotlinx.coroutines.internal.h: void b(g0.d,java.lang.Object,n0.l)>","/* JADX WARN: Finally extract failed */
public static final <T> void b(g0.d<? super T> dVar, Object obj, n0.l<? super Throwable, d0.q> lVar) {
    boolean z2;
    if (!(dVar instanceof g)) {
        dVar.resumeWith(obj);
        return;
    }
    g gVar = (g) dVar;
    Object b2 = u0.c0.b(obj, lVar);
    if (gVar.f1033g.o(gVar.getContext())) {
        gVar.f1035i = b2;
        gVar.f1339f = 1;
        gVar.f1033g.m(gVar.getContext(), gVar);
        return;
    }
    p0.a();
    z0 a2 = f2.f1292a.a();
    if (a2.w()) {
        gVar.f1035i = b2;
        gVar.f1339f = 1;
        a2.s(gVar);
        return;
    }
    a2.u(true);
    try {
        o1 o1Var = (o1) gVar.getContext().get(o1.f1325c);
        if (o1Var == null || o1Var.a()) {
            z2 = false;
        } else {
            CancellationException h2 = o1Var.h();
            gVar.a(b2, h2);
            k.a aVar = d0.k.f144d;
            gVar.resumeWith(d0.k.a(d0.l.a(h2)));
            z2 = true;
        }
        if (!z2) {
            g0.d<T> dVar2 = gVar.f1034h;
            Object obj2 = gVar.f1036j;
            g0.g context = dVar2.getContext();
            Object c2 = d0.c(context, obj2);
            h2<?> e2 = c2 != d0.f1022a ? u0.e0.e(dVar2, context, c2) : null;
            try {
                gVar.f1034h.resumeWith(obj);
                d0.q qVar = d0.q.f150a;
                if (e2 == null || e2.y0()) {
                    d0.a(context, c2);
                }
            } catch (Throwable th) {
                if (e2 == null || e2.y0()) {
                    d0.a(context, c2);
                }
                throw th;
            }
        }
        do {
        } while (a2.y());
    } finally {
        try {
        } finally {
        }
    }
}"
"<io.flutter.embedding.android.w: boolean a(io.flutter.embedding.android.x)>","@SuppressLint({ ""NewApi"" })
public static boolean a(x xVar) {
    return false;
}"
"<k.d: void e(android.webkit.TracingController,j.b)>","public static void e(TracingController tracingController, j.b bVar) {
    new TracingConfig.Builder();
    throw null;
}"
"<k.d: boolean d(android.webkit.TracingController)>","public static boolean d(TracingController tracingController) {
    return tracingController.isTracing();
}"
"<k.d: boolean f(android.webkit.TracingController,java.io.OutputStream,java.util.concurrent.Executor)>","public static boolean f(TracingController tracingController, OutputStream outputStream, Executor executor) {
    return tracingController.stop(outputStream, executor);
}"
"<k.a: boolean d()>","public boolean d() {
    return a1.a.b(C0018a.f954a, this.f953b);
}"
"<k.a: boolean c()>","// k.a
@Override
public boolean c() {
    return Build.VERSION.SDK_INT >= 23;
}"
"<k.a: boolean b()>","// k.e
@Override
public boolean b() {
    return c() || d();
}"
"<androidx.window.layout.e: void b(androidx.window.layout.WindowMetricsCalculatorDecorator)>","@ExperimentalWindowApi
public static void b(WindowMetricsCalculatorDecorator windowMetricsCalculatorDecorator) {
    WindowMetricsCalculator.Companion.overrideDecorator(windowMetricsCalculatorDecorator);
}"
"<androidx.window.layout.e: void c()>","@ExperimentalWindowApi
public static void c() {
    WindowMetricsCalculator.Companion.reset();
}"
"<e0.n: boolean h(java.util.Collection,java.lang.Iterable)>","public static <T> boolean h(Collection<? super T> collection, Iterable<? extends T> elements) {
    kotlin.jvm.internal.i.e(collection, ""<this>"");
    kotlin.jvm.internal.i.e(elements, ""elements"");
    if (elements instanceof Collection) {
        return collection.addAll((Collection) elements);
    }
    boolean z2 = false;
    Iterator<? extends T> it = elements.iterator();
    while (it.hasNext()) {
        if (collection.add(it.next())) {
            z2 = true;
        }
    }
    return z2;
}"
"<io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)>","private void cacheVirtualIdMappings(View view, int i2, int i3) {
    c cVar = new c(view, i2);
    this.originToFlutterId.put(cVar, Integer.valueOf(i3));
    this.flutterIdToOrigin.put(i3, cVar);
}"
"<io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)>","public boolean onAccessibilityHoverEvent(int i2, MotionEvent motionEvent) {
    c cVar = this.flutterIdToOrigin.get(i2);
    if (cVar == null) {
        return false;
    }
    Rect rect = this.embeddedViewToDisplayBounds.get(cVar.f804a);
    int pointerCount = motionEvent.getPointerCount();
    MotionEvent.PointerProperties[] pointerPropertiesArr = new MotionEvent.PointerProperties[pointerCount];
    MotionEvent.PointerCoords[] pointerCoordsArr = new MotionEvent.PointerCoords[pointerCount];
    for (int i3 = 0; i3 < motionEvent.getPointerCount(); i3++) {
        pointerPropertiesArr[i3] = new MotionEvent.PointerProperties();
        motionEvent.getPointerProperties(i3, pointerPropertiesArr[i3]);
        MotionEvent.PointerCoords pointerCoords = new MotionEvent.PointerCoords();
        motionEvent.getPointerCoords(i3, pointerCoords);
        pointerCoordsArr[i3] = new MotionEvent.PointerCoords(pointerCoords);
        pointerCoordsArr[i3].x -= rect.left;
        pointerCoordsArr[i3].y -= rect.top;
    }
    return cVar.f804a.dispatchGenericMotionEvent(MotionEvent.obtain(motionEvent.getDownTime(), motionEvent.getEventTime(), motionEvent.getAction(), motionEvent.getPointerCount(), pointerPropertiesArr, pointerCoordsArr, motionEvent.getMetaState(), motionEvent.getButtonState(), motionEvent.getXPrecision(), motionEvent.getYPrecision(), motionEvent.getDeviceId(), motionEvent.getEdgeFlags(), motionEvent.getSource(), motionEvent.getFlags()));
}"
"<io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)>","public boolean performAction(int i2, int i3, Bundle bundle) {
    AccessibilityNodeProvider accessibilityNodeProvider;
    c cVar = this.flutterIdToOrigin.get(i2);
    if (cVar == null || (accessibilityNodeProvider = cVar.f804a.getAccessibilityNodeProvider()) == null) {
        return false;
    }
    return accessibilityNodeProvider.performAction(cVar.f805b, i3, bundle);
}"
"<io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)>","private void addChildrenToFlutterNode(AccessibilityNodeInfo accessibilityNodeInfo, View view, AccessibilityNodeInfo accessibilityNodeInfo2) {
    int i2;
    for (int i3 = 0; i3 < accessibilityNodeInfo.getChildCount(); i3++) {
        Long f2 = this.reflectionAccessors.f(accessibilityNodeInfo, i3);
        if (f2 != null) {
            int j2 = b.j(f2.longValue());
            c cVar = new c(view, j2);
            if (this.originToFlutterId.containsKey(cVar)) {
                i2 = this.originToFlutterId.get(cVar).intValue();
            } else {
                int i4 = this.nextFlutterId;
                this.nextFlutterId = i4 + 1;
                cacheVirtualIdMappings(view, j2, i4);
                i2 = i4;
            }
            accessibilityNodeInfo2.addChild(this.rootAccessibilityView, i2);
        }
    }
}"
"<io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)>","private void setFlutterNodesTranslateBounds(AccessibilityNodeInfo accessibilityNodeInfo, Rect rect, AccessibilityNodeInfo accessibilityNodeInfo2) {
    Rect rect2 = new Rect();
    accessibilityNodeInfo.getBoundsInParent(rect2);
    accessibilityNodeInfo2.setBoundsInParent(rect2);
    Rect rect3 = new Rect();
    accessibilityNodeInfo.getBoundsInScreen(rect3);
    rect3.offset(rect.left, rect.top);
    accessibilityNodeInfo2.setBoundsInScreen(rect3);
}"
"<io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)>","public boolean requestSendAccessibilityEvent(View view, View view2, AccessibilityEvent accessibilityEvent) {
    AccessibilityEvent obtain = AccessibilityEvent.obtain(accessibilityEvent);
    Long h2 = this.reflectionAccessors.h(accessibilityEvent);
    if (h2 == null) {
        return false;
    }
    int j2 = b.j(h2.longValue());
    Integer num = this.originToFlutterId.get(new c(view, j2));
    if (num == null) {
        int i2 = this.nextFlutterId;
        this.nextFlutterId = i2 + 1;
        num = Integer.valueOf(i2);
        cacheVirtualIdMappings(view, j2, num.intValue());
    }
    obtain.setSource(this.rootAccessibilityView, num.intValue());
    obtain.setClassName(accessibilityEvent.getClassName());
    obtain.setPackageName(accessibilityEvent.getPackageName());
    for (int i3 = 0; i3 < obtain.getRecordCount(); i3++) {
        AccessibilityRecord record = obtain.getRecord(i3);
        Long h3 = this.reflectionAccessors.h(record);
        if (h3 == null) {
            return false;
        }
        c cVar = new c(view, b.j(h3.longValue()));
        if (!this.originToFlutterId.containsKey(cVar)) {
            return false;
        }
        record.setSource(this.rootAccessibilityView, this.originToFlutterId.get(cVar).intValue());
    }
    return this.rootAccessibilityView.getParent().requestSendAccessibilityEvent(view2, obtain);
}"
"<io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)>","private void copyAccessibilityFields(AccessibilityNodeInfo accessibilityNodeInfo, AccessibilityNodeInfo accessibilityNodeInfo2) {
    accessibilityNodeInfo2.setAccessibilityFocused(accessibilityNodeInfo.isAccessibilityFocused());
    accessibilityNodeInfo2.setCheckable(accessibilityNodeInfo.isCheckable());
    accessibilityNodeInfo2.setChecked(accessibilityNodeInfo.isChecked());
    accessibilityNodeInfo2.setContentDescription(accessibilityNodeInfo.getContentDescription());
    accessibilityNodeInfo2.setEnabled(accessibilityNodeInfo.isEnabled());
    accessibilityNodeInfo2.setClickable(accessibilityNodeInfo.isClickable());
    accessibilityNodeInfo2.setFocusable(accessibilityNodeInfo.isFocusable());
    accessibilityNodeInfo2.setFocused(accessibilityNodeInfo.isFocused());
    accessibilityNodeInfo2.setLongClickable(accessibilityNodeInfo.isLongClickable());
    accessibilityNodeInfo2.setMovementGranularities(accessibilityNodeInfo.getMovementGranularities());
    accessibilityNodeInfo2.setPassword(accessibilityNodeInfo.isPassword());
    accessibilityNodeInfo2.setScrollable(accessibilityNodeInfo.isScrollable());
    accessibilityNodeInfo2.setSelected(accessibilityNodeInfo.isSelected());
    accessibilityNodeInfo2.setText(accessibilityNodeInfo.getText());
    accessibilityNodeInfo2.setVisibleToUser(accessibilityNodeInfo.isVisibleToUser());
    int i2 = Build.VERSION.SDK_INT;
    if (i2 >= 18) {
        accessibilityNodeInfo2.setEditable(accessibilityNodeInfo.isEditable());
    }
    if (i2 >= 19) {
        accessibilityNodeInfo2.setCanOpenPopup(accessibilityNodeInfo.canOpenPopup());
        accessibilityNodeInfo2.setCollectionInfo(accessibilityNodeInfo.getCollectionInfo());
        accessibilityNodeInfo2.setCollectionItemInfo(accessibilityNodeInfo.getCollectionItemInfo());
        accessibilityNodeInfo2.setContentInvalid(accessibilityNodeInfo.isContentInvalid());
        accessibilityNodeInfo2.setDismissable(accessibilityNodeInfo.isDismissable());
        accessibilityNodeInfo2.setInputType(accessibilityNodeInfo.getInputType());
        accessibilityNodeInfo2.setLiveRegion(accessibilityNodeInfo.getLiveRegion());
        accessibilityNodeInfo2.setMultiLine(accessibilityNodeInfo.isMultiLine());
        accessibilityNodeInfo2.setRangeInfo(accessibilityNodeInfo.getRangeInfo());
    }
    if (i2 >= 21) {
        accessibilityNodeInfo2.setError(accessibilityNodeInfo.getError());
        accessibilityNodeInfo2.setMaxTextLength(accessibilityNodeInfo.getMaxTextLength());
    }
    if (i2 >= 23) {
        accessibilityNodeInfo2.setContextClickable(accessibilityNodeInfo.isContextClickable());
    }
    if (i2 >= 24) {
        accessibilityNodeInfo2.setDrawingOrder(accessibilityNodeInfo.getDrawingOrder());
        accessibilityNodeInfo2.setImportantForAccessibility(accessibilityNodeInfo.isImportantForAccessibility());
    }
    if (i2 >= 26) {
        accessibilityNodeInfo2.setAvailableExtraData(accessibilityNodeInfo.getAvailableExtraData());
        accessibilityNodeInfo2.setHintText(accessibilityNodeInfo.getHintText());
        accessibilityNodeInfo2.setShowingHintText(accessibilityNodeInfo.isShowingHintText());
    }
}"
"<io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)>","private void setFlutterNodeParent(AccessibilityNodeInfo accessibilityNodeInfo, View view, AccessibilityNodeInfo accessibilityNodeInfo2) {
    Long g2 = this.reflectionAccessors.g(accessibilityNodeInfo);
    if (g2 == null) {
        return;
    }
    Integer num = this.originToFlutterId.get(new c(view, b.j(g2.longValue())));
    if (num != null) {
        accessibilityNodeInfo2.setParent(this.rootAccessibilityView, num.intValue());
    }
}"
"<io.flutter.plugin.editing.a: boolean c(int)>","public boolean c(int i2) {
    return this.f418a.isCodePointEmoji(i2);
}"
"<io.flutter.plugin.editing.a: boolean i(int)>","public boolean i(int i2) {
    return this.f418a.isCodePointVariantSelector(i2);
}"
"<io.flutter.plugin.editing.a: int b(java.lang.CharSequence,int)>","public int b(CharSequence charSequence, int i2) {
    int codePointBefore;
    int charCount;
    int charCount2;
    int i3 = 0;
    int i4 = 1;
    if (i2 <= 1 || (charCount2 = i2 - (charCount = Character.charCount((codePointBefore = Character.codePointBefore(charSequence, i2))))) == 0) {
        return 0;
    }
    if (codePointBefore == 10) {
        if (Character.codePointBefore(charSequence, charCount2) == 13) {
            charCount++;
        }
        return i2 - charCount;
    }
    if (g(codePointBefore)) {
        int codePointBefore2 = Character.codePointBefore(charSequence, charCount2);
        int charCount3 = charCount2 - Character.charCount(codePointBefore2);
        while (charCount3 > 0 && g(codePointBefore2)) {
            codePointBefore2 = Character.codePointBefore(charSequence, charCount3);
            charCount3 -= Character.charCount(codePointBefore2);
            i4++;
        }
        if (i4 % 2 == 0) {
            charCount += 2;
        }
        return i2 - charCount;
    }
    if (codePointBefore == 8419) {
        int codePointBefore3 = Character.codePointBefore(charSequence, charCount2);
        int charCount4 = charCount2 - Character.charCount(codePointBefore3);
        if (charCount4 > 0 && i(codePointBefore3)) {
            int codePointBefore4 = Character.codePointBefore(charSequence, charCount4);
            if (f(codePointBefore4)) {
                charCount += Character.charCount(codePointBefore3) + Character.charCount(codePointBefore4);
            }
        } else if (f(codePointBefore3)) {
            charCount += Character.charCount(codePointBefore3);
        }
        return i2 - charCount;
    }
    if (codePointBefore == 917631) {
        while (true) {
            codePointBefore = Character.codePointBefore(charSequence, charCount2);
            charCount2 -= Character.charCount(codePointBefore);
            if (charCount2 <= 0 || !h(codePointBefore)) {
                break;
            }
            charCount += Character.charCount(codePointBefore);
        }
        if (!c(codePointBefore)) {
            return i2 - 2;
        }
        charCount += Character.charCount(codePointBefore);
    }
    if (i(codePointBefore)) {
        codePointBefore = Character.codePointBefore(charSequence, charCount2);
        if (!c(codePointBefore)) {
            return i2 - charCount;
        }
        charCount += Character.charCount(codePointBefore);
        charCount2 -= charCount;
    }
    if (c(codePointBefore)) {
        boolean z2 = false;
        int i5 = 0;
        while (true) {
            if (z2) {
                charCount += Character.charCount(codePointBefore) + i5 + 1;
                z2 = false;
            }
            if (d(codePointBefore)) {
                int codePointBefore5 = Character.codePointBefore(charSequence, charCount2);
                int charCount5 = charCount2 - Character.charCount(codePointBefore5);
                if (charCount5 > 0 && i(codePointBefore5)) {
                    codePointBefore5 = Character.codePointBefore(charSequence, charCount5);
                    if (!c(codePointBefore5)) {
                        return i2 - charCount;
                    }
                    i3 = Character.charCount(codePointBefore5);
                    Character.charCount(codePointBefore5);
                }
                if (e(codePointBefore5)) {
                    charCount += i3 + Character.charCount(codePointBefore5);
                }
            } else {
                if (charCount2 > 0) {
                    codePointBefore = Character.codePointBefore(charSequence, charCount2);
                    charCount2 -= Character.charCount(codePointBefore);
                    if (codePointBefore == 8205) {
                        codePointBefore = Character.codePointBefore(charSequence, charCount2);
                        charCount2 -= Character.charCount(codePointBefore);
                        if (charCount2 <= 0 || !i(codePointBefore)) {
                            i5 = 0;
                        } else {
                            codePointBefore = Character.codePointBefore(charSequence, charCount2);
                            int charCount6 = Character.charCount(codePointBefore);
                            charCount2 -= Character.charCount(codePointBefore);
                            i5 = charCount6;
                        }
                        z2 = true;
                        if (charCount2 != 0 || !z2 || !c(codePointBefore)) {
                            break;
                            break;
                        }
                    }
                }
                i5 = 0;
                if (charCount2 != 0) {
                    break;
                }
            }
        }
    }
    return i2 - charCount;
}"
"<io.flutter.plugin.editing.a: boolean e(int)>","public boolean e(int i2) {
    return this.f418a.isCodePointEmojiModifierBase(i2);
}"
"<io.flutter.plugin.editing.a: int a(java.lang.CharSequence,int)>","public int a(CharSequence charSequence, int i2) {
    int length = charSequence.length();
    int i3 = length - 1;
    if (i2 >= i3) {
        return length;
    }
    int codePointAt = Character.codePointAt(charSequence, i2);
    int charCount = Character.charCount(codePointAt);
    int i4 = i2 + charCount;
    int i5 = 0;
    if (i4 == 0) {
        return 0;
    }
    if (codePointAt == 10) {
        if (Character.codePointAt(charSequence, i4) == 13) {
            charCount++;
        }
        return i2 + charCount;
    }
    if (g(codePointAt)) {
        if (i4 >= i3 || !g(Character.codePointAt(charSequence, i4))) {
            return i4;
        }
        int i6 = i2;
        while (i6 > 0 && g(Character.codePointBefore(charSequence, i2))) {
            i6 -= Character.charCount(Character.codePointBefore(charSequence, i2));
            i5++;
        }
        if (i5 % 2 == 0) {
            charCount += 2;
        }
        return i2 + charCount;
    }
    if (f(codePointAt)) {
        charCount += Character.charCount(codePointAt);
    }
    if (codePointAt == 8419) {
        int codePointBefore = Character.codePointBefore(charSequence, i4);
        int charCount2 = i4 + Character.charCount(codePointBefore);
        if (charCount2 < length && i(codePointBefore)) {
            int codePointAt2 = Character.codePointAt(charSequence, charCount2);
            if (f(codePointAt2)) {
                charCount += Character.charCount(codePointBefore) + Character.charCount(codePointAt2);
            }
        } else if (f(codePointBefore)) {
            charCount += Character.charCount(codePointBefore);
        }
        return i2 + charCount;
    }
    if (c(codePointAt)) {
        boolean z2 = false;
        int i7 = 0;
        do {
            if (z2) {
                charCount += Character.charCount(codePointAt) + i7 + 1;
                z2 = false;
            }
            if (d(codePointAt)) {
                break;
            }
            if (i4 < length) {
                codePointAt = Character.codePointAt(charSequence, i4);
                i4 += Character.charCount(codePointAt);
                if (codePointAt != 8419) {
                    if (!d(codePointAt) && !i(codePointAt)) {
                        if (codePointAt == 8205) {
                            codePointAt = Character.codePointAt(charSequence, i4);
                            i4 += Character.charCount(codePointAt);
                            if (i4 >= length || !i(codePointAt)) {
                                i7 = 0;
                            } else {
                                codePointAt = Character.codePointAt(charSequence, i4);
                                int charCount3 = Character.charCount(codePointAt);
                                i4 += Character.charCount(codePointAt);
                                i7 = charCount3;
                            }
                            z2 = true;
                            if (i4 < length || !z2) {
                                break;
                                break;
                            }
                        }
                    } else {
                        charCount += Character.charCount(codePointAt) + 0;
                        break;
                    }
                } else {
                    int codePointBefore2 = Character.codePointBefore(charSequence, i4);
                    int charCount4 = i4 + Character.charCount(codePointBefore2);
                    if (charCount4 < length && i(codePointBefore2)) {
                        int codePointAt3 = Character.codePointAt(charSequence, charCount4);
                        if (f(codePointAt3)) {
                            charCount += Character.charCount(codePointBefore2) + Character.charCount(codePointAt3);
                        }
                    } else if (f(codePointBefore2)) {
                        charCount += Character.charCount(codePointBefore2);
                    }
                    return i2 + charCount;
                }
            }
            i7 = 0;
            if (i4 < length) {
                break;
            }
        } while (c(codePointAt));
    }
    return i2 + charCount;
}"
"<io.flutter.plugin.editing.a: boolean h(int)>","public boolean h(int i2) {
    return 917536 <= i2 && i2 <= 917630;
}"
"<io.flutter.plugin.editing.a: boolean g(int)>","public boolean g(int i2) {
    return this.f418a.isCodePointRegionalIndicator(i2);
}"
"<io.flutter.plugin.editing.a: boolean f(int)>","public boolean f(int i2) {
    return (48 <= i2 && i2 <= 57) || i2 == 35 || i2 == 42;
}"
"<io.flutter.plugin.editing.a: boolean d(int)>","public boolean d(int i2) {
    return this.f418a.isCodePointEmojiModifier(i2);
}"
"<kotlinx.coroutines.scheduling.b: void close()>","// java.io.Closeable, java.lang.AutoCloseable
@Override
public void close() {
    throw new UnsupportedOperationException(""Dispatchers.Default cannot be closed"");
}"
"<io.flutter.plugins.webviewflutter.o3: void j(android.content.Context)>","private void j(Context context) {
    this.f723c.B(context);
    this.f724d.b(new Handler(context.getMainLooper()));
}"
"<io.flutter.plugins.webviewflutter.o3: void i(y.b,io.flutter.plugin.platform.h,android.content.Context,android.view.View,io.flutter.plugins.webviewflutter.h)>","private void i(y.b bVar, io.flutter.plugin.platform.h hVar, Context context, View view, h hVar2) {
    i2 i2 = i2.i(new // from class: io.flutter.plugins.webviewflutter.n3
    i2.a() {

        // io.flutter.plugins.webviewflutter.i2.a
        @Override
        public final void a(long j2) {
            o3.h(j2);
        }
    });
    this.f721a = i2;
    hVar.a(""plugins.flutter.io/webview"", new j(i2));
    this.f723c = new q3(this.f721a, new q3.d(), context, view);
    this.f724d = new o2(this.f721a, new o2.a(), new n2(bVar, this.f721a), new Handler(context.getMainLooper()));
    f2.d0(bVar, this.f723c);
    y.d(bVar, this.f724d);
    d1.d(bVar, new y2(this.f721a, new y2.c(), new x2(bVar, this.f721a)));
    c0.d(bVar, new s2(this.f721a, new s2.a(), new r2(bVar, this.f721a)));
    r.d(bVar, new e(this.f721a, new e.a(), new d(bVar, this.f721a)));
    r0.D(bVar, new v2(this.f721a, new v2.a()));
    u.f(bVar, new i(hVar2));
    n.f(bVar, new b());
    u0.f(bVar, new w2(this.f721a, new w2.a()));
}"
"<io.flutter.plugins.webviewflutter.o3: void f(r.c)>","// r.a
@Override
public void f(r.c cVar) {
    j(cVar.a());
}"
"<io.flutter.plugins.webviewflutter.o3: void c()>","// r.a
@Override
public void c() {
    j(this.f722b.a());
}"
"<io.flutter.plugins.webviewflutter.o3: void a(q.a$b)>","// io.flutter.plugins.webviewflutter.i2.a
@Override
public final void a(long j2) {
    o3.h(j2);
}"
"<io.flutter.plugins.webviewflutter.o3: void h(long)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
void h(long j2) {
}"
"<io.flutter.plugins.webviewflutter.o3: void e()>","// r.a
@Override
public void e() {
    j(this.f722b.a());
}"
"<io.flutter.plugins.webviewflutter.o3: void d(q.a$b)>","// q.a
@Override
public void d(a.b bVar) {
    this.f722b = bVar;
    i(bVar.b(), bVar.d(), bVar.a(), null, new h.a(bVar.a().getAssets(), bVar.c()));
}"
"<io.flutter.plugins.webviewflutter.o3: void b(r.c)>","// r.a
@Override
public void b(r.c cVar) {
    j(cVar.a());
}"
"<u0.h0: void a(g0.g,java.lang.Throwable)>","public static final void a(g0.g gVar, Throwable th) {
    try {
        CoroutineExceptionHandler coroutineExceptionHandler = (CoroutineExceptionHandler) gVar.get(CoroutineExceptionHandler.f1013b);
        if (coroutineExceptionHandler == null) {
            g0.a(gVar, th);
        } else {
            coroutineExceptionHandler.handleException(gVar, th);
        }
    } catch (Throwable th2) {
        g0.a(gVar, b(th, th2));
    }
}"
"<u0.v0: void execute(java.lang.Runnable)>","// java.util.concurrent.Executor
@Override
public void execute(Runnable runnable) {
    this.f1345d.m(g0.h.f170d, runnable);
}"
"<t.a: void a(t.b)>","void a(b bVar);"
"<t.a: void b()>","void b();"
"<h.b: void b()>","public static void b() {
    Trace.endSection();
}"
"<h.b: void a(java.lang.String)>","public static void a(String str) {
    Trace.beginSection(str);
}"
"<w.a: void i(java.nio.ByteBuffer,int)>","public void i(ByteBuffer byteBuffer, int i2) {
    this.f1385a.dispatchPointerDataPacket(byteBuffer, i2);
}"
"<w.a: void h()>","private void h() {
    Iterator<WeakReference<d.b>> it = this.f1390f.iterator();
    while (it.hasNext()) {
        if (it.next().get() == null) {
            it.remove();
        }
    }
}"
"<w.a: void u(int,int)>","public void u(int i2, int i3) {
    this.f1385a.onSurfaceChanged(i2, i3);
}"
"<w.a: void l(long)>","/* JADX INFO: Access modifiers changed from: private */
public void l(long j2) {
    this.f1385a.markTextureFrameAvailable(j2);
}"
"<w.a: void m(int)>","public void m(int i2) {
    Iterator<WeakReference<d.b>> it = this.f1390f.iterator();
    while (it.hasNext()) {
        d.b bVar = it.next().get();
        if (bVar != null) {
            bVar.onTrimMemory(i2);
        } else {
            it.remove();
        }
    }
}"
"<w.a: void v(android.view.Surface)>","public void v(Surface surface) {
    this.f1387c = surface;
    this.f1385a.onSurfaceWindowChanged(surface);
}"
"<w.a: void t()>","public void t() {
    this.f1385a.onSurfaceDestroyed();
    this.f1387c = null;
    if (this.f1388d) {
        this.f1391g.f();
    }
    this.f1388d = false;
}"
"<w.a: void p(w.b)>","public void p(w.b bVar) {
    this.f1385a.removeIsDisplayingFlutterUiListener(bVar);
}"
"<w.a: void d(w.a,long)>","// w.b
@Override
public void d() {
    a.this.f1388d = true;
}"
"<w.a: void q(boolean)>","public void q(boolean z2) {
    this.f1385a.setSemanticsEnabled(z2);
}"
"<w.a: boolean j()>","public boolean j() {
    return this.f1388d;
}"
"<w.a: void r(w.a$g)>","public void r(g gVar) {
    if (gVar.a()) {
        l.b.f(""FlutterRenderer"", ""Setting viewport metrics\nSize: "" + gVar.f1420b + "" x "" + gVar.f1421c + ""\nPadding - L: "" + gVar.f1425g + "", T: "" + gVar.f1422d + "", R: "" + gVar.f1423e + "", B: "" + gVar.f1424f + ""\nInsets - L: "" + gVar.f1429k + "", T: "" + gVar.f1426h + "", R: "" + gVar.f1427i + "", B: "" + gVar.f1428j + ""\nSystem Gesture Insets - L: "" + gVar.f1433o + "", T: "" + gVar.f1430l + "", R: "" + gVar.f1431m + "", B: "" + gVar.f1431m + ""\nDisplay Features: "" + gVar.f1435q.size());
        int[] iArr = new int[gVar.f1435q.size() * 4];
        int[] iArr2 = new int[gVar.f1435q.size()];
        int[] iArr3 = new int[gVar.f1435q.size()];
        for (int i2 = 0; i2 < gVar.f1435q.size(); i2++) {
            b bVar = gVar.f1435q.get(i2);
            int i3 = i2 * 4;
            Rect rect = bVar.f1393a;
            iArr[i3] = rect.left;
            iArr[i3 + 1] = rect.top;
            iArr[i3 + 2] = rect.right;
            iArr[i3 + 3] = rect.bottom;
            iArr2[i2] = bVar.f1394b.f1406d;
            iArr3[i2] = bVar.f1395c.f1400d;
        }
        this.f1385a.setViewportMetrics(gVar.f1419a, gVar.f1420b, gVar.f1421c, gVar.f1422d, gVar.f1423e, gVar.f1424f, gVar.f1425g, gVar.f1426h, gVar.f1427i, gVar.f1428j, gVar.f1429k, gVar.f1430l, gVar.f1431m, gVar.f1432n, gVar.f1433o, gVar.f1434p, iArr, iArr2, iArr3);
    }
}"
"<w.a: boolean k()>","public boolean k() {
    return this.f1385a.getIsSoftwareRenderingEnabled();
}"
"<w.a: void g(io.flutter.view.d$b)>","void g(d.b bVar) {
    h();
    this.f1390f.add(new WeakReference<>(bVar));
}"
"<w.a: void o(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)>","private void o(long j2, SurfaceTextureWrapper surfaceTextureWrapper) {
    this.f1385a.registerTexture(j2, surfaceTextureWrapper);
}"
"<w.a: void f(w.b)>","// w.b
@Override
public void f() {
    a.this.f1388d = false;
}"
"<w.a: void s(android.view.Surface,boolean)>","public void s(Surface surface, boolean z2) {
    if (this.f1387c != null && !z2) {
        t();
    }
    this.f1387c = surface;
    this.f1385a.onSurfaceCreated(surface);
}"
"<o.a: boolean b(android.os.Bundle,java.lang.String,boolean)>","private static boolean b(Bundle bundle, String str, boolean z2) {
    return bundle == null ? z2 : bundle.getBoolean(str, z2);
}"
"<o.a: void f(android.content.res.XmlResourceParser,org.json.JSONArray,boolean)>","private static void f(XmlResourceParser xmlResourceParser, JSONArray jSONArray, boolean z2) {
    boolean attributeBooleanValue = xmlResourceParser.getAttributeBooleanValue(null, ""includeSubdomains"", false);
    xmlResourceParser.next();
    if (xmlResourceParser.getEventType() != 4) {
        throw new IllegalStateException(""Expected text"");
    }
    String trim = xmlResourceParser.getText().trim();
    JSONArray jSONArray2 = new JSONArray();
    jSONArray2.put(trim);
    jSONArray2.put(attributeBooleanValue);
    jSONArray2.put(z2);
    jSONArray.put(jSONArray2);
    xmlResourceParser.next();
    if (xmlResourceParser.getEventType() != 3) {
        throw new IllegalStateException(""Expected end of domain tag"");
    }
}"
"<o.a: void h(android.content.res.XmlResourceParser)>","private static void h(XmlResourceParser xmlResourceParser) {
    String name = xmlResourceParser.getName();
    int eventType = xmlResourceParser.getEventType();
    while (true) {
        if (eventType == 3 && xmlResourceParser.getName() == name) {
            return;
        } else {
            eventType = xmlResourceParser.next();
        }
    }
}"
"<o.a: void g(android.content.res.XmlResourceParser,org.json.JSONArray,boolean)>","private static void g(XmlResourceParser xmlResourceParser, JSONArray jSONArray, boolean z2) {
    boolean attributeBooleanValue = xmlResourceParser.getAttributeBooleanValue(null, ""cleartextTrafficPermitted"", z2);
    while (true) {
        int next = xmlResourceParser.next();
        if (next == 2) {
            if (xmlResourceParser.getName().equals(""domain"")) {
                f(xmlResourceParser, jSONArray, attributeBooleanValue);
            } else if (xmlResourceParser.getName().equals(""domain-config"")) {
                g(xmlResourceParser, jSONArray, attributeBooleanValue);
            } else {
                h(xmlResourceParser);
            }
        } else if (next == 3) {
            return;
        }
    }
}"
"<androidx.versionedparcelable.b: void a()>","// androidx.versionedparcelable.a
@Override
public void a() {
    int i2 = this.f82i;
    if (i2 >= 0) {
        int i3 = this.f77d.get(i2);
        int dataPosition = this.f78e.dataPosition();
        this.f78e.setDataPosition(i3);
        this.f78e.writeInt(dataPosition - i3);
        this.f78e.setDataPosition(dataPosition);
    }
}"
"<androidx.versionedparcelable.b: int o()>","// androidx.versionedparcelable.a
@Override
public int o() {
    return this.f78e.readInt();
}"
"<androidx.versionedparcelable.b: void C(java.lang.CharSequence)>","// androidx.versionedparcelable.a
@Override
protected void C(CharSequence charSequence) {
    TextUtils.writeToParcel(charSequence, this.f78e, 0);
}"
"<androidx.versionedparcelable.b: void G(android.os.Parcelable)>","// androidx.versionedparcelable.a
@Override
public void G(Parcelable parcelable) {
    this.f78e.writeParcelable(parcelable, 0);
}"
"<androidx.versionedparcelable.b: void y(boolean)>","// androidx.versionedparcelable.a
@Override
public void y(boolean z2) {
    this.f78e.writeInt(z2 ? 1 : 0);
}"
"<androidx.versionedparcelable.b: void I(java.lang.String)>","// androidx.versionedparcelable.a
@Override
public void I(String str) {
    this.f78e.writeString(str);
}"
"<androidx.versionedparcelable.b: byte[] i()>","// androidx.versionedparcelable.a
@Override
public byte[] i() {
    int readInt = this.f78e.readInt();
    if (readInt < 0) {
        return null;
    }
    byte[] bArr = new byte[readInt];
    this.f78e.readByteArray(bArr);
    return bArr;
}"
"<androidx.versionedparcelable.b: boolean m(int)>","// androidx.versionedparcelable.a
@Override
public boolean m(int i2) {
    while (this.f83j < this.f80g) {
        int i3 = this.f84k;
        if (i3 == i2) {
            return true;
        }
        if (String.valueOf(i3).compareTo(String.valueOf(i2)) > 0) {
            return false;
        }
        this.f78e.setDataPosition(this.f83j);
        int readInt = this.f78e.readInt();
        this.f84k = this.f78e.readInt();
        this.f83j += readInt;
    }
    return this.f84k == i2;
}"
"<androidx.versionedparcelable.b: void w(int)>","// androidx.versionedparcelable.a
@Override
public void w(int i2) {
    a();
    this.f82i = i2;
    this.f77d.put(i2, this.f78e.dataPosition());
    E(0);
    E(i2);
}"
"<androidx.versionedparcelable.b: boolean g()>","// androidx.versionedparcelable.a
@Override
public boolean g() {
    return this.f78e.readInt() != 0;
}"
"<androidx.versionedparcelable.b: void A(byte[])>","// androidx.versionedparcelable.a
@Override
public void A(byte[] bArr) {
    if (bArr == null) {
        this.f78e.writeInt(-1);
    } else {
        this.f78e.writeInt(bArr.length);
        this.f78e.writeByteArray(bArr);
    }
}"
"<androidx.versionedparcelable.b: void E(int)>","// androidx.versionedparcelable.a
@Override
public void E(int i2) {
    this.f78e.writeInt(i2);
}"
"<u0.v: void y()>","/* JADX INFO: Access modifiers changed from: private */
public static final void y() {
}"
"<u0.v: boolean x(java.lang.Class,java.util.concurrent.ExecutorService)>","public final boolean x(Class<?> cls, ExecutorService executorService) {
    executorService.submit(new // from class: u0.t
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            v.y();
        }
    });
    Integer num = null;
    try {
        Object invoke = cls.getMethod(""getPoolSize"", new Class[0]).invoke(executorService, new Object[0]);
        if (invoke instanceof Integer) {
            num = (Integer) invoke;
        }
    } catch (Throwable unused) {
    }
    return num != null && num.intValue() >= 1;
}"
"<u0.v: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public void m(g0.g gVar, Runnable runnable) {
    try {
        Executor executor = pool;
        if (executor == null) {
            executor = v();
        }
        c.a();
        executor.execute(runnable);
    } catch (RejectedExecutionException unused) {
        c.a();
        r0.f1334j.G(runnable);
    }
}"
"<u0.v: java.util.concurrent.ExecutorService u()>","/* JADX WARN: Removed duplicated region for block: B:21:0x003d  */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
private final java.util.concurrent.ExecutorService u() {
    /*
            r6 = this;
            java.lang.SecurityManager r0 = java.lang.System.getSecurityManager()
            if (r0 == 0) goto Lb
            java.util.concurrent.ExecutorService r0 = r6.s()
            return r0
        Lb:
            r0 = 0
            java.lang.String r1 = ""java.util.concurrent.ForkJoinPool""
            java.lang.Class r1 = java.lang.Class.forName(r1)     // Catch: java.lang.Throwable -> L13
            goto L14
        L13:
            r1 = r0
        L14:
            if (r1 != 0) goto L1b
            java.util.concurrent.ExecutorService r0 = r6.s()
            return r0
        L1b:
            boolean r2 = u0.v.f1344h
            r3 = 0
            if (r2 != 0) goto L4b
            int r2 = u0.v.f1343g
            if (r2 >= 0) goto L4b
            java.lang.String r2 = ""commonPool""
            java.lang.Class[] r4 = new java.lang.Class[r3]     // Catch: java.lang.Throwable -> L39
            java.lang.reflect.Method r2 = r1.getMethod(r2, r4)     // Catch: java.lang.Throwable -> L39
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch: java.lang.Throwable -> L39
            java.lang.Object r2 = r2.invoke(r0, r4)     // Catch: java.lang.Throwable -> L39
            boolean r4 = r2 instanceof java.util.concurrent.ExecutorService     // Catch: java.lang.Throwable -> L39
            if (r4 == 0) goto L39
            java.util.concurrent.ExecutorService r2 = (java.util.concurrent.ExecutorService) r2     // Catch: java.lang.Throwable -> L39
            goto L3a
        L39:
            r2 = r0
        L3a:
            if (r2 != 0) goto L3d
            goto L4b
        L3d:
            u0.v r4 = u0.v.f1342f
            boolean r4 = r4.x(r1, r2)
            if (r4 == 0) goto L46
            goto L47
        L46:
            r2 = r0
        L47:
            if (r2 != 0) goto L4a
            goto L4b
        L4a:
            return r2
        L4b:
            r2 = 1
            java.lang.Class[] r4 = new java.lang.Class[r2]     // Catch: java.lang.Throwable -> L6f
            java.lang.Class r5 = java.lang.Integer.TYPE     // Catch: java.lang.Throwable -> L6f
            r4[r3] = r5     // Catch: java.lang.Throwable -> L6f
            java.lang.reflect.Constructor r1 = r1.getConstructor(r4)     // Catch: java.lang.Throwable -> L6f
            java.lang.Object[] r2 = new java.lang.Object[r2]     // Catch: java.lang.Throwable -> L6f
            u0.v r4 = u0.v.f1342f     // Catch: java.lang.Throwable -> L6f
            int r4 = r4.w()     // Catch: java.lang.Throwable -> L6f
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)     // Catch: java.lang.Throwable -> L6f
            r2[r3] = r4     // Catch: java.lang.Throwable -> L6f
            java.lang.Object r1 = r1.newInstance(r2)     // Catch: java.lang.Throwable -> L6f
            boolean r2 = r1 instanceof java.util.concurrent.ExecutorService     // Catch: java.lang.Throwable -> L6f
            if (r2 == 0) goto L6f
            java.util.concurrent.ExecutorService r1 = (java.util.concurrent.ExecutorService) r1     // Catch: java.lang.Throwable -> L6f
            r0 = r1
        L6f:
            if (r0 != 0) goto L75
            java.util.concurrent.ExecutorService r0 = r6.s()
        L75:
            return r0
        */
    throw new UnsupportedOperationException(""Method not decompiled: u0.v.u():java.util.concurrent.ExecutorService"");
}"
"<u0.v: void close()>","// java.io.Closeable, java.lang.AutoCloseable
@Override
public void close() {
    throw new IllegalStateException(""Close cannot be invoked on CommonPool"".toString());
}"
"<u0.v: int w()>","private final int w() {
    int a2;
    Integer valueOf = Integer.valueOf(f1343g);
    if (!(valueOf.intValue() > 0)) {
        valueOf = null;
    }
    if (valueOf != null) {
        return valueOf.intValue();
    }
    a2 = q0.f.a(Runtime.getRuntime().availableProcessors() - 1, 1);
    return a2;
}"
"<androidx.window.embedding.a: int a(boolean)>","public static /* synthetic */
int a(boolean z2) {
    return z2 ? 1231 : 1237;
}"
"<kotlinx.coroutines.scheduling.a: void execute(java.lang.Runnable)>","// java.util.concurrent.Executor
@Override
public void execute(Runnable runnable) {
    f(this, runnable, null, false, 6, null);
}"
"<kotlinx.coroutines.scheduling.a: void f(kotlinx.coroutines.scheduling.a,java.lang.Runnable,kotlinx.coroutines.scheduling.j,boolean,int,java.lang.Object)>","public static /* synthetic */
void f(a aVar, Runnable runnable, j jVar, boolean z2, int i2, Object obj) {
    if ((i2 & 2) != 0) {
        jVar = g.f1126d;
    }
    if ((i2 & 4) != 0) {
        z2 = false;
    }
    aVar.e(runnable, jVar, z2);
}"
"<kotlinx.coroutines.scheduling.a: void l(kotlinx.coroutines.scheduling.i)>","public final void l(i iVar) {
    try {
        iVar.run();
    } finally {
        try {
        } finally {
        }
    }
}"
"<kotlinx.coroutines.scheduling.a: void e(java.lang.Runnable,kotlinx.coroutines.scheduling.j,boolean)>","public final void e(Runnable runnable, j jVar, boolean z2) {
    u0.c.a();
    i c2 = c(runnable, jVar);
    c d2 = d();
    i p2 = p(d2, c2, z2);
    if (p2 != null && !a(p2)) {
        throw new RejectedExecutionException(kotlin.jvm.internal.i.j(this.f1093g, "" was terminated""));
    }
    boolean z3 = z2 && d2 != null;
    if (c2.f1129e.b() != 0) {
        n(z3);
    } else {
        if (z3) {
            return;
        }
        o();
    }
}"
"<kotlinx.coroutines.scheduling.a: void m(long)>","private final void m() {
    loop0: while (true) {
        boolean z2 = false;
        while (!a.this.g() && this.f1100e != d.TERMINATED) {
            i e2 = e(this.f1104i);
            if (e2 != null) {
                this.f1102g = 0L;
                c(e2);
            } else {
                this.f1104i = false;
                if (this.f1102g == 0) {
                    q();
                } else if (z2) {
                    r(d.PARKING);
                    Thread.interrupted();
                    LockSupport.parkNanos(this.f1102g);
                    this.f1102g = 0L;
                } else {
                    z2 = true;
                }
            }
        }
    }
    r(d.TERMINATED);
}"
"<kotlinx.coroutines.scheduling.a: int b()>","private final int b() {
    int a2;
    int i2;
    synchronized (this.f1096j) {
        if (g()) {
            i2 = -1;
        } else {
            long j2 = this.controlState;
            int i3 = (int) (j2 & 2097151);
            a2 = q0.f.a(i3 - ((int) ((j2 & 4398044413952L) >> 21)), 0);
            if (a2 >= this.f1090d) {
                return 0;
            }
            if (i3 >= this.f1091e) {
                return 0;
            }
            int i4 = ((int) (this.controlState & 2097151)) + 1;
            if (!(i4 > 0 && this.f1096j.get(i4) == null)) {
                throw new IllegalArgumentException(""Failed requirement."".toString());
            }
            c cVar = new c(i4);
            this.f1096j.set(i4, cVar);
            if (!(i4 == ((int) (2097151 & f1087m.incrementAndGet(this))))) {
                throw new IllegalArgumentException(""Failed requirement."".toString());
            }
            cVar.start();
            i2 = a2 + 1;
        }
        return i2;
    }
}"
"<kotlinx.coroutines.scheduling.a: void k(kotlinx.coroutines.scheduling.a$c,int,int)>","private final void k() {
    if (this.f1101f == 0) {
        this.f1101f = System.nanoTime() + a.this.f1092f;
    }
    LockSupport.parkNanos(a.this.f1092f);
    if (System.nanoTime() - this.f1101f >= 0) {
        this.f1101f = 0L;
        t();
    }
}"
"<kotlinx.coroutines.scheduling.a: boolean a(kotlinx.coroutines.scheduling.i)>","private final boolean a(i iVar) {
    return (iVar.f1129e.b() == 1 ? this.f1095i : this.f1094h).a(iVar);
}"
"<kotlinx.coroutines.scheduling.a: int h(kotlinx.coroutines.scheduling.a$c)>","private final int h(c cVar) {
    int f2;
    do {
        Object g2 = cVar.g();
        if (g2 == f1089o) {
            return -1;
        }
        if (g2 == null) {
            return 0;
        }
        cVar = (c) g2;
        f2 = cVar.f();
    } while (f2 == 0);
    return f2;
}"
"<kotlinx.coroutines.scheduling.a: boolean j(kotlinx.coroutines.scheduling.a$c)>","public final boolean j(c cVar) {
    long j2;
    long j3;
    int f2;
    if (cVar.g() != f1089o) {
        return false;
    }
    do {
        j2 = this.parkedWorkersStack;
        int i2 = (int) (2097151 & j2);
        j3 = (2097152 + j2) & (-2097152);
        f2 = cVar.f();
        if (p0.a()) {
            if (!(f2 != 0)) {
                throw new AssertionError();
            }
        }
        cVar.o(this.f1096j.get(i2));
    } while (!f1086l.compareAndSet(this, j2, f2 | j3));
    return true;
}"
"<kotlinx.coroutines.scheduling.a: void close()>","// java.io.Closeable, java.lang.AutoCloseable
@Override
public void close() {
    m(10000L);
}"
"<kotlinx.coroutines.scheduling.a: boolean s()>","private final boolean s() {
    c i2;
    do {
        i2 = i();
        if (i2 == null) {
            return false;
        }
    } while (!c.f1098k.compareAndSet(i2, -1, 0));
    LockSupport.unpark(i2);
    return true;
}"
"<kotlinx.coroutines.scheduling.a: boolean g()>","/* JADX WARN: Type inference failed for: r0v0, types: [int, boolean] */
public final boolean g() {
    return this._isTerminated;
}"
"<kotlinx.coroutines.scheduling.a: void o()>","public final void o(Object obj) {
    this.nextParkedWorker = obj;
}"
"<kotlinx.coroutines.scheduling.a: boolean r(kotlinx.coroutines.scheduling.a,long,int,java.lang.Object)>","public final boolean r(d dVar) {
    d dVar2 = this.f1100e;
    boolean z2 = dVar2 == d.CPU_ACQUIRED;
    if (z2) {
        a.f1087m.addAndGet(a.this, 4398046511104L);
    }
    if (dVar2 != dVar) {
        this.f1100e = dVar;
    }
    return z2;
}"
"<kotlinx.coroutines.scheduling.a: void n(boolean)>","public final void n(int i2) {
    StringBuilder sb = new StringBuilder();
    sb.append(a.this.f1093g);
    sb.append(""-worker-"");
    sb.append(i2 == 0 ? ""TERMINATED"" : String.valueOf(i2));
    setName(sb.toString());
    this.indexInArray = i2;
}"
"<kotlinx.coroutines.scheduling.a: boolean q(long)>","private final boolean q(long j2) {
    int a2;
    a2 = q0.f.a(((int) (2097151 & j2)) - ((int) ((j2 & 4398044413952L) >> 21)), 0);
    if (a2 < this.f1090d) {
        int b2 = b();
        if (b2 == 1 && this.f1090d > 1) {
            b();
        }
        if (b2 > 0) {
            return true;
        }
    }
    return false;
}"
"<y.m: boolean b(int,java.lang.String[],int[])>","boolean b(int i2, String[] strArr, int[] iArr);"
"<kotlinx.coroutines.scheduling.m: long l(kotlinx.coroutines.scheduling.m)>","public final long l(m mVar) {
    if (p0.a()) {
        if (!(e() == 0)) {
            throw new AssertionError();
        }
    }
    i i2 = mVar.i();
    if (i2 == null) {
        return m(mVar, false);
    }
    i b2 = b(this, i2, false, 2, null);
    if (!p0.a()) {
        return -1L;
    }
    if (b2 == null) {
        return -1L;
    }
    throw new AssertionError();
}"
"<kotlinx.coroutines.scheduling.m: int f()>","public final int f() {
    return this.lastScheduledTask != null ? e() + 1 : e();
}"
"<kotlinx.coroutines.scheduling.m: int e()>","public final int e() {
    return this.producerIndex - this.consumerIndex;
}"
"<kotlinx.coroutines.scheduling.m: void g(kotlinx.coroutines.scheduling.d)>","public final void g(d dVar) {
    i iVar = (i) f1137b.getAndSet(this, null);
    if (iVar != null) {
        dVar.a(iVar);
    }
    do {
    } while (j(dVar));
}"
"<kotlinx.coroutines.scheduling.m: void d(kotlinx.coroutines.scheduling.i)>","private final void d(i iVar) {
    if (iVar != null) {
        if (iVar.f1129e.b() == 1) {
            int decrementAndGet = f1140e.decrementAndGet(this);
            if (p0.a()) {
                if (!(decrementAndGet >= 0)) {
                    throw new AssertionError();
                }
            }
        }
    }
}"
"<kotlinx.coroutines.scheduling.m: boolean j(kotlinx.coroutines.scheduling.d)>","private final boolean j(d dVar) {
    i i2 = i();
    if (i2 == null) {
        return false;
    }
    dVar.a(i2);
    return true;
}"
"<kotlinx.coroutines.scheduling.m: long m(kotlinx.coroutines.scheduling.m,boolean)>","private final long m(m mVar, boolean z2) {
    i iVar;
    do {
        iVar = (i) mVar.lastScheduledTask;
        if (iVar == null) {
            return -2L;
        }
        if (z2) {
            if (!(iVar.f1129e.b() == 1)) {
                return -2L;
            }
        }
        long a2 = l.f1136f.a() - iVar.f1128d;
        long j2 = l.f1131a;
        if (a2 < j2) {
            return j2 - a2;
        }
    } while (!kotlinx.coroutines.internal.c.a(f1137b, mVar, iVar, null));
    b(this, iVar, false, 2, null);
    return -1L;
}"
"<kotlinx.coroutines.scheduling.m: long k(kotlinx.coroutines.scheduling.m)>","public final long k(m mVar) {
    if (p0.a()) {
        if (!(e() == 0)) {
            throw new AssertionError();
        }
    }
    int i2 = mVar.producerIndex;
    AtomicReferenceArray<i> atomicReferenceArray = mVar.f1141a;
    for (int i3 = mVar.consumerIndex; i3 != i2; i3++) {
        int i4 = i3 & 127;
        if (mVar.blockingTasksInBuffer == 0) {
            break;
        }
        i iVar = atomicReferenceArray.get(i4);
        if (iVar != null) {
            if ((iVar.f1129e.b() == 1) && atomicReferenceArray.compareAndSet(i4, iVar, null)) {
                f1140e.decrementAndGet(mVar);
                b(this, iVar, false, 2, null);
                return -1L;
            }
        }
    }
    return m(mVar, true);
}"
"<io.flutter.plugins.webviewflutter.o2: void a(java.lang.Long,java.lang.String)>","// io.flutter.plugins.webviewflutter.k.l
@Override
public void a(Long l2, String str) {
    this.f717a.b(this.f718b.a(this.f719c, str, this.f720d), l2.longValue());
}"
"<io.flutter.plugins.webviewflutter.o2: void b(android.os.Handler)>","public void b(Handler handler) {
    this.f720d = handler;
}"
"<android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.a)>","public static void write(IconCompat iconCompat, a aVar) {
    androidx.core.graphics.drawable.IconCompatParcelizer.write(iconCompat, aVar);
}"
"<a0.a: void c()>","public void c() {
    this.f16b.b(null);
}"
"<u0.y0: boolean a()>","// u0.j1
@Override
public boolean a() {
    return this.f1374d;
}"
"<androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)>","public final boolean contains(Activity activity) {
    i.e(activity, ""activity"");
    return this.primaryActivityStack.contains(activity) || this.secondaryActivityStack.contains(activity);
}"
"<androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof SplitInfo)) {
        return false;
    }
    SplitInfo splitInfo = (SplitInfo) obj;
    if (i.a(this.primaryActivityStack, splitInfo.primaryActivityStack) && i.a(this.secondaryActivityStack, splitInfo.secondaryActivityStack)) {
        return (this.splitRatio > splitInfo.splitRatio ? 1 : (this.splitRatio == splitInfo.splitRatio ? 0 : -1)) == 0;
    }
    return false;
}"
"<androidx.window.embedding.SplitInfo: float getSplitRatio()>","public final float getSplitRatio() {
    return this.splitRatio;
}"
"<androidx.window.embedding.SplitInfo: int hashCode()>","public int hashCode() {
    return (((this.primaryActivityStack.hashCode() * 31) + this.secondaryActivityStack.hashCode()) * 31) + Float.floatToIntBits(this.splitRatio);
}"
"<y.b: void d(java.lang.String,y.b$a)>","void d(String str, a aVar);"
"<y.b: void a(java.lang.String,java.nio.ByteBuffer,y.b$b)>","void a(ByteBuffer byteBuffer, InterfaceC0039b interfaceC0039b);"
"<y.b: void c(java.lang.String,y.b$a,y.b$c)>","void c(String str, a aVar, c cVar);"
"<t0.a: boolean c(char)>","public static final boolean c(char c2) {
    return Character.isWhitespace(c2) || Character.isSpaceChar(c2);
}"
"<t0.a: int a(int)>","public static final int a(int i2) {
    if (new q0.c(2, 36).f(i2)) {
        return i2;
    }
    throw new IllegalArgumentException(""radix "" + i2 + "" was not in valid range "" + new q0.c(2, 36));
}"
"<t0.a: int b(char,int)>","public static final int b(char c2, int i2) {
    return Character.digit((int) c2, i2);
}"
"<androidx.lifecycle.c: void b(androidx.lifecycle.e)>","public abstract void b(e eVar);"
"<io.flutter.plugin.editing.e: void a(java.lang.CharSequence,java.lang.CharSequence,int,int)>","private void a(CharSequence charSequence, CharSequence charSequence2, int i2, int i3) {
    this.f451a = charSequence;
    this.f452b = charSequence2;
    this.f453c = i2;
    this.f454d = i3;
}"
"<b.d: boolean containsKey(java.lang.Object)>","public boolean containsKey(Object obj) {
    return f(obj) >= 0;
}"
"<b.d: int b(int[],int,int)>","private static int b(int[] iArr, int i2, int i3) {
    try {
        return b.a(iArr, i2, i3);
    } catch (ArrayIndexOutOfBoundsException unused) {
        throw new ConcurrentModificationException();
    }
}"
"<b.d: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj instanceof d) {
        d dVar = (d) obj;
        if (size() != dVar.size()) {
            return false;
        }
        for (int i2 = 0; i2 < this.f125f; i2++) {
            try {
                K i3 = i(i2);
                V l2 = l(i2);
                Object obj2 = dVar.get(i3);
                if (l2 == null) {
                    if (obj2 != null || !dVar.containsKey(i3)) {
                        return false;
                    }
                } else if (!l2.equals(obj2)) {
                    return false;
                }
            } catch (ClassCastException | NullPointerException unused) {
                return false;
            }
        }
        return true;
    }
    if (obj instanceof Map) {
        Map map = (Map) obj;
        if (size() != map.size()) {
            return false;
        }
        for (int i4 = 0; i4 < this.f125f; i4++) {
            try {
                K i5 = i(i4);
                V l3 = l(i4);
                Object obj3 = map.get(i5);
                if (l3 == null) {
                    if (obj3 != null || !map.containsKey(i5)) {
                        return false;
                    }
                } else if (!l3.equals(obj3)) {
                    return false;
                }
            } catch (ClassCastException | NullPointerException unused2) {
            }
        }
        return true;
    }
    return false;
}"
"<b.d: void c(int)>","public void c(int i2) {
    int i3 = this.f125f;
    int[] iArr = this.f123d;
    if (iArr.length < i2) {
        Object[] objArr = this.f124e;
        a(i2);
        if (this.f125f > 0) {
            System.arraycopy(iArr, 0, this.f123d, 0, i3);
            System.arraycopy(objArr, 0, this.f124e, 0, i3 << 1);
        }
        d(iArr, objArr, i3);
    }
    if (this.f125f != i3) {
        throw new ConcurrentModificationException();
    }
}"
"<b.d: int g()>","int g() {
    int i2 = this.f125f;
    if (i2 == 0) {
        return -1;
    }
    int b2 = b(this.f123d, i2, 0);
    if (b2 < 0 || this.f124e[b2 << 1] == null) {
        return b2;
    }
    int i3 = b2 + 1;
    while (i3 < i2 && this.f123d[i3] == 0) {
        if (this.f124e[i3 << 1] == null) {
            return i3;
        }
        i3++;
    }
    for (int i4 = b2 - 1; i4 >= 0 && this.f123d[i4] == 0; i4--) {
        if (this.f124e[i4 << 1] == null) {
            return i4;
        }
    }
    return ~i3;
}"
"<b.d: void d(int[],java.lang.Object[],int)>","private static void d(int[] iArr, Object[] objArr, int i2) {
    if (iArr.length == 8) {
        synchronized (d.class) {
            if (f122j < 10) {
                objArr[0] = f121i;
                objArr[1] = iArr;
                for (int i3 = (i2 << 1) - 1; i3 >= 2; i3--) {
                    objArr[i3] = null;
                }
                f121i = objArr;
                f122j++;
            }
        }
        return;
    }
    if (iArr.length == 4) {
        synchronized (d.class) {
            if (f120h < 10) {
                objArr[0] = f119g;
                objArr[1] = iArr;
                for (int i4 = (i2 << 1) - 1; i4 >= 2; i4--) {
                    objArr[i4] = null;
                }
                f119g = objArr;
                f120h++;
            }
        }
    }
}"
"<b.d: int f(java.lang.Object)>","public int f(Object obj) {
    return obj == null ? g() : e(obj, obj.hashCode());
}"
"<b.d: boolean containsValue(java.lang.Object)>","public boolean containsValue(Object obj) {
    return h(obj) >= 0;
}"
"<b.d: int hashCode()>","public int hashCode() {
    int[] iArr = this.f123d;
    Object[] objArr = this.f124e;
    int i2 = this.f125f;
    int i3 = 1;
    int i4 = 0;
    int i5 = 0;
    while (i4 < i2) {
        Object obj = objArr[i3];
        i5 += (obj == null ? 0 : obj.hashCode()) ^ iArr[i4];
        i4++;
        i3 += 2;
    }
    return i5;
}"
"<b.d: void clear()>","public void clear() {
    int i2 = this.f125f;
    if (i2 > 0) {
        int[] iArr = this.f123d;
        Object[] objArr = this.f124e;
        this.f123d = b.f101a;
        this.f124e = b.f103c;
        this.f125f = 0;
        d(iArr, objArr, i2);
    }
    if (this.f125f > 0) {
        throw new ConcurrentModificationException();
    }
}"
"<b.d: int h(java.lang.Object)>","/* JADX INFO: Access modifiers changed from: package-private */
public int h(Object obj) {
    int i2 = this.f125f * 2;
    Object[] objArr = this.f124e;
    if (obj == null) {
        for (int i3 = 1; i3 < i2; i3 += 2) {
            if (objArr[i3] == null) {
                return i3 >> 1;
            }
        }
        return -1;
    }
    for (int i4 = 1; i4 < i2; i4 += 2) {
        if (obj.equals(objArr[i4])) {
            return i4 >> 1;
        }
    }
    return -1;
}"
"<b.d: boolean remove(java.lang.Object,java.lang.Object)>","public boolean remove(Object obj, Object obj2) {
    int f2 = f(obj);
    if (f2 < 0) {
        return false;
    }
    V l2 = l(f2);
    if (obj2 != l2 && (obj2 == null || !obj2.equals(l2))) {
        return false;
    }
    j(f2);
    return true;
}"
"<b.d: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","public boolean replace(K k2, V v2, V v3) {
    int f2 = f(k2);
    if (f2 < 0) {
        return false;
    }
    V l2 = l(f2);
    if (l2 != v2 && (v2 == null || !v2.equals(l2))) {
        return false;
    }
    k(f2, v3);
    return true;
}"
"<b.d: boolean isEmpty()>","public boolean isEmpty() {
    return this.f125f <= 0;
}"
"<b.d: int size()>","public int size() {
    return this.f125f;
}"
"<b.d: int e(java.lang.Object,int)>","int e(Object obj, int i2) {
    int i3 = this.f125f;
    if (i3 == 0) {
        return -1;
    }
    int b2 = b(this.f123d, i3, i2);
    if (b2 < 0 || obj.equals(this.f124e[b2 << 1])) {
        return b2;
    }
    int i4 = b2 + 1;
    while (i4 < i3 && this.f123d[i4] == i2) {
        if (obj.equals(this.f124e[i4 << 1])) {
            return i4;
        }
        i4++;
    }
    for (int i5 = b2 - 1; i5 >= 0 && this.f123d[i5] == i2; i5--) {
        if (obj.equals(this.f124e[i5 << 1])) {
            return i5;
        }
    }
    return ~i4;
}"
"<b.d: void a(int)>","private void a(int i2) {
    if (i2 == 8) {
        synchronized (d.class) {
            Object[] objArr = f121i;
            if (objArr != null) {
                this.f124e = objArr;
                f121i = (Object[]) objArr[0];
                this.f123d = (int[]) objArr[1];
                objArr[1] = null;
                objArr[0] = null;
                f122j--;
                return;
            }
        }
    } else if (i2 == 4) {
        synchronized (d.class) {
            Object[] objArr2 = f119g;
            if (objArr2 != null) {
                this.f124e = objArr2;
                f119g = (Object[]) objArr2[0];
                this.f123d = (int[]) objArr2[1];
                objArr2[1] = null;
                objArr2[0] = null;
                f120h--;
                return;
            }
        }
    }
    this.f123d = new int[i2];
    this.f124e = new Object[i2 << 1];
}"
"<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)>","private final boolean validBounds(Activity activity, Bounds bounds) {
    Rect bounds2 = WindowMetricsCalculatorCompat.INSTANCE.computeCurrentWindowMetrics(activity).getBounds();
    if (bounds.isZero()) {
        return false;
    }
    if (bounds.getWidth() != bounds2.width() && bounds.getHeight() != bounds2.height()) {
        return false;
    }
    if (bounds.getWidth() >= bounds2.width() || bounds.getHeight() >= bounds2.height()) {
        return (bounds.getWidth() == bounds2.width() && bounds.getHeight() == bounds2.height()) ? false : true;
    }
    return false;
}"
"<l.a: n.a a()>","public n.a a() {
    return this.f1145b;
}"
"<q.b: void i(q.a)>","void i(a aVar);"
"<e0.d: void e(java.lang.Object[],java.lang.Object,int,int,int,java.lang.Object)>","public static /* synthetic */
void e(Object[] objArr, Object obj, int i2, int i3, int i4, Object obj2) {
    if ((i4 & 2) != 0) {
        i2 = 0;
    }
    if ((i4 & 4) != 0) {
        i3 = objArr.length;
    }
    d(objArr, obj, i2, i3);
}"
"<e0.d: void d(java.lang.Object[],java.lang.Object,int,int)>","public static <T> void d(T[] tArr, T t2, int i2, int i3) {
    kotlin.jvm.internal.i.e(tArr, ""<this>"");
    Arrays.fill(tArr, i2, i3, t2);
}"
"<e0.d: void f(java.lang.Object[],java.util.Comparator)>","public static final <T> void f(T[] tArr, Comparator<? super T> comparator) {
    kotlin.jvm.internal.i.e(tArr, ""<this>"");
    kotlin.jvm.internal.i.e(comparator, ""comparator"");
    if (tArr.length > 1) {
        Arrays.sort(tArr, comparator);
    }
}"
"<a.b: int size()>","public int size() {
    return this.f4g;
}"
"<a.b: int hashCode()>","// java.util.Map.Entry
@Override
public int hashCode() {
    return this.f5d.hashCode() ^ this.f6e.hashCode();
}"
"<a.b: boolean equals(java.lang.Object)>","// java.util.Map.Entry
@Override
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (!(obj instanceof c)) {
        return false;
    }
    c cVar = (c) obj;
    return this.f5d.equals(cVar.f5d) && this.f6e.equals(cVar.f6e);
}"
"<u0.s1: void d(g0.g)>","public static final void d(g0.g gVar) {
    t1.d(gVar);
}"
"<u0.s1: void e(u0.o1)>","public static final void e(o1 o1Var) {
    t1.e(o1Var);
}"
"<u0.s1: void c(g0.g,java.util.concurrent.CancellationException)>","public static final void c(g0.g gVar, CancellationException cancellationException) {
    t1.c(gVar, cancellationException);
}"
"<y.n: void f()>","void f();"
"<u0.v1: boolean o0(u0.j1,java.lang.Object)>","private final boolean o0(j1 j1Var, Object obj) {
    if (p0.a()) {
        if (!((j1Var instanceof y0) || (j1Var instanceof u1))) {
            throw new AssertionError();
        }
    }
    if (p0.a() && !(!(obj instanceof y))) {
        throw new AssertionError();
    }
    if (!kotlinx.coroutines.internal.c.a(f1346d, this, j1Var, w1.g(obj))) {
        return false;
    }
    c0(null);
    d0(obj);
    E(j1Var, obj);
    return true;
}"
"<u0.v1: void c(java.util.concurrent.CancellationException)>","// u0.o1
@Override
public void c(CancellationException cancellationException) {
    if (cancellationException == null) {
        cancellationException = new p1(C(), null, this);
    }
    z(cancellationException);
}"
"<u0.v1: void R(java.lang.Throwable)>","public void R(Throwable th) {
    throw th;
}"
"<u0.v1: void x(java.lang.Object)>","/* JADX INFO: Access modifiers changed from: protected */
public void x(Object obj) {
}"
"<u0.v1: void z(java.lang.Throwable)>","public void z(Throwable th) {
    y(th);
}"
"<u0.v1: boolean y(java.lang.Object)>","public final boolean y(Object obj) {
    Object obj2;
    kotlinx.coroutines.internal.z zVar;
    kotlinx.coroutines.internal.z zVar2;
    kotlinx.coroutines.internal.z zVar3;
    obj2 = w1.f1359a;
    if (M() && (obj2 = A(obj)) == w1.f1360b) {
        return true;
    }
    zVar = w1.f1359a;
    if (obj2 == zVar) {
        obj2 = V(obj);
    }
    zVar2 = w1.f1359a;
    if (obj2 == zVar2 || obj2 == w1.f1360b) {
        return true;
    }
    zVar3 = w1.f1362d;
    if (obj2 == zVar3) {
        return false;
    }
    x(obj2);
    return true;
}"
"<u0.v1: boolean s0(u0.v1$b,u0.r,java.lang.Object)>","private final boolean s0(b bVar, r rVar, Object obj) {
    while (o1.a.d(rVar.f1333h, false, false, new a(this, bVar, rVar, obj), 1, null) == a2.f1281d) {
        rVar = Z(rVar);
        if (rVar == null) {
            return false;
        }
    }
    return true;
}"
"<u0.v1: void E(u0.j1,java.lang.Object)>","private final void E(j1 j1Var, Object obj) {
    q O = O();
    if (O != null) {
        O.b();
        i0(a2.f1281d);
    }
    y yVar = obj instanceof y ? (y) obj : null;
    Throwable th = yVar != null ? yVar.f1373a : null;
    if (!(j1Var instanceof u1)) {
        z1 c2 = j1Var.c();
        if (c2 == null) {
            return;
        }
        b0(c2, th);
        return;
    }
    try {
        ((u1) j1Var).y(th);
    } catch (Throwable th2) {
        R(new b0(""Exception in completion handler "" + j1Var + "" for "" + this, th2));
    }
}"
"<u0.v1: g0.g plus(g0.g)>","// g0.g
@Override
public g0.g plus(g0.g gVar) {
    return o1.a.f(this, gVar);
}"
"<u0.v1: void d0(java.lang.Object)>","protected void d0(Object obj) {
}"
"<u0.v1: boolean a()>","// u0.j1
@Override
public boolean a() {
    return f() == null;
}"
"<u0.v1: boolean D(java.lang.Throwable)>","public boolean D(Throwable th) {
    if (th instanceof CancellationException) {
        return true;
    }
    return y(th) && L();
}"
"<u0.v1: boolean i()>","public final boolean i() {
    kotlinx.coroutines.internal.z zVar;
    Object e2 = e();
    zVar = w1.f1363e;
    return e2 == zVar;
}"
"<u0.v1: void g0(u0.u1)>","private final void g0(u1 u1Var) {
    u1Var.k(new z1());
    kotlinx.coroutines.internal.c.a(f1346d, this, u1Var, u1Var.p());
}"
"<u0.v1: boolean M()>","public boolean M() {
    return false;
}"
"<u0.v1: void f0(u0.y0)>","/* JADX WARN: Multi-variable type inference failed */
/* JADX WARN: Type inference failed for: r1v2, types: [u0.i1] */
private final void f0(y0 y0Var) {
    z1 z1Var = new z1();
    if (!y0Var.a()) {
        z1Var = new i1(z1Var);
    }
    kotlinx.coroutines.internal.c.a(f1346d, this, y0Var, z1Var);
}"
"<u0.v1: boolean L()>","public boolean L() {
    return true;
}"
"<u0.v1: g0.g minusKey(g0.g$c)>","// g0.g
@Override
public g0.g minusKey(g.c<?> cVar) {
    return o1.a.e(this, cVar);
}"
"<u0.v1: void a0(u0.z1,java.lang.Throwable)>","private final void a0(z1 z1Var, Throwable th) {
    b0 b0Var;
    c0(th);
    b0 b0Var2 = null;
    for (kotlinx.coroutines.internal.o oVar = (kotlinx.coroutines.internal.o) z1Var.o(); !kotlin.jvm.internal.i.a(oVar, z1Var); oVar = oVar.p()) {
        if (oVar instanceof q1) {
            u1 u1Var = (u1) oVar;
            try {
                u1Var.y(th);
            } catch (Throwable th2) {
                if (b0Var2 == null) {
                    b0Var = null;
                } else {
                    d0.b.a(b0Var2, th2);
                    b0Var = b0Var2;
                }
                if (b0Var == null) {
                    b0Var2 = new b0(""Exception in completion handler "" + u1Var + "" for "" + this, th2);
                }
            }
        }
    }
    if (b0Var2 != null) {
        R(b0Var2);
    }
    B(th);
}"
"<u0.v1: void b0(u0.z1,java.lang.Throwable)>","private final void b0(z1 z1Var, Throwable th) {
    b0 b0Var;
    b0 b0Var2 = null;
    for (kotlinx.coroutines.internal.o oVar = (kotlinx.coroutines.internal.o) z1Var.o(); !kotlin.jvm.internal.i.a(oVar, z1Var); oVar = oVar.p()) {
        if (oVar instanceof u1) {
            u1 u1Var = (u1) oVar;
            try {
                u1Var.y(th);
            } catch (Throwable th2) {
                if (b0Var2 == null) {
                    b0Var = null;
                } else {
                    d0.b.a(b0Var2, th2);
                    b0Var = b0Var2;
                }
                if (b0Var == null) {
                    b0Var2 = new b0(""Exception in completion handler "" + u1Var + "" for "" + this, th2);
                }
            }
        }
    }
    if (b0Var2 == null) {
        return;
    }
    R(b0Var2);
}"
"<u0.v1: void c0(java.lang.Throwable)>","protected void c0(Throwable th) {
}"
"<u0.v1: void F(u0.v1$b,u0.r,java.lang.Object)>","/* JADX INFO: Access modifiers changed from: private */
public final void F(b bVar, r rVar, Object obj) {
    if (p0.a()) {
        if (!(P() == bVar)) {
            throw new AssertionError();
        }
    }
    r Z = Z(rVar);
    if (Z == null || !s0(bVar, Z, obj)) {
        x(H(bVar, obj));
    }
}"
"<u0.v1: void w(java.lang.Throwable,java.util.List)>","private final void w(Throwable th, List<? extends Throwable> list) {
    if (list.size() <= 1) {
        return;
    }
    Set newSetFromMap = Collections.newSetFromMap(new IdentityHashMap(list.size()));
    Throwable n2 = !p0.d() ? th : kotlinx.coroutines.internal.y.n(th);
    for (Throwable th2 : list) {
        if (p0.d()) {
            th2 = kotlinx.coroutines.internal.y.n(th2);
        }
        if (th2 != th && th2 != n2 && !(th2 instanceof CancellationException) && newSetFromMap.add(th2)) {
            d0.b.a(th, th2);
        }
    }
}"
"<u0.v1: boolean B(java.lang.Throwable)>","private final boolean B(Throwable th) {
    if (U()) {
        return true;
    }
    boolean z2 = th instanceof CancellationException;
    q O = O();
    return (O == null || O == a2.f1281d) ? z2 : O.f(th) || z2;
}"
"<u0.v1: boolean v(java.lang.Object,u0.z1,u0.u1)>","private final boolean v(Object obj, z1 z1Var, u1 u1Var) {
    int x2;
    c cVar = new c(u1Var, this, obj);
    do {
        x2 = z1Var.q().x(u1Var, z1Var, cVar);
        if (x2 == 1) {
            return true;
        }
    } while (x2 != 2);
    return false;
}"
"<u0.v1: boolean U()>","protected boolean U() {
    return false;
}"
"<u0.v1: boolean T()>","public final boolean T() {
    return !(P() instanceof j1);
}"
"<u0.v1: int j0(java.lang.Object)>","private final int j0(Object obj) {
    y0 y0Var;
    if (!(obj instanceof y0)) {
        if (!(obj instanceof i1)) {
            return 0;
        }
        if (!kotlinx.coroutines.internal.c.a(f1346d, this, obj, ((i1) obj).c())) {
            return -1;
        }
        e0();
        return 1;
    }
    if (((y0) obj).a()) {
        return 0;
    }
    AtomicReferenceFieldUpdater atomicReferenceFieldUpdater = f1346d;
    y0Var = w1.f1365g;
    if (!kotlinx.coroutines.internal.c.a(atomicReferenceFieldUpdater, this, obj, y0Var)) {
        return -1;
    }
    e0();
    return 1;
}"
"<u0.v1: boolean Q(java.lang.Throwable)>","protected boolean Q(Throwable th) {
    return false;
}"
"<u0.v1: void i0(u0.q)>","public final void i0(q qVar) {
    this._parentHandle = qVar;
}"
"<u0.v1: void g(u0.c2)>","// u0.s
@Override
public final void g(c2 c2Var) {
    y(c2Var);
}"
"<u0.v1: void e0()>","protected void e0() {
}"
"<u0.v1: void h0(u0.u1)>","public final void h0(u1 u1Var) {
    Object P;
    AtomicReferenceFieldUpdater atomicReferenceFieldUpdater;
    y0 y0Var;
    do {
        P = P();
        if (!(P instanceof u1)) {
            if (!(P instanceof j1) || ((j1) P).c() == null) {
                return;
            }
            u1Var.u();
            return;
        }
        if (P != u1Var) {
            return;
        }
        atomicReferenceFieldUpdater = f1346d;
        y0Var = w1.f1365g;
    } while (!kotlinx.coroutines.internal.c.a(atomicReferenceFieldUpdater, this, P, y0Var));
}"
"<u0.v1: boolean p0(u0.j1,java.lang.Throwable)>","private final boolean p0(j1 j1Var, Throwable th) {
    if (p0.a() && !(!(j1Var instanceof b))) {
        throw new AssertionError();
    }
    if (p0.a() && !j1Var.a()) {
        throw new AssertionError();
    }
    z1 N = N(j1Var);
    if (N == null) {
        return false;
    }
    if (!kotlinx.coroutines.internal.c.a(f1346d, this, j1Var, new b(N, false, th))) {
        return false;
    }
    a0(N, th);
    return true;
}"
"<u0.v1: void S(u0.o1)>","/* JADX INFO: Access modifiers changed from: protected */
public final void S(o1 o1Var) {
    if (p0.a()) {
        if (!(O() == null)) {
            throw new AssertionError();
        }
    }
    if (o1Var == null) {
        i0(a2.f1281d);
        return;
    }
    o1Var.i();
    q p2 = o1Var.p(this);
    i0(p2);
    if (T()) {
        p2.b();
        i0(a2.f1281d);
    }
}"
"<c0.e: void b(java.lang.String,int)>","public static void b(String str, int i2) {
    h.a.a(c(str), i2);
}"
"<c0.e: void a(java.lang.String)>","public static void a(String str) {
    h.a.c(c(str));
}"
"<c0.e: void e(java.lang.String,int)>","public static void e(String str, int i2) {
    h.a.d(c(str), i2);
}"
"<c0.e: void d()>","public static void d() {
    h.a.f();
}"
"<io.flutter.plugins.webviewflutter.d1: void c(io.flutter.plugins.webviewflutter.k$a0,java.lang.Object,y.a$e)>","public static /* synthetic */
void c(k.a0 a0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""shouldOverrideUrlLoadingArg unexpectedly null."");
    }
    a0Var.b(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.d1: void a(io.flutter.plugins.webviewflutter.k$a0,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    d1.c(k.a0.this, obj, eVar);
}"
"<io.flutter.plugins.webviewflutter.d1: void d(y.b,io.flutter.plugins.webviewflutter.k$a0)>","public static void d(y.b bVar, final k.a0 a0Var) {
    new y.a(bVar, ""dev.flutter.pigeon.WebViewClientHostApi.create"", b()).e(a0Var != null ? new // from class: io.flutter.plugins.webviewflutter.c1
    a.d() {

        // y.a.d
        @Override
        public final void a(Object obj, a.e eVar) {
            d1.c(k.a0.this, obj, eVar);
        }
    } : null);
}"
"<e0.v: void remove()>","// java.util.Iterator
@Override
public void remove() {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.v: int a()>","public abstract int a();"
"<x.i: void m(boolean)>","void m(c cVar);"
"<x.i: void l(x.i$h)>","public void l(h hVar) {
    this.f1500b = hVar;
}"
"<x.i: int h(org.json.JSONArray)>","/* JADX INFO: Access modifiers changed from: private */
/* JADX WARN: Failed to find 'out' block for switch in B:22:0x003e. Please report as an issue. */
/* JADX WARN: Removed duplicated region for block: B:35:0x0053 A[RETURN] */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public int h(org.json.JSONArray r10) {
    /*
            r9 = this;
            r0 = 0
            r1 = r0
            r2 = r1
            r3 = r2
        L4:
            int r4 = r10.length()
            r5 = 4
            r6 = 2
            r7 = 1
            if (r1 >= r4) goto L38
            java.lang.String r4 = r10.getString(r1)
            x.i$f r4 = x.i.f.a(r4)
            int[] r8 = x.i.b.f1503a
            int r4 = r4.ordinal()
            r4 = r8[r4]
            if (r4 == r7) goto L30
            if (r4 == r6) goto L2d
            r6 = 3
            if (r4 == r6) goto L2a
            if (r4 == r5) goto L27
            goto L32
        L27:
            r2 = r2 | 8
            goto L32
        L2a:
            r2 = r2 | 2
            goto L32
        L2d:
            r2 = r2 | 4
            goto L32
        L30:
            r2 = r2 | 1
        L32:
            if (r3 != 0) goto L35
            r3 = r2
        L35:
            int r1 = r1 + 1
            goto L4
        L38:
            if (r2 == 0) goto L57
            r10 = 9
            r1 = 8
            switch(r2) {
                case 2: goto L56;
                case 3: goto L4d;
                case 4: goto L4c;
                case 5: goto L4a;
                case 6: goto L4d;
                case 7: goto L4d;
                case 8: goto L49;
                case 9: goto L4d;
                case 10: goto L46;
                case 11: goto L45;
                case 12: goto L4d;
                case 13: goto L4d;
                case 14: goto L4d;
                case 15: goto L42;
                default: goto L41;
            }
        L41:
            goto L53
        L42:
            r10 = 13
            return r10
        L45:
            return r6
        L46:
            r10 = 11
            return r10
        L49:
            return r1
        L4a:
            r10 = 12
        L4c:
            return r10
        L4d:
            if (r3 == r6) goto L56
            if (r3 == r5) goto L55
            if (r3 == r1) goto L54
        L53:
            return r7
        L54:
            return r1
        L55:
            return r10
        L56:
            return r0
        L57:
            r10 = -1
            return r10
        */
    throw new UnsupportedOperationException(""Method not decompiled: x.i.h(org.json.JSONArray):int"");
}"
"<u0.j0: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    return (obj instanceof j0) && this.f1302d == ((j0) obj).f1302d;
}"
"<u0.j0: long m()>","public final long m() {
    return this.f1302d;
}"
"<u0.j0: void d(g0.g,java.lang.Object)>","// u0.e2
@Override
public /* renamed from: o, reason: merged with bridge method [inline-methods] */
void d(g0.g gVar, String str) {
    Thread.currentThread().setName(str);
}"
"<u0.j0: int hashCode()>","public int hashCode() {
    return i0.a(this.f1302d);
}"
"<e0.j: int g(java.lang.Iterable,int)>","public static <T> int g(Iterable<? extends T> iterable, int i2) {
    kotlin.jvm.internal.i.e(iterable, ""<this>"");
    return iterable instanceof Collection ? ((Collection) iterable).size() : i2;
}"
"<w0.a: void t()>","protected void t() {
}"
"<w0.a: boolean q(w0.o)>","/* JADX INFO: Access modifiers changed from: protected */
public boolean q(o<? super E> oVar) {
    int x2;
    kotlinx.coroutines.internal.o q2;
    if (!r()) {
        kotlinx.coroutines.internal.o e2 = e();
        d dVar = new d(oVar, this);
        do {
            kotlinx.coroutines.internal.o q3 = e2.q();
            if (!(!(q3 instanceof s))) {
                return false;
            }
            x2 = q3.x(oVar, e2, dVar);
            if (x2 != 1) {
            }
        } while (x2 != 2);
        return false;
    }
    kotlinx.coroutines.internal.o e3 = e();
    do {
        q2 = e3.q();
        if (!(!(q2 instanceof s))) {
            return false;
        }
    } while (!q2.j(oVar, e3));
    return true;
}"
"<w0.a: void u()>","protected void u() {
}"
"<w0.a: boolean s()>","protected abstract boolean s();"
"<w0.a: void w(u0.k,w0.o)>","/* JADX INFO: Access modifiers changed from: private */
public final void w(u0.k<?> kVar, o<?> oVar) {
    kVar.b(new c(oVar));
}"
"<w0.a: boolean p(w0.o)>","/* JADX INFO: Access modifiers changed from: private */
public final boolean p(o<? super E> oVar) {
    boolean q2 = q(oVar);
    if (q2) {
        u();
    }
    return q2;
}"
"<w0.a: boolean r()>","protected abstract boolean r();"
"<kotlinx.coroutines.internal.a: boolean c()>","public final boolean c() {
    return this.f1016b == this.f1017c;
}"
"<kotlinx.coroutines.internal.a: void b()>","private final void b() {
    Object[] objArr = this.f1015a;
    int length = objArr.length;
    Object[] objArr2 = new Object[length << 1];
    e0.d.c(objArr, objArr2, 0, this.f1016b, 0, 10, null);
    Object[] objArr3 = this.f1015a;
    int length2 = objArr3.length;
    int i2 = this.f1016b;
    e0.d.c(objArr3, objArr2, length2 - i2, 0, i2, 4, null);
    this.f1015a = objArr2;
    this.f1016b = 0;
    this.f1017c = length;
}"
"<kotlinx.coroutines.internal.a: void a(java.lang.Object)>","public final void a(T t2) {
    Object[] objArr = this.f1015a;
    int i2 = this.f1017c;
    objArr[i2] = t2;
    int length = (objArr.length - 1) & (i2 + 1);
    this.f1017c = length;
    if (length == this.f1016b) {
        b();
    }
}"
"<u0.o: boolean c()>","public final boolean c() {
    return f1324c.compareAndSet(this, 0, 1);
}"
"<u0.f2: void b()>","public final void b() {
    f1293b.set(null);
}"
"<u0.f2: void c(u0.z0)>","public final void c(z0 z0Var) {
    f1293b.set(z0Var);
}"
"<androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()>","public final boolean getFinishSecondaryWithPrimary() {
    return this.finishSecondaryWithPrimary;
}"
"<androidx.window.embedding.SplitPairRule: int hashCode()>","// androidx.window.embedding.SplitRule
@Override
public int hashCode() {
    return (((((((super.hashCode() * 31) + this.filters.hashCode()) * 31) + a.a(this.finishPrimaryWithSecondary)) * 31) + a.a(this.finishSecondaryWithPrimary)) * 31) + a.a(this.clearTop);
}"
"<androidx.window.embedding.SplitPairRule: boolean getClearTop()>","public final boolean getClearTop() {
    return this.clearTop;
}"
"<androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()>","public final boolean getFinishPrimaryWithSecondary() {
    return this.finishPrimaryWithSecondary;
}"
"<androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)>","// androidx.window.embedding.SplitRule
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof SplitPairRule) || !super.equals(obj)) {
        return false;
    }
    SplitPairRule splitPairRule = (SplitPairRule) obj;
    return i.a(this.filters, splitPairRule.filters) && this.finishPrimaryWithSecondary == splitPairRule.finishPrimaryWithSecondary && this.finishSecondaryWithPrimary == splitPairRule.finishSecondaryWithPrimary && this.clearTop == splitPairRule.clearTop;
}"
"<x.p: void m(int)>","public void m(int i2) {
    l.b.f(""TextInputChannel"", ""Sending 'send' message."");
    this.f1610a.c(""TextInputClient.performAction"", Arrays.asList(Integer.valueOf(i2), ""TextInputAction.send""));
}"
"<x.p: void l(int)>","public void l(int i2) {
    l.b.f(""TextInputChannel"", ""Sending 'search' message."");
    this.f1610a.c(""TextInputClient.performAction"", Arrays.asList(Integer.valueOf(i2), ""TextInputAction.search""));
}"
"<x.p: void b(int,java.util.Map)>","void b(int i2, b bVar);"
"<x.p: void q(int,java.util.ArrayList)>","public void q(int i2, ArrayList<io.flutter.plugin.editing.e> arrayList) {
    l.b.f(""TextInputChannel"", ""Sending message to update editing state with deltas: \nNumber of deltas: "" + arrayList.size());
    this.f1610a.c(""TextInputClient.updateEditingStateWithDeltas"", Arrays.asList(Integer.valueOf(i2), c(arrayList)));
}"
"<x.p: void i(int,java.lang.String,android.os.Bundle)>","void i(boolean z2);"
"<x.p: void k()>","public void k() {
    this.f1610a.c(""TextInputClient.requestExistingInputState"", null);
}"
"<x.p: void o(int)>","public void o(int i2) {
    l.b.f(""TextInputChannel"", ""Sending 'unspecified' message."");
    this.f1610a.c(""TextInputClient.performAction"", Arrays.asList(Integer.valueOf(i2), ""TextInputAction.unspecified""));
}"
"<x.p: void h(int)>","void h(double d2, double d3, double[] dArr);"
"<x.p: void e(int)>","void e();"
"<x.p: void j(int)>","void j();"
"<x.p: void g(int)>","void g(e eVar);"
"<x.p: void r(int,java.util.HashMap)>","public void r(int i2, HashMap<String, e> hashMap) {
    l.b.f(""TextInputChannel"", ""Sending message to update editing state for "" + String.valueOf(hashMap.size()) + "" field(s)."");
    HashMap hashMap2 = new HashMap();
    for (Map.Entry<String, e> entry : hashMap.entrySet()) {
        e value = entry.getValue();
        hashMap2.put(entry.getKey(), d(value.f1639a, value.f1640b, value.f1641c, -1, -1));
    }
    this.f1610a.c(""TextInputClient.updateEditingStateWithTag"", Arrays.asList(Integer.valueOf(i2), hashMap2));
}"
"<x.p: void f(int)>","void f(int i2, boolean z2);"
"<x.p: void n(x.p$f)>","public void n(f fVar) {
    this.f1611b = fVar;
}"
"<x.p: void p(int,java.lang.String,int,int,int,int)>","public void p(int i2, String str, int i3, int i4, int i5, int i6) {
    l.b.f(""TextInputChannel"", ""Sending message to update editing state: \nText: "" + str + ""\nSelection start: "" + i3 + ""\nSelection end: "" + i4 + ""\nComposing start: "" + i5 + ""\nComposing end: "" + i6);
    this.f1610a.c(""TextInputClient.updateEditingState"", Arrays.asList(Integer.valueOf(i2), d(str, i3, i4, i5, i6)));
}"
"<androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)>","void setSplitRules(Set<? extends EmbeddingRule> set);"
"<androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)>","void unregisterRule(EmbeddingRule embeddingRule);"
"<androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(e.a)>","void unregisterSplitListenerForActivity(e.a<List<SplitInfo>> aVar);"
"<androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,e.a)>","void registerSplitListenerForActivity(Activity activity, Executor executor, e.a<List<SplitInfo>> aVar);"
"<androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()>","boolean isSplitSupported();"
"<androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)>","void registerRule(EmbeddingRule embeddingRule);"
"<u0.g1: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public void m(g0.g gVar, Runnable runnable) {
    try {
        Executor r2 = r();
        c.a();
        r2.execute(runnable);
    } catch (RejectedExecutionException e2) {
        c.a();
        q(gVar, e2);
        w0.b().m(gVar, runnable);
    }
}"
"<u0.g1: void q(g0.g,java.util.concurrent.RejectedExecutionException)>","private final void q(g0.g gVar, RejectedExecutionException rejectedExecutionException) {
    s1.c(gVar, e1.a(""The task was rejected"", rejectedExecutionException));
}"
"<u0.g1: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    return (obj instanceof g1) && ((g1) obj).r() == r();
}"
"<u0.g1: int hashCode()>","public int hashCode() {
    return System.identityHashCode(r());
}"
"<u0.g1: void close()>","// java.io.Closeable, java.lang.AutoCloseable
@Override
public void close() {
    Executor r2 = r();
    ExecutorService executorService = r2 instanceof ExecutorService ? (ExecutorService) r2 : null;
    if (executorService == null) {
        return;
    }
    executorService.shutdown();
}"
"<g0.h: int hashCode()>","public int hashCode() {
    return 0;
}"
"<kotlin.coroutines.jvm.internal.a: void resumeWith(java.lang.Object)>","/* JADX WARN: Multi-variable type inference failed */
// g0.d
@Override
public final void resumeWith(Object obj) {
    Object invokeSuspend;
    Object c2;
    g0.d dVar = this;
    while (true) {
        h.b(dVar);
        a aVar = (a) dVar;
        g0.d dVar2 = aVar.completion;
        kotlin.jvm.internal.i.b(dVar2);
        try {
            invokeSuspend = aVar.invokeSuspend(obj);
            c2 = h0.d.c();
        } catch (Throwable th) {
            k.a aVar2 = d0.k.f144d;
            obj = d0.k.a(l.a(th));
        }
        if (invokeSuspend == c2) {
            return;
        }
        k.a aVar3 = d0.k.f144d;
        obj = d0.k.a(invokeSuspend);
        aVar.releaseIntercepted();
        if (!(dVar2 instanceof a)) {
            dVar2.resumeWith(obj);
            return;
        }
        dVar = dVar2;
    }
}"
"<kotlin.coroutines.jvm.internal.a: void releaseIntercepted()>","protected void releaseIntercepted() {
}"
"<androidx.window.core.Version: int getMinor()>","public final int getMinor() {
    return this.minor;
}"
"<androidx.window.core.Version: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (!(obj instanceof Version)) {
        return false;
    }
    Version version = (Version) obj;
    return this.major == version.major && this.minor == version.minor && this.patch == version.patch;
}"
"<androidx.window.core.Version: int hashCode()>","public int hashCode() {
    return ((((527 + this.major) * 31) + this.minor) * 31) + this.patch;
}"
"<androidx.window.core.Version: int compareTo(androidx.window.core.Version)>","// java.lang.Comparable
@Override
public int compareTo(Version other) {
    i.e(other, ""other"");
    return getBigInteger().compareTo(other.getBigInteger());
}"
"<androidx.window.core.Version: int compareTo(java.lang.Object)>","// java.lang.Comparable
@Override
public int compareTo(Version other) {
    i.e(other, ""other"");
    return getBigInteger().compareTo(other.getBigInteger());
}"
"<androidx.window.core.Version: int getPatch()>","public final int getPatch() {
    return this.patch;
}"
"<androidx.window.core.Version: int getMajor()>","public final int getMajor() {
    return this.major;
}"
"<w0.s: void y()>","public abstract void y();"
"<w0.s: void B()>","public void B() {
}"
"<io.flutter.embedding.engine.FlutterOverlaySurface: int getId()>","public int getId() {
    return this.id;
}"
"<androidx.activity.ImmLeaksCleaner: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","// androidx.lifecycle.d
@Override
public void g(f fVar, c.a aVar) {
    if (aVar != c.a.ON_DESTROY) {
        return;
    }
    if (f19b == 0) {
        h();
    }
    if (f19b == 1) {
        InputMethodManager inputMethodManager = (InputMethodManager) this.f23a.getSystemService(""input_method"");
        try {
            Object obj = f20c.get(inputMethodManager);
            if (obj == null) {
                return;
            }
            synchronized (obj) {
                try {
                    try {
                        View view = (View) f21d.get(inputMethodManager);
                        if (view == null) {
                            return;
                        }
                        if (view.isAttachedToWindow()) {
                            return;
                        }
                        try {
                            f22e.set(inputMethodManager, null);
                            inputMethodManager.isActive();
                        } catch (IllegalAccessException unused) {
                        }
                    } catch (Throwable th) {
                        throw th;
                    }
                } catch (ClassCastException unused2) {
                } catch (IllegalAccessException unused3) {
                }
            }
        } catch (IllegalAccessException unused4) {
        }
    }
}"
"<androidx.activity.ImmLeaksCleaner: void h()>","private static void h() {
    try {
        f19b = 2;
        Field declaredField = InputMethodManager.class.getDeclaredField(""mServedView"");
        f21d = declaredField;
        declaredField.setAccessible(true);
        Field declaredField2 = InputMethodManager.class.getDeclaredField(""mNextServedView"");
        f22e = declaredField2;
        declaredField2.setAccessible(true);
        Field declaredField3 = InputMethodManager.class.getDeclaredField(""mH"");
        f20c = declaredField3;
        declaredField3.setAccessible(true);
        f19b = 1;
    } catch (NoSuchFieldException unused) {
    }
}"
"<androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.a)>","public static void write(IconCompat iconCompat, a aVar) {
    aVar.x(true, true);
    iconCompat.d(aVar.f());
    int i2 = iconCompat.f35a;
    if (-1 != i2) {
        aVar.F(i2, 1);
    }
    byte[] bArr = iconCompat.f37c;
    if (bArr != null) {
        aVar.B(bArr, 2);
    }
    Parcelable parcelable = iconCompat.f38d;
    if (parcelable != null) {
        aVar.H(parcelable, 3);
    }
    int i3 = iconCompat.f39e;
    if (i3 != 0) {
        aVar.F(i3, 4);
    }
    int i4 = iconCompat.f40f;
    if (i4 != 0) {
        aVar.F(i4, 5);
    }
    ColorStateList colorStateList = iconCompat.f41g;
    if (colorStateList != null) {
        aVar.H(colorStateList, 6);
    }
    String str = iconCompat.f43i;
    if (str != null) {
        aVar.J(str, 7);
    }
    String str2 = iconCompat.f44j;
    if (str2 != null) {
        aVar.J(str2, 8);
    }
}"
"<kotlinx.coroutines.internal.v: boolean b(kotlinx.coroutines.internal.v)>","public final boolean b(v vVar) {
    d<?> a2;
    d<?> a3 = a();
    return (a3 == null || (a2 = vVar.a()) == null || a3.f() >= a2.f()) ? false : true;
}"
"<androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)>","void onWindowLayoutChangeListenerAdded(Activity activity);"
"<androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()>","boolean validateExtensionInterface();"
"<androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)>","void setExtensionCallback(ExtensionCallbackInterface extensionCallbackInterface);"
"<androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)>","void onWindowLayoutChangeListenerRemoved(Activity activity);"
"<d0.k: boolean c(java.lang.Object)>","public static final boolean c(Object obj) {
    return obj instanceof b;
}"
"<d0.k: boolean d(java.lang.Object)>","public static final boolean d(Object obj) {
    return !(obj instanceof b);
}"
"<u0.a0: void y(java.lang.Throwable)>","public abstract void y(Throwable th);"
"<io.flutter.embedding.android.g: w.a getAttachedRenderer()>","// w.c
@Override
public w.a getAttachedRenderer() {
    return this.f237d;
}"
"<io.flutter.embedding.android.g: boolean d()>","@TargetApi(19)
public boolean d() {
    if (!this.f239f) {
        return false;
    }
    Image acquireLatestImage = this.f234a.acquireLatestImage();
    if (acquireLatestImage != null) {
        e();
        this.f235b = acquireLatestImage;
        invalidate();
    }
    return acquireLatestImage != null;
}"
"<io.flutter.embedding.android.g: void a()>","// w.c
@Override
public void a() {
}"
"<io.flutter.embedding.android.g: void i(java.lang.String,java.lang.Object[])>","private static void i(String str, Object... objArr) {
    l.b.g(""FlutterImageView"", String.format(Locale.US, str, objArr));
}"
"<io.flutter.embedding.android.g: void e()>","private void e() {
    Image image = this.f235b;
    if (image != null) {
        image.close();
        this.f235b = null;
    }
}"
"<io.flutter.embedding.android.g: void onSizeChanged(int,int,int,int)>","// android.view.View
@Override
protected void onSizeChanged(int i2, int i3, int i4, int i5) {
    if (!(i2 == this.f234a.getWidth() && i3 == this.f234a.getHeight()) && this.f238e == b.background && this.f239f) {
        j(i2, i3);
        this.f237d.v(this.f234a.getSurface());
    }
}"
"<io.flutter.embedding.android.g: void onDraw(android.graphics.Canvas)>","// android.view.View
@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    if (this.f235b != null) {
        k();
    }
    Bitmap bitmap = this.f236c;
    if (bitmap != null) {
        canvas.drawBitmap(bitmap, 0.0f, 0.0f, (Paint) null);
    }
}"
"<io.flutter.embedding.android.g: void h()>","private void h() {
    setAlpha(0.0f);
}"
"<io.flutter.embedding.android.g: void k()>","@TargetApi(29)
private void k() {
    if (Build.VERSION.SDK_INT >= 29) {
        HardwareBuffer hardwareBuffer = this.f235b.getHardwareBuffer();
        this.f236c = Bitmap.wrapHardwareBuffer(hardwareBuffer, ColorSpace.get(ColorSpace.Named.SRGB));
        hardwareBuffer.close();
        return;
    }
    Image.Plane[] planes = this.f235b.getPlanes();
    if (planes.length != 1) {
        return;
    }
    Image.Plane plane = planes[0];
    int rowStride = plane.getRowStride() / plane.getPixelStride();
    int height = this.f235b.getHeight();
    Bitmap bitmap = this.f236c;
    if (bitmap == null || bitmap.getWidth() != rowStride || this.f236c.getHeight() != height) {
        this.f236c = Bitmap.createBitmap(rowStride, height, Bitmap.Config.ARGB_8888);
    }
    ByteBuffer buffer = plane.getBuffer();
    buffer.rewind();
    this.f236c.copyPixelsFromBuffer(buffer);
}"
"<io.flutter.embedding.android.g: void j(int,int)>","public void j(int i2, int i3) {
    if (this.f237d == null) {
        return;
    }
    if (i2 == this.f234a.getWidth() && i3 == this.f234a.getHeight()) {
        return;
    }
    e();
    f();
    this.f234a = g(i2, i3);
}"
"<io.flutter.embedding.android.g: void b(w.a)>","// w.c
@Override
public void b(w.a aVar) {
    if (a.f240a[this.f238e.ordinal()] == 1) {
        aVar.v(this.f234a.getSurface());
    }
    setAlpha(1.0f);
    this.f237d = aVar;
    this.f239f = true;
}"
"<io.flutter.embedding.android.g: void f()>","public void f() {
    this.f234a.close();
}"
"<io.flutter.embedding.android.g: void c()>","// w.c
@Override
public void c() {
    if (this.f239f) {
        setAlpha(0.0f);
        d();
        this.f236c = null;
        e();
        invalidate();
        this.f239f = false;
    }
}"
"<kotlinx.coroutines.scheduling.h: long a()>","public abstract long a();"
"<androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)>","// java.util.function.Consumer
@Override
public void accept(List<? extends androidx.window.extensions.embedding.SplitInfo> splitInfoList) {
    i.e(splitInfoList, ""splitInfoList"");
    this.callback.onSplitInfoChanged(this.adapter.translate(splitInfoList));
}"
"<androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)>","// java.util.function.Consumer
@Override
public void accept(List<? extends androidx.window.extensions.embedding.SplitInfo> splitInfoList) {
    i.e(splitInfoList, ""splitInfoList"");
    this.callback.onSplitInfoChanged(this.adapter.translate(splitInfoList));
}"
"<io.flutter.plugin.platform.e: void b(io.flutter.plugin.platform.f)>","@SuppressLint({ ""NewApi"" })
public static void b(f fVar) {
}"
"<io.flutter.plugin.platform.e: void c(io.flutter.plugin.platform.f)>","@SuppressLint({ ""NewApi"" })
public static void c(f fVar) {
}"
"<io.flutter.plugin.platform.e: void a(io.flutter.plugin.platform.f,android.view.View)>","@SuppressLint({ ""NewApi"" })
public static void a(f fVar, View view) {
}"
"<io.flutter.plugin.platform.e: void d(io.flutter.plugin.platform.f)>","@SuppressLint({ ""NewApi"" })
public static void d(f fVar) {
}"
"<androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !i.a(WindowLayoutInfo.class, obj.getClass())) {
        return false;
    }
    return i.a(this.displayFeatures, ((WindowLayoutInfo) obj).displayFeatures);
}"
"<androidx.window.layout.WindowLayoutInfo: int hashCode()>","public int hashCode() {
    return this.displayFeatures.hashCode();
}"
"<kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()>","// kotlinx.coroutines.internal.MainDispatcherFactory
@Override
public int getLoadPriority() {
    return 1073741823;
}"
"<u0.a2: boolean f(java.lang.Throwable)>","// u0.q
@Override
public boolean f(Throwable th) {
    return false;
}"
"<u0.a2: void b()>","// u0.x0
@Override
public void b() {
}"
"<j.f: void onComplete(long)>","void onComplete(long j2);"
"<v0.a: void s(g0.g,java.lang.Runnable)>","private final void s(g gVar, Runnable runnable) {
    s1.c(gVar, new CancellationException(""The task was rejected, the handler underlying the dispatcher '"" + this + ""' was closed""));
    w0.b().m(gVar, runnable);
}"
"<v0.a: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    return (obj instanceof a) && ((a) obj).f1380e == this.f1380e;
}"
"<v0.a: boolean o(g0.g)>","// u0.f0
@Override
public boolean o(g gVar) {
    return (this.f1382g && i.a(Looper.myLooper(), this.f1380e.getLooper())) ? false : true;
}"
"<v0.a: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public void m(g gVar, Runnable runnable) {
    if (this.f1380e.post(runnable)) {
        return;
    }
    s(gVar, runnable);
}"
"<v0.a: int hashCode()>","public int hashCode() {
    return System.identityHashCode(this.f1380e);
}"
"<u0.o1: void c(java.util.concurrent.CancellationException)>","void c(CancellationException cancellationException);"
"<u0.o1: boolean a()>","boolean a();"
"<u0.o1: boolean i()>","boolean i();"
"<io.flutter.plugins.webviewflutter.p2: void a()>","void a();"
"<u0.x0: void b()>","void b();"
"<z0.b: void a(n0.p,java.lang.Object,g0.d)>","public static final <R, T> void a(p<? super R, ? super d<? super T>, ? extends Object> pVar, R r2, d<? super T> dVar) {
    Object a2;
    Object c2;
    d a3 = h.a(dVar);
    try {
        g context = dVar.getContext();
        Object c3 = d0.c(context, null);
        try {
        } finally {
            d0.a(context, c3);
        }
    } catch (Throwable th) {
        k.a aVar = k.f144d;
        a2 = l.a(th);
    }
    if (pVar == null) {
        throw new NullPointerException(""null cannot be cast to non-null type (R, kotlin.coroutines.Continuation<T>) -> kotlin.Any?"");
    }
    a2 = ((p) n.a(pVar, 2)).invoke(r2, a3);
    c2 = h0.d.c();
    if (a2 != c2) {
        k.a aVar2 = k.f144d;
        a3.resumeWith(k.a(a2));
    }
}"
"<io.flutter.plugins.webviewflutter.v2: void d(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void d(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setLoadWithOverviewMode(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void f(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void f(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setAllowFileAccess(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void g(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void g(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setSupportZoom(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void h(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void h(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setUseWideViewPort(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void l(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void l(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setDisplayZoomControls(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void k(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void k(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setDomStorageEnabled(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void c(java.lang.Long,java.lang.String)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void c(Long l2, String str) {
    ((WebSettings) this.f774a.h(l2.longValue())).setUserAgentString(str);
}"
"<io.flutter.plugins.webviewflutter.v2: void i(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void i(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setJavaScriptEnabled(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void a(java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void a(Long l2) {
    this.f774a.k(l2.longValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void j(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void j(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setJavaScriptCanOpenWindowsAutomatically(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void e(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void e(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setMediaPlaybackRequiresUserGesture(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void n(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void n(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setSupportMultipleWindows(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void m(java.lang.Long,java.lang.Boolean)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void m(Long l2, Boolean bool) {
    ((WebSettings) this.f774a.h(l2.longValue())).setBuiltInZoomControls(bool.booleanValue());
}"
"<io.flutter.plugins.webviewflutter.v2: void b(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.u
@Override
public void b(Long l2, Long l3) {
    this.f774a.b(this.f775b.a((WebView) this.f774a.h(l3.longValue())), l2.longValue());
}"
"<m.e: void a(java.lang.Runnable)>","// m.c.b
@Override
public void a(Runnable runnable) {
    this.f1192a.post(runnable);
}"
"<u0.i1: boolean a()>","// u0.j1
@Override
public boolean a() {
    return false;
}"
"<d0.b: void a(java.lang.Throwable,java.lang.Throwable)>","public static void a(Throwable th, Throwable exception) {
    kotlin.jvm.internal.i.e(th, ""<this>"");
    kotlin.jvm.internal.i.e(exception, ""exception"");
    if (th != exception) {
        i0.b.f187a.a(th, exception);
    }
}"
"<b0.b: void d(q.a$b)>","// q.a
@Override
public void d(a.b bVar) {
    b(bVar.b(), bVar.a());
}"
"<b0.b: void c()>","private void c() {
    this.f135b.g();
    this.f135b = null;
    this.f134a.e(null);
    this.f134a = null;
}"
"<b0.b: void a(q.a$b)>","// q.a
@Override
public void a(a.b bVar) {
    c();
}"
"<b0.b: void b(y.b,android.content.Context)>","private void b(y.b bVar, Context context) {
    this.f134a = new i(bVar, ""plugins.flutter.io/shared_preferences_android"");
    a aVar = new a(context);
    this.f135b = aVar;
    this.f134a.e(aVar);
}"
"<io.flutter.plugins.webviewflutter.q2: boolean checkInputConnectionProxy(android.view.View)>","// android.view.View
@Override
public boolean checkInputConnectionProxy(View view) {
    return true;
}"
"<io.flutter.plugins.webviewflutter.q2: boolean isFocused()>","// android.view.View
@Override
public boolean isFocused() {
    return true;
}"
"<io.flutter.plugins.webviewflutter.q2: void a(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public void a(boolean z2) {
    this.f738g = z2;
}"
"<io.flutter.plugins.webviewflutter.q2: boolean hasWindowFocus()>","// android.view.View
@Override
public boolean hasWindowFocus() {
    return true;
}"
"<io.flutter.plugins.webviewflutter.q2: boolean onCheckIsTextEditor()>","// android.view.View
@Override
public boolean onCheckIsTextEditor() {
    return true;
}"
"<kotlinx.coroutines.internal.e0: void a(kotlinx.coroutines.internal.f0)>","public final void a(T t2) {
    if (p0.a()) {
        if (!(t2.a() == null)) {
            throw new AssertionError();
        }
    }
    t2.d(this);
    T[] f2 = f();
    int c2 = c();
    j(c2 + 1);
    f2[c2] = t2;
    t2.c(c2);
    l(c2);
}"
"<kotlinx.coroutines.internal.e0: int c()>","public final int c() {
    return this._size;
}"
"<kotlinx.coroutines.internal.e0: void j(int)>","private final void j(int i2) {
    this._size = i2;
}"
"<kotlinx.coroutines.internal.e0: void m(int,int)>","private final void m(int i2, int i3) {
    T[] tArr = this.f1030a;
    kotlin.jvm.internal.i.b(tArr);
    T t2 = tArr[i3];
    kotlin.jvm.internal.i.b(t2);
    T t3 = tArr[i2];
    kotlin.jvm.internal.i.b(t3);
    tArr[i2] = t2;
    tArr[i3] = t3;
    t2.c(i2);
    t3.c(i3);
}"
"<kotlinx.coroutines.internal.e0: void l(int)>","private final void l(int i2) {
    while (i2 > 0) {
        T[] tArr = this.f1030a;
        kotlin.jvm.internal.i.b(tArr);
        int i3 = (i2 - 1) / 2;
        T t2 = tArr[i3];
        kotlin.jvm.internal.i.b(t2);
        T t3 = tArr[i2];
        kotlin.jvm.internal.i.b(t3);
        if (((Comparable) t2).compareTo(t3) <= 0) {
            return;
        }
        m(i2, i3);
        i2 = i3;
    }
}"
"<kotlinx.coroutines.internal.e0: void k(int)>","private final void k(int i2) {
    while (true) {
        int i3 = (i2 * 2) + 1;
        if (i3 >= c()) {
            return;
        }
        T[] tArr = this.f1030a;
        kotlin.jvm.internal.i.b(tArr);
        int i4 = i3 + 1;
        if (i4 < c()) {
            T t2 = tArr[i4];
            kotlin.jvm.internal.i.b(t2);
            T t3 = tArr[i3];
            kotlin.jvm.internal.i.b(t3);
            if (((Comparable) t2).compareTo(t3) < 0) {
                i3 = i4;
            }
        }
        T t4 = tArr[i2];
        kotlin.jvm.internal.i.b(t4);
        T t5 = tArr[i3];
        kotlin.jvm.internal.i.b(t5);
        if (((Comparable) t4).compareTo(t5) <= 0) {
            return;
        }
        m(i2, i3);
        i2 = i3;
    }
}"
"<kotlinx.coroutines.internal.e0: boolean d()>","public final boolean d() {
    return c() == 0;
}"
"<kotlinx.coroutines.internal.e0: boolean g(kotlinx.coroutines.internal.f0)>","public final boolean g(T t2) {
    boolean z2;
    synchronized (this) {
        z2 = true;
        if (t2.a() == null) {
            z2 = false;
        } else {
            int e2 = t2.e();
            if (p0.a()) {
                if (!(e2 >= 0)) {
                    throw new AssertionError();
                }
            }
            h(e2);
        }
    }
    return z2;
}"
"<org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void setWebMessageCallback(java.lang.reflect.InvocationHandler,android.os.Handler)>","void setWebMessageCallback(InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void setWebMessageCallback(java.lang.reflect.InvocationHandler)>","void setWebMessageCallback(InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void close()>","void close();"
"<org.chromium.support_lib_boundary.WebMessagePortBoundaryInterface: void postMessage(java.lang.reflect.InvocationHandler)>","void postMessage(InvocationHandler invocationHandler);"
"<u0.p1: int hashCode()>","public int hashCode() {
    String message = getMessage();
    kotlin.jvm.internal.i.b(message);
    int hashCode = ((message.hashCode() * 31) + this.f1332d.hashCode()) * 31;
    Throwable cause = getCause();
    return hashCode + (cause == null ? 0 : cause.hashCode());
}"
"<u0.p1: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (obj != this) {
        if (obj instanceof p1) {
            p1 p1Var = (p1) obj;
            if (!kotlin.jvm.internal.i.a(p1Var.getMessage(), getMessage()) || !kotlin.jvm.internal.i.a(p1Var.f1332d, this.f1332d) || !kotlin.jvm.internal.i.a(p1Var.getCause(), getCause())) {
            }
        }
        return false;
    }
    return true;
}"
"<io.flutter.embedding.android.e: void A(android.os.Bundle)>","/* JADX INFO: Access modifiers changed from: package-private */
public void A(Bundle bundle) {
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""onSaveInstanceState. Giving framework and plugins an opportunity to save state."");
    i();
    if (this.f217a.w()) {
        bundle.putByteArray(""framework"", this.f218b.q().h());
    }
    if (this.f217a.n()) {
        Bundle bundle2 = new Bundle();
        this.f218b.g().e(bundle2);
        bundle.putBundle(""plugins"", bundle2);
    }
}"
"<io.flutter.embedding.android.e: void F()>","/* JADX INFO: Access modifiers changed from: package-private */
public void F() {
    this.f217a = null;
    this.f218b = null;
    this.f219c = null;
    this.f220d = null;
}"
"<io.flutter.embedding.android.e: void i()>","private void i() {
    if (this.f217a == null) {
        throw new IllegalStateException(""Cannot execute method on a destroyed FlutterActivityAndFragmentDelegate."");
    }
}"
"<io.flutter.embedding.android.e: void s()>","/* JADX INFO: Access modifiers changed from: package-private */
public void s() {
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""onDestroyView()"");
    i();
    if (this.f221e != null) {
        this.f219c.getViewTreeObserver().removeOnPreDrawListener(this.f221e);
        this.f221e = null;
    }
    this.f219c.s();
    this.f219c.z(this.f227k);
}"
"<io.flutter.embedding.android.e: void g(io.flutter.embedding.android.k)>","private void g(k kVar) {
    if (this.f217a.o() != v.surface) {
        throw new IllegalArgumentException(""Cannot delay the first Android view draw when the render mode is not set to `RenderMode.surface`."");
    }
    if (this.f221e != null) {
        kVar.getViewTreeObserver().removeOnPreDrawListener(this.f221e);
    }
    this.f221e = new b(kVar);
    kVar.getViewTreeObserver().addOnPreDrawListener(this.f221e);
}"
"<io.flutter.embedding.android.e: void z()>","/* JADX INFO: Access modifiers changed from: package-private */
public void z() {
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""onResume()"");
    i();
    if (this.f217a.s()) {
        this.f218b.i().d();
    }
}"
"<io.flutter.embedding.android.e: void x(int,java.lang.String[],int[])>","/* JADX INFO: Access modifiers changed from: package-private */
public void x(int i2, String[] strArr, int[] iArr) {
    i();
    if (this.f218b == null) {
        l.b.g(""FlutterActivityAndFragmentDelegate"", ""onRequestPermissionResult() invoked before FlutterFragment was attached to an Activity."");
        return;
    }
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""Forwarding onRequestPermissionsResult() to FlutterEngine:\nrequestCode: "" + i2 + ""\npermissions: "" + Arrays.toString(strArr) + ""\ngrantResults: "" + Arrays.toString(iArr));
    this.f218b.g().b(i2, strArr, iArr);
}"
"<io.flutter.embedding.android.e: void B()>","/* JADX INFO: Access modifiers changed from: package-private */
public void B() {
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""onStart()"");
    i();
    h();
    Integer num = this.f226j;
    if (num != null) {
        this.f219c.setVisibility(num.intValue());
    }
}"
"<io.flutter.embedding.android.e: void H()>","void H() {
    io.flutter.plugin.platform.c cVar = this.f220d;
    if (cVar != null) {
        cVar.A();
    }
}"
"<io.flutter.embedding.android.e: boolean m()>","/* JADX INFO: Access modifiers changed from: package-private */
public boolean m() {
    return this.f222f;
}"
"<io.flutter.embedding.android.e: void y(android.os.Bundle)>","void y(io.flutter.embedding.engine.a aVar);"
"<io.flutter.embedding.android.e: void q()>","/* JADX INFO: Access modifiers changed from: package-private */
public void q() {
    i();
    if (this.f218b == null) {
        l.b.g(""FlutterActivityAndFragmentDelegate"", ""Invoked onBackPressed() before FlutterFragment was attached to an Activity."");
    } else {
        l.b.f(""FlutterActivityAndFragmentDelegate"", ""Forwarding onBackPressed() to FlutterEngine."");
        this.f218b.l().a();
    }
}"
"<io.flutter.embedding.android.e: void G()>","void G() {
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""Setting up FlutterEngine."");
    String u2 = this.f217a.u();
    if (u2 != null) {
        io.flutter.embedding.engine.a a2 = io.flutter.embedding.engine.b.b().a(u2);
        this.f218b = a2;
        this.f222f = true;
        if (a2 != null) {
            return;
        }
        throw new IllegalStateException(""The requested cached FlutterEngine did not exist in the FlutterEngineCache: '"" + u2 + ""'"");
    }
    c cVar = this.f217a;
    io.flutter.embedding.engine.a m2 = cVar.m(cVar.getContext());
    this.f218b = m2;
    if (m2 != null) {
        this.f222f = true;
        return;
    }
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""No preferred FlutterEngine was provided. Creating a new FlutterEngine for this FlutterFragment."");
    this.f218b = new io.flutter.embedding.engine.a(this.f217a.getContext(), this.f217a.h().b(), false, this.f217a.w());
    this.f222f = false;
}"
"<io.flutter.embedding.android.e: io.flutter.embedding.engine.a k()>","/* JADX INFO: Access modifiers changed from: package-private */
public io.flutter.embedding.engine.a k() {
    return this.f218b;
}"
"<io.flutter.embedding.android.e: void v()>","void v(io.flutter.embedding.engine.a aVar);"
"<io.flutter.embedding.android.e: void h()>","private void h() {
    String str;
    if (this.f217a.u() == null && !this.f218b.h().i()) {
        String g2 = this.f217a.g();
        if (g2 == null && (g2 = n(this.f217a.a().getIntent())) == null) {
            g2 = ""/"";
        }
        String A = this.f217a.A();
        if ((""Executing Dart entrypoint: "" + this.f217a.x() + "", library uri: "" + A) == null) {
            str = ""\""\"""";
        } else {
            str = A + "", and sending initial route: "" + g2;
        }
        l.b.f(""FlutterActivityAndFragmentDelegate"", str);
        this.f218b.l().c(g2);
        String k2 = this.f217a.k();
        if (k2 == null || k2.isEmpty()) {
            k2 = l.a.e().c().f();
        }
        this.f218b.h().g(A == null ? new a.b(k2, this.f217a.x()) : new a.b(k2, A, this.f217a.x()), this.f217a.l());
    }
}"
"<io.flutter.embedding.android.e: void b()>","void b();"
"<io.flutter.embedding.android.e: void u(android.content.Intent)>","/* JADX INFO: Access modifiers changed from: package-private */
public void u(Intent intent) {
    i();
    if (this.f218b == null) {
        l.b.g(""FlutterActivityAndFragmentDelegate"", ""onNewIntent() invoked before FlutterFragment was attached to an Activity."");
        return;
    }
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""Forwarding onNewIntent() to FlutterEngine and sending pushRoute message."");
    this.f218b.g().d(intent);
    String n2 = n(intent);
    if (n2 == null || n2.isEmpty()) {
        return;
    }
    this.f218b.l().b(n2);
}"
"<io.flutter.embedding.android.e: void D(int)>","/* JADX INFO: Access modifiers changed from: package-private */
public void D(int i2) {
    i();
    io.flutter.embedding.engine.a aVar = this.f218b;
    if (aVar != null) {
        if (this.f224h && i2 >= 10) {
            aVar.h().j();
            this.f218b.t().a();
        }
        this.f218b.p().m(i2);
    }
}"
"<io.flutter.embedding.android.e: void w()>","/* JADX INFO: Access modifiers changed from: package-private */
public void w() {
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""onPostResume()"");
    i();
    if (this.f218b != null) {
        H();
    } else {
        l.b.g(""FlutterActivityAndFragmentDelegate"", ""onPostResume() invoked before FlutterFragment was attached to an Activity."");
    }
}"
"<io.flutter.embedding.android.e: void C()>","void C(h hVar);"
"<io.flutter.embedding.android.e: void t()>","void t(i iVar);"
"<io.flutter.embedding.android.e: void o(int,int,android.content.Intent)>","/* JADX INFO: Access modifiers changed from: package-private */
public void o(int i2, int i3, Intent intent) {
    i();
    if (this.f218b == null) {
        l.b.g(""FlutterActivityAndFragmentDelegate"", ""onActivityResult() invoked before FlutterFragment was attached to an Activity."");
        return;
    }
    l.b.f(""FlutterActivityAndFragmentDelegate"", ""Forwarding onActivityResult() to FlutterEngine:\nrequestCode: "" + i2 + ""\nresultCode: "" + i3 + ""\ndata: "" + intent);
    this.f218b.g().c(i2, i3, intent);
}"
"<io.flutter.embedding.android.e: void E()>","/* JADX INFO: Access modifiers changed from: package-private */
public void E() {
    i();
    if (this.f218b == null) {
        l.b.g(""FlutterActivityAndFragmentDelegate"", ""onUserLeaveHint() invoked before FlutterFragment was attached to an Activity."");
    } else {
        l.b.f(""FlutterActivityAndFragmentDelegate"", ""Forwarding onUserLeaveHint() to FlutterEngine."");
        this.f218b.g().f();
    }
}"
"<io.flutter.embedding.android.e: boolean l()>","/* JADX INFO: Access modifiers changed from: package-private */
public boolean l() {
    return this.f225i;
}"
"<io.flutter.embedding.android.e: void p(android.content.Context)>","/* JADX INFO: Access modifiers changed from: package-private */
public void p(Context context) {
    i();
    if (this.f218b == null) {
        G();
    }
    if (this.f217a.n()) {
        l.b.f(""FlutterActivityAndFragmentDelegate"", ""Attaching FlutterEngine to the Activity that owns this delegate."");
        this.f218b.g().g(this, this.f217a.e());
    }
    c cVar = this.f217a;
    this.f220d = cVar.B(cVar.a(), this.f218b);
    this.f217a.v(this.f218b);
    this.f225i = true;
}"
"<kotlinx.coroutines.internal.x: boolean U()>","// u0.v1
@Override
protected final boolean U() {
    return true;
}"
"<kotlinx.coroutines.internal.x: void x(java.lang.Object)>","// u0.v1
@Override
protected void x(Object obj) {
    g0.d b2;
    b2 = h0.c.b(this.f1081f);
    h.c(b2, u0.c0.a(obj, this.f1081f), null, 2, null);
}"
"<kotlinx.coroutines.internal.x: kotlin.coroutines.jvm.internal.e getCallerFrame()>","// kotlin.coroutines.jvm.internal.e
@Override
public final kotlin.coroutines.jvm.internal.e getCallerFrame() {
    g0.d<T> dVar = this.f1081f;
    if (dVar instanceof kotlin.coroutines.jvm.internal.e) {
        return (kotlin.coroutines.jvm.internal.e) dVar;
    }
    return null;
}"
"<kotlinx.coroutines.internal.x: void t0(java.lang.Object)>","// u0.a
@Override
protected void t0(Object obj) {
    g0.d<T> dVar = this.f1081f;
    dVar.resumeWith(u0.c0.a(obj, dVar));
}"
"<e0.w: int a(int)>","public static /* bridge */
/* synthetic */
int a(int i2) {
    return y.a(i2);
}"
"<androidx.lifecycle.CompositeGeneratedAdaptersObserver: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","// androidx.lifecycle.d
@Override
public void g(f fVar, c.a aVar) {
    i iVar = new i();
    for (b bVar : this.f45a) {
        bVar.a(fVar, aVar, false, iVar);
    }
    for (b bVar2 : this.f45a) {
        bVar2.a(fVar, aVar, true, iVar);
    }
}"
"<kotlinx.coroutines.internal.t: boolean o(g0.g)>","// u0.f0
@Override
public boolean o(g0.g gVar) {
    t();
    throw new d0.d();
}"
"<kotlin.jvm.internal.a: r0.f getReturnType()>","// r0.b
@Override
public r0.f getReturnType() {
    return getReflected().getReturnType();
}"
"<kotlin.jvm.internal.a: boolean isFinal()>","// r0.b
@Override
public boolean isFinal() {
    return getReflected().isFinal();
}"
"<kotlin.jvm.internal.a: r0.g getVisibility()>","// r0.b
@Override
public r0.g getVisibility() {
    return getReflected().getVisibility();
}"
"<kotlin.jvm.internal.a: boolean isAbstract()>","// r0.b
@Override
public boolean isAbstract() {
    return getReflected().isAbstract();
}"
"<kotlin.jvm.internal.a: r0.d getOwner()>","public r0.d getOwner() {
    Class cls = this.owner;
    if (cls == null) {
        return null;
    }
    return this.isTopLevel ? l.c(cls) : l.b(cls);
}"
"<kotlin.jvm.internal.a: r0.b computeReflected()>","protected abstract r0.b computeReflected();"
"<kotlin.jvm.internal.a: boolean isOpen()>","// r0.b
@Override
public boolean isOpen() {
    return getReflected().isOpen();
}"
"<kotlin.jvm.internal.a: r0.b getReflected()>","/* JADX INFO: Access modifiers changed from: protected */
public r0.b getReflected() {
    r0.b compute = compute();
    if (compute != this) {
        return compute;
    }
    throw new m0.b();
}"
"<kotlin.jvm.internal.a: boolean isSuspend()>","// r0.b
@Override
public boolean isSuspend() {
    return getReflected().isSuspend();
}"
"<kotlin.jvm.internal.a: r0.b compute()>","public r0.b compute() {
    r0.b bVar = this.reflected;
    if (bVar != null) {
        return bVar;
    }
    r0.b computeReflected = computeReflected();
    this.reflected = computeReflected;
    return computeReflected;
}"
"<u0.g0: void a(g0.g,java.lang.Throwable)>","public static final void a(g0.g gVar, Throwable th) {
    Iterator<CoroutineExceptionHandler> it = f1294a.iterator();
    while (it.hasNext()) {
        try {
            it.next().handleException(gVar, th);
        } catch (Throwable th2) {
            Thread currentThread = Thread.currentThread();
            currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, h0.b(th, th2));
        }
    }
    Thread currentThread2 = Thread.currentThread();
    currentThread2.getUncaughtExceptionHandler().uncaughtException(currentThread2, th);
}"
"<kotlinx.coroutines.internal.f0: int e()>","int e();"
"<kotlinx.coroutines.internal.f0: void d(kotlinx.coroutines.internal.e0)>","void d(e0<?> e0Var);"
"<kotlinx.coroutines.internal.f0: void c(int)>","void c(int i2);"
"<x.b: void c(n.a)>","public void c(n.a aVar) {
    this.f1479b = aVar;
}"
"<io.flutter.plugins.webviewflutter.u0: void e(io.flutter.plugins.webviewflutter.k$w,java.lang.Object,y.a$e)>","public static /* synthetic */
void e(k.w wVar, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    wVar.b(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.u0: void a(io.flutter.plugins.webviewflutter.k$w,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    u0.d(k.w.this, obj, eVar);
}"
"<io.flutter.plugins.webviewflutter.u0: void f(y.b,io.flutter.plugins.webviewflutter.k$w)>","public static void f(y.b bVar, final k.w wVar) {
    y.a aVar = new y.a(bVar, ""dev.flutter.pigeon.WebStorageHostApi.create"", c());
    if (wVar != null) {
        aVar.e(new // from class: io.flutter.plugins.webviewflutter.t0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                u0.d(k.w.this, obj, eVar);
            }
        });
    } else {
        aVar.e(null);
    }
    y.a aVar2 = new y.a(bVar, ""dev.flutter.pigeon.WebStorageHostApi.deleteAllData"", c());
    if (wVar != null) {
        aVar2.e(new // from class: io.flutter.plugins.webviewflutter.s0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                u0.e(k.w.this, obj, eVar);
            }
        });
    } else {
        aVar2.e(null);
    }
}"
"<io.flutter.plugins.webviewflutter.u0: void d(io.flutter.plugins.webviewflutter.k$w,java.lang.Object,y.a$e)>","public static /* synthetic */
void d(k.w wVar, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    wVar.a(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<u0.j1: boolean a()>","boolean a();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getForceDarkBehavior()>","int getForceDarkBehavior();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setForceDarkBehavior(int)>","void setForceDarkBehavior(int i2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setSafeBrowsingEnabled(boolean)>","void setSafeBrowsingEnabled(boolean z2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getDisabledActionModeMenuItems()>","int getDisabledActionModeMenuItems();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setWillSuppressErrorPage(boolean)>","void setWillSuppressErrorPage(boolean z2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setDisabledActionModeMenuItems(int)>","void setDisabledActionModeMenuItems(int i2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setAlgorithmicDarkeningAllowed(boolean)>","void setAlgorithmicDarkeningAllowed(boolean z2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getWillSuppressErrorPage()>","boolean getWillSuppressErrorPage();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setOffscreenPreRaster(boolean)>","void setOffscreenPreRaster(boolean z2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getSafeBrowsingEnabled()>","boolean getSafeBrowsingEnabled();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean isAlgorithmicDarkeningAllowed()>","boolean isAlgorithmicDarkeningAllowed();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getOffscreenPreRaster()>","boolean getOffscreenPreRaster();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getForceDark()>","int getForceDark();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setWebAuthnSupport(int)>","void setWebAuthnSupport(int i2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setRequestedWithHeaderMode(int)>","void setRequestedWithHeaderMode(int i2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: boolean getEnterpriseAuthenticationAppLinkPolicyEnabled()>","boolean getEnterpriseAuthenticationAppLinkPolicyEnabled();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getRequestedWithHeaderMode()>","int getRequestedWithHeaderMode();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: int getWebAuthnSupport()>","int getWebAuthnSupport();"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setForceDark(int)>","void setForceDark(int i2);"
"<org.chromium.support_lib_boundary.WebSettingsBoundaryInterface: void setEnterpriseAuthenticationAppLinkPolicyEnabled(boolean)>","void setEnterpriseAuthenticationAppLinkPolicyEnabled(boolean z2);"
"<q0.a: int a()>","public final int a() {
    return this.f1239d;
}"
"<q0.a: int c()>","public final int c() {
    return this.f1241f;
}"
"<q0.a: boolean isEmpty()>","public boolean isEmpty() {
    if (this.f1241f > 0) {
        if (this.f1239d > this.f1240e) {
            return true;
        }
    } else if (this.f1239d < this.f1240e) {
        return true;
    }
    return false;
}"
"<q0.a: int hashCode()>","public int hashCode() {
    if (isEmpty()) {
        return -1;
    }
    return (((this.f1239d * 31) + this.f1240e) * 31) + this.f1241f;
}"
"<q0.a: int b()>","public final int b() {
    return this.f1240e;
}"
"<q0.a: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (obj instanceof a) {
        if (!isEmpty() || !((a) obj).isEmpty()) {
            a aVar = (a) obj;
            if (this.f1239d != aVar.f1239d || this.f1240e != aVar.f1240e || this.f1241f != aVar.f1241f) {
            }
        }
        return true;
    }
    return false;
}"
"<org.chromium.support_lib_boundary.WebMessageCallbackBoundaryInterface: void onMessage(java.lang.reflect.InvocationHandler,java.lang.reflect.InvocationHandler)>","void onMessage(InvocationHandler invocationHandler, InvocationHandler invocationHandler2);"
"<kotlinx.coroutines.internal.e: boolean a(java.util.concurrent.Executor)>","public static final boolean a(Executor executor) {
    Method method;
    try {
        ScheduledThreadPoolExecutor scheduledThreadPoolExecutor = executor instanceof ScheduledThreadPoolExecutor ? (ScheduledThreadPoolExecutor) executor : null;
        if (scheduledThreadPoolExecutor == null || (method = f1029a) == null) {
            return false;
        }
        method.invoke(scheduledThreadPoolExecutor, Boolean.TRUE);
        return true;
    } catch (Throwable unused) {
        return false;
    }
}"
"<u0.f0: void n(g0.d)>","// g0.e
@Override
public final void n(g0.d<?> dVar) {
    ((kotlinx.coroutines.internal.g) dVar).p();
}"
"<u0.f0: void m(g0.g,java.lang.Runnable)>","public abstract void m(g0.g gVar, Runnable runnable);"
"<u0.f0: boolean o(g0.g)>","public boolean o(g0.g gVar) {
    return true;
}"
"<u0.f0: g0.g minusKey(g0.g$c)>","// g0.a, g0.g
@Override
public g0.g minusKey(g.c<?> cVar) {
    return e.a.b(this, cVar);
}"
"<androidx.lifecycle.SingleGeneratedAdapterObserver: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","// androidx.lifecycle.d
@Override
public void g(f fVar, c.a aVar) {
    this.f51a.a(fVar, aVar, false, null);
    this.f51a.a(fVar, aVar, true, null);
}"
"<androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)>","public final boolean isEqualSidecarWindowLayoutInfo(SidecarWindowLayoutInfo sidecarWindowLayoutInfo, SidecarWindowLayoutInfo sidecarWindowLayoutInfo2) {
    if (i.a(sidecarWindowLayoutInfo, sidecarWindowLayoutInfo2)) {
        return true;
    }
    if (sidecarWindowLayoutInfo == null || sidecarWindowLayoutInfo2 == null) {
        return false;
    }
    Companion companion = Companion;
    return isEqualSidecarDisplayFeatures(companion.getSidecarDisplayFeatures(sidecarWindowLayoutInfo), companion.getSidecarDisplayFeatures(sidecarWindowLayoutInfo2));
}"
"<androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)>","private final boolean isEqualSidecarDisplayFeatures(List<SidecarDisplayFeature> list, List<SidecarDisplayFeature> list2) {
    if (list == list2) {
        return true;
    }
    if (list == null || list2 == null || list.size() != list2.size()) {
        return false;
    }
    int size = list.size() - 1;
    if (size >= 0) {
        int i2 = 0;
        while (true) {
            int i3 = i2 + 1;
            if (!isEqualSidecarDisplayFeature(list.get(i2), list2.get(i2))) {
                return false;
            }
            if (i3 > size) {
                break;
            }
            i2 = i3;
        }
    }
    return true;
}"
"<androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)>","public final boolean isEqualSidecarDeviceState(SidecarDeviceState sidecarDeviceState, SidecarDeviceState sidecarDeviceState2) {
    if (i.a(sidecarDeviceState, sidecarDeviceState2)) {
        return true;
    }
    if (sidecarDeviceState == null || sidecarDeviceState2 == null) {
        return false;
    }
    Companion companion = Companion;
    return companion.getSidecarDevicePosture$window_release(sidecarDeviceState) == companion.getSidecarDevicePosture$window_release(sidecarDeviceState2);
}"
"<androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)>","private final boolean isEqualSidecarDisplayFeature(SidecarDisplayFeature sidecarDisplayFeature, SidecarDisplayFeature sidecarDisplayFeature2) {
    if (i.a(sidecarDisplayFeature, sidecarDisplayFeature2)) {
        return true;
    }
    if (sidecarDisplayFeature == null || sidecarDisplayFeature2 == null || sidecarDisplayFeature.getType() != sidecarDisplayFeature2.getType()) {
        return false;
    }
    return i.a(sidecarDisplayFeature.getRect(), sidecarDisplayFeature2.getRect());
}"
"<androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)>","private final int getNavigationBarHeight(Context context) {
    Resources resources = context.getResources();
    int identifier = resources.getIdentifier(""navigation_bar_height"", ""dimen"", ""android"");
    if (identifier > 0) {
        return resources.getDimensionPixelSize(identifier);
    }
    return 0;
}"
"<androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)>","private final void getRectSizeFromDisplay(Activity activity, Rect rect) {
    activity.getWindowManager().getDefaultDisplay().getRectSize(rect);
}"
"<t0.n: boolean L(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)>","public static final boolean L(CharSequence charSequence, int i2, CharSequence other, int i3, int i4, boolean z2) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    kotlin.jvm.internal.i.e(other, ""other"");
    if (i3 < 0 || i2 < 0 || i2 > charSequence.length() - i4 || i3 > other.length() - i4) {
        return false;
    }
    for (int i5 = 0; i5 < i4; i5++) {
        if (!t0.b.d(charSequence.charAt(i2 + i5), other.charAt(i3 + i5), z2)) {
            return false;
        }
    }
    return true;
}"
"<t0.n: int F(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>","public static /* synthetic */
int F(CharSequence charSequence, String str, int i2, boolean z2, int i3, Object obj) {
    if ((i3 & 2) != 0) {
        i2 = u(charSequence);
    }
    if ((i3 & 4) != 0) {
        z2 = false;
    }
    return D(charSequence, str, i2, z2);
}"
"<t0.n: q0.c t(java.lang.CharSequence)>","public static final q0.c t(CharSequence charSequence) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    return new q0.c(0, charSequence.length() - 1);
}"
"<t0.n: int A(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>","public static /* synthetic */
int A(CharSequence charSequence, String str, int i2, boolean z2, int i3, Object obj) {
    if ((i3 & 2) != 0) {
        i2 = 0;
    }
    if ((i3 & 4) != 0) {
        z2 = false;
    }
    return w(charSequence, str, i2, z2);
}"
"<t0.n: int v(java.lang.CharSequence,char,int,boolean)>","public static final int v(CharSequence charSequence, char c2, int i2, boolean z2) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    return (z2 || !(charSequence instanceof String)) ? B(charSequence, new char[] { c2 }, i2, z2) : ((String) charSequence).indexOf(c2, i2);
}"
"<t0.n: int C(java.lang.CharSequence,char,int,boolean)>","public static final int C(CharSequence charSequence, char c2, int i2, boolean z2) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    return (z2 || !(charSequence instanceof String)) ? G(charSequence, new char[] { c2 }, i2, z2) : ((String) charSequence).lastIndexOf(c2, i2);
}"
"<t0.n: int D(java.lang.CharSequence,java.lang.String,int,boolean)>","public static final int D(CharSequence charSequence, String string, int i2, boolean z2) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    kotlin.jvm.internal.i.e(string, ""string"");
    return (z2 || !(charSequence instanceof String)) ? x(charSequence, string, i2, 0, z2, true) : ((String) charSequence).lastIndexOf(string, i2);
}"
"<t0.n: int x(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)>","private static final int x(CharSequence charSequence, CharSequence charSequence2, int i2, int i3, boolean z2, boolean z3) {
    int c2;
    int a2;
    q0.a f2;
    int a3;
    int c3;
    if (z3) {
        c2 = q0.f.c(i2, u(charSequence));
        a2 = q0.f.a(i3, 0);
        f2 = q0.f.f(c2, a2);
    } else {
        a3 = q0.f.a(i2, 0);
        c3 = q0.f.c(i3, charSequence.length());
        f2 = new q0.c(a3, c3);
    }
    if ((charSequence instanceof String) && (charSequence2 instanceof String)) {
        int a4 = f2.a();
        int b2 = f2.b();
        int c4 = f2.c();
        if ((c4 <= 0 || a4 > b2) && (c4 >= 0 || b2 > a4)) {
            return -1;
        }
        while (!m.m((String) charSequence2, 0, (String) charSequence, a4, charSequence2.length(), z2)) {
            if (a4 == b2) {
                return -1;
            }
            a4 += c4;
        }
        return a4;
    }
    int a5 = f2.a();
    int b3 = f2.b();
    int c5 = f2.c();
    if ((c5 <= 0 || a5 > b3) && (c5 >= 0 || b3 > a5)) {
        return -1;
    }
    while (!L(charSequence2, 0, charSequence, a5, charSequence2.length(), z2)) {
        if (a5 == b3) {
            return -1;
        }
        a5 += c5;
    }
    return a5;
}"
"<t0.n: s0.b O(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)>","public static /* synthetic */
s0.b O(CharSequence charSequence, String[] strArr, boolean z2, int i2, int i3, Object obj) {
    if ((i3 & 2) != 0) {
        z2 = false;
    }
    if ((i3 & 4) != 0) {
        i2 = 0;
    }
    return N(charSequence, strArr, z2, i2);
}"
"<t0.n: int E(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>","public static /* synthetic */
int E(CharSequence charSequence, char c2, int i2, boolean z2, int i3, Object obj) {
    if ((i3 & 2) != 0) {
        i2 = u(charSequence);
    }
    if ((i3 & 4) != 0) {
        z2 = false;
    }
    return C(charSequence, c2, i2, z2);
}"
"<t0.n: int u(java.lang.CharSequence)>","public static final int u(CharSequence charSequence) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    return charSequence.length() - 1;
}"
"<t0.n: boolean r(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>","public static /* synthetic */
boolean r(CharSequence charSequence, CharSequence charSequence2, boolean z2, int i2, Object obj) {
    if ((i2 & 2) != 0) {
        z2 = false;
    }
    return q(charSequence, charSequence2, z2);
}"
"<t0.n: int B(java.lang.CharSequence,char[],int,boolean)>","public static final int B(CharSequence charSequence, char[] chars, int i2, boolean z2) {
    int a2;
    boolean z3;
    char g2;
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    kotlin.jvm.internal.i.e(chars, ""chars"");
    if (!z2 && chars.length == 1 && (charSequence instanceof String)) {
        g2 = e0.e.g(chars);
        return ((String) charSequence).indexOf(g2, i2);
    }
    a2 = q0.f.a(i2, 0);
    v it = new q0.c(a2, u(charSequence)).iterator();
    while (it.hasNext()) {
        int a3 = it.a();
        char charAt = charSequence.charAt(a3);
        int length = chars.length;
        int i3 = 0;
        while (true) {
            if (i3 >= length) {
                z3 = false;
                break;
            }
            if (t0.b.d(chars[i3], charAt, z2)) {
                z3 = true;
                break;
            }
            i3++;
        }
        if (z3) {
            return a3;
        }
    }
    return -1;
}"
"<t0.n: int z(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>","public static /* synthetic */
int z(CharSequence charSequence, char c2, int i2, boolean z2, int i3, Object obj) {
    if ((i3 & 2) != 0) {
        i2 = 0;
    }
    if ((i3 & 4) != 0) {
        z2 = false;
    }
    return v(charSequence, c2, i2, z2);
}"
"<t0.n: s0.b K(java.lang.CharSequence,java.lang.String[],int,boolean,int,int,java.lang.Object)>","static /* synthetic */
s0.b K(CharSequence charSequence, String[] strArr, int i2, boolean z2, int i3, int i4, Object obj) {
    if ((i4 & 2) != 0) {
        i2 = 0;
    }
    if ((i4 & 4) != 0) {
        z2 = false;
    }
    if ((i4 & 8) != 0) {
        i3 = 0;
    }
    return J(charSequence, strArr, i2, z2, i3);
}"
"<t0.n: int y(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)>","static /* synthetic */
int y(CharSequence charSequence, CharSequence charSequence2, int i2, int i3, boolean z2, boolean z3, int i4, Object obj) {
    if ((i4 & 16) != 0) {
        z3 = false;
    }
    return x(charSequence, charSequence2, i2, i3, z2, z3);
}"
"<t0.n: int G(java.lang.CharSequence,char[],int,boolean)>","public static final int G(CharSequence charSequence, char[] chars, int i2, boolean z2) {
    int c2;
    char g2;
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    kotlin.jvm.internal.i.e(chars, ""chars"");
    if (!z2 && chars.length == 1 && (charSequence instanceof String)) {
        g2 = e0.e.g(chars);
        return ((String) charSequence).lastIndexOf(g2, i2);
    }
    for (c2 = q0.f.c(i2, u(charSequence)); -1 < c2; c2--) {
        char charAt = charSequence.charAt(c2);
        int length = chars.length;
        boolean z3 = false;
        int i3 = 0;
        while (true) {
            if (i3 >= length) {
                break;
            }
            if (t0.b.d(chars[i3], charAt, z2)) {
                z3 = true;
                break;
            }
            i3++;
        }
        if (z3) {
            return c2;
        }
    }
    return -1;
}"
"<t0.n: int w(java.lang.CharSequence,java.lang.String,int,boolean)>","public static final int w(CharSequence charSequence, String string, int i2, boolean z2) {
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    kotlin.jvm.internal.i.e(string, ""string"");
    return (z2 || !(charSequence instanceof String)) ? y(charSequence, string, i2, charSequence.length(), z2, false, 16, null) : ((String) charSequence).indexOf(string, i2);
}"
"<t0.n: boolean q(java.lang.CharSequence,java.lang.CharSequence,boolean)>","public static final boolean q(CharSequence charSequence, CharSequence other, boolean z2) {
    int A;
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    kotlin.jvm.internal.i.e(other, ""other"");
    if (other instanceof String) {
        A = A(charSequence, (String) other, 0, z2, 2, null);
        if (A >= 0) {
            return true;
        }
    } else if (y(charSequence, other, 0, charSequence.length(), z2, false, 16, null) >= 0) {
        return true;
    }
    return false;
}"
"<t0.n: void M(int)>","public static final void M(int i2) {
    if (i2 >= 0) {
        return;
    }
    throw new IllegalArgumentException((""Limit must be non-negative, but was "" + i2).toString());
}"
"<u0.k: void q(java.lang.Object)>","void q(Object obj);"
"<u0.k: void o(java.lang.Object,n0.l)>","void o(T t2, n0.l<? super Throwable, d0.q> lVar);"
"<u0.k: void b(n0.l)>","void b(n0.l<? super Throwable, d0.q> lVar);"
"<u.a: void a()>","void a();"
"<u.a: void b(u.b)>","void b(b bVar);"
"<l.b: void g(java.lang.String,java.lang.String)>","public static void g(String str, String str2) {
    Log.w(str, str2);
}"
"<l.b: void c(java.lang.String,java.lang.String,java.lang.Throwable)>","public static void c(String str, String str2, Throwable th) {
    Log.e(str, str2, th);
}"
"<l.b: void h(java.lang.String,java.lang.String,java.lang.Throwable)>","public static void h(String str, String str2, Throwable th) {
    Log.w(str, str2, th);
}"
"<l.b: void f(java.lang.String,java.lang.String)>","public static void f(String str, String str2) {
}"
"<l.b: void a(java.lang.String,java.lang.String)>","public static void a(String str, String str2) {
}"
"<l.b: void e(java.lang.String,java.lang.String)>","public static void e(String str, String str2) {
}"
"<l.b: void b(java.lang.String,java.lang.String)>","public static void b(String str, String str2) {
    Log.e(str, str2);
}"
"<p.a: boolean onInterceptTouchEvent(android.view.MotionEvent)>","// android.view.ViewGroup
@Override
public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
    return true;
}"
"<p.a: void b()>","public void b() {
    ViewTreeObserver.OnGlobalFocusChangeListener onGlobalFocusChangeListener;
    ViewTreeObserver viewTreeObserver = getViewTreeObserver();
    if (!viewTreeObserver.isAlive() || (onGlobalFocusChangeListener = this.f1228h) == null) {
        return;
    }
    this.f1228h = null;
    viewTreeObserver.removeOnGlobalFocusChangeListener(onGlobalFocusChangeListener);
}"
"<p.a: boolean onTouchEvent(android.view.MotionEvent)>","// android.view.View
@Override
@SuppressLint({ ""ClickableViewAccessibility"" })
public boolean onTouchEvent(MotionEvent motionEvent) {
    int i2;
    float f2;
    if (this.f1227g == null) {
        return super.onTouchEvent(motionEvent);
    }
    Matrix matrix = new Matrix();
    int action = motionEvent.getAction();
    if (action == 0) {
        int i3 = this.f1223c;
        this.f1225e = i3;
        i2 = this.f1224d;
        this.f1226f = i2;
        f2 = i3;
    } else {
        if (action == 2) {
            matrix.postTranslate(this.f1225e, this.f1226f);
            this.f1225e = this.f1223c;
            this.f1226f = this.f1224d;
            return this.f1227g.g(motionEvent, matrix);
        }
        f2 = this.f1223c;
        i2 = this.f1224d;
    }
    matrix.postTranslate(f2, i2);
    return this.f1227g.g(motionEvent, matrix);
}"
"<p.a: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","// android.view.ViewGroup, android.view.ViewParent
@Override
public boolean requestSendAccessibilityEvent(View view, AccessibilityEvent accessibilityEvent) {
    View childAt = getChildAt(0);
    if (childAt == null || childAt.getImportantForAccessibility() != 4) {
        return super.requestSendAccessibilityEvent(view, accessibilityEvent);
    }
    return false;
}"
"<p.a: void dispatchDraw(android.graphics.Canvas)>","// android.view.ViewGroup, android.view.View
@Override
public void dispatchDraw(Canvas canvas) {
    canvas.save();
    canvas.concat(getPlatformViewMatrix());
    super.dispatchDraw(canvas);
    canvas.restore();
}"
"<p.a: void draw(android.graphics.Canvas)>","// android.view.View
@Override
public void draw(Canvas canvas) {
    canvas.save();
    Iterator<Path> it = this.f1221a.getFinalClippingPaths().iterator();
    while (it.hasNext()) {
        Path path = new Path(it.next());
        path.offset(-this.f1223c, -this.f1224d);
        canvas.clipPath(path);
    }
    super.draw(canvas);
    canvas.restore();
}"
"<p.a: void a(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,int,int,int,int)>","public void a(FlutterMutatorsStack flutterMutatorsStack, int i2, int i3, int i4, int i5) {
    this.f1221a = flutterMutatorsStack;
    this.f1223c = i2;
    this.f1224d = i3;
    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(i4, i5);
    layoutParams.leftMargin = i2;
    layoutParams.topMargin = i3;
    setLayoutParams(layoutParams);
    setWillNotDraw(false);
}"
"<p.a: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)>","public void setOnDescendantFocusChangeListener(View.OnFocusChangeListener onFocusChangeListener) {
    b();
    ViewTreeObserver viewTreeObserver = getViewTreeObserver();
    if (viewTreeObserver.isAlive() && this.f1228h == null) {
        ViewTreeObserverOnGlobalFocusChangeListenerC0026a viewTreeObserverOnGlobalFocusChangeListenerC0026a = new ViewTreeObserverOnGlobalFocusChangeListenerC0026a(onFocusChangeListener, this);
        this.f1228h = viewTreeObserverOnGlobalFocusChangeListenerC0026a;
        viewTreeObserver.addOnGlobalFocusChangeListener(viewTreeObserverOnGlobalFocusChangeListenerC0026a);
    }
}"
"<e0.y: int a(int)>","public static int a(int i2) {
    if (i2 < 0) {
        return i2;
    }
    if (i2 < 3) {
        return i2 + 1;
    }
    if (i2 < 1073741824) {
        return (int) ((i2 / 0.75f) + 1.0f);
    }
    return Integer.MAX_VALUE;
}"
"<u0.e0: g0.g c(u0.l0,g0.g)>","public static final g0.g c(l0 l0Var, g0.g gVar) {
    g0.g plus = l0Var.r().plus(gVar);
    g0.g plus2 = p0.c() ? plus.plus(new j0(p0.b().incrementAndGet())) : plus;
    return (plus == w0.a() || plus.get(g0.e.f167a) != null) ? plus2 : plus2.plus(w0.a());
}"
"<x.l: void g()>","public void g() {
    this.f1589b = null;
}"
"<x.l: byte[] h()>","public byte[] h() {
    return this.f1589b;
}"
"<x.l: void j(byte[])>","public void j(byte[] bArr) {
    this.f1592e = true;
    i.d dVar = this.f1591d;
    if (dVar != null) {
        dVar.a(i(bArr));
        this.f1591d = null;
    } else if (this.f1593f) {
        this.f1590c.d(""push"", i(bArr), new a(bArr));
        return;
    }
    this.f1589b = bArr;
}"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])>","public void pushTransform(float[] fArr) {
    Matrix matrix = new Matrix();
    matrix.setValues(fArr);
    a aVar = new a(matrix);
    this.mutators.add(aVar);
    this.finalMatrix.preConcat(aVar.a());
}"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])>","public void pushClipRRect(int i2, int i3, int i4, int i5, float[] fArr) {
    Rect rect = new Rect(i2, i3, i4, i5);
    this.mutators.add(new a(rect, fArr));
    Path path = new Path();
    path.addRoundRect(new RectF(rect), fArr, Path.Direction.CCW);
    path.transform(this.finalMatrix);
    this.finalClippingPaths.add(path);
}"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)>","public void pushClipRect(int i2, int i3, int i4, int i5) {
    Rect rect = new Rect(i2, i3, i4, i5);
    this.mutators.add(new a(rect));
    Path path = new Path();
    path.addRect(new RectF(rect), Path.Direction.CCW);
    path.transform(this.finalMatrix);
    this.finalClippingPaths.add(path);
}"
"<io.flutter.embedding.android.FlutterSplashView: void k()>","/* JADX INFO: Access modifiers changed from: private */
public void k() {
    this.f193e = this.f190b.getAttachedFlutterEngine().h().h();
    l.b.f(f188j, ""Transitioning splash screen to a Flutter UI. Isolate: "" + this.f193e);
    this.f189a.a(this.f197i);
}"
"<io.flutter.embedding.android.FlutterSplashView: boolean h()>","private boolean h() {
    k kVar = this.f190b;
    if (kVar == null) {
        throw new IllegalStateException(""Cannot determine if splash has completed when no FlutterView is set."");
    }
    if (kVar.w()) {
        return this.f190b.getAttachedFlutterEngine().h().h() != null && this.f190b.getAttachedFlutterEngine().h().h().equals(this.f194f);
    }
    throw new IllegalStateException(""Cannot determine if splash has completed when no FlutterEngine is attached to our FlutterView. This question depends on an isolate ID to differentiate Flutter experiences."");
}"
"<io.flutter.embedding.android.FlutterSplashView: boolean l()>","private boolean l() {
    k kVar = this.f190b;
    if (kVar == null) {
        throw new IllegalStateException(""Cannot determine if previous splash transition was interrupted when no FlutterView is set."");
    }
    if (kVar.w()) {
        return this.f190b.u() && !h();
    }
    throw new IllegalStateException(""Cannot determine if previous splash transition was interrupted when no FlutterEngine is attached to our FlutterView. This question depends on an isolate ID to differentiate Flutter experiences."");
}"
"<io.flutter.embedding.android.FlutterSplashView: boolean j()>","private boolean j() {
    x xVar;
    k kVar = this.f190b;
    return kVar != null && kVar.w() && (xVar = this.f189a) != null && xVar.b() && l();
}"
"<io.flutter.embedding.android.FlutterSplashView: void g(io.flutter.embedding.android.k,io.flutter.embedding.android.x)>","public void g(k kVar, x xVar) {
    k kVar2 = this.f190b;
    if (kVar2 != null) {
        kVar2.z(this.f196h);
        removeView(this.f190b);
    }
    View view = this.f191c;
    if (view != null) {
        removeView(view);
    }
    this.f190b = kVar;
    addView(kVar);
    this.f189a = xVar;
    if (xVar != null) {
        if (i()) {
            l.b.f(f188j, ""Showing splash screen UI."");
            View c2 = xVar.c(getContext(), this.f192d);
            this.f191c = c2;
            addView(c2);
            kVar.l(this.f196h);
            return;
        }
        if (!j()) {
            if (kVar.w()) {
                return;
            }
            l.b.f(f188j, ""FlutterView is not yet attached to a FlutterEngine. Showing nothing until a FlutterEngine is attached."");
            kVar.k(this.f195g);
            return;
        }
        l.b.f(f188j, ""Showing an immediate splash transition to Flutter due to previously interrupted transition."");
        View c3 = xVar.c(getContext(), this.f192d);
        this.f191c = c3;
        addView(c3);
        k();
    }
}"
"<io.flutter.embedding.android.FlutterSplashView: void onRestoreInstanceState(android.os.Parcelable)>","// android.view.View
@Override
protected void onRestoreInstanceState(Parcelable parcelable) {
    if (!(parcelable instanceof SavedState)) {
        super.onRestoreInstanceState(parcelable);
        return;
    }
    SavedState savedState = (SavedState) parcelable;
    super.onRestoreInstanceState(savedState.getSuperState());
    this.f194f = savedState.previousCompletedSplashIsolate;
    this.f192d = savedState.splashScreenState;
}"
"<io.flutter.embedding.android.FlutterSplashView: boolean i()>","private boolean i() {
    k kVar = this.f190b;
    return (kVar == null || !kVar.w() || this.f190b.u() || h()) ? false : true;
}"
"<io.flutter.embedding.android.x: void a(java.lang.Runnable)>","void a(Runnable runnable);"
"<io.flutter.embedding.android.x: boolean b()>","@SuppressLint({ ""NewApi"" })
boolean b();"
"<w0.q: void d(java.lang.Object)>","void d(E e2);"
"<kotlin.jvm.internal.k: int hashCode()>","public int hashCode() {
    return b().hashCode();
}"
"<kotlin.jvm.internal.k: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    return (obj instanceof k) && i.a(b(), ((k) obj).b());
}"
"<org.chromium.support_lib_boundary.VisualStateCallbackBoundaryInterface: void onComplete(long)>","void onComplete(long j2);"
"<io.flutter.plugins.webviewflutter.w2: void a(java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.w
@Override
public void a(Long l2) {
    this.f779a.b(this.f780b.a(), l2.longValue());
}"
"<io.flutter.plugins.webviewflutter.w2: void b(java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.w
@Override
public void b(Long l2) {
    ((WebStorage) this.f779a.h(l2.longValue())).deleteAllData();
}"
"<io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)>","// android.app.Dialog
@Override
protected void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    getWindow().setBackgroundDrawable(new ColorDrawable(0));
    if (this.state.f496c == null) {
        this.state.f496c = new b(getContext());
    }
    if (this.state.f495b == null) {
        WindowManager windowManager = (WindowManager) getContext().getSystemService(""window"");
        e eVar = this.state;
        eVar.f495b = new f(windowManager, eVar.f496c);
    }
    this.container = new FrameLayout(getContext());
    d dVar = new d(getContext(), this.state.f495b, this.outerContext);
    View view = this.state.f494a.getView();
    if (view.getContext() instanceof MutableContextWrapper) {
        ((MutableContextWrapper) view.getContext()).setBaseContext(dVar);
    } else {
        l.b.g(TAG, ""Unexpected platform view context for view ID "" + this.viewId + ""; some functionality may not work correctly. When constructing a platform view in the factory, ensure that the view returned from PlatformViewFactory#create returns the provided context from getContext(). If you are unable to associate the view with that context, consider using Hybrid Composition instead."");
    }
    this.container.addView(view);
    a aVar = new a(getContext(), this.accessibilityEventsDelegate, view);
    this.rootView = aVar;
    aVar.addView(this.container);
    this.rootView.addView(this.state.f496c);
    view.setOnFocusChangeListener(this.focusChangeListener);
    this.rootView.setFocusableInTouchMode(true);
    if (this.startFocused) {
        view.requestFocus();
    } else {
        this.rootView.requestFocus();
    }
    setContentView(this.rootView);
}"
"<io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.f getView()>","public io.flutter.plugin.platform.f getView() {
    if (this.state.f494a == null) {
        return null;
    }
    return this.state.f494a;
}"
"<t0.b: boolean d(char,char,boolean)>","public static final boolean d(char c2, char c3, boolean z2) {
    if (c2 == c3) {
        return true;
    }
    if (!z2) {
        return false;
    }
    char upperCase = Character.toUpperCase(c2);
    char upperCase2 = Character.toUpperCase(c3);
    return upperCase == upperCase2 || Character.toLowerCase(upperCase) == Character.toLowerCase(upperCase2);
}"
"<a1.a: boolean c()>","private static boolean c() {
    String str = Build.TYPE;
    return ""eng"".equals(str) || ""userdebug"".equals(str);
}"
"<a1.a: boolean b(java.util.Collection,java.lang.String)>","public static boolean b(Collection<String> collection, String str) {
    if (!collection.contains(str)) {
        if (c()) {
            if (collection.contains(str + "":dev"")) {
            }
        }
        return false;
    }
    return true;
}"
"<i0.b: int a()>","private static final int a() {
    int z2;
    int z3;
    String property = System.getProperty(""java.specification.version"");
    if (property == null) {
        return 65542;
    }
    z2 = n.z(property, '.', 0, false, 6, null);
    if (z2 < 0) {
        try {
            return Integer.parseInt(property) * 65536;
        } catch (NumberFormatException unused) {
            return 65542;
        }
    }
    int i2 = z2 + 1;
    z3 = n.z(property, '.', i2, false, 4, null);
    if (z3 < 0) {
        z3 = property.length();
    }
    String substring = property.substring(0, z2);
    i.d(substring, ""this as java.lang.String…ing(startIndex, endIndex)"");
    String substring2 = property.substring(i2, z3);
    i.d(substring2, ""this as java.lang.String…ing(startIndex, endIndex)"");
    try {
        return (Integer.parseInt(substring) * 65536) + Integer.parseInt(substring2);
    } catch (NumberFormatException unused2) {
        return 65542;
    }
}"
"<kotlinx.coroutines.internal.q: int f()>","public final int f() {
    long j2 = this._state;
    return (((int) ((j2 & 1152921503533105152L) >> 30)) - ((int) ((1073741823 & j2) >> 0))) & 1073741823;
}"
"<kotlinx.coroutines.internal.q: long h()>","private final long h() {
    long j2;
    long j3;
    do {
        j2 = this._state;
        if ((j2 & 1152921504606846976L) != 0) {
            return j2;
        }
        j3 = j2 | 1152921504606846976L;
    } while (!f1064g.compareAndSet(this, j2, j3));
    return j3;
}"
"<kotlinx.coroutines.internal.q: int a(java.lang.Object)>","public final int a(long j2) {
    return (j2 & 2305843009213693952L) != 0 ? 2 : 1;
}"
"<kotlinx.coroutines.internal.q: boolean d()>","public final boolean d() {
    long j2;
    do {
        j2 = this._state;
        if ((j2 & 2305843009213693952L) != 0) {
            return true;
        }
        if ((1152921504606846976L & j2) != 0) {
            return false;
        }
    } while (!f1064g.compareAndSet(this, j2, j2 | 2305843009213693952L));
    return true;
}"
"<kotlinx.coroutines.internal.q: boolean g()>","public final boolean g() {
    long j2 = this._state;
    return ((int) ((1073741823 & j2) >> 0)) == ((int) ((j2 & 1152921503533105152L) >> 30));
}"
"<w0.o: void z(w0.j)>","public abstract void z(j<?> jVar);"
"<w.b: void d()>","void d();"
"<w.b: void f()>","void f();"
"<androidx.lifecycle.FullLifecycleObserverAdapter: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","// androidx.lifecycle.d
@Override
public void g(f fVar, c.a aVar) {
    switch(a.f48a[aVar.ordinal()]) {
        case 1:
            this.f46a.e(fVar);
            break;
        case 2:
            this.f46a.f(fVar);
            break;
        case 3:
            this.f46a.a(fVar);
            break;
        case 4:
            this.f46a.b(fVar);
            break;
        case R.styleable.SplitPairRule_splitMinWidth:
            /* 5 */
            this.f46a.d(fVar);
            break;
        case R.styleable.SplitPairRule_splitRatio:
            /* 6 */
            this.f46a.c(fVar);
            break;
        case 7:
            throw new IllegalArgumentException(""ON_ANY must not been send by anybody"");
    }
    d dVar = this.f47b;
    if (dVar != null) {
        dVar.g(fVar, aVar);
    }
}"
"<kotlinx.coroutines.internal.a0: long c(java.lang.String,long,long,long)>","public static final long c(String str, long j2, long j3, long j4) {
    return c0.b(str, j2, j3, j4);
}"
"<kotlinx.coroutines.internal.a0: int b(java.lang.String,int,int,int)>","public static final int b(String str, int i2, int i3, int i4) {
    return c0.a(str, i2, i3, i4);
}"
"<kotlinx.coroutines.internal.a0: boolean e(java.lang.String,boolean)>","public static final boolean e(String str, boolean z2) {
    return c0.c(str, z2);
}"
"<kotlinx.coroutines.internal.a0: int a()>","public static final int a() {
    return b0.a();
}"
"<org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: void setServiceWorkerClient(java.lang.reflect.InvocationHandler)>","void setServiceWorkerClient(InvocationHandler invocationHandler);"
"<kotlinx.coroutines.internal.c: boolean a(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.lang.Object,java.lang.Object,java.lang.Object)>","public static /* synthetic */
boolean a(AtomicReferenceFieldUpdater atomicReferenceFieldUpdater, Object obj, Object obj2, Object obj3) {
    while (!atomicReferenceFieldUpdater.compareAndSet(obj, obj2, obj3)) {
        if (atomicReferenceFieldUpdater.get(obj) != obj2) {
            return false;
        }
    }
    return true;
}"
"<kotlin.coroutines.jvm.internal.k: int getArity()>","// kotlin.jvm.internal.f
@Override
public int getArity() {
    return this.arity;
}"
"<kotlinx.coroutines.internal.d0: void a(g0.g,java.lang.Object)>","public static final void a(g0.g gVar, Object obj) {
    if (obj == f1022a) {
        return;
    }
    if (obj instanceof g0) {
        ((g0) obj).b(gVar);
        return;
    }
    Object fold = gVar.fold(null, f1024c);
    Objects.requireNonNull(fold, ""null cannot be cast to non-null type kotlinx.coroutines.ThreadContextElement<kotlin.Any?>"");
    ((e2) fold).d(gVar, obj);
}"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()>","public void updateTexImage() {
    synchronized (this) {
        if (!this.released) {
            this.surfaceTexture.updateTexImage();
            Runnable runnable = this.onFrameConsumed;
            if (runnable != null) {
                runnable.run();
            }
        }
    }
}"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])>","public void getTransformMatrix(float[] fArr) {
    this.surfaceTexture.getTransformMatrix(fArr);
}"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()>","public void detachFromGLContext() {
    synchronized (this) {
        if (this.attached && !this.released) {
            this.surfaceTexture.detachFromGLContext();
            this.attached = false;
        }
    }
}"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()>","public void release() {
    synchronized (this) {
        if (!this.released) {
            this.surfaceTexture.release();
            this.released = true;
            this.attached = false;
        }
    }
}"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)>","public void attachToGLContext(int i2) {
    synchronized (this) {
        if (this.released) {
            return;
        }
        if (this.attached) {
            this.surfaceTexture.detachFromGLContext();
        }
        this.surfaceTexture.attachToGLContext(i2);
        this.attached = true;
    }
}"
"<j.a: void a(boolean)>","public abstract void a(boolean z2);"
"<kotlinx.coroutines.internal.o: boolean j(kotlinx.coroutines.internal.o,kotlinx.coroutines.internal.o)>","public final boolean j(o oVar, o oVar2) {
    f1057e.lazySet(oVar, this);
    AtomicReferenceFieldUpdater atomicReferenceFieldUpdater = f1056d;
    atomicReferenceFieldUpdater.lazySet(oVar, oVar2);
    if (!c.a(atomicReferenceFieldUpdater, this, oVar2, oVar)) {
        return false;
    }
    oVar.n(oVar2);
    return true;
}"
"<kotlinx.coroutines.internal.o: void s()>","public final void s() {
    o oVar = this;
    while (true) {
        Object o2 = oVar.o();
        if (!(o2 instanceof w)) {
            oVar.l(null);
            return;
        }
        oVar = ((w) o2).f1080a;
    }
}"
"<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o l(kotlinx.coroutines.internal.v)>","/* JADX WARN: Code restructure failed: missing block: B:22:0x0048, code lost:
    
        if (kotlinx.coroutines.internal.c.a(kotlinx.coroutines.internal.o.f1056d, r3, r2, ((kotlinx.coroutines.internal.w) r4).f1080a) != false) goto L30;
     */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
private final kotlinx.coroutines.internal.o l(kotlinx.coroutines.internal.v r8) {
    /*
            r7 = this;
        L0:
            java.lang.Object r0 = r7._prev
            kotlinx.coroutines.internal.o r0 = (kotlinx.coroutines.internal.o) r0
            r1 = 0
            r2 = r0
        L6:
            r3 = r1
        L7:
            java.lang.Object r4 = r2._next
            if (r4 != r7) goto L18
            if (r0 != r2) goto Le
            return r2
        Le:
            java.util.concurrent.atomic.AtomicReferenceFieldUpdater r1 = kotlinx.coroutines.internal.o.f1057e
            boolean r0 = kotlinx.coroutines.internal.c.a(r1, r7, r0, r2)
            if (r0 != 0) goto L17
            goto L0
        L17:
            return r2
        L18:
            boolean r5 = r7.t()
            if (r5 == 0) goto L1f
            return r1
        L1f:
            if (r4 != r8) goto L22
            return r2
        L22:
            boolean r5 = r4 instanceof kotlinx.coroutines.internal.v
            if (r5 == 0) goto L38
            if (r8 == 0) goto L32
            r0 = r4
            kotlinx.coroutines.internal.v r0 = (kotlinx.coroutines.internal.v) r0
            boolean r0 = r8.b(r0)
            if (r0 == 0) goto L32
            return r1
        L32:
            kotlinx.coroutines.internal.v r4 = (kotlinx.coroutines.internal.v) r4
            r4.c(r2)
            goto L0
        L38:
            boolean r5 = r4 instanceof kotlinx.coroutines.internal.w
            if (r5 == 0) goto L52
            if (r3 == 0) goto L4d
            java.util.concurrent.atomic.AtomicReferenceFieldUpdater r5 = kotlinx.coroutines.internal.o.f1056d
            kotlinx.coroutines.internal.w r4 = (kotlinx.coroutines.internal.w) r4
            kotlinx.coroutines.internal.o r4 = r4.f1080a
            boolean r2 = kotlinx.coroutines.internal.c.a(r5, r3, r2, r4)
            if (r2 != 0) goto L4b
            goto L0
        L4b:
            r2 = r3
            goto L6
        L4d:
            java.lang.Object r2 = r2._prev
            kotlinx.coroutines.internal.o r2 = (kotlinx.coroutines.internal.o) r2
            goto L7
        L52:
            r3 = r4
            kotlinx.coroutines.internal.o r3 = (kotlinx.coroutines.internal.o) r3
            r6 = r3
            r3 = r2
            r2 = r6
            goto L7
        */
    throw new UnsupportedOperationException(""Method not decompiled: kotlinx.coroutines.internal.o.l(kotlinx.coroutines.internal.v):kotlinx.coroutines.internal.o"");
}"
"<kotlinx.coroutines.internal.o: boolean t()>","public boolean t() {
    return o() instanceof w;
}"
"<kotlinx.coroutines.internal.o: int x(kotlinx.coroutines.internal.o,kotlinx.coroutines.internal.o,kotlinx.coroutines.internal.o$a)>","public final int x(o oVar, o oVar2, a aVar) {
    f1057e.lazySet(oVar, this);
    AtomicReferenceFieldUpdater atomicReferenceFieldUpdater = f1056d;
    atomicReferenceFieldUpdater.lazySet(oVar, oVar2);
    aVar.f1060c = oVar2;
    if (c.a(atomicReferenceFieldUpdater, this, oVar2, aVar)) {
        return aVar.c(this) == null ? 1 : 2;
    }
    return 0;
}"
"<kotlinx.coroutines.internal.o: void n(kotlinx.coroutines.internal.o)>","/* JADX INFO: Access modifiers changed from: private */
public final void n(o oVar) {
    o oVar2;
    do {
        oVar2 = (o) oVar._prev;
        if (o() != oVar) {
            return;
        }
    } while (!c.a(f1057e, oVar, oVar2, this));
    if (t()) {
        oVar.l(null);
    }
}"
"<kotlinx.coroutines.internal.o: void r()>","public final void r() {
    ((w) o()).f1080a.s();
}"
"<kotlinx.coroutines.internal.o: boolean k(kotlinx.coroutines.internal.o)>","public final boolean k(o oVar) {
    f1057e.lazySet(oVar, this);
    f1056d.lazySet(oVar, this);
    while (o() == this) {
        if (c.a(f1056d, this, this, oVar)) {
            oVar.n(this);
            return true;
        }
    }
    return false;
}"
"<kotlinx.coroutines.internal.o: boolean u()>","public boolean u() {
    return v() == null;
}"
"<z.a: void d(android.content.res.Configuration)>","public void d(Configuration configuration) {
    ArrayList arrayList = new ArrayList();
    if (Build.VERSION.SDK_INT >= 24) {
        LocaleList locales = configuration.getLocales();
        int size = locales.size();
        for (int i2 = 0; i2 < size; i2++) {
            arrayList.add(locales.get(i2));
        }
    } else {
        arrayList.add(configuration.locale);
    }
    this.f1709a.b(arrayList);
}"
"<kotlinx.coroutines.internal.MainDispatcherFactory: int getLoadPriority()>","int getLoadPriority();"
"<kotlinx.coroutines.scheduling.e: void q(java.lang.Runnable,boolean)>","private final void q(Runnable runnable, boolean z2) {
    do {
        AtomicIntegerFieldUpdater atomicIntegerFieldUpdater = f1119k;
        if (atomicIntegerFieldUpdater.incrementAndGet(this) <= this.f1121g) {
            this.f1120f.r(runnable, this, z2);
            return;
        }
        this.f1124j.add(runnable);
        if (atomicIntegerFieldUpdater.decrementAndGet(this) >= this.f1121g) {
            return;
        } else {
            runnable = this.f1124j.poll();
        }
    } while (runnable != null);
}"
"<kotlinx.coroutines.scheduling.e: void f()>","// kotlinx.coroutines.scheduling.j
@Override
public void f() {
    Runnable poll = this.f1124j.poll();
    if (poll != null) {
        this.f1120f.r(poll, this, true);
        return;
    }
    f1119k.decrementAndGet(this);
    Runnable poll2 = this.f1124j.poll();
    if (poll2 == null) {
        return;
    }
    q(poll2, true);
}"
"<kotlinx.coroutines.scheduling.e: int b()>","// kotlinx.coroutines.scheduling.j
@Override
public int b() {
    return this.f1123i;
}"
"<kotlinx.coroutines.scheduling.e: void close()>","// java.io.Closeable, java.lang.AutoCloseable
@Override
public void close() {
    throw new IllegalStateException(""Close cannot be invoked on LimitingBlockingDispatcher"".toString());
}"
"<kotlinx.coroutines.scheduling.e: void execute(java.lang.Runnable)>","// java.util.concurrent.Executor
@Override
public void execute(Runnable runnable) {
    q(runnable, false);
}"
"<kotlinx.coroutines.scheduling.e: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public void m(g0.g gVar, Runnable runnable) {
    q(runnable, false);
}"
"<io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.a)>","public static void registerWith(a aVar) {
    try {
        aVar.o().i(new b());
    } catch (Exception e2) {
        l.b.c(TAG, ""Error registering plugin shared_preferences_android, io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin"", e2);
    }
    try {
        aVar.o().i(new o3());
    } catch (Exception e3) {
        l.b.c(TAG, ""Error registering plugin webview_flutter_android, io.flutter.plugins.webviewflutter.WebViewFlutterPlugin"", e3);
    }
}"
"<r0.e: boolean isInfix()>","boolean isInfix();"
"<r0.e: boolean isOperator()>","boolean isOperator();"
"<r0.e: boolean isExternal()>","boolean isExternal();"
"<r0.e: boolean isSuspend()>","// r0.b
@Override
boolean isSuspend();"
"<r0.e: boolean isInline()>","boolean isInline();"
"<androidx.lifecycle.a: void e(androidx.lifecycle.f)>","void e(f fVar);"
"<androidx.lifecycle.a: void b(androidx.lifecycle.f)>","void b(f fVar);"
"<androidx.lifecycle.a: void d(androidx.lifecycle.f)>","void d(f fVar);"
"<androidx.lifecycle.a: void a(androidx.lifecycle.f)>","void a(f fVar);"
"<androidx.lifecycle.a: void c(androidx.lifecycle.f)>","void c(f fVar);"
"<androidx.lifecycle.a: void f(androidx.lifecycle.f)>","void f(f fVar);"
"<g0.e: void n(g0.d)>","void n(d<?> dVar);"
"<androidx.savedstate.Recreator: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","// androidx.lifecycle.d
@Override
public void g(f fVar, c.a aVar) {
    if (aVar != c.a.ON_CREATE) {
        throw new AssertionError(""Next event must be ON_CREATE"");
    }
    fVar.e().b(this);
    this.f72a.j();
    throw null;
}"
"<kotlinx.coroutines.scheduling.j: int b()>","int b();"
"<kotlinx.coroutines.scheduling.j: void f()>","void f();"
"<androidx.window.embedding.SplitPairFilter: int hashCode()>","public int hashCode() {
    int hashCode = ((this.primaryActivityName.hashCode() * 31) + this.secondaryActivityName.hashCode()) * 31;
    String str = this.secondaryActivityIntentAction;
    return hashCode + (str == null ? 0 : str.hashCode());
}"
"<androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)>","/* JADX WARN: Code restructure failed: missing block: B:10:0x003e, code lost:
    
        if (matchesActivityIntentPair(r6, r7) != false) goto L15;
     */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public final boolean matchesActivityPair(android.app.Activity r6, android.app.Activity r7) {
    /*
            r5 = this;
            java.lang.String r0 = ""primaryActivity""
            kotlin.jvm.internal.i.e(r6, r0)
            java.lang.String r0 = ""secondaryActivity""
            kotlin.jvm.internal.i.e(r7, r0)
            androidx.window.embedding.MatcherUtils r0 = androidx.window.embedding.MatcherUtils.INSTANCE
            android.content.ComponentName r1 = r6.getComponentName()
            android.content.ComponentName r2 = r5.primaryActivityName
            boolean r1 = r0.areComponentsMatching$window_release(r1, r2)
            r2 = 1
            r3 = 0
            if (r1 == 0) goto L28
            android.content.ComponentName r1 = r7.getComponentName()
            android.content.ComponentName r4 = r5.secondaryActivityName
            boolean r0 = r0.areComponentsMatching$window_release(r1, r4)
            if (r0 == 0) goto L28
            r0 = r2
            goto L29
        L28:
            r0 = r3
        L29:
            android.content.Intent r1 = r7.getIntent()
            if (r1 == 0) goto L43
            if (r0 == 0) goto L41
            android.content.Intent r7 = r7.getIntent()
            java.lang.String r0 = ""secondaryActivity.intent""
            kotlin.jvm.internal.i.d(r7, r0)
            boolean r6 = r5.matchesActivityIntentPair(r6, r7)
            if (r6 == 0) goto L41
            goto L42
        L41:
            r2 = r3
        L42:
            r0 = r2
        L43:
            return r0
        */
    throw new UnsupportedOperationException(""Method not decompiled: androidx.window.embedding.SplitPairFilter.matchesActivityPair(android.app.Activity, android.app.Activity):boolean"");
}"
"<androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)>","public final boolean matchesActivityIntentPair(Activity primaryActivity, Intent secondaryActivityIntent) {
    i.e(primaryActivity, ""primaryActivity"");
    i.e(secondaryActivityIntent, ""secondaryActivityIntent"");
    ComponentName componentName = primaryActivity.getComponentName();
    MatcherUtils matcherUtils = MatcherUtils.INSTANCE;
    if (!matcherUtils.areComponentsMatching$window_release(componentName, this.primaryActivityName) || !matcherUtils.areComponentsMatching$window_release(secondaryActivityIntent.getComponent(), this.secondaryActivityName)) {
        return false;
    }
    String str = this.secondaryActivityIntentAction;
    return str == null || i.a(str, secondaryActivityIntent.getAction());
}"
"<androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof SplitPairFilter)) {
        return false;
    }
    SplitPairFilter splitPairFilter = (SplitPairFilter) obj;
    return i.a(this.primaryActivityName, splitPairFilter.primaryActivityName) && i.a(this.secondaryActivityName, splitPairFilter.secondaryActivityName) && i.a(this.secondaryActivityIntentAction, splitPairFilter.secondaryActivityIntentAction);
}"
"<androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)>","public final int safeInsetLeft(DisplayCutout displayCutout) {
    i.e(displayCutout, ""displayCutout"");
    return displayCutout.getSafeInsetLeft();
}"
"<androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)>","public final int safeInsetBottom(DisplayCutout displayCutout) {
    i.e(displayCutout, ""displayCutout"");
    return displayCutout.getSafeInsetBottom();
}"
"<androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)>","public final int safeInsetRight(DisplayCutout displayCutout) {
    i.e(displayCutout, ""displayCutout"");
    return displayCutout.getSafeInsetRight();
}"
"<androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)>","public final int safeInsetTop(DisplayCutout displayCutout) {
    i.e(displayCutout, ""displayCutout"");
    return displayCutout.getSafeInsetTop();
}"
"<u0.m1: void y(java.lang.Throwable)>","// u0.a0
@Override
public void y(Throwable th) {
    if (f1315i.compareAndSet(this, 0, 1)) {
        this.f1316h.invoke(th);
    }
}"
"<org.chromium.support_lib_boundary.ScriptHandlerBoundaryInterface: void remove()>","void remove();"
"<io.flutter.plugin.editing.c: void l(io.flutter.plugin.editing.c$b)>","public void l(b bVar) {
    if (this.f434e > 0) {
        l.b.b(""ListenableEditingState"", ""removing a listener "" + bVar.toString() + "" in a listener callback"");
    }
    this.f435f.remove(bVar);
    if (this.f433d > 0) {
        this.f436g.remove(bVar);
    }
}"
"<io.flutter.plugin.editing.c: int g()>","public final int g() {
    return BaseInputConnection.getComposingSpanStart(this);
}"
"<io.flutter.plugin.editing.c: void a(io.flutter.plugin.editing.c$b)>","void a(boolean z2, boolean z3, boolean z4);"
"<io.flutter.plugin.editing.c: void j(io.flutter.plugin.editing.c$b,boolean,boolean,boolean)>","private void j(b bVar, boolean z2, boolean z3, boolean z4) {
    this.f434e++;
    bVar.a(z2, z3, z4);
    this.f434e--;
}"
"<io.flutter.plugin.editing.c: void m(int,int)>","public void m(int i2, int i3) {
    if (i2 < 0 || i2 >= i3) {
        BaseInputConnection.removeComposingSpans(this);
    } else {
        this.f444o.setComposingRegion(i2, i3);
    }
}"
"<io.flutter.plugin.editing.c: void d()>","public void d() {
    int i2 = this.f433d;
    if (i2 == 0) {
        l.b.b(""ListenableEditingState"", ""endBatchEdit called without a matching beginBatchEdit"");
        return;
    }
    if (i2 == 1) {
        Iterator<b> it = this.f436g.iterator();
        while (it.hasNext()) {
            j(it.next(), true, true, true);
        }
        if (!this.f435f.isEmpty()) {
            l.b.f(""ListenableEditingState"", ""didFinishBatchEdit with "" + String.valueOf(this.f435f.size()) + "" listener(s)"");
            k(!toString().equals(this.f439j), (this.f440k == i() && this.f441l == h()) ? false : true, (this.f442m == g() && this.f443n == f()) ? false : true);
        }
    }
    this.f435f.addAll(this.f436g);
    this.f436g.clear();
    this.f433d--;
}"
"<io.flutter.plugin.editing.c: int i()>","public final int i() {
    return Selection.getSelectionStart(this);
}"
"<io.flutter.plugin.editing.c: void k(boolean,boolean,boolean)>","private void k(boolean z2, boolean z3, boolean z4) {
    if (z2 || z3 || z4) {
        Iterator<b> it = this.f435f.iterator();
        while (it.hasNext()) {
            j(it.next(), z2, z3, z4);
        }
    }
}"
"<io.flutter.plugin.editing.c: int f()>","public final int f() {
    return BaseInputConnection.getComposingSpanEnd(this);
}"
"<io.flutter.plugin.editing.c: void setSpan(java.lang.Object,int,int,int)>","// android.text.SpannableStringBuilder, android.text.Spannable
@Override
public void setSpan(Object obj, int i2, int i3, int i4) {
    super.setSpan(obj, i2, i3, i4);
    this.f437h.add(new e(toString(), i(), h(), g(), f()));
}"
"<io.flutter.plugin.editing.c: void b()>","public void b() {
    this.f433d++;
    if (this.f434e > 0) {
        l.b.b(""ListenableEditingState"", ""editing state should not be changed in a listener callback"");
    }
    if (this.f433d != 1 || this.f435f.isEmpty()) {
        return;
    }
    this.f439j = toString();
    this.f440k = i();
    this.f441l = h();
    this.f442m = g();
    this.f443n = f();
}"
"<io.flutter.plugin.editing.c: void n(x.p$e)>","public void n(p.e eVar) {
    b();
    replace(0, length(), (CharSequence) eVar.f1639a);
    if (eVar.c()) {
        Selection.setSelection(this, eVar.f1640b, eVar.f1641c);
    } else {
        Selection.removeSelection(this);
    }
    m(eVar.f1642d, eVar.f1643e);
    c();
    d();
}"
"<io.flutter.plugin.editing.c: void c()>","public void c() {
    this.f437h.clear();
}"
"<io.flutter.plugin.editing.c: int h()>","public final int h() {
    return Selection.getSelectionEnd(this);
}"
"<q0.c: boolean f(int)>","public boolean f(int i2) {
    return a() <= i2 && i2 <= b();
}"
"<q0.c: boolean isEmpty()>","// q0.a
@Override
public boolean isEmpty() {
    return a() > b();
}"
"<q0.c: boolean equals(java.lang.Object)>","// q0.a
@Override
public boolean equals(Object obj) {
    if (obj instanceof c) {
        if (!isEmpty() || !((c) obj).isEmpty()) {
            c cVar = (c) obj;
            if (a() != cVar.a() || b() != cVar.b()) {
            }
        }
        return true;
    }
    return false;
}"
"<q0.c: int hashCode()>","// q0.a
@Override
public int hashCode() {
    if (isEmpty()) {
        return -1;
    }
    return (a() * 31) + b();
}"
"<androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(e.a)>","void unregisterLayoutChangeCallback(e.a<WindowLayoutInfo> aVar);"
"<androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,e.a)>","void registerLayoutChangeCallback(Activity activity, Executor executor, e.a<WindowLayoutInfo> aVar);"
"<e.a: void accept(java.lang.Object)>","void accept(T t2);"
"<androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)>","public void setEmbeddingRules(Set<androidx.window.extensions.embedding.EmbeddingRule> splitRules) {
    i.e(splitRules, ""splitRules"");
}"
"<androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)>","public void setSplitInfoCallback(Consumer<List<androidx.window.extensions.embedding.SplitInfo>> consumer) {
    i.e(consumer, ""consumer"");
}"
"<io.flutter.plugins.webviewflutter.e: void a(java.lang.Long)>","// io.flutter.plugins.webviewflutter.p2
@Override
public void a() {
    d dVar = this.f610a;
    if (dVar != null) {
        dVar.h(this, new // from class: io.flutter.plugins.webviewflutter.f
        k.d.a() {

            // io.flutter.plugins.webviewflutter.k.d.a
            @Override
            public final void a(Object obj) {
                e.b.e((Void) obj);
            }
        });
    }
    this.f610a = null;
}"
"<androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)>","public final boolean isInMultiWindowMode(Activity activity) {
    i.e(activity, ""activity"");
    return activity.isInMultiWindowMode();
}"
"<org.chromium.support_lib_boundary.WebMessageListenerBoundaryInterface: void onPostMessage(android.webkit.WebView,java.lang.reflect.InvocationHandler,android.net.Uri,boolean,java.lang.reflect.InvocationHandler)>","void onPostMessage(WebView webView, InvocationHandler invocationHandler, Uri uri, boolean z2, InvocationHandler invocationHandler2);"
"<w0.j: void d(java.lang.Object)>","// w0.q
@Override
public void d(E e2) {
}"
"<w0.j: void y()>","// w0.s
@Override
public void y() {
}"
"<u0.n1: void y(java.lang.Throwable)>","// u0.a0
@Override
public void y(Throwable th) {
    this.f1323h.invoke(th);
}"
"<r.b: void d(android.content.Intent)>","void d(Intent intent);"
"<r.b: void e(android.os.Bundle)>","void e(Bundle bundle);"
"<r.b: void a(android.os.Bundle)>","void a(Bundle bundle);"
"<r.b: void f()>","void f();"
"<r.b: boolean c(int,int,android.content.Intent)>","boolean c(int i2, int i3, Intent intent);"
"<r.b: void h()>","void h();"
"<r.b: void j()>","void j();"
"<r.b: void g(io.flutter.embedding.android.c,androidx.lifecycle.c)>","void g(io.flutter.embedding.android.c<Activity> cVar, androidx.lifecycle.c cVar2);"
"<r.b: boolean b(int,java.lang.String[],int[])>","boolean b(int i2, String[] strArr, int[] iArr);"
"<b.b: int a(int[],int,int)>","/* JADX INFO: Access modifiers changed from: package-private */
public static int a(int[] iArr, int i2, int i3) {
    int i4 = i2 - 1;
    int i5 = 0;
    while (i5 <= i4) {
        int i6 = (i5 + i4) >>> 1;
        int i7 = iArr[i6];
        if (i7 < i3) {
            i5 = i6 + 1;
        } else {
            if (i7 <= i3) {
                return i6;
            }
            i4 = i6 - 1;
        }
    }
    return ~i5;
}"
"<b.b: boolean b(java.lang.Object,java.lang.Object)>","public static boolean b(Object obj, Object obj2) {
    return obj == obj2 || (obj != null && obj.equals(obj2));
}"
"<kotlin.coroutines.jvm.internal.d: g0.g getContext()>","// g0.d
@Override
public g0.g getContext() {
    g0.g gVar = this._context;
    kotlin.jvm.internal.i.b(gVar);
    return gVar;
}"
"<kotlin.coroutines.jvm.internal.d: void releaseIntercepted()>","/* JADX INFO: Access modifiers changed from: protected */
// kotlin.coroutines.jvm.internal.a
@Override
public void releaseIntercepted() {
    g0.d<?> dVar = this.intercepted;
    if (dVar != null && dVar != this) {
        g.b bVar = getContext().get(g0.e.f167a);
        kotlin.jvm.internal.i.b(bVar);
        ((g0.e) bVar).n(dVar);
    }
    this.intercepted = c.f993d;
}"
"<y0.b: void resumeWith(java.lang.Object)>","// g0.d
@Override
public void resumeWith(Object obj) {
}"
"<kotlinx.coroutines.internal.b0: int a()>","public static final int a() {
    return f1020a;
}"
"<androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof ActivityRule)) {
        return false;
    }
    ActivityRule activityRule = (ActivityRule) obj;
    return i.a(this.filters, activityRule.filters) && this.alwaysExpand == activityRule.alwaysExpand;
}"
"<androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()>","public final boolean getAlwaysExpand() {
    return this.alwaysExpand;
}"
"<androidx.window.embedding.ActivityRule: int hashCode()>","public int hashCode() {
    return (this.filters.hashCode() * 31) + a.a(this.alwaysExpand);
}"
"<io.flutter.plugins.webviewflutter.s2: void b(java.lang.Long,java.lang.Long)>","// io.flutter.plugins.webviewflutter.k.q
@Override
public void b(Long l2, Long l3) {
    this.f758a.b(this.f759b.a(this.f760c, (WebViewClient) this.f758a.h(l3.longValue())), l2.longValue());
}"
"<x.g: void b(x.g$b)>","public void b(b bVar) {
    this.f1493b = bVar;
}"
"<e0.t: int size()>","// java.util.Map
@Override
public final /* bridge */
int size() {
    return e();
}"
"<e0.t: boolean containsKey(java.lang.Object)>","// java.util.Map
@Override
public boolean containsKey(Object obj) {
    return false;
}"
"<e0.t: boolean isEmpty()>","// java.util.Map
@Override
public boolean isEmpty() {
    return true;
}"
"<e0.t: void putAll(java.util.Map)>","// java.util.Map
@Override
public void putAll(Map map) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.t: void clear()>","// java.util.Map
@Override
public void clear() {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.t: boolean equals(java.lang.Object)>","// java.util.Map
@Override
public boolean equals(Object obj) {
    return (obj instanceof Map) && ((Map) obj).isEmpty();
}"
"<e0.t: boolean a(java.lang.Void)>","public boolean a(Void value) {
    kotlin.jvm.internal.i.e(value, ""value"");
    return false;
}"
"<e0.t: boolean containsValue(java.lang.Object)>","// java.util.Map
@Override
public final /* bridge */
boolean containsValue(Object obj) {
    if (obj instanceof Void) {
        return a((Void) obj);
    }
    return false;
}"
"<e0.t: int hashCode()>","// java.util.Map
@Override
public int hashCode() {
    return 0;
}"
"<e0.t: int e()>","public int e() {
    return 0;
}"
"<io.flutter.plugins.webviewflutter.y: void c(io.flutter.plugins.webviewflutter.k$l,java.lang.Object,y.a$e)>","public static /* synthetic */
void c(k.l lVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    String str = (String) arrayList.get(1);
    if (str == null) {
        throw new NullPointerException(""channelNameArg unexpectedly null."");
    }
    lVar.a(Long.valueOf(number.longValue()), str);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.y: void d(y.b,io.flutter.plugins.webviewflutter.k$l)>","public static void d(y.b bVar, final k.l lVar) {
    new y.a(bVar, ""dev.flutter.pigeon.JavaScriptChannelHostApi.create"", b()).e(lVar != null ? new // from class: io.flutter.plugins.webviewflutter.x
    a.d() {

        // y.a.d
        @Override
        public final void a(Object obj, a.e eVar) {
            y.c(k.l.this, obj, eVar);
        }
    } : null);
}"
"<io.flutter.plugins.webviewflutter.y: void a(io.flutter.plugins.webviewflutter.k$l,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    y.c(k.l.this, obj, eVar);
}"
"<o0.a: int b()>","// o0.c
@Override
public int b() {
    return c().nextInt();
}"
"<d0.j: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof j)) {
        return false;
    }
    j jVar = (j) obj;
    return kotlin.jvm.internal.i.a(this.f142d, jVar.f142d) && kotlin.jvm.internal.i.a(this.f143e, jVar.f143e);
}"
"<d0.j: int hashCode()>","public int hashCode() {
    A a2 = this.f142d;
    int hashCode = (a2 == null ? 0 : a2.hashCode()) * 31;
    B b2 = this.f143e;
    return hashCode + (b2 != null ? b2.hashCode() : 0);
}"
"<q0.f: int e(int,int,int)>","public static int e(int i2, int i3, int i4) {
    if (i3 <= i4) {
        return i2 < i3 ? i3 : i2 > i4 ? i4 : i2;
    }
    throw new IllegalArgumentException(""Cannot coerce value to an empty range: maximum "" + i4 + "" is less than minimum "" + i3 + '.');
}"
"<q0.f: long b(long,long)>","public static long b(long j2, long j3) {
    return j2 < j3 ? j3 : j2;
}"
"<q0.f: int c(int,int)>","public static int c(int i2, int i3) {
    return i2 > i3 ? i3 : i2;
}"
"<q0.f: int a(int,int)>","public static int a(int i2, int i3) {
    return i2 < i3 ? i3 : i2;
}"
"<q0.f: long d(long,long)>","public static long d(long j2, long j3) {
    return j2 > j3 ? j3 : j2;
}"
"<org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface: void showInterstitial(boolean)>","void showInterstitial(boolean z2);"
"<org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface: void proceed(boolean)>","void proceed(boolean z2);"
"<org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface: void backToSafety(boolean)>","void backToSafety(boolean z2);"
"<io.flutter.plugin.platform.q: void L()>","public void L() {
    this.f552f = null;
}"
"<io.flutter.plugin.platform.q: void a()>","// x.k.g
@Override
public void a(int i2) {
    View view;
    StringBuilder sb;
    String str;
    if (q.this.d(i2)) {
        view = q.this.f555i.get(Integer.valueOf(i2)).e();
    } else {
        f fVar = (f) q.this.f557k.get(i2);
        if (fVar == null) {
            sb = new StringBuilder();
            str = ""Clearing focus on an unknown view with id: "";
            sb.append(str);
            sb.append(i2);
            l.b.b(""PlatformViewsController"", sb.toString());
        }
        view = fVar.getView();
    }
    if (view != null) {
        view.clearFocus();
        return;
    }
    sb = new StringBuilder();
    str = ""Clearing focus on a null view with id: "";
    sb.append(str);
    sb.append(i2);
    l.b.b(""PlatformViewsController"", sb.toString());
}"
"<io.flutter.plugin.platform.q: boolean n0(int)>","/* JADX INFO: Access modifiers changed from: private */
public static boolean n0(int i2) {
    return i2 == 0 || i2 == 1;
}"
"<io.flutter.plugin.platform.q: int i0(double)>","/* JADX INFO: Access modifiers changed from: private */
public int i0(double d2) {
    return j0(d2, O());
}"
"<io.flutter.plugin.platform.q: void r(io.flutter.plugin.platform.q,io.flutter.plugin.platform.r)>","private void r(k.d dVar) {
    if (q.n0(dVar.f1562g)) {
        return;
    }
    throw new IllegalStateException(""Trying to create a view with unknown direction value: "" + dVar.f1562g + ""(view id: "" + dVar.f1556a + "")"");
}"
"<io.flutter.plugin.platform.q: void N(boolean)>","private void N(boolean z2) {
    for (int i2 = 0; i2 < this.f559m.size(); i2++) {
        int keyAt = this.f559m.keyAt(i2);
        b valueAt = this.f559m.valueAt(i2);
        if (this.f564r.contains(Integer.valueOf(keyAt))) {
            this.f550d.m(valueAt);
            z2 &= valueAt.d();
        } else {
            if (!this.f562p) {
                valueAt.c();
            }
            valueAt.setVisibility(8);
        }
    }
    for (int i3 = 0; i3 < this.f558l.size(); i3++) {
        int keyAt2 = this.f558l.keyAt(i3);
        p.a aVar = this.f558l.get(keyAt2);
        if (!this.f565s.contains(Integer.valueOf(keyAt2)) || (!z2 && this.f563q)) {
            aVar.setVisibility(8);
        } else {
            aVar.setVisibility(0);
        }
    }
}"
"<io.flutter.plugin.platform.q: void T()>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void T() {
    N(false);
}"
"<io.flutter.plugin.platform.q: void J()>","public void J() {
    x.k kVar = this.f553g;
    if (kVar != null) {
        kVar.e(null);
    }
    I();
    this.f553g = null;
    this.f549c = null;
    this.f551e = null;
}"
"<io.flutter.plugin.platform.q: void R()>","private void R() {
    if (!this.f563q || this.f562p) {
        return;
    }
    this.f550d.p();
    this.f562p = true;
}"
"<io.flutter.plugin.platform.q: void I()>","public void I() {
    for (int i2 = 0; i2 < this.f559m.size(); i2++) {
        b valueAt = this.f559m.valueAt(i2);
        valueAt.c();
        valueAt.f();
    }
}"
"<io.flutter.plugin.platform.q: void b(io.flutter.view.c)>","// x.k.g
@Override
public void b(int i2) {
    f fVar = (f) q.this.f557k.get(i2);
    if (fVar == null) {
        l.b.b(""PlatformViewsController"", ""Disposing unknown platform view with id: "" + i2);
        return;
    }
    q.this.f557k.remove(i2);
    try {
        fVar.b();
    } catch (RuntimeException e2) {
        l.b.c(""PlatformViewsController"", ""Disposing platform view threw an exception"", e2);
    }
    if (q.this.d(i2)) {
        View e3 = q.this.f555i.get(Integer.valueOf(i2)).e();
        if (e3 != null) {
            q.this.f556j.remove(e3.getContext());
        }
        q.this.f555i.remove(Integer.valueOf(i2));
        return;
    }
    j jVar = (j) q.this.f560n.get(i2);
    if (jVar != null) {
        jVar.removeAllViews();
        jVar.h();
        jVar.o();
        ViewGroup viewGroup = (ViewGroup) jVar.getParent();
        if (viewGroup != null) {
            viewGroup.removeView(jVar);
        }
        q.this.f560n.remove(i2);
        return;
    }
    p.a aVar = (p.a) q.this.f558l.get(i2);
    if (aVar != null) {
        aVar.removeAllViews();
        aVar.b();
        ViewGroup viewGroup2 = (ViewGroup) aVar.getParent();
        if (viewGroup2 != null) {
            viewGroup2.removeView(aVar);
        }
        q.this.f558l.remove(i2);
    }
}"
"<io.flutter.plugin.platform.q: void U(io.flutter.plugin.platform.r)>","/* JADX INFO: Access modifiers changed from: private */
public void U(r rVar) {
    io.flutter.plugin.editing.f fVar = this.f552f;
    if (fVar == null) {
        return;
    }
    fVar.u();
    rVar.g();
}"
"<io.flutter.plugin.platform.q: int j0(double,float)>","/* JADX INFO: Access modifiers changed from: private */
public int j0(double d2, float f2) {
    return (int) Math.round(d2 / f2);
}"
"<io.flutter.plugin.platform.q: void S(int,android.view.View,boolean)>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void S(int i2, View view, boolean z2) {
    if (z2) {
        this.f553g.d(i2);
        return;
    }
    io.flutter.plugin.editing.f fVar = this.f552f;
    if (fVar != null) {
        fVar.l(i2);
    }
}"
"<io.flutter.plugin.platform.q: boolean F(android.view.View)>","public boolean F(View view) {
    if (view == null || !this.f556j.containsKey(view.getContext())) {
        return false;
    }
    View view2 = this.f556j.get(view.getContext());
    if (view2 == view) {
        return true;
    }
    return view2.checkInputConnectionProxy(view);
}"
"<io.flutter.plugin.platform.q: void f(io.flutter.plugin.platform.q,int,android.view.View,boolean)>","// x.k.g
@Override
@TargetApi(17)
public void f(int i2, int i3) {
    View view;
    StringBuilder sb;
    String str;
    if (!q.n0(i3)) {
        throw new IllegalStateException(""Trying to set unknown direction value: "" + i3 + ""(view id: "" + i2 + "")"");
    }
    if (q.this.d(i2)) {
        view = q.this.f555i.get(Integer.valueOf(i2)).e();
    } else {
        f fVar = (f) q.this.f557k.get(i2);
        if (fVar == null) {
            sb = new StringBuilder();
            str = ""Setting direction to an unknown view with id: "";
            sb.append(str);
            sb.append(i2);
            l.b.b(""PlatformViewsController"", sb.toString());
        }
        view = fVar.getView();
    }
    if (view != null) {
        view.setLayoutDirection(i3);
        return;
    }
    sb = new StringBuilder();
    str = ""Setting direction to a null view with id: "";
    sb.append(str);
    sb.append(i2);
    l.b.b(""PlatformViewsController"", sb.toString());
}"
"<io.flutter.plugin.platform.q: int l0(double)>","/* JADX INFO: Access modifiers changed from: private */
public int l0(double d2) {
    return (int) Math.round(d2 * O());
}"
"<io.flutter.plugin.platform.q: void h0(boolean)>","public void h0(boolean z2) {
    this.f567u = z2;
}"
"<io.flutter.plugin.platform.q: void W()>","public void W() {
    this.f564r.clear();
    this.f565s.clear();
}"
"<io.flutter.plugin.platform.q: void B(android.content.Context,io.flutter.view.d,m.a)>","public void B(Context context, io.flutter.view.d dVar, m.a aVar) {
    if (this.f549c != null) {
        throw new AssertionError(""A PlatformViewsController can only be attached to a single output target.\nattach was called while the PlatformViewsController was already attached."");
    }
    this.f549c = context;
    this.f551e = dVar;
    x.k kVar = new x.k(aVar);
    this.f553g = kVar;
    kVar.e(this.f568v);
}"
"<io.flutter.plugin.platform.q: void e(io.flutter.plugin.platform.q)>","// x.k.g
@Override
public void e(int i2, double d2, double d3) {
    if (q.this.d(i2)) {
        return;
    }
    j jVar = (j) q.this.f560n.get(i2);
    if (jVar == null) {
        l.b.b(""PlatformViewsController"", ""Setting offset for unknown platform view with id: "" + i2);
        return;
    }
    int l02 = q.this.l0(d2);
    int l03 = q.this.l0(d3);
    FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) jVar.getLayoutParams();
    layoutParams.topMargin = l02;
    layoutParams.leftMargin = l03;
    jVar.j(layoutParams);
}"
"<io.flutter.plugin.platform.q: void D(w.a)>","public void D(w.a aVar) {
    this.f548b = new io.flutter.embedding.android.a(aVar, true);
}"
"<io.flutter.plugin.platform.q: void Y(int,int,int,int,int)>","public void Y(int i2, int i3, int i4, int i5, int i6) {
    if (this.f559m.get(i2) == null) {
        throw new IllegalStateException(""The overlay surface (id:"" + i2 + "") doesn't exist"");
    }
    R();
    b bVar = this.f559m.get(i2);
    if (bVar.getParent() == null) {
        this.f550d.addView(bVar);
    }
    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(i5, i6);
    layoutParams.leftMargin = i3;
    layoutParams.topMargin = i4;
    bVar.setLayoutParams(layoutParams);
    bVar.setVisibility(0);
    bVar.bringToFront();
    this.f564r.add(Integer.valueOf(i2));
}"
"<io.flutter.plugin.platform.q: void K()>","public void K() {
    for (int i2 = 0; i2 < this.f560n.size(); i2++) {
        this.f550d.removeView(this.f560n.valueAt(i2));
    }
    for (int i3 = 0; i3 < this.f558l.size(); i3++) {
        this.f550d.removeView(this.f558l.valueAt(i3));
    }
    I();
    g0();
    this.f550d = null;
    this.f562p = false;
    for (int i4 = 0; i4 < this.f557k.size(); i4++) {
        this.f557k.valueAt(i4).f();
    }
}"
"<io.flutter.plugin.platform.q: void Z(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)>","public void Z(int i2, int i3, int i4, int i5, int i6, int i7, int i8, FlutterMutatorsStack flutterMutatorsStack) {
    R();
    Q(i2);
    p.a aVar = this.f558l.get(i2);
    aVar.a(flutterMutatorsStack, i3, i4, i5, i6);
    aVar.setVisibility(0);
    aVar.bringToFront();
    FrameLayout.LayoutParams layoutParams = new FrameLayout.LayoutParams(i7, i8);
    View view = this.f557k.get(i2).getView();
    if (view != null) {
        view.setLayoutParams(layoutParams);
        view.bringToFront();
    }
    this.f565s.add(Integer.valueOf(i2));
}"
"<io.flutter.plugin.platform.q: float O()>","/* JADX INFO: Access modifiers changed from: private */
public float O() {
    return this.f549c.getResources().getDisplayMetrics().density;
}"
"<io.flutter.plugin.platform.q: void E(io.flutter.embedding.android.k)>","public void E(io.flutter.embedding.android.k kVar) {
    this.f550d = kVar;
    for (int i2 = 0; i2 < this.f560n.size(); i2++) {
        this.f550d.addView(this.f560n.valueAt(i2));
    }
    for (int i3 = 0; i3 < this.f558l.size(); i3++) {
        this.f550d.addView(this.f558l.valueAt(i3));
    }
    for (int i4 = 0; i4 < this.f557k.size(); i4++) {
        this.f557k.valueAt(i4).e(this.f550d);
    }
}"
"<io.flutter.plugin.platform.q: void Q(int)>","@TargetApi(19)
void Q(final int i2) {
    f fVar = this.f557k.get(i2);
    if (fVar == null) {
        throw new IllegalStateException(""Platform view hasn't been initialized from the platform view channel."");
    }
    if (this.f558l.get(i2) != null) {
        return;
    }
    View view = fVar.getView();
    if (view == null) {
        throw new IllegalStateException(""PlatformView#getView() returned null, but an Android view reference was expected."");
    }
    if (view.getParent() != null) {
        throw new IllegalStateException(""The Android view returned from PlatformView#getView() was already added to a parent view."");
    }
    Context context = this.f549c;
    p.a aVar = new p.a(context, context.getResources().getDisplayMetrics().density, this.f548b);
    aVar.setOnDescendantFocusChangeListener(new // from class: io.flutter.plugin.platform.l
    View.OnFocusChangeListener() {

        // android.view.View.OnFocusChangeListener
        @Override
        public final void onFocusChange(View view2, boolean z2) {
            q.this.S(i2, view2, z2);
        }
    });
    this.f558l.put(i2, aVar);
    view.setImportantForAccessibility(4);
    aVar.addView(view);
    this.f550d.addView(aVar);
}"
"<io.flutter.plugin.platform.q: void X()>","public void X() {
    M();
}"
"<io.flutter.plugin.platform.q: void m0(io.flutter.plugin.platform.r)>","/* JADX INFO: Access modifiers changed from: private */
public void m0(r rVar) {
    io.flutter.plugin.editing.f fVar = this.f552f;
    if (fVar == null) {
        return;
    }
    fVar.G();
    rVar.h();
}"
"<io.flutter.plugin.platform.q: void C(io.flutter.plugin.editing.f)>","public void C(io.flutter.plugin.editing.f fVar) {
    this.f552f = fVar;
}"
"<io.flutter.plugin.platform.q: void M()>","private void M() {
    while (this.f557k.size() > 0) {
        this.f568v.b(this.f557k.keyAt(0));
    }
}"
"<io.flutter.plugin.platform.q: boolean d(int)>","// io.flutter.plugin.platform.k
@Override
public boolean d(int i2) {
    return this.f555i.containsKey(Integer.valueOf(i2));
}"
"<io.flutter.plugin.platform.q: void a0()>","public void a0() {
    boolean z2 = false;
    if (this.f562p && this.f565s.isEmpty()) {
        this.f562p = false;
        this.f550d.B(new // from class: io.flutter.plugin.platform.m
        Runnable() {

            // java.lang.Runnable
            @Override
            public final void run() {
                q.this.T();
            }
        });
    } else {
        if (this.f562p && this.f550d.j()) {
            z2 = true;
        }
        N(z2);
    }
}"
"<io.flutter.plugin.platform.q: void g0()>","private void g0() {
    if (this.f550d == null) {
        l.b.b(""PlatformViewsController"", ""removeOverlaySurfaces called while flutter view is null"");
        return;
    }
    for (int i2 = 0; i2 < this.f559m.size(); i2++) {
        this.f550d.removeView(this.f559m.valueAt(i2));
    }
    this.f559m.clear();
}"
"<io.flutter.plugin.platform.q: void b0()>","public void b0() {
    M();
}"
"<io.flutter.plugin.platform.q: void V()>","public void V() {
}"
"<u0.r1: boolean L()>","// u0.v1
@Override
public boolean L() {
    return this.f1336e;
}"
"<u0.r1: boolean t0()>","private final boolean t0() {
    q O = O();
    r rVar = O instanceof r ? (r) O : null;
    if (rVar == null) {
        return false;
    }
    do {
        v1 z2 = rVar.z();
        if (z2.L()) {
            return true;
        }
        q O2 = z2.O();
        rVar = O2 instanceof r ? (r) O2 : null;
    } while (rVar != null);
    return false;
}"
"<u0.r1: boolean M()>","// u0.v1
@Override
public boolean M() {
    return true;
}"
"<kotlinx.coroutines.scheduling.g: void f()>","// kotlinx.coroutines.scheduling.j
@Override
public void f() {
}"
"<kotlinx.coroutines.scheduling.g: int b()>","// kotlinx.coroutines.scheduling.j
@Override
public int b() {
    return f1127e;
}"
"<u0.u0: void a(u0.t0,int)>","public static final <T> void a(t0<? super T> t0Var, int i2) {
    if (p0.a()) {
        if (!(i2 != -1)) {
            throw new AssertionError();
        }
    }
    g0.d<? super T> c2 = t0Var.c();
    boolean z2 = i2 == 4;
    if (z2 || !(c2 instanceof kotlinx.coroutines.internal.g) || b(i2) != b(t0Var.f1339f)) {
        d(t0Var, c2, z2);
        return;
    }
    f0 f0Var = ((kotlinx.coroutines.internal.g) c2).f1033g;
    g0.g context = c2.getContext();
    if (f0Var.o(context)) {
        f0Var.m(context, t0Var);
    } else {
        e(t0Var);
    }
}"
"<u0.u0: boolean b(int)>","public static final boolean b(int i2) {
    return i2 == 1 || i2 == 2;
}"
"<u0.u0: void d(u0.t0,g0.d,boolean)>","public static final <T> void d(t0<? super T> t0Var, g0.d<? super T> dVar, boolean z2) {
    Object e2;
    Object h2 = t0Var.h();
    Throwable d2 = t0Var.d(h2);
    if (d2 != null) {
        k.a aVar = d0.k.f144d;
        e2 = d0.l.a(d2);
    } else {
        k.a aVar2 = d0.k.f144d;
        e2 = t0Var.e(h2);
    }
    Object a2 = d0.k.a(e2);
    if (!z2) {
        dVar.resumeWith(a2);
        return;
    }
    kotlinx.coroutines.internal.g gVar = (kotlinx.coroutines.internal.g) dVar;
    g0.d<T> dVar2 = gVar.f1034h;
    Object obj = gVar.f1036j;
    g0.g context = dVar2.getContext();
    Object c2 = kotlinx.coroutines.internal.d0.c(context, obj);
    h2<?> e3 = c2 != kotlinx.coroutines.internal.d0.f1022a ? e0.e(dVar2, context, c2) : null;
    try {
        gVar.f1034h.resumeWith(a2);
        d0.q qVar = d0.q.f150a;
    } finally {
        if (e3 == null || e3.y0()) {
            kotlinx.coroutines.internal.d0.a(context, c2);
        }
    }
}"
"<u0.u0: boolean c(int)>","public static final boolean c(int i2) {
    return i2 == 2;
}"
"<u0.u0: void e(u0.t0)>","private static final void e(t0<?> t0Var) {
    z0 a2 = f2.f1292a.a();
    if (a2.w()) {
        a2.s(t0Var);
        return;
    }
    a2.u(true);
    try {
        d(t0Var, t0Var.c(), true);
        do {
        } while (a2.y());
    } finally {
        try {
        } finally {
        }
    }
}"
"<e0.i: int c(java.util.List)>","public static <T> int c(List<? extends T> list) {
    kotlin.jvm.internal.i.e(list, ""<this>"");
    return list.size() - 1;
}"
"<e0.i: void f()>","public static void f() {
    throw new ArithmeticException(""Index overflow has happened."");
}"
"<kotlin.jvm.internal.f: int getArity()>","int getArity();"
"<kotlinx.coroutines.internal.u: void b(n0.l,java.lang.Object,g0.g)>","public static final <E> void b(n0.l<? super E, d0.q> lVar, E e2, g0.g gVar) {
    h0 c2 = c(lVar, e2, null);
    if (c2 == null) {
        return;
    }
    u0.h0.a(gVar, c2);
}"
"<io.flutter.plugins.webviewflutter.j: io.flutter.plugin.platform.f a(android.content.Context,int,java.lang.Object)>","// io.flutter.plugin.platform.g
@Override
public io.flutter.plugin.platform.f a(Context context, int i2, Object obj) {
    io.flutter.plugin.platform.f fVar = (io.flutter.plugin.platform.f) this.f649b.h(((Integer) obj).intValue());
    if (fVar != null) {
        return fVar;
    }
    throw new IllegalStateException(""Unable to find WebView instance: "" + obj);
}"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setRequestedWithHeaderMode(int)>","void setRequestedWithHeaderMode(int i2);"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: int getRequestedWithHeaderMode()>","int getRequestedWithHeaderMode();"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: int getCacheMode()>","int getCacheMode();"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setBlockNetworkLoads(boolean)>","void setBlockNetworkLoads(boolean z2);"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setCacheMode(int)>","void setCacheMode(int i2);"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getAllowFileAccess()>","boolean getAllowFileAccess();"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getBlockNetworkLoads()>","boolean getBlockNetworkLoads();"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: boolean getAllowContentAccess()>","boolean getAllowContentAccess();"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setAllowContentAccess(boolean)>","void setAllowContentAccess(boolean z2);"
"<org.chromium.support_lib_boundary.ServiceWorkerWebSettingsBoundaryInterface: void setAllowFileAccess(boolean)>","void setAllowFileAccess(boolean z2);"
"<y.o: void h(java.io.ByteArrayOutputStream,int)>","protected static final void h(ByteArrayOutputStream byteArrayOutputStream, int i2) {
    int size = byteArrayOutputStream.size() % i2;
    if (size != 0) {
        for (int i3 = 0; i3 < i2 - size; i3++) {
            byteArrayOutputStream.write(0);
        }
    }
}"
"<y.o: byte[] d(java.nio.ByteBuffer)>","protected static final byte[] d(ByteBuffer byteBuffer) {
    byte[] bArr = new byte[e(byteBuffer)];
    byteBuffer.get(bArr);
    return bArr;
}"
"<y.o: void l(java.io.ByteArrayOutputStream,float)>","protected static final void l(ByteArrayOutputStream byteArrayOutputStream, float f2) {
    m(byteArrayOutputStream, Float.floatToIntBits(f2));
}"
"<y.o: void p(java.io.ByteArrayOutputStream,java.lang.Object)>","/* JADX INFO: Access modifiers changed from: protected */
public void p(ByteArrayOutputStream byteArrayOutputStream, Object obj) {
    int i2 = 0;
    if (obj == null || obj.equals(null)) {
        byteArrayOutputStream.write(0);
        return;
    }
    if (obj instanceof Boolean) {
        byteArrayOutputStream.write(((Boolean) obj).booleanValue() ? 1 : 2);
        return;
    }
    if (obj instanceof Number) {
        if ((obj instanceof Integer) || (obj instanceof Short) || (obj instanceof Byte)) {
            byteArrayOutputStream.write(3);
            m(byteArrayOutputStream, ((Number) obj).intValue());
            return;
        }
        if (obj instanceof Long) {
            byteArrayOutputStream.write(4);
            n(byteArrayOutputStream, ((Long) obj).longValue());
            return;
        }
        if ((obj instanceof Float) || (obj instanceof Double)) {
            byteArrayOutputStream.write(6);
            h(byteArrayOutputStream, 8);
            k(byteArrayOutputStream, ((Number) obj).doubleValue());
            return;
        } else {
            if (!(obj instanceof BigInteger)) {
                throw new IllegalArgumentException(""Unsupported Number type: "" + obj.getClass());
            }
            byteArrayOutputStream.write(5);
            i(byteArrayOutputStream, ((BigInteger) obj).toString(16).getBytes(f1690c));
            return;
        }
    }
    if (obj instanceof CharSequence) {
        byteArrayOutputStream.write(7);
        i(byteArrayOutputStream, obj.toString().getBytes(f1690c));
        return;
    }
    if (obj instanceof byte[]) {
        byteArrayOutputStream.write(8);
        i(byteArrayOutputStream, (byte[]) obj);
        return;
    }
    if (obj instanceof int[]) {
        byteArrayOutputStream.write(9);
        int[] iArr = (int[]) obj;
        o(byteArrayOutputStream, iArr.length);
        h(byteArrayOutputStream, 4);
        int length = iArr.length;
        while (i2 < length) {
            m(byteArrayOutputStream, iArr[i2]);
            i2++;
        }
        return;
    }
    if (obj instanceof long[]) {
        byteArrayOutputStream.write(10);
        long[] jArr = (long[]) obj;
        o(byteArrayOutputStream, jArr.length);
        h(byteArrayOutputStream, 8);
        int length2 = jArr.length;
        while (i2 < length2) {
            n(byteArrayOutputStream, jArr[i2]);
            i2++;
        }
        return;
    }
    if (obj instanceof double[]) {
        byteArrayOutputStream.write(11);
        double[] dArr = (double[]) obj;
        o(byteArrayOutputStream, dArr.length);
        h(byteArrayOutputStream, 8);
        int length3 = dArr.length;
        while (i2 < length3) {
            k(byteArrayOutputStream, dArr[i2]);
            i2++;
        }
        return;
    }
    if (obj instanceof List) {
        byteArrayOutputStream.write(12);
        List list = (List) obj;
        o(byteArrayOutputStream, list.size());
        Iterator it = list.iterator();
        while (it.hasNext()) {
            p(byteArrayOutputStream, it.next());
        }
        return;
    }
    if (obj instanceof Map) {
        byteArrayOutputStream.write(13);
        Map map = (Map) obj;
        o(byteArrayOutputStream, map.size());
        for (Map.Entry entry : map.entrySet()) {
            p(byteArrayOutputStream, entry.getKey());
            p(byteArrayOutputStream, entry.getValue());
        }
        return;
    }
    if (!(obj instanceof float[])) {
        throw new IllegalArgumentException(""Unsupported value: '"" + obj + ""' of type '"" + obj.getClass() + ""'"");
    }
    byteArrayOutputStream.write(14);
    float[] fArr = (float[]) obj;
    o(byteArrayOutputStream, fArr.length);
    h(byteArrayOutputStream, 4);
    int length4 = fArr.length;
    while (i2 < length4) {
        l(byteArrayOutputStream, fArr[i2]);
        i2++;
    }
}"
"<y.o: void n(java.io.ByteArrayOutputStream,long)>","protected static final void n(ByteArrayOutputStream byteArrayOutputStream, long j2) {
    if (f1689b) {
        byteArrayOutputStream.write((byte) j2);
        byteArrayOutputStream.write((byte) (j2 >>> 8));
        byteArrayOutputStream.write((byte) (j2 >>> 16));
        byteArrayOutputStream.write((byte) (j2 >>> 24));
        byteArrayOutputStream.write((byte) (j2 >>> 32));
        byteArrayOutputStream.write((byte) (j2 >>> 40));
        byteArrayOutputStream.write((byte) (j2 >>> 48));
        j2 >>>= 56;
    } else {
        byteArrayOutputStream.write((byte) (j2 >>> 56));
        byteArrayOutputStream.write((byte) (j2 >>> 48));
        byteArrayOutputStream.write((byte) (j2 >>> 40));
        byteArrayOutputStream.write((byte) (j2 >>> 32));
        byteArrayOutputStream.write((byte) (j2 >>> 24));
        byteArrayOutputStream.write((byte) (j2 >>> 16));
        byteArrayOutputStream.write((byte) (j2 >>> 8));
    }
    byteArrayOutputStream.write((byte) j2);
}"
"<y.o: void k(java.io.ByteArrayOutputStream,double)>","protected static final void k(ByteArrayOutputStream byteArrayOutputStream, double d2) {
    n(byteArrayOutputStream, Double.doubleToLongBits(d2));
}"
"<y.o: void c(java.nio.ByteBuffer,int)>","protected static final void c(ByteBuffer byteBuffer, int i2) {
    int position = byteBuffer.position() % i2;
    if (position != 0) {
        byteBuffer.position((byteBuffer.position() + i2) - position);
    }
}"
"<y.o: void o(java.io.ByteArrayOutputStream,int)>","protected static final void o(ByteArrayOutputStream byteArrayOutputStream, int i2) {
    if (i2 < 254) {
        byteArrayOutputStream.write(i2);
    } else if (i2 <= 65535) {
        byteArrayOutputStream.write(254);
        j(byteArrayOutputStream, i2);
    } else {
        byteArrayOutputStream.write(255);
        m(byteArrayOutputStream, i2);
    }
}"
"<y.o: int e(java.nio.ByteBuffer)>","protected static final int e(ByteBuffer byteBuffer) {
    if (!byteBuffer.hasRemaining()) {
        throw new IllegalArgumentException(""Message corrupted"");
    }
    int i2 = byteBuffer.get() & 255;
    return i2 < 254 ? i2 : i2 == 254 ? byteBuffer.getChar() : byteBuffer.getInt();
}"
"<y.o: void m(java.io.ByteArrayOutputStream,int)>","protected static final void m(ByteArrayOutputStream byteArrayOutputStream, int i2) {
    if (f1689b) {
        byteArrayOutputStream.write(i2);
        byteArrayOutputStream.write(i2 >>> 8);
        byteArrayOutputStream.write(i2 >>> 16);
        i2 >>>= 24;
    } else {
        byteArrayOutputStream.write(i2 >>> 24);
        byteArrayOutputStream.write(i2 >>> 16);
        byteArrayOutputStream.write(i2 >>> 8);
    }
    byteArrayOutputStream.write(i2);
}"
"<y.o: void j(java.io.ByteArrayOutputStream,int)>","protected static final void j(ByteArrayOutputStream byteArrayOutputStream, int i2) {
    if (f1689b) {
        byteArrayOutputStream.write(i2);
        i2 >>>= 8;
    } else {
        byteArrayOutputStream.write(i2 >>> 8);
    }
    byteArrayOutputStream.write(i2);
}"
"<y.o: void i(java.io.ByteArrayOutputStream,byte[])>","protected static final void i(ByteArrayOutputStream byteArrayOutputStream, byte[] bArr) {
    o(byteArrayOutputStream, bArr.length);
    byteArrayOutputStream.write(bArr, 0, bArr.length);
}"
"<kotlin.coroutines.jvm.internal.c: g0.g getContext()>","// g0.d
@Override
public g0.g getContext() {
    throw new IllegalStateException(""This continuation is already complete"".toString());
}"
"<kotlin.coroutines.jvm.internal.c: void resumeWith(java.lang.Object)>","// g0.d
@Override
public void resumeWith(Object obj) {
    throw new IllegalStateException(""This continuation is already complete"".toString());
}"
"<androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)>","// androidx.window.layout.ExtensionInterfaceCompat
@Override
public void onWindowLayoutChangeListenerRemoved(Activity activity) {
    SidecarInterface sidecarInterface;
    i.e(activity, ""activity"");
    IBinder activityWindowToken$window_release = Companion.getActivityWindowToken$window_release(activity);
    if (activityWindowToken$window_release == null) {
        return;
    }
    SidecarInterface sidecarInterface2 = this.sidecar;
    if (sidecarInterface2 != null) {
        sidecarInterface2.onWindowLayoutChangeListenerRemoved(activityWindowToken$window_release);
    }
    unregisterComponentCallback(activity);
    boolean z2 = this.windowListenerRegisteredContexts.size() == 1;
    this.windowListenerRegisteredContexts.remove(activityWindowToken$window_release);
    if (!z2 || (sidecarInterface = this.sidecar) == null) {
        return;
    }
    sidecarInterface.onDeviceStateListenersChanged(true);
}"
"<androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()>","/* JADX WARN: Removed duplicated region for block: B:10:0x002c A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:20:0x0057  */
/* JADX WARN: Removed duplicated region for block: B:23:0x0065 A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:27:0x0080  */
/* JADX WARN: Removed duplicated region for block: B:30:0x008e A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:34:0x00a9  */
/* JADX WARN: Removed duplicated region for block: B:37:0x00b6 A[Catch: all -> 0x019a, TRY_LEAVE, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:66:0x016a A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:68:0x00aa A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:73:0x0176 A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:75:0x0082 A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:7:0x001e  */
/* JADX WARN: Removed duplicated region for block: B:80:0x0182 A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:82:0x0059 A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:89:0x018e A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
/* JADX WARN: Removed duplicated region for block: B:91:0x0020 A[Catch: all -> 0x019a, TryCatch #1 {all -> 0x019a, blocks: (B:3:0x0002, B:8:0x0024, B:10:0x002c, B:13:0x0034, B:16:0x003c, B:21:0x005d, B:23:0x0065, B:28:0x0086, B:30:0x008e, B:35:0x00ae, B:37:0x00b6, B:40:0x00bc, B:41:0x00f2, B:43:0x010e, B:47:0x0112, B:49:0x0141, B:53:0x014a, B:54:0x0151, B:55:0x0152, B:56:0x0159, B:58:0x00bf, B:60:0x00ea, B:62:0x015a, B:63:0x0161, B:64:0x0162, B:65:0x0169, B:66:0x016a, B:67:0x0175, B:68:0x00aa, B:69:0x0094, B:72:0x009b, B:73:0x0176, B:74:0x0181, B:75:0x0082, B:76:0x006b, B:79:0x0072, B:80:0x0182, B:81:0x018d, B:82:0x0059, B:83:0x0042, B:86:0x0049, B:87:0x0039, B:88:0x0031, B:89:0x018e, B:90:0x0199, B:91:0x0020, B:92:0x0009, B:95:0x0010), top: B:2:0x0002, inners: #0, #2 }] */
// androidx.window.layout.ExtensionInterfaceCompat
@Override
@android.annotation.SuppressLint({ ""BanUncheckedReflection"" })
public /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
boolean validateExtensionInterface() {
    /*
            Method dump skipped, instructions count: 412
            To view this dump add '--comments-level debug' option
        */
    throw new UnsupportedOperationException(""Method not decompiled: androidx.window.layout.SidecarCompat.validateExtensionInterface():boolean"");
}"
"<androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)>","// androidx.window.layout.ExtensionInterfaceCompat
@Override
public void onWindowLayoutChangeListenerAdded(Activity activity) {
    i.e(activity, ""activity"");
    IBinder activityWindowToken$window_release = Companion.getActivityWindowToken$window_release(activity);
    if (activityWindowToken$window_release != null) {
        register(activityWindowToken$window_release, activity);
    } else {
        activity.getWindow().getDecorView().addOnAttachStateChangeListener(new FirstAttachAdapter(this, activity));
    }
}"
"<androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)>","private final void registerConfigurationChangeListener(final Activity activity) {
    if (this.componentCallbackMap.get(activity) == null) {
        ComponentCallbacks componentCallbacks = new // from class: androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
        ComponentCallbacks() {

            // android.content.ComponentCallbacks
            @Override
            public void onConfigurationChanged(Configuration newConfig) {
                i.e(newConfig, ""newConfig"");
                ExtensionInterfaceCompat.ExtensionCallbackInterface extensionCallbackInterface = SidecarCompat.this.extensionCallback;
                if (extensionCallbackInterface == null) {
                    return;
                }
                Activity activity2 = activity;
                extensionCallbackInterface.onWindowLayoutChanged(activity2, SidecarCompat.this.getWindowLayoutInfo(activity2));
            }

            // android.content.ComponentCallbacks
            @Override
            public void onLowMemory() {
            }
        };
        this.componentCallbackMap.put(activity, componentCallbacks);
        activity.registerComponentCallbacks(componentCallbacks);
    }
}"
"<androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)>","private final void unregisterComponentCallback(Activity activity) {
    activity.unregisterComponentCallbacks(this.componentCallbackMap.get(activity));
    this.componentCallbackMap.remove(activity);
}"
"<androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)>","// androidx.window.layout.ExtensionInterfaceCompat
@Override
public void setExtensionCallback(ExtensionInterfaceCompat.ExtensionCallbackInterface extensionCallback) {
    i.e(extensionCallback, ""extensionCallback"");
    this.extensionCallback = new DistinctElementCallback(extensionCallback);
    SidecarInterface sidecarInterface = this.sidecar;
    if (sidecarInterface == null) {
        return;
    }
    sidecarInterface.setSidecarCallback(new DistinctSidecarElementCallback(this.sidecarAdapter, new TranslatingCallback(this)));
}"
"<androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)>","public final void register(IBinder windowToken, Activity activity) {
    SidecarInterface sidecarInterface;
    i.e(windowToken, ""windowToken"");
    i.e(activity, ""activity"");
    this.windowListenerRegisteredContexts.put(windowToken, activity);
    SidecarInterface sidecarInterface2 = this.sidecar;
    if (sidecarInterface2 != null) {
        sidecarInterface2.onWindowLayoutChangeListenerAdded(windowToken);
    }
    if (this.windowListenerRegisteredContexts.size() == 1 && (sidecarInterface = this.sidecar) != null) {
        sidecarInterface.onDeviceStateListenersChanged(false);
    }
    ExtensionInterfaceCompat.ExtensionCallbackInterface extensionCallbackInterface = this.extensionCallback;
    if (extensionCallbackInterface != null) {
        extensionCallbackInterface.onWindowLayoutChanged(activity, getWindowLayoutInfo(activity));
    }
    registerConfigurationChangeListener(activity);
}"
"<io.flutter.plugin.platform.b: boolean onHoverEvent(android.view.MotionEvent)>","// android.view.View
@Override
public boolean onHoverEvent(MotionEvent motionEvent) {
    a aVar = this.f500g;
    if (aVar == null || !aVar.a(motionEvent, true)) {
        return super.onHoverEvent(motionEvent);
    }
    return true;
}"
"<io.flutter.plugins.webviewflutter.x2: void E(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError,io.flutter.plugins.webviewflutter.k$y$a)>","public void E(WebViewClient webViewClient, WebView webView, WebResourceRequest webResourceRequest, WebResourceError webResourceError, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    t(Long.valueOf(A(webViewClient)), g2, y(webResourceRequest), w(webResourceError), aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: void G(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,io.flutter.plugins.webviewflutter.k$y$a)>","public void G(WebViewClient webViewClient, WebView webView, WebResourceRequest webResourceRequest, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    u(Long.valueOf(A(webViewClient)), g2, y(webResourceRequest), aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: void D(android.webkit.WebViewClient,android.webkit.WebView,java.lang.Long,java.lang.String,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","public void D(WebViewClient webViewClient, WebView webView, Long l2, String str, String str2, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    s(Long.valueOf(A(webViewClient)), g2, l2, str, str2, aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: void F(android.webkit.WebViewClient,android.webkit.WebView,android.webkit.WebResourceRequest,j.e,io.flutter.plugins.webviewflutter.k$y$a)>","public void F(WebViewClient webViewClient, WebView webView, WebResourceRequest webResourceRequest, j.e eVar, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    t(Long.valueOf(A(webViewClient)), g2, y(webResourceRequest), x(eVar), aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: void C(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","public void C(WebViewClient webViewClient, WebView webView, String str, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    r(Long.valueOf(A(webViewClient)), g2, str, aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: void H(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","public void H(WebViewClient webViewClient, WebView webView, String str, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    v(Long.valueOf(A(webViewClient)), g2, str, aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: void z(android.webkit.WebViewClient,io.flutter.plugins.webviewflutter.k$y$a)>","public void z(WebViewClient webViewClient, k.y.a<Void> aVar) {
    if (this.f784b.f(webViewClient)) {
        h(Long.valueOf(A(webViewClient)), aVar);
    } else {
        aVar.a(null);
    }
}"
"<io.flutter.plugins.webviewflutter.x2: void B(android.webkit.WebViewClient,android.webkit.WebView,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","public void B(WebViewClient webViewClient, WebView webView, String str, k.y.a<Void> aVar) {
    Long g2 = this.f784b.g(webView);
    if (g2 == null) {
        throw new IllegalStateException(""Could not find identifier for WebView."");
    }
    q(Long.valueOf(A(webViewClient)), g2, str, aVar);
}"
"<io.flutter.plugins.webviewflutter.x2: long A(android.webkit.WebViewClient)>","private long A(WebViewClient webViewClient) {
    Long g2 = this.f784b.g(webViewClient);
    if (g2 != null) {
        return g2.longValue();
    }
    throw new IllegalStateException(""Could not find identifier for WebViewClient."");
}"
"<io.flutter.plugins.webviewflutter.u: void f(y.b,io.flutter.plugins.webviewflutter.k$h)>","public static void f(y.b bVar, final k.h hVar) {
    y.a aVar = new y.a(bVar, ""dev.flutter.pigeon.FlutterAssetManagerHostApi.list"", c());
    if (hVar != null) {
        aVar.e(new // from class: io.flutter.plugins.webviewflutter.t
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                u.d(k.h.this, obj, eVar);
            }
        });
    } else {
        aVar.e(null);
    }
    y.a aVar2 = new y.a(bVar, ""dev.flutter.pigeon.FlutterAssetManagerHostApi.getAssetFilePathByName"", c());
    if (hVar != null) {
        aVar2.e(new // from class: io.flutter.plugins.webviewflutter.s
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                u.e(k.h.this, obj, eVar);
            }
        });
    } else {
        aVar2.e(null);
    }
}"
"<io.flutter.plugins.webviewflutter.u: void d(io.flutter.plugins.webviewflutter.k$h,java.lang.Object,y.a$e)>","public static /* synthetic */
void d(k.h hVar, Object obj, a.e eVar) {
    Map b2;
    String str;
    HashMap hashMap = new HashMap();
    try {
        str = (String) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (str == null) {
        throw new NullPointerException(""pathArg unexpectedly null."");
    }
    hashMap.put(""result"", hVar.b(str));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.u: void a(io.flutter.plugins.webviewflutter.k$h,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    u.d(k.h.this, obj, eVar);
}"
"<io.flutter.plugins.webviewflutter.u: void e(io.flutter.plugins.webviewflutter.k$h,java.lang.Object,y.a$e)>","public static /* synthetic */
void e(k.h hVar, Object obj, a.e eVar) {
    Map b2;
    String str;
    HashMap hashMap = new HashMap();
    try {
        str = (String) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (str == null) {
        throw new NullPointerException(""nameArg unexpectedly null."");
    }
    hashMap.put(""result"", hVar.a(str));
    eVar.a(hashMap);
}"
"<androidx.lifecycle.ReflectiveGenericLifecycleObserver: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","// androidx.lifecycle.d
@Override
public void g(f fVar, c.a aVar) {
    throw null;
}"
"<kotlin.jvm.internal.m: r0.c b(java.lang.Class)>","public r0.c b(Class cls) {
    return new c(cls);
}"
"<kotlin.jvm.internal.m: r0.e a(kotlin.jvm.internal.g)>","public r0.e a(g gVar) {
    return gVar;
}"
"<kotlin.jvm.internal.m: r0.d c(java.lang.Class,java.lang.String)>","public r0.d c(Class cls, String str) {
    return new k(cls, str);
}"
"<io.flutter.plugins.webviewflutter.c: void b(android.hardware.display.DisplayManager)>","/* JADX INFO: Access modifiers changed from: package-private */
public void b(DisplayManager displayManager) {
    this.f596a = c(displayManager);
}"
"<io.flutter.plugins.webviewflutter.c: void a(android.hardware.display.DisplayManager)>","/* JADX INFO: Access modifiers changed from: package-private */
public void a(DisplayManager displayManager) {
    ArrayList<DisplayManager.DisplayListener> c2 = c(displayManager);
    c2.removeAll(this.f596a);
    if (c2.isEmpty()) {
        return;
    }
    Iterator<DisplayManager.DisplayListener> it = c2.iterator();
    while (it.hasNext()) {
        displayManager.unregisterDisplayListener(it.next());
        displayManager.registerDisplayListener(new a(c2, displayManager), null);
    }
}"
"<androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof ActivityStack)) {
        return false;
    }
    ActivityStack activityStack = (ActivityStack) obj;
    return (i.a(this.activities, activityStack.activities) || this.isEmpty == activityStack.isEmpty) ? false : true;
}"
"<androidx.window.embedding.ActivityStack: int hashCode()>","public int hashCode() {
    return ((this.isEmpty ? 1 : 0) * 31) + this.activities.hashCode();
}"
"<androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)>","public final boolean contains(Activity activity) {
    i.e(activity, ""activity"");
    return this.activities.contains(activity);
}"
"<androidx.window.embedding.ActivityStack: boolean isEmpty()>","public final boolean isEmpty() {
    return this.isEmpty;
}"
"<org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface: int getType()>","int getType();"
"<androidx.lifecycle.h: void h(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public void h(boolean z2) {
    if (z2 == this.f70a) {
        return;
    }
    this.f70a = z2;
    throw null;
}"
"<k.j: boolean b(java.lang.String)>","public static boolean b(String str) {
    return c(str, a.e());
}"
"<k.j: boolean c(java.lang.String,java.util.Collection)>","public static <T extends e> boolean c(String str, Collection<T> collection) {
    HashSet hashSet = new HashSet();
    for (T t2 : collection) {
        if (t2.a().equals(str)) {
            hashSet.add(t2);
        }
    }
    if (hashSet.isEmpty()) {
        throw new RuntimeException(""Unknown feature "" + str);
    }
    Iterator it = hashSet.iterator();
    while (it.hasNext()) {
        if (((e) it.next()).b()) {
            return true;
        }
    }
    return false;
}"
"<c0.d: boolean test(java.lang.Object)>","boolean test(T t2);"
"<w0.n: boolean s()>","// w0.a
@Override
protected final boolean s() {
    return true;
}"
"<w0.n: boolean r()>","// w0.a
@Override
protected final boolean r() {
    return true;
}"
"<io.flutter.view.e: void h()>","public void h() {
    this.f941b.setAsyncWaitForVsyncDelegate(this.f943d);
}"
"<g0.c: boolean b(g0.g$b)>","private final boolean b(g.b bVar) {
    return i.a(get(bVar.getKey()), bVar);
}"
"<g0.c: int m()>","private final int m() {
    int i2 = 2;
    c cVar = this;
    while (true) {
        g gVar = cVar.f164d;
        cVar = gVar instanceof c ? (c) gVar : null;
        if (cVar == null) {
            return i2;
        }
        i2++;
    }
}"
"<g0.c: boolean f(g0.c)>","private final boolean f(c cVar) {
    while (b(cVar.f165e)) {
        g gVar = cVar.f164d;
        if (!(gVar instanceof c)) {
            i.c(gVar, ""null cannot be cast to non-null type kotlin.coroutines.CoroutineContext.Element"");
            return b((g.b) gVar);
        }
        cVar = (c) gVar;
    }
    return false;
}"
"<g0.c: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this != obj) {
        if (obj instanceof c) {
            c cVar = (c) obj;
            if (cVar.m() != m() || !cVar.f(this)) {
            }
        }
        return false;
    }
    return true;
}"
"<g0.c: int hashCode()>","public int hashCode() {
    return this.f164d.hashCode() + this.f165e.hashCode();
}"
"<u0.z0: boolean y()>","public final boolean y() {
    t0<?> d2;
    kotlinx.coroutines.internal.a<t0<?>> aVar = this.f1379g;
    if (aVar == null || (d2 = aVar.d()) == null) {
        return false;
    }
    d2.run();
    return true;
}"
"<u0.z0: boolean x()>","public final boolean x() {
    kotlinx.coroutines.internal.a<t0<?>> aVar = this.f1379g;
    if (aVar == null) {
        return true;
    }
    return aVar.c();
}"
"<u0.z0: void q(boolean)>","public final void q(boolean z2) {
    long r2 = this.f1377e - r(z2);
    this.f1377e = r2;
    if (r2 > 0) {
        return;
    }
    if (p0.a()) {
        if (!(this.f1377e == 0)) {
            throw new AssertionError();
        }
    }
    if (this.f1378f) {
        z();
    }
}"
"<u0.z0: void s(u0.t0)>","public final void s(t0<?> t0Var) {
    kotlinx.coroutines.internal.a<t0<?>> aVar = this.f1379g;
    if (aVar == null) {
        aVar = new kotlinx.coroutines.internal.a<>();
        this.f1379g = aVar;
    }
    aVar.a(t0Var);
}"
"<u0.z0: void v(u0.z0,boolean,int,java.lang.Object)>","public static /* synthetic */
void v(z0 z0Var, boolean z2, int i2, Object obj) {
    if (obj != null) {
        throw new UnsupportedOperationException(""Super calls with default arguments not supported in this target, function: incrementUseCount"");
    }
    if ((i2 & 1) != 0) {
        z2 = false;
    }
    z0Var.u(z2);
}"
"<u0.z0: void z()>","protected void z() {
}"
"<u0.z0: long t()>","/* JADX INFO: Access modifiers changed from: protected */
public long t() {
    kotlinx.coroutines.internal.a<t0<?>> aVar = this.f1379g;
    return (aVar == null || aVar.c()) ? Long.MAX_VALUE : 0L;
}"
"<u0.z0: boolean w()>","public final boolean w() {
    return this.f1377e >= r(true);
}"
"<u0.z0: long r(boolean)>","private final long r(boolean z2) {
    return z2 ? 4294967296L : 1L;
}"
"<u0.z0: void u(boolean)>","public final void u(boolean z2) {
    this.f1377e += r(z2);
    if (z2) {
        return;
    }
    this.f1378f = true;
}"
"<b0.a: void g()>","public void g() {
    this.f128c.removeCallbacksAndMessages(null);
    this.f127b.shutdown();
}"
"<b0.a: void a(y.h,y.i$d)>","// y.i.c
@Override
public void a(h hVar, i.d dVar) {
    SharedPreferences.Editor putBoolean;
    String str = (String) hVar.a(""key"");
    try {
        String str2 = hVar.f1676a;
        char c2 = 65535;
        switch(str2.hashCode()) {
            case -1354815177:
                if (str2.equals(""commit"")) {
                    c2 = 5;
                    break;
                }
                break;
            case -1249367445:
                if (str2.equals(""getAll"")) {
                    c2 = 6;
                    break;
                }
                break;
            case -1096934831:
                if (str2.equals(""setStringList"")) {
                    c2 = 4;
                    break;
                }
                break;
            case -934610812:
                if (str2.equals(""remove"")) {
                    c2 = 7;
                    break;
                }
                break;
            case -905809875:
                if (str2.equals(""setInt"")) {
                    c2 = 2;
                    break;
                }
                break;
            case 94746189:
                if (str2.equals(""clear"")) {
                    c2 = '\b';
                    break;
                }
                break;
            case 155439827:
                if (str2.equals(""setDouble"")) {
                    c2 = 1;
                    break;
                }
                break;
            case 589412115:
                if (str2.equals(""setString"")) {
                    c2 = 3;
                    break;
                }
                break;
            case 1984457324:
                if (str2.equals(""setBool"")) {
                    c2 = 0;
                    break;
                }
                break;
        }
        switch(c2) {
            case 0:
                putBoolean = this.f126a.edit().putBoolean(str, ((Boolean) hVar.a(""value"")).booleanValue());
                break;
            case 1:
                String d2 = Double.toString(((Number) hVar.a(""value"")).doubleValue());
                putBoolean = this.f126a.edit().putString(str, ""VGhpcyBpcyB0aGUgcHJlZml4IGZvciBEb3VibGUu"" + d2);
                break;
            case 2:
                Number number = (Number) hVar.a(""value"");
                if (!(number instanceof BigInteger)) {
                    putBoolean = this.f126a.edit().putLong(str, number.longValue());
                    break;
                } else {
                    putBoolean = this.f126a.edit().putString(str, ""VGhpcyBpcyB0aGUgcHJlZml4IGZvciBCaWdJbnRlZ2Vy"" + ((BigInteger) number).toString(36));
                    break;
                }
            case 3:
                String str3 = (String) hVar.a(""value"");
                if (!str3.startsWith(""VGhpcyBpcyB0aGUgcHJlZml4IGZvciBhIGxpc3Qu"") && !str3.startsWith(""VGhpcyBpcyB0aGUgcHJlZml4IGZvciBCaWdJbnRlZ2Vy"") && !str3.startsWith(""VGhpcyBpcyB0aGUgcHJlZml4IGZvciBEb3VibGUu"")) {
                    putBoolean = this.f126a.edit().putString(str, str3);
                    break;
                }
                dVar.b(""StorageError"", ""This string cannot be stored as it clashes with special identifier prefixes."", null);
                return;
            case 4:
                List<String> list = (List) hVar.a(""value"");
                putBoolean = this.f126a.edit().putString(str, ""VGhpcyBpcyB0aGUgcHJlZml4IGZvciBhIGxpc3Qu"" + e(list));
                break;
            case R.styleable.SplitPairRule_splitMinWidth:
                /* 5 */
                dVar.a(Boolean.TRUE);
                return;
            case R.styleable.SplitPairRule_splitRatio:
                /* 6 */
                dVar.a(f());
                return;
            case 7:
                putBoolean = this.f126a.edit().remove(str);
                break;
            case '\b':
                Set<String> keySet = f().keySet();
                SharedPreferences.Editor edit = this.f126a.edit();
                Iterator<String> it = keySet.iterator();
                while (it.hasNext()) {
                    edit.remove(it.next());
                }
                c(edit, dVar);
                return;
            default:
                dVar.c();
                return;
        }
        c(putBoolean, dVar);
    } catch (IOException e2) {
        dVar.b(""IOException encountered"", hVar.f1676a, e2);
    }
}"
"<b0.a: void c(android.content.SharedPreferences$Editor,y.i$d)>","private void c(SharedPreferences.Editor editor, i.d dVar) {
    this.f127b.execute(new RunnableC0005a(editor, dVar));
}"
"<kotlinx.coroutines.scheduling.c: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public void m(g0.g gVar, Runnable runnable) {
    try {
        a.f(this.f1118j, runnable, null, false, 6, null);
    } catch (RejectedExecutionException unused) {
        r0.f1334j.m(gVar, runnable);
    }
}"
"<kotlinx.coroutines.scheduling.c: void r(java.lang.Runnable,kotlinx.coroutines.scheduling.j,boolean)>","public final void r(Runnable runnable, j jVar, boolean z2) {
    try {
        this.f1118j.e(runnable, jVar, z2);
    } catch (RejectedExecutionException unused) {
        r0.f1334j.G(this.f1118j.c(runnable, jVar));
    }
}"
"<u0.a: g0.g getContext()>","// g0.d
@Override
public final g0.g getContext() {
    return this.f1274e;
}"
"<u0.a: g0.g r()>","// u0.l0
@Override
public g0.g r() {
    return this.f1274e;
}"
"<u0.a: void v0(java.lang.Object)>","protected void v0(T t2) {
}"
"<u0.a: void R(java.lang.Throwable)>","// u0.v1
@Override
public final void R(Throwable th) {
    h0.a(this.f1274e, th);
}"
"<u0.a: void w0(u0.n0,java.lang.Object,n0.p)>","public final <R> void w0(n0 n0Var, R r2, n0.p<? super R, ? super g0.d<? super T>, ? extends Object> pVar) {
    n0Var.b(pVar, r2, this);
}"
"<u0.a: void d0(java.lang.Object)>","/* JADX WARN: Multi-variable type inference failed */
// u0.v1
@Override
protected final void d0(Object obj) {
    if (!(obj instanceof y)) {
        v0(obj);
    } else {
        y yVar = (y) obj;
        u0(yVar.f1373a, yVar.a());
    }
}"
"<u0.a: void resumeWith(java.lang.Object)>","// g0.d
@Override
public final void resumeWith(Object obj) {
    Object W = W(c0.d(obj, null, 1, null));
    if (W == w1.f1360b) {
        return;
    }
    t0(W);
}"
"<u0.a: boolean a()>","// u0.v1, u0.o1
@Override
public boolean a() {
    return super.a();
}"
"<u0.a: void u0(java.lang.Throwable,boolean)>","protected void u0(Throwable th, boolean z2) {
}"
"<u0.a: void t0(java.lang.Object)>","protected void t0(Object obj) {
    x(obj);
}"
"<org.chromium.support_lib_boundary.JsReplyProxyBoundaryInterface: void postMessage(java.lang.String)>","void postMessage(String str);"
"<u0.p: void y(java.lang.Throwable)>","// u0.a0
@Override
public void y(Throwable th) {
    l<?> lVar = this.f1327h;
    lVar.E(lVar.v(z()));
}"
"<x.n: void b(x.n$b)>","public void b(b bVar) {
    this.f1606b = bVar;
}"
"<e0.e: char g(char[])>","public static char g(char[] cArr) {
    kotlin.jvm.internal.i.e(cArr, ""<this>"");
    int length = cArr.length;
    if (length == 0) {
        throw new NoSuchElementException(""Array is empty."");
    }
    if (length == 1) {
        return cArr[0];
    }
    throw new IllegalArgumentException(""Array has more than one element."");
}"
"<x.k: void e(x.k$g)>","private void e(y.h hVar, i.d dVar) {
    try {
        k.this.f1551b.b(((Integer) ((Map) hVar.b()).get(""id"")).intValue());
        dVar.a(null);
    } catch (IllegalStateException e2) {
        dVar.b(""error"", k.c(e2), null);
    }
}"
"<x.k: void d(int)>","private void d(y.h hVar, i.d dVar) {
    Map map = (Map) hVar.b();
    boolean z2 = true;
    boolean z3 = map.containsKey(""hybrid"") && ((Boolean) map.get(""hybrid"")).booleanValue();
    ByteBuffer wrap = map.containsKey(""params"") ? ByteBuffer.wrap((byte[]) map.get(""params"")) : null;
    try {
        if (z3) {
            k.this.f1551b.i(new d(((Integer) map.get(""id"")).intValue(), (String) map.get(""viewType""), 0.0d, 0.0d, 0.0d, 0.0d, ((Integer) map.get(""direction"")).intValue(), d.a.HYBRID_ONLY, wrap));
        } else {
            if (!map.containsKey(""hybridFallback"") || !((Boolean) map.get(""hybridFallback"")).booleanValue()) {
                z2 = false;
            }
            long h2 = k.this.f1551b.h(new d(((Integer) map.get(""id"")).intValue(), (String) map.get(""viewType""), map.containsKey(""top"") ? ((Double) map.get(""top"")).doubleValue() : 0.0d, map.containsKey(""left"") ? ((Double) map.get(""left"")).doubleValue() : 0.0d, ((Double) map.get(""width"")).doubleValue(), ((Double) map.get(""height"")).doubleValue(), ((Integer) map.get(""direction"")).intValue(), z2 ? d.a.TEXTURE_WITH_HYBRID_FALLBACK : d.a.TEXTURE_WITH_VIRTUAL_FALLBACK, wrap));
            if (h2 != -2) {
                dVar.a(Long.valueOf(h2));
                return;
            } else if (!z2) {
                throw new AssertionError(""Platform view attempted to fall back to hybrid mode when not requested."");
            }
        }
        dVar.a(null);
    } catch (IllegalStateException e2) {
        dVar.b(""error"", k.c(e2), null);
    }
}"
"<kotlinx.coroutines.internal.g0: void b(g0.g)>","public final void b(g0.g gVar) {
    int length = this.f1039c.length - 1;
    if (length < 0) {
        return;
    }
    while (true) {
        int i2 = length - 1;
        e2<Object> e2Var = this.f1039c[length];
        kotlin.jvm.internal.i.b(e2Var);
        e2Var.d(gVar, this.f1038b[length]);
        if (i2 < 0) {
            return;
        } else {
            length = i2;
        }
    }
}"
"<kotlinx.coroutines.internal.g0: void a(u0.e2,java.lang.Object)>","public final void a(e2<?> e2Var, Object obj) {
    Object[] objArr = this.f1038b;
    int i2 = this.f1040d;
    objArr[i2] = obj;
    e2<Object>[] e2VarArr = this.f1039c;
    this.f1040d = i2 + 1;
    e2VarArr[i2] = e2Var;
}"
"<i0.a: void a(java.lang.Throwable,java.lang.Throwable)>","public void a(Throwable cause, Throwable exception) {
    i.e(cause, ""cause"");
    i.e(exception, ""exception"");
    Method method = C0010a.f185b;
    if (method != null) {
        method.invoke(cause, exception);
    }
}"
"<i0.a: o0.c b()>","public o0.c b() {
    return new o0.b();
}"
"<k.b: void a(android.webkit.WebMessagePort)>","public static void a(WebMessagePort webMessagePort) {
    webMessagePort.close();
}"
"<k.b: void l(android.webkit.WebMessagePort,j.d$a)>","public static void l(WebMessagePort webMessagePort, d.a aVar) {
    webMessagePort.setWebMessageCallback(new a(aVar));
}"
"<k.b: void i(android.webkit.WebView,long,j.f)>","public static void i(WebView webView, long j2, j.f fVar) {
    webView.postVisualStateCallback(j2, new c(fVar));
}"
"<k.b: void m(android.webkit.WebMessagePort,j.d$a,android.os.Handler)>","public static void m(WebMessagePort webMessagePort, d.a aVar, Handler handler) {
    webMessagePort.setWebMessageCallback(new C0019b(aVar), handler);
}"
"<k.b: void j(android.webkit.WebView,android.webkit.WebMessage,android.net.Uri)>","public static void j(WebView webView, WebMessage webMessage, Uri uri) {
    webView.postWebMessage(webMessage, uri);
}"
"<k.b: void k(android.webkit.WebSettings,boolean)>","public static void k(WebSettings webSettings, boolean z2) {
    webSettings.setOffscreenPreRaster(z2);
}"
"<k.b: int f(android.webkit.WebResourceError)>","public static int f(WebResourceError webResourceError) {
    return webResourceError.getErrorCode();
}"
"<k.b: void h(android.webkit.WebMessagePort,android.webkit.WebMessage)>","public static void h(WebMessagePort webMessagePort, WebMessage webMessage) {
    webMessagePort.postMessage(webMessage);
}"
"<k.b: j.c d(android.webkit.WebMessage)>","public static j.c d(WebMessage webMessage) {
    return new j.c(webMessage.getData(), h.e(webMessage.getPorts()));
}"
"<k.b: boolean g(android.webkit.WebSettings)>","public static boolean g(WebSettings webSettings) {
    return webSettings.getOffscreenPreRaster();
}"
"<io.flutter.plugins.webviewflutter.c0: void d(y.b,io.flutter.plugins.webviewflutter.k$q)>","public static void d(y.b bVar, final k.q qVar) {
    new y.a(bVar, ""dev.flutter.pigeon.WebChromeClientHostApi.create"", b()).e(qVar != null ? new // from class: io.flutter.plugins.webviewflutter.b0
    a.d() {

        // y.a.d
        @Override
        public final void a(Object obj, a.e eVar) {
            c0.c(k.q.this, obj, eVar);
        }
    } : null);
}"
"<io.flutter.plugins.webviewflutter.c0: void c(io.flutter.plugins.webviewflutter.k$q,java.lang.Object,y.a$e)>","public static /* synthetic */
void c(k.q qVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""webViewClientInstanceIdArg unexpectedly null."");
    }
    qVar.b(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.c0: void a(io.flutter.plugins.webviewflutter.k$q,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    c0.c(k.q.this, obj, eVar);
}"
"<androidx.lifecycle.d: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","void g(f fVar, c.a aVar);"
"<q.a: void a(q.a$b)>","void a(b bVar);"
"<q.a: void d(q.a$b)>","void d(b bVar);"
"<v.a: void a(io.flutter.embedding.engine.a)>","public static void a(io.flutter.embedding.engine.a aVar) {
    try {
        GeneratedPluginRegistrant.class.getDeclaredMethod(""registerWith"", io.flutter.embedding.engine.a.class).invoke(null, aVar);
    } catch (Exception e2) {
        b.b(""GeneratedPluginsRegister"", ""Tried to automatically register plugins with FlutterEngine ("" + aVar + "") but could not find or invoke the GeneratedPluginRegistrant."");
        b.c(""GeneratedPluginsRegister"", ""Received exception while registering"", e2);
    }
}"
"<io.flutter.embedding.android.b: void a(java.lang.Runnable)>","public void a(Drawable drawable, ImageView.ScaleType scaleType) {
    setScaleType(scaleType);
    setImageDrawable(drawable);
}"
"<io.flutter.embedding.android.b: boolean b()>","// io.flutter.embedding.android.x
@Override
public /* synthetic */
boolean b() {
    return w.a(this);
}"
"<y.l: boolean d(android.content.Intent)>","boolean d(Intent intent);"
"<androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)>","void setSplitRules(Set<? extends EmbeddingRule> set);"
"<androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)>","void setEmbeddingCallback(EmbeddingCallbackInterface embeddingCallbackInterface);"
"<io.flutter.plugin.platform.j: void k(android.view.View$OnFocusChangeListener)>","public void k(View.OnFocusChangeListener onFocusChangeListener) {
    o();
    ViewTreeObserver viewTreeObserver = getViewTreeObserver();
    if (viewTreeObserver.isAlive() && this.f526j == null) {
        c cVar = new c(onFocusChangeListener);
        this.f526j = cVar;
        viewTreeObserver.addOnGlobalFocusChangeListener(cVar);
    }
}"
"<io.flutter.plugin.platform.j: int d()>","public int d() {
    return this.f522f;
}"
"<io.flutter.plugin.platform.j: void m(io.flutter.embedding.android.a)>","public void m(io.flutter.embedding.android.a aVar) {
    this.f525i = aVar;
}"
"<io.flutter.plugin.platform.j: void g()>","private void g() {
    if (this.f529m) {
        Surface surface = this.f524h;
        if (surface != null) {
            surface.release();
        }
        this.f524h = c(this.f523g);
        this.f529m = false;
    }
}"
"<io.flutter.plugin.platform.j: void draw(android.graphics.Canvas)>","// android.view.View
@Override
@SuppressLint({ ""NewApi"" })
public void draw(Canvas canvas) {
    String str;
    Surface surface = this.f524h;
    if (surface == null) {
        super.draw(canvas);
        str = ""Platform view cannot be composed without a surface."";
    } else if (surface.isValid()) {
        SurfaceTexture surfaceTexture = this.f523g;
        if (surfaceTexture != null && !surfaceTexture.isReleased()) {
            if (!n()) {
                invalidate();
                return;
            }
            g();
            Canvas lockHardwareCanvas = this.f524h.lockHardwareCanvas();
            try {
                lockHardwareCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
                super.draw(lockHardwareCanvas);
                f();
                return;
            } finally {
                this.f524h.unlockCanvasAndPost(lockHardwareCanvas);
            }
        }
        str = ""Invalid texture. The platform view cannot be displayed."";
    } else {
        str = ""Invalid surface. The platform view cannot be displayed."";
    }
    l.b.b(""PlatformViewWrapper"", str);
}"
"<io.flutter.plugin.platform.j: void l(android.graphics.SurfaceTexture)>","@SuppressLint({ ""NewApi"" })
public void l(SurfaceTexture surfaceTexture) {
    int i2;
    if (Build.VERSION.SDK_INT < 23) {
        l.b.b(""PlatformViewWrapper"", ""Platform views cannot be displayed below API level 23. You can prevent this issue by setting `minSdkVersion: 23` in build.gradle."");
        return;
    }
    this.f523g = surfaceTexture;
    int i3 = this.f521e;
    if (i3 > 0 && (i2 = this.f522f) > 0) {
        surfaceTexture.setDefaultBufferSize(i3, i2);
    }
    Surface surface = this.f524h;
    if (surface != null) {
        surface.release();
    }
    Surface c2 = c(surfaceTexture);
    this.f524h = c2;
    Canvas lockHardwareCanvas = c2.lockHardwareCanvas();
    try {
        lockHardwareCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
        f();
    } finally {
        this.f524h.unlockCanvasAndPost(lockHardwareCanvas);
    }
}"
"<io.flutter.plugin.platform.j: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","// android.view.ViewGroup, android.view.ViewParent
@Override
public boolean requestSendAccessibilityEvent(View view, AccessibilityEvent accessibilityEvent) {
    View childAt = getChildAt(0);
    if (childAt == null || childAt.getImportantForAccessibility() != 4) {
        return super.requestSendAccessibilityEvent(view, accessibilityEvent);
    }
    return false;
}"
"<io.flutter.plugin.platform.j: void onDescendantInvalidated(android.view.View,android.view.View)>","// android.view.ViewGroup, android.view.ViewParent
@Override
@SuppressLint({ ""NewApi"" })
public void onDescendantInvalidated(View view, View view2) {
    super.onDescendantInvalidated(view, view2);
    invalidate();
}"
"<io.flutter.plugin.platform.j: void o()>","public void o() {
    ViewTreeObserver.OnGlobalFocusChangeListener onGlobalFocusChangeListener;
    ViewTreeObserver viewTreeObserver = getViewTreeObserver();
    if (!viewTreeObserver.isAlive() || (onGlobalFocusChangeListener = this.f526j) == null) {
        return;
    }
    this.f526j = null;
    viewTreeObserver.removeOnGlobalFocusChangeListener(onGlobalFocusChangeListener);
}"
"<io.flutter.plugin.platform.j: int e()>","public int e() {
    return this.f521e;
}"
"<io.flutter.plugin.platform.j: void h()>","public void h() {
    this.f523g = null;
    Surface surface = this.f524h;
    if (surface != null) {
        surface.release();
        this.f524h = null;
    }
}"
"<io.flutter.plugin.platform.j: void f()>","private void f() {
    if (Build.VERSION.SDK_INT == 29) {
        this.f527k.incrementAndGet();
    }
}"
"<io.flutter.plugin.platform.j: boolean n()>","private boolean n() {
    return Build.VERSION.SDK_INT != 29 || this.f527k.get() <= 0;
}"
"<io.flutter.plugin.platform.j: boolean onTouchEvent(android.view.MotionEvent)>","// android.view.View
@Override
@SuppressLint({ ""ClickableViewAccessibility"" })
public boolean onTouchEvent(MotionEvent motionEvent) {
    int i2;
    float f2;
    if (this.f525i == null) {
        return super.onTouchEvent(motionEvent);
    }
    Matrix matrix = new Matrix();
    int action = motionEvent.getAction();
    if (action == 0) {
        int i3 = this.f519c;
        this.f517a = i3;
        i2 = this.f520d;
        this.f518b = i2;
        f2 = i3;
    } else {
        if (action == 2) {
            matrix.postTranslate(this.f517a, this.f518b);
            this.f517a = this.f519c;
            this.f518b = this.f520d;
            return this.f525i.g(motionEvent, matrix);
        }
        f2 = this.f519c;
        i2 = this.f520d;
    }
    matrix.postTranslate(f2, i2);
    return this.f525i.g(motionEvent, matrix);
}"
"<io.flutter.plugin.platform.j: void j(android.widget.FrameLayout$LayoutParams)>","public void j(FrameLayout.LayoutParams layoutParams) {
    super.setLayoutParams(layoutParams);
    this.f519c = layoutParams.leftMargin;
    this.f520d = layoutParams.topMargin;
}"
"<io.flutter.plugin.platform.j: void i(int,int)>","public void i(int i2, int i3) {
    this.f521e = i2;
    this.f522f = i3;
    SurfaceTexture surfaceTexture = this.f523g;
    if (surfaceTexture != null) {
        surfaceTexture.setDefaultBufferSize(i2, i3);
    }
}"
"<io.flutter.plugin.platform.j: boolean onInterceptTouchEvent(android.view.MotionEvent)>","// android.view.ViewGroup
@Override
public boolean onInterceptTouchEvent(MotionEvent motionEvent) {
    return true;
}"
"<h.c: void a(java.lang.String,int)>","public static void a(String str, int i2) {
    Trace.beginAsyncSection(str, i2);
}"
"<h.c: void b(java.lang.String,int)>","public static void b(String str, int i2) {
    Trace.endAsyncSection(str, i2);
}"
"<androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.a)>","public static void write(RemoteActionCompat remoteActionCompat, a aVar) {
    aVar.x(false, false);
    aVar.M(remoteActionCompat.f26a, 1);
    aVar.D(remoteActionCompat.f27b, 2);
    aVar.D(remoteActionCompat.f28c, 3);
    aVar.H(remoteActionCompat.f29d, 4);
    aVar.z(remoteActionCompat.f30e, 5);
    aVar.z(remoteActionCompat.f31f, 6);
}"
"<io.flutter.plugin.editing.f: void F(android.view.View)>","void F(View view) {
    if (!k()) {
        s(view);
    } else {
        view.requestFocus();
        this.f460b.showSoftInput(view, 0);
    }
}"
"<io.flutter.plugin.editing.f: void j(android.util.SparseArray)>","// x.p.f
@Override
public void j() {
    if (f.this.f463e.f479a == c.a.PHYSICAL_DISPLAY_PLATFORM_VIEW) {
        f.this.y();
    } else {
        f fVar = f.this;
        fVar.s(fVar.f459a);
    }
}"
"<io.flutter.plugin.editing.f: boolean k()>","private boolean k() {
    p.c cVar;
    p.b bVar = this.f464f;
    return bVar == null || (cVar = bVar.f1620g) == null || cVar.f1630a != p.g.NONE;
}"
"<io.flutter.plugin.editing.f: int t(x.p$c,boolean,boolean,boolean,boolean,x.p$d)>","private static int t(p.c cVar, boolean z2, boolean z3, boolean z4, boolean z5, p.d dVar) {
    p.g gVar = cVar.f1630a;
    if (gVar == p.g.DATETIME) {
        return 4;
    }
    if (gVar == p.g.NUMBER) {
        int i2 = cVar.f1631b ? 4098 : 2;
        return cVar.f1632c ? i2 | 8192 : i2;
    }
    if (gVar == p.g.PHONE) {
        return 3;
    }
    if (gVar == p.g.NONE) {
        return 0;
    }
    int i3 = 1;
    if (gVar == p.g.MULTILINE) {
        i3 = 131073;
    } else if (gVar == p.g.EMAIL_ADDRESS) {
        i3 = 33;
    } else if (gVar == p.g.URL) {
        i3 = 17;
    } else if (gVar == p.g.VISIBLE_PASSWORD) {
        i3 = 145;
    } else if (gVar == p.g.NAME) {
        i3 = 97;
    } else if (gVar == p.g.POSTAL_ADDRESS) {
        i3 = 113;
    }
    if (z2) {
        i3 = i3 | 524288 | 128;
    } else {
        if (z3) {
            i3 |= 32768;
        }
        if (!z4) {
            i3 |= 524288;
        }
    }
    return dVar == p.d.CHARACTERS ? i3 | 4096 : dVar == p.d.WORDS ? i3 | 8192 : dVar == p.d.SENTENCES ? i3 | 16384 : i3;
}"
"<io.flutter.plugin.editing.f: void p()>","@SuppressLint({ ""NewApi"" })
public void p() {
    this.f469k.L();
    this.f462d.n(null);
    y();
    this.f466h.l(this);
    ImeSyncDeferringInsetsCallback imeSyncDeferringInsetsCallback = this.f471m;
    if (imeSyncDeferringInsetsCallback != null) {
        imeSyncDeferringInsetsCallback.remove();
    }
}"
"<io.flutter.plugin.editing.f: void E(android.view.View,x.p$e)>","void E(View view, p.e eVar) {
    p.e eVar2;
    if (!this.f467i && (eVar2 = this.f472n) != null && eVar2.b()) {
        boolean n2 = n(this.f472n, eVar);
        this.f467i = n2;
        if (n2) {
            l.b.e(""TextInputPlugin"", ""Composing region changed by the framework. Restarting the input method."");
        }
    }
    this.f472n = eVar;
    this.f466h.n(eVar);
    if (this.f467i) {
        this.f460b.restartInput(view);
        this.f467i = false;
    }
}"
"<io.flutter.plugin.editing.f: void C(int,boolean)>","/* JADX INFO: Access modifiers changed from: private */
public void C(int i2, boolean z2) {
    if (!z2) {
        this.f463e = new c(c.a.PHYSICAL_DISPLAY_PLATFORM_VIEW, i2);
        this.f468j = null;
    } else {
        this.f459a.requestFocus();
        this.f463e = new c(c.a.VIRTUAL_DISPLAY_PLATFORM_VIEW, i2);
        this.f460b.restartInput(this.f459a);
        this.f467i = false;
    }
}"
"<io.flutter.plugin.editing.f: void s(android.view.View)>","/* JADX INFO: Access modifiers changed from: private */
public void s(View view) {
    y();
    this.f460b.hideSoftInputFromWindow(view.getApplicationWindowToken(), 0);
}"
"<io.flutter.plugin.editing.f: void d(io.flutter.plugin.editing.f)>","// x.p.f
@Override
public void d() {
    f.this.m();
}"
"<io.flutter.plugin.editing.f: void i(io.flutter.plugin.editing.f,double,double,double[])>","// x.p.f
@Override
public void i(boolean z2) {
    if (Build.VERSION.SDK_INT < 26 || f.this.f461c == null) {
        return;
    }
    if (z2) {
        f.this.f461c.commit();
    } else {
        f.this.f461c.cancel();
    }
}"
"<io.flutter.plugin.editing.f: void h(io.flutter.plugin.editing.f,int,boolean)>","// x.p.f
@Override
public void h(double d2, double d3, double[] dArr) {
    f.this.A(d2, d3, dArr);
}"
"<io.flutter.plugin.editing.f: void y()>","/* JADX INFO: Access modifiers changed from: private */
public void y() {
    p.b bVar;
    if (Build.VERSION.SDK_INT < 26 || this.f461c == null || (bVar = this.f464f) == null || bVar.f1623j == null || !v()) {
        return;
    }
    this.f461c.notifyViewExited(this.f459a, this.f464f.f1623j.f1626a.hashCode());
}"
"<io.flutter.plugin.editing.f: void e(io.flutter.plugin.editing.f,android.view.View)>","// x.p.f
@Override
public void e() {
    f fVar = f.this;
    fVar.F(fVar.f459a);
}"
"<io.flutter.plugin.editing.f: boolean v()>","private boolean v() {
    return this.f465g != null;
}"
"<io.flutter.plugin.editing.f: void f(io.flutter.plugin.editing.f)>","// x.p.f
@Override
public void f(int i2, boolean z2) {
    f.this.C(i2, z2);
}"
"<io.flutter.plugin.editing.f: void A(double,double,double[])>","/* JADX INFO: Access modifiers changed from: private */
public void A(double d2, double d3, double[] dArr) {
    double[] dArr2 = new double[4];
    boolean z2 = dArr[3] == 0.0d && dArr[7] == 0.0d && dArr[15] == 1.0d;
    double d4 = dArr[12] / dArr[15];
    dArr2[1] = d4;
    dArr2[0] = d4;
    double d5 = dArr[13] / dArr[15];
    dArr2[3] = d5;
    dArr2[2] = d5;
    b bVar = new b(z2, dArr, dArr2);
    bVar.a(d2, 0.0d);
    bVar.a(d2, d3);
    bVar.a(0.0d, d3);
    Float valueOf = Float.valueOf(this.f459a.getContext().getResources().getDisplayMetrics().density);
    this.f470l = new Rect((int) (dArr2[0] * valueOf.floatValue()), (int) (dArr2[2] * valueOf.floatValue()), (int) Math.ceil(dArr2[1] * valueOf.floatValue()), (int) Math.ceil(dArr2[3] * valueOf.floatValue()));
}"
"<io.flutter.plugin.editing.f: boolean n(x.p$e,x.p$e)>","private static boolean n(p.e eVar, p.e eVar2) {
    int i2 = eVar.f1643e - eVar.f1642d;
    if (i2 != eVar2.f1643e - eVar2.f1642d) {
        return true;
    }
    for (int i3 = 0; i3 < i2; i3++) {
        if (eVar.f1639a.charAt(eVar.f1642d + i3) != eVar2.f1639a.charAt(eVar2.f1642d + i3)) {
            return true;
        }
    }
    return false;
}"
"<io.flutter.plugin.editing.f: void G()>","public void G() {
    if (this.f463e.f479a == c.a.VIRTUAL_DISPLAY_PLATFORM_VIEW) {
        this.f473o = false;
    }
}"
"<io.flutter.plugin.editing.f: void a(boolean,boolean,boolean)>","// x.p.f
@Override
public void a(String str, Bundle bundle) {
    f.this.B(str, bundle);
}"
"<io.flutter.plugin.editing.f: void D(int,x.p$b)>","void D(int i2, p.b bVar) {
    y();
    this.f464f = bVar;
    this.f463e = k() ? new c(c.a.FRAMEWORK_CLIENT, i2) : new c(c.a.NO_TARGET, i2);
    this.f466h.l(this);
    p.b.a aVar = bVar.f1623j;
    this.f466h = new io.flutter.plugin.editing.c(aVar != null ? aVar.f1628c : null, this.f459a);
    H(bVar);
    this.f467i = true;
    G();
    this.f470l = null;
    this.f466h.a(this);
}"
"<io.flutter.plugin.editing.f: boolean r(android.view.KeyEvent)>","public boolean r(KeyEvent keyEvent) {
    InputConnection inputConnection;
    if (!q().isAcceptingText() || (inputConnection = this.f468j) == null) {
        return false;
    }
    return inputConnection instanceof io.flutter.plugin.editing.b ? ((io.flutter.plugin.editing.b) inputConnection).f(keyEvent) : inputConnection.sendKeyEvent(keyEvent);
}"
"<io.flutter.plugin.editing.f: void B(java.lang.String,android.os.Bundle)>","public void B(String str, Bundle bundle) {
    this.f460b.sendAppPrivateCommand(this.f459a, str, bundle);
}"
"<io.flutter.plugin.editing.f: void w(java.lang.String)>","private void w(String str) {
    if (Build.VERSION.SDK_INT < 26 || this.f461c == null || !v()) {
        return;
    }
    this.f461c.notifyValueChanged(this.f459a, this.f464f.f1623j.f1626a.hashCode(), AutofillValue.forText(str));
}"
"<io.flutter.plugin.editing.f: void H(x.p$b)>","private void H(p.b bVar) {
    if (Build.VERSION.SDK_INT < 26) {
        return;
    }
    if (bVar == null || bVar.f1623j == null) {
        this.f465g = null;
        return;
    }
    p.b[] bVarArr = bVar.f1625l;
    SparseArray<p.b> sparseArray = new SparseArray<>();
    this.f465g = sparseArray;
    if (bVarArr == null) {
        sparseArray.put(bVar.f1623j.f1626a.hashCode(), bVar);
        return;
    }
    for (p.b bVar2 : bVarArr) {
        p.b.a aVar = bVar2.f1623j;
        if (aVar != null) {
            this.f465g.put(aVar.f1626a.hashCode(), bVar2);
            this.f461c.notifyValueChanged(this.f459a, aVar.f1626a.hashCode(), AutofillValue.forText(aVar.f1628c.f1639a));
        }
    }
}"
"<io.flutter.plugin.editing.f: void m()>","void m() {
    if (this.f463e.f479a == c.a.VIRTUAL_DISPLAY_PLATFORM_VIEW) {
        return;
    }
    this.f466h.l(this);
    y();
    this.f464f = null;
    H(null);
    this.f463e = new c(c.a.NO_TARGET, 0);
    G();
    this.f470l = null;
}"
"<io.flutter.plugin.editing.f: void l(int)>","public void l(int i2) {
    c cVar = this.f463e;
    c.a aVar = cVar.f479a;
    if ((aVar == c.a.VIRTUAL_DISPLAY_PLATFORM_VIEW || aVar == c.a.PHYSICAL_DISPLAY_PLATFORM_VIEW) && cVar.f480b == i2) {
        this.f463e = new c(c.a.NO_TARGET, 0);
        y();
        this.f460b.hideSoftInputFromWindow(this.f459a.getApplicationWindowToken(), 0);
        this.f460b.restartInput(this.f459a);
        this.f467i = false;
    }
}"
"<io.flutter.plugin.editing.f: void z(android.view.ViewStructure,int)>","public void z(ViewStructure viewStructure, int i2) {
    ViewStructure viewStructure2;
    CharSequence charSequence;
    Rect rect;
    if (Build.VERSION.SDK_INT < 26 || !v()) {
        return;
    }
    String str = this.f464f.f1623j.f1626a;
    AutofillId autofillId = viewStructure.getAutofillId();
    for (int i3 = 0; i3 < this.f465g.size(); i3++) {
        int keyAt = this.f465g.keyAt(i3);
        p.b.a aVar = this.f465g.valueAt(i3).f1623j;
        if (aVar != null) {
            viewStructure.addChildCount(1);
            ViewStructure newChild = viewStructure.newChild(i3);
            newChild.setAutofillId(autofillId, keyAt);
            String[] strArr = aVar.f1627b;
            if (strArr.length > 0) {
                newChild.setAutofillHints(strArr);
            }
            newChild.setAutofillType(1);
            newChild.setVisibility(0);
            String str2 = aVar.f1629d;
            if (str2 != null) {
                newChild.setHint(str2);
            }
            if (str.hashCode() != keyAt || (rect = this.f470l) == null) {
                viewStructure2 = newChild;
                viewStructure2.setDimens(0, 0, 0, 0, 1, 1);
                charSequence = aVar.f1628c.f1639a;
            } else {
                viewStructure2 = newChild;
                newChild.setDimens(rect.left, rect.top, 0, 0, rect.width(), this.f470l.height());
                charSequence = this.f466h;
            }
            viewStructure2.setAutofillValue(AutofillValue.forText(charSequence));
        }
    }
}"
"<io.flutter.plugin.editing.f: void u()>","public void u() {
    if (this.f463e.f479a == c.a.VIRTUAL_DISPLAY_PLATFORM_VIEW) {
        this.f473o = true;
    }
}"
"<io.flutter.plugin.editing.f: void x()>","/* JADX INFO: Access modifiers changed from: private */
public void x() {
    if (Build.VERSION.SDK_INT < 26 || this.f461c == null || !v()) {
        return;
    }
    String str = this.f464f.f1623j.f1626a;
    int[] iArr = new int[2];
    this.f459a.getLocationOnScreen(iArr);
    Rect rect = new Rect(this.f470l);
    rect.offset(iArr[0], iArr[1]);
    this.f461c.notifyViewEntered(this.f459a, str.hashCode(), rect);
}"
"<k.c: void e(android.webkit.SafeBrowsingResponse,boolean)>","public static void e(SafeBrowsingResponse safeBrowsingResponse, boolean z2) {
    safeBrowsingResponse.showInterstitial(z2);
}"
"<k.c: void d(java.util.List,android.webkit.ValueCallback)>","public static void d(List<String> list, ValueCallback<Boolean> valueCallback) {
    WebView.setSafeBrowsingWhitelist(list, valueCallback);
}"
"<k.c: void a(android.webkit.SafeBrowsingResponse,boolean)>","public static void a(SafeBrowsingResponse safeBrowsingResponse, boolean z2) {
    safeBrowsingResponse.backToSafety(z2);
}"
"<k.c: void c(android.webkit.SafeBrowsingResponse,boolean)>","public static void c(SafeBrowsingResponse safeBrowsingResponse, boolean z2) {
    safeBrowsingResponse.proceed(z2);
}"
"<k.c: void f(android.content.Context,android.webkit.ValueCallback)>","public static void f(Context context, ValueCallback<Boolean> valueCallback) {
    WebView.startSafeBrowsing(context, valueCallback);
}"
"<androidx.window.layout.WindowMetrics: int hashCode()>","public int hashCode() {
    return this._bounds.hashCode();
}"
"<androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (obj == null || !i.a(WindowMetrics.class, obj.getClass())) {
        return false;
    }
    return i.a(this._bounds, ((WindowMetrics) obj)._bounds);
}"
"<w0.r: boolean s()>","// w0.a
@Override
protected final boolean s() {
    return true;
}"
"<w0.r: boolean r()>","// w0.a
@Override
protected final boolean r() {
    return true;
}"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: void setSupportLibraryVersion(java.lang.String)>","void setSupportLibraryVersion(String str);"
"<f.a: void b(boolean)>","// f.a.e
@Override
public void b(boolean z2) {
    if (!z2) {
        e(8192);
        return;
    }
    f(67108864);
    d(Integer.MIN_VALUE);
    c(8192);
}"
"<f.a: void a(boolean)>","// f.a.e
@Override
public void a(boolean z2) {
    if (!z2) {
        e(16);
        return;
    }
    f(134217728);
    d(Integer.MIN_VALUE);
    c(16);
}"
"<androidx.versionedparcelable.a: boolean h(boolean,int)>","public boolean h(boolean z2, int i2) {
    return !m(i2) ? z2 : g();
}"
"<androidx.versionedparcelable.a: void D(java.lang.CharSequence,int)>","public void D(CharSequence charSequence, int i2) {
    w(i2);
    C(charSequence);
}"
"<androidx.versionedparcelable.a: boolean g()>","protected abstract boolean g();"
"<androidx.versionedparcelable.a: byte[] j(byte[],int)>","public byte[] j(byte[] bArr, int i2) {
    return !m(i2) ? bArr : i();
}"
"<androidx.versionedparcelable.a: void F(int,int)>","public void F(int i2, int i3) {
    w(i3);
    E(i2);
}"
"<androidx.versionedparcelable.a: void M(i.a,int)>","public void M(i.a aVar, int i2) {
    w(i2);
    L(aVar);
}"
"<androidx.versionedparcelable.a: void w(int)>","protected abstract void w(int i2);"
"<androidx.versionedparcelable.a: void L(i.a)>","/* JADX INFO: Access modifiers changed from: protected */
public void L(i.a aVar) {
    if (aVar == null) {
        I(null);
        return;
    }
    N(aVar);
    a b2 = b();
    K(aVar, b2);
    b2.a();
}"
"<androidx.versionedparcelable.a: void z(boolean,int)>","public void z(boolean z2, int i2) {
    w(i2);
    y(z2);
}"
"<androidx.versionedparcelable.a: int o()>","protected abstract int o();"
"<androidx.versionedparcelable.a: boolean f()>","public boolean f() {
    return false;
}"
"<androidx.versionedparcelable.a: void A(byte[])>","protected abstract void A(byte[] bArr);"
"<androidx.versionedparcelable.a: byte[] i()>","protected abstract byte[] i();"
"<androidx.versionedparcelable.a: int p(int,int)>","public int p(int i2, int i3) {
    return !m(i3) ? i2 : o();
}"
"<androidx.versionedparcelable.a: void C(java.lang.CharSequence)>","protected abstract void C(CharSequence charSequence);"
"<androidx.versionedparcelable.a: void B(byte[],int)>","public void B(byte[] bArr, int i2) {
    w(i2);
    A(bArr);
}"
"<androidx.versionedparcelable.a: void G(android.os.Parcelable)>","protected abstract void G(Parcelable parcelable);"
"<androidx.versionedparcelable.a: void J(java.lang.String,int)>","public void J(String str, int i2) {
    w(i2);
    I(str);
}"
"<androidx.versionedparcelable.a: void E(int)>","protected abstract void E(int i2);"
"<androidx.versionedparcelable.a: void x(boolean,boolean)>","public void x(boolean z2, boolean z3) {
}"
"<androidx.versionedparcelable.a: void y(boolean)>","protected abstract void y(boolean z2);"
"<androidx.versionedparcelable.a: void N(i.a)>","/* JADX WARN: Multi-variable type inference failed */
private void N(i.a aVar) {
    try {
        I(c(aVar.getClass()).getName());
    } catch (ClassNotFoundException e2) {
        throw new RuntimeException(aVar.getClass().getSimpleName() + "" does not have a Parcelizer"", e2);
    }
}"
"<androidx.versionedparcelable.a: void H(android.os.Parcelable,int)>","public void H(Parcelable parcelable, int i2) {
    w(i2);
    G(parcelable);
}"
"<androidx.versionedparcelable.a: void a()>","protected abstract void a();"
"<androidx.versionedparcelable.a: void I(java.lang.String)>","protected abstract void I(String str);"
"<androidx.versionedparcelable.a: boolean m(int)>","protected abstract boolean m(int i2);"
"<androidx.versionedparcelable.a: void K(i.a,androidx.versionedparcelable.a)>","protected <T extends i.a> void K(T t2, a aVar) {
    try {
        e(t2.getClass()).invoke(null, t2, aVar);
    } catch (ClassNotFoundException e2) {
        throw new RuntimeException(""VersionedParcel encountered ClassNotFoundException"", e2);
    } catch (IllegalAccessException e3) {
        throw new RuntimeException(""VersionedParcel encountered IllegalAccessException"", e3);
    } catch (NoSuchMethodException e4) {
        throw new RuntimeException(""VersionedParcel encountered NoSuchMethodException"", e4);
    } catch (InvocationTargetException e5) {
        if (!(e5.getCause() instanceof RuntimeException)) {
            throw new RuntimeException(""VersionedParcel encountered InvocationTargetException"", e5);
        }
        throw ((RuntimeException) e5.getCause());
    }
}"
"<kotlinx.coroutines.internal.f: g0.g r()>","// u0.l0
@Override
public g0.g r() {
    return this.f1031d;
}"
"<androidx.core.graphics.drawable.IconCompat: void c()>","public void c() {
    Parcelable parcelable;
    this.f42h = PorterDuff.Mode.valueOf(this.f43i);
    switch(this.f35a) {
        case -1:
            parcelable = this.f38d;
            if (parcelable == null) {
                throw new IllegalArgumentException(""Invalid icon"");
            }
            break;
        case 0:
        default:
            return;
        case 1:
        case R.styleable.SplitPairRule_splitMinWidth:
            /* 5 */
            parcelable = this.f38d;
            if (parcelable == null) {
                byte[] bArr = this.f37c;
                this.f36b = bArr;
                this.f35a = 3;
                this.f39e = 0;
                this.f40f = bArr.length;
                return;
            }
            break;
        case 2:
        case 4:
        case R.styleable.SplitPairRule_splitRatio:
            /* 6 */
            String str = new String(this.f37c, Charset.forName(""UTF-16""));
            this.f36b = str;
            if (this.f35a == 2 && this.f44j == null) {
                this.f44j = str.split("":"", -1)[0];
                return;
            }
            return;
        case 3:
            this.f36b = this.f37c;
            return;
    }
    this.f36b = parcelable;
}"
"<androidx.core.graphics.drawable.IconCompat: int a()>","public int a() {
    int i2 = this.f35a;
    if (i2 == -1 && Build.VERSION.SDK_INT >= 23) {
        return b((Icon) this.f36b);
    }
    if (i2 == 2) {
        return this.f39e;
    }
    throw new IllegalStateException(""called getResId() on "" + this);
}"
"<androidx.core.graphics.drawable.IconCompat: int b(android.graphics.drawable.Icon)>","private static int b(Icon icon) {
    if (Build.VERSION.SDK_INT >= 28) {
        return icon.getResId();
    }
    try {
        return ((Integer) icon.getClass().getMethod(""getResId"", new Class[0]).invoke(icon, new Object[0])).intValue();
    } catch (IllegalAccessException e2) {
        Log.e(""IconCompat"", ""Unable to get icon resource"", e2);
        return 0;
    } catch (NoSuchMethodException e3) {
        Log.e(""IconCompat"", ""Unable to get icon resource"", e3);
        return 0;
    } catch (InvocationTargetException e4) {
        Log.e(""IconCompat"", ""Unable to get icon resource"", e4);
        return 0;
    }
}"
"<androidx.core.graphics.drawable.IconCompat: void d(boolean)>","public void d(boolean z2) {
    this.f43i = this.f42h.name();
    switch(this.f35a) {
        case -1:
            if (z2) {
                throw new IllegalArgumentException(""Can't serialize Icon created with IconCompat#createFromIcon"");
            }
            break;
        case 0:
        default:
            return;
        case 1:
        case R.styleable.SplitPairRule_splitMinWidth:
            /* 5 */
            if (z2) {
                Bitmap bitmap = (Bitmap) this.f36b;
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                bitmap.compress(Bitmap.CompressFormat.PNG, 90, byteArrayOutputStream);
                this.f37c = byteArrayOutputStream.toByteArray();
                return;
            }
            break;
        case 2:
            this.f37c = ((String) this.f36b).getBytes(Charset.forName(""UTF-16""));
            return;
        case 3:
            this.f37c = (byte[]) this.f36b;
            return;
        case 4:
        case R.styleable.SplitPairRule_splitRatio:
            /* 6 */
            this.f37c = this.f36b.toString().getBytes(Charset.forName(""UTF-16""));
            return;
    }
    this.f38d = (Parcelable) this.f36b;
}"
"<androidx.window.embedding.SplitPlaceholderRule: int hashCode()>","// androidx.window.embedding.SplitRule
@Override
public int hashCode() {
    return (((super.hashCode() * 31) + this.filters.hashCode()) * 31) + this.placeholderIntent.hashCode();
}"
"<androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)>","// androidx.window.embedding.SplitRule
@Override
public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof SplitPlaceholderRule) || !super.equals(obj) || !super.equals(obj)) {
        return false;
    }
    SplitPlaceholderRule splitPlaceholderRule = (SplitPlaceholderRule) obj;
    return i.a(this.filters, splitPlaceholderRule.filters) && i.a(this.placeholderIntent, splitPlaceholderRule.placeholderIntent);
}"
"<org.chromium.support_lib_boundary.WebAuthnCallbackBoundaryInterface: void onResult(int,android.content.Intent)>","void onResult(int i2, Intent intent);"
"<u0.k0: int hashCode()>","public int hashCode() {
    return this.f1306d.hashCode();
}"
"<u0.k0: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    return (obj instanceof k0) && kotlin.jvm.internal.i.a(this.f1306d, ((k0) obj).f1306d);
}"
"<n.a: boolean d(int,java.lang.String)>","boolean d(int i2, String str);"
"<n.a: void f(io.flutter.embedding.engine.FlutterJNI)>","void f(FlutterJNI flutterJNI);"
"<n.a: void a(x.b)>","void a(b bVar);"
"<n.a: void c(int,java.lang.String)>","void c(int i2, String str);"
"<n.a: void e()>","void e();"
"<t0.m: boolean j(java.lang.String,java.lang.String,boolean)>","public static final boolean j(String str, String suffix, boolean z2) {
    kotlin.jvm.internal.i.e(str, ""<this>"");
    kotlin.jvm.internal.i.e(suffix, ""suffix"");
    return !z2 ? str.endsWith(suffix) : m(str, str.length() - suffix.length(), suffix, 0, suffix.length(), true);
}"
"<t0.m: boolean n(java.lang.String,java.lang.String,boolean)>","public static final boolean n(String str, String prefix, boolean z2) {
    kotlin.jvm.internal.i.e(str, ""<this>"");
    kotlin.jvm.internal.i.e(prefix, ""prefix"");
    return !z2 ? str.startsWith(prefix) : m(str, 0, prefix, 0, prefix.length(), z2);
}"
"<t0.m: boolean l(java.lang.CharSequence)>","public static boolean l(CharSequence charSequence) {
    boolean z2;
    kotlin.jvm.internal.i.e(charSequence, ""<this>"");
    if (charSequence.length() != 0) {
        Iterable t2 = n.t(charSequence);
        if (!(t2 instanceof Collection) || !((Collection) t2).isEmpty()) {
            Iterator it = t2.iterator();
            while (it.hasNext()) {
                if (!a.c(charSequence.charAt(((v) it).a()))) {
                    z2 = false;
                    break;
                }
            }
        }
        z2 = true;
        if (!z2) {
            return false;
        }
    }
    return true;
}"
"<t0.m: boolean k(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>","public static /* synthetic */
boolean k(String str, String str2, boolean z2, int i2, Object obj) {
    if ((i2 & 2) != 0) {
        z2 = false;
    }
    return j(str, str2, z2);
}"
"<t0.m: boolean o(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>","public static /* synthetic */
boolean o(String str, String str2, boolean z2, int i2, Object obj) {
    if ((i2 & 2) != 0) {
        z2 = false;
    }
    return n(str, str2, z2);
}"
"<t0.m: boolean m(java.lang.String,int,java.lang.String,int,int,boolean)>","public static final boolean m(String str, int i2, String other, int i3, int i4, boolean z2) {
    kotlin.jvm.internal.i.e(str, ""<this>"");
    kotlin.jvm.internal.i.e(other, ""other"");
    return !z2 ? str.regionMatches(i2, other, i3, i4) : str.regionMatches(z2, i2, other, i3, i4);
}"
"<kotlin.jvm.internal.i: void d(java.lang.Object,java.lang.String)>","public static void d(Object obj, String str) {
    if (obj != null) {
        return;
    }
    throw ((NullPointerException) h(new NullPointerException(str + "" must not be null"")));
}"
"<kotlin.jvm.internal.i: void m(java.lang.String)>","private static void m(String str) {
    throw ((NullPointerException) h(new NullPointerException(g(str))));
}"
"<kotlin.jvm.internal.i: void l(java.lang.String)>","public static void l(String str) {
    throw ((NullPointerException) h(new NullPointerException(str)));
}"
"<kotlin.jvm.internal.i: boolean a(java.lang.Object,java.lang.Object)>","public static boolean a(Object obj, Object obj2) {
    return obj == null ? obj2 == null : obj.equals(obj2);
}"
"<kotlin.jvm.internal.i: int f(int,int)>","public static int f(int i2, int i3) {
    if (i2 < i3) {
        return -1;
    }
    return i2 == i3 ? 0 : 1;
}"
"<kotlin.jvm.internal.i: void o(java.lang.String)>","public static void o(String str) {
    n(""lateinit property "" + str + "" has not been initialized"");
}"
"<kotlin.jvm.internal.i: void e(java.lang.Object,java.lang.String)>","public static void e(Object obj, String str) {
    if (obj == null) {
        m(str);
    }
}"
"<kotlin.jvm.internal.i: void c(java.lang.Object,java.lang.String)>","public static void c(Object obj, String str) {
    if (obj == null) {
        l(str);
    }
}"
"<kotlin.jvm.internal.i: void n(java.lang.String)>","public static void n(String str) {
    throw ((p) h(new p(str)));
}"
"<kotlin.jvm.internal.i: void k()>","public static void k() {
    throw ((NullPointerException) h(new NullPointerException()));
}"
"<kotlin.jvm.internal.i: void b(java.lang.Object)>","public static void b(Object obj) {
    if (obj == null) {
        k();
    }
}"
"<kotlinx.coroutines.internal.m: boolean t()>","// kotlinx.coroutines.internal.o
@Override
public boolean t() {
    return false;
}"
"<j.e: int b()>","public abstract int b();"
"<kotlinx.coroutines.internal.g: void p()>","public final void p() {
    i();
    u0.l<?> k2 = k();
    if (k2 == null) {
        return;
    }
    k2.r();
}"
"<kotlinx.coroutines.internal.g: void a(java.lang.Object,java.lang.Throwable)>","// u0.t0
@Override
public void a(Object obj, Throwable th) {
    if (obj instanceof u0.z) {
        ((u0.z) obj).f1376b.invoke(th);
    }
}"
"<kotlinx.coroutines.internal.g: kotlin.coroutines.jvm.internal.e getCallerFrame()>","// kotlin.coroutines.jvm.internal.e
@Override
public kotlin.coroutines.jvm.internal.e getCallerFrame() {
    g0.d<T> dVar = this.f1034h;
    if (dVar instanceof kotlin.coroutines.jvm.internal.e) {
        return (kotlin.coroutines.jvm.internal.e) dVar;
    }
    return null;
}"
"<kotlinx.coroutines.internal.g: boolean n(java.lang.Throwable)>","public final boolean n(Throwable th) {
    while (true) {
        Object obj = this._reusableCancellableContinuation;
        z zVar = h.f1042b;
        if (kotlin.jvm.internal.i.a(obj, zVar)) {
            if (c.a(f1032k, this, zVar, th)) {
                return true;
            }
        } else {
            if (obj instanceof Throwable) {
                return true;
            }
            if (c.a(f1032k, this, obj, null)) {
                return false;
            }
        }
    }
}"
"<kotlinx.coroutines.internal.g: void resumeWith(java.lang.Object)>","// g0.d
@Override
public void resumeWith(Object obj) {
    g0.g context = this.f1034h.getContext();
    Object d2 = u0.c0.d(obj, null, 1, null);
    if (this.f1033g.o(context)) {
        this.f1035i = d2;
        this.f1339f = 0;
        this.f1033g.m(context, this);
        return;
    }
    p0.a();
    z0 a2 = f2.f1292a.a();
    if (a2.w()) {
        this.f1035i = d2;
        this.f1339f = 0;
        a2.s(this);
        return;
    }
    a2.u(true);
    try {
        g0.g context2 = getContext();
        Object c2 = d0.c(context2, this.f1036j);
        try {
            this.f1034h.resumeWith(obj);
            d0.q qVar = d0.q.f150a;
            do {
            } while (a2.y());
        } finally {
            d0.a(context2, c2);
        }
    } finally {
        try {
        } finally {
        }
    }
}"
"<kotlinx.coroutines.internal.g: g0.g getContext()>","// g0.d
@Override
public g0.g getContext() {
    return this.f1034h.getContext();
}"
"<kotlinx.coroutines.internal.g: void i()>","public final void i() {
    do {
    } while (this._reusableCancellableContinuation == h.f1042b);
}"
"<kotlinx.coroutines.internal.g: boolean l()>","public final boolean l() {
    return this._reusableCancellableContinuation != null;
}"
"<u0.e2: void d(g0.g,java.lang.Object)>","void d(g0.g gVar, S s2);"
"<m.d: void b(java.lang.String,java.nio.ByteBuffer,int,long)>","void b(String str, ByteBuffer byteBuffer, int i2, long j2);"
"<m.d: void e(int,java.nio.ByteBuffer)>","void e(int i2, ByteBuffer byteBuffer);"
"<x.d: void a(x.d$a,java.lang.Object)>","void a(boolean z2);"
"<x.d: void d(x.d$a,java.lang.Object)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
void d(a aVar, Object obj) {
    boolean z2 = false;
    if (obj != null) {
        try {
            z2 = ((JSONObject) obj).getBoolean(""handled"");
        } catch (JSONException e2) {
            l.b.b(""KeyEventChannel"", ""Unable to unpack JSON message: "" + e2);
        }
    }
    aVar.a(z2);
}"
"<x.d: void e(x.d$b,boolean,x.d$a)>","public void e(b bVar, boolean z2, a aVar) {
    this.f1484a.d(c(bVar, z2), b(aVar));
}"
"<x.o: void a()>","public void a() {
    l.b.f(""SystemChannel"", ""Sending memory pressure warning to Flutter."");
    HashMap hashMap = new HashMap(1);
    hashMap.put(""type"", ""memoryPressure"");
    this.f1609a.c(hashMap);
}"
"<t0.f: java.lang.String d(java.lang.String,java.lang.String)>","/* JADX WARN: Removed duplicated region for block: B:35:0x00b6  */
/* JADX WARN: Removed duplicated region for block: B:38:0x00b9 A[SYNTHETIC] */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public static final java.lang.String d(java.lang.String r14, java.lang.String r15) {
    /*
            java.lang.String r0 = ""<this>""
            kotlin.jvm.internal.i.e(r14, r0)
            java.lang.String r0 = ""newIndent""
            kotlin.jvm.internal.i.e(r15, r0)
            java.util.List r0 = t0.n.I(r14)
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.Iterator r2 = r0.iterator()
        L17:
            boolean r3 = r2.hasNext()
            if (r3 == 0) goto L30
            java.lang.Object r3 = r2.next()
            r4 = r3
            java.lang.String r4 = (java.lang.String) r4
            boolean r4 = t0.d.l(r4)
            r4 = r4 ^ 1
            if (r4 == 0) goto L17
            r1.add(r3)
            goto L17
        L30:
            java.util.ArrayList r2 = new java.util.ArrayList
            r3 = 10
            int r3 = e0.g.g(r1, r3)
            r2.<init>(r3)
            java.util.Iterator r1 = r1.iterator()
        L3f:
            boolean r3 = r1.hasNext()
            if (r3 == 0) goto L57
            java.lang.Object r3 = r1.next()
            java.lang.String r3 = (java.lang.String) r3
            int r3 = c(r3)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r2.add(r3)
            goto L3f
        L57:
            java.lang.Comparable r1 = e0.g.m(r2)
            java.lang.Integer r1 = (java.lang.Integer) r1
            r2 = 0
            if (r1 == 0) goto L65
            int r1 = r1.intValue()
            goto L66
        L65:
            r1 = r2
        L66:
            int r14 = r14.length()
            int r3 = r15.length()
            int r4 = r0.size()
            int r3 = r3 * r4
            int r14 = r14 + r3
            n0.l r15 = b(r15)
            int r3 = e0.g.c(r0)
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            java.util.Iterator r0 = r0.iterator()
        L85:
            boolean r5 = r0.hasNext()
            if (r5 == 0) goto Lbb
            java.lang.Object r5 = r0.next()
            int r6 = r2 + 1
            if (r2 >= 0) goto L96
            e0.g.f()
        L96:
            java.lang.String r5 = (java.lang.String) r5
            if (r2 == 0) goto L9c
            if (r2 != r3) goto La4
        L9c:
            boolean r2 = t0.d.l(r5)
            if (r2 == 0) goto La4
            r5 = 0
            goto Lb4
        La4:
            java.lang.String r2 = t0.p.b0(r5, r1)
            if (r2 == 0) goto Lb4
            java.lang.Object r2 = r15.invoke(r2)
            java.lang.String r2 = (java.lang.String) r2
            if (r2 != 0) goto Lb3
            goto Lb4
        Lb3:
            r5 = r2
        Lb4:
            if (r5 == 0) goto Lb9
            r4.add(r5)
        Lb9:
            r2 = r6
            goto L85
        Lbb:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>(r14)
            r7 = 0
            r8 = 0
            r9 = 0
            r10 = 0
            r11 = 0
            r12 = 124(0x7c, float:1.74E-43)
            r13 = 0
            java.lang.String r6 = ""\n""
            java.lang.Appendable r14 = e0.g.j(r4, r5, r6, r7, r8, r9, r10, r11, r12, r13)
            java.lang.StringBuilder r14 = (java.lang.StringBuilder) r14
            java.lang.String r14 = r14.toString()
            java.lang.String r15 = ""mapIndexedNotNull { inde…\""\\n\"")\n        .toString()""
            kotlin.jvm.internal.i.d(r14, r15)
            return r14
        */
    throw new UnsupportedOperationException(""Method not decompiled: t0.f.d(java.lang.String, java.lang.String):java.lang.String"");
}"
"<t0.f: int c(java.lang.String)>","private static final int c(String str) {
    int length = str.length();
    int i2 = 0;
    while (true) {
        if (i2 >= length) {
            i2 = -1;
            break;
        }
        if (!t0.a.c(str.charAt(i2))) {
            break;
        }
        i2++;
    }
    return i2 == -1 ? str.length() : i2;
}"
"<kotlin.jvm.internal.n: boolean c(java.lang.Object,int)>","public static boolean c(Object obj, int i2) {
    return (obj instanceof d0.c) && b(obj) == i2;
}"
"<kotlin.jvm.internal.n: void g(java.lang.String)>","public static void g(String str) {
    throw e(new ClassCastException(str));
}"
"<kotlin.jvm.internal.n: int b(java.lang.Object)>","public static int b(Object obj) {
    if (obj instanceof f) {
        return ((f) obj).getArity();
    }
    if (obj instanceof n0.a) {
        return 0;
    }
    if (obj instanceof n0.l) {
        return 1;
    }
    if (obj instanceof p) {
        return 2;
    }
    if (obj instanceof q) {
        return 3;
    }
    if (obj instanceof r) {
        return 4;
    }
    if (obj instanceof s) {
        return 5;
    }
    if (obj instanceof t) {
        return 6;
    }
    if (obj instanceof u) {
        return 7;
    }
    if (obj instanceof v) {
        return 8;
    }
    if (obj instanceof w) {
        return 9;
    }
    if (obj instanceof n0.b) {
        return 10;
    }
    if (obj instanceof n0.c) {
        return 11;
    }
    if (obj instanceof n0.d) {
        return 12;
    }
    if (obj instanceof n0.e) {
        return 13;
    }
    if (obj instanceof n0.f) {
        return 14;
    }
    if (obj instanceof n0.g) {
        return 15;
    }
    if (obj instanceof n0.h) {
        return 16;
    }
    if (obj instanceof n0.i) {
        return 17;
    }
    if (obj instanceof n0.j) {
        return 18;
    }
    if (obj instanceof n0.k) {
        return 19;
    }
    if (obj instanceof n0.m) {
        return 20;
    }
    if (obj instanceof n0.n) {
        return 21;
    }
    return obj instanceof o ? 22 : -1;
}"
"<kotlin.jvm.internal.n: void f(java.lang.Object,java.lang.String)>","public static void f(Object obj, String str) {
    g((obj == null ? ""null"" : obj.getClass().getName()) + "" cannot be cast to "" + str);
}"
"<l0.a: void a(java.io.Closeable,java.lang.Throwable)>","public static final void a(Closeable closeable, Throwable th) {
    if (closeable != null) {
        if (th == null) {
            closeable.close();
            return;
        }
        try {
            closeable.close();
        } catch (Throwable th2) {
            b.a(th, th2);
        }
    }
}"
"<d0.m: boolean a()>","public boolean a() {
    return this.f147e != o.f149a;
}"
"<io.flutter.plugins.webviewflutter.n: void a(io.flutter.plugins.webviewflutter.k$b,java.lang.Object,y.a$e)>","// io.flutter.plugins.webviewflutter.k.n
@Override
public /* renamed from: b, reason: merged with bridge method [inline-methods] */
void a(Boolean bool) {
    this.f708a.put(""result"", bool);
    this.f709b.a(this.f708a);
}"
"<io.flutter.plugins.webviewflutter.n: void d(io.flutter.plugins.webviewflutter.k$b,java.lang.Object,y.a$e)>","public static /* synthetic */
void d(k.b bVar, Object obj, a.e eVar) {
    Map b2;
    HashMap hashMap = new HashMap();
    try {
        bVar.a(new a(hashMap, eVar));
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
        eVar.a(hashMap);
    }
}"
"<io.flutter.plugins.webviewflutter.n: void e(io.flutter.plugins.webviewflutter.k$b,java.lang.Object,y.a$e)>","public static /* synthetic */
void e(k.b bVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    String str;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        str = (String) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (str == null) {
        throw new NullPointerException(""urlArg unexpectedly null."");
    }
    String str2 = (String) arrayList.get(1);
    if (str2 == null) {
        throw new NullPointerException(""valueArg unexpectedly null."");
    }
    bVar.b(str, str2);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.n: void f(y.b,io.flutter.plugins.webviewflutter.k$b)>","public static void f(y.b bVar, final k.b bVar2) {
    y.a aVar = new y.a(bVar, ""dev.flutter.pigeon.CookieManagerHostApi.clearCookies"", c());
    if (bVar2 != null) {
        aVar.e(new // from class: io.flutter.plugins.webviewflutter.l
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                n.d(k.b.this, obj, eVar);
            }
        });
    } else {
        aVar.e(null);
    }
    y.a aVar2 = new y.a(bVar, ""dev.flutter.pigeon.CookieManagerHostApi.setCookie"", c());
    if (bVar2 != null) {
        aVar2.e(new // from class: io.flutter.plugins.webviewflutter.m
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                n.e(k.b.this, obj, eVar);
            }
        });
    } else {
        aVar2.e(null);
    }
}"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,e.a)>","public final void addWindowLayoutInfoListener(Activity activity, Executor executor, a<WindowLayoutInfo> consumer) {
    i.e(activity, ""activity"");
    i.e(executor, ""executor"");
    i.e(consumer, ""consumer"");
    addListener(executor, consumer, this.tracker.windowLayoutInfo(activity));
}"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,e.a,x0.b)>","private final <T> void addListener(Executor executor, a<T> aVar, b<? extends T> bVar) {
    o1 b2;
    ReentrantLock reentrantLock = this.lock;
    reentrantLock.lock();
    try {
        if (this.consumerToJobMap.get(aVar) == null) {
            l0 a2 = m0.a(h1.a(executor));
            Map<a<?>, o1> map = this.consumerToJobMap;
            b2 = h.b(a2, null, null, new WindowInfoTrackerCallbackAdapter$addListener$1$1(bVar, aVar, null), 3, null);
            map.put(aVar, b2);
        }
        q qVar = q.f150a;
    } finally {
        reentrantLock.unlock();
    }
}"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(e.a)>","private final void removeListener(a<?> aVar) {
    ReentrantLock reentrantLock = this.lock;
    reentrantLock.lock();
    try {
        o1 o1Var = this.consumerToJobMap.get(aVar);
        if (o1Var != null) {
            o1.a.a(o1Var, null, 1, null);
        }
        this.consumerToJobMap.remove(aVar);
    } finally {
        reentrantLock.unlock();
    }
}"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(e.a)>","public final void removeWindowLayoutInfoListener(a<WindowLayoutInfo> consumer) {
    i.e(consumer, ""consumer"");
    removeListener(consumer);
}"
"<io.flutter.embedding.android.c: void b()>","void b();"
"<u0.i0: int a(long)>","public static /* synthetic */
int a(long j2) {
    return (int) (j2 ^ (j2 >>> 32));
}"
"<k.i: int b()>","// j.e
@Override
public int b() {
    a.b bVar = j.f985w;
    if (bVar.c()) {
        return b.f(d());
    }
    if (bVar.d()) {
        return c().getErrorCode();
    }
    throw j.a();
}"
"<io.flutter.plugins.webviewflutter.b: void a(io.flutter.plugins.webviewflutter.k$n)>","// io.flutter.plugins.webviewflutter.k.b
@Override
public void a(final k.n<Boolean> nVar) {
    CookieManager cookieManager = CookieManager.getInstance();
    if (Build.VERSION.SDK_INT >= 21) {
        Objects.requireNonNull(nVar);
        cookieManager.removeAllCookies(new // from class: io.flutter.plugins.webviewflutter.a
        ValueCallback() {

            // android.webkit.ValueCallback
            @Override
            public final void onReceiveValue(Object obj) {
                k.n.this.a((Boolean) obj);
            }
        });
    } else {
        boolean hasCookies = cookieManager.hasCookies();
        if (hasCookies) {
            cookieManager.removeAllCookie();
        }
        nVar.a(Boolean.valueOf(hasCookies));
    }
}"
"<io.flutter.plugins.webviewflutter.b: void b(java.lang.String,java.lang.String)>","// io.flutter.plugins.webviewflutter.k.b
@Override
public void b(String str, String str2) {
    CookieManager.getInstance().setCookie(str, str2);
}"
"<io.flutter.plugin.platform.c: void u(x.i$c)>","/* JADX INFO: Access modifiers changed from: private */
public void u(i.c cVar) {
    int i2 = Build.VERSION.SDK_INT;
    if (i2 < 21) {
        return;
    }
    if (i2 < 28 && i2 > 21) {
        this.f501a.setTaskDescription(new ActivityManager.TaskDescription(cVar.f1507b, (Bitmap) null, cVar.f1506a));
    }
    if (i2 >= 28) {
        this.f501a.setTaskDescription(new ActivityManager.TaskDescription(cVar.f1507b, 0, cVar.f1506a));
    }
}"
"<io.flutter.plugin.platform.c: boolean n()>","/* JADX INFO: Access modifiers changed from: private */
public boolean n() {
    ClipDescription primaryClipDescription;
    ClipboardManager clipboardManager = (ClipboardManager) this.f501a.getSystemService(""clipboard"");
    if (clipboardManager.hasPrimaryClip() && (primaryClipDescription = clipboardManager.getPrimaryClipDescription()) != null) {
        return primaryClipDescription.hasMimeType(""text/*"");
    }
    return false;
}"
"<io.flutter.plugin.platform.c: void y(int)>","/* JADX INFO: Access modifiers changed from: private */
public void y(int i2) {
    this.f501a.setRequestedOrientation(i2);
}"
"<io.flutter.plugin.platform.c: void w(x.i$k)>","/* JADX INFO: Access modifiers changed from: private */
public void w(i.k kVar) {
    int i2;
    if (kVar == i.k.LEAN_BACK) {
        i2 = 1798;
    } else if (kVar == i.k.IMMERSIVE && Build.VERSION.SDK_INT >= 19) {
        i2 = 3846;
    } else if (kVar == i.k.IMMERSIVE_STICKY && Build.VERSION.SDK_INT >= 19) {
        i2 = 5894;
    } else if (kVar != i.k.EDGE_TO_EDGE || Build.VERSION.SDK_INT < 29) {
        return;
    } else {
        i2 = 1792;
    }
    this.f505e = i2;
    A();
}"
"<io.flutter.plugin.platform.c: void t(java.lang.String)>","/* JADX INFO: Access modifiers changed from: private */
public void t(String str) {
    ((ClipboardManager) this.f501a.getSystemService(""clipboard"")).setPrimaryClip(ClipData.newPlainText(""text label?"", str));
}"
"<io.flutter.plugin.platform.c: void g(io.flutter.plugin.platform.c,java.util.List)>","// x.i.h
@Override
public void g(i.g gVar) {
    c.this.B(gVar);
}"
"<io.flutter.plugin.platform.c: void r()>","/* JADX INFO: Access modifiers changed from: private */
/* JADX WARN: Multi-variable type inference failed */
public void r() {
    d dVar = this.f503c;
    if (dVar == null || !dVar.c()) {
        Activity activity = this.f501a;
        if (activity instanceof androidx.activity.b) {
            ((androidx.activity.b) activity).i();
            throw null;
        }
        activity.finish();
    }
}"
"<io.flutter.plugin.platform.c: void f(io.flutter.plugin.platform.c,x.i$c)>","// x.i.h
@Override
public void f(i.j jVar) {
    c.this.z(jVar);
}"
"<io.flutter.plugin.platform.c: void s()>","/* JADX INFO: Access modifiers changed from: private */
public void s() {
    A();
}"
"<io.flutter.plugin.platform.c: void B(x.i$g)>","void B(i.g gVar) {
    int i2;
    View decorView = this.f501a.getWindow().getDecorView();
    int i3 = C0014c.f510a[gVar.ordinal()];
    int i4 = 1;
    if (i3 != 1) {
        if (i3 != 2) {
            i4 = 3;
            if (i3 != 3) {
                i4 = 4;
                if (i3 != 4) {
                    if (i3 != 5 || Build.VERSION.SDK_INT < 21) {
                        return;
                    }
                } else if (Build.VERSION.SDK_INT < 23) {
                    return;
                } else {
                    i2 = 6;
                }
            }
        }
        decorView.performHapticFeedback(i4);
        return;
    }
    i2 = 0;
    decorView.performHapticFeedback(i2);
}"
"<io.flutter.plugin.platform.c: void A()>","public void A() {
    this.f501a.getWindow().getDecorView().setSystemUiVisibility(this.f505e);
    i.j jVar = this.f504d;
    if (jVar != null) {
        z(jVar);
    }
}"
"<io.flutter.plugin.platform.c: void x(java.util.List)>","/* JADX INFO: Access modifiers changed from: private */
public void x(List<i.l> list) {
    int i2 = (list.size() != 0 || Build.VERSION.SDK_INT < 19) ? 1798 : 5894;
    for (int i3 = 0; i3 < list.size(); i3++) {
        int i4 = C0014c.f511b[list.get(i3).ordinal()];
        if (i4 == 1) {
            i2 &= -5;
        } else if (i4 == 2) {
            i2 = i2 & (-513) & (-3);
        }
    }
    this.f505e = i2;
    A();
}"
"<io.flutter.plugin.platform.c: void j(io.flutter.plugin.platform.c)>","// x.i.h
@Override
public void j() {
    c.this.s();
}"
"<io.flutter.plugin.platform.c: void h(io.flutter.plugin.platform.c,x.i$k)>","// x.i.h
@Override
public void h(i.k kVar) {
    c.this.w(kVar);
}"
"<io.flutter.plugin.platform.c: void k(io.flutter.plugin.platform.c,x.i$j)>","// x.i.h
@Override
public void k(String str) {
    c.this.t(str);
}"
"<io.flutter.plugin.platform.c: void i(io.flutter.plugin.platform.c)>","// x.i.h
@Override
public void i(List<i.l> list) {
    c.this.x(list);
}"
"<io.flutter.plugin.platform.c: void a(io.flutter.plugin.platform.c,x.i$i)>","// x.i.h
@Override
public void a() {
    c.this.v();
}"
"<io.flutter.plugin.platform.c: void q(x.i$i)>","/* JADX INFO: Access modifiers changed from: private */
public void q(i.EnumC0035i enumC0035i) {
    if (enumC0035i == i.EnumC0035i.CLICK) {
        this.f501a.getWindow().getDecorView().playSoundEffect(0);
    }
}"
"<io.flutter.plugin.platform.c: void v()>","/* JADX INFO: Access modifiers changed from: private */
public void v() {
    View decorView = this.f501a.getWindow().getDecorView();
    decorView.setOnSystemUiVisibilityChangeListener(new b(decorView));
}"
"<io.flutter.plugin.platform.c: void c(io.flutter.plugin.platform.c,java.lang.String)>","// x.i.h
@Override
public void c() {
    c.this.r();
}"
"<io.flutter.plugin.platform.c: void z(x.i$j)>","/* JADX INFO: Access modifiers changed from: private */
@TargetApi(21)
public void z(i.j jVar) {
    Window window = this.f501a.getWindow();
    f.a aVar = new f.a(window, window.getDecorView());
    int i2 = Build.VERSION.SDK_INT;
    if (i2 < 30) {
        window.addFlags(Integer.MIN_VALUE);
        window.clearFlags(201326592);
    }
    if (i2 >= 23) {
        i.d dVar = jVar.f1533b;
        if (dVar != null) {
            int i3 = C0014c.f512c[dVar.ordinal()];
            if (i3 == 1) {
                aVar.b(true);
            } else if (i3 == 2) {
                aVar.b(false);
            }
        }
        Integer num = jVar.f1532a;
        if (num != null) {
            window.setStatusBarColor(num.intValue());
        }
    }
    Boolean bool = jVar.f1534c;
    if (bool != null && i2 >= 29) {
        window.setStatusBarContrastEnforced(bool.booleanValue());
    }
    if (i2 >= 26) {
        i.d dVar2 = jVar.f1536e;
        if (dVar2 != null) {
            int i4 = C0014c.f512c[dVar2.ordinal()];
            if (i4 == 1) {
                aVar.a(true);
            } else if (i4 == 2) {
                aVar.a(false);
            }
        }
        Integer num2 = jVar.f1535d;
        if (num2 != null) {
            window.setNavigationBarColor(num2.intValue());
        }
    }
    Integer num3 = jVar.f1537f;
    if (num3 != null && i2 >= 28) {
        window.setNavigationBarDividerColor(num3.intValue());
    }
    Boolean bool2 = jVar.f1538g;
    if (bool2 != null && i2 >= 29) {
        window.setNavigationBarContrastEnforced(bool2.booleanValue());
    }
    this.f504d = jVar;
}"
"<io.flutter.plugin.platform.c: void b(io.flutter.plugin.platform.c,int)>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void b(int i2) {
    x.i iVar;
    boolean z2;
    if ((i2 & 4) == 0) {
        iVar = c.this.f502b;
        z2 = true;
    } else {
        iVar = c.this.f502b;
        z2 = false;
    }
    iVar.m(z2);
}"
"<io.flutter.plugin.platform.c: void o()>","public void o() {
    this.f502b.l(null);
}"
"<a.a: boolean contains(java.lang.Object)>","public boolean contains(K k2) {
    return this.f0h.containsKey(k2);
}"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,e.a)>","// androidx.window.layout.WindowBackend
@Override
public void registerLayoutChangeCallback(Activity activity, Executor executor, e.a<WindowLayoutInfo> callback) {
    q qVar;
    i.e(activity, ""activity"");
    i.e(executor, ""executor"");
    i.e(callback, ""callback"");
    ReentrantLock reentrantLock = this.extensionWindowBackendLock;
    reentrantLock.lock();
    try {
        MulticastConsumer multicastConsumer = this.activityToListeners.get(activity);
        if (multicastConsumer == null) {
            qVar = null;
        } else {
            multicastConsumer.addListener(callback);
            this.listenerToActivity.put(callback, activity);
            qVar = q.f150a;
        }
        if (qVar == null) {
            MulticastConsumer multicastConsumer2 = new MulticastConsumer(activity);
            this.activityToListeners.put(activity, multicastConsumer2);
            this.listenerToActivity.put(callback, activity);
            multicastConsumer2.addListener(callback);
            this.component.addWindowLayoutInfoListener(activity, multicastConsumer2);
        }
        q qVar2 = q.f150a;
    } finally {
        reentrantLock.unlock();
    }
}"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(e.a)>","// androidx.window.layout.WindowBackend
@Override
public void unregisterLayoutChangeCallback(e.a<WindowLayoutInfo> callback) {
    i.e(callback, ""callback"");
    ReentrantLock reentrantLock = this.extensionWindowBackendLock;
    reentrantLock.lock();
    try {
        Activity activity = this.listenerToActivity.get(callback);
        if (activity == null) {
            return;
        }
        MulticastConsumer multicastConsumer = this.activityToListeners.get(activity);
        if (multicastConsumer == null) {
            return;
        }
        multicastConsumer.removeListener(callback);
        if (multicastConsumer.isEmpty()) {
            this.component.removeWindowLayoutInfoListener(multicastConsumer);
        }
        q qVar = q.f150a;
    } finally {
        reentrantLock.unlock();
    }
}"
"<u0.t1: void c(g0.g,java.util.concurrent.CancellationException)>","public static final void c(g0.g gVar, CancellationException cancellationException) {
    o1 o1Var = (o1) gVar.get(o1.f1325c);
    if (o1Var == null) {
        return;
    }
    o1Var.c(cancellationException);
}"
"<u0.t1: void e(u0.o1)>","public static final void e(o1 o1Var) {
    if (!o1Var.a()) {
        throw o1Var.h();
    }
}"
"<u0.t1: void d(g0.g)>","public static final void d(g0.g gVar) {
    o1 o1Var = (o1) gVar.get(o1.f1325c);
    if (o1Var == null) {
        return;
    }
    s1.e(o1Var);
}"
"<io.flutter.plugins.webviewflutter.r0: void a(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    r0.p(k.u.this, obj, eVar);
}"
"<io.flutter.plugins.webviewflutter.r0: void y(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void y(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""flagArg unexpectedly null."");
    }
    uVar.i(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void q(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void q(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    uVar.a(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void u(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void u(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""enabledArg unexpectedly null."");
    }
    uVar.f(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void D(y.b,io.flutter.plugins.webviewflutter.k$u)>","public static void D(y.b bVar, final k.u uVar) {
    y.a aVar = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.create"", o());
    if (uVar != null) {
        aVar.e(new // from class: io.flutter.plugins.webviewflutter.i0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.p(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar.e(null);
    }
    y.a aVar2 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.dispose"", o());
    if (uVar != null) {
        aVar2.e(new // from class: io.flutter.plugins.webviewflutter.o0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.q(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar2.e(null);
    }
    y.a aVar3 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setDomStorageEnabled"", o());
    if (uVar != null) {
        aVar3.e(new // from class: io.flutter.plugins.webviewflutter.g0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.v(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar3.e(null);
    }
    y.a aVar4 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setJavaScriptCanOpenWindowsAutomatically"", o());
    if (uVar != null) {
        aVar4.e(new // from class: io.flutter.plugins.webviewflutter.m0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.w(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar4.e(null);
    }
    y.a aVar5 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setSupportMultipleWindows"", o());
    if (uVar != null) {
        aVar5.e(new // from class: io.flutter.plugins.webviewflutter.q0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.x(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar5.e(null);
    }
    y.a aVar6 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setJavaScriptEnabled"", o());
    if (uVar != null) {
        aVar6.e(new // from class: io.flutter.plugins.webviewflutter.e0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.y(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar6.e(null);
    }
    y.a aVar7 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setUserAgentString"", o());
    if (uVar != null) {
        aVar7.e(new // from class: io.flutter.plugins.webviewflutter.k0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.z(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar7.e(null);
    }
    y.a aVar8 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setMediaPlaybackRequiresUserGesture"", o());
    if (uVar != null) {
        aVar8.e(new // from class: io.flutter.plugins.webviewflutter.l0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.A(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar8.e(null);
    }
    y.a aVar9 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setSupportZoom"", o());
    if (uVar != null) {
        aVar9.e(new // from class: io.flutter.plugins.webviewflutter.d0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.B(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar9.e(null);
    }
    y.a aVar10 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setLoadWithOverviewMode"", o());
    if (uVar != null) {
        aVar10.e(new // from class: io.flutter.plugins.webviewflutter.j0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.C(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar10.e(null);
    }
    y.a aVar11 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setUseWideViewPort"", o());
    if (uVar != null) {
        aVar11.e(new // from class: io.flutter.plugins.webviewflutter.h0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.r(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar11.e(null);
    }
    y.a aVar12 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setDisplayZoomControls"", o());
    if (uVar != null) {
        aVar12.e(new // from class: io.flutter.plugins.webviewflutter.p0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.s(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar12.e(null);
    }
    y.a aVar13 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setBuiltInZoomControls"", o());
    if (uVar != null) {
        aVar13.e(new // from class: io.flutter.plugins.webviewflutter.n0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.t(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar13.e(null);
    }
    y.a aVar14 = new y.a(bVar, ""dev.flutter.pigeon.WebSettingsHostApi.setAllowFileAccess"", o());
    if (uVar != null) {
        aVar14.e(new // from class: io.flutter.plugins.webviewflutter.f0
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                r0.u(k.u.this, obj, eVar);
            }
        });
    } else {
        aVar14.e(null);
    }
}"
"<io.flutter.plugins.webviewflutter.r0: void v(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void v(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""flagArg unexpectedly null."");
    }
    uVar.k(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void B(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void B(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""supportArg unexpectedly null."");
    }
    uVar.g(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void x(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void x(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""supportArg unexpectedly null."");
    }
    uVar.n(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void z(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void z(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    uVar.c(Long.valueOf(number.longValue()), (String) arrayList.get(1));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void w(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void w(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""flagArg unexpectedly null."");
    }
    uVar.j(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void p(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void p(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""webViewInstanceIdArg unexpectedly null."");
    }
    uVar.b(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void r(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void r(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""useArg unexpectedly null."");
    }
    uVar.h(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void A(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void A(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""requireArg unexpectedly null."");
    }
    uVar.e(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void s(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void s(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""enabledArg unexpectedly null."");
    }
    uVar.l(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void t(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void t(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""enabledArg unexpectedly null."");
    }
    uVar.m(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r0: void C(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","public static /* synthetic */
void C(k.u uVar, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""overviewArg unexpectedly null."");
    }
    uVar.d(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<w0.m: boolean s()>","// w0.a
@Override
protected final boolean s() {
    return this.f1472f == b.f1444a;
}"
"<w0.m: boolean q(w0.o)>","/* JADX INFO: Access modifiers changed from: protected */
// w0.a
@Override
public boolean q(o<? super E> oVar) {
    ReentrantLock reentrantLock = this.f1471e;
    reentrantLock.lock();
    try {
        return super.q(oVar);
    } finally {
        reentrantLock.unlock();
    }
}"
"<w0.m: boolean r()>","// w0.a
@Override
protected final boolean r() {
    return false;
}"
"<w0.m: java.lang.Object i(java.lang.Object)>","/* JADX INFO: Access modifiers changed from: protected */
/* JADX WARN: Code restructure failed: missing block: B:10:0x001a, code lost:
    
        if ((r1 instanceof w0.j) == false) goto L14;
     */
/* JADX WARN: Code restructure failed: missing block: B:12:0x0021, code lost:
    
        r2 = r1.h(r5, null);
     */
/* JADX WARN: Code restructure failed: missing block: B:13:0x0025, code lost:
    
        if (r2 == null) goto L45;
     */
/* JADX WARN: Code restructure failed: missing block: B:16:0x002b, code lost:
    
        if (u0.p0.a() == false) goto L27;
     */
/* JADX WARN: Code restructure failed: missing block: B:18:0x002f, code lost:
    
        if (r2 != u0.m.f1314a) goto L22;
     */
/* JADX WARN: Code restructure failed: missing block: B:19:0x0031, code lost:
    
        r2 = true;
     */
/* JADX WARN: Code restructure failed: missing block: B:20:0x0034, code lost:
    
        if (r2 == false) goto L25;
     */
/* JADX WARN: Code restructure failed: missing block: B:23:0x003c, code lost:
    
        throw new java.lang.AssertionError();
     */
/* JADX WARN: Code restructure failed: missing block: B:25:0x0033, code lost:
    
        r2 = false;
     */
/* JADX WARN: Code restructure failed: missing block: B:26:0x003d, code lost:
    
        r2 = d0.q.f150a;
     */
/* JADX WARN: Code restructure failed: missing block: B:27:0x003f, code lost:
    
        r0.unlock();
        r1.d(r5);
     */
/* JADX WARN: Code restructure failed: missing block: B:28:0x0049, code lost:
    
        return r1.e();
     */
/* JADX WARN: Code restructure failed: missing block: B:32:0x001f, code lost:
    
        return r1;
     */
/* JADX WARN: Code restructure failed: missing block: B:35:0x004a, code lost:
    
        r5 = x(r5);
     */
/* JADX WARN: Code restructure failed: missing block: B:36:0x004e, code lost:
    
        if (r5 != null) goto L35;
     */
/* JADX WARN: Code restructure failed: missing block: B:39:0x0055, code lost:
    
        return w0.b.f1445b;
     */
/* JADX WARN: Code restructure failed: missing block: B:40:0x0056, code lost:
    
        throw r5;
     */
/* JADX WARN: Code restructure failed: missing block: B:6:0x000f, code lost:
    
        if (r4.f1472f == w0.b.f1444a) goto L7;
     */
/* JADX WARN: Code restructure failed: missing block: B:7:0x0011, code lost:
    
        r1 = l();
     */
/* JADX WARN: Code restructure failed: missing block: B:8:0x0015, code lost:
    
        if (r1 != null) goto L10;
     */
// w0.c
@Override
public /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
java.lang.Object i(E r5) {
    /*
            r4 = this;
            java.util.concurrent.locks.ReentrantLock r0 = r4.f1471e
            r0.lock()
            w0.j r1 = r4.d()     // Catch: java.lang.Throwable -> L5b
            if (r1 != 0) goto L57
            java.lang.Object r1 = r4.f1472f     // Catch: java.lang.Throwable -> L5b
            kotlinx.coroutines.internal.z r2 = w0.b.f1444a     // Catch: java.lang.Throwable -> L5b
            if (r1 != r2) goto L4a
        L11:
            w0.q r1 = r4.l()     // Catch: java.lang.Throwable -> L5b
            if (r1 != 0) goto L18
            goto L4a
        L18:
            boolean r2 = r1 instanceof w0.j     // Catch: java.lang.Throwable -> L5b
            if (r2 == 0) goto L20
            r0.unlock()
            return r1
        L20:
            r2 = 0
            kotlinx.coroutines.internal.z r2 = r1.h(r5, r2)     // Catch: java.lang.Throwable -> L5b
            if (r2 == 0) goto L11
            boolean r3 = u0.p0.a()     // Catch: java.lang.Throwable -> L5b
            if (r3 == 0) goto L3d
            kotlinx.coroutines.internal.z r3 = u0.m.f1314a     // Catch: java.lang.Throwable -> L5b
            if (r2 != r3) goto L33
            r2 = 1
            goto L34
        L33:
            r2 = 0
        L34:
            if (r2 == 0) goto L37
            goto L3d
        L37:
            java.lang.AssertionError r5 = new java.lang.AssertionError     // Catch: java.lang.Throwable -> L5b
            r5.<init>()     // Catch: java.lang.Throwable -> L5b
            throw r5     // Catch: java.lang.Throwable -> L5b
        L3d:
            d0.q r2 = d0.q.f150a     // Catch: java.lang.Throwable -> L5b
            r0.unlock()
            r1.d(r5)
            java.lang.Object r5 = r1.e()
            return r5
        L4a:
            kotlinx.coroutines.internal.h0 r5 = r4.x(r5)     // Catch: java.lang.Throwable -> L5b
            if (r5 != 0) goto L56
            kotlinx.coroutines.internal.z r5 = w0.b.f1445b     // Catch: java.lang.Throwable -> L5b
            r0.unlock()
            return r5
        L56:
            throw r5     // Catch: java.lang.Throwable -> L5b
        L57:
            r0.unlock()
            return r1
        L5b:
            r5 = move-exception
            r0.unlock()
            throw r5
        */
    throw new UnsupportedOperationException(""Method not decompiled: w0.m.i(java.lang.Object):java.lang.Object"");
}"
"<androidx.window.embedding.SplitRule: int getLayoutDirection()>","public final int getLayoutDirection() {
    return this.layoutDirection;
}"
"<androidx.window.embedding.SplitRule: int getMinWidth()>","public final int getMinWidth() {
    return this.minWidth;
}"
"<androidx.window.embedding.SplitRule: int hashCode()>","public int hashCode() {
    return (((((this.minWidth * 31) + this.minSmallestWidth) * 31) + Float.floatToIntBits(this.splitRatio)) * 31) + this.layoutDirection;
}"
"<androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)>","public final boolean checkParentMetrics(WindowMetrics parentMetrics) {
    i.e(parentMetrics, ""parentMetrics"");
    if (Build.VERSION.SDK_INT <= 30) {
        return false;
    }
    Rect bounds = Api30Impl.INSTANCE.getBounds(parentMetrics);
    return (this.minWidth == 0 || bounds.width() >= this.minWidth) && (this.minSmallestWidth == 0 || Math.min(bounds.width(), bounds.height()) >= this.minSmallestWidth);
}"
"<androidx.window.embedding.SplitRule: int getMinSmallestWidth()>","public final int getMinSmallestWidth() {
    return this.minSmallestWidth;
}"
"<androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof SplitRule)) {
        return false;
    }
    SplitRule splitRule = (SplitRule) obj;
    if (this.minWidth == splitRule.minWidth && this.minSmallestWidth == splitRule.minSmallestWidth) {
        return ((this.splitRatio > splitRule.splitRatio ? 1 : (this.splitRatio == splitRule.splitRatio ? 0 : -1)) == 0) && this.layoutDirection == splitRule.layoutDirection;
    }
    return false;
}"
"<androidx.window.embedding.SplitRule: float getSplitRatio()>","public final float getSplitRatio() {
    return this.splitRatio;
}"
"<y.a: void c(java.lang.Object)>","public void c(T t2) {
    d(t2, null);
}"
"<y.a: void e(y.a$d)>","/* JADX WARN: Multi-variable type inference failed */
/* JADX WARN: Type inference failed for: r0v1, types: [y.b] */
/* JADX WARN: Type inference failed for: r1v0, types: [y.a$a] */
/* JADX WARN: Type inference failed for: r1v1, types: [y.b$a] */
/* JADX WARN: Type inference failed for: r1v2 */
public void e(d<T> dVar) {
    if (this.f1665d != null) {
        this.f1662a.c(this.f1663b, dVar != null ? new b(dVar) : null, this.f1665d);
    } else {
        this.f1662a.d(this.f1663b, dVar != null ? new b(dVar) : 0);
    }
}"
"<y.a: void d(java.lang.Object,y.a$e)>","/* JADX WARN: Multi-variable type inference failed */
public void d(T t2, e<T> eVar) {
    this.f1662a.a(this.f1663b, this.f1664c.b(t2), eVar != null ? new c(eVar) : null);
}"
"<io.flutter.embedding.android.i: void m()>","/* JADX INFO: Access modifiers changed from: private */
public void m() {
    w.a aVar = this.f256d;
    if (aVar == null) {
        throw new IllegalStateException(""disconnectSurfaceFromRenderer() should only be called when flutterRenderer is non-null."");
    }
    aVar.t();
    Surface surface = this.f257e;
    if (surface != null) {
        surface.release();
        this.f257e = null;
    }
}"
"<io.flutter.embedding.android.i: void n()>","private void n() {
    setSurfaceTextureListener(this.f258f);
}"
"<io.flutter.embedding.android.i: void setRenderSurface(android.view.Surface)>","public void setRenderSurface(Surface surface) {
    this.f257e = surface;
}"
"<io.flutter.embedding.android.i: void k(int,int)>","/* JADX INFO: Access modifiers changed from: private */
public void k(int i2, int i3) {
    if (this.f256d == null) {
        throw new IllegalStateException(""changeSurfaceSize() should only be called when flutterRenderer is non-null."");
    }
    l.b.f(""FlutterTextureView"", ""Notifying FlutterRenderer that Android surface size has changed to "" + i2 + "" x "" + i3);
    this.f256d.u(i2, i3);
}"
"<io.flutter.embedding.android.i: w.a getAttachedRenderer()>","// w.c
@Override
public w.a getAttachedRenderer() {
    return this.f256d;
}"
"<io.flutter.embedding.android.i: void c()>","// w.c
@Override
public void c() {
    if (this.f256d == null) {
        l.b.g(""FlutterTextureView"", ""detachFromRenderer() invoked when no FlutterRenderer was attached."");
        return;
    }
    if (getWindowToken() != null) {
        l.b.f(""FlutterTextureView"", ""Disconnecting FlutterRenderer from Android surface."");
        m();
    }
    this.f256d = null;
    this.f254b = false;
}"
"<io.flutter.embedding.android.i: void l()>","/* JADX INFO: Access modifiers changed from: private */
public void l() {
    if (this.f256d == null || getSurfaceTexture() == null) {
        throw new IllegalStateException(""connectSurfaceToRenderer() should only be called when flutterRenderer and getSurfaceTexture() are non-null."");
    }
    Surface surface = this.f257e;
    if (surface != null) {
        surface.release();
        this.f257e = null;
    }
    Surface surface2 = new Surface(getSurfaceTexture());
    this.f257e = surface2;
    this.f256d.s(surface2, this.f255c);
    this.f255c = false;
}"
"<io.flutter.embedding.android.i: void b(w.a)>","// w.c
@Override
public void b(w.a aVar) {
    l.b.f(""FlutterTextureView"", ""Attaching to FlutterRenderer."");
    if (this.f256d != null) {
        l.b.f(""FlutterTextureView"", ""Already connected to a FlutterRenderer. Detaching from old one and attaching to new one."");
        this.f256d.t();
    }
    this.f256d = aVar;
    this.f254b = true;
    if (this.f253a) {
        l.b.f(""FlutterTextureView"", ""Surface is available for rendering. Connecting FlutterRenderer to Android surface."");
        l();
    }
}"
"<io.flutter.embedding.android.i: void a()>","// w.c
@Override
public void a() {
    if (this.f256d == null) {
        l.b.g(""FlutterTextureView"", ""pause() invoked when no FlutterRenderer was attached."");
        return;
    }
    this.f256d = null;
    this.f255c = true;
    this.f254b = false;
}"
"<kotlin.coroutines.jvm.internal.g: int c(kotlin.coroutines.jvm.internal.a)>","private static final int c(a aVar) {
    try {
        Field declaredField = aVar.getClass().getDeclaredField(""label"");
        declaredField.setAccessible(true);
        Object obj = declaredField.get(aVar);
        Integer num = obj instanceof Integer ? (Integer) obj : null;
        return (num != null ? num.intValue() : 0) - 1;
    } catch (Exception unused) {
        return -1;
    }
}"
"<kotlin.coroutines.jvm.internal.g: void a(int,int)>","private static final void a(int i2, int i3) {
    if (i3 <= i2) {
        return;
    }
    throw new IllegalStateException((""Debug metadata version mismatch. Expected: "" + i2 + "", got "" + i3 + "". Please update the Kotlin standard library."").toString());
}"
"<io.flutter.plugin.platform.i: boolean a(java.lang.String,io.flutter.plugin.platform.g)>","// io.flutter.plugin.platform.h
@Override
public boolean a(String str, g gVar) {
    if (this.f516a.containsKey(str)) {
        return false;
    }
    this.f516a.put(str, gVar);
    return true;
}"
"<kotlinx.coroutines.internal.y: boolean f(java.lang.StackTraceElement,java.lang.StackTraceElement)>","private static final boolean f(StackTraceElement stackTraceElement, StackTraceElement stackTraceElement2) {
    return stackTraceElement.getLineNumber() == stackTraceElement2.getLineNumber() && kotlin.jvm.internal.i.a(stackTraceElement.getMethodName(), stackTraceElement2.getMethodName()) && kotlin.jvm.internal.i.a(stackTraceElement.getFileName(), stackTraceElement2.getFileName()) && kotlin.jvm.internal.i.a(stackTraceElement.getClassName(), stackTraceElement2.getClassName());
}"
"<kotlinx.coroutines.internal.y: void i(java.lang.StackTraceElement[],java.util.ArrayDeque)>","private static final void i(StackTraceElement[] stackTraceElementArr, ArrayDeque<StackTraceElement> arrayDeque) {
    int length = stackTraceElementArr.length;
    int i2 = 0;
    while (true) {
        if (i2 >= length) {
            i2 = -1;
            break;
        } else if (h(stackTraceElementArr[i2])) {
            break;
        } else {
            i2++;
        }
    }
    int i3 = i2 + 1;
    int length2 = stackTraceElementArr.length - 1;
    if (i3 > length2) {
        return;
    }
    while (true) {
        int i4 = length2 - 1;
        if (f(stackTraceElementArr[length2], arrayDeque.getLast())) {
            arrayDeque.removeLast();
        }
        arrayDeque.addFirst(stackTraceElementArr[length2]);
        if (length2 == i3) {
            return;
        } else {
            length2 = i4;
        }
    }
}"
"<kotlinx.coroutines.internal.y: boolean h(java.lang.StackTraceElement)>","public static final boolean h(StackTraceElement stackTraceElement) {
    boolean o2;
    o2 = t0.m.o(stackTraceElement.getClassName(), ""\b\b\b"", false, 2, null);
    return o2;
}"
"<kotlinx.coroutines.internal.y: int g(java.lang.StackTraceElement[],java.lang.String)>","private static final int g(StackTraceElement[] stackTraceElementArr, String str) {
    int length = stackTraceElementArr.length;
    for (int i2 = 0; i2 < length; i2++) {
        if (kotlin.jvm.internal.i.a(str, stackTraceElementArr[i2].getClassName())) {
            return i2;
        }
    }
    return -1;
}"
"<io.flutter.plugins.webviewflutter.n2: long i(io.flutter.plugins.webviewflutter.m2)>","private long i(m2 m2Var) {
    Long g2 = this.f712b.g(m2Var);
    if (g2 != null) {
        return g2.longValue();
    }
    throw new IllegalStateException(""Could not find identifier for JavaScriptChannel."");
}"
"<io.flutter.plugins.webviewflutter.n2: void h(io.flutter.plugins.webviewflutter.m2,io.flutter.plugins.webviewflutter.k$j$a)>","public void h(m2 m2Var, k.j.a<Void> aVar) {
    if (this.f712b.f(m2Var)) {
        c(Long.valueOf(i(m2Var)), aVar);
    } else {
        aVar.a(null);
    }
}"
"<io.flutter.plugins.webviewflutter.n2: void j(io.flutter.plugins.webviewflutter.m2,java.lang.String,io.flutter.plugins.webviewflutter.k$j$a)>","public void j(m2 m2Var, String str, k.j.a<Void> aVar) {
    super.g(Long.valueOf(i(m2Var)), str, aVar);
}"
"<androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)>","// androidx.window.embedding.EmbeddingInterfaceCompat
@Override
public void setEmbeddingCallback(EmbeddingInterfaceCompat.EmbeddingCallbackInterface embeddingCallback) {
    i.e(embeddingCallback, ""embeddingCallback"");
    this.embeddingExtension.setSplitInfoCallback(new EmbeddingTranslatingCallback(embeddingCallback, this.adapter));
}"
"<androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)>","// androidx.window.embedding.EmbeddingInterfaceCompat
@Override
public void setSplitRules(Set<? extends EmbeddingRule> rules) {
    i.e(rules, ""rules"");
    this.embeddingExtension.setEmbeddingRules(this.adapter.translate(rules));
}"
"<u0.g2: boolean o(g0.g)>","// u0.f0
@Override
public boolean o(g0.g gVar) {
    return false;
}"
"<u0.g2: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public void m(g0.g gVar, Runnable runnable) {
    j2 j2Var = (j2) gVar.get(j2.f1303e);
    if (j2Var == null) {
        throw new UnsupportedOperationException(""Dispatchers.Unconfined.dispatch function can only be used by the yield function. If you wrap Unconfined dispatcher in your code, make sure you properly delegate isDispatchNeeded and dispatch calls."");
    }
    j2Var.f1304d = true;
}"
"<io.flutter.embedding.engine.c: void p()>","public void p() {
    if (!u()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to detach plugins from a ContentProvider when no ContentProvider was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#detachFromContentProvider"");
    try {
        Iterator<t.a> it = this.f393n.values().iterator();
        while (it.hasNext()) {
            it.next().b();
        }
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: boolean u()>","private boolean u() {
    return this.f394o != null;
}"
"<io.flutter.embedding.engine.c: void o()>","public void o() {
    if (!t()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to detach plugins from a BroadcastReceiver when no BroadcastReceiver was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#detachFromBroadcastReceiver"");
    try {
        Iterator<s.a> it = this.f390k.values().iterator();
        while (it.hasNext()) {
            it.next().b();
        }
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: void w(java.lang.Class)>","public void w(Class<? extends q.a> cls) {
    q.a aVar = this.f380a.get(cls);
    if (aVar == null) {
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#remove "" + cls.getSimpleName());
    try {
        if (aVar instanceof r.a) {
            if (s()) {
                ((r.a) aVar).c();
            }
            this.f383d.remove(cls);
        }
        if (aVar instanceof u.a) {
            if (v()) {
                ((u.a) aVar).a();
            }
            this.f387h.remove(cls);
        }
        if (aVar instanceof s.a) {
            if (t()) {
                ((s.a) aVar).b();
            }
            this.f390k.remove(cls);
        }
        if (aVar instanceof t.a) {
            if (u()) {
                ((t.a) aVar).b();
            }
            this.f393n.remove(cls);
        }
        aVar.a(this.f382c);
        this.f380a.remove(cls);
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: boolean b(int,java.lang.String[],int[])>","boolean b(int i2, int i3, Intent intent) {
    Iterator it = new HashSet(this.f400d).iterator();
    while (true) {
        boolean z2 = false;
        while (it.hasNext()) {
            if (((k) it.next()).c(i2, i3, intent) || z2) {
                z2 = true;
            }
        }
        return z2;
    }
}"
"<io.flutter.embedding.engine.c: void n()>","private void n() {
    if (s()) {
        h();
        return;
    }
    if (v()) {
        q();
    } else if (t()) {
        o();
    } else if (u()) {
        p();
    }
}"
"<io.flutter.embedding.engine.c: void j()>","// r.b
@Override
public void j() {
    if (!s()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to detach plugins from an Activity when no Activity was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#detachFromActivityForConfigChanges"");
    try {
        this.f386g = true;
        Iterator<r.a> it = this.f383d.values().iterator();
        while (it.hasNext()) {
            it.next().e();
        }
        m();
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: boolean r(java.lang.Class)>","public boolean r(Class<? extends q.a> cls) {
    return this.f380a.containsKey(cls);
}"
"<io.flutter.embedding.engine.c: void q()>","public void q() {
    if (!v()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to detach plugins from a Service when no Service was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#detachFromService"");
    try {
        Iterator<u.a> it = this.f387h.values().iterator();
        while (it.hasNext()) {
            it.next().a();
        }
        this.f388i = null;
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: void f()>","void f(Bundle bundle) {
    Iterator<c.a> it = this.f403g.iterator();
    while (it.hasNext()) {
        it.next().e(bundle);
    }
}"
"<io.flutter.embedding.engine.c: void l()>","public void l() {
    l.b.f(""FlutterEngineCxnRegstry"", ""Destroying."");
    n();
    y();
}"
"<io.flutter.embedding.engine.c: void h()>","// r.b
@Override
public void h() {
    if (!s()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to detach plugins from an Activity when no Activity was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#detachFromActivity"");
    try {
        Iterator<r.a> it = this.f383d.values().iterator();
        while (it.hasNext()) {
            it.next().c();
        }
        m();
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: void d(android.content.Intent)>","// r.b
@Override
public void d(Intent intent) {
    if (!s()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to notify ActivityAware plugins of onNewIntent, but no Activity was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#onNewIntent"");
    try {
        this.f385f.c(intent);
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: void a(android.os.Bundle)>","// r.b
@Override
public void a(Bundle bundle) {
    if (!s()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to notify ActivityAware plugins of onRestoreInstanceState, but no Activity was attached."");
        return;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#onRestoreInstanceState"");
    try {
        this.f385f.e(bundle);
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: boolean t()>","private boolean t() {
    return this.f391l != null;
}"
"<io.flutter.embedding.engine.c: void e(android.os.Bundle)>","void e(Bundle bundle) {
    Iterator<c.a> it = this.f403g.iterator();
    while (it.hasNext()) {
        it.next().a(bundle);
    }
}"
"<io.flutter.embedding.engine.c: void i(q.a)>","/* JADX WARN: Multi-variable type inference failed */
// q.b
@Override
public void i(q.a aVar) {
    c0.e.a(""FlutterEngineConnectionRegistry#add "" + aVar.getClass().getSimpleName());
    try {
        if (r(aVar.getClass())) {
            l.b.g(""FlutterEngineCxnRegstry"", ""Attempted to register plugin ("" + aVar + "") but it was already registered with this FlutterEngine ("" + this.f381b + "")."");
            return;
        }
        l.b.f(""FlutterEngineCxnRegstry"", ""Adding plugin: "" + aVar);
        this.f380a.put(aVar.getClass(), aVar);
        aVar.d(this.f382c);
        if (aVar instanceof r.a) {
            r.a aVar2 = (r.a) aVar;
            this.f383d.put(aVar.getClass(), aVar2);
            if (s()) {
                aVar2.b(this.f385f);
            }
        }
        if (aVar instanceof u.a) {
            u.a aVar3 = (u.a) aVar;
            this.f387h.put(aVar.getClass(), aVar3);
            if (v()) {
                aVar3.b(this.f389j);
            }
        }
        if (aVar instanceof s.a) {
            s.a aVar4 = (s.a) aVar;
            this.f390k.put(aVar.getClass(), aVar4);
            if (t()) {
                aVar4.a(this.f392m);
            }
        }
        if (aVar instanceof t.a) {
            t.a aVar5 = (t.a) aVar;
            this.f393n.put(aVar.getClass(), aVar5);
            if (u()) {
                aVar5.a(this.f395p);
            }
        }
    } finally {
        c0.e.d();
    }
}"
"<io.flutter.embedding.engine.c: void g(io.flutter.embedding.android.c,androidx.lifecycle.c)>","void g() {
    Iterator<n> it = this.f402f.iterator();
    while (it.hasNext()) {
        it.next().f();
    }
}"
"<io.flutter.embedding.engine.c: void m()>","private void m() {
    this.f381b.n().J();
    this.f384e = null;
    this.f385f = null;
}"
"<io.flutter.embedding.engine.c: boolean s()>","private boolean s() {
    return this.f384e != null;
}"
"<io.flutter.embedding.engine.c: void y()>","public void y() {
    x(new HashSet(this.f380a.keySet()));
    this.f380a.clear();
}"
"<io.flutter.embedding.engine.c: void x(java.util.Set)>","public void x(Set<Class<? extends q.a>> set) {
    Iterator<Class<? extends q.a>> it = set.iterator();
    while (it.hasNext()) {
        w(it.next());
    }
}"
"<io.flutter.embedding.engine.c: boolean v()>","private boolean v() {
    return this.f388i != null;
}"
"<io.flutter.embedding.engine.c: void k(android.app.Activity,androidx.lifecycle.c)>","private void k(Activity activity, androidx.lifecycle.c cVar) {
    this.f385f = new C0013c(activity, cVar);
    this.f381b.n().h0(activity.getIntent() != null ? activity.getIntent().getBooleanExtra(""enable-software-rendering"", false) : false);
    this.f381b.n().B(activity, this.f381b.p(), this.f381b.h());
    for (r.a aVar : this.f383d.values()) {
        if (this.f386g) {
            aVar.f(this.f385f);
        } else {
            aVar.b(this.f385f);
        }
    }
    this.f386g = false;
}"
"<io.flutter.embedding.engine.c: boolean c(int,int,android.content.Intent)>","// r.b
@Override
public boolean c(int i2, int i3, Intent intent) {
    if (!s()) {
        l.b.b(""FlutterEngineCxnRegstry"", ""Attempted to notify ActivityAware plugins of onActivityResult, but no Activity was attached."");
        return false;
    }
    c0.e.a(""FlutterEngineConnectionRegistry#onActivityResult"");
    try {
        return this.f385f.b(i2, i3, intent);
    } finally {
        c0.e.d();
    }
}"
"<u0.q: boolean f(java.lang.Throwable)>","boolean f(Throwable th);"
"<y0.e: void a(y0.c,g0.g)>","public static final void a(c<?> cVar, g gVar) {
    if (((Number) gVar.fold(0, new a(cVar))).intValue() == cVar.f1702f) {
        return;
    }
    throw new IllegalStateException((""Flow invariant is violated:\n\t\tFlow was collected in "" + cVar.f1701e + "",\n\t\tbut emission happened in "" + gVar + "".\n\t\tPlease refer to 'flow' documentation or use 'flowOn' instead"").toString());
}"
"<r0.b: boolean isAbstract()>","boolean isAbstract();"
"<r0.b: boolean isFinal()>","boolean isFinal();"
"<r0.b: boolean isOpen()>","boolean isOpen();"
"<r0.b: boolean isSuspend()>","boolean isSuspend();"
"<u0.l0: g0.g r()>","g0.g r();"
"<k.g: void a(boolean)>","// j.a
@Override
public void a(boolean z2) {
    a.f fVar = j.f988z;
    if (fVar.c()) {
        c.e(c(), z2);
    } else {
        if (!fVar.d()) {
            throw j.a();
        }
        b().showInterstitial(z2);
    }
}"
"<kotlinx.coroutines.internal.k: boolean a()>","public static final boolean a() {
    return f1053a;
}"
"<g0.b: boolean a(g0.g$c)>","public final boolean a(g.c<?> key) {
    i.e(key, ""key"");
    return key == this || this.f163e == key;
}"
"<u0.u1: void b()>","// u0.x0
@Override
public void b() {
    z().h0(this);
}"
"<u0.u1: void A(u0.v1)>","public final void A(v1 v1Var) {
    this.f1341g = v1Var;
}"
"<u0.u1: boolean a()>","// u0.j1
@Override
public boolean a() {
    return true;
}"
"<x.f: void c(x.f$b)>","public void c(b bVar) {
    this.f1489b = bVar;
}"
"<x.f: void b(java.util.List)>","public void b(List<Locale> list) {
    l.b.f(""LocalizationChannel"", ""Sending Locales to Flutter."");
    ArrayList arrayList = new ArrayList();
    for (Locale locale : list) {
        l.b.f(""LocalizationChannel"", ""Locale (Language: "" + locale.getLanguage() + "", Country: "" + locale.getCountry() + "", Variant: "" + locale.getVariant() + "")"");
        arrayList.add(locale.getLanguage());
        arrayList.add(locale.getCountry());
        arrayList.add(Build.VERSION.SDK_INT >= 21 ? locale.getScript() : """");
        arrayList.add(locale.getVariant());
    }
    this.f1488a.c(""setLocale"", arrayList);
}"
"<androidx.window.core.Bounds: int getLeft()>","public final int getLeft() {
    return this.left;
}"
"<androidx.window.core.Bounds: int hashCode()>","public int hashCode() {
    return (((((this.left * 31) + this.top) * 31) + this.right) * 31) + this.bottom;
}"
"<androidx.window.core.Bounds: int getTop()>","public final int getTop() {
    return this.top;
}"
"<androidx.window.core.Bounds: int getBottom()>","public final int getBottom() {
    return this.bottom;
}"
"<androidx.window.core.Bounds: boolean isZero()>","public final boolean isZero() {
    return getHeight() == 0 && getWidth() == 0;
}"
"<androidx.window.core.Bounds: int getRight()>","public final int getRight() {
    return this.right;
}"
"<androidx.window.core.Bounds: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!i.a(Bounds.class, obj == null ? null : obj.getClass())) {
        return false;
    }
    Objects.requireNonNull(obj, ""null cannot be cast to non-null type androidx.window.core.Bounds"");
    Bounds bounds = (Bounds) obj;
    return this.left == bounds.left && this.top == bounds.top && this.right == bounds.right && this.bottom == bounds.bottom;
}"
"<androidx.window.core.Bounds: boolean isEmpty()>","public final boolean isEmpty() {
    return getHeight() == 0 || getWidth() == 0;
}"
"<androidx.window.core.Bounds: int getHeight()>","public final int getHeight() {
    return this.bottom - this.top;
}"
"<androidx.window.core.Bounds: int getWidth()>","public final int getWidth() {
    return this.right - this.left;
}"
"<e0.s: boolean a(java.lang.Void)>","public boolean a(Void element) {
    kotlin.jvm.internal.i.e(element, ""element"");
    return false;
}"
"<e0.s: int hashCode()>","// java.util.List, java.util.Collection
@Override
public int hashCode() {
    return 1;
}"
"<e0.s: int indexOf(java.lang.Object)>","// java.util.List
@Override
public final /* bridge */
int indexOf(Object obj) {
    if (obj instanceof Void) {
        return d((Void) obj);
    }
    return -1;
}"
"<e0.s: int lastIndexOf(java.lang.Object)>","// java.util.List
@Override
public final /* bridge */
int lastIndexOf(Object obj) {
    if (obj instanceof Void) {
        return e((Void) obj);
    }
    return -1;
}"
"<e0.s: boolean removeAll(java.util.Collection)>","// java.util.List, java.util.Collection
@Override
public boolean removeAll(Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: boolean retainAll(java.util.Collection)>","// java.util.List, java.util.Collection
@Override
public boolean retainAll(Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: boolean add(java.lang.Object)>","// java.util.List, java.util.Collection
@Override
public /* bridge */
/* synthetic */
boolean add(Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: boolean addAll(int,java.util.Collection)>","// java.util.List
@Override
public boolean addAll(int i2, Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: int d(java.lang.Void)>","public int d(Void element) {
    kotlin.jvm.internal.i.e(element, ""element"");
    return -1;
}"
"<e0.s: int e(java.lang.Void)>","public int e(Void element) {
    kotlin.jvm.internal.i.e(element, ""element"");
    return -1;
}"
"<e0.s: boolean contains(java.lang.Object)>","// java.util.List, java.util.Collection
@Override
public final /* bridge */
boolean contains(Object obj) {
    if (obj instanceof Void) {
        return a((Void) obj);
    }
    return false;
}"
"<e0.s: boolean containsAll(java.util.Collection)>","// java.util.List, java.util.Collection
@Override
public boolean containsAll(Collection elements) {
    kotlin.jvm.internal.i.e(elements, ""elements"");
    return elements.isEmpty();
}"
"<e0.s: void add(int,java.lang.Object)>","// java.util.List
@Override
public /* bridge */
/* synthetic */
void add(int i2, Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: boolean addAll(java.util.Collection)>","// java.util.List
@Override
public boolean addAll(int i2, Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: boolean equals(java.lang.Object)>","// java.util.List, java.util.Collection
@Override
public boolean equals(Object obj) {
    return (obj instanceof List) && ((List) obj).isEmpty();
}"
"<e0.s: int size()>","// java.util.List, java.util.Collection
@Override
public final /* bridge */
int size() {
    return c();
}"
"<e0.s: boolean remove(java.lang.Object)>","// java.util.List, java.util.Collection
@Override
public boolean remove(Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: int c()>","public int c() {
    return 0;
}"
"<e0.s: void clear()>","// java.util.List, java.util.Collection
@Override
public void clear() {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.s: boolean isEmpty()>","// java.util.List, java.util.Collection
@Override
public boolean isEmpty() {
    return true;
}"
"<y0.c: kotlin.coroutines.jvm.internal.e getCallerFrame()>","// kotlin.coroutines.jvm.internal.a, kotlin.coroutines.jvm.internal.e
@Override
public kotlin.coroutines.jvm.internal.e getCallerFrame() {
    g0.d<? super q> dVar = this.f1704h;
    if (dVar instanceof kotlin.coroutines.jvm.internal.e) {
        return (kotlin.coroutines.jvm.internal.e) dVar;
    }
    return null;
}"
"<y0.c: void d(y0.a,java.lang.Object)>","private final void d(y0.a aVar, Object obj) {
    String e2;
    e2 = f.e(""\n            Flow exception transparency is violated:\n                Previous 'emit' call has thrown exception "" + aVar.f1696d + "", but then emission attempt of value '"" + obj + ""' has been detected.\n                Emissions from 'catch' blocks are prohibited in order to avoid unspecified behaviour, 'Flow.catch' operator can be used instead.\n                For a more detailed explanation, please refer to Flow documentation.\n            "");
    throw new IllegalStateException(e2.toString());
}"
"<y0.c: void releaseIntercepted()>","// kotlin.coroutines.jvm.internal.d, kotlin.coroutines.jvm.internal.a
@Override
public void releaseIntercepted() {
    super.releaseIntercepted();
}"
"<y0.c: void a(g0.g,g0.g,java.lang.Object)>","private final void a(g gVar, g gVar2, T t2) {
    if (gVar2 instanceof y0.a) {
        d((y0.a) gVar2, t2);
    }
    e.a(this, gVar);
    this.f1703g = gVar;
}"
"<io.flutter.plugin.editing.b: void closeConnection()>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public void closeConnection() {
    super.closeConnection();
    this.f422d.l(this);
    while (this.f432n > 0) {
        endBatchEdit();
        this.f432n--;
    }
}"
"<io.flutter.plugin.editing.b: boolean setSelection(int,int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean setSelection(int i2, int i3) {
    beginBatchEdit();
    boolean selection = super.setSelection(i2, i3);
    endBatchEdit();
    return selection;
}"
"<io.flutter.plugin.editing.b: boolean endBatchEdit()>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean endBatchEdit() {
    boolean endBatchEdit = super.endBatchEdit();
    this.f432n--;
    this.f422d.d();
    return endBatchEdit;
}"
"<io.flutter.plugin.editing.b: boolean commitText(java.lang.CharSequence,int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean commitText(CharSequence charSequence, int i2) {
    return super.commitText(charSequence, i2);
}"
"<io.flutter.plugin.editing.b: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean performPrivateCommand(String str, Bundle bundle) {
    this.f421c.i(this.f420b, str, bundle);
    return true;
}"
"<io.flutter.plugin.editing.b: boolean setComposingText(java.lang.CharSequence,int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean setComposingText(CharSequence charSequence, int i2) {
    beginBatchEdit();
    boolean commitText = charSequence.length() == 0 ? super.commitText(charSequence, i2) : super.setComposingText(charSequence, i2);
    endBatchEdit();
    return commitText;
}"
"<io.flutter.plugin.editing.b: boolean performEditorAction(int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean performEditorAction(int i2) {
    if (i2 == 0) {
        this.f421c.o(this.f420b);
    } else if (i2 == 1) {
        this.f421c.g(this.f420b);
    } else if (i2 == 2) {
        this.f421c.f(this.f420b);
    } else if (i2 == 3) {
        this.f421c.l(this.f420b);
    } else if (i2 == 4) {
        this.f421c.m(this.f420b);
    } else if (i2 == 5) {
        this.f421c.h(this.f420b);
    } else if (i2 != 7) {
        this.f421c.e(this.f420b);
    } else {
        this.f421c.j(this.f420b);
    }
    return true;
}"
"<io.flutter.plugin.editing.b: boolean deleteSurroundingTextInCodePoints(int,int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean deleteSurroundingTextInCodePoints(int i2, int i3) {
    return super.deleteSurroundingTextInCodePoints(i2, i3);
}"
"<io.flutter.plugin.editing.b: boolean sendKeyEvent(android.view.KeyEvent)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean sendKeyEvent(KeyEvent keyEvent) {
    return this.f431m.a(keyEvent);
}"
"<io.flutter.plugin.editing.b: boolean f(android.view.KeyEvent)>","public boolean f(KeyEvent keyEvent) {
    if (keyEvent.getAction() != 0) {
        if (keyEvent.getAction() != 1 || (keyEvent.getKeyCode() != 59 && keyEvent.getKeyCode() != 60)) {
            return false;
        }
        int selectionEnd = Selection.getSelectionEnd(this.f422d);
        setSelection(selectionEnd, selectionEnd);
        return true;
    }
    if (keyEvent.getKeyCode() == 21) {
        return e(true, keyEvent.isShiftPressed());
    }
    if (keyEvent.getKeyCode() == 22) {
        return e(false, keyEvent.isShiftPressed());
    }
    if (keyEvent.getKeyCode() == 19) {
        return g(true, keyEvent.isShiftPressed());
    }
    if (keyEvent.getKeyCode() == 20) {
        return g(false, keyEvent.isShiftPressed());
    }
    if (keyEvent.getKeyCode() == 66 || keyEvent.getKeyCode() == 160) {
        EditorInfo editorInfo = this.f423e;
        if ((131072 & editorInfo.inputType) == 0) {
            performEditorAction(editorInfo.imeOptions & 255);
            return true;
        }
    }
    int selectionStart = Selection.getSelectionStart(this.f422d);
    int selectionEnd2 = Selection.getSelectionEnd(this.f422d);
    int unicodeChar = keyEvent.getUnicodeChar();
    if (selectionStart < 0 || selectionEnd2 < 0 || unicodeChar == 0) {
        return false;
    }
    int min = Math.min(selectionStart, selectionEnd2);
    int max = Math.max(selectionStart, selectionEnd2);
    beginBatchEdit();
    if (min != max) {
        this.f422d.delete(min, max);
    }
    this.f422d.insert(min, (CharSequence) String.valueOf((char) unicodeChar));
    int i2 = min + 1;
    setSelection(i2, i2);
    endBatchEdit();
    return true;
}"
"<io.flutter.plugin.editing.b: boolean e(boolean,boolean)>","private boolean e(boolean z2, boolean z3) {
    int selectionStart = Selection.getSelectionStart(this.f422d);
    int selectionEnd = Selection.getSelectionEnd(this.f422d);
    boolean z4 = false;
    if (selectionStart < 0 || selectionEnd < 0) {
        return false;
    }
    int max = z2 ? Math.max(this.f430l.b(this.f422d, selectionEnd), 0) : Math.min(this.f430l.a(this.f422d, selectionEnd), this.f422d.length());
    if (selectionStart == selectionEnd && !z3) {
        z4 = true;
    }
    if (z4) {
        setSelection(max, max);
    } else {
        setSelection(selectionStart, max);
    }
    return true;
}"
"<io.flutter.plugin.editing.b: void a(boolean,boolean,boolean)>","// io.flutter.plugin.editing.c.b
@Override
public void a(boolean z2, boolean z3, boolean z4) {
    this.f428j.updateSelection(this.f419a, this.f422d.i(), this.f422d.h(), this.f422d.g(), this.f422d.f());
    if (Build.VERSION.SDK_INT < 21) {
        return;
    }
    ExtractedTextRequest extractedTextRequest = this.f424f;
    if (extractedTextRequest != null) {
        this.f428j.updateExtractedText(this.f419a, extractedTextRequest.token, d(extractedTextRequest));
    }
    if (this.f425g) {
        this.f428j.updateCursorAnchorInfo(this.f419a, c());
    }
}"
"<io.flutter.plugin.editing.b: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
@TargetApi(25)
public boolean commitContent(InputContentInfo inputContentInfo, int i2, Bundle bundle) {
    if (Build.VERSION.SDK_INT >= 25 && (i2 & 1) != 0) {
        try {
            inputContentInfo.requestPermission();
            if (inputContentInfo.getDescription().getMimeTypeCount() > 0) {
                inputContentInfo.requestPermission();
                Uri contentUri = inputContentInfo.getContentUri();
                String mimeType = inputContentInfo.getDescription().getMimeType(0);
                Context context = this.f419a.getContext();
                if (contentUri != null) {
                    try {
                        InputStream openInputStream = context.getContentResolver().openInputStream(contentUri);
                        if (openInputStream != null) {
                            byte[] h2 = h(openInputStream, 65536);
                            HashMap hashMap = new HashMap();
                            hashMap.put(""mimeType"", mimeType);
                            hashMap.put(""data"", h2);
                            hashMap.put(""uri"", contentUri.toString());
                            this.f421c.b(this.f420b, hashMap);
                            inputContentInfo.releasePermission();
                            return true;
                        }
                    } catch (FileNotFoundException unused) {
                        inputContentInfo.releasePermission();
                        return false;
                    }
                }
                inputContentInfo.releasePermission();
            }
        } catch (Exception unused2) {
        }
    }
    return false;
}"
"<io.flutter.plugin.editing.b: boolean beginBatchEdit()>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean beginBatchEdit() {
    this.f422d.b();
    this.f432n++;
    return super.beginBatchEdit();
}"
"<io.flutter.plugin.editing.b: boolean deleteSurroundingText(int,int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean deleteSurroundingText(int i2, int i3) {
    if (this.f422d.i() == -1) {
        return true;
    }
    return super.deleteSurroundingText(i2, i3);
}"
"<io.flutter.plugin.editing.b: boolean b(int)>","private boolean b(int i2) {
    if (i2 == 16908319) {
        setSelection(0, this.f422d.length());
        return true;
    }
    if (i2 == 16908320) {
        int selectionStart = Selection.getSelectionStart(this.f422d);
        int selectionEnd = Selection.getSelectionEnd(this.f422d);
        if (selectionStart != selectionEnd) {
            int min = Math.min(selectionStart, selectionEnd);
            int max = Math.max(selectionStart, selectionEnd);
            ((ClipboardManager) this.f419a.getContext().getSystemService(""clipboard"")).setPrimaryClip(ClipData.newPlainText(""text label?"", this.f422d.subSequence(min, max)));
            this.f422d.delete(min, max);
            setSelection(min, min);
        }
        return true;
    }
    if (i2 == 16908321) {
        int selectionStart2 = Selection.getSelectionStart(this.f422d);
        int selectionEnd2 = Selection.getSelectionEnd(this.f422d);
        if (selectionStart2 != selectionEnd2) {
            ((ClipboardManager) this.f419a.getContext().getSystemService(""clipboard"")).setPrimaryClip(ClipData.newPlainText(""text label?"", this.f422d.subSequence(Math.min(selectionStart2, selectionEnd2), Math.max(selectionStart2, selectionEnd2))));
        }
        return true;
    }
    if (i2 != 16908322) {
        return false;
    }
    ClipData primaryClip = ((ClipboardManager) this.f419a.getContext().getSystemService(""clipboard"")).getPrimaryClip();
    if (primaryClip != null) {
        CharSequence coerceToText = primaryClip.getItemAt(0).coerceToText(this.f419a.getContext());
        int max2 = Math.max(0, Selection.getSelectionStart(this.f422d));
        int max3 = Math.max(0, Selection.getSelectionEnd(this.f422d));
        int min2 = Math.min(max2, max3);
        int max4 = Math.max(max2, max3);
        if (min2 != max4) {
            this.f422d.delete(min2, max4);
        }
        this.f422d.insert(min2, coerceToText);
        int length = min2 + coerceToText.length();
        setSelection(length, length);
    }
    return true;
}"
"<io.flutter.plugin.editing.b: boolean requestCursorUpdates(int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean requestCursorUpdates(int i2) {
    if (Build.VERSION.SDK_INT < 21) {
        return false;
    }
    if ((i2 & 1) != 0) {
        this.f428j.updateCursorAnchorInfo(this.f419a, c());
    }
    boolean z2 = (i2 & 2) != 0;
    if (z2 != this.f425g) {
        StringBuilder sb = new StringBuilder();
        sb.append(""The input method toggled cursor monitoring "");
        sb.append(z2 ? ""on"" : ""off"");
        l.b.a(""InputConnectionAdaptor"", sb.toString());
    }
    this.f425g = z2;
    return true;
}"
"<io.flutter.plugin.editing.b: byte[] h(java.io.InputStream,int)>","private byte[] h(InputStream inputStream, int i2) {
    int i3;
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    byte[] bArr = new byte[i2];
    while (true) {
        try {
            i3 = inputStream.read(bArr);
        } catch (IOException unused) {
            i3 = -1;
        }
        if (i3 == -1) {
            return byteArrayOutputStream.toByteArray();
        }
        byteArrayOutputStream.write(bArr, 0, i3);
    }
}"
"<io.flutter.plugin.editing.b: boolean performContextMenuAction(int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean performContextMenuAction(int i2) {
    beginBatchEdit();
    boolean b2 = b(i2);
    endBatchEdit();
    return b2;
}"
"<io.flutter.plugin.editing.b: boolean clearMetaKeyStates(int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean clearMetaKeyStates(int i2) {
    return super.clearMetaKeyStates(i2);
}"
"<io.flutter.plugin.editing.b: boolean g(boolean,boolean)>","private boolean g(boolean z2, boolean z3) {
    int selectionStart = Selection.getSelectionStart(this.f422d);
    int selectionEnd = Selection.getSelectionEnd(this.f422d);
    boolean z4 = false;
    if (selectionStart < 0 || selectionEnd < 0) {
        return false;
    }
    if (selectionStart == selectionEnd && !z3) {
        z4 = true;
    }
    beginBatchEdit();
    if (z4) {
        if (z2) {
            Selection.moveUp(this.f422d, this.f429k);
        } else {
            Selection.moveDown(this.f422d, this.f429k);
        }
        int selectionStart2 = Selection.getSelectionStart(this.f422d);
        setSelection(selectionStart2, selectionStart2);
    } else {
        if (z2) {
            Selection.extendUp(this.f422d, this.f429k);
        } else {
            Selection.extendDown(this.f422d, this.f429k);
        }
        setSelection(Selection.getSelectionStart(this.f422d), Selection.getSelectionEnd(this.f422d));
    }
    endBatchEdit();
    return true;
}"
"<io.flutter.plugin.editing.b: boolean finishComposingText()>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean finishComposingText() {
    return super.finishComposingText();
}"
"<io.flutter.plugin.editing.b: boolean setComposingRegion(int,int)>","// android.view.inputmethod.BaseInputConnection, android.view.inputmethod.InputConnection
@Override
public boolean setComposingRegion(int i2, int i3) {
    return super.setComposingRegion(i2, i3);
}"
"<org.chromium.support_lib_boundary.WebViewRendererBoundaryInterface: boolean terminate()>","boolean terminate();"
"<kotlin.jvm.internal.c: int hashCode()>","public int hashCode() {
    return m0.a.a(this).hashCode();
}"
"<kotlin.jvm.internal.c: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    return (obj instanceof c) && i.a(m0.a.a(this), m0.a.a((r0.c) obj));
}"
"<c0.c: void a(boolean,java.lang.Object)>","public static void a(boolean z2, Object obj) {
    if (!z2) {
        throw new IllegalStateException(String.valueOf(obj));
    }
}"
"<io.flutter.embedding.engine.a: void e()>","public void e() {
    l.b.f(""FlutterEngine"", ""Destroying."");
    Iterator<b> it = this.f375s.iterator();
    while (it.hasNext()) {
        it.next().b();
    }
    this.f360d.l();
    this.f374r.X();
    this.f359c.l();
    this.f357a.removeEngineLifecycleListener(this.f376t);
    this.f357a.setDeferredComponentManager(null);
    this.f357a.detachFromNativeAndReleaseResources();
    if (l.a.e().a() != null) {
        l.a.e().a().e();
        this.f363g.c(null);
    }
}"
"<io.flutter.embedding.engine.a: void d()>","private void d() {
    l.b.f(""FlutterEngine"", ""Attaching to JNI."");
    this.f357a.attachToNative();
    if (!v()) {
        throw new RuntimeException(""FlutterEngine failed to attach to its native Object reference."");
    }
}"
"<io.flutter.embedding.engine.a: q.b o()>","public q.b o() {
    return this.f360d;
}"
"<io.flutter.embedding.engine.a: w.a p()>","public w.a p() {
    return this.f358b;
}"
"<io.flutter.embedding.engine.a: x.e i()>","public x.e i() {
    return this.f364h;
}"
"<io.flutter.embedding.engine.a: x.a f()>","public x.a f() {
    return this.f362f;
}"
"<io.flutter.embedding.engine.a: r.b g()>","public r.b g() {
    return this.f360d;
}"
"<io.flutter.embedding.engine.a: boolean v()>","private boolean v() {
    return this.f357a.isAttached();
}"
"<io.flutter.embedding.engine.a: m.a h()>","public m.a h() {
    return this.f359c;
}"
"<io.flutter.embedding.engine.a: z.a j()>","public z.a j() {
    return this.f361e;
}"
"<u0.r0: void run()>","// java.lang.Runnable
@Override
public void run() {
    boolean J;
    f2.f1292a.c(this);
    c.a();
    try {
        if (!U()) {
            if (J) {
                return;
            } else {
                return;
            }
        }
        long j2 = Long.MAX_VALUE;
        while (true) {
            Thread.interrupted();
            long K = K();
            if (K == Long.MAX_VALUE) {
                c.a();
                long nanoTime = System.nanoTime();
                if (j2 == Long.MAX_VALUE) {
                    j2 = f1335k + nanoTime;
                }
                long j3 = j2 - nanoTime;
                if (j3 <= 0) {
                    _thread = null;
                    R();
                    c.a();
                    if (J()) {
                        return;
                    }
                    A();
                    return;
                }
                K = q0.f.d(K, j3);
            } else {
                j2 = Long.MAX_VALUE;
            }
            if (K > 0) {
                if (T()) {
                    _thread = null;
                    R();
                    c.a();
                    if (J()) {
                        return;
                    }
                    A();
                    return;
                }
                c.a();
                LockSupport.parkNanos(this, K);
            }
        }
    } finally {
        _thread = null;
        R();
        c.a();
        if (!J()) {
            A();
        }
    }
}"
"<u0.r0: boolean U()>","private final synchronized boolean U() {
    if (T()) {
        return false;
    }
    debugStatus = 1;
    notifyAll();
    return true;
}"
"<u0.r0: void R()>","private final synchronized void R() {
    if (T()) {
        debugStatus = 3;
        M();
        notifyAll();
    }
}"
"<u0.r0: boolean T()>","private final boolean T() {
    int i2 = debugStatus;
    return i2 == 2 || i2 == 3;
}"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void removeWebMessageListener(java.lang.String)>","void removeWebMessageListener(String str);"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void setWebViewRendererClient(java.lang.reflect.InvocationHandler)>","void setWebViewRendererClient(InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void addWebMessageListener(java.lang.String,java.lang.String[],java.lang.reflect.InvocationHandler)>","void addWebMessageListener(String str, String[] strArr, InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void postMessageToMainFrame(java.lang.reflect.InvocationHandler,android.net.Uri)>","void postMessageToMainFrame(InvocationHandler invocationHandler, Uri uri);"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: void insertVisualStateCallback(long,java.lang.reflect.InvocationHandler)>","void insertVisualStateCallback(long j2, InvocationHandler invocationHandler);"
"<kotlinx.coroutines.internal.i: int b(java.lang.Class,int)>","private static final int b(Class<?> cls, int i2) {
    do {
        int length = cls.getDeclaredFields().length;
        int i3 = 0;
        for (int i4 = 0; i4 < length; i4++) {
            if (!Modifier.isStatic(r0[i4].getModifiers())) {
                i3++;
            }
        }
        i2 += i3;
        cls = cls.getSuperclass();
    } while (cls != null);
    return i2;
}"
"<kotlinx.coroutines.internal.i: int c(java.lang.Class,int,int,java.lang.Object)>","static /* synthetic */
int c(Class cls, int i2, int i3, Object obj) {
    if ((i3 & 1) != 0) {
        i2 = 0;
    }
    return b(cls, i2);
}"
"<kotlinx.coroutines.internal.i: int d(java.lang.Class,int)>","private static final int d(Class<?> cls, int i2) {
    Object a2;
    m0.a.b(cls);
    try {
        k.a aVar = d0.k.f144d;
        a2 = d0.k.a(Integer.valueOf(c(cls, 0, 1, null)));
    } catch (Throwable th) {
        k.a aVar2 = d0.k.f144d;
        a2 = d0.k.a(d0.l.a(th));
    }
    Integer valueOf = Integer.valueOf(i2);
    if (d0.k.c(a2)) {
        a2 = valueOf;
    }
    return ((Number) a2).intValue();
}"
"<g0.d: void resumeWith(java.lang.Object)>","void resumeWith(Object obj);"
"<u0.z: int hashCode()>","public int hashCode() {
    Object obj = this.f1375a;
    return ((obj == null ? 0 : obj.hashCode()) * 31) + this.f1376b.hashCode();
}"
"<u0.z: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof z)) {
        return false;
    }
    z zVar = (z) obj;
    return kotlin.jvm.internal.i.a(this.f1375a, zVar.f1375a) && kotlin.jvm.internal.i.a(this.f1376b, zVar.f1376b);
}"
"<k.e: boolean b()>","boolean b();"
"<e0.u: boolean a(java.lang.Void)>","public boolean a(Void element) {
    kotlin.jvm.internal.i.e(element, ""element"");
    return false;
}"
"<e0.u: boolean add(java.lang.Object)>","// java.util.Set, java.util.Collection
@Override
public /* bridge */
/* synthetic */
boolean add(Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.u: void clear()>","// java.util.Set, java.util.Collection
@Override
public void clear() {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.u: int hashCode()>","// java.util.Set, java.util.Collection
@Override
public int hashCode() {
    return 0;
}"
"<e0.u: boolean equals(java.lang.Object)>","// java.util.Set, java.util.Collection
@Override
public boolean equals(Object obj) {
    return (obj instanceof Set) && ((Set) obj).isEmpty();
}"
"<e0.u: boolean isEmpty()>","// java.util.Set, java.util.Collection
@Override
public boolean isEmpty() {
    return true;
}"
"<e0.u: boolean remove(java.lang.Object)>","// java.util.Set, java.util.Collection
@Override
public boolean remove(Object obj) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.u: int size()>","// java.util.Set, java.util.Collection
@Override
public final /* bridge */
int size() {
    return b();
}"
"<e0.u: boolean containsAll(java.util.Collection)>","// java.util.Set, java.util.Collection
@Override
public boolean containsAll(Collection elements) {
    kotlin.jvm.internal.i.e(elements, ""elements"");
    return elements.isEmpty();
}"
"<e0.u: int b()>","public int b() {
    return 0;
}"
"<e0.u: boolean removeAll(java.util.Collection)>","// java.util.Set, java.util.Collection
@Override
public boolean removeAll(Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.u: boolean contains(java.lang.Object)>","// java.util.Set, java.util.Collection
@Override
public final /* bridge */
boolean contains(Object obj) {
    if (obj instanceof Void) {
        return a((Void) obj);
    }
    return false;
}"
"<e0.u: boolean retainAll(java.util.Collection)>","// java.util.Set, java.util.Collection
@Override
public boolean retainAll(Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<e0.u: boolean addAll(java.util.Collection)>","// java.util.Set, java.util.Collection
@Override
public boolean addAll(Collection collection) {
    throw new UnsupportedOperationException(""Operation is not supported for read-only collection"");
}"
"<y.i: void e(y.i$c)>","public void e(c cVar) {
    if (this.f1681d != null) {
        this.f1678a.c(this.f1679b, cVar != null ? new a(cVar) : null, this.f1681d);
    } else {
        this.f1678a.d(this.f1679b, cVar != null ? new a(cVar) : null);
    }
}"
"<y.i: void c(java.lang.String,java.lang.Object)>","// y.i.d
@Override
public void c() {
    this.f1684a.a(null);
}"
"<y.i: void d(java.lang.String,java.lang.Object,y.i$d)>","public void d(String str, Object obj, d dVar) {
    this.f1678a.a(this.f1679b, this.f1680c.b(new h(str, obj)), dVar == null ? null : new b(dVar));
}"
"<kotlin.jvm.internal.g: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof g) {
        g gVar = (g) obj;
        return getName().equals(gVar.getName()) && getSignature().equals(gVar.getSignature()) && this.flags == gVar.flags && this.arity == gVar.arity && i.a(getBoundReceiver(), gVar.getBoundReceiver()) && i.a(getOwner(), gVar.getOwner());
    }
    if (obj instanceof r0.e) {
        return obj.equals(compute());
    }
    return false;
}"
"<kotlin.jvm.internal.g: int getArity()>","// kotlin.jvm.internal.f
@Override
public int getArity() {
    return this.arity;
}"
"<kotlin.jvm.internal.g: r0.e getReflected()>","/* JADX INFO: Access modifiers changed from: protected */
// kotlin.jvm.internal.a
@Override
public r0.e getReflected() {
    return (r0.e) super.getReflected();
}"
"<kotlin.jvm.internal.g: r0.b computeReflected()>","// kotlin.jvm.internal.a
@Override
protected r0.b computeReflected() {
    return l.a(this);
}"
"<kotlin.jvm.internal.g: boolean isExternal()>","// r0.e
@Override
public boolean isExternal() {
    return getReflected().isExternal();
}"
"<kotlin.jvm.internal.g: boolean isInfix()>","// r0.e
@Override
public boolean isInfix() {
    return getReflected().isInfix();
}"
"<kotlin.jvm.internal.g: boolean isOperator()>","// r0.e
@Override
public boolean isOperator() {
    return getReflected().isOperator();
}"
"<kotlin.jvm.internal.g: int hashCode()>","public int hashCode() {
    return (((getOwner() == null ? 0 : getOwner().hashCode() * 31) + getName().hashCode()) * 31) + getSignature().hashCode();
}"
"<kotlin.jvm.internal.g: boolean isInline()>","// r0.e
@Override
public boolean isInline() {
    return getReflected().isInline();
}"
"<kotlin.jvm.internal.g: boolean isSuspend()>","// kotlin.jvm.internal.a, r0.b
@Override
public boolean isSuspend() {
    return getReflected().isSuspend();
}"
"<t0.e: void a(java.lang.Appendable,java.lang.Object,n0.l)>","/* JADX WARN: Multi-variable type inference failed */
/* JADX WARN: Type inference failed for: r2v0, types: [T, java.lang.Object] */
/* JADX WARN: Type inference failed for: r2v5 */
/* JADX WARN: Type inference failed for: r2v7, types: [java.lang.Object] */
public static <T> void a(Appendable appendable, T t2, n0.l<? super T, ? extends CharSequence> lVar) {
    CharSequence valueOf;
    kotlin.jvm.internal.i.e(appendable, ""<this>"");
    if (lVar != null) {
        t2 = (T) lVar.invoke(t2);
    } else {
        if (!(t2 == 0 ? true : t2 instanceof CharSequence)) {
            if (t2 instanceof Character) {
                appendable.append(((Character) t2).charValue());
                return;
            } else {
                valueOf = String.valueOf((Object) t2);
                appendable.append(valueOf);
            }
        }
    }
    valueOf = (CharSequence) t2;
    appendable.append(valueOf);
}"
"<io.flutter.plugin.editing.d: void a(java.lang.String,java.lang.String,y.i$d)>","// x.n.b
@Override
public void a(String str, String str2, i.d dVar) {
    if (this.f450d != null) {
        dVar.b(""error"", ""Previous spell check request still pending."", null);
    } else {
        this.f450d = dVar;
        c(str, str2);
    }
}"
"<io.flutter.plugin.editing.d: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>","// android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener
@Override
public void onGetSentenceSuggestions(SentenceSuggestionsInfo[] sentenceSuggestionsInfoArr) {
    ArrayList arrayList;
    i.d dVar;
    if (sentenceSuggestionsInfoArr.length == 0) {
        dVar = this.f450d;
        arrayList = new ArrayList();
    } else {
        arrayList = new ArrayList();
        SentenceSuggestionsInfo sentenceSuggestionsInfo = sentenceSuggestionsInfoArr[0];
        for (int i2 = 0; i2 < sentenceSuggestionsInfo.getSuggestionsCount(); i2++) {
            SuggestionsInfo suggestionsInfoAt = sentenceSuggestionsInfo.getSuggestionsInfoAt(i2);
            int suggestionsCount = suggestionsInfoAt.getSuggestionsCount();
            if (suggestionsCount > 0) {
                HashMap hashMap = new HashMap();
                int offsetAt = sentenceSuggestionsInfo.getOffsetAt(i2);
                int lengthAt = sentenceSuggestionsInfo.getLengthAt(i2) + offsetAt;
                hashMap.put(""startIndex"", Integer.valueOf(offsetAt));
                hashMap.put(""endIndex"", Integer.valueOf(lengthAt));
                ArrayList arrayList2 = new ArrayList();
                for (int i3 = 0; i3 < suggestionsCount; i3++) {
                    arrayList2.add(suggestionsInfoAt.getSuggestionAt(i3));
                }
                hashMap.put(""suggestions"", arrayList2);
                arrayList.add(hashMap);
            }
        }
        dVar = this.f450d;
    }
    dVar.a(arrayList);
    this.f450d = null;
}"
"<io.flutter.plugin.editing.d: void b()>","public void b() {
    this.f447a.b(null);
    SpellCheckerSession spellCheckerSession = this.f449c;
    if (spellCheckerSession != null) {
        spellCheckerSession.close();
    }
}"
"<io.flutter.plugin.editing.d: void c(java.lang.String,java.lang.String)>","public void c(String str, String str2) {
    Locale b2 = z.a.b(str);
    if (this.f449c == null) {
        this.f449c = this.f448b.newSpellCheckerSession(null, b2, this, true);
    }
    this.f449c.getSentenceSuggestions(new TextInfo[] { new TextInfo(str2) }, 5);
}"
"<io.flutter.plugin.editing.d: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>","// android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener
@Override
public void onGetSuggestions(SuggestionsInfo[] suggestionsInfoArr) {
}"
"<androidx.lifecycle.b: void a(androidx.lifecycle.f,androidx.lifecycle.c$a,boolean,androidx.lifecycle.i)>","void a(f fVar, c.a aVar, boolean z2, i iVar);"
"<org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,java.lang.reflect.InvocationHandler)>","void onSafeBrowsingHit(WebView webView, WebResourceRequest webResourceRequest, int i2, InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,java.lang.reflect.InvocationHandler)>","void onReceivedError(WebView webView, WebResourceRequest webResourceRequest, InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>","boolean shouldOverrideUrlLoading(WebView webView, WebResourceRequest webResourceRequest);"
"<org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onPageCommitVisible(android.webkit.WebView,java.lang.String)>","void onPageCommitVisible(WebView webView, String str);"
"<org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: boolean onWebAuthnIntent(android.webkit.WebView,android.app.PendingIntent,java.lang.reflect.InvocationHandler)>","boolean onWebAuthnIntent(WebView webView, PendingIntent pendingIntent, InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebViewClientBoundaryInterface: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)>","void onReceivedHttpError(WebView webView, WebResourceRequest webResourceRequest, WebResourceResponse webResourceResponse);"
"<kotlin.coroutines.jvm.internal.h: void c(g0.d)>","public static final void c(g0.d<?> frame) {
    kotlin.jvm.internal.i.e(frame, ""frame"");
}"
"<kotlin.coroutines.jvm.internal.h: void b(g0.d)>","public static final void b(g0.d<?> frame) {
    kotlin.jvm.internal.i.e(frame, ""frame"");
}"
"<org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>","boolean stop(OutputStream outputStream, Executor executor);"
"<org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: boolean isTracing()>","boolean isTracing();"
"<org.chromium.support_lib_boundary.TracingControllerBoundaryInterface: void start(int,java.util.Collection,int)>","void start(int i2, Collection<String> collection, int i3);"
"<io.flutter.plugin.platform.a: boolean a(android.view.MotionEvent,boolean)>","public boolean a(MotionEvent motionEvent, boolean z2) {
    io.flutter.view.c cVar = this.f499a;
    if (cVar == null) {
        return false;
    }
    return cVar.K(motionEvent, z2);
}"
"<io.flutter.plugin.platform.a: void c(io.flutter.view.c)>","/* JADX INFO: Access modifiers changed from: package-private */
public void c(io.flutter.view.c cVar) {
    this.f499a = cVar;
}"
"<io.flutter.plugin.platform.a: boolean b(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)>","public boolean b(View view, View view2, AccessibilityEvent accessibilityEvent) {
    io.flutter.view.c cVar = this.f499a;
    if (cVar == null) {
        return false;
    }
    return cVar.x(view, view2, accessibilityEvent);
}"
"<m.c: void h(java.lang.Error)>","private static void h(Error error) {
    Thread currentThread = Thread.currentThread();
    if (currentThread.getUncaughtExceptionHandler() == null) {
        throw error;
    }
    currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, error);
}"
"<m.c: void d(java.lang.String,y.b$a)>","// y.b
@Override
public void d(String str, b.a aVar) {
    c(str, aVar, null);
}"
"<m.c: void c(java.lang.String,y.b$a,y.b$c)>","// y.b
@Override
public void c(String str, b.a aVar, b.c cVar) {
    if (aVar == null) {
        l.b.f(""DartMessenger"", ""Removing handler for channel '"" + str + ""'"");
        synchronized (this.f1176d) {
            this.f1174b.remove(str);
        }
        return;
    }
    b bVar = null;
    if (cVar != null && (bVar = this.f1181i.get(cVar)) == null) {
        throw new IllegalArgumentException(""Unrecognized TaskQueue, use BinaryMessenger to create your TaskQueue (ex makeBackgroundTaskQueue)."");
    }
    l.b.f(""DartMessenger"", ""Setting handler for channel '"" + str + ""'"");
    synchronized (this.f1176d) {
        this.f1174b.put(str, new d(aVar, bVar));
        List<a> remove = this.f1175c.remove(str);
        if (remove == null) {
            return;
        }
        for (a aVar2 : remove) {
            g(str, this.f1174b.get(str), aVar2.f1183a, aVar2.f1184b, aVar2.f1185c);
        }
    }
}"
"<m.c: void e(int,java.nio.ByteBuffer)>","// m.d
@Override
public void e(int i2, ByteBuffer byteBuffer) {
    l.b.f(""DartMessenger"", ""Received message reply from Dart."");
    b.InterfaceC0039b remove = this.f1178f.remove(Integer.valueOf(i2));
    if (remove != null) {
        try {
            l.b.f(""DartMessenger"", ""Invoking registered callback for reply from Dart."");
            remove.a(byteBuffer);
            if (byteBuffer == null || !byteBuffer.isDirect()) {
                return;
            }
            byteBuffer.limit(0);
        } catch (Error e2) {
            h(e2);
        } catch (Exception e3) {
            l.b.c(""DartMessenger"", ""Uncaught exception in binary message reply handler"", e3);
        }
    }
}"
"<m.c: void b(java.lang.String,java.nio.ByteBuffer,int,long)>","// m.d
@Override
public void b(String str, ByteBuffer byteBuffer, int i2, long j2) {
    d dVar;
    boolean z2;
    l.b.f(""DartMessenger"", ""Received message from Dart over channel '"" + str + ""'"");
    synchronized (this.f1176d) {
        dVar = this.f1174b.get(str);
        z2 = this.f1177e.get() && dVar == null;
        if (z2) {
            if (!this.f1175c.containsKey(str)) {
                this.f1175c.put(str, new LinkedList());
            }
            this.f1175c.get(str).add(new a(byteBuffer, i2, j2));
        }
    }
    if (z2) {
        return;
    }
    g(str, dVar, byteBuffer, i2, j2);
}"
"<m.c: void j(java.lang.String,int,m.c$d,java.nio.ByteBuffer,long)>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void j(String str, int i2, d dVar, ByteBuffer byteBuffer, long j2) {
    c0.e.e(""PlatformChannel ScheduleHandler on "" + str, i2);
    c0.e.a(""DartMessenger#handleMessageFromDart on "" + str);
    try {
        i(dVar, byteBuffer, i2);
        if (byteBuffer != null && byteBuffer.isDirect()) {
            byteBuffer.limit(0);
        }
    } finally {
        this.f1173a.cleanupMessageData(j2);
        c0.e.d();
    }
}"
"<m.c: void g(java.lang.String,m.c$d,java.nio.ByteBuffer,int,long)>","private void g(final String str, final d dVar, final ByteBuffer byteBuffer, final int i2, final long j2) {
    b bVar = dVar != null ? dVar.f1188b : null;
    c0.e.b(""PlatformChannel ScheduleHandler on "" + str, i2);
    Runnable runnable = new // from class: m.b
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            c.this.j(str, i2, dVar, byteBuffer, j2);
        }
    };
    if (bVar == null) {
        bVar = this.f1180h;
    }
    bVar.a(runnable);
}"
"<m.c: void a(java.lang.String,java.nio.ByteBuffer,y.b$b)>","void a(Runnable runnable);"
"<m.c: void i(m.c$d,java.nio.ByteBuffer,int)>","private void i(d dVar, ByteBuffer byteBuffer, int i2) {
    if (dVar != null) {
        try {
            l.b.f(""DartMessenger"", ""Deferring to registered handler to process message."");
            dVar.f1187a.a(byteBuffer, new e(this.f1173a, i2));
            return;
        } catch (Error e2) {
            h(e2);
            return;
        } catch (Exception e3) {
            l.b.c(""DartMessenger"", ""Uncaught exception in binary message listener"", e3);
        }
    } else {
        l.b.f(""DartMessenger"", ""No registered handler for message. Responding to Dart with empty reply message."");
    }
    this.f1173a.invokePlatformMessageEmptyResponseCallback(i2);
}"
"<g0.f: void a(n0.p,java.lang.Object,g0.d)>","public static final <R, T> void a(p<? super R, ? super d<? super T>, ? extends Object> pVar, R r2, d<? super T> completion) {
    d a2;
    d b2;
    i.e(pVar, ""<this>"");
    i.e(completion, ""completion"");
    a2 = h0.c.a(pVar, r2, completion);
    b2 = h0.c.b(a2);
    k.a aVar = k.f144d;
    b2.resumeWith(k.a(q.f150a));
}"
"<androidx.window.embedding.SplitController: void clearRegisteredRules()>","public final void clearRegisteredRules() {
    this.embeddingBackend.setSplitRules(this.staticSplitRules);
}"
"<androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)>","public final void unregisterRule(EmbeddingRule rule) {
    i.e(rule, ""rule"");
    this.embeddingBackend.unregisterRule(rule);
}"
"<androidx.window.embedding.SplitController: void initialize(android.content.Context,int)>","public final void initialize(Context context, int i2) {
    i.e(context, ""context"");
    Set<EmbeddingRule> parseSplitRules$window_release = new SplitRuleParser().parseSplitRules$window_release(context, i2);
    SplitController companion = getInstance();
    if (parseSplitRules$window_release == null) {
        parseSplitRules$window_release = e0.b();
    }
    companion.setStaticSplitRules(parseSplitRules$window_release);
}"
"<androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)>","/* JADX INFO: Access modifiers changed from: private */
public final void setStaticSplitRules(Set<? extends EmbeddingRule> set) {
    this.staticSplitRules = set;
    this.embeddingBackend.setSplitRules(set);
}"
"<androidx.window.embedding.SplitController: boolean isSplitSupported()>","public final boolean isSplitSupported() {
    return this.embeddingBackend.isSplitSupported();
}"
"<androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)>","public final void registerRule(EmbeddingRule rule) {
    i.e(rule, ""rule"");
    this.embeddingBackend.registerRule(rule);
}"
"<androidx.window.embedding.SplitController: void removeSplitListener(e.a)>","public final void removeSplitListener(e.a<List<SplitInfo>> consumer) {
    i.e(consumer, ""consumer"");
    this.embeddingBackend.unregisterSplitListenerForActivity(consumer);
}"
"<androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,e.a)>","public final void addSplitListener(Activity activity, Executor executor, e.a<List<SplitInfo>> consumer) {
    i.e(activity, ""activity"");
    i.e(executor, ""executor"");
    i.e(consumer, ""consumer"");
    this.embeddingBackend.registerSplitListenerForActivity(activity, executor, consumer);
}"
"<u0.h2: void z0(g0.g,java.lang.Object)>","public final void z0(g0.g gVar, Object obj) {
    this.f1297g = gVar;
    this.f1298h = obj;
}"
"<u0.h2: void t0(java.lang.Object)>","// kotlinx.coroutines.internal.x, u0.a
@Override
protected void t0(Object obj) {
    g0.g gVar = this.f1297g;
    if (gVar != null) {
        kotlinx.coroutines.internal.d0.a(gVar, this.f1298h);
        this.f1297g = null;
        this.f1298h = null;
    }
    Object a2 = c0.a(obj, this.f1081f);
    g0.d<T> dVar = this.f1081f;
    g0.g context = dVar.getContext();
    Object c2 = kotlinx.coroutines.internal.d0.c(context, null);
    h2<?> e2 = c2 != kotlinx.coroutines.internal.d0.f1022a ? e0.e(dVar, context, c2) : null;
    try {
        this.f1081f.resumeWith(a2);
        d0.q qVar = d0.q.f150a;
    } finally {
        if (e2 == null || e2.y0()) {
            kotlinx.coroutines.internal.d0.a(context, c2);
        }
    }
}"
"<u0.h2: boolean y0()>","public final boolean y0() {
    if (this.f1297g == null) {
        return false;
    }
    this.f1297g = null;
    this.f1298h = null;
    return true;
}"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()>","/* JADX INFO: Access modifiers changed from: package-private */
public void remove() {
    this.view.setWindowInsetsAnimationCallback(null);
    this.view.setOnApplyWindowInsetsListener(null);
}"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()>","/* JADX INFO: Access modifiers changed from: package-private */
public void install() {
    this.view.setWindowInsetsAnimationCallback(this.animationCallback);
    this.view.setOnApplyWindowInsetsListener(this.insetsListener);
}"
"<u0.s0: boolean y0()>","private final boolean y0() {
    do {
        int i2 = this._decision;
        if (i2 != 0) {
            if (i2 == 1) {
                return false;
            }
            throw new IllegalStateException(""Already resumed"".toString());
        }
    } while (!f1337g.compareAndSet(this, 0, 2));
    return true;
}"
"<u0.s0: void t0(java.lang.Object)>","// kotlinx.coroutines.internal.x, u0.a
@Override
protected void t0(Object obj) {
    g0.d b2;
    if (y0()) {
        return;
    }
    b2 = h0.c.b(this.f1081f);
    kotlinx.coroutines.internal.h.c(b2, c0.a(obj, this.f1081f), null, 2, null);
}"
"<u0.s0: void x(java.lang.Object)>","// kotlinx.coroutines.internal.x, u0.v1
@Override
protected void x(Object obj) {
    t0(obj);
}"
"<kotlinx.coroutines.scheduling.f: long a()>","// kotlinx.coroutines.scheduling.h
@Override
public long a() {
    return System.nanoTime();
}"
"<u0.s: void g(u0.c2)>","void g(c2 c2Var);"
"<kotlinx.coroutines.CoroutineExceptionHandler: void handleException(g0.g,java.lang.Throwable)>","void handleException(g gVar, Throwable th);"
"<u0.j: void a(java.lang.Throwable)>","public abstract void a(Throwable th);"
"<androidx.window.layout.b: void c()>","public static void c() {
    WindowInfoTracker.Companion.reset();
}"
"<androidx.window.layout.b: void b(androidx.window.layout.WindowInfoTrackerDecorator)>","public static void b(WindowInfoTrackerDecorator windowInfoTrackerDecorator) {
    WindowInfoTracker.Companion.overrideDecorator(windowInfoTrackerDecorator);
}"
"<x.h: void a()>","// y.i.c
@Override
public void a(y.h hVar, i.d dVar) {
    dVar.a(null);
}"
"<x.h: void c(java.lang.String)>","public void c(String str) {
    l.b.f(""NavigationChannel"", ""Sending message to set initial route to '"" + str + ""'"");
    this.f1496a.c(""setInitialRoute"", str);
}"
"<x.h: void b(java.lang.String)>","public void b(String str) {
    l.b.f(""NavigationChannel"", ""Sending message to push route '"" + str + ""'"");
    this.f1496a.c(""pushRoute"", str);
}"
"<s.a: void a(s.b)>","void a(b bVar);"
"<s.a: void b()>","void b();"
"<kotlinx.coroutines.internal.p: int c()>","public final int c() {
    return ((q) this._cur).f();
}"
"<kotlinx.coroutines.internal.p: void b()>","public final void b() {
    while (true) {
        q qVar = (q) this._cur;
        if (qVar.d()) {
            return;
        } else {
            c.a(f1061a, this, qVar, qVar.i());
        }
    }
}"
"<kotlinx.coroutines.internal.p: boolean a(java.lang.Object)>","public final boolean a(E e2) {
    while (true) {
        q qVar = (q) this._cur;
        int a2 = qVar.a(e2);
        if (a2 == 0) {
            return true;
        }
        if (a2 == 1) {
            c.a(f1061a, this, qVar, qVar.i());
        } else if (a2 == 2) {
            return false;
        }
    }
}"
"<kotlin.jvm.internal.j: int getArity()>","// kotlin.jvm.internal.f
@Override
public int getArity() {
    return this.arity;
}"
"<io.flutter.embedding.android.m: void a(android.view.KeyEvent,io.flutter.embedding.android.s$d$a)>","// io.flutter.embedding.android.s.d
@Override
public void a(KeyEvent keyEvent, final s.d.a aVar) {
    int action = keyEvent.getAction();
    if (action == 0 || action == 1) {
        this.f297a.e(new d.b(keyEvent, this.f298b.a(keyEvent.getUnicodeChar())), action != 0, new // from class: io.flutter.embedding.android.l
        d.a() {

            // x.d.a
            @Override
            public final void a(boolean z2) {
                s.d.a.this.a(z2);
            }
        });
    } else {
        aVar.a(false);
    }
}"
"<org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface: void setProxyOverride(java.lang.String[][],java.lang.String[],java.lang.Runnable,java.util.concurrent.Executor,boolean)>","void setProxyOverride(String[][] strArr, String[] strArr2, Runnable runnable, Executor executor);"
"<org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface: void setProxyOverride(java.lang.String[][],java.lang.String[],java.lang.Runnable,java.util.concurrent.Executor)>","void setProxyOverride(String[][] strArr, String[] strArr2, Runnable runnable, Executor executor);"
"<org.chromium.support_lib_boundary.ProxyControllerBoundaryInterface: void clearProxyOverride(java.lang.Runnable,java.util.concurrent.Executor)>","void clearProxyOverride(Runnable runnable, Executor executor);"
"<c0.h: boolean h(java.lang.Class[],android.view.View)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
boolean h(Class[] clsArr, View view) {
    for (Class cls : clsArr) {
        if (cls.isInstance(view)) {
            return true;
        }
    }
    return false;
}"
"<c0.h: boolean f(android.view.View,java.lang.Class[])>","public static boolean f(View view, final Class<? extends View>[] clsArr) {
    return i(view, new // from class: c0.f
    a() {

        // c0.h.a
        @Override
        public final boolean a(View view2) {
            boolean h2;
            h2 = h.h(clsArr, view2);
            return h2;
        }
    });
}"
"<c0.h: int d(int)>","public static int d(int i2) {
    return Build.VERSION.SDK_INT >= 17 ? View.generateViewId() : i2;
}"
"<c0.h: boolean c(android.view.View)>","public static boolean c(View view) {
    return i(view, new // from class: c0.g
    a() {

        // c0.h.a
        @Override
        public final boolean a(View view2) {
            boolean hasFocus;
            hasFocus = view2.hasFocus();
            return hasFocus;
        }
    });
}"
"<c0.h: boolean a(android.view.View)>","boolean a(View view);"
"<c0.h: boolean i(android.view.View,c0.h$a)>","public static boolean i(View view, a aVar) {
    if (view == null) {
        return false;
    }
    if (aVar.a(view)) {
        return true;
    }
    if (view instanceof ViewGroup) {
        ViewGroup viewGroup = (ViewGroup) view;
        for (int i2 = 0; i2 < viewGroup.getChildCount(); i2++) {
            if (i(viewGroup.getChildAt(i2), aVar)) {
                return true;
            }
        }
    }
    return false;
}"
"<r.a: void c()>","void c();"
"<r.a: void b(r.c)>","void b(c cVar);"
"<r.a: void f(r.c)>","void f(c cVar);"
"<r.a: void e()>","void e();"
"<io.flutter.plugin.platform.k: void a()>","void a();"
"<io.flutter.plugin.platform.k: void b(io.flutter.view.c)>","void b(io.flutter.view.c cVar);"
"<io.flutter.plugin.platform.k: boolean d(int)>","boolean d(int i2);"
"<io.flutter.plugins.webviewflutter.r: void d(y.b,io.flutter.plugins.webviewflutter.k$f)>","public static void d(y.b bVar, final k.f fVar) {
    new y.a(bVar, ""dev.flutter.pigeon.DownloadListenerHostApi.create"", b()).e(fVar != null ? new // from class: io.flutter.plugins.webviewflutter.q
    a.d() {

        // y.a.d
        @Override
        public final void a(Object obj, a.e eVar) {
            r.c(k.f.this, obj, eVar);
        }
    } : null);
}"
"<io.flutter.plugins.webviewflutter.r: void c(io.flutter.plugins.webviewflutter.k$f,java.lang.Object,y.a$e)>","public static /* synthetic */
void c(k.f fVar, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    fVar.a(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.r: void a(io.flutter.plugins.webviewflutter.k$f,java.lang.Object,y.a$e)>","// y.a.d
@Override
public final void a(Object obj, a.e eVar) {
    r.c(k.f.this, obj, eVar);
}"
"<x0.a: java.lang.Object a(x0.c,g0.d)>","/* JADX WARN: Removed duplicated region for block: B:21:0x0037  */
/* JADX WARN: Removed duplicated region for block: B:8:0x0023  */
// x0.b
@Override
public final /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
java.lang.Object a(x0.c<? super T> r6, g0.d<? super d0.q> r7) {
    /*
            r5 = this;
            boolean r0 = r7 instanceof x0.a.C0036a
            if (r0 == 0) goto L13
            r0 = r7
            x0.a$a r0 = (x0.a.C0036a) r0
            int r1 = r0.f1660g
            r2 = -2147483648(0xffffffff80000000, float:-0.0)
            r3 = r1 & r2
            if (r3 == 0) goto L13
            int r1 = r1 - r2
            r0.f1660g = r1
            goto L18
        L13:
            x0.a$a r0 = new x0.a$a
            r0.<init>(r5, r7)
        L18:
            java.lang.Object r7 = r0.f1658e
            java.lang.Object r1 = h0.b.c()
            int r2 = r0.f1660g
            r3 = 1
            if (r2 == 0) goto L37
            if (r2 != r3) goto L2f
            java.lang.Object r6 = r0.f1657d
            y0.c r6 = (y0.c) r6
            d0.l.b(r7)     // Catch: java.lang.Throwable -> L2d
            goto L4f
        L2d:
            r7 = move-exception
            goto L59
        L2f:
            java.lang.IllegalStateException r6 = new java.lang.IllegalStateException
            java.lang.String r7 = ""call to 'resume' before 'invoke' with coroutine""
            r6.<init>(r7)
            throw r6
        L37:
            d0.l.b(r7)
            y0.c r7 = new y0.c
            g0.g r2 = r0.getContext()
            r7.<init>(r6, r2)
            r0.f1657d = r7     // Catch: java.lang.Throwable -> L55
            r0.f1660g = r3     // Catch: java.lang.Throwable -> L55
            java.lang.Object r6 = r5.b(r7, r0)     // Catch: java.lang.Throwable -> L55
            if (r6 != r1) goto L4e
            return r1
        L4e:
            r6 = r7
        L4f:
            r6.releaseIntercepted()
            d0.q r6 = d0.q.f150a
            return r6
        L55:
            r6 = move-exception
            r4 = r7
            r7 = r6
            r6 = r4
        L59:
            r6.releaseIntercepted()
            throw r7
        */
    throw new UnsupportedOperationException(""Method not decompiled: x0.a.a(x0.c, g0.d):java.lang.Object"");
}"
"<w0.d: void x(int,java.lang.Object)>","private final void x(int i2, E e2) {
    if (i2 < this.f1454e) {
        y(i2);
        Object[] objArr = this.f1457h;
        objArr[(this.f1458i + i2) % objArr.length] = e2;
        return;
    }
    if (p0.a()) {
        if (!(this.f1455f == e.DROP_OLDEST)) {
            throw new AssertionError();
        }
    }
    Object[] objArr2 = this.f1457h;
    int i3 = this.f1458i;
    objArr2[i3 % objArr2.length] = null;
    objArr2[(i2 + i3) % objArr2.length] = e2;
    this.f1458i = (i3 + 1) % objArr2.length;
}"
"<w0.d: void y(int)>","private final void y(int i2) {
    Object[] objArr = this.f1457h;
    if (i2 >= objArr.length) {
        int min = Math.min(objArr.length * 2, this.f1454e);
        Object[] objArr2 = new Object[min];
        if (i2 > 0) {
            int i3 = 0;
            while (true) {
                int i4 = i3 + 1;
                Object[] objArr3 = this.f1457h;
                objArr2[i3] = objArr3[(this.f1458i + i3) % objArr3.length];
                if (i4 >= i2) {
                    break;
                } else {
                    i3 = i4;
                }
            }
        }
        e0.d.d(objArr2, b.f1444a, i2, min);
        this.f1457h = objArr2;
        this.f1458i = 0;
    }
}"
"<w0.d: boolean r()>","// w0.a
@Override
protected final boolean r() {
    return false;
}"
"<w0.d: boolean s()>","// w0.a
@Override
protected final boolean s() {
    return this.size == 0;
}"
"<w0.d: boolean q(w0.o)>","/* JADX INFO: Access modifiers changed from: protected */
// w0.a
@Override
public boolean q(o<? super E> oVar) {
    ReentrantLock reentrantLock = this.f1456g;
    reentrantLock.lock();
    try {
        return super.q(oVar);
    } finally {
        reentrantLock.unlock();
    }
}"
"<w0.d: java.lang.Object i(java.lang.Object)>","/* JADX INFO: Access modifiers changed from: protected */
/* JADX WARN: Code restructure failed: missing block: B:11:0x001e, code lost:
    
        if ((r2 instanceof w0.j) == false) goto L16;
     */
/* JADX WARN: Code restructure failed: missing block: B:13:0x0027, code lost:
    
        r3 = r2.h(r6, null);
     */
/* JADX WARN: Code restructure failed: missing block: B:14:0x002b, code lost:
    
        if (r3 == null) goto L46;
     */
/* JADX WARN: Code restructure failed: missing block: B:17:0x0031, code lost:
    
        if (u0.p0.a() == false) goto L29;
     */
/* JADX WARN: Code restructure failed: missing block: B:19:0x0035, code lost:
    
        if (r3 != u0.m.f1314a) goto L24;
     */
/* JADX WARN: Code restructure failed: missing block: B:20:0x0037, code lost:
    
        r3 = true;
     */
/* JADX WARN: Code restructure failed: missing block: B:21:0x003a, code lost:
    
        if (r3 == false) goto L27;
     */
/* JADX WARN: Code restructure failed: missing block: B:24:0x0042, code lost:
    
        throw new java.lang.AssertionError();
     */
/* JADX WARN: Code restructure failed: missing block: B:26:0x0039, code lost:
    
        r3 = false;
     */
/* JADX WARN: Code restructure failed: missing block: B:27:0x0043, code lost:
    
        r5.size = r1;
        r1 = d0.q.f150a;
     */
/* JADX WARN: Code restructure failed: missing block: B:28:0x0047, code lost:
    
        r0.unlock();
        r2.d(r6);
     */
/* JADX WARN: Code restructure failed: missing block: B:29:0x0051, code lost:
    
        return r2.e();
     */
/* JADX WARN: Code restructure failed: missing block: B:32:0x0020, code lost:
    
        r5.size = r1;
     */
/* JADX WARN: Code restructure failed: missing block: B:34:0x0025, code lost:
    
        return r2;
     */
/* JADX WARN: Code restructure failed: missing block: B:37:0x0052, code lost:
    
        x(r1, r6);
     */
/* JADX WARN: Code restructure failed: missing block: B:39:0x005a, code lost:
    
        return w0.b.f1445b;
     */
/* JADX WARN: Code restructure failed: missing block: B:7:0x0013, code lost:
    
        if (r1 == 0) goto L8;
     */
/* JADX WARN: Code restructure failed: missing block: B:8:0x0015, code lost:
    
        r2 = l();
     */
/* JADX WARN: Code restructure failed: missing block: B:9:0x0019, code lost:
    
        if (r2 != null) goto L11;
     */
// w0.c
@Override
public /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
java.lang.Object i(E r6) {
    /*
            r5 = this;
            java.util.concurrent.locks.ReentrantLock r0 = r5.f1456g
            r0.lock()
            int r1 = r5.size     // Catch: java.lang.Throwable -> L63
            w0.j r2 = r5.d()     // Catch: java.lang.Throwable -> L63
            if (r2 != 0) goto L5f
            kotlinx.coroutines.internal.z r2 = r5.z(r1)     // Catch: java.lang.Throwable -> L63
            if (r2 != 0) goto L5b
            if (r1 != 0) goto L52
        L15:
            w0.q r2 = r5.l()     // Catch: java.lang.Throwable -> L63
            if (r2 != 0) goto L1c
            goto L52
        L1c:
            boolean r3 = r2 instanceof w0.j     // Catch: java.lang.Throwable -> L63
            if (r3 == 0) goto L26
            r5.size = r1     // Catch: java.lang.Throwable -> L63
            r0.unlock()
            return r2
        L26:
            r3 = 0
            kotlinx.coroutines.internal.z r3 = r2.h(r6, r3)     // Catch: java.lang.Throwable -> L63
            if (r3 == 0) goto L15
            boolean r4 = u0.p0.a()     // Catch: java.lang.Throwable -> L63
            if (r4 == 0) goto L43
            kotlinx.coroutines.internal.z r4 = u0.m.f1314a     // Catch: java.lang.Throwable -> L63
            if (r3 != r4) goto L39
            r3 = 1
            goto L3a
        L39:
            r3 = 0
        L3a:
            if (r3 == 0) goto L3d
            goto L43
        L3d:
            java.lang.AssertionError r6 = new java.lang.AssertionError     // Catch: java.lang.Throwable -> L63
            r6.<init>()     // Catch: java.lang.Throwable -> L63
            throw r6     // Catch: java.lang.Throwable -> L63
        L43:
            r5.size = r1     // Catch: java.lang.Throwable -> L63
            d0.q r1 = d0.q.f150a     // Catch: java.lang.Throwable -> L63
            r0.unlock()
            r2.d(r6)
            java.lang.Object r6 = r2.e()
            return r6
        L52:
            r5.x(r1, r6)     // Catch: java.lang.Throwable -> L63
            kotlinx.coroutines.internal.z r6 = w0.b.f1445b     // Catch: java.lang.Throwable -> L63
            r0.unlock()
            return r6
        L5b:
            r0.unlock()
            return r2
        L5f:
            r0.unlock()
            return r2
        L63:
            r6 = move-exception
            r0.unlock()
            throw r6
        */
    throw new UnsupportedOperationException(""Method not decompiled: w0.d.i(java.lang.Object):java.lang.Object"");
}"
"<androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>","/* JADX WARN: Removed duplicated region for block: B:14:0x0032  */
/* JADX WARN: Removed duplicated region for block: B:16:0x0045  */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
private final boolean wildcardMatch(java.lang.String r13, java.lang.String r14) {
    /*
            r12 = this;
            java.lang.String r0 = ""*""
            r1 = 0
            r2 = 2
            r3 = 0
            boolean r4 = t0.d.r(r14, r0, r1, r2, r3)
            if (r4 != 0) goto Lc
            return r1
        Lc:
            boolean r4 = kotlin.jvm.internal.i.a(r14, r0)
            r5 = 1
            if (r4 == 0) goto L14
            return r5
        L14:
            r8 = 0
            r9 = 0
            r10 = 6
            r11 = 0
            java.lang.String r7 = ""*""
            r6 = r14
            int r4 = t0.d.A(r6, r7, r8, r9, r10, r11)
            java.lang.String r7 = ""*""
            int r6 = t0.d.F(r6, r7, r8, r9, r10, r11)
            if (r4 != r6) goto L2f
            boolean r0 = t0.d.k(r14, r0, r1, r2, r3)
            if (r0 == 0) goto L2f
            r0 = r5
            goto L30
        L2f:
            r0 = r1
        L30:
            if (r0 == 0) goto L45
            int r0 = r14.length()
            int r0 = r0 - r5
            java.lang.String r14 = r14.substring(r1, r0)
            java.lang.String r0 = ""(this as java.lang.Strin…ing(startIndex, endIndex)""
            kotlin.jvm.internal.i.d(r14, r0)
            boolean r13 = t0.d.o(r13, r14, r1, r2, r3)
            return r13
        L45:
            java.lang.IllegalArgumentException r13 = new java.lang.IllegalArgumentException
            java.lang.String r14 = ""Name pattern with a wildcard must only contain a single wildcard in the end""
            java.lang.String r14 = r14.toString()
            r13.<init>(r14)
            throw r13
        */
    throw new UnsupportedOperationException(""Method not decompiled: androidx.window.embedding.MatcherUtils.wildcardMatch(java.lang.String, java.lang.String):boolean"");
}"
"<androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)>","public final boolean areActivityOrIntentComponentsMatching$window_release(Activity activity, ComponentName ruleComponent) {
    ComponentName component;
    i.e(activity, ""activity"");
    i.e(ruleComponent, ""ruleComponent"");
    if (areComponentsMatching$window_release(activity.getComponentName(), ruleComponent)) {
        return true;
    }
    Intent intent = activity.getIntent();
    if (intent == null || (component = intent.getComponent()) == null) {
        return false;
    }
    return INSTANCE.areComponentsMatching$window_release(component, ruleComponent);
}"
"<androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)>","/* JADX WARN: Removed duplicated region for block: B:20:0x006c  */
/* JADX WARN: Removed duplicated region for block: B:24:0x008a A[ADDED_TO_REGION] */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public final boolean areComponentsMatching$window_release(android.content.ComponentName r7, android.content.ComponentName r8) {
    /*
            r6 = this;
            java.lang.String r0 = ""ruleComponent""
            kotlin.jvm.internal.i.e(r8, r0)
            java.lang.String r0 = ""*""
            r1 = 1
            r2 = 0
            if (r7 != 0) goto L22
            java.lang.String r7 = r8.getPackageName()
            boolean r7 = kotlin.jvm.internal.i.a(r7, r0)
            if (r7 == 0) goto L20
            java.lang.String r7 = r8.getClassName()
            boolean r7 = kotlin.jvm.internal.i.a(r7, r0)
            if (r7 == 0) goto L20
            goto L21
        L20:
            r1 = r2
        L21:
            return r1
        L22:
            java.lang.String r3 = r7.toString()
            java.lang.String r4 = ""activityComponent.toString()""
            kotlin.jvm.internal.i.d(r3, r4)
            r4 = 2
            r5 = 0
            boolean r0 = t0.d.r(r3, r0, r2, r4, r5)
            r0 = r0 ^ r1
            if (r0 == 0) goto L8f
            java.lang.String r0 = r7.getPackageName()
            java.lang.String r3 = r8.getPackageName()
            boolean r0 = kotlin.jvm.internal.i.a(r0, r3)
            if (r0 != 0) goto L5d
            java.lang.String r0 = r7.getPackageName()
            java.lang.String r3 = ""activityComponent.packageName""
            kotlin.jvm.internal.i.d(r0, r3)
            java.lang.String r3 = r8.getPackageName()
            java.lang.String r4 = ""ruleComponent.packageName""
            kotlin.jvm.internal.i.d(r3, r4)
            boolean r0 = r6.wildcardMatch(r0, r3)
            if (r0 == 0) goto L5b
            goto L5d
        L5b:
            r0 = r2
            goto L5e
        L5d:
            r0 = r1
        L5e:
            java.lang.String r3 = r7.getClassName()
            java.lang.String r4 = r8.getClassName()
            boolean r3 = kotlin.jvm.internal.i.a(r3, r4)
            if (r3 != 0) goto L87
            java.lang.String r7 = r7.getClassName()
            java.lang.String r3 = ""activityComponent.className""
            kotlin.jvm.internal.i.d(r7, r3)
            java.lang.String r8 = r8.getClassName()
            java.lang.String r3 = ""ruleComponent.className""
            kotlin.jvm.internal.i.d(r8, r3)
            boolean r7 = r6.wildcardMatch(r7, r8)
            if (r7 == 0) goto L85
            goto L87
        L85:
            r7 = r2
            goto L88
        L87:
            r7 = r1
        L88:
            if (r0 == 0) goto L8d
            if (r7 == 0) goto L8d
            goto L8e
        L8d:
            r1 = r2
        L8e:
            return r1
        L8f:
            java.lang.IllegalArgumentException r7 = new java.lang.IllegalArgumentException
            java.lang.String r8 = ""Wildcard can only be part of the rule.""
            java.lang.String r8 = r8.toString()
            r7.<init>(r8)
            throw r7
        */
    throw new UnsupportedOperationException(""Method not decompiled: androidx.window.embedding.MatcherUtils.areComponentsMatching$window_release(android.content.ComponentName, android.content.ComponentName):boolean"");
}"
"<e0.z: void f(java.util.Map,java.lang.Iterable)>","public static final <K, V> void f(Map<? super K, ? super V> map, Iterable<? extends d0.j<? extends K, ? extends V>> pairs) {
    kotlin.jvm.internal.i.e(map, ""<this>"");
    kotlin.jvm.internal.i.e(pairs, ""pairs"");
    for (d0.j<? extends K, ? extends V> jVar : pairs) {
        map.put(jVar.a(), jVar.b());
    }
}"
"<u0.l: void F()>","private final void F() {
    g0.d<T> dVar = this.f1310g;
    kotlinx.coroutines.internal.g gVar = dVar instanceof kotlinx.coroutines.internal.g ? (kotlinx.coroutines.internal.g) dVar : null;
    Throwable r2 = gVar != null ? gVar.r(this) : null;
    if (r2 == null) {
        return;
    }
    r();
    n(r2);
}"
"<u0.l: boolean K()>","private final boolean K() {
    do {
        int i2 = this._decision;
        if (i2 != 0) {
            if (i2 == 1) {
                return false;
            }
            throw new IllegalStateException(""Already resumed"".toString());
        }
    } while (!f1308j.compareAndSet(this, 0, 2));
    return true;
}"
"<u0.l: boolean A()>","private final boolean A() {
    return u0.c(this.f1339f) && ((kotlinx.coroutines.internal.g) this.f1310g).l();
}"
"<u0.l: kotlin.coroutines.jvm.internal.e getCallerFrame()>","// kotlin.coroutines.jvm.internal.e
@Override
public kotlin.coroutines.jvm.internal.e getCallerFrame() {
    g0.d<T> dVar = this.f1310g;
    if (dVar instanceof kotlin.coroutines.jvm.internal.e) {
        return (kotlin.coroutines.jvm.internal.e) dVar;
    }
    return null;
}"
"<u0.l: void j(n0.l,java.lang.Throwable)>","private final void j(n0.l<? super Throwable, d0.q> lVar, Throwable th) {
    try {
        lVar.invoke(th);
    } catch (Throwable th2) {
        h0.a(getContext(), new b0(kotlin.jvm.internal.i.j(""Exception in invokeOnCancellation handler for "", this), th2));
    }
}"
"<u0.l: boolean G()>","public final boolean G() {
    if (p0.a()) {
        if (!(this.f1339f == 2)) {
            throw new AssertionError();
        }
    }
    if (p0.a()) {
        if (!(this.f1312i != a2.f1281d)) {
            throw new AssertionError();
        }
    }
    Object obj = this._state;
    if (p0.a() && !(!(obj instanceof b2))) {
        throw new AssertionError();
    }
    if ((obj instanceof x) && ((x) obj).f1369d != null) {
        r();
        return false;
    }
    this._decision = 0;
    this._state = d.f1283d;
    return true;
}"
"<u0.l: void a(java.lang.Object,java.lang.Throwable)>","// u0.t0
@Override
public void a(Object obj, Throwable th) {
    while (true) {
        Object obj2 = this._state;
        if (obj2 instanceof b2) {
            throw new IllegalStateException(""Not completed"".toString());
        }
        if (obj2 instanceof y) {
            return;
        }
        if (obj2 instanceof x) {
            x xVar = (x) obj2;
            if (!(!xVar.c())) {
                throw new IllegalStateException(""Must be called at most once"".toString());
            }
            if (kotlinx.coroutines.internal.c.a(f1309k, this, obj2, x.b(xVar, null, null, null, null, th, 15, null))) {
                xVar.d(this, th);
                return;
            }
        } else if (kotlinx.coroutines.internal.c.a(f1309k, this, obj2, new x(obj2, null, null, null, th, 14, null))) {
            return;
        }
    }
}"
"<u0.l: void q(java.lang.Object)>","// u0.k
@Override
public void q(Object obj) {
    if (p0.a()) {
        if (!(obj == m.f1314a)) {
            throw new AssertionError();
        }
    }
    u(this.f1339f);
}"
"<u0.l: void r()>","public final void r() {
    x0 x0Var = this.f1312i;
    if (x0Var == null) {
        return;
    }
    x0Var.b();
    this.f1312i = a2.f1281d;
}"
"<u0.l: boolean M()>","private final boolean M() {
    do {
        int i2 = this._decision;
        if (i2 != 0) {
            if (i2 == 2) {
                return false;
            }
            throw new IllegalStateException(""Already suspended"".toString());
        }
    } while (!f1308j.compareAndSet(this, 0, 1));
    return true;
}"
"<u0.l: void C(n0.l,java.lang.Object)>","private final void C(n0.l<? super Throwable, d0.q> lVar, Object obj) {
    throw new IllegalStateException((""It's prohibited to register multiple handlers, tried to register "" + lVar + "", already has "" + obj).toString());
}"
"<u0.l: void l(n0.l,java.lang.Throwable)>","public final void l(n0.l<? super Throwable, d0.q> lVar, Throwable th) {
    try {
        lVar.invoke(th);
    } catch (Throwable th2) {
        h0.a(getContext(), new b0(kotlin.jvm.internal.i.j(""Exception in resume onCancellation handler for "", this), th2));
    }
}"
"<u0.l: boolean n(java.lang.Throwable)>","public boolean n(Throwable th) {
    Object obj;
    boolean z2;
    do {
        obj = this._state;
        if (!(obj instanceof b2)) {
            return false;
        }
        z2 = obj instanceof i;
    } while (!kotlinx.coroutines.internal.c.a(f1309k, this, obj, new o(this, th, z2)));
    i iVar = z2 ? (i) obj : null;
    if (iVar != null) {
        k(iVar, th);
    }
    t();
    u(this.f1339f);
    return true;
}"
"<u0.l: void u(int)>","private final void u(int i2) {
    if (K()) {
        return;
    }
    u0.a(this, i2);
}"
"<u0.l: void H(java.lang.Object,int,n0.l)>","private final void H(Object obj, int i2, n0.l<? super Throwable, d0.q> lVar) {
    Object obj2;
    do {
        obj2 = this._state;
        if (!(obj2 instanceof b2)) {
            if (obj2 instanceof o) {
                o oVar = (o) obj2;
                if (oVar.c()) {
                    if (lVar == null) {
                        return;
                    }
                    l(lVar, oVar.f1373a);
                    return;
                }
            }
            i(obj);
            throw new d0.d();
        }
    } while (!kotlinx.coroutines.internal.c.a(f1309k, this, obj2, J((b2) obj2, obj, i2, lVar, null)));
    t();
    u(i2);
}"
"<u0.l: g0.g getContext()>","// g0.d
@Override
public g0.g getContext() {
    return this.f1311h;
}"
"<u0.l: void o(java.lang.Object,n0.l)>","// u0.k
@Override
public void o(T t2, n0.l<? super Throwable, d0.q> lVar) {
    H(t2, this.f1339f, lVar);
}"
"<u0.l: void E(java.lang.Throwable)>","public final void E(Throwable th) {
    if (p(th)) {
        return;
    }
    n(th);
    t();
}"
"<u0.l: void t()>","private final void t() {
    if (A()) {
        return;
    }
    r();
}"
"<u0.l: void I(u0.l,java.lang.Object,int,n0.l,int,java.lang.Object)>","/* JADX WARN: Multi-variable type inference failed */
static /* synthetic */
void I(l lVar, Object obj, int i2, n0.l lVar2, int i3, Object obj2) {
    if (obj2 != null) {
        throw new UnsupportedOperationException(""Super calls with default arguments not supported in this target, function: resumeImpl"");
    }
    if ((i3 & 4) != 0) {
        lVar2 = null;
    }
    lVar.H(obj, i2, lVar2);
}"
"<u0.l: void b(n0.l)>","// u0.k
@Override
public void b(n0.l<? super Throwable, d0.q> lVar) {
    i B = B(lVar);
    while (true) {
        Object obj = this._state;
        if (obj instanceof d) {
            if (kotlinx.coroutines.internal.c.a(f1309k, this, obj, B)) {
                return;
            }
        } else if (obj instanceof i) {
            C(lVar, obj);
        } else {
            boolean z2 = obj instanceof y;
            if (z2) {
                y yVar = (y) obj;
                if (!yVar.b()) {
                    C(lVar, obj);
                }
                if (obj instanceof o) {
                    if (!z2) {
                        yVar = null;
                    }
                    j(lVar, yVar != null ? yVar.f1373a : null);
                    return;
                }
                return;
            }
            if (obj instanceof x) {
                x xVar = (x) obj;
                if (xVar.f1367b != null) {
                    C(lVar, obj);
                }
                if (B instanceof e) {
                    return;
                }
                if (xVar.c()) {
                    j(lVar, xVar.f1370e);
                    return;
                } else {
                    if (kotlinx.coroutines.internal.c.a(f1309k, this, obj, x.b(xVar, null, B, null, null, null, 29, null))) {
                        return;
                    }
                }
            } else {
                if (B instanceof e) {
                    return;
                }
                if (kotlinx.coroutines.internal.c.a(f1309k, this, obj, new x(obj, B, null, null, null, 28, null))) {
                    return;
                }
            }
        }
    }
}"
"<u0.l: boolean p(java.lang.Throwable)>","private final boolean p(Throwable th) {
    if (A()) {
        return ((kotlinx.coroutines.internal.g) this.f1310g).n(th);
    }
    return false;
}"
"<u0.l: void k(u0.i,java.lang.Throwable)>","public final void k(i iVar, Throwable th) {
    try {
        iVar.a(th);
    } catch (Throwable th2) {
        h0.a(getContext(), new b0(kotlin.jvm.internal.i.j(""Exception in invokeOnCancellation handler for "", this), th2));
    }
}"
"<u0.l: kotlinx.coroutines.internal.z L(java.lang.Object,java.lang.Object,n0.l)>","private final kotlinx.coroutines.internal.z L(Object obj, Object obj2, n0.l<? super Throwable, d0.q> lVar) {
    Object obj3;
    do {
        obj3 = this._state;
        if (!(obj3 instanceof b2)) {
            if (!(obj3 instanceof x) || obj2 == null) {
                return null;
            }
            x xVar = (x) obj3;
            if (xVar.f1369d != obj2) {
                return null;
            }
            if (!p0.a() || kotlin.jvm.internal.i.a(xVar.f1366a, obj)) {
                return m.f1314a;
            }
            throw new AssertionError();
        }
    } while (!kotlinx.coroutines.internal.c.a(f1309k, this, obj3, J((b2) obj3, obj, this.f1339f, lVar, obj2)));
    t();
    return m.f1314a;
}"
"<u0.l: void resumeWith(java.lang.Object)>","// g0.d
@Override
public void resumeWith(Object obj) {
    I(this, c0.c(obj, this), this.f1339f, null, 4, null);
}"
"<b.c: void g(java.lang.Object,java.lang.Object)>","protected abstract void g(K k2, V v2);"
"<b.c: boolean p(java.util.Map,java.util.Collection)>","public static <K, V> boolean p(Map<K, V> map, Collection<?> collection) {
    int size = map.size();
    Iterator<K> it = map.keySet().iterator();
    while (it.hasNext()) {
        if (!collection.contains(it.next())) {
            it.remove();
        }
    }
    return size != map.size();
}"
"<b.c: boolean k(java.util.Set,java.lang.Object)>","public static <T> boolean k(Set<T> set, Object obj) {
    if (set == obj) {
        return true;
    }
    if (obj instanceof Set) {
        Set set2 = (Set) obj;
        try {
            if (set.size() == set2.size()) {
                if (set.containsAll(set2)) {
                    return true;
                }
            }
            return false;
        } catch (ClassCastException | NullPointerException unused) {
        }
    }
    return false;
}"
"<b.c: int f(java.lang.Object)>","protected abstract int f(Object obj);"
"<b.c: int d()>","protected abstract int d();"
"<b.c: int e(java.lang.Object)>","protected abstract int e(Object obj);"
"<b.c: void h(int)>","protected abstract void h(int i2);"
"<b.c: boolean j(java.util.Map,java.util.Collection)>","public static <K, V> boolean j(Map<K, V> map, Collection<?> collection) {
    Iterator<?> it = collection.iterator();
    while (it.hasNext()) {
        if (!map.containsKey(it.next())) {
            return false;
        }
    }
    return true;
}"
"<b.c: void a()>","protected abstract void a();"
"<b.c: boolean o(java.util.Map,java.util.Collection)>","public static <K, V> boolean o(Map<K, V> map, Collection<?> collection) {
    int size = map.size();
    Iterator<?> it = collection.iterator();
    while (it.hasNext()) {
        map.remove(it.next());
    }
    return size != map.size();
}"
"<io.flutter.embedding.android.a: boolean f(android.view.MotionEvent)>","public boolean f(MotionEvent motionEvent) {
    return g(motionEvent, f201e);
}"
"<io.flutter.embedding.android.a: int c(int)>","private int c(int i2) {
    if (i2 == 4) {
        return 7;
    }
    if (i2 == 5) {
        return 8;
    }
    if (i2 == 6 || i2 == 0) {
        return 9;
    }
    throw new AssertionError(""Unexpected pointer change"");
}"
"<io.flutter.embedding.android.a: void a(android.view.MotionEvent,int,int,int,android.graphics.Matrix,java.nio.ByteBuffer)>","private void a(MotionEvent motionEvent, int i2, int i3, int i4, Matrix matrix, ByteBuffer byteBuffer) {
    long j2;
    long j3;
    double d2;
    double d3;
    double d4;
    double d5;
    double d6;
    InputDevice.MotionRange motionRange;
    if (i3 == -1) {
        return;
    }
    long d7 = this.f204c ? this.f203b.c(motionEvent).d() : 0L;
    int d8 = d(motionEvent.getToolType(i2));
    float[] fArr = { motionEvent.getX(i2), motionEvent.getY(i2) };
    matrix.mapPoints(fArr);
    if (d8 == 1) {
        j2 = motionEvent.getButtonState() & 31;
        if (j2 == 0 && motionEvent.getSource() == 8194 && i3 == 4) {
            this.f205d.put(Integer.valueOf(motionEvent.getPointerId(i2)), fArr);
        }
    } else {
        j2 = d8 == 2 ? (motionEvent.getButtonState() >> 4) & 15 : 0L;
    }
    boolean containsKey = this.f205d.containsKey(Integer.valueOf(motionEvent.getPointerId(i2)));
    int i5 = motionEvent.getActionMasked() == 8 ? 1 : 0;
    long eventTime = motionEvent.getEventTime() * 1000;
    byteBuffer.putLong(d7);
    byteBuffer.putLong(eventTime);
    if (containsKey) {
        byteBuffer.putLong(c(i3));
        j3 = 4;
    } else {
        byteBuffer.putLong(i3);
        j3 = d8;
    }
    byteBuffer.putLong(j3);
    byteBuffer.putLong(i5);
    byteBuffer.putLong(motionEvent.getPointerId(i2));
    byteBuffer.putLong(0L);
    if (containsKey) {
        float[] fArr2 = this.f205d.get(Integer.valueOf(motionEvent.getPointerId(i2)));
        byteBuffer.putDouble(fArr2[0]);
        byteBuffer.putDouble(fArr2[1]);
    } else {
        byteBuffer.putDouble(fArr[0]);
        byteBuffer.putDouble(fArr[1]);
    }
    byteBuffer.putDouble(0.0d);
    byteBuffer.putDouble(0.0d);
    byteBuffer.putLong(j2);
    byteBuffer.putLong(0L);
    byteBuffer.putLong(0L);
    byteBuffer.putDouble(motionEvent.getPressure(i2));
    if (motionEvent.getDevice() == null || (motionRange = motionEvent.getDevice().getMotionRange(2)) == null) {
        d2 = 1.0d;
        d3 = 0.0d;
    } else {
        d3 = motionRange.getMin();
        d2 = motionRange.getMax();
    }
    byteBuffer.putDouble(d3);
    byteBuffer.putDouble(d2);
    if (d8 == 2) {
        byteBuffer.putDouble(motionEvent.getAxisValue(24, i2));
        d4 = 0.0d;
    } else {
        d4 = 0.0d;
        byteBuffer.putDouble(0.0d);
    }
    byteBuffer.putDouble(d4);
    byteBuffer.putDouble(motionEvent.getSize(i2));
    byteBuffer.putDouble(motionEvent.getToolMajor(i2));
    byteBuffer.putDouble(motionEvent.getToolMinor(i2));
    byteBuffer.putDouble(d4);
    byteBuffer.putDouble(d4);
    byteBuffer.putDouble(motionEvent.getAxisValue(8, i2));
    if (d8 == 2) {
        byteBuffer.putDouble(motionEvent.getAxisValue(25, i2));
    } else {
        byteBuffer.putDouble(d4);
    }
    byteBuffer.putLong(i4);
    if (i5 == 1) {
        byteBuffer.putDouble(-motionEvent.getAxisValue(10));
        d5 = -motionEvent.getAxisValue(9);
    } else {
        d5 = 0.0d;
        byteBuffer.putDouble(0.0d);
    }
    byteBuffer.putDouble(d5);
    if (containsKey) {
        float[] fArr3 = this.f205d.get(Integer.valueOf(motionEvent.getPointerId(i2)));
        byteBuffer.putDouble(fArr[0] - fArr3[0]);
        byteBuffer.putDouble(fArr[1] - fArr3[1]);
        d6 = 0.0d;
    } else {
        d6 = 0.0d;
        byteBuffer.putDouble(0.0d);
        byteBuffer.putDouble(0.0d);
    }
    byteBuffer.putDouble(d6);
    byteBuffer.putDouble(d6);
    byteBuffer.putDouble(1.0d);
    byteBuffer.putDouble(d6);
    if (containsKey && c(i3) == 9) {
        this.f205d.remove(Integer.valueOf(motionEvent.getPointerId(i2)));
    }
}"
"<io.flutter.embedding.android.a: int d(int)>","private int d(int i2) {
    if (i2 == 1) {
        return 0;
    }
    if (i2 == 2) {
        return 2;
    }
    if (i2 != 3) {
        return i2 != 4 ? 5 : 3;
    }
    return 1;
}"
"<io.flutter.embedding.android.a: boolean e(android.view.MotionEvent)>","public boolean e(MotionEvent motionEvent) {
    boolean z2 = Build.VERSION.SDK_INT >= 18 && motionEvent.isFromSource(2);
    boolean z3 = motionEvent.getActionMasked() == 7 || motionEvent.getActionMasked() == 8;
    if (!z2 || !z3) {
        return false;
    }
    int b2 = b(motionEvent.getActionMasked());
    ByteBuffer allocateDirect = ByteBuffer.allocateDirect(motionEvent.getPointerCount() * 35 * 8);
    allocateDirect.order(ByteOrder.LITTLE_ENDIAN);
    a(motionEvent, motionEvent.getActionIndex(), b2, 0, f201e, allocateDirect);
    if (allocateDirect.position() % 280 != 0) {
        throw new AssertionError(""Packet position is not on field boundary."");
    }
    this.f202a.i(allocateDirect, allocateDirect.position());
    return true;
}"
"<io.flutter.embedding.android.a: boolean g(android.view.MotionEvent,android.graphics.Matrix)>","/* JADX WARN: Removed duplicated region for block: B:15:0x0077  */
/* JADX WARN: Removed duplicated region for block: B:18:0x0081  */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public boolean g(android.view.MotionEvent r13, android.graphics.Matrix r14) {
    /*
            r12 = this;
            int r0 = r13.getPointerCount()
            int r1 = r0 * 35
            int r1 = r1 * 8
            java.nio.ByteBuffer r1 = java.nio.ByteBuffer.allocateDirect(r1)
            java.nio.ByteOrder r2 = java.nio.ByteOrder.LITTLE_ENDIAN
            r1.order(r2)
            int r2 = r13.getActionMasked()
            int r3 = r13.getActionMasked()
            int r9 = r12.b(r3)
            r3 = 0
            r10 = 1
            if (r2 == 0) goto L27
            r4 = 5
            if (r2 != r4) goto L25
            goto L27
        L25:
            r4 = r3
            goto L28
        L27:
            r4 = r10
        L28:
            if (r4 != 0) goto L31
            if (r2 == r10) goto L2f
            r5 = 6
            if (r2 != r5) goto L31
        L2f:
            r2 = r10
            goto L32
        L31:
            r2 = r3
        L32:
            if (r4 == 0) goto L42
        L34:
            int r4 = r13.getActionIndex()
            r6 = 0
            r2 = r12
            r3 = r13
            r5 = r9
            r7 = r14
            r8 = r1
            r2.a(r3, r4, r5, r6, r7, r8)
            goto L6f
        L42:
            r11 = r3
            if (r2 == 0) goto L60
        L45:
            if (r11 >= r0) goto L34
            int r2 = r13.getActionIndex()
            if (r11 == r2) goto L5d
            int r2 = r13.getToolType(r11)
            if (r2 != r10) goto L5d
            r5 = 5
            r6 = 1
            r2 = r12
            r3 = r13
            r4 = r11
            r7 = r14
            r8 = r1
            r2.a(r3, r4, r5, r6, r7, r8)
        L5d:
            int r11 = r11 + 1
            goto L45
        L60:
            if (r11 >= r0) goto L6f
            r6 = 0
            r2 = r12
            r3 = r13
            r4 = r11
            r5 = r9
            r7 = r14
            r8 = r1
            r2.a(r3, r4, r5, r6, r7, r8)
            int r11 = r11 + 1
            goto L60
        L6f:
            int r13 = r1.position()
            int r13 = r13 % 280
            if (r13 != 0) goto L81
            w.a r13 = r12.f202a
            int r14 = r1.position()
            r13.i(r1, r14)
            return r10
        L81:
            java.lang.AssertionError r13 = new java.lang.AssertionError
            java.lang.String r14 = ""Packet position is not on field boundary""
            r13.<init>(r14)
            throw r13
        */
    throw new UnsupportedOperationException(""Method not decompiled: io.flutter.embedding.android.a.g(android.view.MotionEvent, android.graphics.Matrix):boolean"");
}"
"<io.flutter.embedding.android.a: int b(int)>","private int b(int i2) {
    if (i2 == 0) {
        return 4;
    }
    if (i2 == 1) {
        return 6;
    }
    if (i2 == 5) {
        return 4;
    }
    if (i2 == 6) {
        return 6;
    }
    if (i2 == 2) {
        return 5;
    }
    if (i2 == 7) {
        return 3;
    }
    if (i2 == 3) {
        return 0;
    }
    return i2 == 8 ? 3 : -1;
}"
"<kotlinx.coroutines.internal.d: void d(java.lang.Object,java.lang.Object)>","public abstract void d(T t2, Object obj);"
"<kotlinx.coroutines.internal.d: long f()>","public long f() {
    return 0L;
}"
"<androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)>","public final void getRealSize(Display display, Point point) {
    i.e(display, ""display"");
    i.e(point, ""point"");
    display.getRealSize(point);
}"
"<org.chromium.support_lib_boundary.WebViewRendererClientBoundaryInterface: void onRendererUnresponsive(android.webkit.WebView,java.lang.reflect.InvocationHandler)>","void onRendererUnresponsive(WebView webView, InvocationHandler invocationHandler);"
"<org.chromium.support_lib_boundary.WebViewRendererClientBoundaryInterface: void onRendererResponsive(android.webkit.WebView,java.lang.reflect.InvocationHandler)>","void onRendererResponsive(WebView webView, InvocationHandler invocationHandler);"
"<io.flutter.plugins.webviewflutter.f2: void b0(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void b0(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.t(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void X(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void X(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    String str = (String) arrayList.get(1);
    if (str == null) {
        throw new NullPointerException(""urlArg unexpectedly null."");
    }
    Map<String, String> map = (Map) arrayList.get(2);
    if (map == null) {
        throw new NullPointerException(""headersArg unexpectedly null."");
    }
    c0Var.r(Long.valueOf(number.longValue()), str, map);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void J(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void J(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""xArg unexpectedly null."");
    }
    Number number3 = (Number) arrayList.get(2);
    if (number3 == null) {
        throw new NullPointerException(""yArg unexpectedly null."");
    }
    c0Var.s(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()), Long.valueOf(number3.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void d0(y.b,io.flutter.plugins.webviewflutter.k$c0)>","public static void d0(y.b bVar, final k.c0 c0Var) {
    y.a aVar = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.create"", B());
    if (c0Var != null) {
        aVar.e(new // from class: io.flutter.plugins.webviewflutter.w1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.C(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar.e(null);
    }
    y.a aVar2 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.dispose"", B());
    if (c0Var != null) {
        aVar2.e(new // from class: io.flutter.plugins.webviewflutter.f1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.D(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar2.e(null);
    }
    y.a aVar3 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.loadData"", B());
    if (c0Var != null) {
        aVar3.e(new // from class: io.flutter.plugins.webviewflutter.d2
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.O(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar3.e(null);
    }
    y.a aVar4 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.loadDataWithBaseUrl"", B());
    if (c0Var != null) {
        aVar4.e(new // from class: io.flutter.plugins.webviewflutter.e2
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.W(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar4.e(null);
    }
    y.a aVar5 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.loadUrl"", B());
    if (c0Var != null) {
        aVar5.e(new // from class: io.flutter.plugins.webviewflutter.s1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.X(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar5.e(null);
    }
    y.a aVar6 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.postUrl"", B());
    if (c0Var != null) {
        aVar6.e(new // from class: io.flutter.plugins.webviewflutter.v1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.Y(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar6.e(null);
    }
    y.a aVar7 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.getUrl"", B());
    if (c0Var != null) {
        aVar7.e(new // from class: io.flutter.plugins.webviewflutter.m1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.Z(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar7.e(null);
    }
    y.a aVar8 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.canGoBack"", B());
    if (c0Var != null) {
        aVar8.e(new // from class: io.flutter.plugins.webviewflutter.p1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.a0(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar8.e(null);
    }
    y.a aVar9 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.canGoForward"", B());
    if (c0Var != null) {
        aVar9.e(new // from class: io.flutter.plugins.webviewflutter.l1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.b0(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar9.e(null);
    }
    y.a aVar10 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.goBack"", B());
    if (c0Var != null) {
        aVar10.e(new // from class: io.flutter.plugins.webviewflutter.y1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.c0(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar10.e(null);
    }
    y.a aVar11 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.goForward"", B());
    if (c0Var != null) {
        aVar11.e(new // from class: io.flutter.plugins.webviewflutter.o1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.E(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar11.e(null);
    }
    y.a aVar12 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.reload"", B());
    if (c0Var != null) {
        aVar12.e(new // from class: io.flutter.plugins.webviewflutter.i1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.F(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar12.e(null);
    }
    y.a aVar13 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.clearCache"", B());
    if (c0Var != null) {
        aVar13.e(new // from class: io.flutter.plugins.webviewflutter.g1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.G(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar13.e(null);
    }
    y.a aVar14 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.evaluateJavascript"", B());
    if (c0Var != null) {
        aVar14.e(new // from class: io.flutter.plugins.webviewflutter.k1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.H(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar14.e(null);
    }
    y.a aVar15 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.getTitle"", B());
    if (c0Var != null) {
        aVar15.e(new // from class: io.flutter.plugins.webviewflutter.x1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.I(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar15.e(null);
    }
    y.a aVar16 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.scrollTo"", B());
    if (c0Var != null) {
        aVar16.e(new // from class: io.flutter.plugins.webviewflutter.e1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.J(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar16.e(null);
    }
    y.a aVar17 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.scrollBy"", B());
    if (c0Var != null) {
        aVar17.e(new // from class: io.flutter.plugins.webviewflutter.a2
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.K(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar17.e(null);
    }
    y.a aVar18 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.getScrollX"", B());
    if (c0Var != null) {
        aVar18.e(new // from class: io.flutter.plugins.webviewflutter.t1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.L(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar18.e(null);
    }
    y.a aVar19 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.getScrollY"", B());
    if (c0Var != null) {
        aVar19.e(new // from class: io.flutter.plugins.webviewflutter.c2
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.M(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar19.e(null);
    }
    y.a aVar20 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.getScrollPosition"", B());
    if (c0Var != null) {
        aVar20.e(new // from class: io.flutter.plugins.webviewflutter.u1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.N(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar20.e(null);
    }
    y.a aVar21 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.setWebContentsDebuggingEnabled"", B());
    if (c0Var != null) {
        aVar21.e(new // from class: io.flutter.plugins.webviewflutter.b2
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.P(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar21.e(null);
    }
    y.a aVar22 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.setWebViewClient"", B());
    if (c0Var != null) {
        aVar22.e(new // from class: io.flutter.plugins.webviewflutter.n1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.Q(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar22.e(null);
    }
    y.a aVar23 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.addJavaScriptChannel"", B());
    if (c0Var != null) {
        aVar23.e(new // from class: io.flutter.plugins.webviewflutter.h1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.R(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar23.e(null);
    }
    y.a aVar24 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.removeJavaScriptChannel"", B());
    if (c0Var != null) {
        aVar24.e(new // from class: io.flutter.plugins.webviewflutter.q1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.S(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar24.e(null);
    }
    y.a aVar25 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.setDownloadListener"", B());
    if (c0Var != null) {
        aVar25.e(new // from class: io.flutter.plugins.webviewflutter.z1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.T(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar25.e(null);
    }
    y.a aVar26 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.setWebChromeClient"", B());
    if (c0Var != null) {
        aVar26.e(new // from class: io.flutter.plugins.webviewflutter.r1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.U(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar26.e(null);
    }
    y.a aVar27 = new y.a(bVar, ""dev.flutter.pigeon.WebViewHostApi.setBackgroundColor"", B());
    if (c0Var != null) {
        aVar27.e(new // from class: io.flutter.plugins.webviewflutter.j1
        a.d() {

            // y.a.d
            @Override
            public final void a(Object obj, a.e eVar) {
                f2.V(k.c0.this, obj, eVar);
            }
        });
    } else {
        aVar27.e(null);
    }
}"
"<io.flutter.plugins.webviewflutter.f2: void G(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void G(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""includeDiskFilesArg unexpectedly null."");
    }
    c0Var.A(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void O(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void O(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    String str = (String) arrayList.get(1);
    if (str == null) {
        throw new NullPointerException(""dataArg unexpectedly null."");
    }
    c0Var.l(Long.valueOf(number.longValue()), str, (String) arrayList.get(2), (String) arrayList.get(3));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void a(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","// io.flutter.plugins.webviewflutter.k.n
@Override
public /* renamed from: b, reason: merged with bridge method [inline-methods] */
void a(String str) {
    this.f618a.put(""result"", str);
    this.f619b.a(this.f618a);
}"
"<io.flutter.plugins.webviewflutter.f2: void P(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void P(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Boolean bool;
    HashMap hashMap = new HashMap();
    try {
        bool = (Boolean) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (bool == null) {
        throw new NullPointerException(""enabledArg unexpectedly null."");
    }
    c0Var.c(bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void Q(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void Q(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""webViewClientInstanceIdArg unexpectedly null."");
    }
    c0Var.y(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void V(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void V(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""colorArg unexpectedly null."");
    }
    c0Var.w(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void R(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void R(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""javaScriptChannelInstanceIdArg unexpectedly null."");
    }
    c0Var.q(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void I(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void I(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.k(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void N(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void N(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.i(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void D(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void D(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    c0Var.a(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void L(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void L(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.d(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void Z(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void Z(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.g(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void a0(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void a0(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.x(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void C(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void C(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Boolean bool = (Boolean) arrayList.get(1);
    if (bool == null) {
        throw new NullPointerException(""useHybridCompositionArg unexpectedly null."");
    }
    c0Var.b(Long.valueOf(number.longValue()), bool);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void S(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void S(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""javaScriptChannelInstanceIdArg unexpectedly null."");
    }
    c0Var.e(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void c0(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void c0(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    c0Var.v(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void E(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void E(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    c0Var.p(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void M(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void M(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    hashMap.put(""result"", c0Var.f(Long.valueOf(number.longValue())));
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void K(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void K(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    if (number2 == null) {
        throw new NullPointerException(""xArg unexpectedly null."");
    }
    Number number3 = (Number) arrayList.get(2);
    if (number3 == null) {
        throw new NullPointerException(""yArg unexpectedly null."");
    }
    c0Var.j(Long.valueOf(number.longValue()), Long.valueOf(number2.longValue()), Long.valueOf(number3.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void F(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void F(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        number = (Number) ((ArrayList) obj).get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    c0Var.m(Long.valueOf(number.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void T(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void T(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    c0Var.z(Long.valueOf(number.longValue()), number2 == null ? null : Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void H(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void H(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    HashMap hashMap = new HashMap();
    try {
        ArrayList arrayList = (ArrayList) obj;
        Number number = (Number) arrayList.get(0);
        if (number == null) {
            throw new NullPointerException(""instanceIdArg unexpectedly null."");
        }
        String str = (String) arrayList.get(1);
        if (str == null) {
            throw new NullPointerException(""javascriptStringArg unexpectedly null."");
        }
        c0Var.o(Long.valueOf(number.longValue()), str, new a(hashMap, eVar));
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
        eVar.a(hashMap);
    }
}"
"<io.flutter.plugins.webviewflutter.f2: void Y(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void Y(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    String str = (String) arrayList.get(1);
    if (str == null) {
        throw new NullPointerException(""urlArg unexpectedly null."");
    }
    byte[] bArr = (byte[]) arrayList.get(2);
    if (bArr == null) {
        throw new NullPointerException(""dataArg unexpectedly null."");
    }
    c0Var.h(Long.valueOf(number.longValue()), str, bArr);
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void W(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void W(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    String str = (String) arrayList.get(1);
    String str2 = (String) arrayList.get(2);
    if (str2 == null) {
        throw new NullPointerException(""dataArg unexpectedly null."");
    }
    c0Var.u(Long.valueOf(number.longValue()), str, str2, (String) arrayList.get(3), (String) arrayList.get(4), (String) arrayList.get(5));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<io.flutter.plugins.webviewflutter.f2: void U(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","public static /* synthetic */
void U(k.c0 c0Var, Object obj, a.e eVar) {
    Map b2;
    ArrayList arrayList;
    Number number;
    HashMap hashMap = new HashMap();
    try {
        arrayList = (ArrayList) obj;
        number = (Number) arrayList.get(0);
    } catch (Error | RuntimeException e2) {
        b2 = k.b(e2);
        hashMap.put(""error"", b2);
    }
    if (number == null) {
        throw new NullPointerException(""instanceIdArg unexpectedly null."");
    }
    Number number2 = (Number) arrayList.get(1);
    c0Var.n(Long.valueOf(number.longValue()), number2 == null ? null : Long.valueOf(number2.longValue()));
    hashMap.put(""result"", null);
    eVar.a(hashMap);
}"
"<androidx.webkit.WebViewClientCompat: void c(android.webkit.WebView,android.webkit.WebResourceRequest,int,j.a)>","public void c(WebView webView, WebResourceRequest webResourceRequest, int i2, a aVar) {
    if (!g.a(""SAFE_BROWSING_RESPONSE_SHOW_INTERSTITIAL"")) {
        throw j.a();
    }
    aVar.a(true);
}"
"<androidx.webkit.WebViewClientCompat: void b(android.webkit.WebView,android.webkit.WebResourceRequest,j.e)>","public void b(WebView webView, WebResourceRequest webResourceRequest, e eVar) {
    throw null;
}"
"<androidx.webkit.WebViewClientCompat: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,java.lang.reflect.InvocationHandler)>","// android.webkit.WebViewClient
@Override
public final void onReceivedError(WebView webView, WebResourceRequest webResourceRequest, WebResourceError webResourceError) {
    if (Build.VERSION.SDK_INT < 23) {
        return;
    }
    b(webView, webResourceRequest, new i(webResourceError));
}"
"<androidx.webkit.WebViewClientCompat: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>","// android.webkit.WebViewClient
@Override
public final void onReceivedError(WebView webView, WebResourceRequest webResourceRequest, WebResourceError webResourceError) {
    if (Build.VERSION.SDK_INT < 23) {
        return;
    }
    b(webView, webResourceRequest, new i(webResourceError));
}"
"<androidx.webkit.WebViewClientCompat: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)>","// android.webkit.WebViewClient
@Override
public final void onSafeBrowsingHit(WebView webView, WebResourceRequest webResourceRequest, int i2, SafeBrowsingResponse safeBrowsingResponse) {
    c(webView, webResourceRequest, i2, new k.g(safeBrowsingResponse));
}"
"<androidx.webkit.WebViewClientCompat: boolean onWebAuthnIntent(android.webkit.WebView,android.app.PendingIntent,java.lang.reflect.InvocationHandler)>","// org.chromium.support_lib_boundary.WebViewClientBoundaryInterface
@Override
public boolean onWebAuthnIntent(WebView webView, PendingIntent pendingIntent, InvocationHandler invocationHandler) {
    return false;
}"
"<androidx.webkit.WebViewClientCompat: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,java.lang.reflect.InvocationHandler)>","// android.webkit.WebViewClient
@Override
public final void onSafeBrowsingHit(WebView webView, WebResourceRequest webResourceRequest, int i2, SafeBrowsingResponse safeBrowsingResponse) {
    c(webView, webResourceRequest, i2, new k.g(safeBrowsingResponse));
}"
"<androidx.webkit.WebViewClientCompat: void onPageCommitVisible(android.webkit.WebView,java.lang.String)>","// android.webkit.WebViewClient, org.chromium.support_lib_boundary.WebViewClientBoundaryInterface
@Override
public void onPageCommitVisible(WebView webView, String str) {
}"
"<androidx.webkit.WebViewClientCompat: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)>","// android.webkit.WebViewClient, org.chromium.support_lib_boundary.WebViewClientBoundaryInterface
@Override
public void onReceivedHttpError(WebView webView, WebResourceRequest webResourceRequest, WebResourceResponse webResourceResponse) {
}"
"<h.a: void a(java.lang.String,int)>","@SuppressLint({ ""NewApi"" })
public static void a(String str, int i2) {
    try {
        if (f172b == null) {
            c.a(str, i2);
            return;
        }
    } catch (NoClassDefFoundError | NoSuchMethodError unused) {
    }
    b(str, i2);
}"
"<h.a: void e(java.lang.String,int)>","private static void e(String str, int i2) {
    if (Build.VERSION.SDK_INT >= 18) {
        try {
            if (f173c == null) {
                f173c = Trace.class.getMethod(""asyncTraceEnd"", Long.TYPE, String.class, Integer.TYPE);
            }
            f173c.invoke(null, Long.valueOf(f171a), str, Integer.valueOf(i2));
        } catch (Exception e2) {
            g(""asyncTraceEnd"", e2);
        }
    }
}"
"<h.a: void f()>","public static void f() {
    if (Build.VERSION.SDK_INT >= 18) {
        b.b();
    }
}"
"<h.a: void b(java.lang.String,int)>","private static void b(String str, int i2) {
    if (Build.VERSION.SDK_INT >= 18) {
        try {
            if (f172b == null) {
                f172b = Trace.class.getMethod(""asyncTraceBegin"", Long.TYPE, String.class, Integer.TYPE);
            }
            f172b.invoke(null, Long.valueOf(f171a), str, Integer.valueOf(i2));
        } catch (Exception e2) {
            g(""asyncTraceBegin"", e2);
        }
    }
}"
"<h.a: void g(java.lang.String,java.lang.Exception)>","private static void g(String str, Exception exc) {
    if (exc instanceof InvocationTargetException) {
        Throwable cause = exc.getCause();
        if (!(cause instanceof RuntimeException)) {
            throw new RuntimeException(cause);
        }
        throw ((RuntimeException) cause);
    }
    Log.v(""Trace"", ""Unable to call "" + str + "" via reflection"", exc);
}"
"<h.a: void c(java.lang.String)>","public static void c(String str) {
    if (Build.VERSION.SDK_INT >= 18) {
        b.a(str);
    }
}"
"<h.a: void d(java.lang.String,int)>","@SuppressLint({ ""NewApi"" })
public static void d(String str, int i2) {
    try {
        if (f173c == null) {
            c.b(str, i2);
            return;
        }
    } catch (NoClassDefFoundError | NoSuchMethodError unused) {
    }
    e(str, i2);
}"
"<b.a: void putAll(java.util.Map)>","// java.util.Map
@Override
public void putAll(Map<? extends K, ? extends V> map) {
    c(this.f125f + map.size());
    for (Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
        put(entry.getKey(), entry.getValue());
    }
}"
"<io.flutter.plugins.webviewflutter.i2: void a(io.flutter.plugins.webviewflutter.i2)>","void a(long j2);"
"<io.flutter.plugins.webviewflutter.i2: void j()>","/* JADX INFO: Access modifiers changed from: private */
public void j() {
    while (true) {
        WeakReference weakReference = (WeakReference) this.f642d.poll();
        if (weakReference == null) {
            this.f644f.postDelayed(new h2(this), 30000L);
            return;
        }
        Long remove = this.f643e.remove(weakReference);
        if (remove != null) {
            this.f640b.remove(remove);
            this.f641c.remove(remove);
            this.f645g.a(remove.longValue());
        }
    }
}"
"<io.flutter.plugins.webviewflutter.i2: void c(java.lang.Object,long)>","private void c(Object obj, long j2) {
    if (j2 < 0) {
        throw new IllegalArgumentException(""Identifier must be >= 0."");
    }
    WeakReference<Object> weakReference = new WeakReference<>(obj, this.f642d);
    this.f639a.put(obj, Long.valueOf(j2));
    this.f640b.put(Long.valueOf(j2), weakReference);
    this.f643e.put(weakReference, Long.valueOf(j2));
    this.f641c.put(Long.valueOf(j2), obj);
}"
"<io.flutter.plugins.webviewflutter.i2: void d()>","private void d() {
    if (this.f647i) {
        throw new AssertionError(""Manager has already been closed."");
    }
}"
"<io.flutter.plugins.webviewflutter.i2: void e()>","public void e() {
    this.f644f.removeCallbacks(new h2(this));
    this.f647i = true;
}"
"<io.flutter.plugins.webviewflutter.i2: void b(java.lang.Object,long)>","public void b(Object obj, long j2) {
    d();
    c(obj, j2);
}"
"<io.flutter.plugins.webviewflutter.i2: boolean f(java.lang.Object)>","public boolean f(Object obj) {
    d();
    return this.f639a.containsKey(obj);
}"
"<q0.b: int a()>","// e0.v
@Override
public int a() {
    int i2 = this.f1245g;
    if (i2 != this.f1243e) {
        this.f1245g = this.f1242d + i2;
    } else {
        if (!this.f1244f) {
            throw new NoSuchElementException();
        }
        this.f1244f = false;
    }
    return i2;
}"
"<q0.b: boolean hasNext()>","// java.util.Iterator
@Override
public boolean hasNext() {
    return this.f1244f;
}"
"<androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof ActivityFilter)) {
        return false;
    }
    ActivityFilter activityFilter = (ActivityFilter) obj;
    return i.a(this.componentName, activityFilter.componentName) && i.a(this.intentAction, activityFilter.intentAction);
}"
"<androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)>","public final boolean matchesIntent(Intent intent) {
    i.e(intent, ""intent"");
    if (!MatcherUtils.INSTANCE.areComponentsMatching$window_release(intent.getComponent(), this.componentName)) {
        return false;
    }
    String str = this.intentAction;
    return str == null || i.a(str, intent.getAction());
}"
"<androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)>","public final boolean matchesActivity(Activity activity) {
    i.e(activity, ""activity"");
    if (MatcherUtils.INSTANCE.areActivityOrIntentComponentsMatching$window_release(activity, this.componentName)) {
        String str = this.intentAction;
        if (str != null) {
            Intent intent = activity.getIntent();
            if (i.a(str, intent == null ? null : intent.getAction())) {
            }
        }
        return true;
    }
    return false;
}"
"<androidx.window.embedding.ActivityFilter: int hashCode()>","public int hashCode() {
    int hashCode = this.componentName.hashCode() * 31;
    String str = this.intentAction;
    return hashCode + (str == null ? 0 : str.hashCode());
}"
"<x.a: void c(int,io.flutter.view.c$g,java.lang.Object)>","void c(String str);"
"<x.a: void b(int,io.flutter.view.c$g)>","public void b(int i2, c.g gVar) {
    this.f1474b.dispatchSemanticsAction(i2, gVar);
}"
"<x.a: void g(x.a$b)>","public void g(b bVar) {
    this.f1475c = bVar;
    this.f1474b.setAccessibilityDelegate(bVar);
}"
"<x.a: void e()>","void e(int i2);"
"<x.a: void f(int)>","void f(String str);"
"<x.a: void d()>","void d(int i2);"
"<kotlin.jvm.internal.l: r0.c b(java.lang.Class)>","public static r0.c b(Class cls) {
    return f1011a.b(cls);
}"
"<kotlin.jvm.internal.l: r0.e a(kotlin.jvm.internal.g)>","public static r0.e a(g gVar) {
    return f1011a.a(gVar);
}"
"<kotlin.jvm.internal.l: r0.d c(java.lang.Class)>","public static r0.d c(Class cls) {
    return f1011a.c(cls, """");
}"
"<y.k: boolean c(int,int,android.content.Intent)>","boolean c(int i2, int i3, Intent intent);"
"<io.flutter.plugins.webviewflutter.d: void h(android.webkit.DownloadListener,io.flutter.plugins.webviewflutter.k$d$a)>","public void h(DownloadListener downloadListener, k.d.a<Void> aVar) {
    if (this.f603b.f(downloadListener)) {
        c(Long.valueOf(i(downloadListener)), aVar);
    } else {
        aVar.a(null);
    }
}"
"<io.flutter.plugins.webviewflutter.d: void j(android.webkit.DownloadListener,java.lang.String,java.lang.String,java.lang.String,java.lang.String,long,io.flutter.plugins.webviewflutter.k$d$a)>","public void j(DownloadListener downloadListener, String str, String str2, String str3, String str4, long j2, k.d.a<Void> aVar) {
    g(Long.valueOf(i(downloadListener)), str, str2, str3, str4, Long.valueOf(j2), aVar);
}"
"<io.flutter.plugins.webviewflutter.d: long i(android.webkit.DownloadListener)>","private long i(DownloadListener downloadListener) {
    Long g2 = this.f603b.g(downloadListener);
    if (g2 != null) {
        return g2.longValue();
    }
    throw new IllegalStateException(""Could not find identifier for DownloadListener."");
}"
"<androidx.lifecycle.g: void j(androidx.lifecycle.c$b)>","private void j(c.b bVar) {
    if (this.f60c == bVar) {
        return;
    }
    this.f60c = bVar;
    if (this.f63f || this.f62e != 0) {
        this.f64g = true;
        return;
    }
    this.f63f = true;
    m();
    this.f63f = false;
}"
"<androidx.lifecycle.g: void g(androidx.lifecycle.c$a)>","public void g(c.a aVar) {
    j(f(aVar));
}"
"<androidx.lifecycle.g: void c(androidx.lifecycle.f)>","private void c(f fVar) {
    Iterator<Map.Entry<e, b>> a2 = this.f59b.a();
    while (a2.hasNext() && !this.f64g) {
        Map.Entry<e, b> next = a2.next();
        b value = next.getValue();
        while (value.f68a.compareTo(this.f60c) > 0 && !this.f64g && this.f59b.contains(next.getKey())) {
            c.a d2 = d(value.f68a);
            l(f(d2));
            value.a(fVar, d2);
            k();
        }
    }
}"
"<androidx.lifecycle.g: void e(androidx.lifecycle.f)>","/* JADX WARN: Multi-variable type inference failed */
private void e(f fVar) {
    a.b<e, b>.d d2 = this.f59b.d();
    while (d2.hasNext() && !this.f64g) {
        Map.Entry next = d2.next();
        b bVar = (b) next.getValue();
        while (bVar.f68a.compareTo(this.f60c) < 0 && !this.f64g && this.f59b.contains(next.getKey())) {
            l(bVar.f68a);
            bVar.a(fVar, n(bVar.f68a));
            k();
        }
    }
}"
"<androidx.lifecycle.g: void l(androidx.lifecycle.c$b)>","private void l(c.b bVar) {
    this.f65h.add(bVar);
}"
"<androidx.lifecycle.g: boolean h()>","private boolean h() {
    if (this.f59b.size() == 0) {
        return true;
    }
    c.b bVar = this.f59b.b().getValue().f68a;
    c.b bVar2 = this.f59b.e().getValue().f68a;
    return bVar == bVar2 && this.f60c == bVar2;
}"
"<androidx.lifecycle.g: void b(androidx.lifecycle.e)>","// androidx.lifecycle.c
@Override
public void b(e eVar) {
    this.f59b.f(eVar);
}"
"<androidx.lifecycle.g: void m()>","private void m() {
    f fVar = this.f61d.get();
    if (fVar == null) {
        throw new IllegalStateException(""LifecycleOwner of this LifecycleRegistry is alreadygarbage collected. It is too late to change lifecycle state."");
    }
    while (true) {
        boolean h2 = h();
        this.f64g = false;
        if (h2) {
            return;
        }
        if (this.f60c.compareTo(this.f59b.b().getValue().f68a) < 0) {
            c(fVar);
        }
        Map.Entry<e, b> e2 = this.f59b.e();
        if (!this.f64g && e2 != null && this.f60c.compareTo(e2.getValue().f68a) > 0) {
            e(fVar);
        }
    }
}"
"<androidx.lifecycle.g: void k()>","private void k() {
    this.f65h.remove(r0.size() - 1);
}"
"<kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(g0.g,java.lang.Throwable)>","// kotlinx.coroutines.CoroutineExceptionHandler
@Override
public void handleException(g gVar, Throwable th) {
    Thread currentThread = Thread.currentThread();
    if (Build.VERSION.SDK_INT >= 28) {
        currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, th);
        return;
    }
    Method preHandler = preHandler();
    Object invoke = preHandler == null ? null : preHandler.invoke(null, new Object[0]);
    Thread.UncaughtExceptionHandler uncaughtExceptionHandler = invoke instanceof Thread.UncaughtExceptionHandler ? (Thread.UncaughtExceptionHandler) invoke : null;
    if (uncaughtExceptionHandler == null) {
        return;
    }
    uncaughtExceptionHandler.uncaughtException(currentThread, th);
}"
"<io.flutter.plugins.webviewflutter.g2: void b()>","/* JADX INFO: Access modifiers changed from: package-private */
public void b() {
    j();
}"
"<io.flutter.plugins.webviewflutter.g2: void j()>","private void j() {
    if (this.f625b == null) {
        return;
    }
    View view = this.f626c;
    if (view == null) {
        Log.e(""InputAwareWebView"", ""Can't reset the input connection to the container view because there is none."");
    } else {
        setInputConnectionTarget(view);
    }
}"
"<io.flutter.plugins.webviewflutter.g2: boolean checkInputConnectionProxy(android.view.View)>","// android.view.View
@Override
public boolean checkInputConnectionProxy(View view) {
    View view2 = this.f624a;
    this.f624a = view;
    if (view2 == view) {
        return super.checkInputConnectionProxy(view);
    }
    View view3 = this.f626c;
    if (view3 == null) {
        Log.e(""InputAwareWebView"", ""Can't create a proxy view because there's no container view. Text input may not work."");
    } else {
        q2 q2Var = new q2(view3, view, view.getHandler());
        this.f625b = q2Var;
        setInputConnectionTarget(q2Var);
    }
    return super.checkInputConnectionProxy(view);
}"
"<io.flutter.plugins.webviewflutter.g2: void clearFocus()>","// android.view.ViewGroup, android.view.View
@Override
public void clearFocus() {
    super.clearFocus();
    j();
}"
"<io.flutter.plugins.webviewflutter.g2: void setContainerView(android.view.View)>","/* JADX INFO: Access modifiers changed from: package-private */
public void setContainerView(View view) {
    this.f626c = view;
    if (this.f625b == null) {
        return;
    }
    Log.w(""InputAwareWebView"", ""The containerView has changed while the proxyAdapterView exists."");
    if (view != null) {
        setInputConnectionTarget(this.f625b);
    }
}"
"<io.flutter.plugins.webviewflutter.g2: void onFocusChanged(boolean,int,android.graphics.Rect)>","// android.webkit.WebView, android.view.View
@Override
protected void onFocusChanged(boolean z2, int i2, Rect rect) {
    if (Build.VERSION.SDK_INT >= 28 || !h() || z2) {
        super.onFocusChanged(z2, i2, rect);
    }
}"
"<io.flutter.plugins.webviewflutter.g2: void setInputConnectionTarget(android.view.View)>","void setInputConnectionTarget(View view) {
    if (this.f626c == null) {
        Log.e(""InputAwareWebView"", ""Can't set the input connection target because there is no containerView to use as a handler."");
    } else {
        view.requestFocus();
        this.f626c.post(new a(view));
    }
}"
"<io.flutter.plugins.webviewflutter.g2: void k()>","/* JADX INFO: Access modifiers changed from: package-private */
public void k() {
    q2 q2Var = this.f625b;
    if (q2Var == null) {
        return;
    }
    q2Var.a(false);
}"
"<io.flutter.plugins.webviewflutter.g2: void i()>","/* JADX INFO: Access modifiers changed from: package-private */
public void i() {
    q2 q2Var = this.f625b;
    if (q2Var == null) {
        return;
    }
    q2Var.a(true);
}"
"<io.flutter.plugins.webviewflutter.g2: boolean h()>","private boolean h() {
    for (StackTraceElement stackTraceElement : Thread.currentThread().getStackTrace()) {
        if (stackTraceElement.getClassName().equals(ListPopupWindow.class.getCanonicalName()) && stackTraceElement.getMethodName().equals(""show"")) {
            return true;
        }
    }
    return false;
}"
"<kotlinx.coroutines.scheduling.k: void run()>","// java.lang.Runnable
@Override
public void run() {
    try {
        this.f1130f.run();
    } finally {
        this.f1129e.f();
    }
}"
"<f0.b: int a(java.lang.Comparable,java.lang.Comparable)>","public static <T extends Comparable<?>> int a(T t2, T t3) {
    if (t2 == t3) {
        return 0;
    }
    if (t2 == null) {
        return -1;
    }
    if (t3 == null) {
        return 1;
    }
    return t2.compareTo(t3);
}"
"<u0.z1: boolean a()>","// u0.j1
@Override
public boolean a() {
    return true;
}"
"<u0.b1: void C()>","/* JADX INFO: Access modifiers changed from: protected */
public final void C() {
    Thread A = A();
    if (Thread.currentThread() != A) {
        c.a();
        LockSupport.unpark(A);
    }
}"
"<u0.b1: void B(long,u0.a1$a)>","/* JADX INFO: Access modifiers changed from: protected */
public final void B(long j2, a1.a aVar) {
    if (p0.a()) {
        if (!(this != r0.f1334j)) {
            throw new AssertionError();
        }
    }
    r0.f1334j.N(j2, aVar);
}"
"<y.p: java.lang.Object f(java.nio.ByteBuffer)>","/* JADX WARN: Code restructure failed: missing block: B:4:0x000e, code lost:
    
        if (r0 == 1) goto L10;
     */
// y.j
@Override
public /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
java.lang.Object f(java.nio.ByteBuffer r5) {
    /*
            r4 = this;
            java.nio.ByteOrder r0 = java.nio.ByteOrder.nativeOrder()
            r5.order(r0)
            byte r0 = r5.get()
            if (r0 == 0) goto L11
            r1 = 1
            if (r0 != r1) goto L4a
            goto L1e
        L11:
            y.o r0 = r4.f1692a
            java.lang.Object r0 = r0.f(r5)
            boolean r1 = r5.hasRemaining()
            if (r1 != 0) goto L1e
            return r0
        L1e:
            y.o r0 = r4.f1692a
            java.lang.Object r0 = r0.f(r5)
            y.o r1 = r4.f1692a
            java.lang.Object r1 = r1.f(r5)
            y.o r2 = r4.f1692a
            java.lang.Object r2 = r2.f(r5)
            boolean r3 = r0 instanceof java.lang.String
            if (r3 == 0) goto L4a
            if (r1 == 0) goto L3a
            boolean r3 = r1 instanceof java.lang.String
            if (r3 == 0) goto L4a
        L3a:
            boolean r5 = r5.hasRemaining()
            if (r5 != 0) goto L4a
            y.c r5 = new y.c
            java.lang.String r0 = (java.lang.String) r0
            java.lang.String r1 = (java.lang.String) r1
            r5.<init>(r0, r1, r2)
            throw r5
        L4a:
            java.lang.IllegalArgumentException r5 = new java.lang.IllegalArgumentException
            java.lang.String r0 = ""Envelope corrupted""
            r5.<init>(r0)
            throw r5
        */
    throw new UnsupportedOperationException(""Method not decompiled: y.p.f(java.nio.ByteBuffer):java.lang.Object"");
}"
"<w.c: void b(w.a)>","void b(a aVar);"
"<w.c: void a()>","void a();"
"<w.c: void c()>","void c();"
"<io.flutter.plugin.platform.r: void f(android.view.View)>","/* JADX INFO: Access modifiers changed from: package-private */
public void f(View view) {
    SingleViewPresentation singleViewPresentation = this.f570a;
    if (singleViewPresentation == null || singleViewPresentation.getView() == null) {
        return;
    }
    this.f570a.getView().e(view);
}"
"<io.flutter.plugin.platform.r: void i(int,int,java.lang.Runnable)>","public void i(int i2, int i3, Runnable runnable) {
    boolean isFocused = e().isFocused();
    SingleViewPresentation.e detachState = this.f570a.detachState();
    this.f577h.setSurface(null);
    this.f577h.release();
    this.f578i = i2;
    this.f579j = i3;
    this.f574e.d().setDefaultBufferSize(i2, i3);
    this.f577h = ((DisplayManager) this.f571b.getSystemService(""display"")).createVirtualDisplay(""flutter-vd"", i2, i3, this.f573d, this.f576g, 0);
    View e2 = e();
    e2.addOnAttachStateChangeListener(new a(e2, runnable));
    SingleViewPresentation singleViewPresentation = new SingleViewPresentation(this.f571b, this.f577h.getDisplay(), this.f572c, detachState, this.f575f, isFocused);
    singleViewPresentation.show();
    this.f570a.cancel();
    this.f570a = singleViewPresentation;
}"
"<io.flutter.plugin.platform.r: int c()>","public int c() {
    return this.f579j;
}"
"<io.flutter.plugin.platform.r: void b(android.view.MotionEvent)>","public void b(MotionEvent motionEvent) {
    SingleViewPresentation singleViewPresentation = this.f570a;
    if (singleViewPresentation == null) {
        return;
    }
    singleViewPresentation.dispatchTouchEvent(motionEvent);
}"
"<io.flutter.plugin.platform.r: void g()>","/* JADX INFO: Access modifiers changed from: package-private */
public void g() {
    SingleViewPresentation singleViewPresentation = this.f570a;
    if (singleViewPresentation == null || singleViewPresentation.getView() == null) {
        return;
    }
    this.f570a.getView().d();
}"
"<io.flutter.plugin.platform.r: void h()>","/* JADX INFO: Access modifiers changed from: package-private */
public void h() {
    SingleViewPresentation singleViewPresentation = this.f570a;
    if (singleViewPresentation == null || singleViewPresentation.getView() == null) {
        return;
    }
    this.f570a.getView().c();
}"
"<io.flutter.plugin.platform.r: int d()>","public int d() {
    return this.f578i;
}"
"<u0.x: boolean equals(java.lang.Object)>","public boolean equals(Object obj) {
    if (this == obj) {
        return true;
    }
    if (!(obj instanceof x)) {
        return false;
    }
    x xVar = (x) obj;
    return kotlin.jvm.internal.i.a(this.f1366a, xVar.f1366a) && kotlin.jvm.internal.i.a(this.f1367b, xVar.f1367b) && kotlin.jvm.internal.i.a(this.f1368c, xVar.f1368c) && kotlin.jvm.internal.i.a(this.f1369d, xVar.f1369d) && kotlin.jvm.internal.i.a(this.f1370e, xVar.f1370e);
}"
"<u0.x: void d(u0.l,java.lang.Throwable)>","public final void d(l<?> lVar, Throwable th) {
    i iVar = this.f1367b;
    if (iVar != null) {
        lVar.k(iVar, th);
    }
    n0.l<Throwable, d0.q> lVar2 = this.f1368c;
    if (lVar2 == null) {
        return;
    }
    lVar.l(lVar2, th);
}"
"<u0.x: boolean c()>","public final boolean c() {
    return this.f1370e != null;
}"
"<u0.x: int hashCode()>","public int hashCode() {
    Object obj = this.f1366a;
    int hashCode = (obj == null ? 0 : obj.hashCode()) * 31;
    i iVar = this.f1367b;
    int hashCode2 = (hashCode + (iVar == null ? 0 : iVar.hashCode())) * 31;
    n0.l<Throwable, d0.q> lVar = this.f1368c;
    int hashCode3 = (hashCode2 + (lVar == null ? 0 : lVar.hashCode())) * 31;
    Object obj2 = this.f1369d;
    int hashCode4 = (hashCode3 + (obj2 == null ? 0 : obj2.hashCode())) * 31;
    Throwable th = this.f1370e;
    return hashCode4 + (th != null ? th.hashCode() : 0);
}"
"<io.flutter.embedding.android.r: long i(long,long)>","private static long i(long j2, long j3) {
    return (j2 & 4294967295L) | j3;
}"
"<io.flutter.embedding.android.r: void p(boolean,java.lang.Long,java.lang.Long,long)>","private void p(boolean z2, Long l2, Long l3, long j2) {
    n nVar = new n();
    nVar.f299a = j2;
    nVar.f300b = z2 ? n.a.kDown : n.a.kUp;
    nVar.f302d = l2.longValue();
    nVar.f301c = l3.longValue();
    nVar.f304f = null;
    nVar.f303e = true;
    if (l3.longValue() != 0 && l2.longValue() != 0) {
        if (!z2) {
            l2 = null;
        }
        q(l3, l2);
    }
    m(nVar, null);
}"
"<io.flutter.embedding.android.r: void o(io.flutter.embedding.android.t$e,boolean,long,android.view.KeyEvent)>","void o(t.e eVar, boolean z2, long j2, KeyEvent keyEvent) {
    if (eVar.f342c == j2 || eVar.f343d == z2) {
        return;
    }
    boolean z3 = !this.f319b.containsKey(Long.valueOf(eVar.f341b));
    if (z3) {
        eVar.f343d = !eVar.f343d;
    }
    p(z3, Long.valueOf(eVar.f342c), Long.valueOf(eVar.f341b), keyEvent.getEventTime());
    if (!z3) {
        eVar.f343d = !eVar.f343d;
    }
    p(!z3, Long.valueOf(eVar.f342c), Long.valueOf(eVar.f341b), keyEvent.getEventTime());
}"
"<io.flutter.embedding.android.r: void m(io.flutter.embedding.android.n,io.flutter.embedding.android.s$d$a)>","private void m(n nVar, final s.d.a aVar) {
    this.f318a.a(""flutter/keydata"", nVar.a(), aVar == null ? null : new // from class: io.flutter.embedding.android.q
    b.InterfaceC0039b() {

        // y.b.InterfaceC0039b
        @Override
        public final void a(ByteBuffer byteBuffer) {
            r.j(s.d.a.this, byteBuffer);
        }
    });
}"
"<io.flutter.embedding.android.r: void q(java.lang.Long,java.lang.Long)>","void q(Long l2, Long l3) {
    if (l3 != null) {
        if (this.f319b.put(l2, l3) != null) {
            throw new AssertionError(""The key was not empty"");
        }
    } else if (this.f319b.remove(l2) == null) {
        throw new AssertionError(""The key was empty"");
    }
}"
"<io.flutter.embedding.android.r: void a(android.view.KeyEvent,io.flutter.embedding.android.s$d$a)>","// y.b.InterfaceC0039b
@Override
public final void a(ByteBuffer byteBuffer) {
    r.j(s.d.a.this, byteBuffer);
}"
"<io.flutter.embedding.android.r: void j(io.flutter.embedding.android.s$d$a,java.nio.ByteBuffer)>","/* JADX INFO: Access modifiers changed from: private */
public static /* synthetic */
void j(s.d.a aVar, ByteBuffer byteBuffer) {
    Boolean bool = Boolean.FALSE;
    byteBuffer.rewind();
    if (byteBuffer.capacity() != 0) {
        bool = Boolean.valueOf(byteBuffer.get() != 0);
    }
    aVar.a(bool.booleanValue());
}"
"<io.flutter.embedding.android.r: boolean h(android.view.KeyEvent,io.flutter.embedding.android.s$d$a)>","/* JADX WARN: Removed duplicated region for block: B:40:0x00b8  */
/* JADX WARN: Removed duplicated region for block: B:43:0x00d4  */
/* JADX WARN: Removed duplicated region for block: B:54:0x0119 A[LOOP:2: B:52:0x0113->B:54:0x0119, LOOP_END] */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
private boolean h(android.view.KeyEvent r18, io.flutter.embedding.android.s.d.a r19) {
    /*
            Method dump skipped, instructions count: 292
            To view this dump add '--comments-level debug' option
        */
    throw new UnsupportedOperationException(""Method not decompiled: io.flutter.embedding.android.r.h(android.view.KeyEvent, io.flutter.embedding.android.s$d$a):boolean"");
}"
"<io.flutter.embedding.android.r: void l(io.flutter.embedding.android.t$c,android.view.KeyEvent)>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void l(t.c cVar, KeyEvent keyEvent) {
    p(false, Long.valueOf(cVar.f337b), Long.valueOf(cVar.f336a), keyEvent.getEventTime());
}"
"<io.flutter.embedding.android.r: void n(io.flutter.embedding.android.t$d,boolean,long,long,android.view.KeyEvent,java.util.ArrayList)>","void n(t.d dVar, boolean z2, long j2, final long j3, final KeyEvent keyEvent, ArrayList<Runnable> arrayList) {
    t.c[] cVarArr = dVar.f339b;
    boolean[] zArr = new boolean[cVarArr.length];
    Boolean[] boolArr = new Boolean[cVarArr.length];
    boolean z3 = false;
    int i2 = 0;
    while (true) {
        t.c[] cVarArr2 = dVar.f339b;
        boolean z4 = true;
        if (i2 >= cVarArr2.length) {
            break;
        }
        final t.c cVar = cVarArr2[i2];
        zArr[i2] = this.f319b.containsKey(Long.valueOf(cVar.f336a));
        if (cVar.f337b == j2) {
            int i3 = a.f322a[e(keyEvent).ordinal()];
            if (i3 != 1) {
                if (i3 == 2) {
                    boolArr[i2] = Boolean.valueOf(zArr[i2]);
                } else if (i3 == 3) {
                    if (!z2) {
                        arrayList.add(new // from class: io.flutter.embedding.android.p
                        Runnable() {

                            // java.lang.Runnable
                            @Override
                            public final void run() {
                                r.this.l(cVar, keyEvent);
                            }
                        });
                    }
                    boolArr[i2] = Boolean.valueOf(zArr[i2]);
                }
                i2++;
            } else {
                boolArr[i2] = Boolean.FALSE;
                if (!z2) {
                    arrayList.add(new // from class: io.flutter.embedding.android.o
                    Runnable() {

                        // java.lang.Runnable
                        @Override
                        public final void run() {
                            r.this.k(cVar, j3, keyEvent);
                        }
                    });
                }
            }
        } else if (!z3 && !zArr[i2]) {
            z4 = false;
        }
        z3 = z4;
        i2++;
    }
    if (z2) {
        for (int i4 = 0; i4 < dVar.f339b.length; i4++) {
            if (boolArr[i4] == null) {
                if (z3) {
                    boolArr[i4] = Boolean.valueOf(zArr[i4]);
                } else {
                    boolArr[i4] = Boolean.TRUE;
                    z3 = true;
                }
            }
        }
        if (!z3) {
            boolArr[0] = Boolean.TRUE;
        }
    } else {
        for (int i5 = 0; i5 < dVar.f339b.length; i5++) {
            if (boolArr[i5] == null) {
                boolArr[i5] = Boolean.FALSE;
            }
        }
    }
    for (int i6 = 0; i6 < dVar.f339b.length; i6++) {
        if (zArr[i6] != boolArr[i6].booleanValue()) {
            t.c cVar2 = dVar.f339b[i6];
            p(boolArr[i6].booleanValue(), Long.valueOf(cVar2.f337b), Long.valueOf(cVar2.f336a), keyEvent.getEventTime());
        }
    }
}"
"<io.flutter.embedding.android.r: void k(io.flutter.embedding.android.t$c,long,android.view.KeyEvent)>","/* JADX INFO: Access modifiers changed from: private */
public /* synthetic */
void k(t.c cVar, long j2, KeyEvent keyEvent) {
    p(false, Long.valueOf(cVar.f337b), Long.valueOf(j2), keyEvent.getEventTime());
}"
"<io.flutter.plugins.webviewflutter.h2: void run()>","// java.lang.Runnable
@Override
public final void run() {
    this.f634d.j();
}"
"<i0.c: int c(int,int)>","private static final int c(int i2, int i3) {
    int i4 = i2 % i3;
    return i4 >= 0 ? i4 : i4 + i3;
}"
"<i0.c: int a(int,int,int)>","private static final int a(int i2, int i3, int i4) {
    return c(c(i2, i4) - c(i3, i4), i4);
}"
"<i0.c: int b(int,int,int)>","public static final int b(int i2, int i3, int i4) {
    if (i4 > 0) {
        return i2 >= i3 ? i3 : i3 - a(i3, i2, i4);
    }
    if (i4 < 0) {
        return i2 <= i3 ? i3 : i3 + a(i2, i3, -i4);
    }
    throw new IllegalArgumentException(""Step is zero."");
}"
"<u0.a1: void P(boolean)>","private final void P(boolean z2) {
    this._isCompleted = z2 ? 1 : 0;
}"
"<u0.a1: void N(long,u0.a1$a)>","public final void N(long j2, a aVar) {
    int O = O(j2, aVar);
    if (O == 0) {
        if (Q(aVar)) {
            C();
        }
    } else if (O == 1) {
        B(j2, aVar);
    } else if (O != 2) {
        throw new IllegalStateException(""unexpected result"".toString());
    }
}"
"<u0.a1: void M()>","/* JADX INFO: Access modifiers changed from: protected */
public final void M() {
    this._queue = null;
    this._delayed = null;
}"
"<u0.a1: boolean Q(u0.a1$a)>","private final boolean Q(a aVar) {
    b bVar = (b) this._delayed;
    return (bVar == null ? null : bVar.e()) == aVar;
}"
"<u0.a1: void z()>","// u0.z0
@Override
protected void z() {
    f2.f1292a.b();
    P(true);
    E();
    do {
    } while (K() <= 0);
    L();
}"
"<u0.a1: boolean I()>","/* JADX INFO: Access modifiers changed from: private */
/* JADX WARN: Type inference failed for: r0v0, types: [int, boolean] */
public final boolean I() {
    return this._isCompleted;
}"
"<u0.a1: boolean J()>","/* JADX INFO: Access modifiers changed from: protected */
public boolean J() {
    kotlinx.coroutines.internal.z zVar;
    if (!x()) {
        return false;
    }
    b bVar = (b) this._delayed;
    if (bVar != null && !bVar.d()) {
        return false;
    }
    Object obj = this._queue;
    if (obj != null) {
        if (obj instanceof kotlinx.coroutines.internal.q) {
            return ((kotlinx.coroutines.internal.q) obj).g();
        }
        zVar = d1.f1285b;
        if (obj != zVar) {
            return false;
        }
    }
    return true;
}"
"<u0.a1: long K()>","public long K() {
    a aVar;
    if (y()) {
        return 0L;
    }
    b bVar = (b) this._delayed;
    if (bVar != null && !bVar.d()) {
        c.a();
        long nanoTime = System.nanoTime();
        do {
            synchronized (bVar) {
                a b2 = bVar.b();
                aVar = null;
                if (b2 != null) {
                    a aVar2 = b2;
                    if (aVar2.i(nanoTime) ? H(aVar2) : false) {
                        aVar = bVar.h(0);
                    }
                }
            }
        } while (aVar != null);
    }
    Runnable F = F();
    if (F == null) {
        return t();
    }
    F.run();
    return 0L;
}"
"<u0.a1: void L()>","private final void L() {
    c.a();
    long nanoTime = System.nanoTime();
    while (true) {
        b bVar = (b) this._delayed;
        a i2 = bVar == null ? null : bVar.i();
        if (i2 == null) {
            return;
        } else {
            B(nanoTime, i2);
        }
    }
}"
"<u0.a1: void m(g0.g,java.lang.Runnable)>","// u0.f0
@Override
public final void m(g0.g gVar, Runnable runnable) {
    G(runnable);
}"
"<u0.a1: long t()>","/* JADX INFO: Access modifiers changed from: protected */
// u0.z0
@Override
public long t() {
    long b2;
    kotlinx.coroutines.internal.z zVar;
    if (super.t() == 0) {
        return 0L;
    }
    Object obj = this._queue;
    if (obj != null) {
        if (!(obj instanceof kotlinx.coroutines.internal.q)) {
            zVar = d1.f1285b;
            return obj == zVar ? Long.MAX_VALUE : 0L;
        }
        if (!((kotlinx.coroutines.internal.q) obj).g()) {
            return 0L;
        }
    }
    b bVar = (b) this._delayed;
    a e2 = bVar == null ? null : bVar.e();
    if (e2 == null) {
        return Long.MAX_VALUE;
    }
    long j2 = e2.f1277d;
    c.a();
    b2 = q0.f.b(j2 - System.nanoTime(), 0L);
    return b2;
}"
"<u0.a1: boolean H(java.lang.Runnable)>","private final boolean H(Runnable runnable) {
    kotlinx.coroutines.internal.z zVar;
    while (true) {
        Object obj = this._queue;
        if (I()) {
            return false;
        }
        if (obj == null) {
            if (kotlinx.coroutines.internal.c.a(f1275h, this, null, runnable)) {
                return true;
            }
        } else if (obj instanceof kotlinx.coroutines.internal.q) {
            kotlinx.coroutines.internal.q qVar = (kotlinx.coroutines.internal.q) obj;
            int a2 = qVar.a(runnable);
            if (a2 == 0) {
                return true;
            }
            if (a2 == 1) {
                kotlinx.coroutines.internal.c.a(f1275h, this, obj, qVar.i());
            } else if (a2 == 2) {
                return false;
            }
        } else {
            zVar = d1.f1285b;
            if (obj == zVar) {
                return false;
            }
            kotlinx.coroutines.internal.q qVar2 = new kotlinx.coroutines.internal.q(8, true);
            qVar2.a((Runnable) obj);
            qVar2.a(runnable);
            if (kotlinx.coroutines.internal.c.a(f1275h, this, obj, qVar2)) {
                return true;
            }
        }
    }
}"
"<u0.a1: int O(long,u0.a1$a)>","private final int O(long j2, a aVar) {
    if (I()) {
        return 1;
    }
    b bVar = (b) this._delayed;
    if (bVar == null) {
        kotlinx.coroutines.internal.c.a(f1276i, this, null, new b(j2));
        Object obj = this._delayed;
        kotlin.jvm.internal.i.b(obj);
        bVar = (b) obj;
    }
    return aVar.h(j2, bVar, this);
}"
"<u0.a1: void G(java.lang.Runnable)>","public final void G(Runnable runnable) {
    if (H(runnable)) {
        C();
    } else {
        r0.f1334j.G(runnable);
    }
}"
"<u0.a1: void E()>","private final void E() {
    kotlinx.coroutines.internal.z zVar;
    kotlinx.coroutines.internal.z zVar2;
    if (p0.a() && !I()) {
        throw new AssertionError();
    }
    while (true) {
        Object obj = this._queue;
        if (obj == null) {
            AtomicReferenceFieldUpdater atomicReferenceFieldUpdater = f1275h;
            zVar = d1.f1285b;
            if (kotlinx.coroutines.internal.c.a(atomicReferenceFieldUpdater, this, null, zVar)) {
                return;
            }
        } else {
            if (obj instanceof kotlinx.coroutines.internal.q) {
                ((kotlinx.coroutines.internal.q) obj).d();
                return;
            }
            zVar2 = d1.f1285b;
            if (obj == zVar2) {
                return;
            }
            kotlinx.coroutines.internal.q qVar = new kotlinx.coroutines.internal.q(8, true);
            qVar.a((Runnable) obj);
            if (kotlinx.coroutines.internal.c.a(f1275h, this, obj, qVar)) {
                return;
            }
        }
    }
}"
"<m.a: void j()>","public void j() {
    if (this.f1154a.isAttached()) {
        this.f1154a.notifyLowMemoryWarning();
    }
}"
"<m.a: void c(java.lang.String,y.b$a,y.b$c)>","// y.b
@Override
public void c(String str, b.a aVar, b.c cVar) {
    this.f1166a.c(str, aVar, cVar);
}"
"<m.a: boolean i()>","public boolean i() {
    return this.f1158e;
}"
"<m.a: void a(java.lang.String,java.nio.ByteBuffer,y.b$b)>","// y.b.a
@Override
public void a(ByteBuffer byteBuffer, b.InterfaceC0039b interfaceC0039b) {
    a.this.f1159f = q.f1694b.a(byteBuffer);
    if (a.this.f1160g != null) {
        a.this.f1160g.a(a.this.f1159f);
    }
}"
"<m.a: void d(java.lang.String,y.b$a)>","// y.b
@Override
public void d(String str, b.a aVar) {
    this.f1166a.d(str, aVar);
}"
"<m.a: void l()>","public void l() {
    l.b.f(""DartExecutor"", ""Detached from JNI. De-registering the platform message handler for this Dart execution context."");
    this.f1154a.setPlatformMessageHandler(null);
}"
"<m.a: void g(m.a$b,java.util.List)>","public void g(b bVar, List<String> list) {
    if (this.f1158e) {
        l.b.g(""DartExecutor"", ""Attempted to run a DartExecutor that is already running."");
        return;
    }
    c0.e.a(""DartExecutor#executeDartEntrypoint"");
    try {
        l.b.f(""DartExecutor"", ""Executing Dart entrypoint: "" + bVar);
        this.f1154a.runBundleAndSnapshotFromLibrary(bVar.f1163a, bVar.f1165c, bVar.f1164b, this.f1155b, list);
        this.f1158e = true;
    } finally {
        c0.e.d();
    }
}"
"<m.a: void k()>","public void k() {
    l.b.f(""DartExecutor"", ""Attached to JNI. Registering the platform message handler for this Dart execution context."");
    this.f1154a.setPlatformMessageHandler(this.f1156c);
}"
"<androidx.activity.a: void cancel()>","void cancel();"
"<io.flutter.plugin.platform.f: void e(android.view.View)>","@SuppressLint({ ""NewApi"" })
void e(View view);"
"<io.flutter.plugin.platform.f: void f()>","@SuppressLint({ ""NewApi"" })
void f();"
"<io.flutter.plugin.platform.f: void c()>","@SuppressLint({ ""NewApi"" })
void c();"
"<io.flutter.plugin.platform.f: void b()>","void b();"
"<io.flutter.plugin.platform.f: void d()>","@SuppressLint({ ""NewApi"" })
void d();"
"<kotlin.coroutines.jvm.internal.j: g0.g getContext()>","// g0.d
@Override
public g0.g getContext() {
    return g0.h.f170d;
}"
"<u0.p0: boolean d()>","public static final boolean d() {
    return f1330c;
}"
"<u0.p0: boolean c()>","public static final boolean c() {
    return f1329b;
}"
"<u0.p0: boolean a()>","public static final boolean a() {
    return f1328a;
}"
"<io.flutter.view.c: android.view.accessibility.AccessibilityEvent v(int,java.lang.String,java.lang.String)>","<io.flutter.view.c: android.view.accessibility.AccessibilityEvent v(int,java.lang.String,java.lang.String)>"
"<u0.t0: void <init>(int)>","<u0.t0: void <init>(int)>"
"<d0.n: d0.j a(java.lang.Object,java.lang.Object)>","<d0.n: d0.j a(java.lang.Object,java.lang.Object)>"
"<kotlin.jvm.internal.i: void <init>()>","<kotlin.jvm.internal.i: void <init>()>"
"<u0.v1$b: java.util.ArrayList d()>","<u0.v1$b: java.util.ArrayList d()>"
"<t0.d: java.lang.String Z(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>","<t0.d: java.lang.String Z(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>"
"<u0.f0$a$a: void <init>()>","<u0.f0$a$a: void <init>()>"
"<b.c$c: boolean remove(java.lang.Object)>","<b.c$c: boolean remove(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.m2: void b(java.lang.Void)>","<io.flutter.plugins.webviewflutter.m2: void b(java.lang.Void)>"
"<u0.f1$a: void <init>(kotlin.jvm.internal.e)>","<u0.f1$a: void <init>(kotlin.jvm.internal.e)>"
"<androidx.window.embedding.EmbeddingCompat$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.embedding.EmbeddingCompat$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.embedding.android.u: io.flutter.embedding.android.u$a c(android.view.MotionEvent)>","<io.flutter.embedding.android.u: io.flutter.embedding.android.u$a c(android.view.MotionEvent)>"
"<androidx.window.core.Bounds: void <init>(android.graphics.Rect)>","<androidx.window.core.Bounds: void <init>(android.graphics.Rect)>"
"<androidx.window.embedding.SplitController: void <init>()>","<androidx.window.embedding.SplitController: void <init>()>"
"<y.i$a: void <init>(y.i,y.i$c)>","<y.i$a: void <init>(y.i,y.i$c)>"
"<s0.i: s0.b a(s0.i)>","<s0.i: s0.b a(s0.i)>"
"<w0.h: w0.f b(int,w0.e,n0.l,int,java.lang.Object)>","<w0.h: w0.f b(int,w0.e,n0.l,int,java.lang.Object)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long d(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityNodeInfo,int)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long d(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityNodeInfo,int)>"
"<x.a$b: void f(java.lang.String)>","<x.a$b: void f(java.lang.String)>"
"<io.flutter.view.c$l: int p(io.flutter.view.c$l)>","<io.flutter.view.c$l: int p(io.flutter.view.c$l)>"
"<androidx.window.core.Version: void <init>(int,int,int,java.lang.String)>","<androidx.window.core.Version: void <init>(int,int,int,java.lang.String)>"
"<androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void <init>(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)>","<androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void <init>(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)>"
"<k.m: void <init>(org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface)>","<k.m: void <init>(org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface)>"
"<o0.c$a: void <init>(kotlin.jvm.internal.e)>","<o0.c$a: void <init>(kotlin.jvm.internal.e)>"
"<d0.j: java.lang.Object b()>","<d0.j: java.lang.Object b()>"
"<io.flutter.embedding.android.r: java.lang.Long f(android.view.KeyEvent)>","<io.flutter.embedding.android.r: java.lang.Long f(android.view.KeyEvent)>"
"<s0.i$a: boolean hasNext()>","<s0.i$a: boolean hasNext()>"
"<y0.c$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<y0.c$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<io.flutter.plugin.platform.c$b: void b(int)>","<io.flutter.plugin.platform.c$b: void b(int)>"
"<w0.c$a: java.lang.Object z()>","<w0.c$a: java.lang.Object z()>"
"<io.flutter.plugins.webviewflutter.k$c0: void p(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void p(java.lang.Long)>"
"<androidx.window.core.Version: java.lang.String getDescription()>","<androidx.window.core.Version: java.lang.String getDescription()>"
"<o0.b$a: java.lang.Object initialValue()>","<o0.b$a: java.lang.Object initialValue()>"
"<kotlinx.coroutines.internal.d0: java.lang.Object c(g0.g,java.lang.Object)>","<kotlinx.coroutines.internal.d0: java.lang.Object c(g0.g,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.y2$b: void d(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void d(java.lang.Void)>"
"<x.p$f: void j()>","<x.p$f: void j()>"
"<w0.o: kotlinx.coroutines.internal.z y()>","<w0.o: kotlinx.coroutines.internal.z y()>"
"<j0.a: void <init>()>","<j0.a: void <init>()>"
"<androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()>","<androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()>"
"<kotlin.jvm.internal.m: void <init>()>","<kotlin.jvm.internal.m: void <init>()>"
"<kotlinx.coroutines.internal.s: u0.y1 d(kotlinx.coroutines.internal.MainDispatcherFactory,java.util.List)>","<kotlinx.coroutines.internal.s: u0.y1 d(kotlinx.coroutines.internal.MainDispatcherFactory,java.util.List)>"
"<io.flutter.plugin.editing.c: java.util.ArrayList e()>","<io.flutter.plugin.editing.c: java.util.ArrayList e()>"
"<g0.c: g0.g minusKey(g0.g$c)>","<g0.c: g0.g minusKey(g0.g$c)>"
"<io.flutter.plugins.webviewflutter.k$i: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$i: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.y2$b: void k(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void k(java.lang.Void)>"
"<io.flutter.plugins.webviewflutter.k$c0: void j(java.lang.Long,java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void j(java.lang.Long,java.lang.Long,java.lang.Long)>"
"<io.flutter.embedding.android.u: void <init>()>","<io.flutter.embedding.android.u: void <init>()>"
"<e0.g: java.lang.Comparable m(java.lang.Iterable)>","<e0.g: java.lang.Comparable m(java.lang.Iterable)>"
"<io.flutter.plugin.platform.q$a: void c(boolean)>","<io.flutter.plugin.platform.q$a: void c(boolean)>"
"<kotlinx.coroutines.scheduling.a$c: void run()>","<kotlinx.coroutines.scheduling.a$c: void run()>"
"<io.flutter.embedding.android.g$b: io.flutter.embedding.android.g$b valueOf(java.lang.String)>","<io.flutter.embedding.android.g$b: io.flutter.embedding.android.g$b valueOf(java.lang.String)>"
"<x.k$a: void <init>(x.k)>","<x.k$a: void <init>(x.k)>"
"<u0.n0: u0.n0[] a()>","<u0.n0: u0.n0[] a()>"
"<kotlinx.coroutines.internal.i$c: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.i$c: java.lang.Object invoke(java.lang.Object)>"
"<kotlinx.coroutines.internal.z: java.lang.String toString()>","<kotlinx.coroutines.internal.z: java.lang.String toString()>"
"<io.flutter.view.c: io.flutter.view.c$h q(io.flutter.view.c,int)>","<io.flutter.view.c: io.flutter.view.c$h q(io.flutter.view.c,int)>"
"<androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()>","<androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()>"
"<u0.z1: java.lang.String toString()>","<u0.z1: java.lang.String toString()>"
"<w.a$a: void <init>(w.a)>","<w.a$a: void <init>(w.a)>"
"<w0.i$b: java.lang.Object b()>","<w0.i$b: java.lang.Object b()>"
"<androidx.window.layout.HardwareFoldingFeature$Type: void <clinit>()>","<androidx.window.layout.HardwareFoldingFeature$Type: void <clinit>()>"
"<u0.z0: void <init>()>","<u0.z0: void <init>()>"
"<kotlinx.coroutines.internal.i$f: void <clinit>()>","<kotlinx.coroutines.internal.i$f: void <clinit>()>"
"<io.flutter.embedding.android.k: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<io.flutter.embedding.android.k: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<io.flutter.plugin.platform.c$b: void onSystemUiVisibilityChange(int)>","<io.flutter.plugin.platform.c$b: void onSystemUiVisibilityChange(int)>"
"<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.i c(java.lang.Runnable,kotlinx.coroutines.scheduling.j)>","<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.i c(java.lang.Runnable,kotlinx.coroutines.scheduling.j)>"
"<io.flutter.view.c$l: boolean v0(io.flutter.view.c$i)>","<io.flutter.view.c$l: boolean v0(io.flutter.view.c$i)>"
"<androidx.versionedparcelable.a: i.a u()>","<androidx.versionedparcelable.a: i.a u()>"
"<kotlinx.coroutines.internal.j: java.util.List b(java.lang.Class,java.lang.ClassLoader)>","<kotlinx.coroutines.internal.j: java.util.List b(java.lang.Class,java.lang.ClassLoader)>"
"<b.c$d: int hashCode()>","<b.c$d: int hashCode()>"
"<m.c: void <init>(io.flutter.embedding.engine.FlutterJNI)>","<m.c: void <init>(io.flutter.embedding.engine.FlutterJNI)>"
"<kotlinx.coroutines.scheduling.a$c: boolean p()>","<kotlinx.coroutines.scheduling.a$c: boolean p()>"
"<androidx.window.embedding.ActivityStack: void <init>(java.util.List,boolean,int,kotlin.jvm.internal.e)>","<androidx.window.embedding.ActivityStack: void <init>(java.util.List,boolean,int,kotlin.jvm.internal.e)>"
"<io.flutter.embedding.android.FlutterSplashView: void c(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView: void c(io.flutter.embedding.android.FlutterSplashView)>"
"<io.flutter.embedding.android.n$a: void <init>(java.lang.String,int,long)>","<io.flutter.embedding.android.n$a: void <init>(java.lang.String,int,long)>"
"<androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()>","<androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()>"
"<io.flutter.plugin.editing.b: android.view.inputmethod.ExtractedText d(android.view.inputmethod.ExtractedTextRequest)>","<io.flutter.plugin.editing.b: android.view.inputmethod.ExtractedText d(android.view.inputmethod.ExtractedTextRequest)>"
"<kotlinx.coroutines.internal.u: kotlinx.coroutines.internal.h0 d(n0.l,java.lang.Object,kotlinx.coroutines.internal.h0,int,java.lang.Object)>","<kotlinx.coroutines.internal.u: kotlinx.coroutines.internal.h0 d(n0.l,java.lang.Object,kotlinx.coroutines.internal.h0,int,java.lang.Object)>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)>","<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)>"
"<kotlinx.coroutines.internal.a0: int f(java.lang.String,int,int,int,int,java.lang.Object)>","<kotlinx.coroutines.internal.a0: int f(java.lang.String,int,int,int,int,java.lang.Object)>"
"<androidx.window.layout.SidecarWindowBackend: void <init>(androidx.window.layout.ExtensionInterfaceCompat)>","<androidx.window.layout.SidecarWindowBackend: void <init>(androidx.window.layout.ExtensionInterfaceCompat)>"
"<com.example.vtu_web_app.MainActivity: void setIntent(android.content.Intent)>","<com.example.vtu_web_app.MainActivity: void setIntent(android.content.Intent)>"
"<io.flutter.view.c: void h(io.flutter.view.c)>","<io.flutter.view.c: void h(io.flutter.view.c)>"
"<b.c$b: boolean a(java.util.Map$Entry)>","<b.c$b: boolean a(java.util.Map$Entry)>"
"<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 h(int)>","<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 h(int)>"
"<z0.a: void a(g0.d,java.lang.Throwable)>","<z0.a: void a(g0.d,java.lang.Throwable)>"
"<io.flutter.plugins.webviewflutter.r0: void d(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void d(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.scheduling.h: void <init>()>","<kotlinx.coroutines.scheduling.h: void <init>()>"
"<io.flutter.plugin.platform.q: android.util.SparseArray g(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: android.util.SparseArray g(io.flutter.plugin.platform.q)>"
"<io.flutter.plugins.webviewflutter.q2: void <init>(android.view.View,android.view.View,android.os.Handler)>","<io.flutter.plugins.webviewflutter.q2: void <init>(android.view.View,android.view.View,android.os.Handler)>"
"<kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()>","<kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()>"
"<kotlinx.coroutines.internal.h: kotlinx.coroutines.internal.z a()>","<kotlinx.coroutines.internal.h: kotlinx.coroutines.internal.z a()>"
"<p0.a: void <init>()>","<p0.a: void <init>()>"
"<f.a$b: void <init>(android.view.Window,android.view.View)>","<f.a$b: void <init>(android.view.Window,android.view.View)>"
"<io.flutter.view.c: void <init>(android.view.View,x.a,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.view.AccessibilityViewEmbedder,io.flutter.plugin.platform.k)>","<io.flutter.view.c: void <init>(android.view.View,x.a,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.view.AccessibilityViewEmbedder,io.flutter.plugin.platform.k)>"
"<androidx.window.embedding.ActivityRule: java.util.Set getFilters()>","<androidx.window.embedding.ActivityRule: java.util.Set getFilters()>"
"<io.flutter.plugins.webviewflutter.y2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.y2$c,io.flutter.plugins.webviewflutter.x2)>","<io.flutter.plugins.webviewflutter.y2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.y2$c,io.flutter.plugins.webviewflutter.x2)>"
"<io.flutter.view.c: android.view.accessibility.AccessibilityManager d(io.flutter.view.c)>","<io.flutter.view.c: android.view.accessibility.AccessibilityManager d(io.flutter.view.c)>"
"<c0.h: android.app.Activity e(android.content.Context)>","<c0.h: android.app.Activity e(android.content.Context)>"
"<androidx.window.embedding.SplitController: void <clinit>()>","<androidx.window.embedding.SplitController: void <clinit>()>"
"<x.i$l: x.i$l valueOf(java.lang.String)>","<x.i$l: x.i$l valueOf(java.lang.String)>"
"<io.flutter.embedding.android.d: android.graphics.drawable.Drawable J()>","<io.flutter.embedding.android.d: android.graphics.drawable.Drawable J()>"
"<androidx.window.layout.WindowInfoTracker$Companion: void reset()>","<androidx.window.layout.WindowInfoTracker$Companion: void reset()>"
"<io.flutter.view.d$a: void a()>","<io.flutter.view.d$a: void a()>"
"<e0.q: java.lang.Comparable m(java.lang.Iterable)>","<e0.q: java.lang.Comparable m(java.lang.Iterable)>"
"<io.flutter.embedding.android.k: io.flutter.embedding.android.z r()>","<io.flutter.embedding.android.k: io.flutter.embedding.android.z r()>"
"<u0.p1: java.lang.Throwable a()>","<u0.p1: java.lang.Throwable a()>"
"<androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)>","<androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)>"
"<io.flutter.embedding.engine.FlutterJNI$c: io.flutter.embedding.engine.FlutterJNI a()>","<io.flutter.embedding.engine.FlutterJNI$c: io.flutter.embedding.engine.FlutterJNI a()>"
"<androidx.window.layout.SidecarAdapter: void <init>()>","<androidx.window.layout.SidecarAdapter: void <init>()>"
"<y.g: java.nio.ByteBuffer b(java.lang.Object)>","<y.g: java.nio.ByteBuffer b(java.lang.Object)>"
"<io.flutter.view.d: io.flutter.view.d$c a()>","<io.flutter.view.d: io.flutter.view.d$c a()>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)>","<androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)>"
"<q0.c: java.lang.Integer h()>","<q0.c: java.lang.Integer h()>"
"<io.flutter.embedding.android.FlutterSplashView$a: void a(io.flutter.embedding.engine.a)>","<io.flutter.embedding.android.FlutterSplashView$a: void a(io.flutter.embedding.engine.a)>"
"<w0.b: void <clinit>()>","<w0.b: void <clinit>()>"
"<androidx.webkit.WebViewClientCompat: void <init>()>","<androidx.webkit.WebViewClientCompat: void <init>()>"
"<o.d: java.util.concurrent.ExecutorService c(o.d)>","<o.d: java.util.concurrent.ExecutorService c(o.d)>"
"<io.flutter.embedding.android.h: void g(io.flutter.embedding.android.h,int,int)>","<io.flutter.embedding.android.h: void g(io.flutter.embedding.android.h,int,int)>"
"<androidx.window.embedding.EmbeddingTranslatingCallback: void <init>(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)>","<androidx.window.embedding.EmbeddingTranslatingCallback: void <init>(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)>"
"<m.a: void <init>(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager)>","<m.a: void <init>(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager)>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable j(java.lang.Throwable,kotlin.coroutines.jvm.internal.e)>","<kotlinx.coroutines.internal.y: java.lang.Throwable j(java.lang.Throwable,kotlin.coroutines.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.k$u: void d(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void d(java.lang.Long,java.lang.Boolean)>"
"<kotlin.coroutines.jvm.internal.j: void <init>(g0.d)>","<kotlin.coroutines.jvm.internal.j: void <init>(g0.d)>"
"<d0.k: java.lang.Throwable b(java.lang.Object)>","<d0.k: java.lang.Throwable b(java.lang.Object)>"
"<u0.y: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.e)>","<u0.y: void <init>(java.lang.Throwable,boolean,int,kotlin.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.k$c0: void o(java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$n)>","<io.flutter.plugins.webviewflutter.k$c0: void o(java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$n)>"
"<a1.a: void <init>()>","<a1.a: void <init>()>"
"<e0.s: java.lang.Object[] toArray()>","<e0.s: java.lang.Object[] toArray()>"
"<x.k$g: void g(x.k$f)>","<x.k$g: void g(x.k$f)>"
"<io.flutter.plugins.webviewflutter.k$s: void b(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$s: void b(java.lang.String)>"
"<kotlin.coroutines.jvm.internal.a: java.lang.Object invokeSuspend(java.lang.Object)>","<kotlin.coroutines.jvm.internal.a: java.lang.Object invokeSuspend(java.lang.Object)>"
"<g0.g: java.lang.Object fold(java.lang.Object,n0.p)>","<g0.g: java.lang.Object fold(java.lang.Object,n0.p)>"
"<io.flutter.plugins.webviewflutter.y2$b: void n(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void n(java.lang.Void)>"
"<e0.t: java.lang.Object get(java.lang.Object)>","<e0.t: java.lang.Object get(java.lang.Object)>"
"<t0.c: void <init>(java.lang.CharSequence,int,int,n0.p)>","<t0.c: void <init>(java.lang.CharSequence,int,int,n0.p)>"
"<io.flutter.embedding.android.i: void g(io.flutter.embedding.android.i,int,int)>","<io.flutter.embedding.android.i: void g(io.flutter.embedding.android.i,int,int)>"
"<e0.a: java.lang.Object[] c(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>","<e0.a: java.lang.Object[] c(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>"
"<androidx.window.layout.WindowMetrics: void <init>(android.graphics.Rect)>","<androidx.window.layout.WindowMetrics: void <init>(android.graphics.Rect)>"
"<y.q: java.nio.ByteBuffer b(java.lang.Object)>","<y.q: java.nio.ByteBuffer b(java.lang.Object)>"
"<androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()>","<androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.k$s: void c(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$s: void c(java.lang.Long)>"
"<w0.j: java.lang.Throwable E()>","<w0.j: java.lang.Throwable E()>"
"<io.flutter.embedding.android.i: void <init>(android.content.Context,android.util.AttributeSet)>","<io.flutter.embedding.android.i: void <init>(android.content.Context,android.util.AttributeSet)>"
"<io.flutter.plugins.webviewflutter.r0: void k(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void k(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<a.b$c: java.lang.Object getKey()>","<a.b$c: java.lang.Object getKey()>"
"<b.c$e: boolean contains(java.lang.Object)>","<b.c$e: boolean contains(java.lang.Object)>"
"<android.support.v4.app.RemoteActionCompatParcelizer: void <init>()>","<android.support.v4.app.RemoteActionCompatParcelizer: void <init>()>"
"<u0.p: java.lang.Object invoke(java.lang.Object)>","<u0.p: java.lang.Object invoke(java.lang.Object)>"
"<kotlinx.coroutines.scheduling.a$b: void <clinit>()>","<kotlinx.coroutines.scheduling.a$b: void <clinit>()>"
"<io.flutter.plugin.platform.q$a: io.flutter.plugin.platform.f p(x.k$d,boolean)>","<io.flutter.plugin.platform.q$a: io.flutter.plugin.platform.f p(x.k$d,boolean)>"
"<kotlinx.coroutines.internal.i$c: java.lang.Throwable a(java.lang.Throwable)>","<kotlinx.coroutines.internal.i$c: java.lang.Throwable a(java.lang.Throwable)>"
"<io.flutter.plugin.platform.j$a: void <init>(io.flutter.plugin.platform.j)>","<io.flutter.plugin.platform.j$a: void <init>(io.flutter.plugin.platform.j)>"
"<io.flutter.view.c$l: java.util.List C(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.util.List C(io.flutter.view.c$l)>"
"<u0.t0: java.lang.Object h()>","<u0.t0: java.lang.Object h()>"
"<q0.c: void <clinit>()>","<q0.c: void <clinit>()>"
"<io.flutter.embedding.android.t$c: void <init>(long,long)>","<io.flutter.embedding.android.t$c: void <init>(long,long)>"
"<io.flutter.plugin.editing.d: void <init>(android.view.textservice.TextServicesManager,x.n)>","<io.flutter.plugin.editing.d: void <init>(android.view.textservice.TextServicesManager,x.n)>"
"<y.a: y.g a(y.a)>","<y.a: y.g a(y.a)>"
"<x.i$l: x.i$l[] values()>","<x.i$l: x.i$l[] values()>"
"<io.flutter.plugins.webviewflutter.q2: android.os.Handler getHandler()>","<io.flutter.plugins.webviewflutter.q2: android.os.Handler getHandler()>"
"<androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()>","<androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()>"
"<io.flutter.embedding.engine.a: x.g k()>","<io.flutter.embedding.engine.a: x.g k()>"
"<io.flutter.embedding.android.e$c: boolean q()>","<io.flutter.embedding.android.e$c: boolean q()>"
"<androidx.window.core.Version: void <init>(int,int,int,java.lang.String,kotlin.jvm.internal.e)>","<androidx.window.core.Version: void <init>(int,int,int,java.lang.String,kotlin.jvm.internal.e)>"
"<w.a$d: void <clinit>()>","<w.a$d: void <clinit>()>"
"<y.j: java.nio.ByteBuffer b(y.h)>","<y.j: java.nio.ByteBuffer b(y.h)>"
"<io.flutter.view.c: void j(io.flutter.view.c,int,int)>","<io.flutter.view.c: void j(io.flutter.view.c,int,int)>"
"<io.flutter.plugins.webviewflutter.k$x: void <init>()>","<io.flutter.plugins.webviewflutter.k$x: void <init>()>"
"<androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)>","<androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)>"
"<a.b$e: java.lang.Object next()>","<a.b$e: java.lang.Object next()>"
"<io.flutter.plugins.webviewflutter.s2$b: void f(java.lang.Void)>","<io.flutter.plugins.webviewflutter.s2$b: void f(java.lang.Void)>"
"<kotlin.coroutines.jvm.internal.i: void <init>()>","<kotlin.coroutines.jvm.internal.i: void <init>()>"
"<r0.b: java.util.List getParameters()>","<r0.b: java.util.List getParameters()>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)>"
"<io.flutter.plugins.webviewflutter.c$a: void <init>(io.flutter.plugins.webviewflutter.c,java.util.ArrayList,android.hardware.display.DisplayManager)>","<io.flutter.plugins.webviewflutter.c$a: void <init>(io.flutter.plugins.webviewflutter.c,java.util.ArrayList,android.hardware.display.DisplayManager)>"
"<io.flutter.view.c$l: void i0()>","<io.flutter.view.c$l: void i0()>"
"<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.a$c i()>","<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.a$c i()>"
"<w0.j: w0.j C()>","<w0.j: w0.j C()>"
"<io.flutter.view.c: void l(io.flutter.view.c,android.view.accessibility.AccessibilityEvent)>","<io.flutter.view.c: void l(io.flutter.view.c,android.view.accessibility.AccessibilityEvent)>"
"<io.flutter.plugins.webviewflutter.y2$b: void q(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void q(java.lang.Void)>"
"<u0.m1: void <clinit>()>","<u0.m1: void <clinit>()>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()>"
"<io.flutter.view.c$l: int b0(io.flutter.view.c$l)>","<io.flutter.view.c$l: int b0(io.flutter.view.c$l)>"
"<u0.v1: java.lang.String t(u0.v1)>","<u0.v1: java.lang.String t(u0.v1)>"
"<u0.a2: void <clinit>()>","<u0.a2: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.q3$a: void addJavascriptInterface(java.lang.Object,java.lang.String)>","<io.flutter.plugins.webviewflutter.q3$a: void addJavascriptInterface(java.lang.Object,java.lang.String)>"
"<b.c$b: boolean containsAll(java.util.Collection)>","<b.c$b: boolean containsAll(java.util.Collection)>"
"<w0.o: void <init>()>","<w0.o: void <init>()>"
"<l.b: java.lang.String d(java.lang.Throwable)>","<l.b: java.lang.String d(java.lang.Throwable)>"
"<t0.f$a: java.lang.String a(java.lang.String)>","<t0.f$a: java.lang.String a(java.lang.String)>"
"<kotlinx.coroutines.internal.e0: void <init>()>","<kotlinx.coroutines.internal.e0: void <init>()>"
"<io.flutter.plugin.platform.q: java.lang.Class[] u()>","<io.flutter.plugin.platform.q: java.lang.Class[] u()>"
"<w0.a: void <init>(n0.l)>","<w0.a: void <init>(n0.l)>"
"<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.w w()>","<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.w w()>"
"<u0.d: void <init>()>","<u0.d: void <init>()>"
"<u0.r: u0.o1 getParent()>","<u0.r: u0.o1 getParent()>"
"<b.c$e: boolean add(java.lang.Object)>","<b.c$e: boolean add(java.lang.Object)>"
"<io.flutter.embedding.android.b$b: void setSplashDrawable(android.graphics.drawable.Drawable)>","<io.flutter.embedding.android.b$b: void setSplashDrawable(android.graphics.drawable.Drawable)>"
"<k.a$e: void <init>(java.lang.String,java.lang.String)>","<k.a$e: void <init>(java.lang.String,java.lang.String)>"
"<u0.v1$b: void m(java.lang.Throwable)>","<u0.v1$b: void m(java.lang.Throwable)>"
"<b.c$c: java.lang.Object[] toArray()>","<b.c$c: java.lang.Object[] toArray()>"
"<z.a: java.util.Locale b(java.lang.String)>","<z.a: java.util.Locale b(java.lang.String)>"
"<io.flutter.embedding.android.s$e: void c(android.view.KeyEvent)>","<io.flutter.embedding.android.s$e: void c(android.view.KeyEvent)>"
"<o.d$c: java.lang.String a()>","<o.d$c: java.lang.String a()>"
"<io.flutter.plugins.webviewflutter.r0: void c(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void c(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<w0.j: java.lang.Throwable F()>","<w0.j: java.lang.Throwable F()>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: void a(java.lang.Object[])>","<io.flutter.plugin.platform.SingleViewPresentation$f: void a(java.lang.Object[])>"
"<x.k$a: void g(y.h,y.i$d)>","<x.k$a: void g(y.h,y.i$d)>"
"<io.flutter.plugins.webviewflutter.s2$a: io.flutter.plugins.webviewflutter.s2$b a(io.flutter.plugins.webviewflutter.r2,android.webkit.WebViewClient)>","<io.flutter.plugins.webviewflutter.s2$a: io.flutter.plugins.webviewflutter.s2$b a(io.flutter.plugins.webviewflutter.r2,android.webkit.WebViewClient)>"
"<io.flutter.view.e$c: void doFrame(long)>","<io.flutter.view.e$c: void doFrame(long)>"
"<m.a$a: void <init>(m.a)>","<m.a$a: void <init>(m.a)>"
"<c0.h$a: boolean a(android.view.View)>","<c0.h$a: boolean a(android.view.View)>"
"<io.flutter.embedding.engine.a: void <init>(android.content.Context,o.d,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.q,java.lang.String[],boolean,boolean)>","<io.flutter.embedding.engine.a: void <init>(android.content.Context,o.d,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.q,java.lang.String[],boolean,boolean)>"
"<io.flutter.plugin.platform.q: float z(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: float z(io.flutter.plugin.platform.q)>"
"<io.flutter.plugins.webviewflutter.u0: void b(io.flutter.plugins.webviewflutter.k$w,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.u0: void b(io.flutter.plugins.webviewflutter.k$w,java.lang.Object,y.a$e)>"
"<y0.e$a: java.lang.Integer a(int,g0.g$b)>","<y0.e$a: java.lang.Integer a(int,g0.g$b)>"
"<y.p: java.nio.ByteBuffer d(java.lang.Object)>","<y.p: java.nio.ByteBuffer d(java.lang.Object)>"
"<x.b$a: void a(y.h,y.i$d)>","<x.b$a: void a(y.h,y.i$d)>"
"<io.flutter.plugins.webviewflutter.n: void b(io.flutter.plugins.webviewflutter.k$b,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.n: void b(io.flutter.plugins.webviewflutter.k$b,java.lang.Object,y.a$e)>"
"<io.flutter.view.c$a: void <init>(io.flutter.view.c)>","<io.flutter.view.c$a: void <init>(io.flutter.view.c)>"
"<y.p: void <clinit>()>","<y.p: void <clinit>()>"
"<kotlinx.coroutines.scheduling.d: void <init>()>","<kotlinx.coroutines.scheduling.d: void <init>()>"
"<kotlin.coroutines.jvm.internal.a: g0.d create(java.lang.Object,g0.d)>","<kotlin.coroutines.jvm.internal.a: g0.d create(java.lang.Object,g0.d)>"
"<u0.v1: void u(u0.v1,u0.v1$b,u0.r,java.lang.Object)>","<u0.v1: void u(u0.v1,u0.v1$b,u0.r,java.lang.Object)>"
"<androidx.core.app.RemoteActionCompatParcelizer: void <init>()>","<androidx.core.app.RemoteActionCompatParcelizer: void <init>()>"
"<io.flutter.plugins.webviewflutter.y2$d: void o(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void o(java.lang.Void)>"
"<androidx.window.layout.WindowInfoTrackerImpl$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.WindowInfoTrackerImpl$Companion: void <init>(kotlin.jvm.internal.e)>"
"<kotlinx.coroutines.scheduling.a$c: void m()>","<kotlinx.coroutines.scheduling.a$c: void m()>"
"<io.flutter.plugins.webviewflutter.q3$a: void f()>","<io.flutter.plugins.webviewflutter.q3$a: void f()>"
"<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0[] f()>","<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0[] f()>"
"<io.flutter.embedding.android.e$c: java.lang.String x()>","<io.flutter.embedding.android.e$c: java.lang.String x()>"
"<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 e()>","<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 e()>"
"<e0.a: void e(java.lang.Object[],java.lang.Object,int,int,int,java.lang.Object)>","<e0.a: void e(java.lang.Object[],java.lang.Object,int,int,int,java.lang.Object)>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: void <init>()>","<androidx.window.layout.WindowMetricsCalculatorCompat: void <init>()>"
"<w0.a$a: void <init>(w0.a)>","<w0.a$a: void <init>(w0.a)>"
"<kotlin.jvm.internal.c: void <clinit>()>","<kotlin.jvm.internal.c: void <clinit>()>"
"<io.flutter.view.c$f: io.flutter.view.c$f[] values()>","<io.flutter.view.c$f: io.flutter.view.c$f[] values()>"
"<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)>","<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)>"
"<io.flutter.view.c$m: void <init>(io.flutter.view.c$a)>","<io.flutter.view.c$m: void <init>(io.flutter.view.c$a)>"
"<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o p()>","<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o p()>"
"<io.flutter.plugin.platform.r$a$a: void run()>","<io.flutter.plugin.platform.r$a$a: void run()>"
"<m.a: java.lang.String b(m.a)>","<m.a: java.lang.String b(m.a)>"
"<y0.c: g0.g getContext()>","<y0.c: g0.g getContext()>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertServiceWorkerSettings(java.lang.reflect.InvocationHandler)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertServiceWorkerSettings(java.lang.reflect.InvocationHandler)>"
"<u0.v1$b: java.util.List j(java.lang.Throwable)>","<u0.v1$b: java.util.List j(java.lang.Throwable)>"
"<io.flutter.embedding.android.y: io.flutter.embedding.android.y valueOf(java.lang.String)>","<io.flutter.embedding.android.y: io.flutter.embedding.android.y valueOf(java.lang.String)>"
"<androidx.window.R$attr: void <init>()>","<androidx.window.R$attr: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$c0: java.lang.Long d(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: java.lang.Long d(java.lang.Long)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Matrix)>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Matrix)>"
"<io.flutter.plugins.webviewflutter.k$a0: void b(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$a0: void b(java.lang.Long,java.lang.Boolean)>"
"<kotlin.jvm.internal.a: java.lang.Object call(java.lang.Object[])>","<kotlin.jvm.internal.a: java.lang.Object call(java.lang.Object[])>"
"<io.flutter.plugins.webviewflutter.k$b: void a(io.flutter.plugins.webviewflutter.k$n)>","<io.flutter.plugins.webviewflutter.k$b: void a(io.flutter.plugins.webviewflutter.k$n)>"
"<x.i$h: void m(x.i$c)>","<x.i$h: void m(x.i$c)>"
"<a0.a$b: void <init>(a0.a)>","<a0.a$b: void <init>(a0.a)>"
"<u0.v: java.lang.Thread r(java.util.concurrent.atomic.AtomicInteger,java.lang.Runnable)>","<u0.v: java.lang.Thread r(java.util.concurrent.atomic.AtomicInteger,java.lang.Runnable)>"
"<io.flutter.view.c$l: java.util.List o0(java.nio.ByteBuffer,java.nio.ByteBuffer[])>","<io.flutter.view.c$l: java.util.List o0(java.nio.ByteBuffer,java.nio.ByteBuffer[])>"
"<k.b$a: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>","<k.b$a: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)>"
"<u0.j: void <init>()>","<u0.j: void <init>()>"
"<u0.m1: void <init>(n0.l)>","<u0.m1: void <init>(n0.l)>"
"<w0.a$b: n0.l A(java.lang.Object)>","<w0.a$b: n0.l A(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.r0: void f(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void f(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.k$t: void <init>()>","<io.flutter.plugins.webviewflutter.k$t: void <init>()>"
"<d.a: java.util.concurrent.Executor a(android.os.Handler)>","<d.a: java.util.concurrent.Executor a(android.os.Handler)>"
"<m.c$b: void a(java.lang.Runnable)>","<m.c$b: void a(java.lang.Runnable)>"
"<androidx.core.graphics.drawable.IconCompatParcelizer: void <init>()>","<androidx.core.graphics.drawable.IconCompatParcelizer: void <init>()>"
"<u0.x: u0.x a(java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable)>","<u0.x: u0.x a(java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable)>"
"<io.flutter.plugins.webviewflutter.k$y: void g(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void g(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<n0.l: java.lang.Object invoke(java.lang.Object)>","<n0.l: java.lang.Object invoke(java.lang.Object)>"
"<u0.w0: void <init>()>","<u0.w0: void <init>()>"
"<io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)>","<io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)>"
"<io.flutter.plugin.platform.q$a: void l(io.flutter.plugin.platform.q$a,io.flutter.plugin.platform.r,float,x.k$b)>","<io.flutter.plugin.platform.q$a: void l(io.flutter.plugin.platform.q$a,io.flutter.plugin.platform.r,float,x.k$b)>"
"<t0.d: java.lang.Integer f(java.lang.String)>","<t0.d: java.lang.Integer f(java.lang.String)>"
"<androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)>","<androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)>"
"<u0.f1$a$a: void <init>()>","<u0.f1$a$a: void <init>()>"
"<k.i: java.lang.CharSequence a()>","<k.i: java.lang.CharSequence a()>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable a(java.lang.Throwable,kotlin.coroutines.jvm.internal.e)>","<kotlinx.coroutines.internal.y: java.lang.Throwable a(java.lang.Throwable,kotlin.coroutines.jvm.internal.e)>"
"<w0.i$c: void <init>()>","<w0.i$c: void <init>()>"
"<h0.d: java.lang.Object c()>","<h0.d: java.lang.Object c()>"
"<x.b: void <init>(m.a)>","<x.b: void <init>(m.a)>"
"<o.b: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>","<o.b: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)>"
"<x.k$e: void <init>(int,double,double)>","<x.k$e: void <init>(int,double,double)>"
"<o.a: void <clinit>()>","<o.a: void <clinit>()>"
"<d0.k$b: java.lang.String toString()>","<d0.k$b: java.lang.String toString()>"
"<io.flutter.view.c$e: void <clinit>()>","<io.flutter.view.c$e: void <clinit>()>"
"<w0.n: void <init>(n0.l)>","<w0.n: void <init>(n0.l)>"
"<androidx.window.layout.HardwareFoldingFeature: void <clinit>()>","<androidx.window.layout.HardwareFoldingFeature: void <clinit>()>"
"<b.c$b: void <init>(b.c)>","<b.c$b: void <init>(b.c)>"
"<x.p$g: void <clinit>()>","<x.p$g: void <clinit>()>"
"<androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)>","<androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)>"
"<io.flutter.plugins.webviewflutter.n$a: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.n$a: void a(java.lang.Object)>"
"<kotlin.jvm.internal.n: java.lang.Object a(java.lang.Object,int)>","<kotlin.jvm.internal.n: java.lang.Object a(java.lang.Object,int)>"
"<io.flutter.plugins.webviewflutter.f2: void x(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void x(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<w0.d: java.lang.String c()>","<w0.d: java.lang.String c()>"
"<d0.j: java.lang.Object c()>","<d0.j: java.lang.Object c()>"
"<io.flutter.plugin.platform.q$a: void b(int)>","<io.flutter.plugin.platform.q$a: void b(int)>"
"<io.flutter.embedding.android.h: boolean e(io.flutter.embedding.android.h)>","<io.flutter.embedding.android.h: boolean e(io.flutter.embedding.android.h)>"
"<y.a$c: void a(java.nio.ByteBuffer)>","<y.a$c: void a(java.nio.ByteBuffer)>"
"<a.b$f: void a(a.b$c)>","<a.b$f: void a(a.b$c)>"
"<io.flutter.plugins.webviewflutter.i2: java.lang.Long g(java.lang.Object)>","<io.flutter.plugins.webviewflutter.i2: java.lang.Long g(java.lang.Object)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<b.c$d: void <init>(b.c)>","<b.c$d: void <init>(b.c)>"
"<io.flutter.plugins.webviewflutter.q3$c: void setWebChromeClient(android.webkit.WebChromeClient)>","<io.flutter.plugins.webviewflutter.q3$c: void setWebChromeClient(android.webkit.WebChromeClient)>"
"<io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)>","<io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)>"
"<kotlinx.coroutines.internal.d0$a: java.lang.Object a(java.lang.Object,g0.g$b)>","<kotlinx.coroutines.internal.d0$a: java.lang.Object a(java.lang.Object,g0.g$b)>"
"<y.a$b$a: void a(java.lang.Object)>","<y.a$b$a: void a(java.lang.Object)>"
"<u0.z1: void <init>()>","<u0.z1: void <init>()>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long h(android.view.accessibility.AccessibilityRecord)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long h(android.view.accessibility.AccessibilityRecord)>"
"<io.flutter.view.c$l: java.util.List F(io.flutter.view.c$l,java.util.List)>","<io.flutter.view.c$l: java.util.List F(io.flutter.view.c$l,java.util.List)>"
"<io.flutter.view.AccessibilityViewEmbedder$c: boolean equals(java.lang.Object)>","<io.flutter.view.AccessibilityViewEmbedder$c: boolean equals(java.lang.Object)>"
"<x.k$g: void c(boolean)>","<x.k$g: void c(boolean)>"
"<b0.a: java.util.List d(java.lang.String)>","<b0.a: java.util.List d(java.lang.String)>"
"<k.i: void <init>(java.lang.reflect.InvocationHandler)>","<k.i: void <init>(java.lang.reflect.InvocationHandler)>"
"<io.flutter.plugins.webviewflutter.f2: void y(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void y(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.y2$b: void o(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void o(java.lang.Void)>"
"<kotlinx.coroutines.internal.f0: kotlinx.coroutines.internal.e0 a()>","<kotlinx.coroutines.internal.f0: kotlinx.coroutines.internal.e0 a()>"
"<io.flutter.plugins.webviewflutter.f2: void c(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void c(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.internal.i$d: java.lang.Throwable a(java.lang.Throwable)>","<kotlinx.coroutines.internal.i$d: java.lang.Throwable a(java.lang.Throwable)>"
"<io.flutter.embedding.android.e$c: java.lang.String A()>","<io.flutter.embedding.android.e$c: java.lang.String A()>"
"<a.b$b: a.b$c c(a.b$c)>","<a.b$b: a.b$c c(a.b$c)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()>","<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()>"
"<io.flutter.plugins.webviewflutter.x2: io.flutter.plugins.webviewflutter.k$t y(android.webkit.WebResourceRequest)>","<io.flutter.plugins.webviewflutter.x2: io.flutter.plugins.webviewflutter.k$t y(android.webkit.WebResourceRequest)>"
"<a.b$e: java.util.Map$Entry d()>","<a.b$e: java.util.Map$Entry d()>"
"<y0.a: void <init>(java.lang.Throwable)>","<y0.a: void <init>(java.lang.Throwable)>"
"<u0.v1$b: void l(java.lang.Object)>","<u0.v1$b: void l(java.lang.Object)>"
"<kotlin.jvm.internal.c: java.lang.Class b()>","<kotlin.jvm.internal.c: java.lang.Class b()>"
"<io.flutter.embedding.android.d: android.view.View F()>","<io.flutter.embedding.android.d: android.view.View F()>"
"<w0.e: void <init>(java.lang.String,int)>","<w0.e: void <init>(java.lang.String,int)>"
"<e0.g: int g(java.lang.Iterable,int)>","<e0.g: int g(java.lang.Iterable,int)>"
"<io.flutter.embedding.android.v: void <init>(java.lang.String,int)>","<io.flutter.embedding.android.v: void <init>(java.lang.String,int)>"
"<e0.i: java.util.List e(java.util.List)>","<e0.i: java.util.List e(java.util.List)>"
"<u0.e: void <init>()>","<u0.e: void <init>()>"
"<kotlin.jvm.internal.j: java.lang.String toString()>","<kotlin.jvm.internal.j: java.lang.String toString()>"
"<io.flutter.embedding.engine.e: void <init>(java.util.List)>","<io.flutter.embedding.engine.e: void <init>(java.util.List)>"
"<u0.z: void <init>(java.lang.Object,n0.l)>","<u0.z: void <init>(java.lang.Object,n0.l)>"
"<io.flutter.plugin.platform.r$b: void <init>(android.view.View,java.lang.Runnable)>","<io.flutter.plugin.platform.r$b: void <init>(android.view.View,java.lang.Runnable)>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$f f(io.flutter.plugin.platform.SingleViewPresentation$e,io.flutter.plugin.platform.SingleViewPresentation$f)>","<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$f f(io.flutter.plugin.platform.SingleViewPresentation$e,io.flutter.plugin.platform.SingleViewPresentation$f)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)>"
"<u0.n0: boolean c()>","<u0.n0: boolean c()>"
"<androidx.window.layout.HardwareFoldingFeature: void <init>(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)>","<androidx.window.layout.HardwareFoldingFeature: void <init>(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<androidx.versionedparcelable.a: java.lang.reflect.Method d(java.lang.String)>","<androidx.versionedparcelable.a: java.lang.reflect.Method d(java.lang.String)>"
"<k.h: void <init>(android.webkit.WebMessagePort)>","<k.h: void <init>(android.webkit.WebMessagePort)>"
"<io.flutter.plugins.webviewflutter.k$u: void i(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void i(java.lang.Long,java.lang.Boolean)>"
"<h0.c: g0.d a(n0.p,java.lang.Object,g0.d)>","<h0.c: g0.d a(n0.p,java.lang.Object,g0.d)>"
"<x.i: x.i$j f(x.i,org.json.JSONObject)>","<x.i: x.i$j f(x.i,org.json.JSONObject)>"
"<u0.z1: java.lang.String y(java.lang.String)>","<u0.z1: java.lang.String y(java.lang.String)>"
"<androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)>","<androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)>"
"<y0.b: void <clinit>()>","<y0.b: void <clinit>()>"
"<androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()>","<androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()>"
"<x.i$d: void <init>(java.lang.String,int,java.lang.String)>","<x.i$d: void <init>(java.lang.String,int,java.lang.String)>"
"<kotlinx.coroutines.internal.s: kotlinx.coroutines.internal.t b(java.lang.Throwable,java.lang.String,int,java.lang.Object)>","<kotlinx.coroutines.internal.s: kotlinx.coroutines.internal.t b(java.lang.Throwable,java.lang.String,int,java.lang.Object)>"
"<x.p: java.util.HashMap c(java.util.ArrayList)>","<x.p: java.util.HashMap c(java.util.ArrayList)>"
"<y.a$b: void a(java.nio.ByteBuffer,y.b$b)>","<y.a$b: void a(java.nio.ByteBuffer,y.b$b)>"
"<io.flutter.plugins.webviewflutter.r0: void e(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void e(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.scheduling.a$c: void <clinit>()>","<kotlinx.coroutines.scheduling.a$c: void <clinit>()>"
"<io.flutter.embedding.engine.FlutterOverlaySurface: void <init>(int,android.view.Surface)>","<io.flutter.embedding.engine.FlutterOverlaySurface: void <init>(int,android.view.Surface)>"
"<kotlin.coroutines.jvm.internal.a: java.lang.StackTraceElement getStackTraceElement()>","<kotlin.coroutines.jvm.internal.a: java.lang.StackTraceElement getStackTraceElement()>"
"<k.g: org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface b()>","<k.g: org.chromium.support_lib_boundary.SafeBrowsingResponseBoundaryInterface b()>"
"<androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)>"
"<androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()>","<androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()>"
"<b.d: java.lang.Object k(int,java.lang.Object)>","<b.d: java.lang.Object k(int,java.lang.Object)>"
"<kotlinx.coroutines.internal.g0: void <init>(g0.g,int)>","<kotlinx.coroutines.internal.g0: void <init>(g0.g,int)>"
"<io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.k a(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.k a(io.flutter.embedding.android.FlutterSplashView)>"
"<androidx.lifecycle.c: void <init>()>","<androidx.lifecycle.c: void <init>()>"
"<b.c$c: void <init>(b.c)>","<b.c$c: void <init>(b.c)>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()>","<androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()>"
"<t0.l: java.lang.Long i(java.lang.String,int)>","<t0.l: java.lang.Long i(java.lang.String,int)>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: void c(java.lang.Object[])>","<io.flutter.plugin.platform.SingleViewPresentation$f: void c(java.lang.Object[])>"
"<io.flutter.view.c$l: java.lang.CharSequence r0()>","<io.flutter.view.c$l: java.lang.CharSequence r0()>"
"<x.k$c: void <init>(int,int)>","<x.k$c: void <init>(int,int)>"
"<androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()>","<androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()>"
"<k.i: void <init>(android.webkit.WebResourceError)>","<k.i: void <init>(android.webkit.WebResourceError)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)>","<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)>"
"<androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()>","<androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()>"
"<kotlin.jvm.internal.l: java.lang.String d(kotlin.jvm.internal.f)>","<kotlin.jvm.internal.l: java.lang.String d(kotlin.jvm.internal.f)>"
"<y0.c$a: void <init>()>","<y0.c$a: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$v: void <init>()>","<io.flutter.plugins.webviewflutter.k$v: void <init>()>"
"<e0.z: java.util.Map e(java.util.Map)>","<e0.z: java.util.Map e(java.util.Map)>"
"<androidx.versionedparcelable.b: void <init>(android.os.Parcel)>","<androidx.versionedparcelable.b: void <init>(android.os.Parcel)>"
"<androidx.versionedparcelable.a: i.a v(i.a,int)>","<androidx.versionedparcelable.a: i.a v(i.a,int)>"
"<io.flutter.view.c: io.flutter.view.c$l A(int)>","<io.flutter.view.c: io.flutter.view.c$l A(int)>"
"<b.c$e: java.lang.Object[] toArray()>","<b.c$e: java.lang.Object[] toArray()>"
"<u0.u1: java.lang.String toString()>","<u0.u1: java.lang.String toString()>"
"<o0.b$a: void <init>()>","<o0.b$a: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$y: void h(java.lang.Long,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void h(java.lang.Long,io.flutter.plugins.webviewflutter.k$y$a)>"
"<h0.b: g0.d a(n0.p,java.lang.Object,g0.d)>","<h0.b: g0.d a(n0.p,java.lang.Object,g0.d)>"
"<e0.t: java.lang.Object remove(java.lang.Object)>","<e0.t: java.lang.Object remove(java.lang.Object)>"
"<x.k$g: long h(x.k$d)>","<x.k$g: long h(x.k$d)>"
"<w0.c$a: kotlinx.coroutines.internal.z A(kotlinx.coroutines.internal.o$b)>","<w0.c$a: kotlinx.coroutines.internal.z A(kotlinx.coroutines.internal.o$b)>"
"<kotlinx.coroutines.internal.e: void <clinit>()>","<kotlinx.coroutines.internal.e: void <clinit>()>"
"<x.l: y.i$d f(x.l,y.i$d)>","<x.l: y.i$d f(x.l,y.i$d)>"
"<w0.e: w0.e[] values()>","<w0.e: w0.e[] values()>"
"<io.flutter.view.c$l: int c0(io.flutter.view.c$l)>","<io.flutter.view.c$l: int c0(io.flutter.view.c$l)>"
"<androidx.window.layout.EmptyDecorator: void <clinit>()>","<androidx.window.layout.EmptyDecorator: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$j: void b(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$j: void b(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>"
"<q0.a$a: void <init>(kotlin.jvm.internal.e)>","<q0.a$a: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.embedding.android.d: java.lang.String k()>","<io.flutter.embedding.android.d: java.lang.String k()>"
"<androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)>","<androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)>"
"<io.flutter.embedding.android.n: void <init>()>","<io.flutter.embedding.android.n: void <init>()>"
"<io.flutter.view.c: x.a$b n(io.flutter.view.c)>","<io.flutter.view.c: x.a$b n(io.flutter.view.c)>"
"<u0.z1: u0.z1 c()>","<u0.z1: u0.z1 c()>"
"<io.flutter.plugin.platform.c: java.lang.CharSequence m(io.flutter.plugin.platform.c,x.i$e)>","<io.flutter.plugin.platform.c: java.lang.CharSequence m(io.flutter.plugin.platform.c,x.i$e)>"
"<x.k$a: void e(y.h,y.i$d)>","<x.k$a: void e(y.h,y.i$d)>"
"<kotlin.jvm.internal.c$a: void <init>()>","<kotlin.jvm.internal.c$a: void <init>()>"
"<g0.a: void <init>(g0.g$c)>","<g0.a: void <init>(g0.g$c)>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a g(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a g(java.lang.String)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b valueOf(java.lang.String)>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b valueOf(java.lang.String)>"
"<io.flutter.embedding.android.d$a: void <init>(io.flutter.embedding.android.d)>","<io.flutter.embedding.android.d$a: void <init>(io.flutter.embedding.android.d)>"
"<e0.q: java.util.List q(java.lang.Iterable)>","<e0.q: java.util.List q(java.lang.Iterable)>"
"<t0.c$a: void <init>(t0.c)>","<t0.c$a: void <init>(t0.c)>"
"<io.flutter.embedding.engine.c$b: void <init>(o.d,io.flutter.embedding.engine.c$a)>","<io.flutter.embedding.engine.c$b: void <init>(o.d,io.flutter.embedding.engine.c$a)>"
"<x.p$e: boolean b()>","<x.p$e: boolean b()>"
"<io.flutter.plugins.webviewflutter.k$s: java.util.Map d()>","<io.flutter.plugins.webviewflutter.k$s: java.util.Map d()>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void <init>(android.view.View,int,int)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void <init>(android.view.View,int,int)>"
"<x0.f: java.lang.Object b(x0.c,g0.d)>","<x0.f: java.lang.Object b(x0.c,g0.d)>"
"<t0.n: d0.j p(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>","<t0.n: d0.j p(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>"
"<io.flutter.embedding.android.d: io.flutter.embedding.android.v o()>","<io.flutter.embedding.android.d: io.flutter.embedding.android.v o()>"
"<r0.b: r0.g getVisibility()>","<r0.b: r0.g getVisibility()>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: void <init>()>","<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: void <init>()>"
"<x.i$h: void f(x.i$j)>","<x.i$h: void f(x.i$j)>"
"<io.flutter.plugin.platform.q$a: void m(io.flutter.plugin.platform.f,x.k$d)>","<io.flutter.plugin.platform.q$a: void m(io.flutter.plugin.platform.f,x.k$d)>"
"<io.flutter.embedding.android.d: void <init>()>","<io.flutter.embedding.android.d: void <init>()>"
"<io.flutter.plugin.platform.c$d: boolean c()>","<io.flutter.plugin.platform.c$d: boolean c()>"
"<io.flutter.view.c: int r()>","<io.flutter.view.c: int r()>"
"<io.flutter.plugin.platform.q: int i(io.flutter.plugin.platform.q,double)>","<io.flutter.plugin.platform.q: int i(io.flutter.plugin.platform.q,double)>"
"<b.c$c: int size()>","<b.c$c: int size()>"
"<io.flutter.embedding.engine.a: x.n s()>","<io.flutter.embedding.engine.a: x.n s()>"
"<androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()>","<androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()>"
"<t0.n: s0.b H(java.lang.CharSequence)>","<t0.n: s0.b H(java.lang.CharSequence)>"
"<androidx.core.app.CoreComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>","<androidx.core.app.CoreComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>"
"<x0.a$a: void <init>(x0.a,g0.d)>","<x0.a$a: void <init>(x0.a,g0.d)>"
"<u0.n: u0.l a(g0.d)>","<u0.n: u0.l a(g0.d)>"
"<io.flutter.embedding.android.b$a: void onAnimationStart(android.animation.Animator)>","<io.flutter.embedding.android.b$a: void onAnimationStart(android.animation.Animator)>"
"<y.i: void <init>(y.b,java.lang.String,y.j,y.b$c)>","<y.i: void <init>(y.b,java.lang.String,y.j,y.b$c)>"
"<io.flutter.plugins.webviewflutter.k$c0: java.lang.Boolean t(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: java.lang.Boolean t(java.lang.Long)>"
"<u0.a1$a: int g(u0.a1$a)>","<u0.a1$a: int g(u0.a1$a)>"
"<io.flutter.plugins.webviewflutter.y2$d: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>","<io.flutter.plugins.webviewflutter.y2$d: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>"
"<j.e: void <init>()>","<j.e: void <init>()>"
"<y.a$e: void a(java.lang.Object)>","<y.a$e: void a(java.lang.Object)>"
"<w0.c: kotlinx.coroutines.internal.m e()>","<w0.c: kotlinx.coroutines.internal.m e()>"
"<io.flutter.plugins.webviewflutter.k$j: void <init>(y.b)>","<io.flutter.plugins.webviewflutter.k$j: void <init>(y.b)>"
"<io.flutter.plugins.webviewflutter.i: void <init>(io.flutter.plugins.webviewflutter.h)>","<io.flutter.plugins.webviewflutter.i: void <init>(io.flutter.plugins.webviewflutter.h)>"
"<u0.i1: void <init>(u0.z1)>","<u0.i1: void <init>(u0.z1)>"
"<com.example.vtu_web_app.MainActivity: android.content.Intent getIntent()>","<com.example.vtu_web_app.MainActivity: android.content.Intent getIntent()>"
"<io.flutter.plugin.platform.q: android.view.View c(int)>","<io.flutter.plugin.platform.q: android.view.View c(int)>"
"<u0.f0$a$a: u0.f0 a(g0.g$b)>","<u0.f0$a$a: u0.f0 a(g0.g$b)>"
"<x.p$f: void g(x.p$e)>","<x.p$f: void g(x.p$e)>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getWebkitToCompatConverter()>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getWebkitToCompatConverter()>"
"<e0.r: java.lang.Object next()>","<e0.r: java.lang.Object next()>"
"<b.a$a: int f(java.lang.Object)>","<b.a$a: int f(java.lang.Object)>"
"<w0.i: w0.i$c a()>","<w0.i: w0.i$c a()>"
"<androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<androidx.window.layout.HardwareFoldingFeature$Type$Companion: void <init>()>","<androidx.window.layout.HardwareFoldingFeature$Type$Companion: void <init>()>"
"<io.flutter.plugin.platform.SingleViewPresentation$c: void <init>(android.content.Context,android.view.inputmethod.InputMethodManager)>","<io.flutter.plugin.platform.SingleViewPresentation$c: void <init>(android.content.Context,android.view.inputmethod.InputMethodManager)>"
"<io.flutter.plugin.platform.q: android.util.SparseArray x(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: android.util.SparseArray x(io.flutter.plugin.platform.q)>"
"<w.a: io.flutter.view.d$c n(android.graphics.SurfaceTexture)>","<w.a: io.flutter.view.d$c n(android.graphics.SurfaceTexture)>"
"<io.flutter.plugins.webviewflutter.k$o: void b(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$o: void b(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>"
"<x.l: void <init>(m.a,boolean)>","<x.l: void <init>(m.a,boolean)>"
"<k.a$d: boolean c()>","<k.a$d: boolean c()>"
"<io.flutter.view.e: io.flutter.view.e$c e(io.flutter.view.e,io.flutter.view.e$c)>","<io.flutter.view.e: io.flutter.view.e$c e(io.flutter.view.e,io.flutter.view.e$c)>"
"<e0.y: java.util.Map b(d0.j)>","<e0.y: java.util.Map b(d0.j)>"
"<u0.a1$a: void c(int)>","<u0.a1$a: void c(int)>"
"<u0.v1$b: boolean g()>","<u0.v1$b: boolean g()>"
"<k.g: android.webkit.SafeBrowsingResponse c()>","<k.g: android.webkit.SafeBrowsingResponse c()>"
"<io.flutter.plugins.webviewflutter.k$c0: void a(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void a(java.lang.Long)>"
"<u0.x: void <init>(java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable)>","<u0.x: void <init>(java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable)>"
"<k.a$b: boolean c()>","<k.a$b: boolean c()>"
"<io.flutter.embedding.android.r: java.lang.Long g(android.view.KeyEvent)>","<io.flutter.embedding.android.r: java.lang.Long g(android.view.KeyEvent)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(u0.l0,g0.d)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(u0.l0,g0.d)>"
"<t0.n: java.lang.String W(java.lang.String,char,java.lang.String)>","<t0.n: java.lang.String W(java.lang.String,char,java.lang.String)>"
"<u0.f0: g0.d l(g0.d)>","<u0.f0: g0.d l(g0.d)>"
"<io.flutter.plugin.platform.c$a: void m(x.i$c)>","<io.flutter.plugin.platform.c$a: void m(x.i$c)>"
"<t0.n$b: java.lang.Object invoke(java.lang.Object)>","<t0.n$b: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void <init>(android.graphics.SurfaceTexture,java.lang.Runnable)>","<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void <init>(android.graphics.SurfaceTexture,java.lang.Runnable)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState$a: java.lang.Object[] newArray(int)>","<io.flutter.embedding.android.FlutterSplashView$SavedState$a: java.lang.Object[] newArray(int)>"
"<g0.g$b$a: java.lang.Object a(g0.g$b,java.lang.Object,n0.p)>","<g0.g$b$a: java.lang.Object a(g0.g$b,java.lang.Object,n0.p)>"
"<x.i$i: void <init>(java.lang.String,int,java.lang.String)>","<x.i$i: void <init>(java.lang.String,int,java.lang.String)>"
"<io.flutter.view.c$l: boolean o(io.flutter.view.c$l,io.flutter.view.c$g)>","<io.flutter.view.c$l: boolean o(io.flutter.view.c$l,io.flutter.view.c$g)>"
"<u0.l: java.lang.Throwable v(u0.o1)>","<u0.l: java.lang.Throwable v(u0.o1)>"
"<kotlin.jvm.internal.c: java.lang.String a()>","<kotlin.jvm.internal.c: java.lang.String a()>"
"<y.j: y.h e(java.nio.ByteBuffer)>","<y.j: y.h e(java.nio.ByteBuffer)>"
"<a.b$d: void a(a.b$c)>","<a.b$d: void a(a.b$c)>"
"<io.flutter.embedding.android.k: boolean checkInputConnectionProxy(android.view.View)>","<io.flutter.embedding.android.k: boolean checkInputConnectionProxy(android.view.View)>"
"<androidx.window.core.Bounds: java.lang.String toString()>","<androidx.window.core.Bounds: java.lang.String toString()>"
"<io.flutter.embedding.android.d: io.flutter.embedding.android.y r()>","<io.flutter.embedding.android.d: io.flutter.embedding.android.y r()>"
"<w0.f$a: int a()>","<w0.f$a: int a()>"
"<io.flutter.plugins.webviewflutter.y2$b: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>","<io.flutter.plugins.webviewflutter.y2$b: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>"
"<f.a$b: void b(boolean)>","<f.a$b: void b(boolean)>"
"<w.a$g: void <init>()>","<w.a$g: void <init>()>"
"<kotlinx.coroutines.scheduling.a$c: void k()>","<kotlinx.coroutines.scheduling.a$c: void k()>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)>"
"<io.flutter.embedding.engine.c$c: boolean d(int,java.lang.String[],int[])>","<io.flutter.embedding.engine.c$c: boolean d(int,java.lang.String[],int[])>"
"<h0.c: g0.d b(g0.d)>","<h0.c: g0.d b(g0.d)>"
"<x.p$f: void d()>","<x.p$f: void d()>"
"<io.flutter.embedding.android.e: java.lang.Object c()>","<io.flutter.embedding.android.e: java.lang.Object c()>"
"<kotlinx.coroutines.scheduling.b: u0.f0 s()>","<kotlinx.coroutines.scheduling.b: u0.f0 s()>"
"<k.b$b: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>","<k.b$b: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>"
"<k.f: void <init>()>","<k.f: void <init>()>"
"<io.flutter.plugin.platform.q$a: long h(x.k$d)>","<io.flutter.plugin.platform.q$a: long h(x.k$d)>"
"<io.flutter.plugins.webviewflutter.s2$b: void b(java.lang.Void)>","<io.flutter.plugins.webviewflutter.s2$b: void b(java.lang.Void)>"
"<d0.i: void <init>()>","<d0.i: void <init>()>"
"<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i e(boolean)>","<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i e(boolean)>"
"<k.b: android.webkit.WebMessagePort[] c(android.webkit.WebView)>","<k.b: android.webkit.WebMessagePort[] c(android.webkit.WebView)>"
"<b0.a: java.util.Map f()>","<b0.a: java.util.Map f()>"
"<io.flutter.plugin.platform.f: android.view.View getView()>","<io.flutter.plugin.platform.f: android.view.View getView()>"
"<io.flutter.embedding.android.k$f: void b()>","<io.flutter.embedding.android.k$f: void b()>"
"<u0.f1: void <init>()>","<u0.f1: void <init>()>"
"<io.flutter.view.e: io.flutter.view.e f(float,io.flutter.embedding.engine.FlutterJNI)>","<io.flutter.view.e: io.flutter.view.e f(float,io.flutter.embedding.engine.FlutterJNI)>"
"<io.flutter.plugins.webviewflutter.k$y: void k(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void k(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<b.d: java.lang.Object remove(java.lang.Object)>","<b.d: java.lang.Object remove(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.w2$a: void <init>()>","<io.flutter.plugins.webviewflutter.w2$a: void <init>()>"
"<w.a$f: void onTrimMemory(int)>","<w.a$f: void onTrimMemory(int)>"
"<io.flutter.plugins.webviewflutter.k$p: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$p: void <clinit>()>"
"<v0.a: u0.y1 q()>","<v0.a: u0.y1 q()>"
"<io.flutter.plugins.webviewflutter.k$o: void c(java.lang.Long,io.flutter.plugins.webviewflutter.k$o$a)>","<io.flutter.plugins.webviewflutter.k$o: void c(java.lang.Long,io.flutter.plugins.webviewflutter.k$o$a)>"
"<io.flutter.plugins.webviewflutter.k$t: void b(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$t: void b(java.lang.Boolean)>"
"<androidx.core.app.CoreComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>","<androidx.core.app.CoreComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>"
"<e0.q: java.lang.String l(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>","<e0.q: java.lang.String l(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>"
"<k.m: org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface getWebkitToCompatConverter()>","<k.m: org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface getWebkitToCompatConverter()>"
"<androidx.window.layout.WindowInfoTracker$Companion: void <init>()>","<androidx.window.layout.WindowInfoTracker$Companion: void <init>()>"
"<io.flutter.plugins.webviewflutter.q3$a: void c()>","<io.flutter.plugins.webviewflutter.q3$a: void c()>"
"<kotlinx.coroutines.internal.i$g: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.i$g: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.embedding.android.k: void autofill(android.util.SparseArray)>","<io.flutter.embedding.android.k: void autofill(android.util.SparseArray)>"
"<w0.i$b: void <init>(kotlin.jvm.internal.e)>","<w0.i$b: void <init>(kotlin.jvm.internal.e)>"
"<androidx.versionedparcelable.a: java.lang.Class c(java.lang.Class)>","<androidx.versionedparcelable.a: java.lang.Class c(java.lang.Class)>"
"<u0.v1$c: java.lang.Object i(kotlinx.coroutines.internal.o)>","<u0.v1$c: java.lang.Object i(kotlinx.coroutines.internal.o)>"
"<androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)>","<androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)>"
"<kotlinx.coroutines.internal.f: void <init>(g0.g)>","<kotlinx.coroutines.internal.f: void <init>(g0.g)>"
"<k.g: void <init>(java.lang.reflect.InvocationHandler)>","<k.g: void <init>(java.lang.reflect.InvocationHandler)>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void <init>(android.app.Activity,java.util.concurrent.Executor,e.a)>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void <init>(android.app.Activity,java.util.concurrent.Executor,e.a)>"
"<io.flutter.plugin.platform.c$c: void <clinit>()>","<io.flutter.plugin.platform.c$c: void <clinit>()>"
"<io.flutter.plugin.editing.c: java.lang.String toString()>","<io.flutter.plugin.editing.c: java.lang.String toString()>"
"<io.flutter.plugin.editing.f$a: void e()>","<io.flutter.plugin.editing.f$a: void e()>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable d(java.lang.Throwable,java.lang.Throwable,java.util.ArrayDeque)>","<kotlinx.coroutines.internal.y: java.lang.Throwable d(java.lang.Throwable,java.lang.Throwable,java.util.ArrayDeque)>"
"<t0.d: java.lang.CharSequence a0(java.lang.CharSequence)>","<t0.d: java.lang.CharSequence a0(java.lang.CharSequence)>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)>","<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)>"
"<io.flutter.plugin.platform.q$a: void e(int,double,double)>","<io.flutter.plugin.platform.q$a: void e(int,double,double)>"
"<io.flutter.plugin.platform.r: void <init>(android.content.Context,io.flutter.plugin.platform.a,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.f,android.view.Surface,io.flutter.view.d$c,android.view.View$OnFocusChangeListener,int,java.lang.Object)>","<io.flutter.plugin.platform.r: void <init>(android.content.Context,io.flutter.plugin.platform.a,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.f,android.view.Surface,io.flutter.view.d$c,android.view.View$OnFocusChangeListener,int,java.lang.Object)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: void <init>(android.os.Parcelable)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: void <init>(android.os.Parcelable)>"
"<x.p$d: x.p$d a(java.lang.String)>","<x.p$d: x.p$d a(java.lang.String)>"
"<androidx.window.layout.WindowMetrics: java.lang.String toString()>","<androidx.window.layout.WindowMetrics: java.lang.String toString()>"
"<x.g: x.g$b a(x.g)>","<x.g: x.g$b a(x.g)>"
"<kotlin.jvm.internal.m: java.lang.String d(kotlin.jvm.internal.f)>","<kotlin.jvm.internal.m: java.lang.String d(kotlin.jvm.internal.f)>"
"<x.p$g: x.p$g[] values()>","<x.p$g: x.p$g[] values()>"
"<io.flutter.embedding.android.k$b: boolean deliverSelfNotifications()>","<io.flutter.embedding.android.k$b: boolean deliverSelfNotifications()>"
"<androidx.window.core.Bounds: android.graphics.Rect toRect()>","<androidx.window.core.Bounds: android.graphics.Rect toRect()>"
"<u0.k1: void <init>(u0.j1)>","<u0.k1: void <init>(u0.j1)>"
"<e0.q: java.lang.Appendable i(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l)>","<e0.q: java.lang.Appendable i(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l)>"
"<io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])>","<io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])>"
"<io.flutter.plugins.webviewflutter.u: y.g c()>","<io.flutter.plugins.webviewflutter.u: y.g c()>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: android.graphics.Matrix a()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: android.graphics.Matrix a()>"
"<b.c$c: boolean isEmpty()>","<b.c$c: boolean isEmpty()>"
"<kotlinx.coroutines.scheduling.a$d: kotlinx.coroutines.scheduling.a$d valueOf(java.lang.String)>","<kotlinx.coroutines.scheduling.a$d: kotlinx.coroutines.scheduling.a$d valueOf(java.lang.String)>"
"<e0.s: void <init>()>","<e0.s: void <init>()>"
"<x.p$d: x.p$d valueOf(java.lang.String)>","<x.p$d: x.p$d valueOf(java.lang.String)>"
"<u0.w1: kotlinx.coroutines.internal.z b()>","<u0.w1: kotlinx.coroutines.internal.z b()>"
"<u0.c0: java.lang.Object a(java.lang.Object,g0.d)>","<u0.c0: java.lang.Object a(java.lang.Object,g0.d)>"
"<kotlin.jvm.internal.k: void <init>(java.lang.Class,java.lang.String)>","<kotlin.jvm.internal.k: void <init>(java.lang.Class,java.lang.String)>"
"<w0.o: java.lang.Object e()>","<w0.o: java.lang.Object e()>"
"<androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)>","<androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<io.flutter.plugin.platform.SingleViewPresentation$f: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<x.i$c: void <init>(int,java.lang.String)>","<x.i$c: void <init>(int,java.lang.String)>"
"<k.e: java.lang.String a()>","<k.e: java.lang.String a()>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<x.k$a: void i(y.h,y.i$d)>","<x.k$a: void i(y.h,y.i$d)>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)>","<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)>"
"<kotlinx.coroutines.internal.b: void <clinit>()>","<kotlinx.coroutines.internal.b: void <clinit>()>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)>"
"<io.flutter.embedding.android.n$a: io.flutter.embedding.android.n$a[] values()>","<io.flutter.embedding.android.n$a: io.flutter.embedding.android.n$a[] values()>"
"<io.flutter.view.c$c: void onChange(boolean)>","<io.flutter.view.c$c: void onChange(boolean)>"
"<a.b$a: a.b$c c(a.b$c)>","<a.b$a: a.b$c c(a.b$c)>"
"<androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()>","<androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()>"
"<io.flutter.view.c$h: void <init>()>","<io.flutter.view.c$h: void <init>()>"
"<b0.b: void <init>()>","<b0.b: void <init>()>"
"<u0.a: java.lang.String C()>","<u0.a: java.lang.String C()>"
"<w.a$e: void <init>(long,io.flutter.embedding.engine.FlutterJNI)>","<w.a$e: void <init>(long,io.flutter.embedding.engine.FlutterJNI)>"
"<io.flutter.view.c$i: void <clinit>()>","<io.flutter.view.c$i: void <clinit>()>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState$a: java.lang.Object createFromParcel(android.os.Parcel)>","<io.flutter.embedding.android.FlutterSplashView$SavedState$a: java.lang.Object createFromParcel(android.os.Parcel)>"
"<io.flutter.embedding.android.k$c: void <init>(io.flutter.embedding.android.k)>","<io.flutter.embedding.android.k$c: void <init>(io.flutter.embedding.android.k)>"
"<io.flutter.view.e$a: void a(long)>","<io.flutter.view.e$a: void a(long)>"
"<kotlin.coroutines.jvm.internal.f: java.lang.String f()>","<kotlin.coroutines.jvm.internal.f: java.lang.String f()>"
"<w0.c$a: void y()>","<w0.c$a: void y()>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)>","<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)>"
"<u0.n0: void <init>(java.lang.String,int)>","<u0.n0: void <init>(java.lang.String,int)>"
"<androidx.window.embedding.SplitRule: void <init>(int,int,float,int,int,kotlin.jvm.internal.e)>","<androidx.window.embedding.SplitRule: void <init>(int,int,float,int,int,kotlin.jvm.internal.e)>"
"<io.flutter.plugin.editing.f: android.view.inputmethod.InputMethodManager q()>","<io.flutter.plugin.editing.f: android.view.inputmethod.InputMethodManager q()>"
"<b.c$d: java.util.Map$Entry a()>","<b.c$d: java.util.Map$Entry a()>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)>"
"<y.o: void <clinit>()>","<y.o: void <clinit>()>"
"<z.a$a: java.lang.String a(java.lang.String,java.lang.String)>","<z.a$a: java.lang.String a(java.lang.String,java.lang.String)>"
"<io.flutter.view.c$l: boolean g0()>","<io.flutter.view.c$l: boolean g0()>"
"<x.l: boolean d(x.l)>","<x.l: boolean d(x.l)>"
"<kotlinx.coroutines.internal.d0$a: void <clinit>()>","<kotlinx.coroutines.internal.d0$a: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$u: void c(java.lang.Long,java.lang.String)>","<io.flutter.plugins.webviewflutter.k$u: void c(java.lang.Long,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$d: y.g d()>","<io.flutter.plugins.webviewflutter.k$d: y.g d()>"
"<io.flutter.plugin.platform.q$a: void s(x.k$d,android.view.View,boolean)>","<io.flutter.plugin.platform.q$a: void s(x.k$d,android.view.View,boolean)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)>"
"<io.flutter.plugins.webviewflutter.y2$b: void l(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void l(java.lang.Void)>"
"<io.flutter.embedding.android.k$e: void f()>","<io.flutter.embedding.android.k$e: void f()>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getTracingController()>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getTracingController()>"
"<y.e: java.lang.Object g(java.lang.Object)>","<y.e: java.lang.Object g(java.lang.Object)>"
"<kotlin.jvm.internal.a: void <init>()>","<kotlin.jvm.internal.a: void <init>()>"
"<androidx.window.layout.WindowMetricsCalculator$Companion: void <init>()>","<androidx.window.layout.WindowMetricsCalculator$Companion: void <init>()>"
"<u0.v: java.lang.Thread t(java.util.concurrent.atomic.AtomicInteger,java.lang.Runnable)>","<u0.v: java.lang.Thread t(java.util.concurrent.atomic.AtomicInteger,java.lang.Runnable)>"
"<x.k: java.lang.String c(java.lang.Exception)>","<x.k: java.lang.String c(java.lang.Exception)>"
"<androidx.window.embedding.ActivityFilter: void <init>(android.content.ComponentName,java.lang.String)>","<androidx.window.embedding.ActivityFilter: void <init>(android.content.ComponentName,java.lang.String)>"
"<io.flutter.embedding.android.a: void <clinit>()>","<io.flutter.embedding.android.a: void <clinit>()>"
"<k.a$c: void <init>(java.lang.String,java.lang.String)>","<k.a$c: void <init>(java.lang.String,java.lang.String)>"
"<w0.p: w0.g iterator()>","<w0.p: w0.g iterator()>"
"<androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)>","<androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)>"
"<io.flutter.embedding.android.k$e: void <init>(io.flutter.embedding.android.k,w.a,java.lang.Runnable)>","<io.flutter.embedding.android.k$e: void <init>(io.flutter.embedding.android.k,w.a,java.lang.Runnable)>"
"<io.flutter.plugins.webviewflutter.k$c0: void y(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void y(java.lang.Long,java.lang.Long)>"
"<kotlin.coroutines.jvm.internal.b: java.lang.Boolean a(boolean)>","<kotlin.coroutines.jvm.internal.b: java.lang.Boolean a(boolean)>"
"<x0.a: java.lang.Object b(x0.c,g0.d)>","<x0.a: java.lang.Object b(x0.c,g0.d)>"
"<io.flutter.view.e$a: void <init>(io.flutter.view.e)>","<io.flutter.view.e$a: void <init>(io.flutter.view.e)>"
"<androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()>","<androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()>"
"<u0.v1$b: u0.z1 c()>","<u0.v1$b: u0.z1 c()>"
"<u0.j1: u0.z1 c()>","<u0.j1: u0.z1 c()>"
"<kotlinx.coroutines.internal.d0$b: void <init>()>","<kotlinx.coroutines.internal.d0$b: void <init>()>"
"<androidx.window.core.Version: java.math.BigInteger getBigInteger()>","<androidx.window.core.Version: java.math.BigInteger getBigInteger()>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable n(java.lang.Throwable)>","<kotlinx.coroutines.internal.y: java.lang.Throwable n(java.lang.Throwable)>"
"<w.a$f: void a(io.flutter.view.d$b)>","<w.a$f: void a(io.flutter.view.d$b)>"
"<b.c$b: void clear()>","<b.c$b: void clear()>"
"<io.flutter.embedding.android.m: void b(io.flutter.embedding.android.s$d$a,boolean)>","<io.flutter.embedding.android.m: void b(io.flutter.embedding.android.s$d$a,boolean)>"
"<kotlinx.coroutines.internal.d0: void <clinit>()>","<kotlinx.coroutines.internal.d0: void <clinit>()>"
"<t0.d: java.lang.String Y(java.lang.String,char,java.lang.String,int,java.lang.Object)>","<t0.d: java.lang.String Y(java.lang.String,char,java.lang.String,int,java.lang.Object)>"
"<io.flutter.embedding.android.h$b: void d()>","<io.flutter.embedding.android.h$b: void d()>"
"<u0.c0: java.lang.Object c(java.lang.Object,u0.k)>","<u0.c0: java.lang.Object c(java.lang.Object,u0.k)>"
"<io.flutter.embedding.android.s: void <init>(io.flutter.embedding.android.s$e)>","<io.flutter.embedding.android.s: void <init>(io.flutter.embedding.android.s$e)>"
"<y0.a$a: void <init>(kotlin.jvm.internal.e)>","<y0.a$a: void <init>(kotlin.jvm.internal.e)>"
"<w0.j: java.lang.String toString()>","<w0.j: java.lang.String toString()>"
"<d0.j: void <init>(java.lang.Object,java.lang.Object)>","<d0.j: void <init>(java.lang.Object,java.lang.Object)>"
"<s0.i: void <init>(s0.b,n0.l)>","<s0.i: void <init>(s0.b,n0.l)>"
"<io.flutter.plugin.platform.c$a: void i(java.util.List)>","<io.flutter.plugin.platform.c$a: void i(java.util.List)>"
"<androidx.window.layout.WindowLayoutInfo: void <init>(java.util.List)>","<androidx.window.layout.WindowLayoutInfo: void <init>(java.util.List)>"
"<w.a$f: void <init>(w.a,long,android.graphics.SurfaceTexture)>","<w.a$f: void <init>(w.a,long,android.graphics.SurfaceTexture)>"
"<b.c$c: boolean removeAll(java.util.Collection)>","<b.c$c: boolean removeAll(java.util.Collection)>"
"<androidx.window.embedding.MatcherUtils: void <init>()>","<androidx.window.embedding.MatcherUtils: void <init>()>"
"<a.b$c: int hashCode()>","<a.b$c: int hashCode()>"
"<kotlinx.coroutines.internal.d0$b: void <clinit>()>","<kotlinx.coroutines.internal.d0$b: void <clinit>()>"
"<u0.l: java.lang.Object h()>","<u0.l: java.lang.Object h()>"
"<io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)>","<io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)>"
"<kotlin.jvm.internal.g: java.lang.String toString()>","<kotlin.jvm.internal.g: java.lang.String toString()>"
"<x.i: x.i$c g(org.json.JSONObject)>","<x.i: x.i$c g(org.json.JSONObject)>"
"<o0.c$a: int b()>","<o0.c$a: int b()>"
"<u0.y1: java.lang.String toString()>","<u0.y1: java.lang.String toString()>"
"<io.flutter.embedding.android.k$c: void f()>","<io.flutter.embedding.android.k$c: void f()>"
"<io.flutter.embedding.android.v: void <clinit>()>","<io.flutter.embedding.android.v: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$e0$a: io.flutter.plugins.webviewflutter.k$e0$a c(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$e0$a: io.flutter.plugins.webviewflutter.k$e0$a c(java.lang.Long)>"
"<io.flutter.plugins.webviewflutter.k$g: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$g: void <clinit>()>"
"<io.flutter.embedding.android.h$b: void f()>","<io.flutter.embedding.android.h$b: void f()>"
"<io.flutter.plugins.webviewflutter.y2$d: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>","<io.flutter.plugins.webviewflutter.y2$d: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>"
"<org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.reflect.InvocationHandler[] getPorts()>","<org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.reflect.InvocationHandler[] getPorts()>"
"<io.flutter.plugins.webviewflutter.k$b: void b(java.lang.String,java.lang.String)>","<io.flutter.plugins.webviewflutter.k$b: void b(java.lang.String,java.lang.String)>"
"<androidx.window.layout.HardwareFoldingFeature$Companion: void <init>()>","<androidx.window.layout.HardwareFoldingFeature$Companion: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$c0: void v(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void v(java.lang.Long)>"
"<androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()>","<androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()>"
"<y.i$a$a: void c()>","<y.i$a$a: void c()>"
"<e0.z: java.util.Map d()>","<e0.z: java.util.Map d()>"
"<u0.o1$b: void <clinit>()>","<u0.o1$b: void <clinit>()>"
"<kotlinx.coroutines.internal.d: java.lang.Object e(java.lang.Object)>","<kotlinx.coroutines.internal.d: java.lang.Object e(java.lang.Object)>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: void d(java.lang.Object[])>","<io.flutter.plugin.platform.SingleViewPresentation$f: void d(java.lang.Object[])>"
"<io.flutter.view.c$l: int n(io.flutter.view.c$l,int)>","<io.flutter.view.c$l: int n(io.flutter.view.c$l,int)>"
"<u0.e0: u0.h2 e(g0.d,g0.g,java.lang.Object)>","<u0.e0: u0.h2 e(g0.d,g0.g,java.lang.Object)>"
"<u0.l: java.lang.StackTraceElement getStackTraceElement()>","<u0.l: java.lang.StackTraceElement getStackTraceElement()>"
"<kotlinx.coroutines.scheduling.a$c: void <init>(kotlinx.coroutines.scheduling.a,int)>","<kotlinx.coroutines.scheduling.a$c: void <init>(kotlinx.coroutines.scheduling.a,int)>"
"<io.flutter.embedding.android.k: void c(android.view.KeyEvent)>","<io.flutter.embedding.android.k: void c(android.view.KeyEvent)>"
"<io.flutter.plugins.webviewflutter.k$e0: java.util.Map d()>","<io.flutter.plugins.webviewflutter.k$e0: java.util.Map d()>"
"<androidx.window.core.Bounds: void <init>(int,int,int,int)>","<androidx.window.core.Bounds: void <init>(int,int,int,int)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: void <init>(java.lang.Object)>","<androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: void <init>(java.lang.Object)>"
"<t0.f$b: java.lang.String a(java.lang.String)>","<t0.f$b: java.lang.String a(java.lang.String)>"
"<io.flutter.plugin.platform.r$b: void a(android.view.View,java.lang.Runnable)>","<io.flutter.plugin.platform.r$b: void a(android.view.View,java.lang.Runnable)>"
"<u0.v1$a: void y(java.lang.Throwable)>","<u0.v1$a: void y(java.lang.Throwable)>"
"<io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()>","<io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()>"
"<io.flutter.view.c$g: io.flutter.view.c$g valueOf(java.lang.String)>","<io.flutter.view.c$g: io.flutter.view.c$g valueOf(java.lang.String)>"
"<io.flutter.embedding.android.y: void <init>(java.lang.String,int)>","<io.flutter.embedding.android.y: void <init>(java.lang.String,int)>"
"<kotlin.jvm.internal.c: java.lang.String toString()>","<kotlin.jvm.internal.c: java.lang.String toString()>"
"<r0.g: void <clinit>()>","<r0.g: void <clinit>()>"
"<b.a$a: java.util.Map c()>","<b.a$a: java.util.Map c()>"
"<q0.c$a: q0.c a()>","<q0.c$a: q0.c a()>"
"<t0.n: java.lang.String Q(java.lang.String,char,java.lang.String)>","<t0.n: java.lang.String Q(java.lang.String,char,java.lang.String)>"
"<io.flutter.view.c$o: void <clinit>()>","<io.flutter.view.c$o: void <clinit>()>"
"<io.flutter.view.c$l: java.lang.String H(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String H(io.flutter.view.c$l)>"
"<x.a$b: void e(int)>","<x.a$b: void e(int)>"
"<u0.o0: void <init>(java.lang.String,java.lang.Throwable)>","<u0.o0: void <init>(java.lang.String,java.lang.Throwable)>"
"<kotlinx.coroutines.internal.q: java.lang.Object j()>","<kotlinx.coroutines.internal.q: java.lang.Object j()>"
"<e0.e: java.lang.Object h(java.lang.Object[])>","<e0.e: java.lang.Object h(java.lang.Object[])>"
"<u0.v1: g0.g$c getKey()>","<u0.v1: g0.g$c getKey()>"
"<io.flutter.plugins.webviewflutter.k$e0$a: io.flutter.plugins.webviewflutter.k$e0$a b(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$e0$a: io.flutter.plugins.webviewflutter.k$e0$a b(java.lang.Long)>"
"<u0.o1$a: g0.g f(u0.o1,g0.g)>","<u0.o1$a: g0.g f(u0.o1,g0.g)>"
"<u0.y: java.lang.String toString()>","<u0.y: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.e$b: void <init>(io.flutter.plugins.webviewflutter.d)>","<io.flutter.plugins.webviewflutter.e$b: void <init>(io.flutter.plugins.webviewflutter.d)>"
"<androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)>","<androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)>"
"<io.flutter.plugins.webviewflutter.f2: void p(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void p(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<x.i$k: x.i$k[] values()>","<x.i$k: x.i$k[] values()>"
"<androidx.window.layout.ActivityCompatHelperApi24: void <clinit>()>","<androidx.window.layout.ActivityCompatHelperApi24: void <clinit>()>"
"<io.flutter.plugin.platform.r: void <clinit>()>","<io.flutter.plugin.platform.r: void <clinit>()>"
"<io.flutter.embedding.android.k: boolean w()>","<io.flutter.embedding.android.k: boolean w()>"
"<u0.r1: void <init>(u0.o1)>","<u0.r1: void <init>(u0.o1)>"
"<kotlinx.coroutines.internal.y: java.util.ArrayDeque e(kotlin.coroutines.jvm.internal.e)>","<kotlinx.coroutines.internal.y: java.util.ArrayDeque e(kotlin.coroutines.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.y2$b: void j(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void j(java.lang.Void)>"
"<u0.k: java.lang.Object f(java.lang.Object,java.lang.Object)>","<u0.k: java.lang.Object f(java.lang.Object,java.lang.Object)>"
"<m.a$b: int hashCode()>","<m.a$b: int hashCode()>"
"<io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)>","<io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)>"
"<t0.d: int F(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>","<t0.d: int F(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a b(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a b(java.lang.Boolean)>"
"<s0.f$a: void <init>(java.util.Iterator)>","<s0.f$a: void <init>(java.util.Iterator)>"
"<io.flutter.plugins.webviewflutter.o3: void <init>()>","<io.flutter.plugins.webviewflutter.o3: void <init>()>"
"<io.flutter.plugin.platform.q$a: void t(x.k$d,android.view.View,boolean)>","<io.flutter.plugin.platform.q$a: void t(x.k$d,android.view.View,boolean)>"
"<io.flutter.plugins.webviewflutter.k$r: void <init>()>","<io.flutter.plugins.webviewflutter.k$r: void <init>()>"
"<io.flutter.view.c$l: int a(io.flutter.view.c$l)>","<io.flutter.view.c$l: int a(io.flutter.view.c$l)>"
"<kotlinx.coroutines.internal.i$e: int compare(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.i$e: int compare(java.lang.Object,java.lang.Object)>"
"<kotlinx.coroutines.internal.i$g: void <clinit>()>","<kotlinx.coroutines.internal.i$g: void <clinit>()>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertWebResourceError(java.lang.reflect.InvocationHandler)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertWebResourceError(java.lang.reflect.InvocationHandler)>"
"<io.flutter.plugin.platform.q: boolean k(int)>","<io.flutter.plugin.platform.q: boolean k(int)>"
"<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 b()>","<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 b()>"
"<x.i$f: void <init>(java.lang.String,int,java.lang.String)>","<x.i$f: void <init>(java.lang.String,int,java.lang.String)>"
"<androidx.activity.b: androidx.activity.OnBackPressedDispatcher i()>","<androidx.activity.b: androidx.activity.OnBackPressedDispatcher i()>"
"<e0.q: java.lang.Appendable j(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>","<e0.q: java.lang.Appendable j(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$t: void f(java.util.Map)>","<io.flutter.plugins.webviewflutter.k$t: void f(java.util.Map)>"
"<w0.a: w0.q l()>","<w0.a: w0.q l()>"
"<androidx.window.layout.FoldingFeature$Orientation$Companion: void <init>()>","<androidx.window.layout.FoldingFeature$Orientation$Companion: void <init>()>"
"<io.flutter.view.c$l: void C0(float[],java.util.Set,boolean)>","<io.flutter.view.c$l: void C0(float[],java.util.Set,boolean)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)>"
"<x.k$a: void h(y.h,y.i$d)>","<x.k$a: void h(y.h,y.i$d)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: void <init>()>","<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: void <init>()>"
"<io.flutter.embedding.android.b$a: void <init>(io.flutter.embedding.android.b,java.lang.Runnable)>","<io.flutter.embedding.android.b$a: void <init>(io.flutter.embedding.android.b,java.lang.Runnable)>"
"<io.flutter.plugin.platform.r$a: void <init>(io.flutter.plugin.platform.r,android.view.View,java.lang.Runnable)>","<io.flutter.plugin.platform.r$a: void <init>(io.flutter.plugin.platform.r,android.view.View,java.lang.Runnable)>"
"<io.flutter.embedding.android.t$b: void <init>()>","<io.flutter.embedding.android.t$b: void <init>()>"
"<x.g$b: void a(java.lang.String)>","<x.g$b: void a(java.lang.String)>"
"<io.flutter.view.e: io.flutter.view.e g(android.hardware.display.DisplayManager,io.flutter.embedding.engine.FlutterJNI)>","<io.flutter.view.e: io.flutter.view.e g(android.hardware.display.DisplayManager,io.flutter.embedding.engine.FlutterJNI)>"
"<io.flutter.plugins.webviewflutter.m2: void d(java.lang.Void)>","<io.flutter.plugins.webviewflutter.m2: void d(java.lang.Void)>"
"<io.flutter.plugin.platform.SingleViewPresentation$b: int a(int)>","<io.flutter.plugin.platform.SingleViewPresentation$b: int a(int)>"
"<io.flutter.embedding.android.k$g: io.flutter.embedding.android.k$g valueOf(java.lang.String)>","<io.flutter.embedding.android.k$g: io.flutter.embedding.android.k$g valueOf(java.lang.String)>"
"<androidx.window.embedding.EmbeddingRule: void <init>()>","<androidx.window.embedding.EmbeddingRule: void <init>()>"
"<b.a: java.util.Set entrySet()>","<b.a: java.util.Set entrySet()>"
"<a.b$e: a.b$c b(a.b$c)>","<a.b$e: a.b$c b(a.b$c)>"
"<b.c$d: java.lang.String toString()>","<b.c$d: java.lang.String toString()>"
"<c0.e: java.lang.String c(java.lang.String)>","<c0.e: java.lang.String c(java.lang.String)>"
"<kotlinx.coroutines.scheduling.a$d: void <clinit>()>","<kotlinx.coroutines.scheduling.a$d: void <clinit>()>"
"<io.flutter.embedding.engine.FlutterJNI$c: void <init>()>","<io.flutter.embedding.engine.FlutterJNI$c: void <init>()>"
"<kotlinx.coroutines.internal.o: java.lang.Object o()>","<kotlinx.coroutines.internal.o: java.lang.Object o()>"
"<b.c$e: boolean remove(java.lang.Object)>","<b.c$e: boolean remove(java.lang.Object)>"
"<androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)>","<androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)>"
"<io.flutter.view.c$l: java.util.List I(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.util.List I(io.flutter.view.c$l)>"
"<kotlinx.coroutines.internal.q$b: void <init>(int)>","<kotlinx.coroutines.internal.q$b: void <init>(int)>"
"<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.a$c d()>","<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.a$c d()>"
"<io.flutter.plugins.webviewflutter.y2$b: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>","<io.flutter.plugins.webviewflutter.y2$b: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.y2$b: void e(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void e(java.lang.Void)>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertServiceWorkerSettings(java.lang.Object)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertServiceWorkerSettings(java.lang.Object)>"
"<b0.a: android.os.Handler b(b0.a)>","<b0.a: android.os.Handler b(b0.a)>"
"<u0.v1$b: void b(java.lang.Throwable)>","<u0.v1$b: void b(java.lang.Throwable)>"
"<y.i: void <init>(y.b,java.lang.String,y.j)>","<y.i: void <init>(y.b,java.lang.String,y.j)>"
"<u0.a2: void <init>()>","<u0.a2: void <init>()>"
"<w0.c: w0.j d()>","<w0.c: w0.j d()>"
"<y.a$b: void <init>(y.a,y.a$d)>","<y.a$b: void <init>(y.a,y.a$d)>"
"<io.flutter.plugins.webviewflutter.q3$a: void b()>","<io.flutter.plugins.webviewflutter.q3$a: void b()>"
"<w.a$f: long g(w.a$f)>","<w.a$f: long g(w.a$f)>"
"<androidx.window.embedding.SplitController: void <init>(kotlin.jvm.internal.e)>","<androidx.window.embedding.SplitController: void <init>(kotlin.jvm.internal.e)>"
"<x0.a$a: java.lang.Object invokeSuspend(java.lang.Object)>","<x0.a$a: java.lang.Object invokeSuspend(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.q3$c: void b()>","<io.flutter.plugins.webviewflutter.q3$c: void b()>"
"<androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)>","<androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)>"
"<b.d: java.lang.Object i(int)>","<b.d: java.lang.Object i(int)>"
"<i0.a: void <init>()>","<i0.a: void <init>()>"
"<kotlinx.coroutines.internal.h0: void <init>(java.lang.String,java.lang.Throwable)>","<kotlinx.coroutines.internal.h0: void <init>(java.lang.String,java.lang.Throwable)>"
"<kotlinx.coroutines.internal.i$d: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.i$d: java.lang.Object invoke(java.lang.Object)>"
"<androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()>","<androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()>"
"<u0.j2$a: void <init>()>","<u0.j2$a: void <init>()>"
"<a.b$c: java.lang.Object getValue()>","<a.b$c: java.lang.Object getValue()>"
"<io.flutter.embedding.android.k: void <init>(android.content.Context,io.flutter.embedding.android.i)>","<io.flutter.embedding.android.k: void <init>(android.content.Context,io.flutter.embedding.android.i)>"
"<io.flutter.plugins.webviewflutter.k$c0: void z(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void z(java.lang.Long,java.lang.Long)>"
"<y.p: java.nio.ByteBuffer b(y.h)>","<y.p: java.nio.ByteBuffer b(y.h)>"
"<io.flutter.embedding.android.k: void s()>","<io.flutter.embedding.android.k: void s()>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState$a: io.flutter.embedding.android.FlutterSplashView$SavedState[] b(int)>","<io.flutter.embedding.android.FlutterSplashView$SavedState$a: io.flutter.embedding.android.FlutterSplashView$SavedState[] b(int)>"
"<q0.a: void <clinit>()>","<q0.a: void <clinit>()>"
"<androidx.versionedparcelable.ParcelImpl$a: androidx.versionedparcelable.ParcelImpl[] b(int)>","<androidx.versionedparcelable.ParcelImpl$a: androidx.versionedparcelable.ParcelImpl[] b(int)>"
"<io.flutter.embedding.android.s$c: io.flutter.embedding.android.s$d$a a()>","<io.flutter.embedding.android.s$c: io.flutter.embedding.android.s$d$a a()>"
"<androidx.window.R$styleable: void <clinit>()>","<androidx.window.R$styleable: void <clinit>()>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)>"
"<io.flutter.plugins.webviewflutter.y2$b: void f(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void f(java.lang.Void)>"
"<x0.f: void <init>(n0.p)>","<x0.f: void <init>(n0.p)>"
"<u0.s1: u0.w a(u0.o1)>","<u0.s1: u0.w a(u0.o1)>"
"<o.a: o.b e(android.content.Context)>","<o.a: o.b e(android.content.Context)>"
"<x.n$b: void a(java.lang.String,java.lang.String,y.i$d)>","<x.n$b: void a(java.lang.String,java.lang.String,y.i$d)>"
"<u0.e0: void <clinit>()>","<u0.e0: void <clinit>()>"
"<e0.g: boolean h(java.util.Collection,java.lang.Iterable)>","<e0.g: boolean h(java.util.Collection,java.lang.Iterable)>"
"<w0.i$a: void <init>(java.lang.Throwable)>","<w0.i$a: void <init>(java.lang.Throwable)>"
"<io.flutter.embedding.android.u$a: void <clinit>()>","<io.flutter.embedding.android.u$a: void <clinit>()>"
"<kotlinx.coroutines.scheduling.a$a: void <init>(kotlin.jvm.internal.e)>","<kotlinx.coroutines.scheduling.a$a: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.view.c$p: void <clinit>()>","<io.flutter.view.c$p: void <clinit>()>"
"<u0.r: java.lang.Object invoke(java.lang.Object)>","<u0.r: java.lang.Object invoke(java.lang.Object)>"
"<s0.i$a: java.lang.Object next()>","<s0.i$a: java.lang.Object next()>"
"<x.p$f: void a(java.lang.String,android.os.Bundle)>","<x.p$f: void a(java.lang.String,android.os.Bundle)>"
"<io.flutter.plugins.webviewflutter.q3$c: void setDownloadListener(android.webkit.DownloadListener)>","<io.flutter.plugins.webviewflutter.q3$c: void setDownloadListener(android.webkit.DownloadListener)>"
"<b.c$e: boolean retainAll(java.util.Collection)>","<b.c$e: boolean retainAll(java.util.Collection)>"
"<y0.d$a: java.lang.Object g(java.lang.Object,java.lang.Object,java.lang.Object)>","<y0.d$a: java.lang.Object g(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<u0.o1: u0.x0 j(boolean,boolean,n0.l)>","<u0.o1: u0.x0 j(boolean,boolean,n0.l)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: x0.b windowLayoutInfo(android.app.Activity)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: x0.b windowLayoutInfo(android.app.Activity)>"
"<io.flutter.plugin.platform.r$b$a: void run()>","<io.flutter.plugin.platform.r$b$a: void run()>"
"<io.flutter.embedding.android.k: android.view.PointerIcon b(int)>","<io.flutter.embedding.android.k: android.view.PointerIcon b(int)>"
"<t0.d: void a(java.lang.Appendable,java.lang.Object,n0.l)>","<t0.d: void a(java.lang.Appendable,java.lang.Object,n0.l)>"
"<androidx.versionedparcelable.a: java.lang.CharSequence l(java.lang.CharSequence,int)>","<androidx.versionedparcelable.a: java.lang.CharSequence l(java.lang.CharSequence,int)>"
"<kotlinx.coroutines.internal.i$e: void <init>()>","<kotlinx.coroutines.internal.i$e: void <init>()>"
"<x.p$b$a: java.lang.String b(java.lang.String)>","<x.p$b$a: java.lang.String b(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$r: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$r: void <clinit>()>"
"<androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()>","<androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()>"
"<k.l: org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface getWebkitToCompatConverter()>","<k.l: org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface getWebkitToCompatConverter()>"
"<io.flutter.plugins.webviewflutter.q3$c: void e(android.view.View)>","<io.flutter.plugins.webviewflutter.q3$c: void e(android.view.View)>"
"<x.f$a: void a(y.h,y.i$d)>","<x.f$a: void a(y.h,y.i$d)>"
"<io.flutter.view.c: android.content.ContentResolver e(io.flutter.view.c)>","<io.flutter.view.c: android.content.ContentResolver e(io.flutter.view.c)>"
"<io.flutter.plugins.webviewflutter.g2$a: void <init>(io.flutter.plugins.webviewflutter.g2,android.view.View)>","<io.flutter.plugins.webviewflutter.g2$a: void <init>(io.flutter.plugins.webviewflutter.g2,android.view.View)>"
"<io.flutter.plugin.editing.f: android.view.inputmethod.InputConnection o(android.view.View,io.flutter.embedding.android.s,android.view.inputmethod.EditorInfo)>","<io.flutter.plugin.editing.f: android.view.inputmethod.InputConnection o(android.view.View,io.flutter.embedding.android.s,android.view.inputmethod.EditorInfo)>"
"<io.flutter.plugins.webviewflutter.m2: void c(io.flutter.plugins.webviewflutter.m2,java.lang.String)>","<io.flutter.plugins.webviewflutter.m2: void c(io.flutter.plugins.webviewflutter.m2,java.lang.String)>"
"<io.flutter.embedding.engine.c$c: void f(android.os.Bundle)>","<io.flutter.embedding.engine.c$c: void f(android.os.Bundle)>"
"<x.i$k: void <init>(java.lang.String,int,java.lang.String)>","<x.i$k: void <init>(java.lang.String,int,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.r0: void h(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void h(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<io.flutter.embedding.engine.FlutterJNI: void <clinit>()>","<io.flutter.embedding.engine.FlutterJNI: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$m: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$m: void <clinit>()>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$b)>","<io.flutter.plugin.platform.SingleViewPresentation$f: void <init>(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$b)>"
"<e0.z: java.util.Map h(java.lang.Iterable,java.util.Map)>","<e0.z: java.util.Map h(java.lang.Iterable,java.util.Map)>"
"<io.flutter.embedding.android.i: void h(io.flutter.embedding.android.i)>","<io.flutter.embedding.android.i: void h(io.flutter.embedding.android.i)>"
"<io.flutter.plugins.webviewflutter.y2$b: void b(android.webkit.WebView,android.webkit.WebResourceRequest,j.e)>","<io.flutter.plugins.webviewflutter.y2$b: void b(android.webkit.WebView,android.webkit.WebResourceRequest,j.e)>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(e.a)>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(e.a)>"
"<r0.g: void <init>(java.lang.String,int)>","<r0.g: void <init>(java.lang.String,int)>"
"<b.c$d: boolean equals(java.lang.Object)>","<b.c$d: boolean equals(java.lang.Object)>"
"<io.flutter.embedding.android.k: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>","<io.flutter.embedding.android.k: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>"
"<io.flutter.plugins.webviewflutter.k$c0: void h(java.lang.Long,java.lang.String,byte[])>","<io.flutter.plugins.webviewflutter.k$c0: void h(java.lang.Long,java.lang.String,byte[])>"
"<io.flutter.embedding.android.e$a: void d()>","<io.flutter.embedding.android.e$a: void d()>"
"<io.flutter.view.c$a: void f(java.lang.String)>","<io.flutter.view.c$a: void f(java.lang.String)>"
"<io.flutter.embedding.android.e$c: void v(io.flutter.embedding.engine.a)>","<io.flutter.embedding.android.e$c: void v(io.flutter.embedding.engine.a)>"
"<y.a$c: void <init>(y.a,y.a$e,y.a$a)>","<y.a$c: void <init>(y.a,y.a$e,y.a$a)>"
"<a.b: java.util.Iterator a()>","<a.b: java.util.Iterator a()>"
"<kotlinx.coroutines.scheduling.a$d: kotlinx.coroutines.scheduling.a$d[] a()>","<kotlinx.coroutines.scheduling.a$d: kotlinx.coroutines.scheduling.a$d[] a()>"
"<io.flutter.view.c$l: io.flutter.view.c$l u(io.flutter.view.c$l,io.flutter.view.c$l)>","<io.flutter.view.c$l: io.flutter.view.c$l u(io.flutter.view.c$l,io.flutter.view.c$l)>"
"<y.a$d: void a(java.lang.Object,y.a$e)>","<y.a$d: void a(java.lang.Object,y.a$e)>"
"<k.k: java.lang.reflect.InvocationHandler b()>","<k.k: java.lang.reflect.InvocationHandler b()>"
"<l.a$b: void <init>()>","<l.a$b: void <init>()>"
"<u0.v1$a: void <init>(u0.v1,u0.v1$b,u0.r,java.lang.Object)>","<u0.v1$a: void <init>(u0.v1,u0.v1$b,u0.r,java.lang.Object)>"
"<e0.a: char g(char[])>","<e0.a: char g(char[])>"
"<kotlinx.coroutines.scheduling.m: void <clinit>()>","<kotlinx.coroutines.scheduling.m: void <clinit>()>"
"<o.d: o.e i(android.content.Context)>","<o.d: o.e i(android.content.Context)>"
"<h0.c$a: java.lang.Object invokeSuspend(java.lang.Object)>","<h0.c$a: java.lang.Object invokeSuspend(java.lang.Object)>"
"<e0.e: java.lang.Object[] i(java.lang.Object[],java.util.Comparator)>","<e0.e: java.lang.Object[] i(java.lang.Object[],java.util.Comparator)>"
"<u0.f1$a$a: u0.f1 a(g0.g$b)>","<u0.f1$a$a: u0.f1 a(g0.g$b)>"
"<androidx.versionedparcelable.b: androidx.versionedparcelable.a b()>","<androidx.versionedparcelable.b: androidx.versionedparcelable.a b()>"
"<u0.l: void <clinit>()>","<u0.l: void <clinit>()>"
"<io.flutter.embedding.android.d: android.os.Bundle I()>","<io.flutter.embedding.android.d: android.os.Bundle I()>"
"<x.m$a: void a()>","<x.m$a: void a()>"
"<io.flutter.plugins.webviewflutter.n2: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>","<io.flutter.plugins.webviewflutter.n2: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>"
"<b.c$a: void <init>(b.c,int)>","<b.c$a: void <init>(b.c,int)>"
"<org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface: java.lang.CharSequence getDescription()>","<org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface: java.lang.CharSequence getDescription()>"
"<w0.m: java.lang.Object v()>","<w0.m: java.lang.Object v()>"
"<io.flutter.embedding.android.s$d: void a(android.view.KeyEvent,io.flutter.embedding.android.s$d$a)>","<io.flutter.embedding.android.s$d: void a(android.view.KeyEvent,io.flutter.embedding.android.s$d$a)>"
"<k.m: java.lang.String[] a()>","<k.m: java.lang.String[] a()>"
"<v0.a: void <init>(android.os.Handler,java.lang.String)>","<v0.a: void <init>(android.os.Handler,java.lang.String)>"
"<io.flutter.embedding.android.s$c$a: void a(boolean)>","<io.flutter.embedding.android.s$c$a: void a(boolean)>"
"<io.flutter.embedding.android.k: void A(boolean,boolean)>","<io.flutter.embedding.android.k: void A(boolean,boolean)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b[] values()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b[] values()>"
"<androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>","<androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>"
"<d0.q: java.lang.String toString()>","<d0.q: java.lang.String toString()>"
"<androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)>","<androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)>"
"<androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()>","<androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()>"
"<w0.e: w0.e valueOf(java.lang.String)>","<w0.e: w0.e valueOf(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$h: java.util.List b(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$h: java.util.List b(java.lang.String)>"
"<k.b: java.lang.CharSequence e(android.webkit.WebResourceError)>","<k.b: java.lang.CharSequence e(android.webkit.WebResourceError)>"
"<androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)>","<androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)>"
"<io.flutter.plugins.webviewflutter.y2$c: android.webkit.WebViewClient a(io.flutter.plugins.webviewflutter.x2,boolean)>","<io.flutter.plugins.webviewflutter.y2$c: android.webkit.WebViewClient a(io.flutter.plugins.webviewflutter.x2,boolean)>"
"<io.flutter.embedding.android.k: void p()>","<io.flutter.embedding.android.k: void p()>"
"<io.flutter.plugins.webviewflutter.k$k: void <init>()>","<io.flutter.plugins.webviewflutter.k$k: void <init>()>"
"<io.flutter.embedding.android.FlutterSplashView: android.os.Parcelable onSaveInstanceState()>","<io.flutter.embedding.android.FlutterSplashView: android.os.Parcelable onSaveInstanceState()>"
"<kotlinx.coroutines.scheduling.a$c: void q()>","<kotlinx.coroutines.scheduling.a$c: void q()>"
"<x.n$a: void <init>(x.n)>","<x.n$a: void <init>(x.n)>"
"<io.flutter.view.e: io.flutter.view.e$c d(io.flutter.view.e)>","<io.flutter.view.e: io.flutter.view.e$c d(io.flutter.view.e)>"
"<w0.d: kotlinx.coroutines.internal.z z(int)>","<w0.d: kotlinx.coroutines.internal.z z(int)>"
"<io.flutter.plugin.platform.SingleViewPresentation$a: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<io.flutter.plugin.platform.SingleViewPresentation$a: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<androidx.window.layout.ActivityCompatHelperApi30: void <clinit>()>","<androidx.window.layout.ActivityCompatHelperApi30: void <clinit>()>"
"<io.flutter.view.c$l: java.lang.CharSequence z(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.CharSequence z(io.flutter.view.c$l)>"
"<io.flutter.plugins.webviewflutter.k$c0: void s(java.lang.Long,java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void s(java.lang.Long,java.lang.Long,java.lang.Long)>"
"<x.i$l: x.i$l a(java.lang.String)>","<x.i$l: x.i$l a(java.lang.String)>"
"<o0.b$a: java.util.Random a()>","<o0.b$a: java.util.Random a()>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)>"
"<u0.j0: void o(g0.g,java.lang.String)>","<u0.j0: void o(g0.g,java.lang.String)>"
"<e0.r: java.lang.Object previous()>","<e0.r: java.lang.Object previous()>"
"<kotlin.jvm.internal.k: java.lang.String toString()>","<kotlin.jvm.internal.k: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.y2$d: void n(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void n(java.lang.Void)>"
"<u0.r0: java.lang.Thread S()>","<u0.r0: java.lang.Thread S()>"
"<q0.d: int a(int,int)>","<q0.d: int a(int,int)>"
"<o0.c: o0.c a()>","<o0.c: o0.c a()>"
"<io.flutter.plugins.webviewflutter.k$e0$a: io.flutter.plugins.webviewflutter.k$e0 a()>","<io.flutter.plugins.webviewflutter.k$e0$a: io.flutter.plugins.webviewflutter.k$e0 a()>"
"<k0.a: o0.c b()>","<k0.a: o0.c b()>"
"<b.d: java.lang.Object j(int)>","<b.d: java.lang.Object j(int)>"
"<io.flutter.plugins.webviewflutter.k$d: void b(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$d: void b(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>"
"<u0.y: void <init>(java.lang.Throwable,boolean)>","<u0.y: void <init>(java.lang.Throwable,boolean)>"
"<w0.c: void j(kotlinx.coroutines.internal.o)>","<w0.c: void j(kotlinx.coroutines.internal.o)>"
"<w0.c: w0.q k(java.lang.Object)>","<w0.c: w0.q k(java.lang.Object)>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)>","<androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)>"
"<io.flutter.embedding.engine.c: void <init>(android.content.Context,io.flutter.embedding.engine.a,o.d)>","<io.flutter.embedding.engine.c: void <init>(android.content.Context,io.flutter.embedding.engine.a,o.d)>"
"<e0.u: java.lang.String toString()>","<e0.u: java.lang.String toString()>"
"<w0.a$c: void a(java.lang.Throwable)>","<w0.a$c: void a(java.lang.Throwable)>"
"<io.flutter.plugin.platform.SingleViewPresentation$c: void <init>(android.content.Context)>","<io.flutter.plugin.platform.SingleViewPresentation$c: void <init>(android.content.Context)>"
"<io.flutter.plugins.webviewflutter.k$o: void <init>(y.b)>","<io.flutter.plugins.webviewflutter.k$o: void <init>(y.b)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect)>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect)>"
"<b.d: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<b.d: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<androidx.window.core.Version: void <clinit>()>","<androidx.window.core.Version: void <clinit>()>"
"<io.flutter.view.c$b: void <init>(io.flutter.view.c)>","<io.flutter.view.c$b: void <init>(io.flutter.view.c)>"
"<u0.p1: u0.p1 b()>","<u0.p1: u0.p1 b()>"
"<androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()>","<androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()>"
"<b.c: java.util.Collection n()>","<b.c: java.util.Collection n()>"
"<androidx.window.embedding.EmptyEmbeddingComponent: void <init>()>","<androidx.window.embedding.EmptyEmbeddingComponent: void <init>()>"
"<y.i$a$a: void b(java.lang.String,java.lang.String,java.lang.Object)>","<y.i$a$a: void b(java.lang.String,java.lang.String,java.lang.Object)>"
"<j.d: void <init>()>","<j.d: void <init>()>"
"<g0.a: g0.g$c getKey()>","<g0.a: g0.g$c getKey()>"
"<x.i$g: x.i$g[] values()>","<x.i$g: x.i$g[] values()>"
"<io.flutter.plugins.webviewflutter.k$u: void h(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void h(java.lang.Long,java.lang.Boolean)>"
"<u0.f0: void <clinit>()>","<u0.f0: void <clinit>()>"
"<x.i$e: x.i$e a(java.lang.String)>","<x.i$e: x.i$e a(java.lang.String)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)>","<androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)>"
"<io.flutter.plugins.webviewflutter.f2: void n(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void n(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<t0.d: java.lang.String T(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>","<t0.d: java.lang.String T(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>"
"<w0.a$d: java.lang.Object g(java.lang.Object)>","<w0.a$d: java.lang.Object g(java.lang.Object)>"
"<io.flutter.embedding.android.e$c: void d()>","<io.flutter.embedding.android.e$c: void d()>"
"<io.flutter.embedding.android.e$c: android.content.Context getContext()>","<io.flutter.embedding.android.e$c: android.content.Context getContext()>"
"<e0.s: java.lang.Object set(int,java.lang.Object)>","<e0.s: java.lang.Object set(int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.c$a: void onDisplayAdded(int)>","<io.flutter.plugins.webviewflutter.c$a: void onDisplayAdded(int)>"
"<o.d$c: void <init>()>","<o.d$c: void <init>()>"
"<k.b$c: void <init>(j.f)>","<k.b$c: void <init>(j.f)>"
"<u0.u1: u0.v1 z()>","<u0.u1: u0.v1 z()>"
"<io.flutter.embedding.android.k$g: io.flutter.embedding.android.k$g[] values()>","<io.flutter.embedding.android.k$g: io.flutter.embedding.android.k$g[] values()>"
"<io.flutter.plugins.webviewflutter.f2: void w(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void w(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.k$d0: void <init>()>","<io.flutter.plugins.webviewflutter.k$d0: void <init>()>"
"<e0.t: java.util.Set d()>","<e0.t: java.util.Set d()>"
"<io.flutter.embedding.android.h$a: void surfaceDestroyed(android.view.SurfaceHolder)>","<io.flutter.embedding.android.h$a: void surfaceDestroyed(android.view.SurfaceHolder)>"
"<io.flutter.plugin.platform.q$a: long o(io.flutter.plugin.platform.f,x.k$d)>","<io.flutter.plugin.platform.q$a: long o(io.flutter.plugin.platform.f,x.k$d)>"
"<io.flutter.embedding.android.k$d: void a(androidx.window.layout.WindowLayoutInfo)>","<io.flutter.embedding.android.k$d: void a(androidx.window.layout.WindowLayoutInfo)>"
"<u0.v1: u0.u1 X(n0.l,boolean)>","<u0.v1: u0.u1 X(n0.l,boolean)>"
"<b.a$a: void a()>","<b.a$a: void a()>"
"<io.flutter.view.c: void t(io.flutter.view.c,boolean)>","<io.flutter.view.c: void t(io.flutter.view.c,boolean)>"
"<io.flutter.embedding.android.y: void <clinit>()>","<io.flutter.embedding.android.y: void <clinit>()>"
"<kotlin.jvm.internal.j: void <init>(int)>","<kotlin.jvm.internal.j: void <init>(int)>"
"<io.flutter.plugins.webviewflutter.k$y: void o(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void o(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<j.c: j.d[] b()>","<j.c: j.d[] b()>"
"<io.flutter.plugins.webviewflutter.q3$c: void a()>","<io.flutter.plugins.webviewflutter.q3$c: void a()>"
"<x.m$b: x.m$b valueOf(java.lang.String)>","<x.m$b: x.m$b valueOf(java.lang.String)>"
"<kotlin.jvm.internal.b: java.lang.Class b()>","<kotlin.jvm.internal.b: java.lang.Class b()>"
"<a.b$c: java.lang.Object setValue(java.lang.Object)>","<a.b$c: java.lang.Object setValue(java.lang.Object)>"
"<kotlinx.coroutines.internal.r: void <init>()>","<kotlinx.coroutines.internal.r: void <init>()>"
"<y.i: java.lang.String b(y.i)>","<y.i: java.lang.String b(y.i)>"
"<kotlin.coroutines.jvm.internal.i: kotlin.coroutines.jvm.internal.i$a a(kotlin.coroutines.jvm.internal.a)>","<kotlin.coroutines.jvm.internal.i: kotlin.coroutines.jvm.internal.i$a a(kotlin.coroutines.jvm.internal.a)>"
"<w0.c: w0.s m()>","<w0.c: w0.s m()>"
"<io.flutter.view.AccessibilityViewEmbedder$b: void <init>(io.flutter.view.AccessibilityViewEmbedder$a)>","<io.flutter.view.AccessibilityViewEmbedder$b: void <init>(io.flutter.view.AccessibilityViewEmbedder$a)>"
"<io.flutter.embedding.engine.a: void <init>(android.content.Context,java.lang.String[],boolean,boolean)>","<io.flutter.embedding.engine.a: void <init>(android.content.Context,java.lang.String[],boolean,boolean)>"
"<w0.d: void <init>(int,w0.e,n0.l)>","<w0.d: void <init>(int,w0.e,n0.l)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<u0.g1: java.lang.String toString()>","<u0.g1: java.lang.String toString()>"
"<kotlinx.coroutines.internal.q$a: int a(long)>","<kotlinx.coroutines.internal.q$a: int a(long)>"
"<q.a$b: q.a$a c()>","<q.a$b: q.a$a c()>"
"<x.p$e: void <init>(java.lang.String,int,int,int,int)>","<x.p$e: void <init>(java.lang.String,int,int,int,int)>"
"<x.b: n.a a(x.b)>","<x.b: n.a a(x.b)>"
"<n0.q: java.lang.Object g(java.lang.Object,java.lang.Object,java.lang.Object)>","<n0.q: java.lang.Object g(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<w0.c$a: void <init>(java.lang.Object)>","<w0.c$a: void <init>(java.lang.Object)>"
"<io.flutter.view.c$l: int s(io.flutter.view.c$l)>","<io.flutter.view.c$l: int s(io.flutter.view.c$l)>"
"<u0.l: java.lang.String y()>","<u0.l: java.lang.String y()>"
"<g0.c$a: void <init>()>","<g0.c$a: void <init>()>"
"<androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()>","<androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)>","<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebResourceRequest(android.webkit.WebResourceRequest)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebResourceRequest(android.webkit.WebResourceRequest)>"
"<y0.c$a: java.lang.Integer a(int,g0.g$b)>","<y0.c$a: java.lang.Integer a(int,g0.g$b)>"
"<io.flutter.view.c$l: boolean Q(io.flutter.view.c$l)>","<io.flutter.view.c$l: boolean Q(io.flutter.view.c$l)>"
"<e0.t: java.lang.Void b(java.lang.Object)>","<e0.t: java.lang.Void b(java.lang.Object)>"
"<k.a$a: void <clinit>()>","<k.a$a: void <clinit>()>"
"<q0.c$a: void <init>()>","<q0.c$a: void <init>()>"
"<io.flutter.plugin.platform.q$a: void j(io.flutter.plugin.platform.q$a,x.k$d,android.view.View,boolean)>","<io.flutter.plugin.platform.q$a: void j(io.flutter.plugin.platform.q$a,x.k$d,android.view.View,boolean)>"
"<k.a: java.lang.String a()>","<k.a: java.lang.String a()>"
"<androidx.window.layout.HardwareFoldingFeature$Type$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.HardwareFoldingFeature$Type$Companion: void <init>(kotlin.jvm.internal.e)>"
"<w.a$f: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper h()>","<w.a$f: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper h()>"
"<io.flutter.view.c$i: io.flutter.view.c$i[] values()>","<io.flutter.view.c$i: io.flutter.view.c$i[] values()>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long f(android.view.accessibility.AccessibilityNodeInfo,int)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long f(android.view.accessibility.AccessibilityNodeInfo,int)>"
"<kotlin.coroutines.jvm.internal.i: void <clinit>()>","<kotlin.coroutines.jvm.internal.i: void <clinit>()>"
"<kotlinx.coroutines.scheduling.b: void <init>()>","<kotlinx.coroutines.scheduling.b: void <init>()>"
"<kotlin.coroutines.jvm.internal.i$a: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>","<kotlin.coroutines.jvm.internal.i$a: void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)>"
"<kotlin.coroutines.jvm.internal.a: kotlin.coroutines.jvm.internal.e getCallerFrame()>","<kotlin.coroutines.jvm.internal.a: kotlin.coroutines.jvm.internal.e getCallerFrame()>"
"<k.a$b: void <init>(java.lang.String,java.lang.String)>","<k.a$b: void <init>(java.lang.String,java.lang.String)>"
"<w0.a$c: java.lang.String toString()>","<w0.a$c: java.lang.String toString()>"
"<io.flutter.plugin.platform.g: y.g b()>","<io.flutter.plugin.platform.g: y.g b()>"
"<o.d: void <init>(io.flutter.embedding.engine.FlutterJNI)>","<o.d: void <init>(io.flutter.embedding.engine.FlutterJNI)>"
"<io.flutter.view.c: x.a p(io.flutter.view.c)>","<io.flutter.view.c: x.a p(io.flutter.view.c)>"
"<u0.q0: java.lang.String b(java.lang.Object)>","<u0.q0: java.lang.String b(java.lang.Object)>"
"<x.k$b: void a(x.k$c)>","<x.k$b: void a(x.k$c)>"
"<kotlin.coroutines.jvm.internal.a: g0.d getCompletion()>","<kotlin.coroutines.jvm.internal.a: g0.d getCompletion()>"
"<androidx.window.layout.SidecarAdapter$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.SidecarAdapter$Companion: void <init>(kotlin.jvm.internal.e)>"
"<b.c$e: int size()>","<b.c$e: int size()>"
"<kotlinx.coroutines.scheduling.g: void <clinit>()>","<kotlinx.coroutines.scheduling.g: void <clinit>()>"
"<u0.e2: java.lang.Object k(g0.g)>","<u0.e2: java.lang.Object k(g0.g)>"
"<kotlinx.coroutines.internal.q$a: long b(long,int)>","<kotlinx.coroutines.internal.q$a: long b(long,int)>"
"<e0.d: java.lang.Object[] c(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>","<e0.d: java.lang.Object[] c(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.q3$d: void c(boolean)>","<io.flutter.plugins.webviewflutter.q3$d: void c(boolean)>"
"<h0.c$b: java.lang.Object invokeSuspend(java.lang.Object)>","<h0.c$b: java.lang.Object invokeSuspend(java.lang.Object)>"
"<io.flutter.embedding.android.FlutterSplashView$a: void <init>(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView$a: void <init>(io.flutter.embedding.android.FlutterSplashView)>"
"<io.flutter.view.c$l: java.lang.String d0(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String d0(io.flutter.view.c$l)>"
"<k.f: java.lang.String[] a()>","<k.f: java.lang.String[] a()>"
"<kotlinx.coroutines.internal.g: java.lang.Object h()>","<kotlinx.coroutines.internal.g: java.lang.Object h()>"
"<androidx.window.R$styleable: void <init>()>","<androidx.window.R$styleable: void <init>()>"
"<x.d$b: void <init>(android.view.KeyEvent,java.lang.Character)>","<x.d$b: void <init>(android.view.KeyEvent,java.lang.Character)>"
"<o0.c: void <init>()>","<o0.c: void <init>()>"
"<x0.a: void <init>()>","<x0.a: void <init>()>"
"<io.flutter.view.AccessibilityViewEmbedder$b: int j(long)>","<io.flutter.view.AccessibilityViewEmbedder$b: int j(long)>"
"<io.flutter.plugins.webviewflutter.q3$c: void removeJavascriptInterface(java.lang.String)>","<io.flutter.plugins.webviewflutter.q3$c: void removeJavascriptInterface(java.lang.String)>"
"<io.flutter.plugin.platform.c$a: void a()>","<io.flutter.plugin.platform.c$a: void a()>"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()>","<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()>"
"<androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)>","<androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)>"
"<io.flutter.embedding.android.k$b: void <init>(io.flutter.embedding.android.k,android.os.Handler)>","<io.flutter.embedding.android.k$b: void <init>(io.flutter.embedding.android.k,android.os.Handler)>"
"<io.flutter.plugin.editing.f$a: void h(double,double,double[])>","<io.flutter.plugin.editing.f$a: void h(double,double,double[])>"
"<io.flutter.embedding.android.FlutterSplashView$c: void <init>(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView$c: void <init>(io.flutter.embedding.android.FlutterSplashView)>"
"<io.flutter.plugin.editing.f$a: void j()>","<io.flutter.plugin.editing.f$a: void j()>"
"<u0.y0: u0.z1 c()>","<u0.y0: u0.z1 c()>"
"<o.d: io.flutter.embedding.engine.FlutterJNI b(o.d)>","<o.d: io.flutter.embedding.engine.FlutterJNI b(o.d)>"
"<io.flutter.embedding.android.i: void <init>(android.content.Context)>","<io.flutter.embedding.android.i: void <init>(android.content.Context)>"
"<u0.c1: u0.z0 a()>","<u0.c1: u0.z0 a()>"
"<io.flutter.plugin.editing.f: android.view.autofill.AutofillManager g(io.flutter.plugin.editing.f)>","<io.flutter.plugin.editing.f: android.view.autofill.AutofillManager g(io.flutter.plugin.editing.f)>"
"<x.k: x.k$g a(x.k)>","<x.k: x.k$g a(x.k)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion: void <clinit>()>","<androidx.window.layout.WindowMetricsCalculator$Companion: void <clinit>()>"
"<io.flutter.embedding.android.s$c$a: void <init>(io.flutter.embedding.android.s$c)>","<io.flutter.embedding.android.s$c$a: void <init>(io.flutter.embedding.android.s$c)>"
"<e0.e0: java.util.Set c(java.util.Set)>","<e0.e0: java.util.Set c(java.util.Set)>"
"<x.i$d: x.i$d valueOf(java.lang.String)>","<x.i$d: x.i$d valueOf(java.lang.String)>"
"<e0.q: java.lang.String k(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l)>","<e0.q: java.lang.String k(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l)>"
"<kotlin.coroutines.jvm.internal.e: java.lang.StackTraceElement getStackTraceElement()>","<kotlin.coroutines.jvm.internal.e: java.lang.StackTraceElement getStackTraceElement()>"
"<g0.c: void <init>(g0.g,g0.g$b)>","<g0.c: void <init>(g0.g,g0.g$b)>"
"<kotlinx.coroutines.internal.d: kotlinx.coroutines.internal.d a()>","<kotlinx.coroutines.internal.d: kotlinx.coroutines.internal.d a()>"
"<a.a: void <init>()>","<a.a: void <init>()>"
"<io.flutter.plugins.webviewflutter.q3: java.lang.String g(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: java.lang.String g(java.lang.Long)>"
"<io.flutter.plugins.webviewflutter.f2: y.g B()>","<io.flutter.plugins.webviewflutter.f2: y.g B()>"
"<kotlinx.coroutines.scheduling.g: void <init>()>","<kotlinx.coroutines.scheduling.g: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$e0: void c(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$e0: void c(java.lang.Long)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()>","<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()>"
"<kotlinx.coroutines.internal.x: u0.o1 x0()>","<kotlinx.coroutines.internal.x: u0.o1 x0()>"
"<io.flutter.plugins.webviewflutter.s2$b: void h(android.webkit.WebViewClient)>","<io.flutter.plugins.webviewflutter.s2$b: void h(android.webkit.WebViewClient)>"
"<io.flutter.embedding.android.k: boolean j()>","<io.flutter.embedding.android.k: boolean j()>"
"<u0.v1$a: java.lang.Object invoke(java.lang.Object)>","<u0.v1$a: java.lang.Object invoke(java.lang.Object)>"
"<u0.n0: u0.n0[] values()>","<u0.n0: u0.n0[] values()>"
"<a.b: java.util.Iterator iterator()>","<a.b: java.util.Iterator iterator()>"
"<io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()>","<io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()>"
"<io.flutter.embedding.android.s$d$a: void a(boolean)>","<io.flutter.embedding.android.s$d$a: void a(boolean)>"
"<io.flutter.plugin.platform.c$a: void e(int)>","<io.flutter.plugin.platform.c$a: void e(int)>"
"<g0.c: java.lang.String toString()>","<g0.c: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.k$j: void a(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$j: void a(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>"
"<io.flutter.embedding.android.h: void h(io.flutter.embedding.android.h)>","<io.flutter.embedding.android.h: void h(io.flutter.embedding.android.h)>"
"<kotlinx.coroutines.internal.q$a: void <init>()>","<kotlinx.coroutines.internal.q$a: void <init>()>"
"<x.a$a: void <init>(x.a)>","<x.a$a: void <init>(x.a)>"
"<y.d: java.lang.Object a(java.nio.ByteBuffer)>","<y.d: java.lang.Object a(java.nio.ByteBuffer)>"
"<io.flutter.view.c: boolean m(io.flutter.view.c)>","<io.flutter.view.c: boolean m(io.flutter.view.c)>"
"<w0.i$b: java.lang.Object c(java.lang.Object)>","<w0.i$b: java.lang.Object c(java.lang.Object)>"
"<y.g: java.lang.Object a(java.nio.ByteBuffer)>","<y.g: java.lang.Object a(java.nio.ByteBuffer)>"
"<io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)>","<io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)>"
"<io.flutter.embedding.engine.c$b: void <init>(o.d)>","<io.flutter.embedding.engine.c$b: void <init>(o.d)>"
"<io.flutter.plugins.webviewflutter.g2: android.view.View g(io.flutter.plugins.webviewflutter.g2)>","<io.flutter.plugins.webviewflutter.g2: android.view.View g(io.flutter.plugins.webviewflutter.g2)>"
"<androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)>","<androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)>"
"<io.flutter.embedding.engine.e: io.flutter.embedding.engine.e a(android.content.Intent)>","<io.flutter.embedding.engine.e: io.flutter.embedding.engine.e a(android.content.Intent)>"
"<o.d$a: java.lang.Object call()>","<o.d$a: java.lang.Object call()>"
"<kotlinx.coroutines.internal.i: java.lang.Throwable e(java.lang.Throwable)>","<kotlinx.coroutines.internal.i: java.lang.Throwable e(java.lang.Throwable)>"
"<io.flutter.plugins.webviewflutter.k$o$a: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$o$a: void a(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$k: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$k: void <clinit>()>"
"<kotlinx.coroutines.internal.q$a: long d(long,long)>","<kotlinx.coroutines.internal.q$a: long d(long,long)>"
"<w.a$c: w.a$c valueOf(java.lang.String)>","<w.a$c: w.a$c valueOf(java.lang.String)>"
"<kotlin.jvm.internal.a: void <clinit>()>","<kotlin.jvm.internal.a: void <clinit>()>"
"<kotlinx.coroutines.android.AndroidDispatcherFactory: u0.y1 createDispatcher(java.util.List)>","<kotlinx.coroutines.android.AndroidDispatcherFactory: u0.y1 createDispatcher(java.util.List)>"
"<io.flutter.view.AccessibilityViewEmbedder: void <init>(android.view.View,int)>","<io.flutter.view.AccessibilityViewEmbedder: void <init>(android.view.View,int)>"
"<io.flutter.embedding.android.e$c: void C(io.flutter.embedding.android.h)>","<io.flutter.embedding.android.e$c: void C(io.flutter.embedding.android.h)>"
"<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()>","<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()>"
"<io.flutter.view.c$a: void a(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>","<io.flutter.view.c$a: void a(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>"
"<x.i$e: void <init>(java.lang.String,int,java.lang.String)>","<x.i$e: void <init>(java.lang.String,int,java.lang.String)>"
"<g0.h: g0.g minusKey(g0.g$c)>","<g0.h: g0.g minusKey(g0.g$c)>"
"<io.flutter.plugins.webviewflutter.s2$b: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>","<io.flutter.plugins.webviewflutter.s2$b: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>"
"<e0.i: java.util.List b()>","<e0.i: java.util.List b()>"
"<l.a$b$a: void <init>(l.a$b)>","<l.a$b$a: void <init>(l.a$b)>"
"<g0.c: g0.g plus(g0.g)>","<g0.c: g0.g plus(g0.g)>"
"<io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$e detachState()>","<io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$e detachState()>"
"<b.a$a: void h(int)>","<b.a$a: void h(int)>"
"<g0.a: g0.g plus(g0.g)>","<g0.a: g0.g plus(g0.g)>"
"<io.flutter.plugins.webviewflutter.q3$c: void addJavascriptInterface(java.lang.Object,java.lang.String)>","<io.flutter.plugins.webviewflutter.q3$c: void addJavascriptInterface(java.lang.Object,java.lang.String)>"
"<io.flutter.view.c$h: java.lang.String f(io.flutter.view.c$h,java.lang.String)>","<io.flutter.view.c$h: java.lang.String f(io.flutter.view.c$h,java.lang.String)>"
"<io.flutter.embedding.android.h$a: void surfaceCreated(android.view.SurfaceHolder)>","<io.flutter.embedding.android.h$a: void surfaceCreated(android.view.SurfaceHolder)>"
"<io.flutter.embedding.android.g$b: void <clinit>()>","<io.flutter.embedding.android.g$b: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$u: void k(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void k(java.lang.Long,java.lang.Boolean)>"
"<io.flutter.plugins.webviewflutter.y2$b: void g(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void g(java.lang.Void)>"
"<k.n: android.webkit.WebResourceError d(java.lang.reflect.InvocationHandler)>","<k.n: android.webkit.WebResourceError d(java.lang.reflect.InvocationHandler)>"
"<kotlin.jvm.internal.i: java.lang.String g(java.lang.String)>","<kotlin.jvm.internal.i: java.lang.String g(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$c: void <init>()>","<io.flutter.plugins.webviewflutter.k$c: void <init>()>"
"<androidx.lifecycle.c$b: boolean a(androidx.lifecycle.c$b)>","<androidx.lifecycle.c$b: boolean a(androidx.lifecycle.c$b)>"
"<io.flutter.plugin.editing.c$a: void <init>(io.flutter.plugin.editing.c,android.view.View,boolean,android.text.Editable)>","<io.flutter.plugin.editing.c$a: void <init>(io.flutter.plugin.editing.c,android.view.View,boolean,android.text.Editable)>"
"<t0.n$b: java.lang.String a(q0.c)>","<t0.n$b: java.lang.String a(q0.c)>"
"<k.a: java.util.Set e()>","<k.a: java.util.Set e()>"
"<io.flutter.plugins.webviewflutter.k$e: void <init>()>","<io.flutter.plugins.webviewflutter.k$e: void <init>()>"
"<io.flutter.plugins.webviewflutter.r0: void g(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void g(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.internal.d: void <clinit>()>","<kotlinx.coroutines.internal.d: void <clinit>()>"
"<io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: void <init>(androidx.lifecycle.c)>","<io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: void <init>(androidx.lifecycle.c)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)>","<androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)>"
"<androidx.versionedparcelable.b: android.os.Parcelable q()>","<androidx.versionedparcelable.b: android.os.Parcelable q()>"
"<u0.a1$a: int h(long,u0.a1$b,u0.a1)>","<u0.a1$a: int h(long,u0.a1$b,u0.a1)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)>"
"<u0.e0: u0.h2 d(kotlin.coroutines.jvm.internal.e)>","<u0.e0: u0.h2 d(kotlin.coroutines.jvm.internal.e)>"
"<io.flutter.embedding.android.e: android.view.View r(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle,int,boolean)>","<io.flutter.embedding.android.e: android.view.View r(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle,int,boolean)>"
"<u0.h1: u0.f0 a(java.util.concurrent.Executor)>","<u0.h1: u0.f0 a(java.util.concurrent.Executor)>"
"<io.flutter.view.c$o: io.flutter.view.c$o valueOf(java.lang.String)>","<io.flutter.view.c$o: io.flutter.view.c$o valueOf(java.lang.String)>"
"<io.flutter.plugin.editing.e: void <init>(java.lang.CharSequence,int,int,int,int)>","<io.flutter.plugin.editing.e: void <init>(java.lang.CharSequence,int,int,int,int)>"
"<x.i$d: x.i$d[] values()>","<x.i$d: x.i$d[] values()>"
"<io.flutter.embedding.android.r$a: void <clinit>()>","<io.flutter.embedding.android.r$a: void <clinit>()>"
"<kotlin.coroutines.jvm.internal.a: void <init>(g0.d)>","<kotlin.coroutines.jvm.internal.a: void <init>(g0.d)>"
"<e0.g: java.util.Set t(java.lang.Iterable)>","<e0.g: java.util.Set t(java.lang.Iterable)>"
"<io.flutter.view.c$p: io.flutter.view.c$p valueOf(java.lang.String)>","<io.flutter.view.c$p: io.flutter.view.c$p valueOf(java.lang.String)>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)>"
"<androidx.versionedparcelable.a: android.os.Parcelable r(android.os.Parcelable,int)>","<androidx.versionedparcelable.a: android.os.Parcelable r(android.os.Parcelable,int)>"
"<io.flutter.plugin.editing.f$b: void a(double,double)>","<io.flutter.plugin.editing.f$b: void a(double,double)>"
"<w0.a$c: java.lang.Object invoke(java.lang.Object)>","<w0.a$c: java.lang.Object invoke(java.lang.Object)>"
"<a.b$e: boolean hasNext()>","<a.b$e: boolean hasNext()>"
"<e0.t: java.util.Set entrySet()>","<e0.t: java.util.Set entrySet()>"
"<androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()>","<androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()>"
"<kotlinx.coroutines.internal.b0: void <clinit>()>","<kotlinx.coroutines.internal.b0: void <clinit>()>"
"<y0.c: void <init>(x0.c,g0.g)>","<y0.c: void <init>(x0.c,g0.g)>"
"<g0.b: void <init>(g0.g$c,n0.l)>","<g0.b: void <init>(g0.g$c,n0.l)>"
"<u0.v1$b: void k(boolean)>","<u0.v1$b: void k(boolean)>"
"<o.d$b: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<o.d$b: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<io.flutter.embedding.android.k$g: void <clinit>()>","<io.flutter.embedding.android.k$g: void <clinit>()>"
"<b.c$c: boolean addAll(java.util.Collection)>","<b.c$c: boolean addAll(java.util.Collection)>"
"<kotlinx.coroutines.android.AndroidExceptionPreHandler: void <init>()>","<kotlinx.coroutines.android.AndroidExceptionPreHandler: void <init>()>"
"<io.flutter.embedding.android.g$b: void <init>(java.lang.String,int)>","<io.flutter.embedding.android.g$b: void <init>(java.lang.String,int)>"
"<x.m$a: x.m$a e(float)>","<x.m$a: x.m$a e(float)>"
"<androidx.webkit.WebViewClientCompat: java.lang.String[] getSupportedFeatures()>","<androidx.webkit.WebViewClientCompat: java.lang.String[] getSupportedFeatures()>"
"<kotlin.coroutines.jvm.internal.k: java.lang.String toString()>","<kotlin.coroutines.jvm.internal.k: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.k$e0: void <init>()>","<io.flutter.plugins.webviewflutter.k$e0: void <init>()>"
"<io.flutter.embedding.engine.a: java.util.Set a(io.flutter.embedding.engine.a)>","<io.flutter.embedding.engine.a: java.util.Set a(io.flutter.embedding.engine.a)>"
"<x.n$a: void a(y.h,y.i$d)>","<x.n$a: void a(y.h,y.i$d)>"
"<a0.a$c: void setPointerIcon(android.view.PointerIcon)>","<a0.a$c: void setPointerIcon(android.view.PointerIcon)>"
"<androidx.window.layout.SidecarCompat$FirstAttachAdapter: void <init>(androidx.window.layout.SidecarCompat,android.app.Activity)>","<androidx.window.layout.SidecarCompat$FirstAttachAdapter: void <init>(androidx.window.layout.SidecarCompat,android.app.Activity)>"
"<x.k$g: void e(int,double,double)>","<x.k$g: void e(int,double,double)>"
"<u0.y1: void <init>()>","<u0.y1: void <init>()>"
"<x.i$f: x.i$f a(java.lang.String)>","<x.i$f: x.i$f a(java.lang.String)>"
"<kotlinx.coroutines.scheduling.a$c: void c(kotlinx.coroutines.scheduling.i)>","<kotlinx.coroutines.scheduling.a$c: void c(kotlinx.coroutines.scheduling.i)>"
"<x.k$d$a: x.k$d$a[] values()>","<x.k$d$a: x.k$d$a[] values()>"
"<androidx.window.embedding.EmbeddingCompat$Companion: void <init>()>","<androidx.window.embedding.EmbeddingCompat$Companion: void <init>()>"
"<w0.i: void <clinit>()>","<w0.i: void <clinit>()>"
"<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o q()>","<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o q()>"
"<io.flutter.embedding.android.g: android.view.Surface getSurface()>","<io.flutter.embedding.android.g: android.view.Surface getSurface()>"
"<io.flutter.embedding.android.k: boolean onHoverEvent(android.view.MotionEvent)>","<io.flutter.embedding.android.k: boolean onHoverEvent(android.view.MotionEvent)>"
"<t0.d: java.lang.Long h(java.lang.String)>","<t0.d: java.lang.Long h(java.lang.String)>"
"<w0.c: void g(w0.j)>","<w0.c: void g(w0.j)>"
"<x.a: void <init>(m.a,io.flutter.embedding.engine.FlutterJNI)>","<x.a: void <init>(m.a,io.flutter.embedding.engine.FlutterJNI)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)>"
"<t0.n: java.lang.String Y(java.lang.String,char,java.lang.String,int,java.lang.Object)>","<t0.n: java.lang.String Y(java.lang.String,char,java.lang.String,int,java.lang.Object)>"
"<m.a$c: void a(java.lang.String,java.nio.ByteBuffer,y.b$b)>","<m.a$c: void a(java.lang.String,java.nio.ByteBuffer,y.b$b)>"
"<androidx.window.layout.SidecarCompat: void <clinit>()>","<androidx.window.layout.SidecarCompat: void <clinit>()>"
"<c0.b: java.lang.String a(android.content.Context)>","<c0.b: java.lang.String a(android.content.Context)>"
"<u0.v1: java.lang.Object H(u0.v1$b,java.lang.Object)>","<u0.v1: java.lang.Object H(u0.v1$b,java.lang.Object)>"
"<u0.a1: boolean D(u0.a1)>","<u0.a1: boolean D(u0.a1)>"
"<m.a$d: void a(java.lang.String)>","<m.a$d: void a(java.lang.String)>"
"<r0.b: java.lang.Object callBy(java.util.Map)>","<r0.b: java.lang.Object callBy(java.util.Map)>"
"<b0.a$a$a: void run()>","<b0.a$a$a: void run()>"
"<io.flutter.plugins.webviewflutter.k$c0: java.lang.Long f(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: java.lang.Long f(java.lang.Long)>"
"<io.flutter.embedding.engine.FlutterJNI$a: void a(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>","<io.flutter.embedding.engine.FlutterJNI$a: void a(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>"
"<kotlinx.coroutines.internal.h: void <clinit>()>","<kotlinx.coroutines.internal.h: void <clinit>()>"
"<g0.g$b$a: g0.g$b b(g0.g$b,g0.g$c)>","<g0.g$b$a: g0.g$b b(g0.g$b,g0.g$c)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long c(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityNodeInfo)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long c(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityNodeInfo)>"
"<t0.n: java.lang.String T(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>","<t0.n: java.lang.String T(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>"
"<kotlin.coroutines.jvm.internal.k: void <init>(int)>","<kotlin.coroutines.jvm.internal.k: void <init>(int)>"
"<io.flutter.plugins.webviewflutter.g2$a: void run()>","<io.flutter.plugins.webviewflutter.g2$a: void run()>"
"<io.flutter.plugins.webviewflutter.f2: void d(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void d(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.k$t: void c(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$t: void c(java.lang.Boolean)>"
"<x.i$e: void <clinit>()>","<x.i$e: void <clinit>()>"
"<u0.v1: java.lang.Object fold(java.lang.Object,n0.p)>","<u0.v1: java.lang.Object fold(java.lang.Object,n0.p)>"
"<a0.a: android.view.PointerIcon d(java.lang.String)>","<a0.a: android.view.PointerIcon d(java.lang.String)>"
"<android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.a)>","<android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.a)>"
"<y0.d$a: java.lang.Object b(x0.c,java.lang.Object,g0.d)>","<y0.d$a: java.lang.Object b(x0.c,java.lang.Object,g0.d)>"
"<io.flutter.plugins.webviewflutter.x2: io.flutter.plugins.webviewflutter.k$s w(android.webkit.WebResourceError)>","<io.flutter.plugins.webviewflutter.x2: io.flutter.plugins.webviewflutter.k$s w(android.webkit.WebResourceError)>"
"<kotlinx.coroutines.internal.o: void i(kotlinx.coroutines.internal.o,kotlinx.coroutines.internal.o)>","<kotlinx.coroutines.internal.o: void i(kotlinx.coroutines.internal.o,kotlinx.coroutines.internal.o)>"
"<y.d: void <init>()>","<y.d: void <init>()>"
"<io.flutter.embedding.android.m: void <init>(x.d)>","<io.flutter.embedding.android.m: void <init>(x.d)>"
"<io.flutter.embedding.android.u$a: long a(io.flutter.embedding.android.u$a)>","<io.flutter.embedding.android.u$a: long a(io.flutter.embedding.android.u$a)>"
"<io.flutter.embedding.android.c: java.lang.Object c()>","<io.flutter.embedding.android.c: java.lang.Object c()>"
"<o.a: java.lang.String d(android.os.Bundle,java.lang.String)>","<o.a: java.lang.String d(android.os.Bundle,java.lang.String)>"
"<io.flutter.embedding.engine.c$c: void <init>(android.app.Activity,androidx.lifecycle.c)>","<io.flutter.embedding.engine.c$c: void <init>(android.app.Activity,androidx.lifecycle.c)>"
"<io.flutter.view.c$l: int e(io.flutter.view.c$l)>","<io.flutter.view.c$l: int e(io.flutter.view.c$l)>"
"<androidx.window.embedding.SplitPlaceholderRule: void <init>(java.util.Set,android.content.Intent,int,int,float,int)>","<androidx.window.embedding.SplitPlaceholderRule: void <init>(java.util.Set,android.content.Intent,int,int,float,int)>"
"<b.d: java.lang.Object put(java.lang.Object,java.lang.Object)>","<b.d: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<u0.t0: java.lang.Object e(java.lang.Object)>","<u0.t0: java.lang.Object e(java.lang.Object)>"
"<kotlinx.coroutines.internal.l: java.lang.Object a(java.lang.Object)>","<kotlinx.coroutines.internal.l: java.lang.Object a(java.lang.Object)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()>","<androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()>"
"<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i s(boolean)>","<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i s(boolean)>"
"<androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)>","<androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)>"
"<kotlinx.coroutines.internal.d: java.lang.Object c(java.lang.Object)>","<kotlinx.coroutines.internal.d: java.lang.Object c(java.lang.Object)>"
"<o0.c: void <clinit>()>","<o0.c: void <clinit>()>"
"<kotlinx.coroutines.scheduling.c: void <init>(int,int,java.lang.String)>","<kotlinx.coroutines.scheduling.c: void <init>(int,int,java.lang.String)>"
"<io.flutter.embedding.android.u$a: io.flutter.embedding.android.u$a c(long)>","<io.flutter.embedding.android.u$a: io.flutter.embedding.android.u$a c(long)>"
"<kotlinx.coroutines.internal.d0$c: kotlinx.coroutines.internal.g0 a(kotlinx.coroutines.internal.g0,g0.g$b)>","<kotlinx.coroutines.internal.d0$c: kotlinx.coroutines.internal.g0 a(kotlinx.coroutines.internal.g0,g0.g$b)>"
"<androidx.window.embedding.ActivityFilter: java.lang.String toString()>","<androidx.window.embedding.ActivityFilter: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a c(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a c(java.lang.Boolean)>"
"<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)>","<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)>"
"<h0.a: void <init>(java.lang.String,int)>","<h0.a: void <init>(java.lang.String,int)>"
"<t0.c$a: java.lang.Object next()>","<t0.c$a: java.lang.Object next()>"
"<kotlinx.coroutines.internal.d0$b: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.d0$b: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<io.flutter.view.c$o: void <init>(java.lang.String,int)>","<io.flutter.view.c$o: void <init>(java.lang.String,int)>"
"<io.flutter.embedding.engine.b: io.flutter.embedding.engine.b b()>","<io.flutter.embedding.engine.b: io.flutter.embedding.engine.b b()>"
"<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i a(kotlinx.coroutines.scheduling.i,boolean)>","<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i a(kotlinx.coroutines.scheduling.i,boolean)>"
"<io.flutter.embedding.android.e$c: io.flutter.embedding.android.y r()>","<io.flutter.embedding.android.e$c: io.flutter.embedding.android.y r()>"
"<q0.a: e0.v d()>","<q0.a: e0.v d()>"
"<kotlinx.coroutines.scheduling.a$c: void b(int)>","<kotlinx.coroutines.scheduling.a$c: void b(int)>"
"<io.flutter.plugins.webviewflutter.k$j$a: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$j$a: void a(java.lang.Object)>"
"<t0.l: java.lang.Integer g(java.lang.String,int)>","<t0.l: java.lang.Integer g(java.lang.String,int)>"
"<io.flutter.embedding.android.g: android.media.ImageReader getImageReader()>","<io.flutter.embedding.android.g: android.media.ImageReader getImageReader()>"
"<io.flutter.plugins.webviewflutter.q3$a: void setWebChromeClient(android.webkit.WebChromeClient)>","<io.flutter.plugins.webviewflutter.q3$a: void setWebChromeClient(android.webkit.WebChromeClient)>"
"<androidx.window.layout.SidecarCompat$DistinctElementCallback: void <init>(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)>","<androidx.window.layout.SidecarCompat$DistinctElementCallback: void <init>(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)>"
"<io.flutter.embedding.engine.FlutterJNI$b: void a(long)>","<io.flutter.embedding.engine.FlutterJNI$b: void a(long)>"
"<io.flutter.embedding.android.f: io.flutter.embedding.android.f[] values()>","<io.flutter.embedding.android.f: io.flutter.embedding.android.f[] values()>"
"<io.flutter.embedding.android.k$a: void <init>(io.flutter.embedding.android.k)>","<io.flutter.embedding.android.k$a: void <init>(io.flutter.embedding.android.k)>"
"<io.flutter.plugins.webviewflutter.k: java.util.Map a(java.lang.Throwable)>","<io.flutter.plugins.webviewflutter.k: java.util.Map a(java.lang.Throwable)>"
"<u0.v1: u0.q O()>","<u0.v1: u0.q O()>"
"<s0.i: java.util.Iterator iterator()>","<s0.i: java.util.Iterator iterator()>"
"<io.flutter.view.c$l: float z0(float,float,float,float)>","<io.flutter.view.c$l: float z0(float,float,float,float)>"
"<x.p$d: void <init>(java.lang.String,int,java.lang.String)>","<x.p$d: void <init>(java.lang.String,int,java.lang.String)>"
"<io.flutter.view.c$l: java.util.List W(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.util.List W(io.flutter.view.c$l)>"
"<kotlinx.coroutines.internal.g: u0.l k()>","<kotlinx.coroutines.internal.g: u0.l k()>"
"<kotlin.coroutines.jvm.internal.g: kotlin.coroutines.jvm.internal.f b(kotlin.coroutines.jvm.internal.a)>","<kotlin.coroutines.jvm.internal.g: kotlin.coroutines.jvm.internal.f b(kotlin.coroutines.jvm.internal.a)>"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getWebViewRenderer()>","<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getWebViewRenderer()>"
"<kotlinx.coroutines.internal.w: void <init>(kotlinx.coroutines.internal.o)>","<kotlinx.coroutines.internal.w: void <init>(kotlinx.coroutines.internal.o)>"
"<kotlinx.coroutines.internal.r: u0.y1 a()>","<kotlinx.coroutines.internal.r: u0.y1 a()>"
"<w0.f: void <clinit>()>","<w0.f: void <clinit>()>"
"<io.flutter.embedding.android.k: void n(io.flutter.embedding.engine.a)>","<io.flutter.embedding.android.k: void n(io.flutter.embedding.engine.a)>"
"<kotlinx.coroutines.internal.g: java.lang.StackTraceElement getStackTraceElement()>","<kotlinx.coroutines.internal.g: java.lang.StackTraceElement getStackTraceElement()>"
"<io.flutter.plugin.platform.j$b: void <init>(io.flutter.plugin.platform.j)>","<io.flutter.plugin.platform.j$b: void <init>(io.flutter.plugin.platform.j)>"
"<kotlinx.coroutines.internal.l: java.lang.Object b(java.lang.Object,int,kotlin.jvm.internal.e)>","<kotlinx.coroutines.internal.l: java.lang.Object b(java.lang.Object,int,kotlin.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.k$j: void c(java.lang.Long,io.flutter.plugins.webviewflutter.k$j$a)>","<io.flutter.plugins.webviewflutter.k$j: void c(java.lang.Long,io.flutter.plugins.webviewflutter.k$j$a)>"
"<q0.a$a: void <init>()>","<q0.a$a: void <init>()>"
"<io.flutter.plugin.platform.q$a: void g(x.k$f)>","<io.flutter.plugin.platform.q$a: void g(x.k$f)>"
"<b.a$a: void g(java.lang.Object,java.lang.Object)>","<b.a$a: void g(java.lang.Object,java.lang.Object)>"
"<io.flutter.embedding.android.d: io.flutter.embedding.android.x z()>","<io.flutter.embedding.android.d: io.flutter.embedding.android.x z()>"
"<io.flutter.view.c$l: void <init>(io.flutter.view.c)>","<io.flutter.view.c$l: void <init>(io.flutter.view.c)>"
"<u0.r: void <init>(u0.s)>","<u0.r: void <init>(u0.s)>"
"<io.flutter.plugins.webviewflutter.k$c0: void w(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void w(java.lang.Long,java.lang.Long)>"
"<io.flutter.embedding.engine.c$c: void g()>","<io.flutter.embedding.engine.c$c: void g()>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)>","<androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)>"
"<x.k: void <init>(m.a)>","<x.k: void <init>(m.a)>"
"<androidx.window.layout.WindowInfoTracker: void <clinit>()>","<androidx.window.layout.WindowInfoTracker: void <clinit>()>"
"<a.b$e: void <init>(a.b$c,a.b$c)>","<a.b$e: void <init>(a.b$c,a.b$c)>"
"<y.o: void <init>()>","<y.o: void <init>()>"
"<u0.v1: java.lang.Throwable G(java.lang.Object)>","<u0.v1: java.lang.Throwable G(java.lang.Object)>"
"<e0.q: java.lang.Object n(java.lang.Iterable)>","<e0.q: java.lang.Object n(java.lang.Iterable)>"
"<k.a$h: boolean c()>","<k.a$h: boolean c()>"
"<y.o$a: byte[] a()>","<y.o$a: byte[] a()>"
"<q0.d: int c(int,int)>","<q0.d: int c(int,int)>"
"<s0.f: s0.b a(java.util.Iterator)>","<s0.f: s0.b a(java.util.Iterator)>"
"<io.flutter.embedding.android.k: void onDetachedFromWindow()>","<io.flutter.embedding.android.k: void onDetachedFromWindow()>"
"<u0.v1: java.lang.Object W(java.lang.Object)>","<u0.v1: java.lang.Object W(java.lang.Object)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void <init>(android.app.Activity,java.util.concurrent.Executor,e.a)>","<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void <init>(android.app.Activity,java.util.concurrent.Executor,e.a)>"
"<w0.a: w0.g iterator()>","<w0.a: w0.g iterator()>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$b: void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$b: void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<androidx.window.embedding.EmbeddingAdapter: boolean a(java.util.Set,android.app.Activity)>","<androidx.window.embedding.EmbeddingAdapter: boolean a(java.util.Set,android.app.Activity)>"
"<io.flutter.plugins.webviewflutter.f2: void e(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void e(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<u0.v1: g0.g$b get(g0.g$c)>","<u0.v1: g0.g$b get(g0.g$c)>"
"<g0.h: java.lang.Object fold(java.lang.Object,n0.p)>","<g0.h: java.lang.Object fold(java.lang.Object,n0.p)>"
"<t0.n: java.lang.String S(java.lang.String,char,java.lang.String,int,java.lang.Object)>","<t0.n: java.lang.String S(java.lang.String,char,java.lang.String,int,java.lang.Object)>"
"<b.a: void <init>()>","<b.a: void <init>()>"
"<x.i$i: x.i$i a(java.lang.String)>","<x.i$i: x.i$i a(java.lang.String)>"
"<io.flutter.embedding.android.k: int t(android.view.WindowInsets)>","<io.flutter.embedding.android.k: int t(android.view.WindowInsets)>"
"<io.flutter.plugins.webviewflutter.y2$b: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>","<io.flutter.plugins.webviewflutter.y2$b: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>"
"<m.c$a: void <init>(java.nio.ByteBuffer,int,long)>","<m.c$a: void <init>(java.nio.ByteBuffer,int,long)>"
"<android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.a)>","<android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.a)>"
"<io.flutter.plugin.platform.SingleViewPresentation: void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.f,io.flutter.plugin.platform.a,int,android.view.View$OnFocusChangeListener)>","<io.flutter.plugin.platform.SingleViewPresentation: void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.f,io.flutter.plugin.platform.a,int,android.view.View$OnFocusChangeListener)>"
"<kotlinx.coroutines.internal.o: void <clinit>()>","<kotlinx.coroutines.internal.o: void <clinit>()>"
"<io.flutter.view.c$l: io.flutter.view.c$l t(io.flutter.view.c$l)>","<io.flutter.view.c$l: io.flutter.view.c$l t(io.flutter.view.c$l)>"
"<androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()>","<androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()>"
"<k.a$f: void <init>(java.lang.String,java.lang.String)>","<k.a$f: void <init>(java.lang.String,java.lang.String)>"
"<u0.a1$b: void <init>(long)>","<u0.a1$b: void <init>(long)>"
"<kotlinx.coroutines.internal.i$f: void <init>()>","<kotlinx.coroutines.internal.i$f: void <init>()>"
"<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: void <init>()>","<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: void <init>()>"
"<io.flutter.plugin.platform.c$a: void d(x.i$i)>","<io.flutter.plugin.platform.c$a: void d(x.i$i)>"
"<io.flutter.embedding.android.b: void <init>(android.graphics.drawable.Drawable)>","<io.flutter.embedding.android.b: void <init>(android.graphics.drawable.Drawable)>"
"<io.flutter.embedding.android.k: void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.h)>","<io.flutter.embedding.android.k: void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.h)>"
"<io.flutter.plugins.webviewflutter.c: java.util.ArrayList c(android.hardware.display.DisplayManager)>","<io.flutter.plugins.webviewflutter.c: java.util.ArrayList c(android.hardware.display.DisplayManager)>"
"<io.flutter.plugins.webviewflutter.y2$b: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>","<io.flutter.plugins.webviewflutter.y2$b: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>"
"<io.flutter.plugins.webviewflutter.y2$b: void onPageFinished(android.webkit.WebView,java.lang.String)>","<io.flutter.plugins.webviewflutter.y2$b: void onPageFinished(android.webkit.WebView,java.lang.String)>"
"<q0.b: void <init>(int,int,int)>","<q0.b: void <init>(int,int,int)>"
"<b.d: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<b.d: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.b: void <init>()>","<io.flutter.plugins.webviewflutter.b: void <init>()>"
"<io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)>","<io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)>"
"<k.n: void <init>(org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface)>","<k.n: void <init>(org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface)>"
"<e0.a: java.util.List j(java.lang.Object[],java.util.Comparator)>","<e0.a: java.util.List j(java.lang.Object[],java.util.Comparator)>"
"<kotlinx.coroutines.internal.s: kotlinx.coroutines.internal.t a(java.lang.Throwable,java.lang.String)>","<kotlinx.coroutines.internal.s: kotlinx.coroutines.internal.t a(java.lang.Throwable,java.lang.String)>"
"<io.flutter.embedding.android.g$a: void <clinit>()>","<io.flutter.embedding.android.g$a: void <clinit>()>"
"<androidx.window.embedding.SplitPairFilter: java.lang.String toString()>","<androidx.window.embedding.SplitPairFilter: java.lang.String toString()>"
"<u0.j2: void <init>()>","<u0.j2: void <init>()>"
"<u0.f2: void <clinit>()>","<u0.f2: void <clinit>()>"
"<io.flutter.view.AccessibilityViewEmbedder$c: void <init>(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$a)>","<io.flutter.view.AccessibilityViewEmbedder$c: void <init>(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$a)>"
"<io.flutter.plugins.webviewflutter.w2$a: android.webkit.WebStorage a()>","<io.flutter.plugins.webviewflutter.w2$a: android.webkit.WebStorage a()>"
"<w.a$a: void f()>","<w.a$a: void f()>"
"<t0.c$a: void remove()>","<t0.c$a: void remove()>"
"<io.flutter.plugin.platform.q: io.flutter.plugin.editing.f q(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: io.flutter.plugin.editing.f q(io.flutter.plugin.platform.q)>"
"<g0.g: g0.g$b get(g0.g$c)>","<g0.g: g0.g$b get(g0.g$c)>"
"<io.flutter.view.c: android.graphics.Rect y(android.graphics.Rect)>","<io.flutter.view.c: android.graphics.Rect y(android.graphics.Rect)>"
"<k.n: android.webkit.SafeBrowsingResponse a(java.lang.reflect.InvocationHandler)>","<k.n: android.webkit.SafeBrowsingResponse a(java.lang.reflect.InvocationHandler)>"
"<q0.d: long b(long,long)>","<q0.d: long b(long,long)>"
"<d0.j: java.lang.Object a()>","<d0.j: java.lang.Object a()>"
"<io.flutter.embedding.android.a: void <init>(w.a,boolean)>","<io.flutter.embedding.android.a: void <init>(w.a,boolean)>"
"<z.a: android.content.Context a(z.a)>","<z.a: android.content.Context a(z.a)>"
"<kotlin.coroutines.jvm.internal.e: kotlin.coroutines.jvm.internal.e getCallerFrame()>","<kotlin.coroutines.jvm.internal.e: kotlin.coroutines.jvm.internal.e getCallerFrame()>"
"<io.flutter.plugin.platform.a: void <init>()>","<io.flutter.plugin.platform.a: void <init>()>"
"<kotlin.jvm.internal.c$a: void <init>(kotlin.jvm.internal.e)>","<kotlin.jvm.internal.c$a: void <init>(kotlin.jvm.internal.e)>"
"<u0.j0$a: void <init>()>","<u0.j0$a: void <init>()>"
"<kotlinx.coroutines.scheduling.a$c: void h(int)>","<kotlinx.coroutines.scheduling.a$c: void h(int)>"
"<io.flutter.plugin.platform.SingleViewPresentation: void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.a,io.flutter.plugin.platform.SingleViewPresentation$e,android.view.View$OnFocusChangeListener,boolean)>","<io.flutter.plugin.platform.SingleViewPresentation: void <init>(android.content.Context,android.view.Display,io.flutter.plugin.platform.a,io.flutter.plugin.platform.SingleViewPresentation$e,android.view.View$OnFocusChangeListener,boolean)>"
"<io.flutter.plugins.webviewflutter.f2: void A(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void A(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.e$b: void a()>","<io.flutter.plugins.webviewflutter.e$b: void a()>"
"<io.flutter.plugins.webviewflutter.f2$a: void <init>(java.util.Map,y.a$e)>","<io.flutter.plugins.webviewflutter.f2$a: void <init>(java.util.Map,y.a$e)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<io.flutter.view.c$l: java.lang.String r(io.flutter.view.c$l,java.lang.String)>","<io.flutter.view.c$l: java.lang.String r(io.flutter.view.c$l,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.y2$d: void i(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void i(java.lang.Void)>"
"<androidx.window.layout.SidecarCompat: void <init>(android.content.Context)>","<androidx.window.layout.SidecarCompat: void <init>(android.content.Context)>"
"<w0.a$a: java.lang.Object d(g0.d)>","<w0.a$a: java.lang.Object d(g0.d)>"
"<io.flutter.plugins.webviewflutter.k$y: void m(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void m(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<io.flutter.embedding.android.u$a: io.flutter.embedding.android.u$a b()>","<io.flutter.embedding.android.u$a: io.flutter.embedding.android.u$a b()>"
"<a.b: void <init>()>","<a.b: void <init>()>"
"<i0.a$a: void <clinit>()>","<i0.a$a: void <clinit>()>"
"<io.flutter.plugin.platform.SingleViewPresentation$d: android.view.WindowManager a()>","<io.flutter.plugin.platform.SingleViewPresentation$d: android.view.WindowManager a()>"
"<u0.r0: void <clinit>()>","<u0.r0: void <clinit>()>"
"<u0.n0: u0.n0 valueOf(java.lang.String)>","<u0.n0: u0.n0 valueOf(java.lang.String)>"
"<g0.g$b$a: g0.g c(g0.g$b,g0.g$c)>","<g0.g$b$a: g0.g c(g0.g$b,g0.g$c)>"
"<y.q: java.nio.ByteBuffer d(java.lang.String)>","<y.q: java.nio.ByteBuffer d(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$h: java.lang.String a(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$h: java.lang.String a(java.lang.String)>"
"<androidx.lifecycle.g: androidx.lifecycle.c$b i(androidx.lifecycle.c$b,androidx.lifecycle.c$b)>","<androidx.lifecycle.g: androidx.lifecycle.c$b i(androidx.lifecycle.c$b,androidx.lifecycle.c$b)>"
"<x.d: void <init>(y.b)>","<x.d: void <init>(y.b)>"
"<w0.c: java.lang.String c()>","<w0.c: java.lang.String c()>"
"<io.flutter.plugins.webviewflutter.k$y: void v(java.lang.Long,java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void v(java.lang.Long,java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>"
"<io.flutter.plugins.webviewflutter.q3$a: void clearFocus()>","<io.flutter.plugins.webviewflutter.q3$a: void clearFocus()>"
"<u0.l: u0.x0 z()>","<u0.l: u0.x0 z()>"
"<androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)>","<androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)>"
"<androidx.lifecycle.i: void <init>()>","<androidx.lifecycle.i: void <init>()>"
"<io.flutter.embedding.android.h: boolean d(io.flutter.embedding.android.h,boolean)>","<io.flutter.embedding.android.h: boolean d(io.flutter.embedding.android.h,boolean)>"
"<l.b: void <clinit>()>","<l.b: void <clinit>()>"
"<io.flutter.embedding.android.s$e: y.b getBinaryMessenger()>","<io.flutter.embedding.android.s$e: y.b getBinaryMessenger()>"
"<u0.p0: void <clinit>()>","<u0.p0: void <clinit>()>"
"<androidx.window.layout.SidecarAdapter: void <clinit>()>","<androidx.window.layout.SidecarAdapter: void <clinit>()>"
"<y0.c: java.lang.StackTraceElement getStackTraceElement()>","<y0.c: java.lang.StackTraceElement getStackTraceElement()>"
"<x.p$b$a: x.p$b$a a(org.json.JSONObject)>","<x.p$b$a: x.p$b$a a(org.json.JSONObject)>"
"<e0.g: java.lang.Object n(java.lang.Iterable)>","<e0.g: java.lang.Object n(java.lang.Iterable)>"
"<io.flutter.plugin.editing.b$a: boolean a(android.view.KeyEvent)>","<io.flutter.plugin.editing.b$a: boolean a(android.view.KeyEvent)>"
"<b.a$a: int e(java.lang.Object)>","<b.a$a: int e(java.lang.Object)>"
"<x.k$a: void k(y.h,y.i$d)>","<x.k$a: void k(y.h,y.i$d)>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a e(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a e(java.lang.String)>"
"<b.c$e: boolean addAll(java.util.Collection)>","<b.c$e: boolean addAll(java.util.Collection)>"
"<y0.c: java.lang.Object c(g0.d,java.lang.Object)>","<y0.c: java.lang.Object c(g0.d,java.lang.Object)>"
"<u0.o1$a: g0.g$b c(u0.o1,g0.g$c)>","<u0.o1$a: g0.g$b c(u0.o1,g0.g$c)>"
"<f.a$a: void c(int)>","<f.a$a: void c(int)>"
"<kotlinx.coroutines.internal.d0$b: u0.e2 a(u0.e2,g0.g$b)>","<kotlinx.coroutines.internal.d0$b: u0.e2 a(u0.e2,g0.g$b)>"
"<io.flutter.view.c$h: int j(io.flutter.view.c$h,int)>","<io.flutter.view.c$h: int j(io.flutter.view.c$h,int)>"
"<io.flutter.embedding.android.r: io.flutter.embedding.android.n$a e(android.view.KeyEvent)>","<io.flutter.embedding.android.r: io.flutter.embedding.android.n$a e(android.view.KeyEvent)>"
"<a1.a: void <clinit>()>","<a1.a: void <clinit>()>"
"<x.n: x.n$b a(x.n)>","<x.n: x.n$b a(x.n)>"
"<androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()>","<androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()>"
"<io.flutter.plugins.webviewflutter.k$u: void f(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void f(java.lang.Long,java.lang.Boolean)>"
"<t0.n: s0.b J(java.lang.CharSequence,java.lang.String[],int,boolean,int)>","<t0.n: s0.b J(java.lang.CharSequence,java.lang.String[],int,boolean,int)>"
"<w.a$c: w.a$c[] values()>","<w.a$c: w.a$c[] values()>"
"<w0.a$a: void e(java.lang.Object)>","<w0.a$a: void e(java.lang.Object)>"
"<io.flutter.embedding.android.k: void l(w.b)>","<io.flutter.embedding.android.k: void l(w.b)>"
"<w.a$c: void <init>(java.lang.String,int,int)>","<w.a$c: void <init>(java.lang.String,int,int)>"
"<io.flutter.embedding.engine.c$b: java.lang.String a(java.lang.String)>","<io.flutter.embedding.engine.c$b: java.lang.String a(java.lang.String)>"
"<io.flutter.embedding.android.e$c: io.flutter.embedding.engine.e h()>","<io.flutter.embedding.android.e$c: io.flutter.embedding.engine.e h()>"
"<io.flutter.plugins.webviewflutter.q2: android.view.View getRootView()>","<io.flutter.plugins.webviewflutter.q2: android.view.View getRootView()>"
"<androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)>","<androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)>"
"<y.i$a$a: void <init>(y.i$a,y.b$b)>","<y.i$a$a: void <init>(y.i$a,y.b$b)>"
"<io.flutter.plugin.platform.r$b: void onDraw()>","<io.flutter.plugin.platform.r$b: void onDraw()>"
"<w0.a$b: kotlinx.coroutines.internal.z h(java.lang.Object,kotlinx.coroutines.internal.o$b)>","<w0.a$b: kotlinx.coroutines.internal.z h(java.lang.Object,kotlinx.coroutines.internal.o$b)>"
"<io.flutter.embedding.android.f: void <clinit>()>","<io.flutter.embedding.android.f: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$n: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$n: void a(java.lang.Object)>"
"<x0.b: java.lang.Object a(x0.c,g0.d)>","<x0.b: java.lang.Object a(x0.c,g0.d)>"
"<androidx.versionedparcelable.ParcelImpl$a: void <init>()>","<androidx.versionedparcelable.ParcelImpl$a: void <init>()>"
"<y.i$a: void a(java.nio.ByteBuffer,y.b$b)>","<y.i$a: void a(java.nio.ByteBuffer,y.b$b)>"
"<io.flutter.plugins.webviewflutter.r0: void l(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void l(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.q3$a: void setWebViewClient(android.webkit.WebViewClient)>","<io.flutter.plugins.webviewflutter.q3$a: void setWebViewClient(android.webkit.WebViewClient)>"
"<u0.w1: kotlinx.coroutines.internal.z e()>","<u0.w1: kotlinx.coroutines.internal.z e()>"
"<q0.c: void <init>(int,int)>","<q0.c: void <init>(int,int)>"
"<io.flutter.plugin.editing.e: void <init>(java.lang.CharSequence,int,int,java.lang.CharSequence,int,int,int,int)>","<io.flutter.plugin.editing.e: void <init>(java.lang.CharSequence,int,int,java.lang.CharSequence,int,int,int,int)>"
"<u0.x: u0.x b(u0.x,java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable,int,java.lang.Object)>","<u0.x: u0.x b(u0.x,java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable,int,java.lang.Object)>"
"<kotlinx.coroutines.internal.w: java.lang.String toString()>","<kotlinx.coroutines.internal.w: java.lang.String toString()>"
"<x.l: java.util.Map i(byte[])>","<x.l: java.util.Map i(byte[])>"
"<x.k$a: void f(y.i$d,x.k$c)>","<x.k$a: void f(y.i$d,x.k$c)>"
"<x.k$g: void i(x.k$d)>","<x.k$g: void i(x.k$d)>"
"<androidx.lifecycle.c$b: void <clinit>()>","<androidx.lifecycle.c$b: void <clinit>()>"
"<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i d(boolean)>","<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i d(boolean)>"
"<a.b$e: a.b$c e()>","<a.b$e: a.b$c e()>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()>","<androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()>"
"<u0.o1: u0.q p(u0.s)>","<u0.o1: u0.q p(u0.s)>"
"<io.flutter.plugins.webviewflutter.e$b: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>","<io.flutter.plugins.webviewflutter.e$b: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>"
"<io.flutter.plugins.webviewflutter.i2: io.flutter.plugins.webviewflutter.i2 i(io.flutter.plugins.webviewflutter.i2$a)>","<io.flutter.plugins.webviewflutter.i2: io.flutter.plugins.webviewflutter.i2 i(io.flutter.plugins.webviewflutter.i2$a)>"
"<io.flutter.embedding.android.k: void D()>","<io.flutter.embedding.android.k: void D()>"
"<io.flutter.embedding.engine.a: x.l c(io.flutter.embedding.engine.a)>","<io.flutter.embedding.engine.a: x.l c(io.flutter.embedding.engine.a)>"
"<androidx.window.layout.e: void <clinit>()>","<androidx.window.layout.e: void <clinit>()>"
"<u0.l: java.lang.String toString()>","<u0.l: java.lang.String toString()>"
"<kotlin.jvm.internal.a: java.lang.String getName()>","<kotlin.jvm.internal.a: java.lang.String getName()>"
"<b.a$a: java.lang.Object b(int,int)>","<b.a$a: java.lang.Object b(int,int)>"
"<androidx.core.app.CoreComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>","<androidx.core.app.CoreComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>"
"<androidx.versionedparcelable.a: java.lang.reflect.Method e(java.lang.Class)>","<androidx.versionedparcelable.a: java.lang.reflect.Method e(java.lang.Class)>"
"<e.b: java.lang.Object a(java.lang.Object)>","<e.b: java.lang.Object a(java.lang.Object)>"
"<io.flutter.plugin.platform.c$a: void c()>","<io.flutter.plugin.platform.c$a: void c()>"
"<io.flutter.embedding.android.b: void <init>(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,long)>","<io.flutter.embedding.android.b: void <init>(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,long)>"
"<x.i$f: void <clinit>()>","<x.i$f: void <clinit>()>"
"<w.a$f$b: void onFrameAvailable(android.graphics.SurfaceTexture)>","<w.a$f$b: void onFrameAvailable(android.graphics.SurfaceTexture)>"
"<io.flutter.plugins.webviewflutter.k$u: void a(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$u: void a(java.lang.Long)>"
"<io.flutter.embedding.engine.c$c: void c(android.content.Intent)>","<io.flutter.embedding.engine.c$c: void c(android.content.Intent)>"
"<kotlin.jvm.internal.d: java.lang.Object[] b(java.util.Collection,java.lang.Object[])>","<kotlin.jvm.internal.d: java.lang.Object[] b(java.util.Collection,java.lang.Object[])>"
"<io.flutter.view.c$l: float R(io.flutter.view.c$l)>","<io.flutter.view.c$l: float R(io.flutter.view.c$l)>"
"<io.flutter.plugin.platform.SingleViewPresentation$c: android.content.Context createDisplayContext(android.view.Display)>","<io.flutter.plugin.platform.SingleViewPresentation$c: android.content.Context createDisplayContext(android.view.Display)>"
"<kotlinx.coroutines.internal.d0$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.d0$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<a.b: java.util.Map$Entry e()>","<a.b: java.util.Map$Entry e()>"
"<k.a: void <init>(java.lang.String,java.lang.String)>","<k.a: void <init>(java.lang.String,java.lang.String)>"
"<y.e: y.h e(java.nio.ByteBuffer)>","<y.e: y.h e(java.nio.ByteBuffer)>"
"<io.flutter.view.c$n: void <init>(io.flutter.view.c$a)>","<io.flutter.view.c$n: void <init>(io.flutter.view.c$a)>"
"<io.flutter.embedding.android.FlutterSplashView: java.lang.String e(io.flutter.embedding.android.FlutterSplashView,java.lang.String)>","<io.flutter.embedding.android.FlutterSplashView: java.lang.String e(io.flutter.embedding.android.FlutterSplashView,java.lang.String)>"
"<androidx.window.layout.b: void <clinit>()>","<androidx.window.layout.b: void <clinit>()>"
"<io.flutter.embedding.android.k: io.flutter.embedding.android.k$g o()>","<io.flutter.embedding.android.k: io.flutter.embedding.android.k$g o()>"
"<w.a$f$a: void <init>(w.a$f)>","<w.a$f$a: void <init>(w.a$f)>"
"<kotlinx.coroutines.internal.p: void <init>(boolean)>","<kotlinx.coroutines.internal.p: void <init>(boolean)>"
"<g0.e$b: void <clinit>()>","<g0.e$b: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$c: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$c: void <clinit>()>"
"<androidx.window.layout.WindowInfoTrackerImpl: x0.b windowLayoutInfo(android.app.Activity)>","<androidx.window.layout.WindowInfoTrackerImpl: x0.b windowLayoutInfo(android.app.Activity)>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.String[] getSupportedFeatures()>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.String[] getSupportedFeatures()>"
"<s0.h: java.util.Collection d(s0.b,java.util.Collection)>","<s0.h: java.util.Collection d(s0.b,java.util.Collection)>"
"<io.flutter.view.c$l: io.flutter.view.c$l w0(float[],boolean)>","<io.flutter.view.c$l: io.flutter.view.c$l w0(float[],boolean)>"
"<w0.j: kotlinx.coroutines.internal.z A(kotlinx.coroutines.internal.o$b)>","<w0.j: kotlinx.coroutines.internal.z A(kotlinx.coroutines.internal.o$b)>"
"<io.flutter.plugins.webviewflutter.e$a: io.flutter.plugins.webviewflutter.e$b a(io.flutter.plugins.webviewflutter.d)>","<io.flutter.plugins.webviewflutter.e$a: io.flutter.plugins.webviewflutter.e$b a(io.flutter.plugins.webviewflutter.d)>"
"<u0.a2: java.lang.String toString()>","<u0.a2: java.lang.String toString()>"
"<io.flutter.view.c$c: void onChange(boolean,android.net.Uri)>","<io.flutter.view.c$c: void onChange(boolean,android.net.Uri)>"
"<o.d: void <init>(io.flutter.embedding.engine.FlutterJNI,java.util.concurrent.ExecutorService)>","<o.d: void <init>(io.flutter.embedding.engine.FlutterJNI,java.util.concurrent.ExecutorService)>"
"<e0.g: java.lang.String l(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>","<e0.g: java.lang.String l(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: void <init>(java.lang.String,int)>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: void <init>(java.lang.String,int)>"
"<e0.t: java.lang.Void g(java.lang.Object)>","<e0.t: java.lang.Void g(java.lang.Object)>"
"<x.b: java.util.Map b(x.b)>","<x.b: java.util.Map b(x.b)>"
"<io.flutter.embedding.android.h$b: void <init>(io.flutter.embedding.android.h)>","<io.flutter.embedding.android.h$b: void <init>(io.flutter.embedding.android.h)>"
"<t0.n: java.lang.String V(java.lang.String,char,java.lang.String,int,java.lang.Object)>","<t0.n: java.lang.String V(java.lang.String,char,java.lang.String,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.q3: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.q3$d,android.content.Context,android.view.View)>","<io.flutter.plugins.webviewflutter.q3: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.q3$d,android.content.Context,android.view.View)>"
"<b.c$a: boolean hasNext()>","<b.c$a: boolean hasNext()>"
"<k.c: android.net.Uri b()>","<k.c: android.net.Uri b()>"
"<w0.a$b: void d(java.lang.Object)>","<w0.a$b: void d(java.lang.Object)>"
"<x.p$b: x.p$b a(org.json.JSONObject)>","<x.p$b: x.p$b a(org.json.JSONObject)>"
"<io.flutter.plugins.webviewflutter.k$c0: java.lang.String k(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: java.lang.String k(java.lang.Long)>"
"<io.flutter.plugin.platform.c: void <init>(android.app.Activity,x.i,io.flutter.plugin.platform.c$d)>","<io.flutter.plugin.platform.c: void <init>(android.app.Activity,x.i,io.flutter.plugin.platform.c$d)>"
"<i0.b: void <clinit>()>","<i0.b: void <clinit>()>"
"<x.e: void <init>(m.a)>","<x.e: void <init>(m.a)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: void <clinit>()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$b: void <clinit>()>"
"<q0.d: long d(long,long)>","<q0.d: long d(long,long)>"
"<w0.f$a: void <init>()>","<w0.f$a: void <init>()>"
"<u0.v1$c: java.lang.Object g(java.lang.Object)>","<u0.v1$c: java.lang.Object g(java.lang.Object)>"
"<a.b$e: void a(a.b$c)>","<a.b$e: void a(a.b$c)>"
"<k.b$b: void <init>(j.d$a)>","<k.b$b: void <init>(j.d$a)>"
"<io.flutter.plugins.webviewflutter.k$s$a: io.flutter.plugins.webviewflutter.k$s$a c(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$s$a: io.flutter.plugins.webviewflutter.k$s$a c(java.lang.Long)>"
"<io.flutter.view.e: long b(io.flutter.view.e,long)>","<io.flutter.view.e: long b(io.flutter.view.e,long)>"
"<x.h$a: void a(y.h,y.i$d)>","<x.h$a: void a(y.h,y.i$d)>"
"<e0.g: java.util.List q(java.lang.Iterable)>","<e0.g: java.util.List q(java.lang.Iterable)>"
"<io.flutter.view.d$c: android.graphics.SurfaceTexture d()>","<io.flutter.view.d$c: android.graphics.SurfaceTexture d()>"
"<e0.d0: java.util.Set a(java.lang.Object)>","<e0.d0: java.util.Set a(java.lang.Object)>"
"<kotlin.coroutines.jvm.internal.h: g0.d a(g0.d)>","<kotlin.coroutines.jvm.internal.h: g0.d a(g0.d)>"
"<io.flutter.embedding.android.e$c: void t(io.flutter.embedding.android.i)>","<io.flutter.embedding.android.e$c: void t(io.flutter.embedding.android.i)>"
"<io.flutter.plugins.webviewflutter.u: void b(io.flutter.plugins.webviewflutter.k$h,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.u: void b(io.flutter.plugins.webviewflutter.k$h,java.lang.Object,y.a$e)>"
"<x.i: int b(x.i,org.json.JSONArray)>","<x.i: int b(x.i,org.json.JSONArray)>"
"<io.flutter.embedding.android.b$b: void <init>(android.content.Context)>","<io.flutter.embedding.android.b$b: void <init>(android.content.Context)>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable l(java.lang.Throwable)>","<kotlinx.coroutines.internal.y: java.lang.Throwable l(java.lang.Throwable)>"
"<androidx.lifecycle.c$a: androidx.lifecycle.c$a valueOf(java.lang.String)>","<androidx.lifecycle.c$a: androidx.lifecycle.c$a valueOf(java.lang.String)>"
"<m.a$c: void d(java.lang.String,y.b$a)>","<m.a$c: void d(java.lang.String,y.b$a)>"
"<u0.x1: void <init>(g0.g,n0.p)>","<u0.x1: void <init>(g0.g,n0.p)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion: void reset()>","<androidx.window.layout.WindowMetricsCalculator$Companion: void reset()>"
"<io.flutter.plugins.webviewflutter.f2$a: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.f2$a: void a(java.lang.Object)>"
"<u0.e0: java.lang.String b(g0.g)>","<u0.e0: java.lang.String b(g0.g)>"
"<u0.o1$a: java.lang.Object b(u0.o1,java.lang.Object,n0.p)>","<u0.o1$a: java.lang.Object b(u0.o1,java.lang.Object,n0.p)>"
"<y.i$c: void a(y.h,y.i$d)>","<y.i$c: void a(y.h,y.i$d)>"
"<io.flutter.plugin.editing.c: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>","<io.flutter.plugin.editing.c: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>"
"<b.c$b: boolean retainAll(java.util.Collection)>","<b.c$b: boolean retainAll(java.util.Collection)>"
"<androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()>","<androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertSafeBrowsingResponse(java.lang.Object)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertSafeBrowsingResponse(java.lang.Object)>"
"<y.q: void <init>()>","<y.q: void <init>()>"
"<e0.t: java.util.Set c()>","<e0.t: java.util.Set c()>"
"<io.flutter.plugin.editing.f: io.flutter.plugin.editing.f$c c(io.flutter.plugin.editing.f)>","<io.flutter.plugin.editing.f: io.flutter.plugin.editing.f$c c(io.flutter.plugin.editing.f)>"
"<o.d$a: void <init>(o.d,android.content.Context)>","<o.d$a: void <init>(o.d,android.content.Context)>"
"<d0.g: d0.e a(n0.a)>","<d0.g: d0.e a(n0.a)>"
"<io.flutter.view.c$l: java.lang.String B(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String B(io.flutter.view.c$l)>"
"<kotlinx.coroutines.internal.v: kotlinx.coroutines.internal.d a()>","<kotlinx.coroutines.internal.v: kotlinx.coroutines.internal.d a()>"
"<kotlinx.coroutines.internal.t: java.lang.String toString()>","<kotlinx.coroutines.internal.t: java.lang.String toString()>"
"<io.flutter.view.c$h: int g(io.flutter.view.c$h)>","<io.flutter.view.c$h: int g(io.flutter.view.c$h)>"
"<io.flutter.embedding.android.d: java.lang.String u()>","<io.flutter.embedding.android.d: java.lang.String u()>"
"<t0.c: int c(t0.c)>","<t0.c: int c(t0.c)>"
"<io.flutter.plugin.platform.b: void <init>(android.content.Context,int,int,io.flutter.plugin.platform.a)>","<io.flutter.plugin.platform.b: void <init>(android.content.Context,int,int,io.flutter.plugin.platform.a)>"
"<r0.a: java.util.List getAnnotations()>","<r0.a: java.util.List getAnnotations()>"
"<x.k$g: void a(int)>","<x.k$g: void a(int)>"
"<u0.t1: u0.w b(u0.o1,int,java.lang.Object)>","<u0.t1: u0.w b(u0.o1,int,java.lang.Object)>"
"<io.flutter.embedding.android.w: android.os.Bundle b(io.flutter.embedding.android.x)>","<io.flutter.embedding.android.w: android.os.Bundle b(io.flutter.embedding.android.x)>"
"<io.flutter.embedding.engine.b: void <init>()>","<io.flutter.embedding.engine.b: void <init>()>"
"<x.i$j: void <init>(java.lang.Integer,x.i$d,java.lang.Boolean,java.lang.Integer,x.i$d,java.lang.Integer,java.lang.Boolean)>","<x.i$j: void <init>(java.lang.Integer,x.i$d,java.lang.Boolean,java.lang.Integer,x.i$d,java.lang.Integer,java.lang.Boolean)>"
"<io.flutter.plugin.editing.f$a: void i(boolean)>","<io.flutter.plugin.editing.f$a: void i(boolean)>"
"<b.c$e: void clear()>","<b.c$e: void clear()>"
"<io.flutter.plugins.webviewflutter.y2$d: void l(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void l(java.lang.Void)>"
"<androidx.versionedparcelable.ParcelImpl$a: java.lang.Object createFromParcel(android.os.Parcel)>","<androidx.versionedparcelable.ParcelImpl$a: java.lang.Object createFromParcel(android.os.Parcel)>"
"<io.flutter.plugin.platform.q$a: void d(x.k$e,x.k$b)>","<io.flutter.plugin.platform.q$a: void d(x.k$e,x.k$b)>"
"<org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerWebSettings()>","<org.chromium.support_lib_boundary.ServiceWorkerControllerBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerWebSettings()>"
"<x.d$a: void a(boolean)>","<x.d$a: void a(boolean)>"
"<y0.c: java.lang.Object emit(java.lang.Object,g0.d)>","<y0.c: java.lang.Object emit(java.lang.Object,g0.d)>"
"<u0.y: void <clinit>()>","<u0.y: void <clinit>()>"
"<u0.v1: void <clinit>()>","<u0.v1: void <clinit>()>"
"<androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()>","<androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()>"
"<w.a$f: void finalize()>","<w.a$f: void finalize()>"
"<d0.k$b: void <init>(java.lang.Throwable)>","<d0.k$b: void <init>(java.lang.Throwable)>"
"<u0.v1: java.lang.Throwable K(u0.v1$b,java.util.List)>","<u0.v1: java.lang.Throwable K(u0.v1$b,java.util.List)>"
"<kotlin.jvm.internal.i: java.lang.Throwable h(java.lang.Throwable)>","<kotlin.jvm.internal.i: java.lang.Throwable h(java.lang.Throwable)>"
"<io.flutter.view.c$l: io.flutter.view.c$h x(io.flutter.view.c$l)>","<io.flutter.view.c$l: io.flutter.view.c$h x(io.flutter.view.c$l)>"
"<o.d$a: void c()>","<o.d$a: void c()>"
"<io.flutter.plugins.webviewflutter.f2: void b(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void b(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<f0.a: int a(java.lang.Comparable,java.lang.Comparable)>","<f0.a: int a(java.lang.Comparable,java.lang.Comparable)>"
"<u0.v1$b: void <init>(u0.z1,boolean,java.lang.Throwable)>","<u0.v1$b: void <init>(u0.z1,boolean,java.lang.Throwable)>"
"<androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)>","<androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)>"
"<io.flutter.plugin.editing.f: void <init>(android.view.View,x.p,io.flutter.plugin.platform.q)>","<io.flutter.plugin.editing.f: void <init>(android.view.View,x.p,io.flutter.plugin.platform.q)>"
"<u0.g2: void <clinit>()>","<u0.g2: void <clinit>()>"
"<x.i: x.i$h a(x.i)>","<x.i: x.i$h a(x.i)>"
"<org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.reflect.InvocationHandler getMessagePayload()>","<org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.reflect.InvocationHandler getMessagePayload()>"
"<io.flutter.view.c$l: java.util.List D(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.util.List D(io.flutter.view.c$l)>"
"<io.flutter.plugins.webviewflutter.k$y: void f(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void f(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<io.flutter.view.e: io.flutter.embedding.engine.FlutterJNI c(io.flutter.view.e)>","<io.flutter.view.e: io.flutter.embedding.engine.FlutterJNI c(io.flutter.view.e)>"
"<androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)>","<androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)>"
"<com.example.vtu_web_app.MainActivity: void setResult(int,android.content.Intent)>","<com.example.vtu_web_app.MainActivity: void setResult(int,android.content.Intent)>"
"<b.c: void <init>()>","<b.c: void <init>()>"
"<io.flutter.plugin.platform.j$b: void onTrimMemory(int)>","<io.flutter.plugin.platform.j$b: void onTrimMemory(int)>"
"<a0.a: a0.a$c b(a0.a)>","<a0.a: a0.a$c b(a0.a)>"
"<b.c$b: boolean removeAll(java.util.Collection)>","<b.c$b: boolean removeAll(java.util.Collection)>"
"<o0.a: void <init>()>","<o0.a: void <init>()>"
"<u0.y0: java.lang.String toString()>","<u0.y0: java.lang.String toString()>"
"<d0.p: void <init>(java.lang.String)>","<d0.p: void <init>(java.lang.String)>"
"<g0.g: g0.g minusKey(g0.g$c)>","<g0.g: g0.g minusKey(g0.g$c)>"
"<io.flutter.plugins.webviewflutter.f2: void m(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void m(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugin.platform.i: void <init>()>","<io.flutter.plugin.platform.i: void <init>()>"
"<kotlinx.coroutines.scheduling.c: void <init>(int,int,long,java.lang.String)>","<kotlinx.coroutines.scheduling.c: void <init>(int,int,long,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.f2: void i(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void i(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.k$e0: void <init>(io.flutter.plugins.webviewflutter.k$a)>","<io.flutter.plugins.webviewflutter.k$e0: void <init>(io.flutter.plugins.webviewflutter.k$a)>"
"<io.flutter.embedding.android.u$a: long d()>","<io.flutter.embedding.android.u$a: long d()>"
"<x.l$a: void <init>(x.l,byte[])>","<x.l$a: void <init>(x.l,byte[])>"
"<io.flutter.plugins.webviewflutter.y2$b: void h(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void h(java.lang.Void)>"
"<androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()>","<androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()>"
"<io.flutter.plugins.webviewflutter.k$o: void f(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$o: void f(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>"
"<b.c$c: boolean contains(java.lang.Object)>","<b.c$c: boolean contains(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.y2$d: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>","<io.flutter.plugins.webviewflutter.y2$d: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()>","<androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()>"
"<t0.n$a: void <init>(java.util.List,boolean)>","<t0.n$a: void <init>(java.util.List,boolean)>"
"<androidx.lifecycle.g: void <init>(androidx.lifecycle.f)>","<androidx.lifecycle.g: void <init>(androidx.lifecycle.f)>"
"<u0.o1: java.util.concurrent.CancellationException h()>","<u0.o1: java.util.concurrent.CancellationException h()>"
"<io.flutter.plugins.webviewflutter.k$f: void a(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$f: void a(java.lang.Long)>"
"<u0.n0: void <clinit>()>","<u0.n0: void <clinit>()>"
"<t0.c$a: boolean hasNext()>","<t0.c$a: boolean hasNext()>"
"<androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)>","<androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)>"
"<io.flutter.plugins.webviewflutter.q3$b: void <init>(io.flutter.plugins.webviewflutter.p2)>","<io.flutter.plugins.webviewflutter.q3$b: void <init>(io.flutter.plugins.webviewflutter.p2)>"
"<k.k$a: void <clinit>()>","<k.k$a: void <clinit>()>"
"<androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)>","<androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)>"
"<b.c: java.util.Map c()>","<b.c: java.util.Map c()>"
"<io.flutter.plugin.editing.f$d: void a(double,double)>","<io.flutter.plugin.editing.f$d: void a(double,double)>"
"<x.a$a: void a(java.lang.Object,y.a$e)>","<x.a$a: void a(java.lang.Object,y.a$e)>"
"<androidx.versionedparcelable.b: void <init>(android.os.Parcel,int,int,java.lang.String,b.a,b.a,b.a)>","<androidx.versionedparcelable.b: void <init>(android.os.Parcel,int,int,java.lang.String,b.a,b.a,b.a)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long g(android.view.accessibility.AccessibilityNodeInfo)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long g(android.view.accessibility.AccessibilityNodeInfo)>"
"<io.flutter.plugins.webviewflutter.k$d: void e(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$d: void e(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()>"
"<u0.v: void q()>","<u0.v: void q()>"
"<io.flutter.view.c$h: int i(io.flutter.view.c$h)>","<io.flutter.view.c$h: int i(io.flutter.view.c$h)>"
"<j.d: android.webkit.WebMessagePort a()>","<j.d: android.webkit.WebMessagePort a()>"
"<a.b$c: java.lang.String toString()>","<a.b$c: java.lang.String toString()>"
"<kotlinx.coroutines.internal.v: void <init>()>","<kotlinx.coroutines.internal.v: void <init>()>"
"<io.flutter.embedding.android.e$c: void f()>","<io.flutter.embedding.android.e$c: void f()>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)>","<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)>"
"<x.i: x.i$k e(x.i,java.lang.String)>","<x.i: x.i$k e(x.i,java.lang.String)>"
"<io.flutter.embedding.android.k: io.flutter.embedding.engine.a getAttachedFlutterEngine()>","<io.flutter.embedding.android.k: io.flutter.embedding.engine.a getAttachedFlutterEngine()>"
"<u0.l: java.lang.Object s(java.lang.Object,java.lang.Object,n0.l)>","<u0.l: java.lang.Object s(java.lang.Object,java.lang.Object,n0.l)>"
"<u0.d1: kotlinx.coroutines.internal.z b()>","<u0.d1: kotlinx.coroutines.internal.z b()>"
"<io.flutter.view.c$l: boolean x0()>","<io.flutter.view.c$l: boolean x0()>"
"<u0.q0: java.lang.String c(g0.d)>","<u0.q0: java.lang.String c(g0.d)>"
"<io.flutter.plugin.platform.c: boolean d(io.flutter.plugin.platform.c)>","<io.flutter.plugin.platform.c: boolean d(io.flutter.plugin.platform.c)>"
"<w0.j: w0.j D()>","<w0.j: w0.j D()>"
"<io.flutter.view.c$l: float S(io.flutter.view.c$l)>","<io.flutter.view.c$l: float S(io.flutter.view.c$l)>"
"<x.m: x.m$a a()>","<x.m: x.m$a a()>"
"<androidx.window.layout.FoldingFeature$State$Companion: void <init>()>","<androidx.window.layout.FoldingFeature$State$Companion: void <init>()>"
"<io.flutter.embedding.android.k: boolean a(android.view.KeyEvent)>","<io.flutter.embedding.android.k: boolean a(android.view.KeyEvent)>"
"<io.flutter.view.c$l: int j(io.flutter.view.c$l,int)>","<io.flutter.view.c$l: int j(io.flutter.view.c$l,int)>"
"<t0.f$a: void <clinit>()>","<t0.f$a: void <clinit>()>"
"<androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()>","<androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()>"
"<io.flutter.plugin.editing.c: void <init>(x.p$e,android.view.View)>","<io.flutter.plugin.editing.c: void <init>(x.p$e,android.view.View)>"
"<io.flutter.plugin.platform.q: android.view.MotionEvent$PointerProperties e0(java.lang.Object)>","<io.flutter.plugin.platform.q: android.view.MotionEvent$PointerProperties e0(java.lang.Object)>"
"<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q i()>","<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q i()>"
"<d0.j: java.lang.Object d()>","<d0.j: java.lang.Object d()>"
"<androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()>","<androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()>"
"<d.a$a: void execute(java.lang.Runnable)>","<d.a$a: void execute(java.lang.Runnable)>"
"<kotlinx.coroutines.scheduling.k: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.j)>","<kotlinx.coroutines.scheduling.k: void <init>(java.lang.Runnable,long,kotlinx.coroutines.scheduling.j)>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a f(java.util.Map)>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a f(java.util.Map)>"
"<g.a: void <clinit>()>","<g.a: void <clinit>()>"
"<io.flutter.view.c$l: java.lang.CharSequence m0()>","<io.flutter.view.c$l: java.lang.CharSequence m0()>"
"<io.flutter.plugins.webviewflutter.h: java.lang.String[] b(java.lang.String)>","<io.flutter.plugins.webviewflutter.h: java.lang.String[] b(java.lang.String)>"
"<org.chromium.support_lib_boundary.IsomorphicObjectBoundaryInterface: java.lang.Object getOrCreatePeer(java.util.concurrent.Callable)>","<org.chromium.support_lib_boundary.IsomorphicObjectBoundaryInterface: java.lang.Object getOrCreatePeer(java.util.concurrent.Callable)>"
"<io.flutter.plugin.platform.SingleViewPresentation$b: void <init>(android.content.Context)>","<io.flutter.plugin.platform.SingleViewPresentation$b: void <init>(android.content.Context)>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)>","<androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)>"
"<io.flutter.embedding.android.FlutterSplashView$b: void f()>","<io.flutter.embedding.android.FlutterSplashView$b: void f()>"
"<a.b$a: a.b$c b(a.b$c)>","<a.b$a: a.b$c b(a.b$c)>"
"<kotlin.jvm.internal.c: void <init>(java.lang.Class)>","<kotlin.jvm.internal.c: void <init>(java.lang.Class)>"
"<androidx.window.layout.EmptyDecorator: void <init>()>","<androidx.window.layout.EmptyDecorator: void <init>()>"
"<e0.s: java.util.ListIterator listIterator()>","<e0.s: java.util.ListIterator listIterator()>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a d(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t$a d(java.lang.Boolean)>"
"<w0.i: java.lang.Object b(java.lang.Object)>","<w0.i: java.lang.Object b(java.lang.Object)>"
"<a.b$a: void <init>(a.b$c,a.b$c)>","<a.b$a: void <init>(a.b$c,a.b$c)>"
"<e0.u: java.lang.Object[] toArray(java.lang.Object[])>","<e0.u: java.lang.Object[] toArray(java.lang.Object[])>"
"<p.a: android.graphics.Matrix getPlatformViewMatrix()>","<p.a: android.graphics.Matrix getPlatformViewMatrix()>"
"<io.flutter.plugins.webviewflutter.y2$d: void j(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void j(java.lang.Void)>"
"<io.flutter.view.c$l: boolean d(io.flutter.view.c$l,c0.d)>","<io.flutter.view.c$l: boolean d(io.flutter.view.c$l,c0.d)>"
"<io.flutter.embedding.engine.c$c: boolean b(int,int,android.content.Intent)>","<io.flutter.embedding.engine.c$c: boolean b(int,int,android.content.Intent)>"
"<b.c$d: java.lang.Object getValue()>","<b.c$d: java.lang.Object getValue()>"
"<b.c: java.lang.Object i(int,java.lang.Object)>","<b.c: java.lang.Object i(int,java.lang.Object)>"
"<io.flutter.view.c$l: java.lang.String E(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String E(io.flutter.view.c$l)>"
"<kotlinx.coroutines.scheduling.a$c: void o(java.lang.Object)>","<kotlinx.coroutines.scheduling.a$c: void o(java.lang.Object)>"
"<io.flutter.view.c: void <clinit>()>","<io.flutter.view.c: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$c0: io.flutter.plugins.webviewflutter.k$e0 i(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: io.flutter.plugins.webviewflutter.k$e0 i(java.lang.Long)>"
"<k.k$b: void <clinit>()>","<k.k$b: void <clinit>()>"
"<f.a$c: void <init>(android.view.Window,android.view.View)>","<f.a$c: void <init>(android.view.Window,android.view.View)>"
"<io.flutter.plugins.webviewflutter.e$b: void b(java.lang.Void)>","<io.flutter.plugins.webviewflutter.e$b: void b(java.lang.Void)>"
"<u0.q1: void <init>()>","<u0.q1: void <init>()>"
"<io.flutter.embedding.android.t$d: void <init>(int,io.flutter.embedding.android.t$c[])>","<io.flutter.embedding.android.t$d: void <init>(int,io.flutter.embedding.android.t$c[])>"
"<kotlinx.coroutines.internal.g: java.lang.String toString()>","<kotlinx.coroutines.internal.g: java.lang.String toString()>"
"<u0.k0$a: void <init>(kotlin.jvm.internal.e)>","<u0.k0$a: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.plugin.platform.c: java.lang.CharSequence p(x.i$e)>","<io.flutter.plugin.platform.c: java.lang.CharSequence p(x.i$e)>"
"<io.flutter.view.c$l: java.lang.String Z(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String Z(io.flutter.view.c$l)>"
"<io.flutter.plugin.platform.c$a: void g(x.i$g)>","<io.flutter.plugin.platform.c$a: void g(x.i$g)>"
"<u0.d0: java.lang.Throwable a()>","<u0.d0: java.lang.Throwable a()>"
"<androidx.savedstate.b: androidx.savedstate.a j()>","<androidx.savedstate.b: androidx.savedstate.a j()>"
"<io.flutter.plugin.platform.q: android.util.SparseArray w(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: android.util.SparseArray w(io.flutter.plugin.platform.q)>"
"<io.flutter.plugins.webviewflutter.y2$d: void b(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void b(java.lang.Void)>"
"<t0.c: java.util.Iterator iterator()>","<t0.c: java.util.Iterator iterator()>"
"<kotlin.jvm.internal.c$a: java.lang.String a(java.lang.Class)>","<kotlin.jvm.internal.c$a: java.lang.String a(java.lang.Class)>"
"<androidx.window.layout.WindowInfoTrackerImpl: void <init>(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)>","<androidx.window.layout.WindowInfoTrackerImpl: void <init>(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)>"
"<u0.v1: u0.q p(u0.s)>","<u0.v1: u0.q p(u0.s)>"
"<io.flutter.embedding.android.i: boolean e(io.flutter.embedding.android.i)>","<io.flutter.embedding.android.i: boolean e(io.flutter.embedding.android.i)>"
"<io.flutter.view.c$l: boolean Y(io.flutter.view.c$l,io.flutter.view.c$i)>","<io.flutter.view.c$l: boolean Y(io.flutter.view.c$l,io.flutter.view.c$i)>"
"<io.flutter.embedding.android.b$a: void onAnimationCancel(android.animation.Animator)>","<io.flutter.embedding.android.b$a: void onAnimationCancel(android.animation.Animator)>"
"<u0.v1: java.util.concurrent.CancellationException m0(u0.v1,java.lang.Throwable,java.lang.String,int,java.lang.Object)>","<u0.v1: java.util.concurrent.CancellationException m0(u0.v1,java.lang.Throwable,java.lang.String,int,java.lang.Object)>"
"<kotlinx.coroutines.internal.q: void <clinit>()>","<kotlinx.coroutines.internal.q: void <clinit>()>"
"<x.g$a: void <init>(x.g)>","<x.g$a: void <init>(x.g)>"
"<io.flutter.view.d$b: void onTrimMemory(int)>","<io.flutter.view.d$b: void onTrimMemory(int)>"
"<y.a$b$a: void <init>(y.a$b,y.b$b)>","<y.a$b$a: void <init>(y.a$b,y.b$b)>"
"<io.flutter.plugins.webviewflutter.k$d0: java.lang.Object g(byte,java.nio.ByteBuffer)>","<io.flutter.plugins.webviewflutter.k$d0: java.lang.Object g(byte,java.nio.ByteBuffer)>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertSettings(android.webkit.WebSettings)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertSettings(android.webkit.WebSettings)>"
"<u0.a: java.lang.String Y()>","<u0.a: java.lang.String Y()>"
"<io.flutter.embedding.android.k$e: void d()>","<io.flutter.embedding.android.k$e: void d()>"
"<h0.c$b: void <init>(g0.d,g0.g,n0.p,java.lang.Object)>","<h0.c$b: void <init>(g0.d,g0.g,n0.p,java.lang.Object)>"
"<b.a: b.c m()>","<b.a: b.c m()>"
"<io.flutter.view.c: io.flutter.view.c$l B()>","<io.flutter.view.c: io.flutter.view.c$l B()>"
"<io.flutter.embedding.engine.b: io.flutter.embedding.engine.a a(java.lang.String)>","<io.flutter.embedding.engine.b: io.flutter.embedding.engine.a a(java.lang.String)>"
"<x.i$g: void <clinit>()>","<x.i$g: void <clinit>()>"
"<s0.h: java.util.List e(s0.b)>","<s0.h: java.util.List e(s0.b)>"
"<x.d: java.util.Map c(x.d$b,boolean)>","<x.d: java.util.Map c(x.d$b,boolean)>"
"<io.flutter.plugins.webviewflutter.k$z: void p(java.io.ByteArrayOutputStream,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$z: void p(java.io.ByteArrayOutputStream,java.lang.Object)>"
"<kotlin.jvm.internal.h: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>","<kotlin.jvm.internal.h: void <init>(int,java.lang.Class,java.lang.String,java.lang.String,int)>"
"<t0.n$a: d0.j a(java.lang.CharSequence,int)>","<t0.n$a: d0.j a(java.lang.CharSequence,int)>"
"<io.flutter.plugins.webviewflutter.y2$d: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>","<io.flutter.plugins.webviewflutter.y2$d: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>"
"<x.i$a: void a(y.h,y.i$d)>","<x.i$a: void a(y.h,y.i$d)>"
"<m0.a: java.lang.Class a(r0.c)>","<m0.a: java.lang.Class a(r0.c)>"
"<e0.q: java.util.Collection p(java.lang.Iterable,java.util.Collection)>","<e0.q: java.util.Collection p(java.lang.Iterable,java.util.Collection)>"
"<androidx.window.R$id: void <init>()>","<androidx.window.R$id: void <init>()>"
"<kotlin.jvm.internal.g: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>","<kotlin.jvm.internal.g: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>"
"<io.flutter.plugins.webviewflutter.k$t: java.util.Map h()>","<io.flutter.plugins.webviewflutter.k$t: java.util.Map h()>"
"<y.i: void <init>(y.b,java.lang.String)>","<y.i: void <init>(y.b,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.f2: void g(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void g(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.embedding.android.FlutterSplashView$b: void d()>","<io.flutter.embedding.android.FlutterSplashView$b: void d()>"
"<io.flutter.plugins.webviewflutter.k$z: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$z: void <clinit>()>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()>"
"<io.flutter.plugins.webviewflutter.k$c0: void m(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void m(java.lang.Long)>"
"<q.a$b: y.b b()>","<q.a$b: y.b b()>"
"<u0.g: u0.o1 a(u0.l0,g0.g,u0.n0,n0.p)>","<u0.g: u0.o1 a(u0.l0,g0.g,u0.n0,n0.p)>"
"<f.a$a: void e(int)>","<f.a$a: void e(int)>"
"<kotlinx.coroutines.scheduling.a$c: int j(int)>","<kotlinx.coroutines.scheduling.a$c: int j(int)>"
"<io.flutter.embedding.android.e$c: boolean p()>","<io.flutter.embedding.android.e$c: boolean p()>"
"<kotlinx.coroutines.internal.u$a: void <init>(n0.l,java.lang.Object,g0.g)>","<kotlinx.coroutines.internal.u$a: void <init>(n0.l,java.lang.Object,g0.g)>"
"<io.flutter.embedding.engine.a$a: void a()>","<io.flutter.embedding.engine.a$a: void a()>"
"<u0.d: void <clinit>()>","<u0.d: void <clinit>()>"
"<u0.u1: void <init>()>","<u0.u1: void <init>()>"
"<io.flutter.view.c$l: io.flutter.view.c$h w(io.flutter.view.c$l)>","<io.flutter.view.c$l: io.flutter.view.c$h w(io.flutter.view.c$l)>"
"<androidx.window.embedding.EmbeddingAdapter: void <init>()>","<androidx.window.embedding.EmbeddingAdapter: void <init>()>"
"<y.p: java.nio.ByteBuffer c(java.lang.String,java.lang.String,java.lang.Object)>","<y.p: java.nio.ByteBuffer c(java.lang.String,java.lang.String,java.lang.Object)>"
"<w0.m: void <init>(n0.l)>","<w0.m: void <init>(n0.l)>"
"<e0.f: java.util.List a(java.lang.Object[])>","<e0.f: java.util.List a(java.lang.Object[])>"
"<io.flutter.embedding.android.z: void <init>(androidx.window.java.layout.WindowInfoTrackerCallbackAdapter)>","<io.flutter.embedding.android.z: void <init>(androidx.window.java.layout.WindowInfoTrackerCallbackAdapter)>"
"<io.flutter.plugins.webviewflutter.k$y: void d(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void d(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<io.flutter.embedding.android.s$c$a: void <init>(io.flutter.embedding.android.s$c,io.flutter.embedding.android.s$a)>","<io.flutter.embedding.android.s$c$a: void <init>(io.flutter.embedding.android.s$c,io.flutter.embedding.android.s$a)>"
"<m.a: java.lang.String h()>","<m.a: java.lang.String h()>"
"<io.flutter.embedding.android.k: io.flutter.embedding.android.g getCurrentImageSurface()>","<io.flutter.embedding.android.k: io.flutter.embedding.android.g getCurrentImageSurface()>"
"<io.flutter.plugin.platform.q: io.flutter.embedding.android.a n(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: io.flutter.embedding.android.a n(io.flutter.plugin.platform.q)>"
"<io.flutter.view.c$l: android.graphics.Rect k0()>","<io.flutter.view.c$l: android.graphics.Rect k0()>"
"<x.i$g: x.i$g valueOf(java.lang.String)>","<x.i$g: x.i$g valueOf(java.lang.String)>"
"<io.flutter.embedding.android.FlutterSplashView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<io.flutter.embedding.android.FlutterSplashView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<kotlin.jvm.internal.i: java.lang.String j(java.lang.String,java.lang.Object)>","<kotlin.jvm.internal.i: java.lang.String j(java.lang.String,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$o: y.g d()>","<io.flutter.plugins.webviewflutter.k$o: y.g d()>"
"<x.k$g: void f(int,int)>","<x.k$g: void f(int,int)>"
"<io.flutter.embedding.engine.FlutterJNI$a: void b(java.nio.ByteBuffer,java.lang.String[])>","<io.flutter.embedding.engine.FlutterJNI$a: void b(java.nio.ByteBuffer,java.lang.String[])>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertSafeBrowsingResponse(java.lang.reflect.InvocationHandler)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertSafeBrowsingResponse(java.lang.reflect.InvocationHandler)>"
"<io.flutter.plugins.webviewflutter.f2: void u(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void u(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.view.c$i: void <init>(java.lang.String,int,int)>","<io.flutter.view.c$i: void <init>(java.lang.String,int,int)>"
"<io.flutter.embedding.android.e$c: androidx.lifecycle.c e()>","<io.flutter.embedding.android.e$c: androidx.lifecycle.c e()>"
"<x.m$b: void <init>(java.lang.String,int,java.lang.String)>","<x.m$b: void <init>(java.lang.String,int,java.lang.String)>"
"<u0.i2: void <clinit>()>","<u0.i2: void <clinit>()>"
"<x.i: x.i$k j(java.lang.String)>","<x.i: x.i$k j(java.lang.String)>"
"<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: void <clinit>()>","<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: void <clinit>()>"
"<io.flutter.plugin.platform.j$c: void onGlobalFocusChanged(android.view.View,android.view.View)>","<io.flutter.plugin.platform.j$c: void onGlobalFocusChanged(android.view.View,android.view.View)>"
"<androidx.window.layout.SidecarCompat$TranslatingCallback: void <init>(androidx.window.layout.SidecarCompat)>","<androidx.window.layout.SidecarCompat$TranslatingCallback: void <init>(androidx.window.layout.SidecarCompat)>"
"<d0.k: void <clinit>()>","<d0.k: void <clinit>()>"
"<androidx.window.embedding.EmbeddingAdapter: boolean d(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>","<androidx.window.embedding.EmbeddingAdapter: boolean d(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>"
"<k.i: org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface c()>","<k.i: org.chromium.support_lib_boundary.WebResourceErrorBoundaryInterface c()>"
"<x.i$h: void h(x.i$k)>","<x.i$h: void h(x.i$k)>"
"<o.d: java.lang.String f()>","<o.d: java.lang.String f()>"
"<io.flutter.plugins.webviewflutter.k$s$a: io.flutter.plugins.webviewflutter.k$s$a b(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$s$a: io.flutter.plugins.webviewflutter.k$s$a b(java.lang.String)>"
"<androidx.versionedparcelable.a: android.os.Parcelable q()>","<androidx.versionedparcelable.a: android.os.Parcelable q()>"
"<k.b$c: void onComplete(long)>","<k.b$c: void onComplete(long)>"
"<kotlinx.coroutines.internal.d0: java.lang.Object b(g0.g)>","<kotlinx.coroutines.internal.d0: java.lang.Object b(g0.g)>"
"<io.flutter.plugin.platform.i: io.flutter.plugin.platform.g b(java.lang.String)>","<io.flutter.plugin.platform.i: io.flutter.plugin.platform.g b(java.lang.String)>"
"<io.flutter.view.c$l: java.lang.String n0()>","<io.flutter.view.c$l: java.lang.String n0()>"
"<kotlinx.coroutines.internal.j: void <init>()>","<kotlinx.coroutines.internal.j: void <init>()>"
"<io.flutter.plugin.editing.c$b: void a(boolean,boolean,boolean)>","<io.flutter.plugin.editing.c$b: void a(boolean,boolean,boolean)>"
"<androidx.window.embedding.SplitRule$Api30Impl: void <init>()>","<androidx.window.embedding.SplitRule$Api30Impl: void <init>()>"
"<io.flutter.plugins.webviewflutter.s2$b: android.webkit.WebViewClient d(io.flutter.plugins.webviewflutter.s2$b)>","<io.flutter.plugins.webviewflutter.s2$b: android.webkit.WebViewClient d(io.flutter.plugins.webviewflutter.s2$b)>"
"<u0.x: void <init>(java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.e)>","<u0.x: void <init>(java.lang.Object,u0.i,n0.l,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.e)>"
"<io.flutter.plugin.platform.q: io.flutter.embedding.engine.FlutterOverlaySurface G()>","<io.flutter.plugin.platform.q: io.flutter.embedding.engine.FlutterOverlaySurface G()>"
"<x.p: void <init>(m.a)>","<x.p: void <init>(m.a)>"
"<g0.h: java.lang.String toString()>","<g0.h: java.lang.String toString()>"
"<io.flutter.embedding.android.e$a: void f()>","<io.flutter.embedding.android.e$a: void f()>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()>"
"<e0.w: java.util.Map g(java.lang.Iterable)>","<e0.w: java.util.Map g(java.lang.Iterable)>"
"<w0.c: void <init>(n0.l)>","<w0.c: void <init>(n0.l)>"
"<androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()>","<androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()>"
"<androidx.window.embedding.SplitPairRule: void <init>(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.e)>","<androidx.window.embedding.SplitPairRule: void <init>(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.e)>"
"<androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>","<androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>"
"<y.e: java.nio.ByteBuffer c(java.lang.String,java.lang.String,java.lang.Object)>","<y.e: java.nio.ByteBuffer c(java.lang.String,java.lang.String,java.lang.Object)>"
"<x.k$a: void d(y.h,y.i$d)>","<x.k$a: void d(y.h,y.i$d)>"
"<androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)>","<androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)>"
"<io.flutter.plugins.webviewflutter.q3$b: io.flutter.plugins.webviewflutter.p2 a()>","<io.flutter.plugins.webviewflutter.q3$b: io.flutter.plugins.webviewflutter.p2 a()>"
"<w0.q: java.lang.Object e()>","<w0.q: java.lang.Object e()>"
"<kotlin.jvm.internal.a: java.util.List getParameters()>","<kotlin.jvm.internal.a: java.util.List getParameters()>"
"<androidx.window.embedding.EmbeddingCompat: void <init>(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)>","<androidx.window.embedding.EmbeddingCompat: void <init>(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)>"
"<io.flutter.view.e$c: void <init>(io.flutter.view.e,long)>","<io.flutter.view.e$c: void <init>(io.flutter.view.e,long)>"
"<io.flutter.embedding.android.g$b: io.flutter.embedding.android.g$b[] values()>","<io.flutter.embedding.android.g$b: io.flutter.embedding.android.g$b[] values()>"
"<io.flutter.embedding.android.r: void b(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,android.view.KeyEvent)>","<io.flutter.embedding.android.r: void b(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,android.view.KeyEvent)>"
"<io.flutter.view.c$l: java.util.List G(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.util.List G(io.flutter.view.c$l)>"
"<b.c$d: java.lang.Object getKey()>","<b.c$d: java.lang.Object getKey()>"
"<x.i$k: x.i$k a(java.lang.String)>","<x.i$k: x.i$k a(java.lang.String)>"
"<androidx.window.layout.FoldingFeature$OcclusionType: void <init>(java.lang.String)>","<androidx.window.layout.FoldingFeature$OcclusionType: void <init>(java.lang.String)>"
"<io.flutter.plugin.editing.f$c$a: void <clinit>()>","<io.flutter.plugin.editing.f$c$a: void <clinit>()>"
"<l.a$b$a: void <init>(l.a$b,l.a$a)>","<l.a$b$a: void <init>(l.a$b,l.a$a)>"
"<o.a: android.content.pm.ApplicationInfo a(android.content.Context)>","<o.a: android.content.pm.ApplicationInfo a(android.content.Context)>"
"<w.a$d: void <init>(java.lang.String,int,int)>","<w.a$d: void <init>(java.lang.String,int,int)>"
"<io.flutter.plugin.platform.q: io.flutter.plugin.platform.a m(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: io.flutter.plugin.platform.a m(io.flutter.plugin.platform.q)>"
"<io.flutter.plugins.webviewflutter.c$a: void onDisplayRemoved(int)>","<io.flutter.plugins.webviewflutter.c$a: void onDisplayRemoved(int)>"
"<io.flutter.plugin.platform.g: io.flutter.plugin.platform.f a(android.content.Context,int,java.lang.Object)>","<io.flutter.plugin.platform.g: io.flutter.plugin.platform.f a(android.content.Context,int,java.lang.Object)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: void <init>(android.os.Parcel)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: void <init>(android.os.Parcel)>"
"<io.flutter.view.c: boolean a(io.flutter.view.c$l)>","<io.flutter.view.c: boolean a(io.flutter.view.c$l)>"
"<d0.k: java.lang.Object a(java.lang.Object)>","<d0.k: java.lang.Object a(java.lang.Object)>"
"<x.i$f: x.i$f[] values()>","<x.i$f: x.i$f[] values()>"
"<x.l$a: void c()>","<x.l$a: void c()>"
"<u0.m: void <clinit>()>","<u0.m: void <clinit>()>"
"<io.flutter.view.c$l: java.lang.CharSequence q0()>","<io.flutter.view.c$l: java.lang.CharSequence q0()>"
"<w.a$f$a: void run()>","<w.a$f$a: void run()>"
"<w0.a: boolean n(w0.a,w0.o)>","<w0.a: boolean n(w0.a,w0.o)>"
"<io.flutter.embedding.android.k: void y(io.flutter.embedding.android.k$f)>","<io.flutter.embedding.android.k: void y(io.flutter.embedding.android.k$f)>"
"<w0.a$a: java.lang.Object b()>","<w0.a$a: java.lang.Object b()>"
"<androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)>"
"<io.flutter.plugins.webviewflutter.c$a: void onDisplayChanged(int)>","<io.flutter.plugins.webviewflutter.c$a: void onDisplayChanged(int)>"
"<m.e: void <init>()>","<m.e: void <init>()>"
"<io.flutter.plugins.webviewflutter.q2: android.os.IBinder getWindowToken()>","<io.flutter.plugins.webviewflutter.q2: android.os.IBinder getWindowToken()>"
"<u0.i1: java.lang.String toString()>","<u0.i1: java.lang.String toString()>"
"<io.flutter.embedding.engine.a: x.o t()>","<io.flutter.embedding.engine.a: x.o t()>"
"<io.flutter.embedding.android.b$b: void a(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType)>","<io.flutter.embedding.android.b$b: void a(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType)>"
"<w.a: android.os.Handler e(w.a)>","<w.a: android.os.Handler e(w.a)>"
"<androidx.core.app.CoreComponentFactory: java.lang.Object a(java.lang.Object)>","<androidx.core.app.CoreComponentFactory: java.lang.Object a(java.lang.Object)>"
"<androidx.window.layout.FoldingFeature$Orientation$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.FoldingFeature$Orientation$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.view.c$l: java.lang.CharSequence y(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.CharSequence y(io.flutter.view.c$l)>"
"<u0.k0$a: void <init>()>","<u0.k0$a: void <init>()>"
"<io.flutter.embedding.android.t$a: void <init>()>","<io.flutter.embedding.android.t$a: void <init>()>"
"<io.flutter.embedding.android.g: void <init>(android.content.Context,android.media.ImageReader,io.flutter.embedding.android.g$b)>","<io.flutter.embedding.android.g: void <init>(android.content.Context,android.media.ImageReader,io.flutter.embedding.android.g$b)>"
"<t0.n: java.lang.String P(java.lang.CharSequence,q0.c)>","<t0.n: java.lang.String P(java.lang.CharSequence,q0.c)>"
"<y.a$c: void <init>(y.a,y.a$e)>","<y.a$c: void <init>(y.a,y.a$e)>"
"<io.flutter.view.c$j: void <init>()>","<io.flutter.view.c$j: void <init>()>"
"<kotlinx.coroutines.internal.d: java.lang.Object g(java.lang.Object)>","<kotlinx.coroutines.internal.d: java.lang.Object g(java.lang.Object)>"
"<t0.f$b: void <init>(java.lang.String)>","<t0.f$b: void <init>(java.lang.String)>"
"<w0.g: java.lang.Object a(g0.d)>","<w0.g: java.lang.Object a(g0.d)>"
"<b.c$b: java.util.Iterator iterator()>","<b.c$b: java.util.Iterator iterator()>"
"<u0.y0: void <init>(boolean)>","<u0.y0: void <init>(boolean)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: void <init>()>","<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: void <init>()>"
"<io.flutter.plugins.webviewflutter.r0: void j(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void j(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<x.p$f: void i(boolean)>","<x.p$f: void i(boolean)>"
"<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void <init>(android.graphics.SurfaceTexture)>","<io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void <init>(android.graphics.SurfaceTexture)>"
"<x.p$b: java.lang.Integer b(java.lang.String)>","<x.p$b: java.lang.Integer b(java.lang.String)>"
"<androidx.window.layout.ActivityCompatHelperApi24: void <init>()>","<androidx.window.layout.ActivityCompatHelperApi24: void <init>()>"
"<a0.a$a: void <init>(a0.a)>","<a0.a$a: void <init>(a0.a)>"
"<io.flutter.view.c: void <init>(android.view.View,x.a,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.k)>","<io.flutter.view.c: void <init>(android.view.View,x.a,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.k)>"
"<kotlinx.coroutines.scheduling.b: java.lang.String toString()>","<kotlinx.coroutines.scheduling.b: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.f2: void o(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void o(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.view.c$l: java.lang.CharSequence l0()>","<io.flutter.view.c$l: java.lang.CharSequence l0()>"
"<kotlinx.coroutines.internal.j: java.util.List e(java.net.URL)>","<kotlinx.coroutines.internal.j: java.util.List e(java.net.URL)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()>","<androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()>"
"<io.flutter.plugin.platform.q: boolean o(io.flutter.plugin.platform.q,boolean)>","<io.flutter.plugin.platform.q: boolean o(io.flutter.plugin.platform.q,boolean)>"
"<io.flutter.plugin.editing.a: void <init>(io.flutter.embedding.engine.FlutterJNI)>","<io.flutter.plugin.editing.a: void <init>(io.flutter.embedding.engine.FlutterJNI)>"
"<kotlin.jvm.internal.a: java.util.List getTypeParameters()>","<kotlin.jvm.internal.a: java.util.List getTypeParameters()>"
"<l.a: java.util.concurrent.ExecutorService b()>","<l.a: java.util.concurrent.ExecutorService b()>"
"<io.flutter.view.c$l: boolean h0()>","<io.flutter.view.c$l: boolean h0()>"
"<io.flutter.view.c$g: io.flutter.view.c$g[] values()>","<io.flutter.view.c$g: io.flutter.view.c$g[] values()>"
"<kotlin.jvm.internal.n: java.lang.ClassCastException e(java.lang.ClassCastException)>","<kotlin.jvm.internal.n: java.lang.ClassCastException e(java.lang.ClassCastException)>"
"<u0.g2: java.lang.String toString()>","<u0.g2: java.lang.String toString()>"
"<p.a$a: void <init>(p.a,android.view.View$OnFocusChangeListener,android.view.View)>","<p.a$a: void <init>(p.a,android.view.View$OnFocusChangeListener,android.view.View)>"
"<u0.a1$a: java.lang.String toString()>","<u0.a1$a: java.lang.String toString()>"
"<c0.h: boolean g(android.view.View)>","<c0.h: boolean g(android.view.View)>"
"<w0.c: void <clinit>()>","<w0.c: void <clinit>()>"
"<io.flutter.view.c$l: void B0(float[],float[],float[])>","<io.flutter.view.c$l: void B0(float[],float[],float[])>"
"<l.a: void <init>(o.d,n.a,io.flutter.embedding.engine.FlutterJNI$c,java.util.concurrent.ExecutorService)>","<l.a: void <init>(o.d,n.a,io.flutter.embedding.engine.FlutterJNI$c,java.util.concurrent.ExecutorService)>"
"<x.i$e: x.i$e valueOf(java.lang.String)>","<x.i$e: x.i$e valueOf(java.lang.String)>"
"<kotlinx.coroutines.internal.n: kotlinx.coroutines.internal.o b(java.lang.Object)>","<kotlinx.coroutines.internal.n: kotlinx.coroutines.internal.o b(java.lang.Object)>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable k(java.lang.Throwable)>","<kotlinx.coroutines.internal.y: java.lang.Throwable k(java.lang.Throwable)>"
"<t0.d: boolean k(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>","<t0.d: boolean k(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>"
"<io.flutter.view.e$b: void <init>(io.flutter.view.e,android.hardware.display.DisplayManager)>","<io.flutter.view.e$b: void <init>(io.flutter.view.e,android.hardware.display.DisplayManager)>"
"<io.flutter.embedding.android.k$c: void d()>","<io.flutter.embedding.android.k$c: void d()>"
"<io.flutter.embedding.android.d: java.util.List l()>","<io.flutter.embedding.android.d: java.util.List l()>"
"<androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()>","<androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()>"
"<kotlinx.coroutines.scheduling.f: void <init>()>","<kotlinx.coroutines.scheduling.f: void <init>()>"
"<y0.b: g0.g getContext()>","<y0.b: g0.g getContext()>"
"<io.flutter.view.c$l: android.graphics.Rect f(io.flutter.view.c$l)>","<io.flutter.view.c$l: android.graphics.Rect f(io.flutter.view.c$l)>"
"<io.flutter.embedding.android.i: android.view.Surface i(io.flutter.embedding.android.i)>","<io.flutter.embedding.android.i: android.view.Surface i(io.flutter.embedding.android.i)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect,float[])>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$a: void <init>(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect,float[])>"
"<u0.w1: kotlinx.coroutines.internal.z f()>","<u0.w1: kotlinx.coroutines.internal.z f()>"
"<io.flutter.embedding.android.e$c: java.lang.String g()>","<io.flutter.embedding.android.e$c: java.lang.String g()>"
"<a0.a: android.view.PointerIcon a(a0.a,java.lang.String)>","<a0.a: android.view.PointerIcon a(a0.a,java.lang.String)>"
"<y.a: void <init>(y.b,java.lang.String,y.g)>","<y.a: void <init>(y.b,java.lang.String,y.g)>"
"<x.m$b: x.m$b[] values()>","<x.m$b: x.m$b[] values()>"
"<kotlinx.coroutines.internal.u$a: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.u$a: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.plugin.editing.e: org.json.JSONObject b()>","<io.flutter.plugin.editing.e: org.json.JSONObject b()>"
"<io.flutter.plugins.webviewflutter.f2: void z(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void z(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<d0.k$b: boolean equals(java.lang.Object)>","<d0.k$b: boolean equals(java.lang.Object)>"
"<d0.l: java.lang.Object a(java.lang.Throwable)>","<d0.l: java.lang.Object a(java.lang.Throwable)>"
"<io.flutter.plugin.platform.q: void <init>()>","<io.flutter.plugin.platform.q: void <init>()>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)>"
"<u0.f1$a: void <init>()>","<u0.f1$a: void <init>()>"
"<io.flutter.embedding.android.d: java.lang.String x()>","<io.flutter.embedding.android.d: java.lang.String x()>"
"<io.flutter.embedding.android.e$c: java.lang.String k()>","<io.flutter.embedding.android.e$c: java.lang.String k()>"
"<io.flutter.view.c: void i(io.flutter.view.c)>","<io.flutter.view.c: void i(io.flutter.view.c)>"
"<b0.a: void <init>(android.content.Context)>","<b0.a: void <init>(android.content.Context)>"
"<u0.c2: java.util.concurrent.CancellationException e()>","<u0.c2: java.util.concurrent.CancellationException e()>"
"<u0.s0: void <clinit>()>","<u0.s0: void <clinit>()>"
"<io.flutter.plugin.platform.j: boolean b(io.flutter.plugin.platform.j,boolean)>","<io.flutter.plugin.platform.j: boolean b(io.flutter.plugin.platform.j,boolean)>"
"<io.flutter.embedding.android.b$a: void onAnimationEnd(android.animation.Animator)>","<io.flutter.embedding.android.b$a: void onAnimationEnd(android.animation.Animator)>"
"<f.a$e: void <init>()>","<f.a$e: void <init>()>"
"<y.e: java.nio.ByteBuffer a(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)>","<y.e: java.nio.ByteBuffer a(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)>"
"<x.i$h: boolean l()>","<x.i$h: boolean l()>"
"<androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)>","<androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)>"
"<kotlinx.coroutines.scheduling.a$c: boolean r(kotlinx.coroutines.scheduling.a$d)>","<kotlinx.coroutines.scheduling.a$c: boolean r(kotlinx.coroutines.scheduling.a$d)>"
"<io.flutter.view.FlutterCallbackInformation: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<io.flutter.view.FlutterCallbackInformation: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<x.n: void <init>(m.a)>","<x.n: void <init>(m.a)>"
"<u0.f1$a$a: void <clinit>()>","<u0.f1$a$a: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.q3$a: void setDownloadListener(android.webkit.DownloadListener)>","<io.flutter.plugins.webviewflutter.q3$a: void setDownloadListener(android.webkit.DownloadListener)>"
"<io.flutter.view.c$l: float T(io.flutter.view.c$l)>","<io.flutter.view.c$l: float T(io.flutter.view.c$l)>"
"<kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()>","<kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()>"
"<f.a$d: void a(boolean)>","<f.a$d: void a(boolean)>"
"<u0.f0: java.lang.String toString()>","<u0.f0: java.lang.String toString()>"
"<kotlin.jvm.internal.a: void <init>(java.lang.Object)>","<kotlin.jvm.internal.a: void <init>(java.lang.Object)>"
"<kotlinx.coroutines.scheduling.c: void <init>(int,int,java.lang.String,int,kotlin.jvm.internal.e)>","<kotlinx.coroutines.scheduling.c: void <init>(int,int,java.lang.String,int,kotlin.jvm.internal.e)>"
"<kotlin.coroutines.jvm.internal.d: void <init>(g0.d,g0.g)>","<kotlin.coroutines.jvm.internal.d: void <init>(g0.d,g0.g)>"
"<g0.e$a: g0.g$b a(g0.e,g0.g$c)>","<g0.e$a: g0.g$b a(g0.e,g0.g$c)>"
"<u0.j0: java.lang.String q(g0.g)>","<u0.j0: java.lang.String q(g0.g)>"
"<x.p$f: void f(int,boolean)>","<x.p$f: void f(int,boolean)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: void <init>()>","<io.flutter.view.AccessibilityViewEmbedder$b: void <init>()>"
"<androidx.versionedparcelable.ParcelImpl: void <init>(android.os.Parcel)>","<androidx.versionedparcelable.ParcelImpl: void <init>(android.os.Parcel)>"
"<w0.t: java.lang.Object a(java.lang.Object)>","<w0.t: java.lang.Object a(java.lang.Object)>"
"<u0.w0: u0.f0 a()>","<u0.w0: u0.f0 a()>"
"<w.a$b: void <init>(android.graphics.Rect,w.a$d)>","<w.a$b: void <init>(android.graphics.Rect,w.a$d)>"
"<io.flutter.plugins.webviewflutter.k$e0$a: void <init>()>","<io.flutter.plugins.webviewflutter.k$e0$a: void <init>()>"
"<u0.k: java.lang.Object m(java.lang.Throwable)>","<u0.k: java.lang.Object m(java.lang.Throwable)>"
"<y.c: void <init>(java.lang.String,java.lang.String,java.lang.Object)>","<y.c: void <init>(java.lang.String,java.lang.String,java.lang.Object)>"
"<io.flutter.view.c$l: io.flutter.view.c$l j0(c0.d)>","<io.flutter.view.c$l: io.flutter.view.c$l j0(c0.d)>"
"<u0.o1$b: void <init>()>","<u0.o1$b: void <init>()>"
"<m.c$c: void <init>()>","<m.c$c: void <init>()>"
"<t0.d: boolean r(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>","<t0.d: boolean r(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)>"
"<x.k$a: void j(y.h,y.i$d)>","<x.k$a: void j(y.h,y.i$d)>"
"<x.i$h: void g(x.i$g)>","<x.i$h: void g(x.i$g)>"
"<u0.j0: void <clinit>()>","<u0.j0: void <clinit>()>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<io.flutter.plugin.platform.q$a: void u(io.flutter.plugin.platform.r,float,x.k$b)>","<io.flutter.plugin.platform.q$a: void u(io.flutter.plugin.platform.r,float,x.k$b)>"
"<androidx.window.embedding.SplitRuleParser: void <init>()>","<androidx.window.embedding.SplitRuleParser: void <init>()>"
"<f.a$a: void <init>(android.view.Window,android.view.View)>","<f.a$a: void <init>(android.view.Window,android.view.View)>"
"<io.flutter.embedding.android.e$c: io.flutter.embedding.android.v o()>","<io.flutter.embedding.android.e$c: io.flutter.embedding.android.v o()>"
"<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i l()>","<kotlinx.coroutines.scheduling.a$c: kotlinx.coroutines.scheduling.i l()>"
"<kotlinx.coroutines.internal.t: u0.y1 q()>","<kotlinx.coroutines.internal.t: u0.y1 q()>"
"<androidx.window.layout.FoldingFeature$Orientation: void <init>(java.lang.String)>","<androidx.window.layout.FoldingFeature$Orientation: void <init>(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.c0: y.g b()>","<io.flutter.plugins.webviewflutter.c0: y.g b()>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(x0.c,g0.d)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(x0.c,g0.d)>"
"<androidx.window.layout.DisplayCompatHelperApi28: void <init>()>","<androidx.window.layout.DisplayCompatHelperApi28: void <init>()>"
"<io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()>","<io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()>"
"<w.a$f: void c(io.flutter.view.d$a)>","<w.a$f: void c(io.flutter.view.d$a)>"
"<io.flutter.embedding.android.e: boolean f(io.flutter.embedding.android.e,boolean)>","<io.flutter.embedding.android.e: boolean f(io.flutter.embedding.android.e,boolean)>"
"<y0.a: g0.g$c getKey()>","<y0.a: g0.g$c getKey()>"
"<r0.b: java.lang.Object call(java.lang.Object[])>","<r0.b: java.lang.Object call(java.lang.Object[])>"
"<q0.f: q0.a f(int,int)>","<q0.f: q0.a f(int,int)>"
"<r0.g: r0.g[] values()>","<r0.g: r0.g[] values()>"
"<io.flutter.plugin.platform.q$a: void k(io.flutter.plugin.platform.q$a,x.k$d,android.view.View,boolean)>","<io.flutter.plugin.platform.q$a: void k(io.flutter.plugin.platform.q$a,x.k$d,android.view.View,boolean)>"
"<kotlinx.coroutines.internal.t: void m(g0.g,java.lang.Runnable)>","<kotlinx.coroutines.internal.t: void m(g0.g,java.lang.Runnable)>"
"<k.b: android.webkit.WebMessage b(j.c)>","<k.b: android.webkit.WebMessage b(j.c)>"
"<w0.a$a: java.lang.Object a(g0.d)>","<w0.a$a: java.lang.Object a(g0.d)>"
"<io.flutter.plugin.platform.q: int y(io.flutter.plugin.platform.q,double)>","<io.flutter.plugin.platform.q: int y(io.flutter.plugin.platform.q,double)>"
"<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o m(kotlinx.coroutines.internal.o)>","<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o m(kotlinx.coroutines.internal.o)>"
"<x.i$f: x.i$f valueOf(java.lang.String)>","<x.i$f: x.i$f valueOf(java.lang.String)>"
"<d0.q: void <clinit>()>","<d0.q: void <clinit>()>"
"<x.p$f: void h(double,double,double[])>","<x.p$f: void h(double,double,double[])>"
"<kotlinx.coroutines.CoroutineExceptionHandler$a: void <clinit>()>","<kotlinx.coroutines.CoroutineExceptionHandler$a: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$y: void a(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void a(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<io.flutter.plugin.platform.q$a: void f(int,int)>","<io.flutter.plugin.platform.q$a: void f(int,int)>"
"<u0.h: u0.o1 b(u0.l0,g0.g,u0.n0,n0.p,int,java.lang.Object)>","<u0.h: u0.o1 b(u0.l0,g0.g,u0.n0,n0.p,int,java.lang.Object)>"
"<io.flutter.view.c$l: boolean N(io.flutter.view.c$l,boolean)>","<io.flutter.view.c$l: boolean N(io.flutter.view.c$l,boolean)>"
"<io.flutter.embedding.android.f: void <init>(java.lang.String,int)>","<io.flutter.embedding.android.f: void <init>(java.lang.String,int)>"
"<io.flutter.embedding.android.k: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>","<io.flutter.embedding.android.k: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>"
"<io.flutter.view.c: android.view.View c(io.flutter.view.c)>","<io.flutter.view.c: android.view.View c(io.flutter.view.c)>"
"<d0.d: void <init>()>","<d0.d: void <init>()>"
"<kotlinx.coroutines.internal.a: void <init>()>","<kotlinx.coroutines.internal.a: void <init>()>"
"<io.flutter.embedding.android.FlutterSplashView: void <clinit>()>","<io.flutter.embedding.android.FlutterSplashView: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$y: void j(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void j(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()>","<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()>"
"<x.p: x.p$f a(x.p)>","<x.p: x.p$f a(x.p)>"
"<androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)>"
"<g0.g$b: g0.g$b get(g0.g$c)>","<g0.g$b: g0.g$b get(g0.g$c)>"
"<w0.a: java.lang.Object v()>","<w0.a: java.lang.Object v()>"
"<kotlinx.coroutines.scheduling.a$c: boolean i()>","<kotlinx.coroutines.scheduling.a$c: boolean i()>"
"<o.d: void <init>()>","<o.d: void <init>()>"
"<io.flutter.plugin.editing.f$a: void c()>","<io.flutter.plugin.editing.f$a: void c()>"
"<b.c$c: int hashCode()>","<b.c$c: int hashCode()>"
"<io.flutter.plugins.webviewflutter.k$c0: void c(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$c0: void c(java.lang.Boolean)>"
"<u0.r0: java.lang.Thread A()>","<u0.r0: java.lang.Thread A()>"
"<v0.c: void <clinit>()>","<v0.c: void <clinit>()>"
"<io.flutter.plugin.platform.q: android.view.MotionEvent$PointerCoords c0(java.lang.Object,float)>","<io.flutter.plugin.platform.q: android.view.MotionEvent$PointerCoords c0(java.lang.Object,float)>"
"<k.k: k.n c()>","<k.k: k.n c()>"
"<io.flutter.plugins.webviewflutter.q3$a: android.view.View getView()>","<io.flutter.plugins.webviewflutter.q3$a: android.view.View getView()>"
"<x.i: java.util.List k(org.json.JSONArray)>","<x.i: java.util.List k(org.json.JSONArray)>"
"<kotlinx.coroutines.android.AndroidDispatcherFactory: void <init>()>","<kotlinx.coroutines.android.AndroidDispatcherFactory: void <init>()>"
"<g0.c$a: void <clinit>()>","<g0.c$a: void <clinit>()>"
"<androidx.lifecycle.c$b: androidx.lifecycle.c$b valueOf(java.lang.String)>","<androidx.lifecycle.c$b: androidx.lifecycle.c$b valueOf(java.lang.String)>"
"<io.flutter.plugin.platform.q$a: void a(int)>","<io.flutter.plugin.platform.q$a: void a(int)>"
"<x.l: byte[] a(x.l)>","<x.l: byte[] a(x.l)>"
"<io.flutter.embedding.engine.a$b: void a()>","<io.flutter.embedding.engine.a$b: void a()>"
"<org.chromium.support_lib_boundary.StaticsBoundaryInterface: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>","<org.chromium.support_lib_boundary.StaticsBoundaryInterface: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>"
"<io.flutter.view.c$l: int l(io.flutter.view.c$l,int)>","<io.flutter.view.c$l: int l(io.flutter.view.c$l,int)>"
"<io.flutter.plugin.editing.c$a: android.text.Editable getEditable()>","<io.flutter.plugin.editing.c$a: android.text.Editable getEditable()>"
"<androidx.core.app.CoreComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>","<androidx.core.app.CoreComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>"
"<io.flutter.plugin.editing.f$a: void <init>(io.flutter.plugin.editing.f)>","<io.flutter.plugin.editing.f$a: void <init>(io.flutter.plugin.editing.f)>"
"<io.flutter.plugin.platform.r$a: void onViewAttachedToWindow(android.view.View)>","<io.flutter.plugin.platform.r$a: void onViewAttachedToWindow(android.view.View)>"
"<v0.a: v0.a t()>","<v0.a: v0.a t()>"
"<q.a$a: java.lang.String a(java.lang.String)>","<q.a$a: java.lang.String a(java.lang.String)>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void a(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void a(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)>"
"<kotlin.jvm.internal.n: void <init>()>","<kotlin.jvm.internal.n: void <init>()>"
"<io.flutter.plugin.platform.q: io.flutter.plugin.platform.i l(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: io.flutter.plugin.platform.i l(io.flutter.plugin.platform.q)>"
"<u0.w0: u0.f0 b()>","<u0.w0: u0.f0 b()>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$b c(io.flutter.plugin.platform.SingleViewPresentation$e)>","<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$b c(io.flutter.plugin.platform.SingleViewPresentation$e)>"
"<io.flutter.embedding.android.k: boolean onGenericMotionEvent(android.view.MotionEvent)>","<io.flutter.embedding.android.k: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<o.d$b: void <init>(java.lang.String,java.lang.String,java.lang.String,o.d$a)>","<o.d$b: void <init>(java.lang.String,java.lang.String,java.lang.String,o.d$a)>"
"<u0.l: java.lang.String D()>","<u0.l: java.lang.String D()>"
"<androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()>","<androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()>"
"<k.a$h: void <init>(java.lang.String,java.lang.String)>","<k.a$h: void <init>(java.lang.String,java.lang.String)>"
"<u0.b1: void <init>()>","<u0.b1: void <init>()>"
"<a.b: java.lang.String toString()>","<a.b: java.lang.String toString()>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void <init>(android.app.Activity)>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void <init>(android.app.Activity)>"
"<x.i$k: void <clinit>()>","<x.i$k: void <clinit>()>"
"<io.flutter.embedding.android.b: android.os.Bundle d()>","<io.flutter.embedding.android.b: android.os.Bundle d()>"
"<c0.b: java.lang.String b(android.content.Context)>","<c0.b: java.lang.String b(android.content.Context)>"
"<io.flutter.embedding.android.k: boolean x(android.view.textservice.SpellCheckerInfo)>","<io.flutter.embedding.android.k: boolean x(android.view.textservice.SpellCheckerInfo)>"
"<y.e: java.lang.Object f(java.nio.ByteBuffer)>","<y.e: java.lang.Object f(java.nio.ByteBuffer)>"
"<androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()>","<androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()>"
"<u0.a1$a: boolean i(long)>","<u0.a1$a: boolean i(long)>"
"<androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)>","<androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)>"
"<kotlin.jvm.internal.l: java.lang.String e(kotlin.jvm.internal.j)>","<kotlin.jvm.internal.l: java.lang.String e(kotlin.jvm.internal.j)>"
"<k.d: java.lang.ClassLoader b()>","<k.d: java.lang.ClassLoader b()>"
"<a.b$e: a.b$c c(a.b$c)>","<a.b$e: a.b$c c(a.b$c)>"
"<u0.j2: void <clinit>()>","<u0.j2: void <clinit>()>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)>","<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)>"
"<kotlin.jvm.internal.n: java.lang.Throwable d(java.lang.Throwable)>","<kotlin.jvm.internal.n: java.lang.Throwable d(java.lang.Throwable)>"
"<io.flutter.view.e: void <init>(io.flutter.embedding.engine.FlutterJNI)>","<io.flutter.view.e: void <init>(io.flutter.embedding.engine.FlutterJNI)>"
"<kotlinx.coroutines.scheduling.a$c: void t()>","<kotlinx.coroutines.scheduling.a$c: void t()>"
"<u0.i2: void <init>()>","<u0.i2: void <init>()>"
"<io.flutter.plugins.webviewflutter.f2: void s(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void s(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.x b(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.x b(io.flutter.embedding.android.FlutterSplashView)>"
"<c0.h: boolean b(java.lang.Class[],android.view.View)>","<c0.h: boolean b(java.lang.Class[],android.view.View)>"
"<io.flutter.embedding.android.e$c: boolean w()>","<io.flutter.embedding.android.e$c: boolean w()>"
"<y.q: java.lang.Object a(java.nio.ByteBuffer)>","<y.q: java.lang.Object a(java.nio.ByteBuffer)>"
"<io.flutter.plugins.webviewflutter.y2$c: void <init>()>","<io.flutter.plugins.webviewflutter.y2$c: void <init>()>"
"<kotlinx.coroutines.internal.d0$c: void <clinit>()>","<kotlinx.coroutines.internal.d0$c: void <clinit>()>"
"<u0.b0: void <init>(java.lang.String,java.lang.Throwable)>","<u0.b0: void <init>(java.lang.String,java.lang.Throwable)>"
"<kotlin.coroutines.jvm.internal.d: void <init>(g0.d)>","<kotlin.coroutines.jvm.internal.d: void <init>(g0.d)>"
"<kotlinx.coroutines.scheduling.a$a: void <init>()>","<kotlinx.coroutines.scheduling.a$a: void <init>()>"
"<e0.y: java.util.Map c(java.util.Map)>","<e0.y: java.util.Map c(java.util.Map)>"
"<l.a$b: void b()>","<l.a$b: void b()>"
"<io.flutter.plugins.webviewflutter.e: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.e$a,io.flutter.plugins.webviewflutter.d)>","<io.flutter.plugins.webviewflutter.e: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.e$a,io.flutter.plugins.webviewflutter.d)>"
"<u0.i2: g0.g$c getKey()>","<u0.i2: g0.g$c getKey()>"
"<y.j: java.nio.ByteBuffer c(java.lang.String,java.lang.String,java.lang.Object)>","<y.j: java.nio.ByteBuffer c(java.lang.String,java.lang.String,java.lang.Object)>"
"<io.flutter.embedding.android.FlutterSplashView$c: void run()>","<io.flutter.embedding.android.FlutterSplashView$c: void run()>"
"<u0.v1$b: java.lang.Throwable f()>","<u0.v1$b: java.lang.Throwable f()>"
"<io.flutter.view.d$c: void c(io.flutter.view.d$a)>","<io.flutter.view.d$c: void c(io.flutter.view.d$a)>"
"<x.l: java.util.Map e(x.l,byte[])>","<x.l: java.util.Map e(x.l,byte[])>"
"<c0.b: java.lang.String d(android.content.Context)>","<c0.b: java.lang.String d(android.content.Context)>"
"<u0.l: g0.d c()>","<u0.l: g0.d c()>"
"<b.a$a: int d()>","<b.a$a: int d()>"
"<u0.n1: void <init>(n0.l)>","<u0.n1: void <init>(n0.l)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<y0.a: g0.g plus(g0.g)>","<y0.a: g0.g plus(g0.g)>"
"<y0.d$a: void <clinit>()>","<y0.d$a: void <clinit>()>"
"<u0.w1: u0.y0 d()>","<u0.w1: u0.y0 d()>"
"<t0.d: java.lang.String e(java.lang.String)>","<t0.d: java.lang.String e(java.lang.String)>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)>","<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)>"
"<u0.l: java.lang.Object w()>","<u0.l: java.lang.Object w()>"
"<io.flutter.view.c$l: boolean U(io.flutter.view.c$l,io.flutter.view.c$g)>","<io.flutter.view.c$l: boolean U(io.flutter.view.c$l,io.flutter.view.c$g)>"
"<u0.w1: kotlinx.coroutines.internal.z a()>","<u0.w1: kotlinx.coroutines.internal.z a()>"
"<io.flutter.plugins.webviewflutter.x2: io.flutter.plugins.webviewflutter.k$s x(j.e)>","<io.flutter.plugins.webviewflutter.x2: io.flutter.plugins.webviewflutter.k$s x(j.e)>"
"<io.flutter.embedding.engine.e: java.lang.String[] b()>","<io.flutter.embedding.engine.e: java.lang.String[] b()>"
"<io.flutter.embedding.android.k: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>","<io.flutter.embedding.android.k: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>"
"<u0.f2: void <init>()>","<u0.f2: void <init>()>"
"<x.i$i: x.i$i[] values()>","<x.i$i: x.i$i[] values()>"
"<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>","<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()>"
"<k.f: org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface getWebkitToCompatConverter()>","<k.f: org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface getWebkitToCompatConverter()>"
"<t0.d: boolean o(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>","<t0.d: boolean o(java.lang.String,java.lang.String,boolean,int,java.lang.Object)>"
"<x.i$h: void c()>","<x.i$h: void c()>"
"<io.flutter.embedding.android.i: android.view.Surface j(io.flutter.embedding.android.i,android.view.Surface)>","<io.flutter.embedding.android.i: android.view.Surface j(io.flutter.embedding.android.i,android.view.Surface)>"
"<io.flutter.plugin.platform.q$a: long n(io.flutter.plugin.platform.f,x.k$d)>","<io.flutter.plugin.platform.q$a: long n(io.flutter.plugin.platform.f,x.k$d)>"
"<io.flutter.plugins.webviewflutter.q3$d: io.flutter.plugins.webviewflutter.q3$a a(android.content.Context,android.view.View)>","<io.flutter.plugins.webviewflutter.q3$d: io.flutter.plugins.webviewflutter.q3$a a(android.content.Context,android.view.View)>"
"<x.i: void <init>(m.a)>","<x.i: void <init>(m.a)>"
"<io.flutter.plugins.webviewflutter.k$u: void n(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void n(java.lang.Long,java.lang.Boolean)>"
"<w0.a$a: boolean c(java.lang.Object)>","<w0.a$a: boolean c(java.lang.Object)>"
"<io.flutter.embedding.android.e$a: void <init>(io.flutter.embedding.android.e)>","<io.flutter.embedding.android.e$a: void <init>(io.flutter.embedding.android.e)>"
"<b.c$b: boolean addAll(java.util.Collection)>","<b.c$b: boolean addAll(java.util.Collection)>"
"<io.flutter.embedding.android.k: void z(w.b)>","<io.flutter.embedding.android.k: void z(w.b)>"
"<y0.c: java.lang.Object invokeSuspend(java.lang.Object)>","<y0.c: java.lang.Object invokeSuspend(java.lang.Object)>"
"<kotlinx.coroutines.internal.n: java.lang.Object a()>","<kotlinx.coroutines.internal.n: java.lang.Object a()>"
"<w.a: void <init>(io.flutter.embedding.engine.FlutterJNI)>","<w.a: void <init>(io.flutter.embedding.engine.FlutterJNI)>"
"<u0.p1: void <init>(java.lang.String,java.lang.Throwable,u0.o1)>","<u0.p1: void <init>(java.lang.String,java.lang.Throwable,u0.o1)>"
"<kotlinx.coroutines.scheduling.a$d: void <init>(java.lang.String,int)>","<kotlinx.coroutines.scheduling.a$d: void <init>(java.lang.String,int)>"
"<u0.a1: java.lang.Runnable F()>","<u0.a1: java.lang.Runnable F()>"
"<io.flutter.view.AccessibilityViewEmbedder$c: int hashCode()>","<io.flutter.view.AccessibilityViewEmbedder$c: int hashCode()>"
"<kotlinx.coroutines.internal.d0$c: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.d0$c: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<r.c$a: void e(android.os.Bundle)>","<r.c$a: void e(android.os.Bundle)>"
"<u0.d1: kotlinx.coroutines.internal.z a()>","<u0.d1: kotlinx.coroutines.internal.z a()>"
"<x.i$h: void i(java.util.List)>","<x.i$h: void i(java.util.List)>"
"<r0.g: r0.g valueOf(java.lang.String)>","<r0.g: r0.g valueOf(java.lang.String)>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)>"
"<kotlinx.coroutines.internal.j: java.util.List d(java.lang.Class,java.lang.ClassLoader)>","<kotlinx.coroutines.internal.j: java.util.List d(java.lang.Class,java.lang.ClassLoader)>"
"<u0.k$a: java.lang.Object a(u0.k,java.lang.Object,java.lang.Object,int,java.lang.Object)>","<u0.k$a: java.lang.Object a(u0.k,java.lang.Object,java.lang.Object,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$c0: void b(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$c0: void b(java.lang.Long,java.lang.Boolean)>"
"<w0.c: java.lang.String toString()>","<w0.c: java.lang.String toString()>"
"<kotlin.jvm.internal.d: void <clinit>()>","<kotlin.jvm.internal.d: void <clinit>()>"
"<a0.a$a: void a(java.lang.String)>","<a0.a$a: void a(java.lang.String)>"
"<androidx.window.embedding.SplitPairRule: void <init>(java.util.Set,boolean,boolean,boolean,int,int,float,int)>","<androidx.window.embedding.SplitPairRule: void <init>(java.util.Set,boolean,boolean,boolean,int,int,float,int)>"
"<androidx.window.embedding.MatcherUtils: void <clinit>()>","<androidx.window.embedding.MatcherUtils: void <clinit>()>"
"<w0.i$a: boolean equals(java.lang.Object)>","<w0.i$a: boolean equals(java.lang.Object)>"
"<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q c(long)>","<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q c(long)>"
"<u0.t1: u0.w a(u0.o1)>","<u0.t1: u0.w a(u0.o1)>"
"<u0.f: java.lang.Thread A()>","<u0.f: java.lang.Thread A()>"
"<kotlinx.coroutines.internal.g: void <clinit>()>","<kotlinx.coroutines.internal.g: void <clinit>()>"
"<androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()>","<androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()>"
"<b.c: java.lang.Object[] r(java.lang.Object[],int)>","<b.c: java.lang.Object[] r(java.lang.Object[],int)>"
"<x.h$a: void <init>(x.h)>","<x.h$a: void <init>(x.h)>"
"<x.k$f: void <init>(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int,long)>","<x.k$f: void <init>(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int,long)>"
"<androidx.core.content.a$a: java.util.concurrent.Executor a(android.content.Context)>","<androidx.core.content.a$a: java.util.concurrent.Executor a(android.content.Context)>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend: void <init>(androidx.window.extensions.layout.WindowLayoutComponent)>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend: void <init>(androidx.window.extensions.layout.WindowLayoutComponent)>"
"<kotlin.jvm.internal.a: java.lang.Object callBy(java.util.Map)>","<kotlin.jvm.internal.a: java.lang.Object callBy(java.util.Map)>"
"<io.flutter.plugin.platform.q$a: void i(x.k$d)>","<io.flutter.plugin.platform.q$a: void i(x.k$d)>"
"<androidx.lifecycle.c$b: androidx.lifecycle.c$b[] values()>","<androidx.lifecycle.c$b: androidx.lifecycle.c$b[] values()>"
"<x.i$i: x.i$i valueOf(java.lang.String)>","<x.i$i: x.i$i valueOf(java.lang.String)>"
"<k.k: java.lang.ClassLoader e()>","<k.k: java.lang.ClassLoader e()>"
"<io.flutter.plugins.webviewflutter.y2$b: void p(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void p(java.lang.Void)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: e.a getCallback()>","<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: e.a getCallback()>"
"<io.flutter.plugin.platform.SingleViewPresentation$d: void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$f,android.content.Context)>","<io.flutter.plugin.platform.SingleViewPresentation$d: void <init>(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$f,android.content.Context)>"
"<m.a: java.lang.String e(m.a,java.lang.String)>","<m.a: java.lang.String e(m.a,java.lang.String)>"
"<g0.a: java.lang.Object fold(java.lang.Object,n0.p)>","<g0.a: java.lang.Object fold(java.lang.Object,n0.p)>"
"<u0.v1: java.lang.Object A(java.lang.Object)>","<u0.v1: java.lang.Object A(java.lang.Object)>"
"<io.flutter.embedding.android.i$a: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>","<io.flutter.embedding.android.i$a: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>"
"<io.flutter.plugins.webviewflutter.q3$d: void <init>()>","<io.flutter.plugins.webviewflutter.q3$d: void <init>()>"
"<x.i$k: x.i$k valueOf(java.lang.String)>","<x.i$k: x.i$k valueOf(java.lang.String)>"
"<v0.a: java.lang.String toString()>","<v0.a: java.lang.String toString()>"
"<y.e: java.nio.ByteBuffer b(y.h)>","<y.e: java.nio.ByteBuffer b(y.h)>"
"<io.flutter.embedding.android.e$b: void <init>(io.flutter.embedding.android.e,io.flutter.embedding.android.k)>","<io.flutter.embedding.android.e$b: void <init>(io.flutter.embedding.android.e,io.flutter.embedding.android.k)>"
"<a1.a: java.lang.Object a(java.lang.Class,java.lang.reflect.InvocationHandler)>","<a1.a: java.lang.Object a(java.lang.Class,java.lang.reflect.InvocationHandler)>"
"<io.flutter.embedding.android.r: void <init>(y.b)>","<io.flutter.embedding.android.r: void <init>(y.b)>"
"<kotlinx.coroutines.internal.j: java.lang.Object a(java.lang.String,java.lang.ClassLoader,java.lang.Class)>","<kotlinx.coroutines.internal.j: java.lang.Object a(java.lang.String,java.lang.ClassLoader,java.lang.Class)>"
"<io.flutter.plugins.webviewflutter.w2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.w2$a)>","<io.flutter.plugins.webviewflutter.w2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.w2$a)>"
"<io.flutter.plugin.platform.SingleViewPresentation$c: java.lang.Object getSystemService(java.lang.String)>","<io.flutter.plugin.platform.SingleViewPresentation$c: java.lang.Object getSystemService(java.lang.String)>"
"<x.g$a: void a(y.h,y.i$d)>","<x.g$a: void a(y.h,y.i$d)>"
"<io.flutter.plugin.platform.SingleViewPresentation$b: void onMeasure(int,int)>","<io.flutter.plugin.platform.SingleViewPresentation$b: void onMeasure(int,int)>"
"<io.flutter.plugins.webviewflutter.k$o: void a(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$o: void a(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>"
"<u0.d2: void <init>(g0.g,boolean)>","<u0.d2: void <init>(g0.g,boolean)>"
"<kotlinx.coroutines.android.AndroidDispatcherFactory: v0.a createDispatcher(java.util.List)>","<kotlinx.coroutines.android.AndroidDispatcherFactory: v0.a createDispatcher(java.util.List)>"
"<u0.j0: java.lang.String toString()>","<u0.j0: java.lang.String toString()>"
"<u0.a2: u0.o1 getParent()>","<u0.a2: u0.o1 getParent()>"
"<o0.a: java.util.Random c()>","<o0.a: java.util.Random c()>"
"<f.a$e: void a(boolean)>","<f.a$e: void a(boolean)>"
"<b.c: java.lang.Object b(int,int)>","<b.c: java.lang.Object b(int,int)>"
"<p0.a: java.util.Random c()>","<p0.a: java.util.Random c()>"
"<io.flutter.plugins.webviewflutter.h$a: java.lang.String a(java.lang.String)>","<io.flutter.plugins.webviewflutter.h$a: java.lang.String a(java.lang.String)>"
"<io.flutter.embedding.android.g: android.media.ImageReader g(int,int)>","<io.flutter.embedding.android.g: android.media.ImageReader g(int,int)>"
"<io.flutter.embedding.android.e: boolean e(io.flutter.embedding.android.e,boolean)>","<io.flutter.embedding.android.e: boolean e(io.flutter.embedding.android.e,boolean)>"
"<a0.a$c: android.view.PointerIcon b(int)>","<a0.a$c: android.view.PointerIcon b(int)>"
"<g0.h: g0.g plus(g0.g)>","<g0.h: g0.g plus(g0.g)>"
"<kotlinx.coroutines.scheduling.a$d: kotlinx.coroutines.scheduling.a$d[] values()>","<kotlinx.coroutines.scheduling.a$d: kotlinx.coroutines.scheduling.a$d[] values()>"
"<h0.c$a: void <init>(g0.d,n0.p,java.lang.Object)>","<h0.c$a: void <init>(g0.d,n0.p,java.lang.Object)>"
"<kotlinx.coroutines.internal.s: void <clinit>()>","<kotlinx.coroutines.internal.s: void <clinit>()>"
"<androidx.window.embedding.SplitController$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.embedding.SplitController$Companion: void <init>(kotlin.jvm.internal.e)>"
"<w0.k: void <init>(java.lang.String)>","<w0.k: void <init>(java.lang.String)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()>","<androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()>"
"<r.c: android.app.Activity a()>","<r.c: android.app.Activity a()>"
"<d0.p: void <init>()>","<d0.p: void <init>()>"
"<androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)>","<androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)>"
"<q.a$b: io.flutter.plugin.platform.h d()>","<q.a$b: io.flutter.plugin.platform.h d()>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: void <init>(x0.b,e.a,g0.d)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: void <init>(x0.b,e.a,g0.d)>"
"<io.flutter.embedding.android.h: void <init>(android.content.Context,android.util.AttributeSet,boolean)>","<io.flutter.embedding.android.h: void <init>(android.content.Context,android.util.AttributeSet,boolean)>"
"<w0.l: void <init>(java.lang.String)>","<w0.l: void <init>(java.lang.String)>"
"<x.h: void <init>(m.a)>","<x.h: void <init>(m.a)>"
"<io.flutter.plugins.webviewflutter.y2$d: void e(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void e(java.lang.Void)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()>"
"<u0.o1$a: g0.g e(u0.o1,g0.g$c)>","<u0.o1$a: g0.g e(u0.o1,g0.g$c)>"
"<androidx.window.layout.FoldingFeature$OcclusionType: void <clinit>()>","<androidx.window.layout.FoldingFeature$OcclusionType: void <clinit>()>"
"<w0.e: void <clinit>()>","<w0.e: void <clinit>()>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<io.flutter.plugins.webviewflutter.y2$d: void a()>","<io.flutter.plugins.webviewflutter.y2$d: void a()>"
"<io.flutter.embedding.android.e$c: io.flutter.plugin.platform.c B(android.app.Activity,io.flutter.embedding.engine.a)>","<io.flutter.embedding.android.e$c: io.flutter.plugin.platform.c B(android.app.Activity,io.flutter.embedding.engine.a)>"
"<io.flutter.plugins.webviewflutter.i: java.lang.String a(java.lang.String)>","<io.flutter.plugins.webviewflutter.i: java.lang.String a(java.lang.String)>"
"<io.flutter.view.c$m: void <init>()>","<io.flutter.view.c$m: void <init>()>"
"<u0.o1: void <clinit>()>","<u0.o1: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.n$a: void <init>(java.util.Map,y.a$e)>","<io.flutter.plugins.webviewflutter.n$a: void <init>(java.util.Map,y.a$e)>"
"<io.flutter.plugins.webviewflutter.c: void <init>()>","<io.flutter.plugins.webviewflutter.c: void <init>()>"
"<d0.k$b: int hashCode()>","<d0.k$b: int hashCode()>"
"<androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)>"
"<u0.l: java.lang.Throwable d(java.lang.Object)>","<u0.l: java.lang.Throwable d(java.lang.Object)>"
"<t0.d: boolean l(java.lang.CharSequence)>","<t0.d: boolean l(java.lang.CharSequence)>"
"<io.flutter.plugins.webviewflutter.h2: void <init>(io.flutter.plugins.webviewflutter.i2)>","<io.flutter.plugins.webviewflutter.h2: void <init>(io.flutter.plugins.webviewflutter.i2)>"
"<io.flutter.plugins.webviewflutter.q3$c: void f()>","<io.flutter.plugins.webviewflutter.q3$c: void f()>"
"<r.c$a: void a(android.os.Bundle)>","<r.c$a: void a(android.os.Bundle)>"
"<x.i$a: void <init>(x.i)>","<x.i$a: void <init>(x.i)>"
"<io.flutter.plugins.webviewflutter.f2: void v(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void v(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<kotlin.coroutines.jvm.internal.f: java.lang.String m()>","<kotlin.coroutines.jvm.internal.f: java.lang.String m()>"
"<q.a$b: void <init>(android.content.Context,io.flutter.embedding.engine.a,y.b,io.flutter.view.d,io.flutter.plugin.platform.h,q.a$a)>","<q.a$b: void <init>(android.content.Context,io.flutter.embedding.engine.a,y.b,io.flutter.view.d,io.flutter.plugin.platform.h,q.a$a)>"
"<io.flutter.plugin.platform.j$c: void <init>(io.flutter.plugin.platform.j,android.view.View$OnFocusChangeListener)>","<io.flutter.plugin.platform.j$c: void <init>(io.flutter.plugin.platform.j,android.view.View$OnFocusChangeListener)>"
"<io.flutter.embedding.android.i$a: void <init>(io.flutter.embedding.android.i)>","<io.flutter.embedding.android.i$a: void <init>(io.flutter.embedding.android.i)>"
"<io.flutter.plugins.webviewflutter.f2: void r(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void r(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.internal.d0$c: void <init>()>","<kotlinx.coroutines.internal.d0$c: void <init>()>"
"<b.d: java.lang.String toString()>","<b.d: java.lang.String toString()>"
"<t0.l: java.lang.Integer f(java.lang.String)>","<t0.l: java.lang.Integer f(java.lang.String)>"
"<io.flutter.plugin.platform.q: io.flutter.embedding.android.k s(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: io.flutter.embedding.android.k s(io.flutter.plugin.platform.q)>"
"<kotlinx.coroutines.internal.i$d: void <init>(java.lang.reflect.Constructor)>","<kotlinx.coroutines.internal.i$d: void <init>(java.lang.reflect.Constructor)>"
"<io.flutter.embedding.android.FlutterSplashView$b: void <init>(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView$b: void <init>(io.flutter.embedding.android.FlutterSplashView)>"
"<g0.g$b$a: g0.g d(g0.g$b,g0.g)>","<g0.g$b$a: g0.g d(g0.g$b,g0.g)>"
"<m.a: m.a$d f(m.a)>","<m.a: m.a$d f(m.a)>"
"<b.c$d: java.lang.Object setValue(java.lang.Object)>","<b.c$d: java.lang.Object setValue(java.lang.Object)>"
"<kotlinx.coroutines.internal.i$b: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.i$b: java.lang.Object invoke(java.lang.Object)>"
"<e0.h: java.util.List a(java.lang.Object)>","<e0.h: java.util.List a(java.lang.Object)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: int b(long)>","<io.flutter.view.AccessibilityViewEmbedder$b: int b(long)>"
"<x.p$b: void <init>(boolean,boolean,boolean,boolean,boolean,x.p$d,x.p$c,java.lang.Integer,java.lang.String,x.p$b$a,java.lang.String[],x.p$b[])>","<x.p$b: void <init>(boolean,boolean,boolean,boolean,boolean,x.p$d,x.p$c,java.lang.Integer,java.lang.String,x.p$b$a,java.lang.String[],x.p$b[])>"
"<s0.f: s0.b b(s0.b)>","<s0.f: s0.b b(s0.b)>"
"<j.c: java.lang.String a()>","<j.c: java.lang.String a()>"
"<androidx.window.embedding.SplitPlaceholderRule: void <init>(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.e)>","<androidx.window.embedding.SplitPlaceholderRule: void <init>(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.e)>"
"<io.flutter.plugin.platform.SingleViewPresentation$d: boolean b()>","<io.flutter.plugin.platform.SingleViewPresentation$d: boolean b()>"
"<io.flutter.view.c$g: void <clinit>()>","<io.flutter.view.c$g: void <clinit>()>"
"<io.flutter.embedding.android.k: y.b getBinaryMessenger()>","<io.flutter.embedding.android.k: y.b getBinaryMessenger()>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getStatics()>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getStatics()>"
"<kotlinx.coroutines.scheduling.m: void <init>()>","<kotlinx.coroutines.scheduling.m: void <init>()>"
"<w.a$e: void run()>","<w.a$e: void run()>"
"<u0.n0$a: void <clinit>()>","<u0.n0$a: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t a()>","<io.flutter.plugins.webviewflutter.k$t$a: io.flutter.plugins.webviewflutter.k$t a()>"
"<u0.a1$a: void b()>","<u0.a1$a: void b()>"
"<io.flutter.plugins.webviewflutter.g2: void <init>(android.content.Context,android.view.View)>","<io.flutter.plugins.webviewflutter.g2: void <init>(android.content.Context,android.view.View)>"
"<io.flutter.embedding.android.b: android.view.View c(android.content.Context,android.os.Bundle)>","<io.flutter.embedding.android.b: android.view.View c(android.content.Context,android.os.Bundle)>"
"<u0.c: void <clinit>()>","<u0.c: void <clinit>()>"
"<g0.h: g0.g$b get(g0.g$c)>","<g0.h: g0.g$b get(g0.g$c)>"
"<io.flutter.view.c$l: boolean A0(io.flutter.view.c$l,c0.d)>","<io.flutter.view.c$l: boolean A0(io.flutter.view.c$l,c0.d)>"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler[] createWebMessageChannel()>","<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler[] createWebMessageChannel()>"
"<b.c$d: java.lang.Object next()>","<b.c$d: java.lang.Object next()>"
"<f.a: void <init>(android.view.Window,android.view.View)>","<f.a: void <init>(android.view.Window,android.view.View)>"
"<k.a$g: boolean c()>","<k.a$g: boolean c()>"
"<c0.b: java.lang.String c(android.content.Context)>","<c0.b: java.lang.String c(android.content.Context)>"
"<io.flutter.plugins.webviewflutter.k$u: void j(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void j(java.lang.Long,java.lang.Boolean)>"
"<io.flutter.plugins.webviewflutter.k$b0: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$b0: void <clinit>()>"
"<u0.v1: u0.r Z(kotlinx.coroutines.internal.o)>","<u0.v1: u0.r Z(kotlinx.coroutines.internal.o)>"
"<a.b$b: a.b$c b(a.b$c)>","<a.b$b: a.b$c b(a.b$c)>"
"<v0.b: void <init>()>","<v0.b: void <init>()>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void <clinit>()>","<androidx.window.embedding.ExtensionEmbeddingBackend: void <clinit>()>"
"<io.flutter.plugin.editing.f$a: void a(java.lang.String,android.os.Bundle)>","<io.flutter.plugin.editing.f$a: void a(java.lang.String,android.os.Bundle)>"
"<io.flutter.embedding.android.k$d: void <init>(io.flutter.embedding.android.k)>","<io.flutter.embedding.android.k$d: void <init>(io.flutter.embedding.android.k)>"
"<u0.v1: java.util.concurrent.CancellationException l0(java.lang.Throwable,java.lang.String)>","<u0.v1: java.util.concurrent.CancellationException l0(java.lang.Throwable,java.lang.String)>"
"<androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()>","<androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()>"
"<androidx.versionedparcelable.a: androidx.versionedparcelable.a b()>","<androidx.versionedparcelable.a: androidx.versionedparcelable.a b()>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)>","<androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)>"
"<y.h: java.lang.Object b()>","<y.h: java.lang.Object b()>"
"<u0.f0: void <init>()>","<u0.f0: void <init>()>"
"<io.flutter.plugin.platform.q: boolean v(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: boolean v(io.flutter.plugin.platform.q)>"
"<io.flutter.plugins.webviewflutter.y2$b: void a()>","<io.flutter.plugins.webviewflutter.y2$b: void a()>"
"<kotlinx.coroutines.internal.j: java.util.List c()>","<kotlinx.coroutines.internal.j: java.util.List c()>"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: android.webkit.WebChromeClient getWebChromeClient()>","<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: android.webkit.WebChromeClient getWebChromeClient()>"
"<m.a$a: void a(java.nio.ByteBuffer,y.b$b)>","<m.a$a: void a(java.nio.ByteBuffer,y.b$b)>"
"<k0.a: void <init>()>","<k0.a: void <init>()>"
"<io.flutter.plugins.webviewflutter.y2$d: void d(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void d(java.lang.Void)>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler createWebView(android.webkit.WebView)>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler createWebView(android.webkit.WebView)>"
"<kotlinx.coroutines.scheduling.a$c: void n(int)>","<kotlinx.coroutines.scheduling.a$c: void n(int)>"
"<io.flutter.view.c$l: int i(io.flutter.view.c$l)>","<io.flutter.view.c$l: int i(io.flutter.view.c$l)>"
"<e0.u: void <init>()>","<e0.u: void <init>()>"
"<io.flutter.plugins.webviewflutter.e$a: void <init>()>","<io.flutter.plugins.webviewflutter.e$a: void <init>()>"
"<x.m$a: x.m$a b(boolean)>","<x.m$a: x.m$a b(boolean)>"
"<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)>","<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)>"
"<x.i$d: x.i$d a(java.lang.String)>","<x.i$d: x.i$d a(java.lang.String)>"
"<x.i: x.i$j i(org.json.JSONObject)>","<x.i: x.i$j i(org.json.JSONObject)>"
"<x.g: void <init>(m.a)>","<x.g: void <init>(m.a)>"
"<w0.a$c: void <init>(w0.a,w0.o)>","<w0.a$c: void <init>(w0.a,w0.o)>"
"<io.flutter.plugins.webviewflutter.k$u: void l(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void l(java.lang.Long,java.lang.Boolean)>"
"<io.flutter.view.c$d: void onTouchExplorationStateChanged(boolean)>","<io.flutter.view.c$d: void onTouchExplorationStateChanged(boolean)>"
"<u0.w0: u0.y1 c()>","<u0.w0: u0.y1 c()>"
"<kotlinx.coroutines.internal.n: void <clinit>()>","<kotlinx.coroutines.internal.n: void <clinit>()>"
"<x.i$h: void d(x.i$i)>","<x.i$h: void d(x.i$i)>"
"<androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)>"
"<kotlinx.coroutines.internal.q: void <init>(int,boolean)>","<kotlinx.coroutines.internal.q: void <init>(int,boolean)>"
"<u0.x: java.lang.String toString()>","<u0.x: java.lang.String toString()>"
"<androidx.core.content.a: void <clinit>()>","<androidx.core.content.a: void <clinit>()>"
"<u0.l1: void <init>(n0.l)>","<u0.l1: void <init>(n0.l)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)>","<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)>"
"<x.i$b: void <clinit>()>","<x.i$b: void <clinit>()>"
"<u0.a0: void <init>()>","<u0.a0: void <init>()>"
"<androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()>","<androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()>"
"<u0.a1$a: int compareTo(java.lang.Object)>","<u0.a1$a: int compareTo(java.lang.Object)>"
"<u0.n1: java.lang.Object invoke(java.lang.Object)>","<u0.n1: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.embedding.android.t: io.flutter.embedding.android.t$e[] a()>","<io.flutter.embedding.android.t: io.flutter.embedding.android.t$e[] a()>"
"<u0.f2: u0.z0 a()>","<u0.f2: u0.z0 a()>"
"<w0.h: w0.f a(int,w0.e,n0.l)>","<w0.h: w0.f a(int,w0.e,n0.l)>"
"<kotlinx.coroutines.scheduling.a$c: void a(int)>","<kotlinx.coroutines.scheduling.a$c: void a(int)>"
"<io.flutter.plugins.webviewflutter.o3: void g(long)>","<io.flutter.plugins.webviewflutter.o3: void g(long)>"
"<androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()>","<androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()>"
"<s0.c: s0.b c(s0.b,n0.l)>","<s0.c: s0.b c(s0.b,n0.l)>"
"<io.flutter.view.c$l: io.flutter.view.c$l J(io.flutter.view.c$l,float[],boolean)>","<io.flutter.view.c$l: io.flutter.view.c$l J(io.flutter.view.c$l,float[],boolean)>"
"<y.h: void <init>(java.lang.String,java.lang.Object)>","<y.h: void <init>(java.lang.String,java.lang.Object)>"
"<io.flutter.plugin.platform.q: java.util.List d0(java.lang.Object,float)>","<io.flutter.plugin.platform.q: java.util.List d0(java.lang.Object,float)>"
"<b.c$b: boolean equals(java.lang.Object)>","<b.c$b: boolean equals(java.lang.Object)>"
"<u0.l: java.lang.Object m(java.lang.Throwable)>","<u0.l: java.lang.Object m(java.lang.Throwable)>"
"<io.flutter.view.c$l: void e0(java.util.List)>","<io.flutter.view.c$l: void e0(java.util.List)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)>"
"<androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)>","<androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)>"
"<io.flutter.embedding.android.h$a: void <init>(io.flutter.embedding.android.h)>","<io.flutter.embedding.android.h$a: void <init>(io.flutter.embedding.android.h)>"
"<kotlinx.coroutines.internal.v: java.lang.Object c(java.lang.Object)>","<kotlinx.coroutines.internal.v: java.lang.Object c(java.lang.Object)>"
"<io.flutter.view.c$l: java.lang.CharSequence p0()>","<io.flutter.view.c$l: java.lang.CharSequence p0()>"
"<io.flutter.plugins.webviewflutter.i2: java.lang.Object h(long)>","<io.flutter.plugins.webviewflutter.i2: java.lang.Object h(long)>"
"<android.support.v4.graphics.drawable.IconCompatParcelizer: void <init>()>","<android.support.v4.graphics.drawable.IconCompatParcelizer: void <init>()>"
"<f.a$d: void <init>(android.view.Window,f.a)>","<f.a$d: void <init>(android.view.Window,f.a)>"
"<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q b(long)>","<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q b(long)>"
"<x.i$l: void <clinit>()>","<x.i$l: void <clinit>()>"
"<io.flutter.plugin.platform.q: void A(io.flutter.plugin.platform.q,io.flutter.plugin.platform.r)>","<io.flutter.plugin.platform.q: void A(io.flutter.plugin.platform.q,io.flutter.plugin.platform.r)>"
"<io.flutter.embedding.android.u$a: void <init>(long)>","<io.flutter.embedding.android.u$a: void <init>(long)>"
"<y.i$b: void <init>(y.i,y.i$d)>","<y.i$b: void <init>(y.i,y.i$d)>"
"<u0.v1: java.lang.Object q0(java.lang.Object,java.lang.Object)>","<u0.v1: java.lang.Object q0(java.lang.Object,java.lang.Object)>"
"<k.l: java.lang.String[] a()>","<k.l: java.lang.String[] a()>"
"<d0.m: void <init>(n0.a,java.lang.Object,int,kotlin.jvm.internal.e)>","<d0.m: void <init>(n0.a,java.lang.Object,int,kotlin.jvm.internal.e)>"
"<y0.d: void <clinit>()>","<y0.d: void <clinit>()>"
"<k.n: java.lang.reflect.InvocationHandler b(android.webkit.SafeBrowsingResponse)>","<k.n: java.lang.reflect.InvocationHandler b(android.webkit.SafeBrowsingResponse)>"
"<u0.q0: java.lang.String a(java.lang.Object)>","<u0.q0: java.lang.String a(java.lang.Object)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend: void <init>(androidx.window.embedding.EmbeddingInterfaceCompat)>","<androidx.window.embedding.ExtensionEmbeddingBackend: void <init>(androidx.window.embedding.EmbeddingInterfaceCompat)>"
"<kotlin.jvm.internal.c: java.util.Map c()>","<kotlin.jvm.internal.c: java.util.Map c()>"
"<x0.e: x0.b a(n0.p)>","<x0.e: x0.b a(n0.p)>"
"<v0.a: void <init>(android.os.Handler,java.lang.String,boolean)>","<v0.a: void <init>(android.os.Handler,java.lang.String,boolean)>"
"<io.flutter.plugin.editing.f$a: void d()>","<io.flutter.plugin.editing.f$a: void d()>"
"<io.flutter.plugins.webviewflutter.q3$b: void b()>","<io.flutter.plugins.webviewflutter.q3$b: void b()>"
"<a.a: java.lang.Object f(java.lang.Object)>","<a.a: java.lang.Object f(java.lang.Object)>"
"<o0.b: void <init>()>","<o0.b: void <init>()>"
"<io.flutter.embedding.android.k: io.flutter.embedding.engine.a f(io.flutter.embedding.android.k)>","<io.flutter.embedding.android.k: io.flutter.embedding.engine.a f(io.flutter.embedding.android.k)>"
"<y.i: y.j a(y.i)>","<y.i: y.j a(y.i)>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(w0.f,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(w0.f,androidx.window.layout.WindowLayoutInfo)>"
"<io.flutter.embedding.android.FlutterSplashView: java.lang.String f(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView: java.lang.String f(io.flutter.embedding.android.FlutterSplashView)>"
"<k.j: java.lang.UnsupportedOperationException a()>","<k.j: java.lang.UnsupportedOperationException a()>"
"<e0.a: java.lang.Object h(java.lang.Object[])>","<e0.a: java.lang.Object h(java.lang.Object[])>"
"<io.flutter.plugin.editing.f$c$a: void <init>(java.lang.String,int)>","<io.flutter.plugin.editing.f$c$a: void <init>(java.lang.String,int)>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.f a(io.flutter.plugin.platform.SingleViewPresentation$e)>","<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.f a(io.flutter.plugin.platform.SingleViewPresentation$e)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)>","<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)>"
"<androidx.window.layout.FoldingFeature$Orientation: void <clinit>()>","<androidx.window.layout.FoldingFeature$Orientation: void <clinit>()>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long a(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityNodeInfo)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long a(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityNodeInfo)>"
"<androidx.window.layout.DisplayCompatHelperApi17: void <clinit>()>","<androidx.window.layout.DisplayCompatHelperApi17: void <clinit>()>"
"<kotlin.jvm.internal.h: void <init>(int,r0.d,java.lang.String,java.lang.String)>","<kotlin.jvm.internal.h: void <init>(int,r0.d,java.lang.String,java.lang.String)>"
"<io.flutter.plugin.editing.f$c$a: io.flutter.plugin.editing.f$c$a[] values()>","<io.flutter.plugin.editing.f$c$a: io.flutter.plugin.editing.f$c$a[] values()>"
"<androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()>","<androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()>"
"<t0.n$b: void <init>(java.lang.CharSequence)>","<t0.n$b: void <init>(java.lang.CharSequence)>"
"<kotlinx.coroutines.scheduling.a: java.lang.String toString()>","<kotlinx.coroutines.scheduling.a: java.lang.String toString()>"
"<t0.n: java.lang.String U(java.lang.String,char,java.lang.String)>","<t0.n: java.lang.String U(java.lang.String,char,java.lang.String)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)>"
"<io.flutter.plugins.webviewflutter.v2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.v2$a)>","<io.flutter.plugins.webviewflutter.v2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.v2$a)>"
"<io.flutter.plugins.webviewflutter.q3: java.lang.Boolean x(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: java.lang.Boolean x(java.lang.Long)>"
"<u0.v: void <init>()>","<u0.v: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$y: void c(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void c(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<androidx.window.layout.SidecarCompat: void <init>(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)>","<androidx.window.layout.SidecarCompat: void <init>(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)>"
"<io.flutter.embedding.android.e: io.flutter.embedding.android.e$c a(io.flutter.embedding.android.e)>","<io.flutter.embedding.android.e: io.flutter.embedding.android.e$c a(io.flutter.embedding.android.e)>"
"<io.flutter.plugins.webviewflutter.d1: y.g b()>","<io.flutter.plugins.webviewflutter.d1: y.g b()>"
"<a.b$d: java.lang.Object next()>","<a.b$d: java.lang.Object next()>"
"<androidx.window.layout.DisplayCompatHelperApi17: void <init>()>","<androidx.window.layout.DisplayCompatHelperApi17: void <init>()>"
"<g0.a: g0.g$b get(g0.g$c)>","<g0.a: g0.g$b get(g0.g$c)>"
"<io.flutter.view.c$l: boolean t0(io.flutter.view.c$i)>","<io.flutter.view.c$l: boolean t0(io.flutter.view.c$i)>"
"<androidx.lifecycle.g$b: void a(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.lifecycle.g$b: void a(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<io.flutter.plugins.webviewflutter.q3$a: void removeJavascriptInterface(java.lang.String)>","<io.flutter.plugins.webviewflutter.q3$a: void removeJavascriptInterface(java.lang.String)>"
"<androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()>","<androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()>"
"<e0.u: java.lang.Object[] toArray()>","<e0.u: java.lang.Object[] toArray()>"
"<c.a: android.graphics.drawable.Drawable a(android.content.res.Resources,int,android.content.res.Resources$Theme)>","<c.a: android.graphics.drawable.Drawable a(android.content.res.Resources,int,android.content.res.Resources$Theme)>"
"<io.flutter.plugins.webviewflutter.r2: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>","<io.flutter.plugins.webviewflutter.r2: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>"
"<androidx.window.embedding.ActivityStack: void <init>(java.util.List,boolean)>","<androidx.window.embedding.ActivityStack: void <init>(java.util.List,boolean)>"
"<o.d: java.lang.String h(java.lang.String)>","<o.d: java.lang.String h(java.lang.String)>"
"<g0.b: g0.g$b b(g0.g$b)>","<g0.b: g0.g$b b(g0.g$b)>"
"<androidx.core.app.CoreComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>","<androidx.core.app.CoreComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)>"
"<androidx.lifecycle.c$b: void <init>(java.lang.String,int)>","<androidx.lifecycle.c$b: void <init>(java.lang.String,int)>"
"<u0.k0: void <clinit>()>","<u0.k0: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.y2$b: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>","<io.flutter.plugins.webviewflutter.y2$b: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>"
"<androidx.window.layout.FoldingFeature$OcclusionType$Companion: void <init>()>","<androidx.window.layout.FoldingFeature$OcclusionType$Companion: void <init>()>"
"<kotlinx.coroutines.internal.j: void <clinit>()>","<kotlinx.coroutines.internal.j: void <clinit>()>"
"<h0.a: h0.a[] a()>","<h0.a: h0.a[] a()>"
"<io.flutter.view.c$h: java.lang.String a(io.flutter.view.c$h)>","<io.flutter.view.c$h: java.lang.String a(io.flutter.view.c$h)>"
"<x.i$h: java.lang.CharSequence b(x.i$e)>","<x.i$h: java.lang.CharSequence b(x.i$e)>"
"<b.c$b: boolean remove(java.lang.Object)>","<b.c$b: boolean remove(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$c0: java.lang.String g(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: java.lang.String g(java.lang.Long)>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void <init>(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,g0.d)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void <init>(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,g0.d)>"
"<x.k$g: void d(x.k$e,x.k$b)>","<x.k$g: void d(x.k$e,x.k$b)>"
"<e0.a: void d(java.lang.Object[],java.lang.Object,int,int)>","<e0.a: void d(java.lang.Object[],java.lang.Object,int,int)>"
"<io.flutter.embedding.engine.a: x.i m()>","<io.flutter.embedding.engine.a: x.i m()>"
"<y.f: java.lang.Object a(java.lang.Object)>","<y.f: java.lang.Object a(java.lang.Object)>"
"<androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()>","<androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()>"
"<e0.g: void f()>","<e0.g: void f()>"
"<q0.c: java.lang.String toString()>","<q0.c: java.lang.String toString()>"
"<i0.a$a: void <init>()>","<i0.a$a: void <init>()>"
"<io.flutter.embedding.android.u: io.flutter.embedding.android.u a()>","<io.flutter.embedding.android.u: io.flutter.embedding.android.u a()>"
"<l.a: o.d c()>","<l.a: o.d c()>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()>"
"<kotlin.jvm.internal.a: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>","<kotlin.jvm.internal.a: void <init>(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)>"
"<kotlinx.coroutines.internal.i$a: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.i$a: java.lang.Object invoke(java.lang.Object)>"
"<g0.e$b: void <init>()>","<g0.e$b: void <init>()>"
"<kotlinx.coroutines.internal.o$a: void d(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.o$a: void d(java.lang.Object,java.lang.Object)>"
"<y.b$b: void a(java.nio.ByteBuffer)>","<y.b$b: void a(java.nio.ByteBuffer)>"
"<y.i$d: void b(java.lang.String,java.lang.String,java.lang.Object)>","<y.i$d: void b(java.lang.String,java.lang.String,java.lang.Object)>"
"<u0.f: void <init>(java.lang.Thread)>","<u0.f: void <init>(java.lang.Thread)>"
"<k.a$g: void <init>(java.lang.String,java.lang.String)>","<k.a$g: void <init>(java.lang.String,java.lang.String)>"
"<l.a$b$a: java.lang.Thread newThread(java.lang.Runnable)>","<l.a$b$a: java.lang.Thread newThread(java.lang.Runnable)>"
"<io.flutter.plugin.platform.SingleViewPresentation$b: void onLayout(boolean,int,int,int,int)>","<io.flutter.plugin.platform.SingleViewPresentation$b: void onLayout(boolean,int,int,int,int)>"
"<androidx.window.layout.FoldingFeature$State: void <init>(java.lang.String)>","<androidx.window.layout.FoldingFeature$State: void <init>(java.lang.String)>"
"<x.m$a: x.m$a d(x.m$b)>","<x.m$a: x.m$a d(x.m$b)>"
"<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)>","<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)>"
"<u0.l: java.lang.Object f(java.lang.Object,java.lang.Object)>","<u0.l: java.lang.Object f(java.lang.Object,java.lang.Object)>"
"<b0.a: java.lang.String e(java.util.List)>","<b0.a: java.lang.String e(java.util.List)>"
"<io.flutter.plugins.webviewflutter.k$c0: void e(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void e(java.lang.Long,java.lang.Long)>"
"<u0.f1$a$a: java.lang.Object invoke(java.lang.Object)>","<u0.f1$a$a: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$y: void <init>(y.b)>","<io.flutter.plugins.webviewflutter.k$y: void <init>(y.b)>"
"<t0.n: java.lang.CharSequence a0(java.lang.CharSequence)>","<t0.n: java.lang.CharSequence a0(java.lang.CharSequence)>"
"<x.p$b$a: void <init>(java.lang.String,java.lang.String[],java.lang.String,x.p$e)>","<x.p$b$a: void <init>(java.lang.String,java.lang.String[],java.lang.String,x.p$e)>"
"<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()>","<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()>"
"<io.flutter.view.c$p: io.flutter.view.c$p a(int)>","<io.flutter.view.c$p: io.flutter.view.c$p a(int)>"
"<androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)>"
"<b.c: java.lang.Object[] q(int)>","<b.c: java.lang.Object[] q(int)>"
"<t0.p: java.lang.String b0(java.lang.String,int)>","<t0.p: java.lang.String b0(java.lang.String,int)>"
"<io.flutter.plugins.webviewflutter.q3$a: void e(android.view.View)>","<io.flutter.plugins.webviewflutter.q3$a: void e(android.view.View)>"
"<a.b: java.util.Map$Entry b()>","<a.b: java.util.Map$Entry b()>"
"<u0.d: java.lang.String toString()>","<u0.d: java.lang.String toString()>"
"<io.flutter.view.c$l: void P(io.flutter.view.c$l,java.util.List)>","<io.flutter.view.c$l: void P(io.flutter.view.c$l,java.util.List)>"
"<u0.b1: java.lang.Thread A()>","<u0.b1: java.lang.Thread A()>"
"<io.flutter.view.c$l: java.lang.String a0(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String a0(io.flutter.view.c$l)>"
"<io.flutter.view.e$b: void onDisplayRemoved(int)>","<io.flutter.view.e$b: void onDisplayRemoved(int)>"
"<w0.c: java.lang.Object i(java.lang.Object)>","<w0.c: java.lang.Object i(java.lang.Object)>"
"<io.flutter.embedding.android.n$a: void <clinit>()>","<io.flutter.embedding.android.n$a: void <clinit>()>"
"<x0.d: x0.b a(n0.p)>","<x0.d: x0.b a(n0.p)>"
"<kotlinx.coroutines.internal.t: void <init>(java.lang.Throwable,java.lang.String)>","<kotlinx.coroutines.internal.t: void <init>(java.lang.Throwable,java.lang.String)>"
"<k.h: android.webkit.WebMessagePort a()>","<k.h: android.webkit.WebMessagePort a()>"
"<kotlinx.coroutines.internal.i$c: void <init>(java.lang.reflect.Constructor)>","<kotlinx.coroutines.internal.i$c: void <init>(java.lang.reflect.Constructor)>"
"<io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>","<io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>"
"<w0.c$a: java.lang.String toString()>","<w0.c$a: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.k$x: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$x: void <clinit>()>"
"<o.d: java.lang.String g(java.lang.String)>","<o.d: java.lang.String g(java.lang.String)>"
"<u0.v1: java.lang.String C()>","<u0.v1: java.lang.String C()>"
"<io.flutter.plugins.webviewflutter.q3$c: void setWebViewClient(android.webkit.WebViewClient)>","<io.flutter.plugins.webviewflutter.q3$c: void setWebViewClient(android.webkit.WebViewClient)>"
"<u0.v: void <clinit>()>","<u0.v: void <clinit>()>"
"<x.k$a: void b(y.i$d,x.k$c)>","<x.k$a: void b(y.i$d,x.k$c)>"
"<kotlin.jvm.internal.h: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>","<kotlin.jvm.internal.h: void <init>(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)>"
"<g0.g$a: g0.g a(g0.g,g0.g)>","<g0.g$a: g0.g a(g0.g,g0.g)>"
"<androidx.lifecycle.g: androidx.lifecycle.c$a d(androidx.lifecycle.c$b)>","<androidx.lifecycle.g: androidx.lifecycle.c$a d(androidx.lifecycle.c$b)>"
"<io.flutter.plugins.webviewflutter.k$p: void <init>()>","<io.flutter.plugins.webviewflutter.k$p: void <init>()>"
"<io.flutter.plugins.webviewflutter.y2$b: void m(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void m(java.lang.Void)>"
"<y.e: void <init>()>","<y.e: void <init>()>"
"<kotlinx.coroutines.scheduling.i: void <init>()>","<kotlinx.coroutines.scheduling.i: void <init>()>"
"<io.flutter.embedding.engine.a$b: void b()>","<io.flutter.embedding.engine.a$b: void b()>"
"<androidx.window.layout.FoldingFeature$State: void <clinit>()>","<androidx.window.layout.FoldingFeature$State: void <clinit>()>"
"<androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)>"
"<org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface: java.lang.String getAsString()>","<org.chromium.support_lib_boundary.WebMessagePayloadBoundaryInterface: java.lang.String getAsString()>"
"<y.o: java.lang.Object f(java.nio.ByteBuffer)>","<y.o: java.lang.Object f(java.nio.ByteBuffer)>"
"<io.flutter.view.c: android.view.accessibility.AccessibilityEvent k(io.flutter.view.c,int,int)>","<io.flutter.view.c: android.view.accessibility.AccessibilityEvent k(io.flutter.view.c,int,int)>"
"<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)>","<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)>"
"<m.a$b: java.lang.String toString()>","<m.a$b: java.lang.String toString()>"
"<kotlinx.coroutines.internal.i$f: java.lang.Void a(java.lang.Throwable)>","<kotlinx.coroutines.internal.i$f: java.lang.Void a(java.lang.Throwable)>"
"<h0.a: void <clinit>()>","<h0.a: void <clinit>()>"
"<u0.o: void <clinit>()>","<u0.o: void <clinit>()>"
"<io.flutter.embedding.android.x: android.os.Bundle d()>","<io.flutter.embedding.android.x: android.os.Bundle d()>"
"<z.a: void <init>(android.content.Context,x.f)>","<z.a: void <init>(android.content.Context,x.f)>"
"<kotlin.coroutines.jvm.internal.d: g0.d intercepted()>","<kotlin.coroutines.jvm.internal.d: g0.d intercepted()>"
"<u0.v1: java.lang.Object r0(u0.j1,java.lang.Object)>","<u0.v1: java.lang.Object r0(u0.j1,java.lang.Object)>"
"<androidx.lifecycle.c$a: androidx.lifecycle.c$a[] values()>","<androidx.lifecycle.c$a: androidx.lifecycle.c$a[] values()>"
"<io.flutter.embedding.android.e: android.app.Activity j()>","<io.flutter.embedding.android.e: android.app.Activity j()>"
"<w0.e: w0.e[] a()>","<w0.e: w0.e[] a()>"
"<u0.v1: java.lang.String n0()>","<u0.v1: java.lang.String n0()>"
"<e0.s: java.lang.Void b(int)>","<e0.s: java.lang.Void b(int)>"
"<s0.c: java.util.List e(s0.b)>","<s0.c: java.util.List e(s0.b)>"
"<u0.w1: u0.y0 c()>","<u0.w1: u0.y0 c()>"
"<io.flutter.plugin.platform.g: void <init>(y.g)>","<io.flutter.plugin.platform.g: void <init>(y.g)>"
"<androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)>","<androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)>"
"<m.c$e: void <init>(io.flutter.embedding.engine.FlutterJNI,int)>","<m.c$e: void <init>(io.flutter.embedding.engine.FlutterJNI,int)>"
"<androidx.window.layout.WindowMetricsCalculator: void <clinit>()>","<androidx.window.layout.WindowMetricsCalculator: void <clinit>()>"
"<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o v()>","<kotlinx.coroutines.internal.o: kotlinx.coroutines.internal.o v()>"
"<kotlinx.coroutines.internal.a: java.lang.Object d()>","<kotlinx.coroutines.internal.a: java.lang.Object d()>"
"<io.flutter.plugins.webviewflutter.r0: y.g o()>","<io.flutter.plugins.webviewflutter.r0: y.g o()>"
"<io.flutter.plugins.webviewflutter.i: java.util.List b(java.lang.String)>","<io.flutter.plugins.webviewflutter.i: java.util.List b(java.lang.String)>"
"<io.flutter.plugin.platform.r: io.flutter.plugin.platform.r a(android.content.Context,io.flutter.plugin.platform.a,io.flutter.plugin.platform.f,io.flutter.view.d$c,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener)>","<io.flutter.plugin.platform.r: io.flutter.plugin.platform.r a(android.content.Context,io.flutter.plugin.platform.a,io.flutter.plugin.platform.f,io.flutter.view.d$c,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener)>"
"<w0.m: java.lang.String c()>","<w0.m: java.lang.String c()>"
"<b.c$d: boolean hasNext()>","<b.c$d: boolean hasNext()>"
"<io.flutter.embedding.android.y: io.flutter.embedding.android.y[] values()>","<io.flutter.embedding.android.y: io.flutter.embedding.android.y[] values()>"
"<r0.c: java.lang.String a()>","<r0.c: java.lang.String a()>"
"<t0.d: int A(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>","<t0.d: int A(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)>"
"<w0.j: java.lang.Object e()>","<w0.j: java.lang.Object e()>"
"<io.flutter.view.e: long a(io.flutter.view.e)>","<io.flutter.view.e: long a(io.flutter.view.e)>"
"<androidx.window.embedding.EmbeddingCompat: void <init>()>","<androidx.window.embedding.EmbeddingCompat: void <init>()>"
"<io.flutter.plugins.webviewflutter.i2: void <init>(io.flutter.plugins.webviewflutter.i2$a)>","<io.flutter.plugins.webviewflutter.i2: void <init>(io.flutter.plugins.webviewflutter.i2$a)>"
"<io.flutter.plugins.webviewflutter.k$y: void r(java.lang.Long,java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void r(java.lang.Long,java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>"
"<androidx.window.embedding.SplitRule$Api30Impl: void <clinit>()>","<androidx.window.embedding.SplitRule$Api30Impl: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$s: void <init>()>","<io.flutter.plugins.webviewflutter.k$s: void <init>()>"
"<io.flutter.embedding.android.e$c: boolean n()>","<io.flutter.embedding.android.e$c: boolean n()>"
"<w0.n: java.lang.Object i(java.lang.Object)>","<w0.n: java.lang.Object i(java.lang.Object)>"
"<io.flutter.embedding.android.k: void onConfigurationChanged(android.content.res.Configuration)>","<io.flutter.embedding.android.k: void onConfigurationChanged(android.content.res.Configuration)>"
"<x.o: void <init>(m.a)>","<x.o: void <init>(m.a)>"
"<x.k$d$a: x.k$d$a valueOf(java.lang.String)>","<x.k$d$a: x.k$d$a valueOf(java.lang.String)>"
"<io.flutter.embedding.android.x: android.view.View c(android.content.Context,android.os.Bundle)>","<io.flutter.embedding.android.x: android.view.View c(android.content.Context,android.os.Bundle)>"
"<d0.m: java.lang.Object getValue()>","<d0.m: java.lang.Object getValue()>"
"<y.o: java.lang.Object g(byte,java.nio.ByteBuffer)>","<y.o: java.lang.Object g(byte,java.nio.ByteBuffer)>"
"<io.flutter.plugin.editing.b: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>","<io.flutter.plugin.editing.b: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getWebViewRendererClient()>","<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler getWebViewRendererClient()>"
"<kotlinx.coroutines.internal.u: n0.l a(n0.l,java.lang.Object,g0.g)>","<kotlinx.coroutines.internal.u: n0.l a(n0.l,java.lang.Object,g0.g)>"
"<androidx.window.layout.SidecarCompat$Companion: void <init>()>","<androidx.window.layout.SidecarCompat$Companion: void <init>()>"
"<w.a$f: android.graphics.SurfaceTexture d()>","<w.a$f: android.graphics.SurfaceTexture d()>"
"<io.flutter.embedding.android.k: boolean d(android.view.textservice.SpellCheckerInfo)>","<io.flutter.embedding.android.k: boolean d(android.view.textservice.SpellCheckerInfo)>"
"<w.a$d: w.a$d valueOf(java.lang.String)>","<w.a$d: w.a$d valueOf(java.lang.String)>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebMessagePort(java.lang.Object)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebMessagePort(java.lang.Object)>"
"<w.a: boolean b(w.a,boolean)>","<w.a: boolean b(w.a,boolean)>"
"<k.k: k.l a()>","<k.k: k.l a()>"
"<io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.c getLifecycle()>","<io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.c getLifecycle()>"
"<y0.a: void <clinit>()>","<y0.a: void <clinit>()>"
"<x.i$h: void a()>","<x.i$h: void a()>"
"<w.a$c: void <clinit>()>","<w.a$c: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$y: void s(java.lang.Long,java.lang.Long,java.lang.Long,java.lang.String,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void s(java.lang.Long,java.lang.Long,java.lang.Long,java.lang.String,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>"
"<androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)>","<androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)>"
"<io.flutter.view.c$j: void <init>(io.flutter.view.c$a)>","<io.flutter.view.c$j: void <init>(io.flutter.view.c$a)>"
"<e0.q: java.util.List s(java.util.Collection)>","<e0.q: java.util.List s(java.util.Collection)>"
"<io.flutter.view.c$a: void b(java.nio.ByteBuffer,java.lang.String[])>","<io.flutter.view.c$a: void b(java.nio.ByteBuffer,java.lang.String[])>"
"<androidx.window.layout.WindowInfoTrackerImpl$Companion: void <init>()>","<androidx.window.layout.WindowInfoTrackerImpl$Companion: void <init>()>"
"<io.flutter.view.c$f: void <init>(java.lang.String,int,int)>","<io.flutter.view.c$f: void <init>(java.lang.String,int,int)>"
"<u0.p1: java.lang.String toString()>","<u0.p1: java.lang.String toString()>"
"<b.c$c: boolean containsAll(java.util.Collection)>","<b.c$c: boolean containsAll(java.util.Collection)>"
"<io.flutter.plugins.webviewflutter.k$d: void c(java.lang.Long,io.flutter.plugins.webviewflutter.k$d$a)>","<io.flutter.plugins.webviewflutter.k$d: void c(java.lang.Long,io.flutter.plugins.webviewflutter.k$d$a)>"
"<k.a$d: void <init>(java.lang.String,java.lang.String)>","<k.a$d: void <init>(java.lang.String,java.lang.String)>"
"<androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)>","<androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)>"
"<io.flutter.plugins.webviewflutter.k: java.util.Map b(java.lang.Throwable)>","<io.flutter.plugins.webviewflutter.k: java.util.Map b(java.lang.Throwable)>"
"<e0.u: void <clinit>()>","<e0.u: void <clinit>()>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebResourceError(java.lang.Object)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.reflect.InvocationHandler convertWebResourceError(java.lang.Object)>"
"<kotlin.jvm.internal.d: java.lang.Object[] a(java.util.Collection)>","<kotlin.jvm.internal.d: java.lang.Object[] a(java.util.Collection)>"
"<io.flutter.embedding.android.v: io.flutter.embedding.android.v valueOf(java.lang.String)>","<io.flutter.embedding.android.v: io.flutter.embedding.android.v valueOf(java.lang.String)>"
"<io.flutter.view.c$h: int h(io.flutter.view.c$h,int)>","<io.flutter.view.c$h: int h(io.flutter.view.c$h,int)>"
"<io.flutter.embedding.android.k$g: void <init>(java.lang.String,int)>","<io.flutter.embedding.android.k$g: void <init>(java.lang.String,int)>"
"<u0.y1: java.lang.String r()>","<u0.y1: java.lang.String r()>"
"<io.flutter.view.c$l: int c(io.flutter.view.c$l)>","<io.flutter.view.c$l: int c(io.flutter.view.c$l)>"
"<w0.a$b: void z(w0.j)>","<w0.a$b: void z(w0.j)>"
"<y0.a: g0.g minusKey(g0.g$c)>","<y0.a: g0.g minusKey(g0.g$c)>"
"<k.h: android.webkit.WebMessagePort d()>","<k.h: android.webkit.WebMessagePort d()>"
"<m.a$c: void <init>(m.c)>","<m.a$c: void <init>(m.c)>"
"<io.flutter.plugins.webviewflutter.r0: void m(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void m(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.internal.o$a: void <init>(kotlinx.coroutines.internal.o)>","<kotlinx.coroutines.internal.o$a: void <init>(kotlinx.coroutines.internal.o)>"
"<io.flutter.embedding.android.k: java.util.Set h(io.flutter.embedding.android.k)>","<io.flutter.embedding.android.k: java.util.Set h(io.flutter.embedding.android.k)>"
"<io.flutter.embedding.android.e$c: java.lang.String u()>","<io.flutter.embedding.android.e$c: java.lang.String u()>"
"<t0.f$b: java.lang.Object invoke(java.lang.Object)>","<t0.f$b: java.lang.Object invoke(java.lang.Object)>"
"<u0.k0: java.lang.String toString()>","<u0.k0: java.lang.String toString()>"
"<u0.v1: java.lang.String toString()>","<u0.v1: java.lang.String toString()>"
"<kotlinx.coroutines.scheduling.e: void <init>(kotlinx.coroutines.scheduling.c,int,java.lang.String,int)>","<kotlinx.coroutines.scheduling.e: void <init>(kotlinx.coroutines.scheduling.c,int,java.lang.String,int)>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerController()>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getServiceWorkerController()>"
"<x.p: java.util.HashMap d(java.lang.String,int,int,int,int)>","<x.p: java.util.HashMap d(java.lang.String,int,int,int,int)>"
"<androidx.versionedparcelable.CustomVersionedParcelable: void <init>()>","<androidx.versionedparcelable.CustomVersionedParcelable: void <init>()>"
"<androidx.lifecycle.g$a: void <clinit>()>","<androidx.lifecycle.g$a: void <clinit>()>"
"<io.flutter.embedding.android.f: io.flutter.embedding.android.f valueOf(java.lang.String)>","<io.flutter.embedding.android.f: io.flutter.embedding.android.f valueOf(java.lang.String)>"
"<io.flutter.plugin.platform.c$a: void f(x.i$j)>","<io.flutter.plugin.platform.c$a: void f(x.i$j)>"
"<io.flutter.embedding.android.u: android.view.MotionEvent b(io.flutter.embedding.android.u$a)>","<io.flutter.embedding.android.u: android.view.MotionEvent b(io.flutter.embedding.android.u$a)>"
"<t0.d: java.lang.String S(java.lang.String,char,java.lang.String,int,java.lang.Object)>","<t0.d: java.lang.String S(java.lang.String,char,java.lang.String,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$y: void e(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void e(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<g0.e: g0.d l(g0.d)>","<g0.e: g0.d l(g0.d)>"
"<y.a$b: void <init>(y.a,y.a$d,y.a$a)>","<y.a$b: void <init>(y.a,y.a$d,y.a$a)>"
"<t0.f: java.lang.String e(java.lang.String)>","<t0.f: java.lang.String e(java.lang.String)>"
"<x.p$a: void <init>(x.p)>","<x.p$a: void <init>(x.p)>"
"<w0.a$a: java.lang.Object next()>","<w0.a$a: java.lang.Object next()>"
"<e0.t: java.lang.String toString()>","<e0.t: java.lang.String toString()>"
"<androidx.window.embedding.ActivityRule: void <init>(java.util.Set,boolean,int,kotlin.jvm.internal.e)>","<androidx.window.embedding.ActivityRule: void <init>(java.util.Set,boolean,int,kotlin.jvm.internal.e)>"
"<u0.j0: java.lang.Object k(g0.g)>","<u0.j0: java.lang.Object k(g0.g)>"
"<k.d: android.os.Looper c(android.webkit.WebView)>","<k.d: android.os.Looper c(android.webkit.WebView)>"
"<io.flutter.plugins.webviewflutter.k$u: void e(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void e(java.lang.Long,java.lang.Boolean)>"
"<u0.l: void <init>(g0.d,int)>","<u0.l: void <init>(g0.d,int)>"
"<g0.h: void <clinit>()>","<g0.h: void <clinit>()>"
"<io.flutter.embedding.android.d: void <clinit>()>","<io.flutter.embedding.android.d: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.q3$a: void d()>","<io.flutter.plugins.webviewflutter.q3$a: void d()>"
"<x.k$a: void a(y.h,y.i$d)>","<x.k$a: void a(y.h,y.i$d)>"
"<androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)>"
"<io.flutter.plugins.webviewflutter.k$e0: io.flutter.plugins.webviewflutter.k$e0 a(java.util.Map)>","<io.flutter.plugins.webviewflutter.k$e0: io.flutter.plugins.webviewflutter.k$e0 a(java.util.Map)>"
"<androidx.window.embedding.SplitPairRule: java.util.Set getFilters()>","<androidx.window.embedding.SplitPairRule: java.util.Set getFilters()>"
"<io.flutter.embedding.android.k$d: void accept(java.lang.Object)>","<io.flutter.embedding.android.k$d: void accept(java.lang.Object)>"
"<y0.d$a: void <init>()>","<y0.d$a: void <init>()>"
"<androidx.window.layout.b: androidx.window.layout.WindowInfoTracker a(android.content.Context)>","<androidx.window.layout.b: androidx.window.layout.WindowInfoTracker a(android.content.Context)>"
"<y.a: void <init>(y.b,java.lang.String,y.g,y.b$c)>","<y.a: void <init>(y.b,java.lang.String,y.g,y.b$c)>"
"<e0.r: java.lang.Void a()>","<e0.r: java.lang.Void a()>"
"<io.flutter.view.c$l: boolean L(io.flutter.view.c$l)>","<io.flutter.view.c$l: boolean L(io.flutter.view.c$l)>"
"<androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()>","<androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()>"
"<io.flutter.plugins.webviewflutter.k$c0: void n(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void n(java.lang.Long,java.lang.Long)>"
"<io.flutter.view.c$d: void <init>(io.flutter.view.c,android.view.accessibility.AccessibilityManager)>","<io.flutter.view.c$d: void <init>(io.flutter.view.c,android.view.accessibility.AccessibilityManager)>"
"<s0.c: s0.b a(java.util.Iterator)>","<s0.c: s0.b a(java.util.Iterator)>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)>"
"<org.chromium.support_lib_boundary.ServiceWorkerClientBoundaryInterface: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)>","<org.chromium.support_lib_boundary.ServiceWorkerClientBoundaryInterface: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebResourceRequest)>"
"<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void <init>()>","<io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void <init>()>"
"<androidx.lifecycle.c: androidx.lifecycle.c$b a()>","<androidx.lifecycle.c: androidx.lifecycle.c$b a()>"
"<g0.c$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<g0.c$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<m.a$b: void <init>(java.lang.String,java.lang.String)>","<m.a$b: void <init>(java.lang.String,java.lang.String)>"
"<io.flutter.embedding.android.e$c: boolean s()>","<io.flutter.embedding.android.e$c: boolean s()>"
"<e0.s: java.lang.String toString()>","<e0.s: java.lang.String toString()>"
"<androidx.core.graphics.drawable.IconCompat: void <clinit>()>","<androidx.core.graphics.drawable.IconCompat: void <clinit>()>"
"<u0.f1: void <clinit>()>","<u0.f1: void <clinit>()>"
"<b.c$c: boolean equals(java.lang.Object)>","<b.c$c: boolean equals(java.lang.Object)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)>","<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)>"
"<io.flutter.plugins.webviewflutter.k$i: void <init>()>","<io.flutter.plugins.webviewflutter.k$i: void <init>()>"
"<y.e: java.nio.ByteBuffer d(java.lang.Object)>","<y.e: java.nio.ByteBuffer d(java.lang.Object)>"
"<io.flutter.embedding.android.g: void <init>(android.content.Context,int,int,io.flutter.embedding.android.g$b)>","<io.flutter.embedding.android.g: void <init>(android.content.Context,int,int,io.flutter.embedding.android.g$b)>"
"<io.flutter.view.c$h: int c(io.flutter.view.c$h)>","<io.flutter.view.c$h: int c(io.flutter.view.c$h)>"
"<q0.c: java.lang.Integer g()>","<q0.c: java.lang.Integer g()>"
"<androidx.window.embedding.EmbeddingCompat: void <clinit>()>","<androidx.window.embedding.EmbeddingCompat: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.o2$a: io.flutter.plugins.webviewflutter.m2 a(io.flutter.plugins.webviewflutter.n2,java.lang.String,android.os.Handler)>","<io.flutter.plugins.webviewflutter.o2$a: io.flutter.plugins.webviewflutter.m2 a(io.flutter.plugins.webviewflutter.n2,java.lang.String,android.os.Handler)>"
"<io.flutter.view.c$l: java.lang.String q(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.String q(io.flutter.view.c$l)>"
"<io.flutter.plugins.webviewflutter.y2$d: void f(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void f(java.lang.Void)>"
"<io.flutter.plugins.webviewflutter.y2$b: void <init>(io.flutter.plugins.webviewflutter.x2,boolean)>","<io.flutter.plugins.webviewflutter.y2$b: void <init>(io.flutter.plugins.webviewflutter.x2,boolean)>"
"<androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)>"
"<y0.e$a: void <init>(y0.c)>","<y0.e$a: void <init>(y0.c)>"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler addDocumentStartJavaScript(java.lang.String,java.lang.String[])>","<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: java.lang.reflect.InvocationHandler addDocumentStartJavaScript(java.lang.String,java.lang.String[])>"
"<kotlin.jvm.internal.g: r0.b getReflected()>","<kotlin.jvm.internal.g: r0.b getReflected()>"
"<x.p$a: void a(y.h,y.i$d)>","<x.p$a: void a(y.h,y.i$d)>"
"<kotlin.jvm.internal.g: void <init>(int,java.lang.Object)>","<kotlin.jvm.internal.g: void <init>(int,java.lang.Object)>"
"<e0.t: java.util.Collection values()>","<e0.t: java.util.Collection values()>"
"<e0.g: java.util.List e(java.util.List)>","<e0.g: java.util.List e(java.util.List)>"
"<io.flutter.embedding.android.k$b: void onChange(boolean)>","<io.flutter.embedding.android.k$b: void onChange(boolean)>"
"<w.a$f: long b()>","<w.a$f: long b()>"
"<io.flutter.embedding.android.k: io.flutter.embedding.android.g q()>","<io.flutter.embedding.android.k: io.flutter.embedding.android.g q()>"
"<e0.t: java.util.Collection f()>","<e0.t: java.util.Collection f()>"
"<io.flutter.plugin.platform.c$a: boolean l()>","<io.flutter.plugin.platform.c$a: boolean l()>"
"<e0.s: java.util.Iterator iterator()>","<e0.s: java.util.Iterator iterator()>"
"<androidx.window.layout.SidecarWindowBackend$Companion: void <init>()>","<androidx.window.layout.SidecarWindowBackend$Companion: void <init>()>"
"<io.flutter.embedding.android.e: boolean d(io.flutter.embedding.android.e)>","<io.flutter.embedding.android.e: boolean d(io.flutter.embedding.android.e)>"
"<io.flutter.plugin.platform.c$a: void <init>(io.flutter.plugin.platform.c)>","<io.flutter.plugin.platform.c$a: void <init>(io.flutter.plugin.platform.c)>"
"<io.flutter.plugin.platform.r: android.view.View e()>","<io.flutter.plugin.platform.r: android.view.View e()>"
"<io.flutter.plugin.platform.q: io.flutter.embedding.engine.FlutterOverlaySurface H(io.flutter.plugin.platform.b)>","<io.flutter.plugin.platform.q: io.flutter.embedding.engine.FlutterOverlaySurface H(io.flutter.plugin.platform.b)>"
"<io.flutter.plugins.webviewflutter.q3: java.lang.Long f(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: java.lang.Long f(java.lang.Long)>"
"<b.c$e: boolean isEmpty()>","<b.c$e: boolean isEmpty()>"
"<k.f: void <clinit>()>","<k.f: void <clinit>()>"
"<io.flutter.view.c$a: void c(java.lang.String)>","<io.flutter.view.c$a: void c(java.lang.String)>"
"<j.a: void <init>()>","<j.a: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$t: void <init>(io.flutter.plugins.webviewflutter.k$a)>","<io.flutter.plugins.webviewflutter.k$t: void <init>(io.flutter.plugins.webviewflutter.k$a)>"
"<e0.t: void <init>()>","<e0.t: void <init>()>"
"<u0.l1: java.lang.String toString()>","<u0.l1: java.lang.String toString()>"
"<u0.v1$b: boolean h()>","<u0.v1$b: boolean h()>"
"<io.flutter.plugins.webviewflutter.q3$c: android.view.View getView()>","<io.flutter.plugins.webviewflutter.q3$c: android.view.View getView()>"
"<e0.t: java.lang.Object put(java.lang.Object,java.lang.Object)>","<e0.t: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<w0.s: void <init>()>","<w0.s: void <init>()>"
"<kotlinx.coroutines.internal.g: u0.l j()>","<kotlinx.coroutines.internal.g: u0.l j()>"
"<x.k$g: void b(int)>","<x.k$g: void b(int)>"
"<m0.b: void <init>()>","<m0.b: void <init>()>"
"<u0.l: java.lang.Object e(java.lang.Object)>","<u0.l: java.lang.Object e(java.lang.Object)>"
"<androidx.lifecycle.f: androidx.lifecycle.c e()>","<androidx.lifecycle.f: androidx.lifecycle.c e()>"
"<x.p$g: void <init>(java.lang.String,int,java.lang.String)>","<x.p$g: void <init>(java.lang.String,int,java.lang.String)>"
"<androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void <init>(androidx.window.layout.SidecarWindowBackend)>","<androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void <init>(androidx.window.layout.SidecarWindowBackend)>"
"<y.p: java.nio.ByteBuffer a(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)>","<y.p: java.nio.ByteBuffer a(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)>"
"<io.flutter.plugin.platform.c: x.i e(io.flutter.plugin.platform.c)>","<io.flutter.plugin.platform.c: x.i e(io.flutter.plugin.platform.c)>"
"<x.l$b: void <init>(x.l)>","<x.l$b: void <init>(x.l)>"
"<androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)>"
"<x.i$i: void <clinit>()>","<x.i$i: void <clinit>()>"
"<u0.c: u0.b a()>","<u0.c: u0.b a()>"
"<io.flutter.plugins.webviewflutter.k$m: void <init>()>","<io.flutter.plugins.webviewflutter.k$m: void <init>()>"
"<io.flutter.plugins.webviewflutter.y2$d: void onPageFinished(android.webkit.WebView,java.lang.String)>","<io.flutter.plugins.webviewflutter.y2$d: void onPageFinished(android.webkit.WebView,java.lang.String)>"
"<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>","<androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>"
"<com.example.vtu_web_app.MainActivity: void <init>()>","<com.example.vtu_web_app.MainActivity: void <init>()>"
"<androidx.core.graphics.drawable.IconCompat: void <init>()>","<androidx.core.graphics.drawable.IconCompat: void <init>()>"
"<b.d: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<b.d: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 i()>","<kotlinx.coroutines.internal.e0: kotlinx.coroutines.internal.f0 i()>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: g0.d create(java.lang.Object,g0.d)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: g0.d create(java.lang.Object,g0.d)>"
"<l.a: io.flutter.embedding.engine.FlutterJNI$c d()>","<l.a: io.flutter.embedding.engine.FlutterJNI$c d()>"
"<w0.i$b: void <init>()>","<w0.i$b: void <init>()>"
"<io.flutter.view.c$f: void <clinit>()>","<io.flutter.view.c$f: void <clinit>()>"
"<io.flutter.embedding.android.b$b: void <init>(android.content.Context,android.util.AttributeSet,int)>","<io.flutter.embedding.android.b$b: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<androidx.window.layout.WindowInfoTracker$Companion: void <clinit>()>","<androidx.window.layout.WindowInfoTracker$Companion: void <clinit>()>"
"<androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)>","<androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)>"
"<io.flutter.embedding.engine.a: x.l q()>","<io.flutter.embedding.engine.a: x.l q()>"
"<androidx.window.java.R: void <init>()>","<androidx.window.java.R: void <init>()>"
"<x.p$d: x.p$d[] values()>","<x.p$d: x.p$d[] values()>"
"<io.flutter.plugins.webviewflutter.k$u: void g(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void g(java.lang.Long,java.lang.Boolean)>"
"<io.flutter.plugins.webviewflutter.k$o: void g(java.lang.Long,java.lang.Long,java.lang.Long,io.flutter.plugins.webviewflutter.k$o$a)>","<io.flutter.plugins.webviewflutter.k$o: void g(java.lang.Long,java.lang.Long,java.lang.Long,io.flutter.plugins.webviewflutter.k$o$a)>"
"<u0.p1: java.lang.Throwable fillInStackTrace()>","<u0.p1: java.lang.Throwable fillInStackTrace()>"
"<kotlinx.coroutines.internal.a0: java.lang.String d(java.lang.String)>","<kotlinx.coroutines.internal.a0: java.lang.String d(java.lang.String)>"
"<androidx.window.layout.e: androidx.window.layout.WindowMetricsCalculator a()>","<androidx.window.layout.e: androidx.window.layout.WindowMetricsCalculator a()>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)>"
"<y0.e$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<y0.e$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)>","<androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)>"
"<x.p$e: x.p$e a(org.json.JSONObject)>","<x.p$e: x.p$e a(org.json.JSONObject)>"
"<kotlinx.coroutines.internal.y: void <clinit>()>","<kotlinx.coroutines.internal.y: void <clinit>()>"
"<x.i$g: void <init>(java.lang.String,int,java.lang.String)>","<x.i$g: void <init>(java.lang.String,int,java.lang.String)>"
"<f.a$a: void d(int)>","<f.a$a: void d(int)>"
"<io.flutter.embedding.engine.a: x.m r()>","<io.flutter.embedding.engine.a: x.m r()>"
"<androidx.window.layout.WindowInfoTrackerImpl: void <clinit>()>","<androidx.window.layout.WindowInfoTrackerImpl: void <clinit>()>"
"<io.flutter.view.c$k: void a(boolean,boolean)>","<io.flutter.view.c$k: void a(boolean,boolean)>"
"<e0.v: void <init>()>","<e0.v: void <init>()>"
"<kotlin.coroutines.jvm.internal.i: java.lang.String b(kotlin.coroutines.jvm.internal.a)>","<kotlin.coroutines.jvm.internal.i: java.lang.String b(kotlin.coroutines.jvm.internal.a)>"
"<w0.j: java.lang.Object z()>","<w0.j: java.lang.Object z()>"
"<x.p$d: void <clinit>()>","<x.p$d: void <clinit>()>"
"<y0.a: java.lang.Object fold(java.lang.Object,n0.p)>","<y0.a: java.lang.Object fold(java.lang.Object,n0.p)>"
"<r0.b: r0.f getReturnType()>","<r0.b: r0.f getReturnType()>"
"<androidx.versionedparcelable.ParcelImpl$a: java.lang.Object[] newArray(int)>","<androidx.versionedparcelable.ParcelImpl$a: java.lang.Object[] newArray(int)>"
"<k.n: java.lang.reflect.InvocationHandler e(android.webkit.WebResourceError)>","<k.n: java.lang.reflect.InvocationHandler e(android.webkit.WebResourceError)>"
"<io.flutter.plugin.platform.j: void <init>(android.content.Context)>","<io.flutter.plugin.platform.j: void <init>(android.content.Context)>"
"<androidx.versionedparcelable.a: java.lang.CharSequence k()>","<androidx.versionedparcelable.a: java.lang.CharSequence k()>"
"<a.b$d: boolean hasNext()>","<a.b$d: boolean hasNext()>"
"<o0.c$a: void <init>()>","<o0.c$a: void <init>()>"
"<androidx.versionedparcelable.b: java.lang.CharSequence k()>","<androidx.versionedparcelable.b: java.lang.CharSequence k()>"
"<androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)>","<androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)>"
"<b0.a$a: void run()>","<b0.a$a: void run()>"
"<kotlin.coroutines.jvm.internal.a: java.lang.String toString()>","<kotlin.coroutines.jvm.internal.a: java.lang.String toString()>"
"<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i h()>","<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i h()>"
"<u0.i2: g0.g$b get(g0.g$c)>","<u0.i2: g0.g$b get(g0.g$c)>"
"<t0.c: n0.p a(t0.c)>","<t0.c: n0.p a(t0.c)>"
"<io.flutter.embedding.engine.FlutterJNI: void <init>()>","<io.flutter.embedding.engine.FlutterJNI: void <init>()>"
"<io.flutter.plugin.platform.c$b: void <init>(io.flutter.plugin.platform.c,android.view.View)>","<io.flutter.plugin.platform.c$b: void <init>(io.flutter.plugin.platform.c,android.view.View)>"
"<w0.c: java.lang.String f()>","<w0.c: java.lang.String f()>"
"<androidx.versionedparcelable.ParcelImpl$a: androidx.versionedparcelable.ParcelImpl a(android.os.Parcel)>","<androidx.versionedparcelable.ParcelImpl$a: androidx.versionedparcelable.ParcelImpl a(android.os.Parcel)>"
"<io.flutter.plugins.webviewflutter.k$c0: void l(java.lang.Long,java.lang.String,java.lang.String,java.lang.String)>","<io.flutter.plugins.webviewflutter.k$c0: void l(java.lang.Long,java.lang.String,java.lang.String,java.lang.String)>"
"<x.k: java.lang.String b(java.lang.Exception)>","<x.k: java.lang.String b(java.lang.Exception)>"
"<io.flutter.view.c$l: void K(io.flutter.view.c$l,java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>","<io.flutter.view.c$l: void K(io.flutter.view.c$l,java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>"
"<y.p: void <init>(y.o)>","<y.p: void <init>(y.o)>"
"<w0.s: kotlinx.coroutines.internal.z A(kotlinx.coroutines.internal.o$b)>","<w0.s: kotlinx.coroutines.internal.z A(kotlinx.coroutines.internal.o$b)>"
"<u0.v1: java.lang.Object P()>","<u0.v1: java.lang.Object P()>"
"<y.o: java.nio.ByteBuffer b(java.lang.Object)>","<y.o: java.nio.ByteBuffer b(java.lang.Object)>"
"<kotlinx.coroutines.internal.p: java.lang.Object d()>","<kotlinx.coroutines.internal.p: java.lang.Object d()>"
"<io.flutter.plugins.webviewflutter.s2$b$a: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>","<io.flutter.plugins.webviewflutter.s2$b$a: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>"
"<io.flutter.embedding.android.FlutterSplashView: android.view.View d(io.flutter.embedding.android.FlutterSplashView)>","<io.flutter.embedding.android.FlutterSplashView: android.view.View d(io.flutter.embedding.android.FlutterSplashView)>"
"<io.flutter.embedding.android.h: void <init>(android.content.Context,boolean)>","<io.flutter.embedding.android.h: void <init>(android.content.Context,boolean)>"
"<io.flutter.plugin.platform.SingleViewPresentation$d: java.lang.Object getSystemService(java.lang.String)>","<io.flutter.plugin.platform.SingleViewPresentation$d: java.lang.Object getSystemService(java.lang.String)>"
"<t0.f: n0.l b(java.lang.String)>","<t0.f: n0.l b(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$j: void g(java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$j$a)>","<io.flutter.plugins.webviewflutter.k$j: void g(java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$j$a)>"
"<io.flutter.plugins.webviewflutter.k$d0: void p(java.io.ByteArrayOutputStream,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$d0: void p(java.io.ByteArrayOutputStream,java.lang.Object)>"
"<androidx.window.layout.SidecarAdapter$Companion: void <init>()>","<androidx.window.layout.SidecarAdapter$Companion: void <init>()>"
"<io.flutter.plugins.webviewflutter.q3$b: void <init>()>","<io.flutter.plugins.webviewflutter.q3$b: void <init>()>"
"<a.b: java.lang.Object f(java.lang.Object)>","<a.b: java.lang.Object f(java.lang.Object)>"
"<c.a: void <clinit>()>","<c.a: void <clinit>()>"
"<io.flutter.plugin.platform.c$a: void k(java.lang.String)>","<io.flutter.plugin.platform.c$a: void k(java.lang.String)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: void <clinit>()>","<io.flutter.embedding.android.FlutterSplashView$SavedState: void <clinit>()>"
"<w0.q: kotlinx.coroutines.internal.z h(java.lang.Object,kotlinx.coroutines.internal.o$b)>","<w0.q: kotlinx.coroutines.internal.z h(java.lang.Object,kotlinx.coroutines.internal.o$b)>"
"<kotlinx.coroutines.scheduling.e: void <clinit>()>","<kotlinx.coroutines.scheduling.e: void <clinit>()>"
"<io.flutter.plugin.editing.b: android.text.Editable getEditable()>","<io.flutter.plugin.editing.b: android.text.Editable getEditable()>"
"<io.flutter.plugin.platform.j: java.util.concurrent.atomic.AtomicLong a(io.flutter.plugin.platform.j)>","<io.flutter.plugin.platform.j: java.util.concurrent.atomic.AtomicLong a(io.flutter.plugin.platform.j)>"
"<kotlin.coroutines.jvm.internal.g: java.lang.StackTraceElement d(kotlin.coroutines.jvm.internal.a)>","<kotlin.coroutines.jvm.internal.g: java.lang.StackTraceElement d(kotlin.coroutines.jvm.internal.a)>"
"<e0.g: java.lang.Appendable j(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>","<e0.g: java.lang.Appendable j(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,n0.l,int,java.lang.Object)>"
"<io.flutter.embedding.android.e$c: void b()>","<io.flutter.embedding.android.e$c: void b()>"
"<y.i$d: void c()>","<y.i$d: void c()>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$b: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$b: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>"
"<g0.g$b: g0.g$c getKey()>","<g0.g$b: g0.g$c getKey()>"
"<b.c: java.util.Set l()>","<b.c: java.util.Set l()>"
"<io.flutter.plugins.webviewflutter.h: java.lang.String a(java.lang.String)>","<io.flutter.plugins.webviewflutter.h: java.lang.String a(java.lang.String)>"
"<androidx.window.embedding.EmbeddingAdapter: boolean c(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>","<androidx.window.embedding.EmbeddingAdapter: boolean c(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>"
"<u0.i: void <init>()>","<u0.i: void <init>()>"
"<u0.w1: java.lang.Object g(java.lang.Object)>","<u0.w1: java.lang.Object g(java.lang.Object)>"
"<g0.g$a$a: void <init>()>","<g0.g$a$a: void <init>()>"
"<w0.d$a: void <clinit>()>","<w0.d$a: void <clinit>()>"
"<kotlin.jvm.internal.i: java.lang.Throwable i(java.lang.Throwable,java.lang.String)>","<kotlin.jvm.internal.i: java.lang.Throwable i(java.lang.Throwable,java.lang.String)>"
"<u0.v1: java.util.concurrent.CancellationException e()>","<u0.v1: java.util.concurrent.CancellationException e()>"
"<x.m$a: x.m$a c(boolean)>","<x.m$a: x.m$a c(boolean)>"
"<kotlin.coroutines.jvm.internal.k: void <init>(int,g0.d)>","<kotlin.coroutines.jvm.internal.k: void <init>(int,g0.d)>"
"<io.flutter.plugins.webviewflutter.k$u: void m(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$u: void m(java.lang.Long,java.lang.Boolean)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.embedding.ExtensionEmbeddingBackend$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.s2$a: void <init>()>","<io.flutter.plugins.webviewflutter.s2$a: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$j: void f(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$j: void f(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>"
"<io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)>","<io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)>"
"<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i b(kotlinx.coroutines.scheduling.m,kotlinx.coroutines.scheduling.i,boolean,int,java.lang.Object)>","<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i b(kotlinx.coroutines.scheduling.m,kotlinx.coroutines.scheduling.i,boolean,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.i2$a: void a(long)>","<io.flutter.plugins.webviewflutter.i2$a: void a(long)>"
"<io.flutter.embedding.android.n$a: long a()>","<io.flutter.embedding.android.n$a: long a()>"
"<r0.b: java.util.List getTypeParameters()>","<r0.b: java.util.List getTypeParameters()>"
"<io.flutter.embedding.android.b$a: void onAnimationRepeat(android.animation.Animator)>","<io.flutter.embedding.android.b$a: void onAnimationRepeat(android.animation.Animator)>"
"<io.flutter.embedding.android.v: io.flutter.embedding.android.v[] values()>","<io.flutter.embedding.android.v: io.flutter.embedding.android.v[] values()>"
"<u0.v1: void <init>(boolean)>","<u0.v1: void <init>(boolean)>"
"<w0.d: java.lang.Object v()>","<w0.d: java.lang.Object v()>"
"<y.o$a: void <init>()>","<y.o$a: void <init>()>"
"<u0.l: java.lang.Void i(java.lang.Object)>","<u0.l: java.lang.Void i(java.lang.Object)>"
"<s0.a: void <init>(s0.b)>","<s0.a: void <init>(s0.b)>"
"<m.a$b: boolean equals(java.lang.Object)>","<m.a$b: boolean equals(java.lang.Object)>"
"<x.p$c: void <init>(x.p$g,boolean,boolean)>","<x.p$c: void <init>(x.p$g,boolean,boolean)>"
"<t0.n$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<t0.n$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)>"
"<x.p$g: x.p$g valueOf(java.lang.String)>","<x.p$g: x.p$g valueOf(java.lang.String)>"
"<kotlinx.coroutines.internal.z: void <init>(java.lang.String)>","<kotlinx.coroutines.internal.z: void <init>(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$l: void a(java.lang.Long,java.lang.String)>","<io.flutter.plugins.webviewflutter.k$l: void a(java.lang.Long,java.lang.String)>"
"<io.flutter.embedding.android.k: boolean onTouchEvent(android.view.MotionEvent)>","<io.flutter.embedding.android.k: boolean onTouchEvent(android.view.MotionEvent)>"
"<k.n: android.webkit.WebMessagePort c(java.lang.reflect.InvocationHandler)>","<k.n: android.webkit.WebMessagePort c(java.lang.reflect.InvocationHandler)>"
"<e0.d: java.util.List a(java.lang.Object[])>","<e0.d: java.util.List a(java.lang.Object[])>"
"<x.p$f: void c()>","<x.p$f: void c()>"
"<w0.i$a: java.lang.String toString()>","<w0.i$a: java.lang.String toString()>"
"<io.flutter.view.d$c: long b()>","<io.flutter.view.d$c: long b()>"
"<kotlinx.coroutines.internal.i$g: java.lang.Void a(java.lang.Throwable)>","<kotlinx.coroutines.internal.i$g: java.lang.Void a(java.lang.Throwable)>"
"<io.flutter.embedding.android.e$c: io.flutter.embedding.android.x z()>","<io.flutter.embedding.android.e$c: io.flutter.embedding.android.x z()>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,g0.d)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,g0.d)>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$f e(io.flutter.plugin.platform.SingleViewPresentation$e)>","<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$f e(io.flutter.plugin.platform.SingleViewPresentation$e)>"
"<a.b$b: void <init>(a.b$c,a.b$c)>","<a.b$b: void <init>(a.b$c,a.b$c)>"
"<kotlin.jvm.internal.g: void <init>(int)>","<kotlin.jvm.internal.g: void <init>(int)>"
"<u0.p0: java.util.concurrent.atomic.AtomicLong b()>","<u0.p0: java.util.concurrent.atomic.AtomicLong b()>"
"<io.flutter.plugins.webviewflutter.m2: void <init>(io.flutter.plugins.webviewflutter.n2,java.lang.String,android.os.Handler)>","<io.flutter.plugins.webviewflutter.m2: void <init>(io.flutter.plugins.webviewflutter.n2,java.lang.String,android.os.Handler)>"
"<u0.v: java.lang.String toString()>","<u0.v: java.lang.String toString()>"
"<androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()>","<androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()>"
"<b.c$b: int hashCode()>","<b.c$b: int hashCode()>"
"<y.j: java.lang.Object f(java.nio.ByteBuffer)>","<y.j: java.lang.Object f(java.nio.ByteBuffer)>"
"<y0.e: u0.o1 b(u0.o1,u0.o1)>","<y0.e: u0.o1 b(u0.o1,u0.o1)>"
"<u0.f0$a$a: java.lang.Object invoke(java.lang.Object)>","<u0.f0$a$a: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.f2: void l(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void l(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.y2$d: void g(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void g(java.lang.Void)>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: void e(java.lang.Object[])>","<io.flutter.plugin.platform.SingleViewPresentation$f: void e(java.lang.Object[])>"
"<e0.q: java.util.List r(java.lang.Iterable)>","<e0.q: java.util.List r(java.lang.Iterable)>"
"<u0.k0: java.lang.String m()>","<u0.k0: java.lang.String m()>"
"<w0.a$b: java.lang.String toString()>","<w0.a$b: java.lang.String toString()>"
"<io.flutter.embedding.android.k: void onSizeChanged(int,int,int,int)>","<io.flutter.embedding.android.k: void onSizeChanged(int,int,int,int)>"
"<u0.v1: java.lang.Throwable J(java.lang.Object)>","<u0.v1: java.lang.Throwable J(java.lang.Object)>"
"<y.j: java.nio.ByteBuffer a(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)>","<y.j: java.nio.ByteBuffer a(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)>"
"<x.b$a: void <init>(x.b)>","<x.b$a: void <init>(x.b)>"
"<kotlin.jvm.internal.a: java.lang.String getSignature()>","<kotlin.jvm.internal.a: java.lang.String getSignature()>"
"<g0.e: void <clinit>()>","<g0.e: void <clinit>()>"
"<x.i$h: void e(int)>","<x.i$h: void e(int)>"
"<io.flutter.plugin.editing.f$c: void <init>(io.flutter.plugin.editing.f$c$a,int)>","<io.flutter.plugin.editing.f$c: void <init>(io.flutter.plugin.editing.f$c$a,int)>"
"<u0.f0$a: void <init>(kotlin.jvm.internal.e)>","<u0.f0$a: void <init>(kotlin.jvm.internal.e)>"
"<q0.a: java.util.Iterator iterator()>","<q0.a: java.util.Iterator iterator()>"
"<x.a$b: void d(int)>","<x.a$b: void d(int)>"
"<t0.d: int z(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>","<t0.d: int z(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)>"
"<androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()>","<androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()>"
"<io.flutter.plugins.webviewflutter.k$w: void b(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$w: void b(java.lang.Long)>"
"<io.flutter.plugin.platform.q: android.view.MotionEvent k0(float,x.k$f,boolean)>","<io.flutter.plugin.platform.q: android.view.MotionEvent k0(float,x.k$f,boolean)>"
"<u0.f0$a: void <init>()>","<u0.f0$a: void <init>()>"
"<e0.z: java.util.Map g(java.lang.Iterable)>","<e0.z: java.util.Map g(java.lang.Iterable)>"
"<io.flutter.plugins.webviewflutter.r0: void i(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void i(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: void <clinit>()>","<androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: void <clinit>()>"
"<io.flutter.embedding.android.h: w.a i(io.flutter.embedding.android.h)>","<io.flutter.embedding.android.h: w.a i(io.flutter.embedding.android.h)>"
"<s0.h: s0.b c(s0.b,n0.l)>","<s0.h: s0.b c(s0.b,n0.l)>"
"<io.flutter.plugins.webviewflutter.j: void <init>(io.flutter.plugins.webviewflutter.i2)>","<io.flutter.plugins.webviewflutter.j: void <init>(io.flutter.plugins.webviewflutter.i2)>"
"<e0.e0: java.util.Set b()>","<e0.e0: java.util.Set b()>"
"<io.flutter.plugin.platform.j: android.view.Surface c(android.graphics.SurfaceTexture)>","<io.flutter.plugin.platform.j: android.view.Surface c(android.graphics.SurfaceTexture)>"
"<io.flutter.plugins.webviewflutter.k$t: void g(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$t: void g(java.lang.String)>"
"<w0.c: w0.q l()>","<w0.c: w0.q l()>"
"<x.i$h: void j()>","<x.i$h: void j()>"
"<io.flutter.view.c$f: io.flutter.view.c$f valueOf(java.lang.String)>","<io.flutter.view.c$f: io.flutter.view.c$f valueOf(java.lang.String)>"
"<io.flutter.view.e$c: long a(io.flutter.view.e$c,long)>","<io.flutter.view.e$c: long a(io.flutter.view.e$c,long)>"
"<u0.v1$b: boolean a()>","<u0.v1$b: boolean a()>"
"<y.a: java.lang.String b(y.a)>","<y.a: java.lang.String b(y.a)>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: void <init>()>","<io.flutter.plugin.platform.SingleViewPresentation$e: void <init>()>"
"<y.e: void <clinit>()>","<y.e: void <clinit>()>"
"<kotlin.coroutines.jvm.internal.f: int[] l()>","<kotlin.coroutines.jvm.internal.f: int[] l()>"
"<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i i()>","<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i i()>"
"<androidx.versionedparcelable.b: java.lang.String s()>","<androidx.versionedparcelable.b: java.lang.String s()>"
"<io.flutter.plugin.editing.f$b: void <init>(io.flutter.plugin.editing.f,boolean,double[],double[])>","<io.flutter.plugin.editing.f$b: void <init>(io.flutter.plugin.editing.f,boolean,double[],double[])>"
"<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: void <clinit>()>","<androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: void <clinit>()>"
"<io.flutter.view.e$b: void onDisplayChanged(int)>","<io.flutter.view.e$b: void onDisplayChanged(int)>"
"<io.flutter.embedding.android.e$b: boolean onPreDraw()>","<io.flutter.embedding.android.e$b: boolean onPreDraw()>"
"<androidx.window.layout.SidecarWindowBackend$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.SidecarWindowBackend$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.embedding.android.k: boolean fitSystemWindows(android.graphics.Rect)>","<io.flutter.embedding.android.k: boolean fitSystemWindows(android.graphics.Rect)>"
"<io.flutter.embedding.android.k$a: void a(boolean,boolean)>","<io.flutter.embedding.android.k$a: void a(boolean,boolean)>"
"<io.flutter.plugins.webviewflutter.s2$b: void onProgressChanged(android.webkit.WebView,int)>","<io.flutter.plugins.webviewflutter.s2$b: void onProgressChanged(android.webkit.WebView,int)>"
"<io.flutter.plugins.webviewflutter.k$e: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$e: void <clinit>()>"
"<u0.v0: java.lang.String toString()>","<u0.v0: java.lang.String toString()>"
"<u0.i2: java.lang.Object fold(java.lang.Object,n0.p)>","<u0.i2: java.lang.Object fold(java.lang.Object,n0.p)>"
"<io.flutter.plugins.webviewflutter.k$y: void b(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void b(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<v0.b: void <init>(kotlin.jvm.internal.e)>","<v0.b: void <init>(kotlin.jvm.internal.e)>"
"<u0.m1: java.lang.Object invoke(java.lang.Object)>","<u0.m1: java.lang.Object invoke(java.lang.Object)>"
"<p.a$a: void onGlobalFocusChanged(android.view.View,android.view.View)>","<p.a$a: void onGlobalFocusChanged(android.view.View,android.view.View)>"
"<v0.a: void <init>(android.os.Handler,java.lang.String,int,kotlin.jvm.internal.e)>","<v0.a: void <init>(android.os.Handler,java.lang.String,int,kotlin.jvm.internal.e)>"
"<kotlinx.coroutines.scheduling.a$c: int f()>","<kotlinx.coroutines.scheduling.a$c: int f()>"
"<io.flutter.plugins.webviewflutter.k$t: void d(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$t: void d(java.lang.Boolean)>"
"<g0.c$a: java.lang.String a(java.lang.String,g0.g$b)>","<g0.c$a: java.lang.String a(java.lang.String,g0.g$b)>"
"<y0.d: n0.q a()>","<y0.d: n0.q a()>"
"<io.flutter.view.c$l: int v(io.flutter.view.c$l)>","<io.flutter.view.c$l: int v(io.flutter.view.c$l)>"
"<u0.j2$a: void <init>(kotlin.jvm.internal.e)>","<u0.j2$a: void <init>(kotlin.jvm.internal.e)>"
"<w0.c: int b()>","<w0.c: int b()>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(e.a)>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(e.a)>"
"<io.flutter.plugins.webviewflutter.o2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.o2$a,io.flutter.plugins.webviewflutter.n2,android.os.Handler)>","<io.flutter.plugins.webviewflutter.o2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.o2$a,io.flutter.plugins.webviewflutter.n2,android.os.Handler)>"
"<io.flutter.view.c$l: boolean M(io.flutter.view.c$l,boolean)>","<io.flutter.view.c$l: boolean M(io.flutter.view.c$l,boolean)>"
"<e0.t: java.util.Set keySet()>","<e0.t: java.util.Set keySet()>"
"<u0.s1: u0.w b(u0.o1,int,java.lang.Object)>","<u0.s1: u0.w b(u0.o1,int,java.lang.Object)>"
"<u0.t0: g0.d c()>","<u0.t0: g0.d c()>"
"<androidx.window.layout.FoldingFeature$OcclusionType$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.FoldingFeature$OcclusionType$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.embedding.android.i$a: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>","<io.flutter.embedding.android.i$a: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>"
"<androidx.window.layout.FoldingFeature$State$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.FoldingFeature$State$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.k$y: void t(java.lang.Long,java.lang.Long,io.flutter.plugins.webviewflutter.k$t,io.flutter.plugins.webviewflutter.k$s,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void t(java.lang.Long,java.lang.Long,io.flutter.plugins.webviewflutter.k$t,io.flutter.plugins.webviewflutter.k$s,io.flutter.plugins.webviewflutter.k$y$a)>"
"<io.flutter.view.c$l: java.lang.CharSequence A(io.flutter.view.c$l)>","<io.flutter.view.c$l: java.lang.CharSequence A(io.flutter.view.c$l)>"
"<io.flutter.plugin.platform.q: x.k p(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: x.k p(io.flutter.plugin.platform.q)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void a(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)>","<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void a(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)>"
"<s0.a: java.util.Iterator iterator()>","<s0.a: java.util.Iterator iterator()>"
"<u0.e0: u0.f0 a()>","<u0.e0: u0.f0 a()>"
"<x.i: java.util.List d(x.i,org.json.JSONArray)>","<x.i: java.util.List d(x.i,org.json.JSONArray)>"
"<x.i$l: void <init>(java.lang.String,int,java.lang.String)>","<x.i$l: void <init>(java.lang.String,int,java.lang.String)>"
"<io.flutter.embedding.android.k: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)>","<io.flutter.embedding.android.k: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)>"
"<u0.l: u0.i B(n0.l)>","<u0.l: u0.i B(n0.l)>"
"<io.flutter.plugin.platform.q: int t(io.flutter.plugin.platform.q,double,float)>","<io.flutter.plugin.platform.q: int t(io.flutter.plugin.platform.q,double,float)>"
"<d0.e: java.lang.Object getValue()>","<d0.e: java.lang.Object getValue()>"
"<androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)>","<androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)>"
"<a.b$c: boolean equals(java.lang.Object)>","<a.b$c: boolean equals(java.lang.Object)>"
"<b.c$e: boolean containsAll(java.util.Collection)>","<b.c$e: boolean containsAll(java.util.Collection)>"
"<l.a: l.a e()>","<l.a: l.a e()>"
"<n0.p: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<n0.p: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)>","<androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)>"
"<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: android.webkit.WebViewClient getWebViewClient()>","<org.chromium.support_lib_boundary.WebViewProviderBoundaryInterface: android.webkit.WebViewClient getWebViewClient()>"
"<androidx.core.app.CoreComponentFactory$a: java.lang.Object a()>","<androidx.core.app.CoreComponentFactory$a: java.lang.Object a()>"
"<kotlinx.coroutines.internal.j: java.util.List f(java.io.BufferedReader)>","<kotlinx.coroutines.internal.j: java.util.List f(java.io.BufferedReader)>"
"<s0.i$a: void remove()>","<s0.i$a: void remove()>"
"<io.flutter.plugins.webviewflutter.k$d: void a(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$d: void a(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>"
"<w0.g: java.lang.Object next()>","<w0.g: java.lang.Object next()>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: void <clinit>()>","<androidx.window.layout.WindowMetricsCalculatorCompat: void <clinit>()>"
"<androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>","<androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)>"
"<u0.v: java.util.concurrent.ExecutorService s()>","<u0.v: java.util.concurrent.ExecutorService s()>"
"<io.flutter.plugins.webviewflutter.h$a: void <init>(android.content.res.AssetManager,q.a$a)>","<io.flutter.plugins.webviewflutter.h$a: void <init>(android.content.res.AssetManager,q.a$a)>"
"<o.d: o.e a(o.d,android.content.Context)>","<o.d: o.e a(o.d,android.content.Context)>"
"<o.a: java.lang.String c(android.content.pm.ApplicationInfo,android.content.Context)>","<o.a: java.lang.String c(android.content.pm.ApplicationInfo,android.content.Context)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)>","<io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)>"
"<androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)>","<androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)>"
"<w0.a: void o(w0.a,u0.k,w0.o)>","<w0.a: void o(w0.a,u0.k,w0.o)>"
"<u0.l: java.lang.Object J(u0.b2,java.lang.Object,int,n0.l,java.lang.Object)>","<u0.l: java.lang.Object J(u0.b2,java.lang.Object,int,n0.l,java.lang.Object)>"
"<e0.s: java.lang.Object get(int)>","<e0.s: java.lang.Object get(int)>"
"<androidx.versionedparcelable.a: java.lang.String t(java.lang.String,int)>","<androidx.versionedparcelable.a: java.lang.String t(java.lang.String,int)>"
"<q0.a$a: q0.a a(int,int,int)>","<q0.a$a: q0.a a(int,int,int)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void <init>(androidx.window.embedding.ExtensionEmbeddingBackend)>","<androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void <init>(androidx.window.embedding.ExtensionEmbeddingBackend)>"
"<g0.g$a$a: void <clinit>()>","<g0.g$a$a: void <clinit>()>"
"<androidx.webkit.WebViewClientCompat: void <clinit>()>","<androidx.webkit.WebViewClientCompat: void <clinit>()>"
"<kotlin.jvm.internal.a: java.util.List getAnnotations()>","<kotlin.jvm.internal.a: java.util.List getAnnotations()>"
"<x.f$b: java.lang.String a(java.lang.String,java.lang.String)>","<x.f$b: java.lang.String a(java.lang.String,java.lang.String)>"
"<io.flutter.embedding.android.k: void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.i)>","<io.flutter.embedding.android.k: void <init>(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.i)>"
"<io.flutter.view.c$l: boolean u0(io.flutter.view.c$g)>","<io.flutter.view.c$l: boolean u0(io.flutter.view.c$g)>"
"<io.flutter.view.e$a: android.view.Choreographer$FrameCallback b(long)>","<io.flutter.view.e$a: android.view.Choreographer$FrameCallback b(long)>"
"<s0.b: java.util.Iterator iterator()>","<s0.b: java.util.Iterator iterator()>"
"<kotlinx.coroutines.scheduling.f: void <clinit>()>","<kotlinx.coroutines.scheduling.f: void <clinit>()>"
"<kotlinx.coroutines.internal.y: java.lang.StackTraceElement b(java.lang.String)>","<kotlinx.coroutines.internal.y: java.lang.StackTraceElement b(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.y2$d: void k(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void k(java.lang.Void)>"
"<kotlinx.coroutines.internal.s: java.lang.Void c()>","<kotlinx.coroutines.internal.s: java.lang.Void c()>"
"<r0.g: r0.g[] a()>","<r0.g: r0.g[] a()>"
"<io.flutter.plugin.platform.SingleViewPresentation$a: void <init>(android.content.Context,io.flutter.plugin.platform.a,android.view.View)>","<io.flutter.plugin.platform.SingleViewPresentation$a: void <init>(android.content.Context,io.flutter.plugin.platform.a,android.view.View)>"
"<io.flutter.view.c$p: void <init>(java.lang.String,int)>","<io.flutter.view.c$p: void <init>(java.lang.String,int)>"
"<w.a$a: void d()>","<w.a$a: void d()>"
"<e0.i: java.util.List d(java.lang.Object[])>","<e0.i: java.util.List d(java.lang.Object[])>"
"<x.i: x.i$c c(x.i,org.json.JSONObject)>","<x.i: x.i$c c(x.i,org.json.JSONObject)>"
"<e0.r: java.lang.Void b()>","<e0.r: java.lang.Void b()>"
"<io.flutter.embedding.android.FlutterSplashView: void <init>(android.content.Context)>","<io.flutter.embedding.android.FlutterSplashView: void <init>(android.content.Context)>"
"<u0.l1: java.lang.Object invoke(java.lang.Object)>","<u0.l1: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$s$a: void <init>()>","<io.flutter.plugins.webviewflutter.k$s$a: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$t: void e(java.lang.String)>","<io.flutter.plugins.webviewflutter.k$t: void e(java.lang.String)>"
"<io.flutter.plugin.platform.q: io.flutter.view.d h(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: io.flutter.view.d h(io.flutter.plugin.platform.q)>"
"<x.f: void <init>(m.a)>","<x.f: void <init>(m.a)>"
"<x.l$b: void a(y.h,y.i$d)>","<x.l$b: void a(y.h,y.i$d)>"
"<x.f: x.f$b a(x.f)>","<x.f: x.f$b a(x.f)>"
"<u0.a1$a: int e()>","<u0.a1$a: int e()>"
"<w0.s: java.lang.Object z()>","<w0.s: java.lang.Object z()>"
"<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)>","<androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)>"
"<io.flutter.embedding.android.n$a: io.flutter.embedding.android.n$a valueOf(java.lang.String)>","<io.flutter.embedding.android.n$a: io.flutter.embedding.android.n$a valueOf(java.lang.String)>"
"<u0.v1$b: java.lang.Object e()>","<u0.v1$b: java.lang.Object e()>"
"<androidx.window.embedding.SplitController: java.util.Set getSplitRules()>","<androidx.window.embedding.SplitController: java.util.Set getSplitRules()>"
"<kotlin.coroutines.jvm.internal.c: void <init>()>","<kotlin.coroutines.jvm.internal.c: void <init>()>"
"<io.flutter.embedding.engine.a$a: void <init>(io.flutter.embedding.engine.a)>","<io.flutter.embedding.engine.a$a: void <init>(io.flutter.embedding.engine.a)>"
"<x.i$h: void k(java.lang.String)>","<x.i$h: void k(java.lang.String)>"
"<io.flutter.view.c$c: void <init>(io.flutter.view.c,android.os.Handler)>","<io.flutter.view.c$c: void <init>(io.flutter.view.c,android.os.Handler)>"
"<androidx.window.layout.WindowMetrics: void <init>(androidx.window.core.Bounds)>","<androidx.window.layout.WindowMetrics: void <init>(androidx.window.core.Bounds)>"
"<io.flutter.plugin.platform.q$a: void r(x.k$d)>","<io.flutter.plugin.platform.q$a: void r(x.k$d)>"
"<k.b$a: void <init>(j.d$a)>","<k.b$a: void <init>(j.d$a)>"
"<io.flutter.view.c: int s()>","<io.flutter.view.c: int s()>"
"<kotlin.jvm.internal.a$a: kotlin.jvm.internal.a$a a()>","<kotlin.jvm.internal.a$a: kotlin.jvm.internal.a$a a()>"
"<io.flutter.plugins.webviewflutter.q3$a: void <init>(android.content.Context,android.view.View)>","<io.flutter.plugins.webviewflutter.q3$a: void <init>(android.content.Context,android.view.View)>"
"<io.flutter.embedding.android.h$a: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>","<io.flutter.embedding.android.h$a: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"
"<io.flutter.plugin.editing.f$a: void b(int,x.p$b)>","<io.flutter.plugin.editing.f$a: void b(int,x.p$b)>"
"<io.flutter.plugin.platform.q: android.content.Context j(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q: android.content.Context j(io.flutter.plugin.platform.q)>"
"<kotlin.coroutines.jvm.internal.f: java.lang.String c()>","<kotlin.coroutines.jvm.internal.f: java.lang.String c()>"
"<u0.v1: java.util.concurrent.CancellationException h()>","<u0.v1: java.util.concurrent.CancellationException h()>"
"<u0.q: u0.o1 getParent()>","<u0.q: u0.o1 getParent()>"
"<u0.a1$a: kotlinx.coroutines.internal.e0 a()>","<u0.a1$a: kotlinx.coroutines.internal.e0 a()>"
"<f.a$d: void b(boolean)>","<f.a$d: void b(boolean)>"
"<u0.z: java.lang.String toString()>","<u0.z: java.lang.String toString()>"
"<d0.m: java.lang.String toString()>","<d0.m: java.lang.String toString()>"
"<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void a(w0.f,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void a(w0.f,androidx.window.layout.WindowLayoutInfo)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)>","<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)>"
"<io.flutter.plugins.webviewflutter.k$d: void <init>(y.b)>","<io.flutter.plugins.webviewflutter.k$d: void <init>(y.b)>"
"<kotlinx.coroutines.internal.y: d0.j c(java.lang.Throwable)>","<kotlinx.coroutines.internal.y: d0.j c(java.lang.Throwable)>"
"<androidx.window.R: void <init>()>","<androidx.window.R: void <init>()>"
"<io.flutter.plugins.webviewflutter.q3: java.lang.Boolean t(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: java.lang.Boolean t(java.lang.Long)>"
"<io.flutter.embedding.android.k: boolean u()>","<io.flutter.embedding.android.k: boolean u()>"
"<g0.c: g0.g$b get(g0.g$c)>","<g0.c: g0.g$b get(g0.g$c)>"
"<s0.f$a: java.util.Iterator iterator()>","<s0.f$a: java.util.Iterator iterator()>"
"<w.a$f: boolean f(w.a$f)>","<w.a$f: boolean f(w.a$f)>"
"<io.flutter.view.c$l: boolean X(io.flutter.view.c$l)>","<io.flutter.view.c$l: boolean X(io.flutter.view.c$l)>"
"<s0.h: java.util.List f(s0.b)>","<s0.h: java.util.List f(s0.b)>"
"<e0.s: java.util.List subList(int,int)>","<e0.s: java.util.List subList(int,int)>"
"<kotlinx.coroutines.internal.i$g: void <init>()>","<kotlinx.coroutines.internal.i$g: void <init>()>"
"<io.flutter.plugins.webviewflutter.s2$b: void e(java.lang.Void)>","<io.flutter.plugins.webviewflutter.s2$b: void e(java.lang.Void)>"
"<x.p$e: boolean c()>","<x.p$e: boolean c()>"
"<q0.a: java.lang.String toString()>","<q0.a: java.lang.String toString()>"
"<x0.c: java.lang.Object emit(java.lang.Object,g0.d)>","<x0.c: java.lang.Object emit(java.lang.Object,g0.d)>"
"<io.flutter.view.c$l: void O(io.flutter.view.c$l,float[],java.util.Set,boolean)>","<io.flutter.view.c$l: void O(io.flutter.view.c$l,float[],java.util.Set,boolean)>"
"<k.a: void <clinit>()>","<k.a: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$c0: void u(java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<io.flutter.plugins.webviewflutter.k$c0: void u(java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<h0.a: h0.a valueOf(java.lang.String)>","<h0.a: h0.a valueOf(java.lang.String)>"
"<w0.a$d: java.lang.Object i(kotlinx.coroutines.internal.o)>","<w0.a$d: java.lang.Object i(kotlinx.coroutines.internal.o)>"
"<io.flutter.plugin.platform.j$a: void a()>","<io.flutter.plugin.platform.j$a: void a()>"
"<b.c$c: java.lang.Object[] toArray(java.lang.Object[])>","<b.c$c: java.lang.Object[] toArray(java.lang.Object[])>"
"<androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)>","<androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)>"
"<y.q: void <clinit>()>","<y.q: void <clinit>()>"
"<io.flutter.embedding.android.k: void B(java.lang.Runnable)>","<io.flutter.embedding.android.k: void B(java.lang.Runnable)>"
"<io.flutter.embedding.engine.c$c: void e(android.os.Bundle)>","<io.flutter.embedding.engine.c$c: void e(android.os.Bundle)>"
"<androidx.lifecycle.c$a: void <init>(java.lang.String,int)>","<androidx.lifecycle.c$a: void <init>(java.lang.String,int)>"
"<io.flutter.view.c: android.view.accessibility.AccessibilityNodeInfo I(android.view.View,int)>","<io.flutter.view.c: android.view.accessibility.AccessibilityNodeInfo I(android.view.View,int)>"
"<androidx.lifecycle.g: androidx.lifecycle.c$b f(androidx.lifecycle.c$a)>","<androidx.lifecycle.g: androidx.lifecycle.c$b f(androidx.lifecycle.c$a)>"
"<e0.g: java.util.List b()>","<e0.g: java.util.List b()>"
"<io.flutter.view.c$b: void onAccessibilityStateChanged(boolean)>","<io.flutter.view.c$b: void onAccessibilityStateChanged(boolean)>"
"<io.flutter.plugins.webviewflutter.k$d$a: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$d$a: void a(java.lang.Object)>"
"<u0.n0: void b(n0.p,java.lang.Object,g0.d)>","<u0.n0: void b(n0.p,java.lang.Object,g0.d)>"
"<io.flutter.plugins.webviewflutter.k$z: void <init>()>","<io.flutter.plugins.webviewflutter.k$z: void <init>()>"
"<a0.a: void <init>(a0.a$c,x.g)>","<a0.a: void <init>(a0.a$c,x.g)>"
"<io.flutter.plugins.webviewflutter.q3$c: void c()>","<io.flutter.plugins.webviewflutter.q3$c: void c()>"
"<io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)>","<io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)>"
"<io.flutter.plugin.editing.f$a: void g(x.p$e)>","<io.flutter.plugin.editing.f$a: void g(x.p$e)>"
"<t0.c$a: q0.c b()>","<t0.c$a: q0.c b()>"
"<m.c: void <init>(io.flutter.embedding.engine.FlutterJNI,m.c$f)>","<m.c: void <init>(io.flutter.embedding.engine.FlutterJNI,m.c$f)>"
"<kotlinx.coroutines.internal.q$a: void <init>(kotlin.jvm.internal.e)>","<kotlinx.coroutines.internal.q$a: void <init>(kotlin.jvm.internal.e)>"
"<b.c$c: boolean retainAll(java.util.Collection)>","<b.c$c: boolean retainAll(java.util.Collection)>"
"<androidx.window.layout.HardwareFoldingFeature$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.HardwareFoldingFeature$Companion: void <init>(kotlin.jvm.internal.e)>"
"<w0.a$d: void <init>(kotlinx.coroutines.internal.o,w0.a)>","<w0.a$d: void <init>(kotlinx.coroutines.internal.o,w0.a)>"
"<io.flutter.view.c$h: int d(io.flutter.view.c$h,int)>","<io.flutter.view.c$h: int d(io.flutter.view.c$h,int)>"
"<androidx.window.embedding.SplitRule: void <init>(int,int,float,int)>","<androidx.window.embedding.SplitRule: void <init>(int,int,float,int)>"
"<x.l: boolean c(x.l,boolean)>","<x.l: boolean c(x.l,boolean)>"
"<y0.a: g0.g$b get(g0.g$c)>","<y0.a: g0.g$b get(g0.g$c)>"
"<io.flutter.plugins.webviewflutter.n$a: void b(java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.n$a: void b(java.lang.Boolean)>"
"<g0.d: g0.g getContext()>","<g0.d: g0.g getContext()>"
"<x.m: void <init>(m.a)>","<x.m: void <init>(m.a)>"
"<w0.c: java.lang.Throwable h(w0.j)>","<w0.c: java.lang.Throwable h(w0.j)>"
"<io.flutter.embedding.android.t: void <clinit>()>","<io.flutter.embedding.android.t: void <clinit>()>"
"<e0.a: java.util.List a(java.lang.Object[])>","<e0.a: java.util.List a(java.lang.Object[])>"
"<androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)>","<androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)>"
"<y.d: java.nio.ByteBuffer b(java.lang.Object)>","<y.d: java.nio.ByteBuffer b(java.lang.Object)>"
"<n0.a: java.lang.Object invoke()>","<n0.a: java.lang.Object invoke()>"
"<androidx.window.core.Version$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.core.Version$Companion: void <init>(kotlin.jvm.internal.e)>"
"<b.c$b: java.lang.Object[] toArray()>","<b.c$b: java.lang.Object[] toArray()>"
"<io.flutter.plugins.webviewflutter.s2$b$a: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>","<io.flutter.plugins.webviewflutter.s2$b$a: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>"
"<u0.c0: java.lang.Object b(java.lang.Object,n0.l)>","<u0.c0: java.lang.Object b(java.lang.Object,n0.l)>"
"<w0.m: kotlinx.coroutines.internal.h0 x(java.lang.Object)>","<w0.m: kotlinx.coroutines.internal.h0 x(java.lang.Object)>"
"<androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)>","<androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)>"
"<io.flutter.plugin.platform.r$a: void onViewDetachedFromWindow(android.view.View)>","<io.flutter.plugin.platform.r$a: void onViewDetachedFromWindow(android.view.View)>"
"<q0.d: int e(int,int,int)>","<q0.d: int e(int,int,int)>"
"<io.flutter.embedding.android.k: boolean dispatchKeyEvent(android.view.KeyEvent)>","<io.flutter.embedding.android.k: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<io.flutter.embedding.android.r: void d(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,long,android.view.KeyEvent)>","<io.flutter.embedding.android.r: void d(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,long,android.view.KeyEvent)>"
"<a.a: a.b$c c(java.lang.Object)>","<a.a: a.b$c c(java.lang.Object)>"
"<x.p$f: void b(int,x.p$b)>","<x.p$f: void b(int,x.p$b)>"
"<m.a$c: void c(java.lang.String,y.b$a,y.b$c)>","<m.a$c: void c(java.lang.String,y.b$a,y.b$c)>"
"<io.flutter.plugins.webviewflutter.d: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>","<io.flutter.plugins.webviewflutter.d: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>"
"<io.flutter.plugin.platform.SingleViewPresentation$f: android.view.WindowManager b()>","<io.flutter.plugin.platform.SingleViewPresentation$f: android.view.WindowManager b()>"
"<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: e.a getCallback()>","<androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: e.a getCallback()>"
"<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)>","<androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)>"
"<io.flutter.plugins.webviewflutter.y2$b: void i(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$b: void i(java.lang.Void)>"
"<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getProxyController()>","<org.chromium.support_lib_boundary.WebViewProviderFactoryBoundaryInterface: java.lang.reflect.InvocationHandler getProxyController()>"
"<f.a$c: void a(boolean)>","<f.a$c: void a(boolean)>"
"<io.flutter.plugin.platform.k: android.view.View c(int)>","<io.flutter.plugin.platform.k: android.view.View c(int)>"
"<w0.i$c: java.lang.String toString()>","<w0.i$c: java.lang.String toString()>"
"<w0.a$b: void <init>(w0.a$a,u0.k)>","<w0.a$b: void <init>(w0.a$a,u0.k)>"
"<d0.k$a: void <init>()>","<d0.k$a: void <init>()>"
"<androidx.core.content.a: java.util.concurrent.Executor a(android.content.Context)>","<androidx.core.content.a: java.util.concurrent.Executor a(android.content.Context)>"
"<io.flutter.embedding.engine.a: x.h l()>","<io.flutter.embedding.engine.a: x.h l()>"
"<androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)>","<androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)>"
"<io.flutter.plugins.webviewflutter.f2: void k(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void k(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<b.d: java.lang.Object get(java.lang.Object)>","<b.d: java.lang.Object get(java.lang.Object)>"
"<kotlin.jvm.internal.a: java.lang.Object getBoundReceiver()>","<kotlin.jvm.internal.a: java.lang.Object getBoundReceiver()>"
"<io.flutter.plugins.webviewflutter.f2: void t(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void t(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<y.i$a$a: void a(java.lang.Object)>","<y.i$a$a: void a(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.f2$a: void b(java.lang.String)>","<io.flutter.plugins.webviewflutter.f2$a: void b(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$z: java.lang.Object g(byte,java.nio.ByteBuffer)>","<io.flutter.plugins.webviewflutter.k$z: java.lang.Object g(byte,java.nio.ByteBuffer)>"
"<b.c$a: java.lang.Object next()>","<b.c$a: java.lang.Object next()>"
"<io.flutter.embedding.android.k: void m(io.flutter.embedding.android.g)>","<io.flutter.embedding.android.k: void m(io.flutter.embedding.android.g)>"
"<io.flutter.plugins.webviewflutter.i2: java.lang.Object k(long)>","<io.flutter.plugins.webviewflutter.i2: java.lang.Object k(long)>"
"<w0.i$b: java.lang.Object a(java.lang.Throwable)>","<w0.i$b: java.lang.Object a(java.lang.Throwable)>"
"<io.flutter.plugins.webviewflutter.f2: void j(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void j(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<w0.f$a: void <clinit>()>","<w0.f$a: void <clinit>()>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.f b(io.flutter.plugin.platform.SingleViewPresentation$e,io.flutter.plugin.platform.f)>","<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.f b(io.flutter.plugin.platform.SingleViewPresentation$e,io.flutter.plugin.platform.f)>"
"<io.flutter.plugins.webviewflutter.e$b: void c(java.lang.Void)>","<io.flutter.plugins.webviewflutter.e$b: void c(java.lang.Void)>"
"<io.flutter.embedding.android.i: void f(io.flutter.embedding.android.i)>","<io.flutter.embedding.android.i: void f(io.flutter.embedding.android.i)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void <init>(androidx.window.layout.WindowInfoTracker)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void <init>(androidx.window.layout.WindowInfoTracker)>"
"<io.flutter.plugins.webviewflutter.q3: java.lang.String k(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: java.lang.String k(java.lang.Long)>"
"<kotlin.jvm.internal.k: java.lang.Class b()>","<kotlin.jvm.internal.k: java.lang.Class b()>"
"<b.a$a: java.lang.Object i(int,java.lang.Object)>","<b.a$a: java.lang.Object i(int,java.lang.Object)>"
"<u0.w1: void <clinit>()>","<u0.w1: void <clinit>()>"
"<io.flutter.embedding.android.k$f: void a(io.flutter.embedding.engine.a)>","<io.flutter.embedding.android.k$f: void a(io.flutter.embedding.engine.a)>"
"<b.a: java.util.Set keySet()>","<b.a: java.util.Set keySet()>"
"<androidx.core.app.RemoteActionCompat: void <init>()>","<androidx.core.app.RemoteActionCompat: void <init>()>"
"<a.b$d: void <init>(a.b)>","<a.b$d: void <init>(a.b)>"
"<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()>","<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()>"
"<io.flutter.plugins.webviewflutter.k$w: void a(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$w: void a(java.lang.Long)>"
"<io.flutter.embedding.android.s$e: boolean a(android.view.KeyEvent)>","<io.flutter.embedding.android.s$e: boolean a(android.view.KeyEvent)>"
"<u0.v1$c: void <init>(kotlinx.coroutines.internal.o,u0.v1,java.lang.Object)>","<u0.v1$c: void <init>(kotlinx.coroutines.internal.o,u0.v1,java.lang.Object)>"
"<androidx.core.app.CoreComponentFactory: void <init>()>","<androidx.core.app.CoreComponentFactory: void <init>()>"
"<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)>","<androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)>"
"<b.c$d: void remove()>","<b.c$d: void remove()>"
"<u0.a1$a: void d(kotlinx.coroutines.internal.e0)>","<u0.a1$a: void d(kotlinx.coroutines.internal.e0)>"
"<io.flutter.embedding.android.i: boolean d(io.flutter.embedding.android.i,boolean)>","<io.flutter.embedding.android.i: boolean d(io.flutter.embedding.android.i,boolean)>"
"<io.flutter.plugins.webviewflutter.k$o: void e(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$o: void e(io.flutter.plugins.webviewflutter.k$o$a,java.lang.Object)>"
"<e0.u: java.util.Iterator iterator()>","<e0.u: java.util.Iterator iterator()>"
"<io.flutter.embedding.engine.a: x.p u()>","<io.flutter.embedding.engine.a: x.p u()>"
"<t0.l: java.lang.Long h(java.lang.String)>","<t0.l: java.lang.Long h(java.lang.String)>"
"<kotlinx.coroutines.internal.i$b: void <init>(java.lang.reflect.Constructor)>","<kotlinx.coroutines.internal.i$b: void <init>(java.lang.reflect.Constructor)>"
"<u0.j0: void <init>(long)>","<u0.j0: void <init>(long)>"
"<io.flutter.embedding.android.s$c: void <init>(io.flutter.embedding.android.s,android.view.KeyEvent)>","<io.flutter.embedding.android.s$c: void <init>(io.flutter.embedding.android.s,android.view.KeyEvent)>"
"<f.a$d: void <init>(android.view.WindowInsetsController,f.a)>","<f.a$d: void <init>(android.view.WindowInsetsController,f.a)>"
"<u0.o1$a: void a(u0.o1,java.util.concurrent.CancellationException,int,java.lang.Object)>","<u0.o1$a: void a(u0.o1,java.util.concurrent.CancellationException,int,java.lang.Object)>"
"<b.b: void <clinit>()>","<b.b: void <clinit>()>"
"<b.c$e: boolean removeAll(java.util.Collection)>","<b.c$e: boolean removeAll(java.util.Collection)>"
"<j.e: java.lang.CharSequence a()>","<j.e: java.lang.CharSequence a()>"
"<androidx.window.layout.SidecarCompat$Companion: void <init>(kotlin.jvm.internal.e)>","<androidx.window.layout.SidecarCompat$Companion: void <init>(kotlin.jvm.internal.e)>"
"<io.flutter.plugins.webviewflutter.k$d: void f(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$d: void f(io.flutter.plugins.webviewflutter.k$d$a,java.lang.Object)>"
"<org.chromium.support_lib_boundary.FeatureFlagHolderBoundaryInterface: java.lang.String[] getSupportedFeatures()>","<org.chromium.support_lib_boundary.FeatureFlagHolderBoundaryInterface: java.lang.String[] getSupportedFeatures()>"
"<s0.i$a: void <init>(s0.i)>","<s0.i$a: void <init>(s0.i)>"
"<q0.f: q0.c g(int,int)>","<q0.f: q0.c g(int,int)>"
"<b.c$c: boolean add(java.lang.Object)>","<b.c$c: boolean add(java.lang.Object)>"
"<androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()>","<androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.o2$a: void <init>()>","<io.flutter.plugins.webviewflutter.o2$a: void <init>()>"
"<x.a: x.a$b a(x.a)>","<x.a: x.a$b a(x.a)>"
"<u0.o1$a: u0.x0 d(u0.o1,boolean,boolean,n0.l,int,java.lang.Object)>","<u0.o1$a: u0.x0 d(u0.o1,boolean,boolean,n0.l,int,java.lang.Object)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long l(android.view.accessibility.AccessibilityNodeInfo)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long l(android.view.accessibility.AccessibilityNodeInfo)>"
"<e0.e: java.util.List j(java.lang.Object[],java.util.Comparator)>","<e0.e: java.util.List j(java.lang.Object[],java.util.Comparator)>"
"<io.flutter.embedding.engine.c$c: android.app.Activity a()>","<io.flutter.embedding.engine.c$c: android.app.Activity a()>"
"<io.flutter.plugins.webviewflutter.y2$d: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>","<io.flutter.plugins.webviewflutter.y2$d: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k$s: io.flutter.plugins.webviewflutter.k$s a(java.util.Map)>","<io.flutter.plugins.webviewflutter.k$s: io.flutter.plugins.webviewflutter.k$s a(java.util.Map)>"
"<kotlinx.coroutines.scheduling.e: java.lang.String toString()>","<kotlinx.coroutines.scheduling.e: java.lang.String toString()>"
"<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()>","<androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()>"
"<androidx.window.embedding.ActivityRule: void <init>(java.util.Set,boolean)>","<androidx.window.embedding.ActivityRule: void <init>(java.util.Set,boolean)>"
"<kotlinx.coroutines.internal.i$b: java.lang.Throwable a(java.lang.Throwable)>","<kotlinx.coroutines.internal.i$b: java.lang.Throwable a(java.lang.Throwable)>"
"<k.k: k.l d()>","<k.k: k.l d()>"
"<org.chromium.support_lib_boundary.StaticsBoundaryInterface: java.lang.String getVariationsHeader()>","<org.chromium.support_lib_boundary.StaticsBoundaryInterface: java.lang.String getVariationsHeader()>"
"<kotlinx.coroutines.internal.r: void <clinit>()>","<kotlinx.coroutines.internal.r: void <clinit>()>"
"<v0.c: android.os.Handler a(android.os.Looper,boolean)>","<v0.c: android.os.Handler a(android.os.Looper,boolean)>"
"<io.flutter.view.c$l: boolean g(io.flutter.view.c$l)>","<io.flutter.view.c$l: boolean g(io.flutter.view.c$l)>"
"<io.flutter.plugins.webviewflutter.q3$d: io.flutter.plugins.webviewflutter.q3$c b(android.content.Context)>","<io.flutter.plugins.webviewflutter.q3$d: io.flutter.plugins.webviewflutter.q3$c b(android.content.Context)>"
"<io.flutter.plugins.webviewflutter.k$d: void g(java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,io.flutter.plugins.webviewflutter.k$d$a)>","<io.flutter.plugins.webviewflutter.k$d: void g(java.lang.Long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,io.flutter.plugins.webviewflutter.k$d$a)>"
"<g0.g$a$a: g0.g a(g0.g,g0.g$b)>","<g0.g$a$a: g0.g a(g0.g,g0.g$b)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$b: void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$a)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$b: void <init>(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$a)>"
"<io.flutter.plugins.webviewflutter.y: y.g b()>","<io.flutter.plugins.webviewflutter.y: y.g b()>"
"<io.flutter.plugins.webviewflutter.s2$b: void <init>(io.flutter.plugins.webviewflutter.r2,android.webkit.WebViewClient)>","<io.flutter.plugins.webviewflutter.s2$b: void <init>(io.flutter.plugins.webviewflutter.r2,android.webkit.WebViewClient)>"
"<y.o: java.lang.Object a(java.nio.ByteBuffer)>","<y.o: java.lang.Object a(java.nio.ByteBuffer)>"
"<androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()>","<androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()>"
"<io.flutter.plugins.webviewflutter.k$c0: void q(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: void q(java.lang.Long,java.lang.Long)>"
"<u0.y1: u0.y1 q()>","<u0.y1: u0.y1 q()>"
"<io.flutter.plugin.platform.q$a: void <init>(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.q$a: void <init>(io.flutter.plugin.platform.q)>"
"<p.a: void <init>(android.content.Context,float,io.flutter.embedding.android.a)>","<p.a: void <init>(android.content.Context,float,io.flutter.embedding.android.a)>"
"<io.flutter.plugins.webviewflutter.q2: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<io.flutter.plugins.webviewflutter.q2: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState$a: io.flutter.embedding.android.FlutterSplashView$SavedState a(android.os.Parcel)>","<io.flutter.embedding.android.FlutterSplashView$SavedState$a: io.flutter.embedding.android.FlutterSplashView$SavedState a(android.os.Parcel)>"
"<t0.c: int d(t0.c)>","<t0.c: int d(t0.c)>"
"<kotlinx.coroutines.internal.b0: java.lang.String b(java.lang.String)>","<kotlinx.coroutines.internal.b0: java.lang.String b(java.lang.String)>"
"<m.a$b: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<m.a$b: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<androidx.window.layout.SidecarWindowBackend: void <clinit>()>","<androidx.window.layout.SidecarWindowBackend: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$y: y.g i()>","<io.flutter.plugins.webviewflutter.k$y: y.g i()>"
"<t0.n: java.lang.String R(java.lang.String,java.lang.String,java.lang.String)>","<t0.n: java.lang.String R(java.lang.String,java.lang.String,java.lang.String)>"
"<b.c$b: java.lang.Object[] toArray(java.lang.Object[])>","<b.c$b: java.lang.Object[] toArray(java.lang.Object[])>"
"<e0.s: void <clinit>()>","<e0.s: void <clinit>()>"
"<io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)>","<io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)>"
"<u0.d1: void <clinit>()>","<u0.d1: void <clinit>()>"
"<m.c$d: void <init>(y.b$a,m.c$b)>","<m.c$d: void <init>(y.b$a,m.c$b)>"
"<kotlin.jvm.internal.a$a: void <clinit>()>","<kotlin.jvm.internal.a$a: void <clinit>()>"
"<androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()>","<androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()>"
"<kotlinx.coroutines.internal.l: java.lang.Object c(java.lang.Object,java.lang.Object)>","<kotlinx.coroutines.internal.l: java.lang.Object c(java.lang.Object,java.lang.Object)>"
"<e0.d: java.lang.Object[] b(java.lang.Object[],java.lang.Object[],int,int,int)>","<e0.d: java.lang.Object[] b(java.lang.Object[],java.lang.Object[],int,int,int)>"
"<k.d: android.webkit.TracingController a()>","<k.d: android.webkit.TracingController a()>"
"<io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)>","<io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)>"
"<h0.a: h0.a[] values()>","<h0.a: h0.a[] values()>"
"<io.flutter.embedding.android.d: java.lang.String A()>","<io.flutter.embedding.android.d: java.lang.String A()>"
"<io.flutter.embedding.android.k: void onAttachedToWindow()>","<io.flutter.embedding.android.k: void onAttachedToWindow()>"
"<io.flutter.view.c: io.flutter.view.c$k u(io.flutter.view.c)>","<io.flutter.view.c: io.flutter.view.c$k u(io.flutter.view.c)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: boolean k(long,int)>","<io.flutter.view.AccessibilityViewEmbedder$b: boolean k(long,int)>"
"<e0.g: java.util.List d(java.lang.Object[])>","<e0.g: java.util.List d(java.lang.Object[])>"
"<x.k$a: void c(y.h,y.i$d)>","<x.k$a: void c(y.h,y.i$d)>"
"<io.flutter.plugins.webviewflutter.y2$d: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>","<io.flutter.plugins.webviewflutter.y2$d: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>"
"<kotlinx.coroutines.internal.q$a: long c(long,int)>","<kotlinx.coroutines.internal.q$a: long c(long,int)>"
"<androidx.lifecycle.c$a: void <clinit>()>","<androidx.lifecycle.c$a: void <clinit>()>"
"<u0.a1: void <init>()>","<u0.a1: void <init>()>"
"<io.flutter.embedding.engine.a: io.flutter.plugin.platform.q n()>","<io.flutter.embedding.engine.a: io.flutter.plugin.platform.q n()>"
"<androidx.window.core.Version: java.lang.String toString()>","<androidx.window.core.Version: java.lang.String toString()>"
"<kotlin.coroutines.jvm.internal.c: java.lang.String toString()>","<kotlin.coroutines.jvm.internal.c: java.lang.String toString()>"
"<x.p$c: x.p$c a(org.json.JSONObject)>","<x.p$c: x.p$c a(org.json.JSONObject)>"
"<io.flutter.view.c: android.view.accessibility.AccessibilityEvent H(int,int)>","<io.flutter.view.c: android.view.accessibility.AccessibilityEvent H(int,int)>"
"<io.flutter.view.d$c: void a(io.flutter.view.d$b)>","<io.flutter.view.d$c: void a(io.flutter.view.d$b)>"
"<io.flutter.plugins.webviewflutter.k$d0: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$d0: void <clinit>()>"
"<t0.n: d0.j s(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>","<t0.n: d0.j s(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)>"
"<b.a: java.util.Collection values()>","<b.a: java.util.Collection values()>"
"<io.flutter.embedding.android.e$c: void y(io.flutter.embedding.engine.a)>","<io.flutter.embedding.android.e$c: void y(io.flutter.embedding.engine.a)>"
"<io.flutter.plugin.editing.b: android.view.inputmethod.CursorAnchorInfo c()>","<io.flutter.plugin.editing.b: android.view.inputmethod.CursorAnchorInfo c()>"
"<io.flutter.plugins.webviewflutter.q3: java.lang.Long d(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: java.lang.Long d(java.lang.Long)>"
"<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q k(int,int)>","<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q k(int,int)>"
"<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertWebMessagePort(java.lang.reflect.InvocationHandler)>","<org.chromium.support_lib_boundary.WebkitToCompatConverterBoundaryInterface: java.lang.Object convertWebMessagePort(java.lang.reflect.InvocationHandler)>"
"<io.flutter.view.c$l: boolean s0(io.flutter.view.c$g)>","<io.flutter.view.c$l: boolean s0(io.flutter.view.c$g)>"
"<kotlinx.coroutines.internal.t: java.lang.Void t()>","<kotlinx.coroutines.internal.t: java.lang.Void t()>"
"<androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)>","<androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)>"
"<kotlinx.coroutines.internal.i: void <clinit>()>","<kotlinx.coroutines.internal.i: void <clinit>()>"
"<k.i: android.webkit.WebResourceError d()>","<k.i: android.webkit.WebResourceError d()>"
"<kotlinx.coroutines.internal.v: java.lang.String toString()>","<kotlinx.coroutines.internal.v: java.lang.String toString()>"
"<x.k$d$a: void <clinit>()>","<x.k$d$a: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.k$u: void b(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$u: void b(java.lang.Long,java.lang.Long)>"
"<io.flutter.view.c$n: void <init>()>","<io.flutter.view.c$n: void <init>()>"
"<io.flutter.plugins.webviewflutter.y2$d: void m(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void m(java.lang.Void)>"
"<t0.d: java.lang.String V(java.lang.String,char,java.lang.String,int,java.lang.Object)>","<t0.d: java.lang.String V(java.lang.String,char,java.lang.String,int,java.lang.Object)>"
"<w.a: io.flutter.view.d$c a()>","<w.a: io.flutter.view.d$c a()>"
"<io.flutter.plugin.platform.c$a: java.lang.CharSequence b(x.i$e)>","<io.flutter.plugin.platform.c$a: java.lang.CharSequence b(x.i$e)>"
"<kotlinx.coroutines.internal.o: void <init>()>","<kotlinx.coroutines.internal.o: void <init>()>"
"<w.a$b: void <init>(android.graphics.Rect,w.a$d,w.a$c)>","<w.a$b: void <init>(android.graphics.Rect,w.a$d,w.a$c)>"
"<io.flutter.plugins.webviewflutter.k$t: io.flutter.plugins.webviewflutter.k$t a(java.util.Map)>","<io.flutter.plugins.webviewflutter.k$t: io.flutter.plugins.webviewflutter.k$t a(java.util.Map)>"
"<kotlinx.coroutines.internal.k: void <clinit>()>","<kotlinx.coroutines.internal.k: void <clinit>()>"
"<w.a$f$b: void <init>(w.a$f)>","<w.a$f$b: void <init>(w.a$f)>"
"<o.d$a: o.d$b b()>","<o.d$a: o.d$b b()>"
"<d0.j: java.lang.String toString()>","<d0.j: java.lang.String toString()>"
"<x.l$a: void a(java.lang.Object)>","<x.l$a: void a(java.lang.Object)>"
"<y0.a$a: void <init>()>","<y0.a$a: void <init>()>"
"<androidx.activity.ImmLeaksCleaner: void <clinit>()>","<androidx.activity.ImmLeaksCleaner: void <clinit>()>"
"<io.flutter.plugin.editing.f: android.view.View b(io.flutter.plugin.editing.f)>","<io.flutter.plugin.editing.f: android.view.View b(io.flutter.plugin.editing.f)>"
"<org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.String getData()>","<org.chromium.support_lib_boundary.WebMessageBoundaryInterface: java.lang.String getData()>"
"<io.flutter.plugins.webviewflutter.r: y.g b()>","<io.flutter.plugins.webviewflutter.r: y.g b()>"
"<x.l$a: void b(java.lang.String,java.lang.String,java.lang.Object)>","<x.l$a: void b(java.lang.String,java.lang.String,java.lang.Object)>"
"<androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()>","<androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()>"
"<androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)>","<androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)>"
"<io.flutter.embedding.android.e: void <init>(io.flutter.embedding.android.e$c)>","<io.flutter.embedding.android.e: void <init>(io.flutter.embedding.android.e$c)>"
"<t0.n: java.lang.String X(java.lang.String,java.lang.String,java.lang.String)>","<t0.n: java.lang.String X(java.lang.String,java.lang.String,java.lang.String)>"
"<u0.u1: u0.z1 c()>","<u0.u1: u0.z1 c()>"
"<io.flutter.embedding.android.FlutterSplashView$SavedState$a: void <init>()>","<io.flutter.embedding.android.FlutterSplashView$SavedState$a: void <init>()>"
"<q0.a: void <init>(int,int,int)>","<q0.a: void <init>(int,int,int)>"
"<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()>","<androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()>"
"<kotlinx.coroutines.scheduling.a$c: void <init>(kotlinx.coroutines.scheduling.a)>","<kotlinx.coroutines.scheduling.a$c: void <init>(kotlinx.coroutines.scheduling.a)>"
"<b.c$e: java.util.Iterator iterator()>","<b.c$e: java.util.Iterator iterator()>"
"<androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)>","<androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)>"
"<io.flutter.plugin.editing.f$c$a: io.flutter.plugin.editing.f$c$a valueOf(java.lang.String)>","<io.flutter.plugin.editing.f$c$a: io.flutter.plugin.editing.f$c$a valueOf(java.lang.String)>"
"<kotlinx.coroutines.scheduling.l: void <clinit>()>","<kotlinx.coroutines.scheduling.l: void <clinit>()>"
"<u0.i1: u0.z1 c()>","<u0.i1: u0.z1 c()>"
"<io.flutter.plugins.webviewflutter.f2: void f(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void f(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<io.flutter.embedding.android.k: boolean g(io.flutter.embedding.android.k,boolean)>","<io.flutter.embedding.android.k: boolean g(io.flutter.embedding.android.k,boolean)>"
"<z.a$a: void <init>(z.a)>","<z.a$a: void <init>(z.a)>"
"<io.flutter.embedding.engine.a$a: void b()>","<io.flutter.embedding.engine.a$a: void b()>"
"<h0.b: java.lang.Object c()>","<h0.b: java.lang.Object c()>"
"<io.flutter.embedding.android.d: android.content.Context getContext()>","<io.flutter.embedding.android.d: android.content.Context getContext()>"
"<u0.v1: u0.z1 N(u0.j1)>","<u0.v1: u0.z1 N(u0.j1)>"
"<io.flutter.plugins.webviewflutter.q3$b: void c(io.flutter.plugins.webviewflutter.p2)>","<io.flutter.plugins.webviewflutter.q3$b: void c(io.flutter.plugins.webviewflutter.p2)>"
"<u0.v1$b: boolean i()>","<u0.v1$b: boolean i()>"
"<b.c$b: boolean isEmpty()>","<b.c$b: boolean isEmpty()>"
"<b.c$a: void remove()>","<b.c$a: void remove()>"
"<kotlinx.coroutines.scheduling.k: java.lang.String toString()>","<kotlinx.coroutines.scheduling.k: java.lang.String toString()>"
"<io.flutter.embedding.android.d: java.lang.String g()>","<io.flutter.embedding.android.d: java.lang.String g()>"
"<io.flutter.view.c: io.flutter.view.c$h z(int)>","<io.flutter.view.c: io.flutter.view.c$h z(int)>"
"<io.flutter.view.e$b: void a()>","<io.flutter.view.e$b: void a()>"
"<u0.g2: void <init>()>","<u0.g2: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$y: void p(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void p(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<f.a$e: void b(boolean)>","<f.a$e: void b(boolean)>"
"<io.flutter.embedding.android.i$a: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>","<io.flutter.embedding.android.i$a: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>"
"<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)>","<androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)>"
"<io.flutter.plugin.platform.j: void <init>(android.content.Context,io.flutter.view.d$c)>","<io.flutter.plugin.platform.j: void <init>(android.content.Context,io.flutter.view.d$c)>"
"<w0.i$a: int hashCode()>","<w0.i$a: int hashCode()>"
"<kotlinx.coroutines.internal.f: java.lang.String toString()>","<kotlinx.coroutines.internal.f: java.lang.String toString()>"
"<io.flutter.view.c$l: android.text.SpannableString f0(java.lang.String,java.util.List)>","<io.flutter.view.c$l: android.text.SpannableString f0(java.lang.String,java.util.List)>"
"<androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()>","<androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()>"
"<u0.o: void <init>(g0.d,java.lang.Throwable,boolean)>","<u0.o: void <init>(g0.d,java.lang.Throwable,boolean)>"
"<io.flutter.view.e$b: void onDisplayAdded(int)>","<io.flutter.view.e$b: void onDisplayAdded(int)>"
"<l.a: void <init>(o.d,n.a,io.flutter.embedding.engine.FlutterJNI$c,java.util.concurrent.ExecutorService,l.a$a)>","<l.a: void <init>(o.d,n.a,io.flutter.embedding.engine.FlutterJNI$c,java.util.concurrent.ExecutorService,l.a$a)>"
"<kotlin.jvm.internal.m: java.lang.String e(kotlin.jvm.internal.j)>","<kotlin.jvm.internal.m: java.lang.String e(kotlin.jvm.internal.j)>"
"<io.flutter.plugins.webviewflutter.v2$a: void <init>()>","<io.flutter.plugins.webviewflutter.v2$a: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$y: void u(java.lang.Long,java.lang.Long,io.flutter.plugins.webviewflutter.k$t,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void u(java.lang.Long,java.lang.Long,io.flutter.plugins.webviewflutter.k$t,io.flutter.plugins.webviewflutter.k$y$a)>"
"<androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()>","<androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()>"
"<io.flutter.plugins.webviewflutter.s2$b: void c(java.lang.Void)>","<io.flutter.plugins.webviewflutter.s2$b: void c(java.lang.Void)>"
"<io.flutter.plugin.editing.f$a: void f(int,boolean)>","<io.flutter.plugin.editing.f$a: void f(int,boolean)>"
"<io.flutter.plugins.webviewflutter.k$q: void b(java.lang.Long,java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$q: void b(java.lang.Long,java.lang.Long)>"
"<u0.v1: java.lang.Object V(java.lang.Object)>","<u0.v1: java.lang.Object V(java.lang.Object)>"
"<g0.g$a$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>","<g0.g$a$a: java.lang.Object invoke(java.lang.Object,java.lang.Object)>"
"<t0.c: java.lang.CharSequence b(t0.c)>","<t0.c: java.lang.CharSequence b(t0.c)>"
"<io.flutter.plugins.webviewflutter.k$y: void l(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void l(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$s: void <init>(io.flutter.plugins.webviewflutter.k$a)>","<io.flutter.plugins.webviewflutter.k$s: void <init>(io.flutter.plugins.webviewflutter.k$a)>"
"<androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.a)>","<androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.a)>"
"<kotlinx.coroutines.internal.g: java.lang.Throwable r(u0.k)>","<kotlinx.coroutines.internal.g: java.lang.Throwable r(u0.k)>"
"<io.flutter.embedding.engine.a: io.flutter.plugin.platform.q b(io.flutter.embedding.engine.a)>","<io.flutter.embedding.engine.a: io.flutter.plugin.platform.q b(io.flutter.embedding.engine.a)>"
"<io.flutter.embedding.android.t$e: void <init>(int,long,long)>","<io.flutter.embedding.android.t$e: void <init>(int,long,long)>"
"<k.g: void <init>(android.webkit.SafeBrowsingResponse)>","<k.g: void <init>(android.webkit.SafeBrowsingResponse)>"
"<d0.m: void <init>(n0.a,java.lang.Object)>","<d0.m: void <init>(n0.a,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.k$y: void n(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y: void n(io.flutter.plugins.webviewflutter.k$y$a,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.r0: void n(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void n(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<kotlinx.coroutines.internal.g: g0.d c()>","<kotlinx.coroutines.internal.g: g0.d c()>"
"<b.c$e: java.lang.Object[] toArray(java.lang.Object[])>","<b.c$e: java.lang.Object[] toArray(java.lang.Object[])>"
"<kotlinx.coroutines.internal.d: void <init>()>","<kotlinx.coroutines.internal.d: void <init>()>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long i(android.view.accessibility.AccessibilityNodeInfo)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long i(android.view.accessibility.AccessibilityNodeInfo)>"
"<io.flutter.view.c$h: java.lang.String b(io.flutter.view.c$h,java.lang.String)>","<io.flutter.view.c$h: java.lang.String b(io.flutter.view.c$h,java.lang.String)>"
"<g0.h: void <init>()>","<g0.h: void <init>()>"
"<y.p: y.h e(java.nio.ByteBuffer)>","<y.p: y.h e(java.nio.ByteBuffer)>"
"<io.flutter.plugins.webviewflutter.y2$d: void <init>(io.flutter.plugins.webviewflutter.x2,boolean)>","<io.flutter.plugins.webviewflutter.y2$d: void <init>(io.flutter.plugins.webviewflutter.x2,boolean)>"
"<x.k$d$a: void <init>(java.lang.String,int)>","<x.k$d$a: void <init>(java.lang.String,int)>"
"<io.flutter.plugin.editing.c: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>","<io.flutter.plugin.editing.c: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>"
"<io.flutter.embedding.android.k: void setVisibility(int)>","<io.flutter.embedding.android.k: void setVisibility(int)>"
"<io.flutter.plugin.platform.q: io.flutter.plugin.platform.h P()>","<io.flutter.plugin.platform.q: io.flutter.plugin.platform.h P()>"
"<io.flutter.plugins.webviewflutter.k$j: y.g d()>","<io.flutter.plugins.webviewflutter.k$j: y.g d()>"
"<c0.a: android.os.Handler a(android.os.Looper)>","<c0.a: android.os.Handler a(android.os.Looper)>"
"<io.flutter.embedding.android.m: void c(io.flutter.embedding.android.s$d$a,boolean)>","<io.flutter.embedding.android.m: void c(io.flutter.embedding.android.s$d$a,boolean)>"
"<u0.v1: java.lang.String k0(java.lang.Object)>","<u0.v1: java.lang.String k0(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.s2$b: void a()>","<io.flutter.plugins.webviewflutter.s2$b: void a()>"
"<androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void <init>(androidx.window.layout.SidecarCompat,android.app.Activity)>","<androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void <init>(androidx.window.layout.SidecarCompat,android.app.Activity)>"
"<e0.r: void <init>()>","<e0.r: void <init>()>"
"<g0.e$a: g0.g b(g0.e,g0.g$c)>","<g0.e$a: g0.g b(g0.e,g0.g$c)>"
"<androidx.window.layout.WindowInfoTracker: x0.b windowLayoutInfo(android.app.Activity)>","<androidx.window.layout.WindowInfoTracker: x0.b windowLayoutInfo(android.app.Activity)>"
"<androidx.lifecycle.g: androidx.lifecycle.c$a n(androidx.lifecycle.c$b)>","<androidx.lifecycle.g: androidx.lifecycle.c$a n(androidx.lifecycle.c$b)>"
"<io.flutter.plugins.webviewflutter.k$t$a: void <init>()>","<io.flutter.plugins.webviewflutter.k$t$a: void <init>()>"
"<q0.c: q0.c e()>","<q0.c: q0.c e()>"
"<io.flutter.embedding.android.d: android.app.Activity a()>","<io.flutter.embedding.android.d: android.app.Activity a()>"
"<g0.c: java.lang.Object fold(java.lang.Object,n0.p)>","<g0.c: java.lang.Object fold(java.lang.Object,n0.p)>"
"<u0.k: java.lang.Object s(java.lang.Object,java.lang.Object,n0.l)>","<u0.k: java.lang.Object s(java.lang.Object,java.lang.Object,n0.l)>"
"<u0.r0: void <init>()>","<u0.r0: void <init>()>"
"<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q e(int,java.lang.Object)>","<kotlinx.coroutines.internal.q: kotlinx.coroutines.internal.q e(int,java.lang.Object)>"
"<x.p$g: x.p$g a(java.lang.String)>","<x.p$g: x.p$g a(java.lang.String)>"
"<t0.c$a: void a()>","<t0.c$a: void a()>"
"<g0.g: g0.g plus(g0.g)>","<g0.g: g0.g plus(g0.g)>"
"<io.flutter.plugins.webviewflutter.v2$a: android.webkit.WebSettings a(android.webkit.WebView)>","<io.flutter.plugins.webviewflutter.v2$a: android.webkit.WebSettings a(android.webkit.WebView)>"
"<androidx.window.layout.HardwareFoldingFeature$Type: void <init>(java.lang.String)>","<androidx.window.layout.HardwareFoldingFeature$Type: void <init>(java.lang.String)>"
"<g0.a: g0.g minusKey(g0.g$c)>","<g0.a: g0.g minusKey(g0.g$c)>"
"<io.flutter.view.c$l: int V(io.flutter.view.c$l)>","<io.flutter.view.c$l: int V(io.flutter.view.c$l)>"
"<androidx.lifecycle.g: androidx.lifecycle.c$b a()>","<androidx.lifecycle.g: androidx.lifecycle.c$b a()>"
"<y.j: java.nio.ByteBuffer d(java.lang.Object)>","<y.j: java.nio.ByteBuffer d(java.lang.Object)>"
"<u0.p: void <init>(u0.l)>","<u0.p: void <init>(u0.l)>"
"<q.a$b: android.content.Context a()>","<q.a$b: android.content.Context a()>"
"<b.d: void <init>()>","<b.d: void <init>()>"
"<d0.k$a: void <init>(kotlin.jvm.internal.e)>","<d0.k$a: void <init>(kotlin.jvm.internal.e)>"
"<d.a$a: void <init>(android.os.Handler)>","<d.a$a: void <init>(android.os.Handler)>"
"<androidx.window.layout.FoldingFeature$State: java.lang.String toString()>","<androidx.window.layout.FoldingFeature$State: java.lang.String toString()>"
"<u0.a1: void <clinit>()>","<u0.a1: void <clinit>()>"
"<io.flutter.view.AccessibilityViewEmbedder$c: void <init>(android.view.View,int)>","<io.flutter.view.AccessibilityViewEmbedder$c: void <init>(android.view.View,int)>"
"<y0.b: void <init>()>","<y0.b: void <init>()>"
"<io.flutter.embedding.android.e$c: java.util.List l()>","<io.flutter.embedding.android.e$c: java.util.List l()>"
"<y.q: java.lang.String c(java.nio.ByteBuffer)>","<y.q: java.lang.String c(java.nio.ByteBuffer)>"
"<androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)>","<androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)>"
"<b.d: java.lang.Object l(int)>","<b.d: java.lang.Object l(int)>"
"<b0.a$a$a: void <init>(b0.a$a,boolean)>","<b0.a$a$a: void <init>(b0.a$a,boolean)>"
"<e0.t: void <clinit>()>","<e0.t: void <clinit>()>"
"<io.flutter.embedding.android.k: void e(io.flutter.embedding.android.k,boolean,boolean)>","<io.flutter.embedding.android.k: void e(io.flutter.embedding.android.k,boolean,boolean)>"
"<io.flutter.plugins.webviewflutter.q3: io.flutter.plugins.webviewflutter.k$e0 i(java.lang.Long)>","<io.flutter.plugins.webviewflutter.q3: io.flutter.plugins.webviewflutter.k$e0 i(java.lang.Long)>"
"<x.m$a: x.m$a f(boolean)>","<x.m$a: x.m$a f(boolean)>"
"<io.flutter.plugins.webviewflutter.s2$b: boolean g(android.webkit.WebView,android.os.Message,android.webkit.WebView)>","<io.flutter.plugins.webviewflutter.s2$b: boolean g(android.webkit.WebView,android.os.Message,android.webkit.WebView)>"
"<io.flutter.plugins.webviewflutter.k$j: void e(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$j: void e(io.flutter.plugins.webviewflutter.k$j$a,java.lang.Object)>"
"<n.a: java.lang.String b(int,java.lang.String)>","<n.a: java.lang.String b(int,java.lang.String)>"
"<k.k: java.lang.Object f()>","<k.k: java.lang.Object f()>"
"<w0.c: java.lang.Object a(java.lang.Object)>","<w0.c: java.lang.Object a(java.lang.Object)>"
"<kotlinx.coroutines.internal.u: kotlinx.coroutines.internal.h0 c(n0.l,java.lang.Object,kotlinx.coroutines.internal.h0)>","<kotlinx.coroutines.internal.u: kotlinx.coroutines.internal.h0 c(n0.l,java.lang.Object,kotlinx.coroutines.internal.h0)>"
"<u0.v1: u0.r I(u0.j1)>","<u0.v1: u0.r I(u0.j1)>"
"<io.flutter.embedding.android.k: io.flutter.embedding.android.g i(io.flutter.embedding.android.k)>","<io.flutter.embedding.android.k: io.flutter.embedding.android.g i(io.flutter.embedding.android.k)>"
"<q0.d: q0.a f(int,int)>","<q0.d: q0.a f(int,int)>"
"<y.i$b: void a(java.nio.ByteBuffer)>","<y.i$b: void a(java.nio.ByteBuffer)>"
"<androidx.core.graphics.drawable.IconCompat: java.lang.String toString()>","<androidx.core.graphics.drawable.IconCompat: java.lang.String toString()>"
"<x.l: byte[] b(x.l,byte[])>","<x.l: byte[] b(x.l,byte[])>"
"<io.flutter.plugins.webviewflutter.k$c0: java.lang.Boolean x(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$c0: java.lang.Boolean x(java.lang.Long)>"
"<e0.g: int c(java.util.List)>","<e0.g: int c(java.util.List)>"
"<u0.v1: java.lang.String Y()>","<u0.v1: java.lang.String Y()>"
"<androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>","<androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()>"
"<w0.r: void <init>(n0.l)>","<w0.r: void <init>(n0.l)>"
"<io.flutter.view.c$l: int m(io.flutter.view.c$l,int)>","<io.flutter.view.c$l: int m(io.flutter.view.c$l,int)>"
"<m.c: void f(m.c,java.lang.String,int,m.c$d,java.nio.ByteBuffer,long)>","<m.c: void f(m.c,java.lang.String,int,m.c$d,java.nio.ByteBuffer,long)>"
"<a.b: a.b$c c(java.lang.Object)>","<a.b: a.b$c c(java.lang.Object)>"
"<u0.c0: java.lang.Object d(java.lang.Object,n0.l,int,java.lang.Object)>","<u0.c0: java.lang.Object d(java.lang.Object,n0.l,int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.y2$d: void h(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void h(java.lang.Void)>"
"<u0.f0: g0.g$b get(g0.g$c)>","<u0.f0: g0.g$b get(g0.g$c)>"
"<k.h: android.webkit.WebMessagePort[] b(j.d[])>","<k.h: android.webkit.WebMessagePort[] b(j.d[])>"
"<io.flutter.plugins.webviewflutter.k$b0: void <init>()>","<io.flutter.plugins.webviewflutter.k$b0: void <init>()>"
"<io.flutter.plugins.webviewflutter.e$b: void e(java.lang.Void)>","<io.flutter.plugins.webviewflutter.e$b: void e(java.lang.Void)>"
"<io.flutter.view.c$l: void D0(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>","<io.flutter.view.c$l: void D0(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])>"
"<androidx.window.embedding.SplitPairFilter: void <init>(android.content.ComponentName,android.content.ComponentName,java.lang.String)>","<androidx.window.embedding.SplitPairFilter: void <init>(android.content.ComponentName,android.content.ComponentName,java.lang.String)>"
"<kotlinx.coroutines.internal.u$a: void a(java.lang.Throwable)>","<kotlinx.coroutines.internal.u$a: void a(java.lang.Throwable)>"
"<l.a$b: l.a a()>","<l.a$b: l.a a()>"
"<t0.f$a: void <init>()>","<t0.f$a: void <init>()>"
"<x.m$a: void <init>(y.a)>","<x.m$a: void <init>(y.a)>"
"<io.flutter.plugins.webviewflutter.n: y.g c()>","<io.flutter.plugins.webviewflutter.n: y.g c()>"
"<u0.g1: java.util.concurrent.Executor r()>","<u0.g1: java.util.concurrent.Executor r()>"
"<b.c$c: java.util.Iterator iterator()>","<b.c$c: java.util.Iterator iterator()>"
"<kotlinx.coroutines.scheduling.a$c: java.lang.Object g()>","<kotlinx.coroutines.scheduling.a$c: java.lang.Object g()>"
"<kotlinx.coroutines.internal.i$a: void <init>(java.lang.reflect.Constructor)>","<kotlinx.coroutines.internal.i$a: void <init>(java.lang.reflect.Constructor)>"
"<androidx.window.layout.ActivityCompatHelperApi30: void <init>()>","<androidx.window.layout.ActivityCompatHelperApi30: void <init>()>"
"<u0.h: u0.o1 a(u0.l0,g0.g,u0.n0,n0.p)>","<u0.h: u0.o1 a(u0.l0,g0.g,u0.n0,n0.p)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: void <init>(e.a)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: void <init>(e.a)>"
"<q0.d: q0.c g(int,int)>","<q0.d: q0.c g(int,int)>"
"<kotlinx.coroutines.internal.i: n0.l a(java.lang.reflect.Constructor)>","<kotlinx.coroutines.internal.i: n0.l a(java.lang.reflect.Constructor)>"
"<kotlin.jvm.internal.l: void <clinit>()>","<kotlin.jvm.internal.l: void <clinit>()>"
"<io.flutter.view.c$o: io.flutter.view.c$o[] values()>","<io.flutter.view.c$o: io.flutter.view.c$o[] values()>"
"<s0.i: n0.l b(s0.i)>","<s0.i: n0.l b(s0.i)>"
"<b.c$b: int size()>","<b.c$b: int size()>"
"<d0.o: void <init>()>","<d0.o: void <init>()>"
"<kotlin.jvm.internal.a$a: void <init>()>","<kotlin.jvm.internal.a$a: void <init>()>"
"<io.flutter.plugins.webviewflutter.r0: void b(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r0: void b(io.flutter.plugins.webviewflutter.k$u,java.lang.Object,y.a$e)>"
"<k.a$f: boolean c()>","<k.a$f: boolean c()>"
"<kotlinx.coroutines.internal.p: void <clinit>()>","<kotlinx.coroutines.internal.p: void <clinit>()>"
"<kotlinx.coroutines.internal.t: java.lang.Void s(g0.g,java.lang.Runnable)>","<kotlinx.coroutines.internal.t: java.lang.Void s(g0.g,java.lang.Runnable)>"
"<io.flutter.plugins.webviewflutter.k$s$a: io.flutter.plugins.webviewflutter.k$s a()>","<io.flutter.plugins.webviewflutter.k$s$a: io.flutter.plugins.webviewflutter.k$s a()>"
"<io.flutter.plugin.platform.q$a: void q(int)>","<io.flutter.plugin.platform.q$a: void q(int)>"
"<io.flutter.view.c$i: io.flutter.view.c$i valueOf(java.lang.String)>","<io.flutter.view.c$i: io.flutter.view.c$i valueOf(java.lang.String)>"
"<u0.j0$a: void <init>(kotlin.jvm.internal.e)>","<u0.j0$a: void <init>(kotlin.jvm.internal.e)>"
"<androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()>","<androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()>"
"<e0.s: java.lang.Object remove(int)>","<e0.s: java.lang.Object remove(int)>"
"<io.flutter.plugin.platform.q: void <clinit>()>","<io.flutter.plugin.platform.q: void <clinit>()>"
"<u0.g: u0.o1 b(u0.l0,g0.g,u0.n0,n0.p,int,java.lang.Object)>","<u0.g: u0.o1 b(u0.l0,g0.g,u0.n0,n0.p,int,java.lang.Object)>"
"<kotlinx.coroutines.internal.x: java.lang.StackTraceElement getStackTraceElement()>","<kotlinx.coroutines.internal.x: java.lang.StackTraceElement getStackTraceElement()>"
"<w.a$f: io.flutter.view.d$a e(w.a$f)>","<w.a$f: io.flutter.view.d$a e(w.a$f)>"
"<io.flutter.plugin.editing.b: void <init>(android.view.View,int,x.p,io.flutter.plugin.editing.b$a,io.flutter.plugin.editing.c,android.view.inputmethod.EditorInfo,io.flutter.embedding.engine.FlutterJNI)>","<io.flutter.plugin.editing.b: void <init>(android.view.View,int,x.p,io.flutter.plugin.editing.b$a,io.flutter.plugin.editing.c,android.view.inputmethod.EditorInfo,io.flutter.embedding.engine.FlutterJNI)>"
"<androidx.window.embedding.EmbeddingAdapter: boolean e(java.util.Set,android.content.Intent)>","<androidx.window.embedding.EmbeddingAdapter: boolean e(java.util.Set,android.content.Intent)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>"
"<io.flutter.view.c: boolean b(io.flutter.view.c$l,io.flutter.view.c$l)>","<io.flutter.view.c: boolean b(io.flutter.view.c$l,io.flutter.view.c$l)>"
"<io.flutter.plugin.platform.q: java.util.List f0(java.lang.Object)>","<io.flutter.plugin.platform.q: java.util.List f0(java.lang.Object)>"
"<q0.c$a: void <init>(kotlin.jvm.internal.e)>","<q0.c$a: void <init>(kotlin.jvm.internal.e)>"
"<d0.o: void <clinit>()>","<d0.o: void <clinit>()>"
"<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$b d(io.flutter.plugin.platform.SingleViewPresentation$e,io.flutter.plugin.platform.SingleViewPresentation$b)>","<io.flutter.plugin.platform.SingleViewPresentation$e: io.flutter.plugin.platform.SingleViewPresentation$b d(io.flutter.plugin.platform.SingleViewPresentation$e,io.flutter.plugin.platform.SingleViewPresentation$b)>"
"<io.flutter.plugins.webviewflutter.q3$a: void a()>","<io.flutter.plugins.webviewflutter.q3$a: void a()>"
"<io.flutter.plugin.editing.b: void <init>(android.view.View,int,x.p,io.flutter.plugin.editing.b$a,io.flutter.plugin.editing.c,android.view.inputmethod.EditorInfo)>","<io.flutter.plugin.editing.b: void <init>(android.view.View,int,x.p,io.flutter.plugin.editing.b$a,io.flutter.plugin.editing.c,android.view.inputmethod.EditorInfo)>"
"<kotlinx.coroutines.internal.i$f: java.lang.Object invoke(java.lang.Object)>","<kotlinx.coroutines.internal.i$f: java.lang.Object invoke(java.lang.Object)>"
"<e0.s: java.util.ListIterator listIterator(int)>","<e0.s: java.util.ListIterator listIterator(int)>"
"<androidx.window.layout.DisplayCompatHelperApi28: void <clinit>()>","<androidx.window.layout.DisplayCompatHelperApi28: void <clinit>()>"
"<kotlinx.coroutines.internal.d0$a: void <init>()>","<kotlinx.coroutines.internal.d0$a: void <init>()>"
"<io.flutter.plugin.platform.c$a: void j()>","<io.flutter.plugin.platform.c$a: void j()>"
"<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)>","<androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)>"
"<io.flutter.embedding.android.e$c: io.flutter.embedding.engine.a m(android.content.Context)>","<io.flutter.embedding.android.e$c: io.flutter.embedding.engine.a m(android.content.Context)>"
"<kotlinx.coroutines.internal.m: void <init>()>","<kotlinx.coroutines.internal.m: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$c0: void r(java.lang.Long,java.lang.String,java.util.Map)>","<io.flutter.plugins.webviewflutter.k$c0: void r(java.lang.Long,java.lang.String,java.util.Map)>"
"<io.flutter.plugins.webviewflutter.u0: y.g c()>","<io.flutter.plugins.webviewflutter.u0: y.g c()>"
"<androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)>","<androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)>"
"<androidx.window.embedding.SplitRule: void <init>()>","<androidx.window.embedding.SplitRule: void <init>()>"
"<y.i$d: void a(java.lang.Object)>","<y.i$d: void a(java.lang.Object)>"
"<kotlinx.coroutines.internal.MainDispatcherFactory: u0.y1 createDispatcher(java.util.List)>","<kotlinx.coroutines.internal.MainDispatcherFactory: u0.y1 createDispatcher(java.util.List)>"
"<u0.v1$b: java.lang.String toString()>","<u0.v1$b: java.lang.String toString()>"
"<io.flutter.plugin.platform.r$b$a: void <init>(io.flutter.plugin.platform.r$b)>","<io.flutter.plugin.platform.r$b$a: void <init>(io.flutter.plugin.platform.r$b)>"
"<b.a$a: void <init>(b.a)>","<b.a$a: void <init>(b.a)>"
"<io.flutter.plugins.webviewflutter.y2$d: void c(java.lang.Void)>","<io.flutter.plugins.webviewflutter.y2$d: void c(java.lang.Void)>"
"<androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()>","<androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()>"
"<w.c: w.a getAttachedRenderer()>","<w.c: w.a getAttachedRenderer()>"
"<x.d: y.a$e b(x.d$a)>","<x.d: y.a$e b(x.d$a)>"
"<a.b$d: java.util.Map$Entry b()>","<a.b$d: java.util.Map$Entry b()>"
"<io.flutter.embedding.android.n: java.nio.ByteBuffer a()>","<io.flutter.embedding.android.n: java.nio.ByteBuffer a()>"
"<io.flutter.view.c$l: boolean h(io.flutter.view.c$l,io.flutter.view.c$i)>","<io.flutter.view.c$l: boolean h(io.flutter.view.c$l,io.flutter.view.c$i)>"
"<k.a$e: boolean c()>","<k.a$e: boolean c()>"
"<io.flutter.plugins.webviewflutter.q3$c: void d()>","<io.flutter.plugins.webviewflutter.q3$c: void d()>"
"<u0.v: java.util.concurrent.Executor v()>","<u0.v: java.util.concurrent.Executor v()>"
"<io.flutter.embedding.android.r: void c(io.flutter.embedding.android.s$d$a,java.nio.ByteBuffer)>","<io.flutter.embedding.android.r: void c(io.flutter.embedding.android.s$d$a,java.nio.ByteBuffer)>"
"<e0.r: void <clinit>()>","<e0.r: void <clinit>()>"
"<u0.g1: void <init>(java.util.concurrent.Executor)>","<u0.g1: void <init>(java.util.concurrent.Executor)>"
"<io.flutter.plugins.webviewflutter.k$y$a: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k$y$a: void a(java.lang.Object)>"
"<m0.a: r0.c b(java.lang.Class)>","<m0.a: r0.c b(java.lang.Class)>"
"<b.c$b: boolean contains(java.lang.Object)>","<b.c$b: boolean contains(java.lang.Object)>"
"<io.flutter.view.c$p: io.flutter.view.c$p[] values()>","<io.flutter.view.c$p: io.flutter.view.c$p[] values()>"
"<io.flutter.view.c: io.flutter.view.c$l o(io.flutter.view.c,int)>","<io.flutter.view.c: io.flutter.view.c$l o(io.flutter.view.c,int)>"
"<w.a$d: w.a$d[] values()>","<w.a$d: w.a$d[] values()>"
"<io.flutter.embedding.android.e$c: android.app.Activity a()>","<io.flutter.embedding.android.e$c: android.app.Activity a()>"
"<io.flutter.plugins.GeneratedPluginRegistrant: void <init>()>","<io.flutter.plugins.GeneratedPluginRegistrant: void <init>()>"
"<k.a$c: boolean c()>","<k.a$c: boolean c()>"
"<x.i$g: x.i$g a(java.lang.String)>","<x.i$g: x.i$g a(java.lang.String)>"
"<u0.m0: u0.l0 a(g0.g)>","<u0.m0: u0.l0 a(g0.g)>"
"<androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()>","<androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()>"
"<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i c(kotlinx.coroutines.scheduling.i)>","<kotlinx.coroutines.scheduling.m: kotlinx.coroutines.scheduling.i c(kotlinx.coroutines.scheduling.i)>"
"<u0.a: void <init>(g0.g,boolean,boolean)>","<u0.a: void <init>(g0.g,boolean,boolean)>"
"<io.flutter.view.c$l: int b(io.flutter.view.c$l,int)>","<io.flutter.view.c$l: int b(io.flutter.view.c$l,int)>"
"<io.flutter.embedding.android.k: void v()>","<io.flutter.embedding.android.k: void v()>"
"<io.flutter.plugin.platform.j: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>","<io.flutter.plugin.platform.j: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>"
"<kotlinx.coroutines.internal.y: java.lang.Throwable m(java.lang.Throwable)>","<kotlinx.coroutines.internal.y: java.lang.Throwable m(java.lang.Throwable)>"
"<io.flutter.view.c$l: int k(io.flutter.view.c$l)>","<io.flutter.view.c$l: int k(io.flutter.view.c$l)>"
"<o.d$a: void a(o.d$a)>","<o.d$a: void a(o.d$a)>"
"<kotlinx.coroutines.internal.o$a: void h(kotlinx.coroutines.internal.o,java.lang.Object)>","<kotlinx.coroutines.internal.o$a: void h(kotlinx.coroutines.internal.o,java.lang.Object)>"
"<androidx.window.core.Version$Companion: void <init>()>","<androidx.window.core.Version$Companion: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$y: void q(java.lang.Long,java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.k$y: void q(java.lang.Long,java.lang.Long,java.lang.String,io.flutter.plugins.webviewflutter.k$y$a)>"
"<h0.b: g0.d b(g0.d)>","<h0.b: g0.d b(g0.d)>"
"<androidx.window.embedding.SplitInfo: void <init>(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)>","<androidx.window.embedding.SplitInfo: void <init>(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)>"
"<io.flutter.view.c$l: float y0(float,float,float,float)>","<io.flutter.view.c$l: float y0(float,float,float,float)>"
"<kotlinx.coroutines.internal.MainDispatcherFactory: java.lang.String hintOnError()>","<kotlinx.coroutines.internal.MainDispatcherFactory: java.lang.String hintOnError()>"
"<io.flutter.plugin.platform.c$b: void a(io.flutter.plugin.platform.c$b,int)>","<io.flutter.plugin.platform.c$b: void a(io.flutter.plugin.platform.c$b,int)>"
"<kotlin.coroutines.jvm.internal.c: void <clinit>()>","<kotlin.coroutines.jvm.internal.c: void <clinit>()>"
"<b.c: java.util.Set m()>","<b.c: java.util.Set m()>"
"<e0.v: java.lang.Object next()>","<e0.v: java.lang.Object next()>"
"<io.flutter.embedding.android.d: io.flutter.embedding.android.f G()>","<io.flutter.embedding.android.d: io.flutter.embedding.android.f G()>"
"<io.flutter.plugins.webviewflutter.q3$a: boolean checkInputConnectionProxy(android.view.View)>","<io.flutter.plugins.webviewflutter.q3$a: boolean checkInputConnectionProxy(android.view.View)>"
"<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>","<io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)>"
"<io.flutter.embedding.android.i$a: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>","<io.flutter.embedding.android.i$a: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>"
"<o0.b: java.util.Random c()>","<o0.b: java.util.Random c()>"
"<d0.a: void a(java.lang.Throwable,java.lang.Throwable)>","<d0.a: void a(java.lang.Throwable,java.lang.Throwable)>"
"<m.c$e: void a(java.nio.ByteBuffer)>","<m.c$e: void a(java.nio.ByteBuffer)>"
"<androidx.versionedparcelable.a: void <init>(b.a,b.a,b.a)>","<androidx.versionedparcelable.a: void <init>(b.a,b.a,b.a)>"
"<d0.q: void <init>()>","<d0.q: void <init>()>"
"<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.i p(kotlinx.coroutines.scheduling.a$c,kotlinx.coroutines.scheduling.i,boolean)>","<kotlinx.coroutines.scheduling.a: kotlinx.coroutines.scheduling.i p(kotlinx.coroutines.scheduling.a$c,kotlinx.coroutines.scheduling.i,boolean)>"
"<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long e(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityRecord)>","<io.flutter.view.AccessibilityViewEmbedder$b: java.lang.Long e(io.flutter.view.AccessibilityViewEmbedder$b,android.view.accessibility.AccessibilityRecord)>"
"<io.flutter.plugins.webviewflutter.f2: void h(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void h(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<e0.q: java.lang.Object o(java.util.List)>","<e0.q: java.lang.Object o(java.util.List)>"
"<io.flutter.embedding.android.FlutterSplashView$a: void b()>","<io.flutter.embedding.android.FlutterSplashView$a: void b()>"
"<y.b$a: void a(java.nio.ByteBuffer,y.b$b)>","<y.b$a: void a(java.nio.ByteBuffer,y.b$b)>"
"<e0.s: java.lang.Object[] toArray(java.lang.Object[])>","<e0.s: java.lang.Object[] toArray(java.lang.Object[])>"
"<io.flutter.plugins.webviewflutter.f2: void q(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f2: void q(io.flutter.plugins.webviewflutter.k$c0,java.lang.Object,y.a$e)>"
"<u0.f0$a$a: void <clinit>()>","<u0.f0$a$a: void <clinit>()>"
"<e0.q: java.util.Set t(java.lang.Iterable)>","<e0.q: java.util.Set t(java.lang.Iterable)>"
"<androidx.versionedparcelable.a: java.lang.String s()>","<androidx.versionedparcelable.a: java.lang.String s()>"
"<kotlinx.coroutines.scheduling.b: void <clinit>()>","<kotlinx.coroutines.scheduling.b: void <clinit>()>"
"<d0.f: d0.e a(n0.a)>","<d0.f: d0.e a(n0.a)>"
"<a.b: a.b$d d()>","<a.b: a.b$d d()>"
"<t0.f$a: java.lang.Object invoke(java.lang.Object)>","<t0.f$a: java.lang.Object invoke(java.lang.Object)>"
"<io.flutter.plugin.platform.c: void l(io.flutter.plugin.platform.c)>","<io.flutter.plugin.platform.c: void l(io.flutter.plugin.platform.c)>"
"<x.p$f: void e()>","<x.p$f: void e()>"
"<b.c$b: boolean add(java.lang.Object)>","<b.c$b: boolean add(java.lang.Object)>"
"<f.a$a: void f(int)>","<f.a$a: void f(int)>"
"<io.flutter.view.c$a: void e(int)>","<io.flutter.view.c$a: void e(int)>"
"<androidx.window.layout.WindowLayoutInfo: java.lang.String toString()>","<androidx.window.layout.WindowLayoutInfo: java.lang.String toString()>"
"<io.flutter.plugin.platform.c$a: void h(x.i$k)>","<io.flutter.plugin.platform.c$a: void h(x.i$k)>"
"<kotlinx.coroutines.internal.i$a: java.lang.Throwable a(java.lang.Throwable)>","<kotlinx.coroutines.internal.i$a: java.lang.Throwable a(java.lang.Throwable)>"
"<io.flutter.plugins.webviewflutter.k$g: void <init>()>","<io.flutter.plugins.webviewflutter.k$g: void <init>()>"
"<io.flutter.plugins.webviewflutter.k$c0: void A(java.lang.Long,java.lang.Boolean)>","<io.flutter.plugins.webviewflutter.k$c0: void A(java.lang.Long,java.lang.Boolean)>"
"<io.flutter.embedding.android.e: java.lang.String n(android.content.Intent)>","<io.flutter.embedding.android.e: java.lang.String n(android.content.Intent)>"
"<io.flutter.embedding.android.k: void <init>(android.content.Context,io.flutter.embedding.android.h)>","<io.flutter.embedding.android.k: void <init>(android.content.Context,io.flutter.embedding.android.h)>"
"<io.flutter.view.c$a: void d(int)>","<io.flutter.view.c$a: void d(int)>"
"<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: g0.d create(java.lang.Object,g0.d)>","<androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: g0.d create(java.lang.Object,g0.d)>"
"<m.a$c: void <init>(m.c,m.a$a)>","<m.a$c: void <init>(m.c,m.a$a)>"
"<t0.n: java.util.List I(java.lang.CharSequence)>","<t0.n: java.util.List I(java.lang.CharSequence)>"
"<io.flutter.plugins.webviewflutter.e$b: void d(java.lang.Void)>","<io.flutter.plugins.webviewflutter.e$b: void d(java.lang.Void)>"
"<io.flutter.plugins.webviewflutter.q3$c: void <init>(android.content.Context)>","<io.flutter.plugins.webviewflutter.q3$c: void <init>(android.content.Context)>"
"<x.l: void <init>(y.i,boolean)>","<x.l: void <init>(y.i,boolean)>"
"<y.d: void <clinit>()>","<y.d: void <clinit>()>"
"<androidx.window.embedding.ActivityStack: java.lang.String toString()>","<androidx.window.embedding.ActivityStack: java.lang.String toString()>"
"<io.flutter.embedding.android.k: void C()>","<io.flutter.embedding.android.k: void C()>"
"<x.k$d: void <init>(int,java.lang.String,double,double,double,double,int,x.k$d$a,java.nio.ByteBuffer)>","<x.k$d: void <init>(int,java.lang.String,double,double,double,double,int,x.k$d$a,java.nio.ByteBuffer)>"
"<x.m$b: void <clinit>()>","<x.m$b: void <clinit>()>"
"<kotlinx.coroutines.internal.a0: long g(java.lang.String,long,long,long,int,java.lang.Object)>","<kotlinx.coroutines.internal.a0: long g(java.lang.String,long,long,long,int,java.lang.Object)>"
"<androidx.versionedparcelable.a: i.a n(java.lang.String,androidx.versionedparcelable.a)>","<androidx.versionedparcelable.a: i.a n(java.lang.String,androidx.versionedparcelable.a)>"
"<z.a: java.util.Locale c(java.util.List)>","<z.a: java.util.Locale c(java.util.List)>"
"<io.flutter.plugins.webviewflutter.k$e0: void b(java.lang.Long)>","<io.flutter.plugins.webviewflutter.k$e0: void b(java.lang.Long)>"
"<androidx.versionedparcelable.ParcelImpl: void <clinit>()>","<androidx.versionedparcelable.ParcelImpl: void <clinit>()>"
"<io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()>","<io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()>"
"<io.flutter.plugins.webviewflutter.x2: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>","<io.flutter.plugins.webviewflutter.x2: void <init>(y.b,io.flutter.plugins.webviewflutter.i2)>"
"<io.flutter.plugins.webviewflutter.s2$b$a: void <init>(io.flutter.plugins.webviewflutter.s2$b,android.webkit.WebView)>","<io.flutter.plugins.webviewflutter.s2$b$a: void <init>(io.flutter.plugins.webviewflutter.s2$b,android.webkit.WebView)>"
"<androidx.window.embedding.SplitInfo: java.lang.String toString()>","<androidx.window.embedding.SplitInfo: java.lang.String toString()>"
"<io.flutter.embedding.android.s$b: void <init>()>","<io.flutter.embedding.android.s$b: void <init>()>"
"<x.i$d: void <clinit>()>","<x.i$d: void <clinit>()>"
"<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>","<kotlinx.coroutines.CoroutineExceptionHandler: void <clinit>()>"
"<e0.c0: java.util.Set b()>","<e0.c0: java.util.Set b()>"
"<androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)>","<androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)>"
"<io.flutter.embedding.android.k: void k(io.flutter.embedding.android.k$f)>","<io.flutter.embedding.android.k: void k(io.flutter.embedding.android.k$f)>"
"<io.flutter.plugins.webviewflutter.s2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.s2$a,io.flutter.plugins.webviewflutter.r2)>","<io.flutter.plugins.webviewflutter.s2: void <init>(io.flutter.plugins.webviewflutter.i2,io.flutter.plugins.webviewflutter.s2$a,io.flutter.plugins.webviewflutter.r2)>"
"<io.flutter.plugins.webviewflutter.k$v: void <clinit>()>","<io.flutter.plugins.webviewflutter.k$v: void <clinit>()>"
"<u0.t0: java.lang.Throwable d(java.lang.Object)>","<u0.t0: java.lang.Throwable d(java.lang.Object)>"
"<kotlinx.coroutines.internal.o: java.lang.String toString()>","<kotlinx.coroutines.internal.o: java.lang.String toString()>"
"<x.a$b: void c(java.lang.String)>","<x.a$b: void c(java.lang.String)>"
"<y.h: java.lang.Object a(java.lang.String)>","<y.h: java.lang.Object a(java.lang.String)>"
"<kotlinx.coroutines.internal.g: void <init>(u0.f0,g0.d)>","<kotlinx.coroutines.internal.g: void <init>(u0.f0,g0.d)>"
"<androidx.lifecycle.FullLifecycleObserverAdapter$a: void <clinit>()>","<androidx.lifecycle.FullLifecycleObserverAdapter$a: void <clinit>()>"
"<x.f$a: void <init>(x.f)>","<x.f$a: void <init>(x.f)>"
"<androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.a)>","<androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.a)>"
"<kotlinx.coroutines.scheduling.c: kotlinx.coroutines.scheduling.a q()>","<kotlinx.coroutines.scheduling.c: kotlinx.coroutines.scheduling.a q()>"
"<androidx.window.core.Version$bigInteger$2: void <init>(androidx.window.core.Version)>","<androidx.window.core.Version$bigInteger$2: void <init>(androidx.window.core.Version)>"
"<u0.g0: void <clinit>()>","<u0.g0: void <clinit>()>"
"<w.a$g: boolean a()>","<w.a$g: boolean a()>"
"<b.c$e: void <init>(b.c)>","<b.c$e: void <init>(b.c)>"
"<kotlinx.coroutines.scheduling.a: void <clinit>()>","<kotlinx.coroutines.scheduling.a: void <clinit>()>"
"<kotlinx.coroutines.CoroutineExceptionHandler$a: void <init>()>","<kotlinx.coroutines.CoroutineExceptionHandler$a: void <init>()>"
"<y0.c$a: void <clinit>()>","<y0.c$a: void <clinit>()>"
"<kotlin.coroutines.jvm.internal.f: int v()>","<kotlin.coroutines.jvm.internal.f: int v()>"
"<androidx.core.graphics.drawable.IconCompat: java.lang.String e(int)>","<androidx.core.graphics.drawable.IconCompat: java.lang.String e(int)>"
"<b.c$c: void clear()>","<b.c$c: void clear()>"
"<io.flutter.view.c$h: java.lang.String e(io.flutter.view.c$h)>","<io.flutter.view.c$h: java.lang.String e(io.flutter.view.c$h)>"
"<t0.n: s0.b N(java.lang.CharSequence,java.lang.String[],boolean,int)>","<t0.n: s0.b N(java.lang.CharSequence,java.lang.String[],boolean,int)>"
"<t0.n: java.lang.String Z(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>","<t0.n: java.lang.String Z(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)>"
"<w0.j: kotlinx.coroutines.internal.z h(java.lang.Object,kotlinx.coroutines.internal.o$b)>","<w0.j: kotlinx.coroutines.internal.z h(java.lang.Object,kotlinx.coroutines.internal.o$b)>"
"<u0.w0: void <clinit>()>","<u0.w0: void <clinit>()>"
"<kotlinx.coroutines.scheduling.i: void <init>(long,kotlinx.coroutines.scheduling.j)>","<kotlinx.coroutines.scheduling.i: void <init>(long,kotlinx.coroutines.scheduling.j)>"
"<io.flutter.plugin.platform.r$a$a: void <init>(io.flutter.plugin.platform.r$a)>","<io.flutter.plugin.platform.r$a$a: void <init>(io.flutter.plugin.platform.r$a)>"
"<u0.v1: u0.x0 j(boolean,boolean,n0.l)>","<u0.v1: u0.x0 j(boolean,boolean,n0.l)>"
"<u0.e1: java.util.concurrent.CancellationException a(java.lang.String,java.lang.Throwable)>","<u0.e1: java.util.concurrent.CancellationException a(java.lang.String,java.lang.Throwable)>"
"<io.flutter.embedding.android.s: void b(io.flutter.embedding.android.s,android.view.KeyEvent)>","<io.flutter.embedding.android.s: void b(io.flutter.embedding.android.s,android.view.KeyEvent)>"
"<b0.a$a: void <init>(b0.a,android.content.SharedPreferences$Editor,y.i$d)>","<b0.a$a: void <init>(b0.a,android.content.SharedPreferences$Editor,y.i$d)>"
"<io.flutter.embedding.android.s$b: java.lang.Character a(int)>","<io.flutter.embedding.android.s$b: java.lang.Character a(int)>"
"<io.flutter.plugins.webviewflutter.h: void <init>(android.content.res.AssetManager)>","<io.flutter.plugins.webviewflutter.h: void <init>(android.content.res.AssetManager)>"
"<u0.l: java.lang.Object x()>","<u0.l: java.lang.Object x()>"
"<androidx.window.embedding.SplitController$Companion: void <init>()>","<androidx.window.embedding.SplitController$Companion: void <init>()>"
"<j.c: void <init>(java.lang.String,j.d[])>","<j.c: void <init>(java.lang.String,j.d[])>"
"<androidx.window.embedding.EmbeddingAdapter: boolean b(androidx.window.embedding.SplitRule,android.view.WindowMetrics)>","<androidx.window.embedding.EmbeddingAdapter: boolean b(androidx.window.embedding.SplitRule,android.view.WindowMetrics)>"
"<kotlin.coroutines.jvm.internal.a: g0.d create(g0.d)>","<kotlin.coroutines.jvm.internal.a: g0.d create(g0.d)>"
"<w.a: io.flutter.embedding.engine.FlutterJNI c(w.a)>","<w.a: io.flutter.embedding.engine.FlutterJNI c(w.a)>"
"<x.i$e: x.i$e[] values()>","<x.i$e: x.i$e[] values()>"
"<io.flutter.embedding.android.d$a: void onBackInvoked()>","<io.flutter.embedding.android.d$a: void onBackInvoked()>"
"<kotlinx.coroutines.scheduling.a: void <init>(int,int,long,java.lang.String)>","<kotlinx.coroutines.scheduling.a: void <init>(int,int,long,java.lang.String)>"
"<k.j: void <clinit>()>","<k.j: void <clinit>()>"
"<u0.h0: java.lang.Throwable b(java.lang.Throwable,java.lang.Throwable)>","<u0.h0: java.lang.Throwable b(java.lang.Throwable,java.lang.Throwable)>"
"<io.flutter.view.c$g: void <init>(java.lang.String,int,int)>","<io.flutter.view.c$g: void <init>(java.lang.String,int,int)>"
"<java.net.URLConnection: long getContentLengthLong()>","<java.net.URLConnection: long getContentLengthLong()>"
"<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>","<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>"
"<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>","<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String)>"
"<android.view.WindowManager: void removeViewImmediate(android.view.View)>","<android.view.WindowManager: void removeViewImmediate(android.view.View)>"
"<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>","<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.view.OnReceiveContentListener: android.view.ContentInfo onReceiveContent(android.view.View,android.view.ContentInfo)>","<android.view.OnReceiveContentListener: android.view.ContentInfo onReceiveContent(android.view.View,android.view.ContentInfo)>"
"<java.util.zip.ZipEntry: void setCompressedSize(long)>","<java.util.zip.ZipEntry: void setCompressedSize(long)>"
"<android.view.View: android.os.IBinder getApplicationWindowToken()>","<android.view.View: android.os.IBinder getApplicationWindowToken()>"
"<java.io.FileInputStream: void <init>(java.io.File)>","<java.io.FileInputStream: void <init>(java.io.File)>"
"<java.lang.reflect.Array: int getLength(java.lang.Object)>","<java.lang.reflect.Array: int getLength(java.lang.Object)>"
"<java.util.Objects: java.lang.String toString(java.lang.Object)>","<java.util.Objects: java.lang.String toString(java.lang.Object)>"
"<android.webkit.WebView: void setScrollBarStyle(int)>","<android.webkit.WebView: void setScrollBarStyle(int)>"
"<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>","<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>"
"<android.content.pm.PackageManager: void setApplicationCategoryHint(java.lang.String,int)>","<android.content.pm.PackageManager: void setApplicationCategoryHint(java.lang.String,int)>"
"<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>","<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>"
"<android.graphics.drawable.Drawable: int getMinimumWidth()>","<android.graphics.drawable.Drawable: int getMinimumWidth()>"
"<android.os.Debug$MemoryInfo: int getTotalSharedClean()>","<android.os.Debug$MemoryInfo: int getTotalSharedClean()>"
"<android.view.ViewStructure: void setInputType(int)>","<android.view.ViewStructure: void setInputType(int)>"
"<android.transition.Transition: boolean canRemoveViews()>","<android.transition.Transition: boolean canRemoveViews()>"
"<java.lang.Runtime: void halt(int)>","<java.lang.Runtime: void halt(int)>"
"<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>","<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>"
"<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>","<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>"
"<java.lang.Number: double doubleValue()>","<java.lang.Number: double doubleValue()>"
"<java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>","<java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
"<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>","<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>"
"<android.view.MotionEvent$PointerProperties: void clear()>","<android.view.MotionEvent$PointerProperties: void clear()>"
"<android.graphics.text.MeasuredText$Builder: void <init>(char[])>","<android.graphics.text.MeasuredText$Builder: void <init>(char[])>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.ContextWrapper: java.io.File[] getObbDirs()>","<android.content.ContextWrapper: java.io.File[] getObbDirs()>"
"<java.nio.IntBuffer: java.nio.Buffer reset()>","<java.nio.IntBuffer: java.nio.Buffer reset()>"
"<java.io.File: java.lang.String getName()>","<java.io.File: java.lang.String getName()>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void <init>(int,float,float,float)>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void <init>(int,float,float,float)>"
"<java.lang.Short: java.lang.Short valueOf(short)>","<java.lang.Short: java.lang.Short valueOf(short)>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale)>"
"<android.content.pm.PackageInfo: void setLongVersionCode(long)>","<android.content.pm.PackageInfo: void setLongVersionCode(long)>"
"<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>","<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>"
"<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>","<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>"
"<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)>"
"<android.widget.TextView: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>","<android.widget.TextView: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>"
"<java.text.FieldPosition: int getField()>","<java.text.FieldPosition: int getField()>"
"<java.util.Deque: java.lang.Object pop()>","<java.util.Deque: java.lang.Object pop()>"
"<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>","<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>"
"<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>","<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>"
"<java.math.BigInteger: java.math.BigInteger sqrt()>","<java.math.BigInteger: java.math.BigInteger sqrt()>"
"<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<java.lang.Boolean: void <init>(boolean)>","<java.lang.Boolean: void <init>(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>","<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>"
"<javax.security.auth.Subject: java.util.Set getPrincipals()>","<javax.security.auth.Subject: java.util.Set getPrincipals()>"
"<java.util.Deque: java.lang.Object poll()>","<java.util.Deque: java.lang.Object poll()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()>"
"<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>","<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>"
"<android.widget.FrameLayout: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.FrameLayout: java.lang.CharSequence getAccessibilityClassName()>"
"<android.text.GetChars: void getChars(int,int,char[],int)>","<android.text.GetChars: void getChars(int,int,char[],int)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator(int)>","<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator(int)>"
"<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>","<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>"
"<java.util.zip.ZipFile: java.util.stream.Stream stream()>","<java.util.zip.ZipFile: java.util.stream.Stream stream()>"
"<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)>","<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)>"
"<android.media.Rating: float getStarRating()>","<android.media.Rating: float getStarRating()>"
"<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>","<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>"
"<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>","<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>"
"<android.util.SparseArray: void setValueAt(int,java.lang.Object)>","<android.util.SparseArray: void setValueAt(int,java.lang.Object)>"
"<java.util.concurrent.ThreadLocalRandom: long nextLong()>","<java.util.concurrent.ThreadLocalRandom: long nextLong()>"
"<android.view.ActionProvider: boolean overridesItemVisibility()>","<android.view.ActionProvider: boolean overridesItemVisibility()>"
"<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>","<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>"
"<android.webkit.WebView: android.webkit.WebChromeClient getWebChromeClient()>","<android.webkit.WebView: android.webkit.WebChromeClient getWebChromeClient()>"
"<java.time.ZonedDateTime: boolean equals(java.lang.Object)>","<java.time.ZonedDateTime: boolean equals(java.lang.Object)>"
"<android.view.View: void setLayoutDirection(int)>","<android.view.View: void setLayoutDirection(int)>"
"<java.util.Collections: java.util.NavigableSet checkedNavigableSet(java.util.NavigableSet,java.lang.Class)>","<java.util.Collections: java.util.NavigableSet checkedNavigableSet(java.util.NavigableSet,java.lang.Class)>"
"<java.math.BigInteger: byte[] toByteArray()>","<java.math.BigInteger: byte[] toByteArray()>"
"<java.nio.ByteBuffer: java.nio.Buffer mark()>","<java.nio.ByteBuffer: java.nio.Buffer mark()>"
"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>","<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>"
"<android.media.session.PlaybackState: void <clinit>()>","<android.media.session.PlaybackState: void <clinit>()>"
"<java.util.Arrays: void fill(boolean[],int,int,boolean)>","<java.util.Arrays: void fill(boolean[],int,int,boolean)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>"
"<android.print.PrintAttributes$MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)>","<android.print.PrintAttributes$MediaSize: java.lang.String getLabel(android.content.pm.PackageManager)>"
"<android.view.ViewGroup: boolean getClipToPadding()>","<android.view.ViewGroup: boolean getClipToPadding()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream parallel()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream parallel()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>"
"<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>","<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>"
"<android.app.Dialog: void hide()>","<android.app.Dialog: void hide()>"
"<android.widget.ImageView: void setImageState(int[],boolean)>","<android.widget.ImageView: void setImageState(int[],boolean)>"
"<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>","<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>"
"<java.lang.reflect.Modifier: boolean isInterface(int)>","<java.lang.reflect.Modifier: boolean isInterface(int)>"
"<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>","<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>"
"<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>","<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>"
"<android.view.MotionEvent: int getFlags()>","<android.view.MotionEvent: int getFlags()>"
"<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>","<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>"
"<java.util.Collection: int hashCode()>","<java.util.Collection: int hashCode()>"
"<android.app.Dialog: void setTitle(int)>","<android.app.Dialog: void setTitle(int)>"
"<java.util.Map: int hashCode()>","<java.util.Map: int hashCode()>"
"<android.graphics.drawable.Drawable: void setTint(int)>","<android.graphics.drawable.Drawable: void setTint(int)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>"
"<java.time.Period: java.time.chrono.ChronoPeriod multipliedBy(int)>","<java.time.Period: java.time.chrono.ChronoPeriod multipliedBy(int)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.LocalTime toLocalTime()>","<java.time.chrono.ChronoLocalDateTime: java.time.LocalTime toLocalTime()>"
"<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>","<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setEllipsize(android.text.TextUtils$TruncateAt)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setEllipsize(android.text.TextUtils$TruncateAt)>"
"<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>","<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>"
"<java.util.AbstractList: java.util.ListIterator listIterator(int)>","<java.util.AbstractList: java.util.ListIterator listIterator(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>"
"<android.graphics.RenderNode: float getAlpha()>","<android.graphics.RenderNode: float getAlpha()>"
"<android.view.AbsSavedState: android.os.Parcelable getSuperState()>","<android.view.AbsSavedState: android.os.Parcelable getSuperState()>"
"<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>","<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>"
"<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>","<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>"
"<java.nio.CharBuffer: java.nio.CharBuffer compact()>","<java.nio.CharBuffer: java.nio.CharBuffer compact()>"
"<java.util.LinkedList: boolean offer(java.lang.Object)>","<java.util.LinkedList: boolean offer(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.a3: void <clinit>()>","<io.flutter.plugins.webviewflutter.a3: void <clinit>()>"
"<android.view.displayhash.DisplayHash: int describeContents()>","<android.view.displayhash.DisplayHash: int describeContents()>"
"<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>","<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>"
"<java.util.Arrays: int compare(byte[],int,int,byte[],int,int)>","<java.util.Arrays: int compare(byte[],int,int,byte[],int,int)>"
"<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>","<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>"
"<android.view.View: boolean isInLayout()>","<android.view.View: boolean isInLayout()>"
"<android.view.ViewStructure$HtmlInfo: java.util.List getAttributes()>","<android.view.ViewStructure$HtmlInfo: java.util.List getAttributes()>"
"<java.time.DayOfWeek: int get(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: int get(java.time.temporal.TemporalField)>"
"<java.lang.reflect.Modifier: int classModifiers()>","<java.lang.reflect.Modifier: int classModifiers()>"
"<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>","<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>","<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"
"<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>","<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>"
"<android.widget.TextView: void setLineBreakStyle(int)>","<android.widget.TextView: void setLineBreakStyle(int)>"
"<java.util.stream.Stream: java.util.stream.Stream iterate(java.lang.Object,java.util.function.UnaryOperator)>","<java.util.stream.Stream: java.util.stream.Stream iterate(java.lang.Object,java.util.function.UnaryOperator)>"
"<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.view.ViewGroup: boolean isTransitionGroup()>","<android.view.ViewGroup: boolean isTransitionGroup()>"
"<java.nio.IntBuffer: java.lang.Object array()>","<java.nio.IntBuffer: java.lang.Object array()>"
"<java.security.cert.Certificate: boolean equals(java.lang.Object)>","<java.security.cert.Certificate: boolean equals(java.lang.Object)>"
"<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>","<android.webkit.WebView: void setCertificate(android.net.http.SslCertificate)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate date(int,int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate date(int,int,int)>"
"<android.hardware.Sensor: boolean isWakeUpSensor()>","<android.hardware.Sensor: boolean isWakeUpSensor()>"
"<android.webkit.WebSettings$ZoomDensity: void <clinit>()>","<android.webkit.WebSettings$ZoomDensity: void <clinit>()>"
"<java.time.LocalDate: boolean isLeapYear()>","<java.time.LocalDate: boolean isLeapYear()>"
"<java.util.concurrent.ThreadLocalRandom: int next(int)>","<java.util.concurrent.ThreadLocalRandom: int next(int)>"
"<java.lang.String: int codePointBefore(int)>","<java.lang.String: int codePointBefore(int)>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>"
"<android.widget.ImageView: int getImageAlpha()>","<android.widget.ImageView: int getImageAlpha()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>"
"<android.view.ViewGroup: int getNestedScrollAxes()>","<android.view.ViewGroup: int getNestedScrollAxes()>"
"<java.lang.Float: float min(float,float)>","<java.lang.Float: float min(float,float)>"
"<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>","<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>"
"<java.nio.FloatBuffer: float get(int)>","<java.nio.FloatBuffer: float get(int)>"
"<android.util.SizeF: int hashCode()>","<android.util.SizeF: int hashCode()>"
"<android.widget.TextView: void onRtlPropertiesChanged(int)>","<android.widget.TextView: void onRtlPropertiesChanged(int)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>"
"<java.security.cert.X509Certificate: boolean[] getKeyUsage()>","<java.security.cert.X509Certificate: boolean[] getKeyUsage()>"
"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>","<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>"
"<android.animation.Animator: android.animation.Animator clone()>","<android.animation.Animator: android.animation.Animator clone()>"
"<android.util.Rational: boolean isFinite()>","<android.util.Rational: boolean isFinite()>"
"<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>","<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>"
"<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>","<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>"
"<android.widget.AbsListView: void requestLayout()>","<android.widget.AbsListView: void requestLayout()>"
"<android.view.Window: void setWindowAnimations(int)>","<android.view.Window: void setWindowAnimations(int)>"
"<java.lang.Character: boolean isLetter(char)>","<java.lang.Character: boolean isLetter(char)>"
"<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.Intent: void removeCategory(java.lang.String)>","<android.content.Intent: void removeCategory(java.lang.String)>"
"<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>","<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>"
"<android.os.MessageQueue$IdleHandler: boolean queueIdle()>","<android.os.MessageQueue$IdleHandler: boolean queueIdle()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()>","<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)>"
"<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>","<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>"
"<android.widget.Filter: void filter(java.lang.CharSequence)>","<android.widget.Filter: void filter(java.lang.CharSequence)>"
"<java.io.FileDescriptor: boolean valid()>","<java.io.FileDescriptor: boolean valid()>"
"<android.content.res.TypedArray: float getFraction(int,int,int,float)>","<android.content.res.TypedArray: float getFraction(int,int,int,float)>"
"<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>"
"<android.app.Activity: void setVolumeControlStream(int)>","<android.app.Activity: void setVolumeControlStream(int)>"
"<android.content.IntentFilter: java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver)>","<android.content.IntentFilter: java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver)>"
"<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>","<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>"
"<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>","<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>"
"<android.os.CancellationSignal: boolean isCanceled()>","<android.os.CancellationSignal: boolean isCanceled()>"
"<org.json.JSONArray: org.json.JSONArray put(int)>","<org.json.JSONArray: org.json.JSONArray put(int)>"
"<android.graphics.Paint: boolean isElegantTextHeight()>","<android.graphics.Paint: boolean isElegantTextHeight()>"
"<java.time.LocalTime: int compareTo(java.lang.Object)>","<java.time.LocalTime: int compareTo(java.lang.Object)>"
"<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>","<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>"
"<android.animation.ValueAnimator: void setCurrentFraction(float)>","<android.animation.ValueAnimator: void setCurrentFraction(float)>"
"<java.util.Comparator: java.util.Comparator reverseOrder()>","<java.util.Comparator: java.util.Comparator reverseOrder()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>"
"<android.view.ViewParent: void requestLayout()>","<android.view.ViewParent: void requestLayout()>"
"<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>","<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>"
"<android.os.Parcel: void writeFloat(float)>","<android.os.Parcel: void writeFloat(float)>"
"<android.content.res.Resources: boolean getBoolean(int)>","<android.content.res.Resources: boolean getBoolean(int)>"
"<android.widget.ImageView: int getBaseline()>","<android.widget.ImageView: int getBaseline()>"
"<android.view.textclassifier.TextClassificationContext: void <init>()>","<android.view.textclassifier.TextClassificationContext: void <init>()>"
"<io.flutter.plugin.platform.n: void <init>(io.flutter.plugin.platform.q$a,x.k$d)>","<io.flutter.plugin.platform.n: void <init>(io.flutter.plugin.platform.q$a,x.k$d)>"
"<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>","<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean)>"
"<java.util.stream.IntStream$Builder: java.util.stream.IntStream$Builder add(int)>","<java.util.stream.IntStream$Builder: java.util.stream.IntStream$Builder add(int)>"
"<java.time.chrono.Chronology: boolean isLeapYear(long)>","<java.time.chrono.Chronology: boolean isLeapYear(long)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>"
"<java.net.URL: boolean equals(java.lang.Object)>","<java.net.URL: boolean equals(java.lang.Object)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>"
"<android.util.ArrayMap: int indexOfValue(java.lang.Object)>","<android.util.ArrayMap: int indexOfValue(java.lang.Object)>"
"<android.widget.PopupWindow: boolean isFocusable()>","<android.widget.PopupWindow: boolean isFocusable()>"
"<android.content.pm.PermissionGroupInfo: void <clinit>()>","<android.content.pm.PermissionGroupInfo: void <clinit>()>"
"<android.view.View: void setTranslationX(float)>","<android.view.View: void setTranslationX(float)>"
"<android.graphics.RecordingCanvas: void drawCircle(float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawCircle(float,float,float,android.graphics.Paint)>"
"<java.io.InvalidObjectException: void <init>(java.lang.String)>","<java.io.InvalidObjectException: void <init>(java.lang.String)>"
"<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()>","<android.webkit.WebResourceResponse: java.lang.String getReasonPhrase()>"
"<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>","<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: android.content.ComponentName getComponentName()>","<android.content.pm.PackageManager$ComponentEnabledSetting: android.content.ComponentName getComponentName()>"
"<java.lang.StringBuffer: java.lang.String substring(int,int)>","<java.lang.StringBuffer: java.lang.String substring(int,int)>"
"<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>","<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>"
"<java.lang.Integer: int parseUnsignedInt(java.lang.CharSequence,int,int,int)>","<java.lang.Integer: int parseUnsignedInt(java.lang.CharSequence,int,int,int)>"
"<java.util.concurrent.atomic.AtomicLong: int intValue()>","<java.util.concurrent.atomic.AtomicLong: int intValue()>"
"<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.content.pm.PackageManager$PackageInfoFlags: void <init>()>","<android.content.pm.PackageManager$PackageInfoFlags: void <init>()>"
"<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>","<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>"
"<android.view.WindowInsets: int getSystemWindowInsetLeft()>","<android.view.WindowInsets: int getSystemWindowInsetLeft()>"
"<android.graphics.ColorSpace$Rgb: float[] getInverseTransform()>","<android.graphics.ColorSpace$Rgb: float[] getInverseTransform()>"
"<android.app.Activity: void overridePendingTransition(int,int)>","<android.app.Activity: void overridePendingTransition(int,int)>"
"<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>"
"<android.widget.TextView: void setFallbackLineSpacing(boolean)>","<android.widget.TextView: void setFallbackLineSpacing(boolean)>"
"<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>","<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>"
"<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)>","<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)>"
"<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>","<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>"
"<android.database.Cursor: boolean isBeforeFirst()>","<android.database.Cursor: boolean isBeforeFirst()>"
"<java.util.Map$Entry: java.lang.Object getValue()>","<java.util.Map$Entry: java.lang.Object getValue()>"
"<android.os.Debug: void stopMethodTracing()>","<android.os.Debug: void stopMethodTracing()>"
"<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>","<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>"
"<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()>","<java.util.concurrent.ThreadPoolExecutor: int getLargestPoolSize()>"
"<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>"
"<android.content.ContextParams: java.lang.String getAttributionTag()>","<android.content.ContextParams: java.lang.String getAttributionTag()>"
"<android.widget.TextView: int getCurrentHintTextColor()>","<android.widget.TextView: int getCurrentHintTextColor()>"
"<android.database.Cursor: boolean moveToPrevious()>","<android.database.Cursor: boolean moveToPrevious()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>"
"<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>","<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>"
"<java.net.DatagramSocket: void connect(java.net.SocketAddress)>","<java.net.DatagramSocket: void connect(java.net.SocketAddress)>"
"<io.flutter.view.b: void <clinit>()>","<io.flutter.view.b: void <clinit>()>"
"<android.media.session.MediaSession$Callback: void onSetPlaybackSpeed(float)>","<android.media.session.MediaSession$Callback: void onSetPlaybackSpeed(float)>"
"<android.os.Bundle: void <init>()>","<android.os.Bundle: void <init>()>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int)>"
"<java.util.HashMap: void <init>(int,float)>","<java.util.HashMap: void <init>(int,float)>"
"<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>","<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>"
"<io.flutter.plugins.webviewflutter.m3: void <init>()>","<io.flutter.plugins.webviewflutter.m3: void <init>()>"
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>","<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>"
"<android.webkit.WebView: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>","<android.webkit.WebView: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>"
"<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>","<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>"
"<android.graphics.RectF: void <init>(float,float,float,float)>","<android.graphics.RectF: void <init>(float,float,float,float)>"
"<java.util.Arrays: int compare(java.lang.Comparable[],java.lang.Comparable[])>","<java.util.Arrays: int compare(java.lang.Comparable[],java.lang.Comparable[])>"
"<android.widget.Toolbar: boolean hideOverflowMenu()>","<android.widget.Toolbar: boolean hideOverflowMenu()>"
"<io.flutter.plugins.webviewflutter.w: void <init>(io.flutter.plugins.webviewflutter.k$j$a)>","<io.flutter.plugins.webviewflutter.w: void <init>(io.flutter.plugins.webviewflutter.k$j$a)>"
"<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>","<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>"
"<android.animation.LayoutTransition$TransitionListener: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition$TransitionListener: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>"
"<java.util.Map$Entry: java.lang.Object getKey()>","<java.util.Map$Entry: java.lang.Object getKey()>"
"<java.util.Set: boolean containsAll(java.util.Collection)>","<java.util.Set: boolean containsAll(java.util.Collection)>"
"<java.lang.Short: short parseShort(java.lang.String)>","<java.lang.Short: short parseShort(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>","<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>"
"<android.text.SpannableStringBuilder: android.text.Editable append(char)>","<android.text.SpannableStringBuilder: android.text.Editable append(char)>"
"<android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)>"
"<android.os.Parcel: void readLongArray(long[])>","<android.os.Parcel: void readLongArray(long[])>"
"<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSet(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSet(int,java.lang.Object,java.lang.Object)>"
"<android.view.ViewGroup: void clearFocus()>","<android.view.ViewGroup: void clearFocus()>"
"<io.flutter.plugins.webviewflutter.t0: void <init>(io.flutter.plugins.webviewflutter.k$w)>","<io.flutter.plugins.webviewflutter.t0: void <init>(io.flutter.plugins.webviewflutter.k$w)>"
"<android.os.Parcel: void writeValue(java.lang.Object)>","<android.os.Parcel: void writeValue(java.lang.Object)>"
"<android.widget.TextView: int getAutoSizeMinTextSize()>","<android.widget.TextView: int getAutoSizeMinTextSize()>"
"<android.webkit.WebStorage$Origin: long getQuota()>","<android.webkit.WebStorage$Origin: long getQuota()>"
"<android.database.Cursor: int getPosition()>","<android.database.Cursor: int getPosition()>"
"<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>","<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>"
"<java.util.jar.Attributes: void <init>(java.util.jar.Attributes)>","<java.util.jar.Attributes: void <init>(java.util.jar.Attributes)>"
"<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>","<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>"
"<java.time.LocalTime: java.time.LocalTime ofNanoOfDay(long)>","<java.time.LocalTime: java.time.LocalTime ofNanoOfDay(long)>"
"<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)>","<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)>"
"<android.widget.AbsListView: int computeVerticalScrollExtent()>","<android.widget.AbsListView: int computeVerticalScrollExtent()>"
"<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreResumed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreResumed(android.app.Activity)>"
"<java.time.Instant: int getNano()>","<java.time.Instant: int getNano()>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>"
"<android.view.View: android.graphics.BlendMode getBackgroundTintBlendMode()>","<android.view.View: android.graphics.BlendMode getBackgroundTintBlendMode()>"
"<java.lang.Character: java.lang.String toString()>","<java.lang.Character: java.lang.String toString()>"
"<java.lang.Math: float nextAfter(float,double)>","<java.lang.Math: float nextAfter(float,double)>"
"<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreSettings(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreSettings(boolean)>"
"<android.graphics.RenderNode: float getPivotX()>","<android.graphics.RenderNode: float getPivotX()>"
"<java.lang.Float: void <clinit>()>","<java.lang.Float: void <clinit>()>"
"<java.util.Deque: java.util.Iterator descendingIterator()>","<java.util.Deque: java.util.Iterator descendingIterator()>"
"<android.view.inputmethod.SurroundingText: java.lang.CharSequence getText()>","<android.view.inputmethod.SurroundingText: java.lang.CharSequence getText()>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int,int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int,int)>"
"<android.widget.TextView: android.text.TextPaint getPaint()>","<android.widget.TextView: android.text.TextPaint getPaint()>"
"<android.view.TextureView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.view.TextureView: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.content.pm.PackageManager: int getTargetSdkVersion(java.lang.String)>","<android.content.pm.PackageManager: int getTargetSdkVersion(java.lang.String)>"
"<android.database.ContentObserver: void onChange(boolean,android.net.Uri,int)>","<android.database.ContentObserver: void onChange(boolean,android.net.Uri,int)>"
"<java.net.URI: java.lang.String getFragment()>","<java.net.URI: java.lang.String getFragment()>"
"<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>","<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>"
"<java.net.Socket: boolean getTcpNoDelay()>","<java.net.Socket: boolean getTcpNoDelay()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setStartScrollBottom(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setStartScrollBottom(boolean)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setTimeoutAfter(long)>","<android.app.Notification$Builder: android.app.Notification$Builder setTimeoutAfter(long)>"
"<java.net.SocketImpl: java.util.Set supportedOptions()>","<java.net.SocketImpl: java.util.Set supportedOptions()>"
"<java.lang.Class: boolean desiredAssertionStatus()>","<java.lang.Class: boolean desiredAssertionStatus()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(float)>","<java.lang.StringBuilder: java.lang.StringBuilder append(float)>"
"<java.util.regex.Matcher: java.util.regex.Matcher reset()>","<java.util.regex.Matcher: java.util.regex.Matcher reset()>"
"<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>","<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>"
"<android.view.InputDevice: int getVendorId()>","<android.view.InputDevice: int getVendorId()>"
"<java.security.Provider$Service: java.security.Provider getProvider()>","<java.security.Provider$Service: java.security.Provider getProvider()>"
"<java.lang.Thread: void suspend()>","<java.lang.Thread: void suspend()>"
"<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>","<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>"
"<android.graphics.ColorSpace: float[] chromaticAdaptation(android.graphics.ColorSpace$Adaptation,float[],float[])>","<android.graphics.ColorSpace: float[] chromaticAdaptation(android.graphics.ColorSpace$Adaptation,float[],float[])>"
"<android.util.SizeF: float getHeight()>","<android.util.SizeF: float getHeight()>"
"<android.animation.ValueAnimator: float getAnimatedFraction()>","<android.animation.ValueAnimator: float getAnimatedFraction()>"
"<android.view.ViewParent: android.view.ViewParent getParent()>","<android.view.ViewParent: android.view.ViewParent getParent()>"
"<java.util.Comparator: java.util.Comparator comparingDouble(java.util.function.ToDoubleFunction)>","<java.util.Comparator: java.util.Comparator comparingDouble(java.util.function.ToDoubleFunction)>"
"<java.util.OptionalDouble: void ifPresent(java.util.function.DoubleConsumer)>","<java.util.OptionalDouble: void ifPresent(java.util.function.DoubleConsumer)>"
"<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>","<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>"
"<android.widget.TextView: boolean isElegantTextHeight()>","<android.widget.TextView: boolean isElegantTextHeight()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>"
"<java.util.Random: double nextDouble()>","<java.util.Random: double nextDouble()>"
"<java.util.NavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>"
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>","<java.util.HashMap: java.lang.Object remove(java.lang.Object)>"
"<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)>","<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)>"
"<android.view.View: void drawableHotspotChanged(float,float)>","<android.view.View: void drawableHotspotChanged(float,float)>"
"<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>"
"<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>","<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>"
"<java.text.DateFormat: java.text.NumberFormat getNumberFormat()>","<java.text.DateFormat: java.text.NumberFormat getNumberFormat()>"
"<java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>","<java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>"
"<java.time.chrono.IsoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>","<java.time.chrono.IsoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
"<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel truncate(long)>","<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel truncate(long)>"
"<android.widget.PopupWindow: android.view.View getContentView()>","<android.widget.PopupWindow: android.view.View getContentView()>"
"<android.view.Display$Mode: void <clinit>()>","<android.view.Display$Mode: void <clinit>()>"
"<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(java.lang.Runnable)>","<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(java.lang.Runnable)>"
"<android.widget.TextView: void setHyphenationFrequency(int)>","<android.widget.TextView: void setHyphenationFrequency(int)>"
"<io.flutter.plugins.webviewflutter.k0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.k0: void a(java.lang.Object,y.a$e)>"
"<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.widget.Toolbar$LayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.widget.Toolbar$LayoutParams)>"
"<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>","<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>"
"<android.widget.Toolbar: int getCurrentContentInsetRight()>","<android.widget.Toolbar: int getCurrentContentInsetRight()>"
"<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>"
"<java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray(java.lang.Object[])>"
"<java.util.Dictionary: java.util.Enumeration keys()>","<java.util.Dictionary: java.util.Enumeration keys()>"
"<java.lang.reflect.Parameter: int hashCode()>","<java.lang.reflect.Parameter: int hashCode()>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>"
"<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>"
"<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>","<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>"
"<android.widget.RemoteViews: void setImageViewResource(int,int)>","<android.widget.RemoteViews: void setImageViewResource(int,int)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void setOpaque(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: void setOpaque(int,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.u1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.u1: void a(java.lang.Object,y.a$e)>"
"<android.transition.Scene: void exit()>","<android.transition.Scene: void exit()>"
"<java.util.concurrent.TimeUnit: long toDays(long)>","<java.util.concurrent.TimeUnit: long toDays(long)>"
"<android.webkit.WebChromeClient$FileChooserParams: int getMode()>","<android.webkit.WebChromeClient$FileChooserParams: int getMode()>"
"<android.widget.ImageView: void onAttachedToWindow()>","<android.widget.ImageView: void onAttachedToWindow()>"
"<java.nio.file.attribute.FileAttribute: java.lang.Object value()>","<java.nio.file.attribute.FileAttribute: java.lang.Object value()>"
"<android.widget.TextView: int getAutoSizeStepGranularity()>","<android.widget.TextView: int getAutoSizeStepGranularity()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setDenominator(long)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setDenominator(long)>"
"<android.util.SparseBooleanArray: boolean equals(java.lang.Object)>","<android.util.SparseBooleanArray: boolean equals(java.lang.Object)>"
"<android.content.pm.ServiceInfo: void <init>()>","<android.content.pm.ServiceInfo: void <init>()>"
"<android.view.MenuItem: int getItemId()>","<android.view.MenuItem: int getItemId()>"
"<java.nio.file.FileStore: java.lang.String name()>","<java.nio.file.FileStore: java.lang.String name()>"
"<android.webkit.WebChromeClient: boolean onJsTimeout()>","<android.webkit.WebChromeClient: boolean onJsTimeout()>"
"<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>","<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>"
"<android.view.MotionEvent: float getHistoricalToolMinor(int)>","<android.view.MotionEvent: float getHistoricalToolMinor(int)>"
"<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>","<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>"
"<android.view.Menu: void removeGroup(int)>","<android.view.Menu: void removeGroup(int)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setId(java.lang.String)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setId(java.lang.String)>"
"<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>","<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>"
"<android.graphics.ColorSpace: float[] cctToXyz(int)>","<android.graphics.ColorSpace: float[] cctToXyz(int)>"
"<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>","<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()>","<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
"<java.security.Provider$Service: java.lang.String getAlgorithm()>","<java.security.Provider$Service: java.lang.String getAlgorithm()>"
"<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.view.KeyCharacterMap: boolean equals(java.lang.Object)>","<android.view.KeyCharacterMap: boolean equals(java.lang.Object)>"
"<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>"
"<android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>","<android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>"
"<java.lang.Long: int numberOfLeadingZeros(long)>","<java.lang.Long: int numberOfLeadingZeros(long)>"
"<java.util.stream.IntStream: java.util.stream.IntStream of(int)>","<java.util.stream.IntStream: java.util.stream.IntStream of(int)>"
"<java.time.Period: boolean isNegative()>","<java.time.Period: boolean isNegative()>"
"<android.view.View: int getScrollX()>","<android.view.View: int getScrollX()>"
"<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>"
"<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.util.AttributeSet: int getAttributeCount()>","<android.util.AttributeSet: int getAttributeCount()>"
"<android.widget.TextView$BufferType: android.widget.TextView$BufferType[] values()>","<android.widget.TextView$BufferType: android.widget.TextView$BufferType[] values()>"
"<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>","<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>"
"<android.app.Notification$MediaStyle: android.app.Notification$MediaStyle setShowActionsInCompactView(int[])>","<android.app.Notification$MediaStyle: android.app.Notification$MediaStyle setShowActionsInCompactView(int[])>"
"<android.app.ActionBar$TabListener: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>","<android.app.ActionBar$TabListener: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>"
"<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.widget.TextView: android.text.method.KeyListener getKeyListener()>","<android.widget.TextView: android.text.method.KeyListener getKeyListener()>"
"<android.widget.RemoteViews$RemoteCollectionItems: void <clinit>()>","<android.widget.RemoteViews$RemoteCollectionItems: void <clinit>()>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: void <init>()>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: void <init>()>"
"<android.database.CharArrayBuffer: void <init>(char[])>","<android.database.CharArrayBuffer: void <init>(char[])>"
"<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>"
"<java.lang.String: char[] toCharArray()>","<java.lang.String: char[] toCharArray()>"
"<android.os.LocaleList: int describeContents()>","<android.os.LocaleList: int describeContents()>"
"<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>","<java.util.concurrent.atomic.AtomicInteger: int getAndDecrement()>"
"<java.net.URI: java.lang.String getScheme()>","<java.net.URI: java.lang.String getScheme()>"
"<android.graphics.ColorSpace$Rgb: float[] toLinear(float,float,float)>","<android.graphics.ColorSpace$Rgb: float[] toLinear(float,float,float)>"
"<android.view.translation.TranslationResponseValue$Builder: void <init>(int)>","<android.view.translation.TranslationResponseValue$Builder: void <init>(int)>"
"<android.webkit.WebView: void setInitialScale(int)>","<android.webkit.WebView: void setInitialScale(int)>"
"<java.util.function.LongPredicate: boolean test(long)>","<java.util.function.LongPredicate: boolean test(long)>"
"<java.lang.String: boolean contentEquals(java.lang.CharSequence)>","<java.lang.String: boolean contentEquals(java.lang.CharSequence)>"
"<java.lang.String: boolean matches(java.lang.String)>","<java.lang.String: boolean matches(java.lang.String)>"
"<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>","<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>"
"<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>","<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>"
"<android.widget.AbsListView: int getListPaddingRight()>","<android.widget.AbsListView: int getListPaddingRight()>"
"<android.content.ClipboardManager: java.lang.CharSequence getText()>","<android.content.ClipboardManager: java.lang.CharSequence getText()>"
"<android.graphics.Color: int alpha(int)>","<android.graphics.Color: int alpha(int)>"
"<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>"
"<android.content.Intent: android.content.ClipData getClipData()>","<android.content.Intent: android.content.ClipData getClipData()>"
"<java.util.ArrayList: boolean retainAll(java.util.Collection)>","<java.util.ArrayList: boolean retainAll(java.util.Collection)>"
"<android.view.ViewParent: boolean canResolveTextAlignment()>","<android.view.ViewParent: boolean canResolveTextAlignment()>"
"<android.view.View: void setScrollCaptureHint(int)>","<android.view.View: void setScrollCaptureHint(int)>"
"<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>","<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putLong(java.lang.String,long)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putLong(java.lang.String,long)>"
"<android.graphics.Color: float red(long)>","<android.graphics.Color: float red(long)>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <init>()>"
"<java.util.Deque: java.lang.Object peek()>","<java.util.Deque: java.lang.Object peek()>"
"<java.security.cert.X509Certificate: void <init>()>","<java.security.cert.X509Certificate: void <init>()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>","<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>"
"<android.graphics.Paint$Style: void <clinit>()>","<android.graphics.Paint$Style: void <clinit>()>"
"<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>","<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>"
"<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>","<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>"
"<android.view.View: void onDisplayHint(int)>","<android.view.View: void onDisplayHint(int)>"
"<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext$Builder setExtras(android.os.Bundle)>","<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext$Builder setExtras(android.os.Bundle)>"
"<org.json.JSONObject: java.lang.String getString(java.lang.String)>","<org.json.JSONObject: java.lang.String getString(java.lang.String)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setPublicVersion(android.app.Notification)>","<android.app.Notification$Builder: android.app.Notification$Builder setPublicVersion(android.app.Notification)>"
"<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.app.Notification$Action$WearableExtender: boolean getHintLaunchesActivity()>","<android.app.Notification$Action$WearableExtender: boolean getHintLaunchesActivity()>"
"<android.widget.TextView: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>","<android.widget.TextView: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>"
"<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()>","<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()>"
"<java.text.Format: void <init>()>","<java.text.Format: void <init>()>"
"<java.util.stream.IntStream: java.util.stream.IntStream parallel()>","<java.util.stream.IntStream: java.util.stream.IntStream parallel()>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>"
"<java.util.stream.LongStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)>","<java.util.stream.LongStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)>"
"<java.util.Hashtable: java.util.Enumeration elements()>","<java.util.Hashtable: java.util.Enumeration elements()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>"
"<android.graphics.ColorSpace$Rgb: boolean equals(java.lang.Object)>","<android.graphics.ColorSpace$Rgb: boolean equals(java.lang.Object)>"
"<android.view.ViewConfiguration: int getScaledEdgeSlop()>","<android.view.ViewConfiguration: int getScaledEdgeSlop()>"
"<android.view.Window: android.transition.Transition getSharedElementReturnTransition()>","<android.view.Window: android.transition.Transition getSharedElementReturnTransition()>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.temporal.Temporal: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.hardware.HardwareBuffer: int getFormat()>","<android.hardware.HardwareBuffer: int getFormat()>"
"<android.media.Rating: void <clinit>()>","<android.media.Rating: void <clinit>()>"
"<java.time.temporal.ChronoField: void <clinit>()>","<java.time.temporal.ChronoField: void <clinit>()>"
"<android.util.LongSparseArray: int size()>","<android.util.LongSparseArray: int size()>"
"<java.lang.CharSequence: java.util.stream.IntStream chars()>","<java.lang.CharSequence: java.util.stream.IntStream chars()>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant()>","<android.icu.util.ULocale: java.lang.String getDisplayVariant()>"
"<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>","<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>"
"<android.content.Context: android.content.Context createContextForSplit(java.lang.String)>","<android.content.Context: android.content.Context createContextForSplit(java.lang.String)>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int,int)>"
"<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>","<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>"
"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>","<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
"<java.util.InvalidPropertiesFormatException: void <init>(java.lang.String)>","<java.util.InvalidPropertiesFormatException: void <init>(java.lang.String)>"
"<android.view.View$OnClickListener: void onClick(android.view.View)>","<android.view.View$OnClickListener: void onClick(android.view.View)>"
"<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.String toString()>"
"<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>","<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>"
"<android.graphics.Paint$Style: void <init>(java.lang.String,int)>","<android.graphics.Paint$Style: void <init>(java.lang.String,int)>"
"<java.io.PrintWriter: java.io.Writer append(char)>","<java.io.PrintWriter: java.io.Writer append(char)>"
"<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>"
"<android.view.inputmethod.TextSnapshot: android.view.inputmethod.SurroundingText getSurroundingText()>","<android.view.inputmethod.TextSnapshot: android.view.inputmethod.SurroundingText getSurroundingText()>"
"<android.view.inputmethod.TextSnapshot: int getCompositionStart()>","<android.view.inputmethod.TextSnapshot: int getCompositionStart()>"
"<android.view.KeyEvent: boolean isShiftPressed()>","<android.view.KeyEvent: boolean isShiftPressed()>"
"<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>","<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.util.function.Supplier)>"
"<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>","<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,boolean[])>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>"
"<java.lang.Short: byte byteValue()>","<java.lang.Short: byte byteValue()>"
"<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence)>"
"<java.security.cert.X509Certificate: void checkValidity()>","<java.security.cert.X509Certificate: void checkValidity()>"
"<java.nio.file.Path: boolean endsWith(java.nio.file.Path)>","<java.nio.file.Path: boolean endsWith(java.nio.file.Path)>"
"<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>","<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>"
"<android.os.Vibrator: int[] getPrimitiveDurations(int[])>","<android.os.Vibrator: int[] getPrimitiveDurations(int[])>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionReady()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionReady()>"
"<android.view.View: boolean isVerticalFadingEdgeEnabled()>","<android.view.View: boolean isVerticalFadingEdgeEnabled()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<java.util.WeakHashMap: void <init>(java.util.Map)>","<java.util.WeakHashMap: void <init>(java.util.Map)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>"
"<java.nio.file.Path: java.nio.file.Path getParent()>","<java.nio.file.Path: java.nio.file.Path getParent()>"
"<java.util.Date: int getMonth()>","<java.util.Date: int getMonth()>"
"<android.transition.Transition: android.transition.Transition excludeChildren(java.lang.Class,boolean)>","<android.transition.Transition: android.transition.Transition excludeChildren(java.lang.Class,boolean)>"
"<java.time.zone.ZoneRules: java.util.List getValidOffsets(java.time.LocalDateTime)>","<java.time.zone.ZoneRules: java.util.List getValidOffsets(java.time.LocalDateTime)>"
"<android.text.DynamicLayout: boolean getLineContainsTab(int)>","<android.text.DynamicLayout: boolean getLineContainsTab(int)>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newWorkStealingPool()>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newWorkStealingPool()>"
"<android.os.Message: void sendToTarget()>","<android.os.Message: void sendToTarget()>"
"<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>","<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>"
"<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>","<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>"
"<org.json.JSONTokener: java.lang.String nextString(char)>","<org.json.JSONTokener: java.lang.String nextString(char)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>","<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>"
"<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>","<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>"
"<java.util.Objects: java.lang.Object requireNonNullElseGet(java.lang.Object,java.util.function.Supplier)>","<java.util.Objects: java.lang.Object requireNonNullElseGet(java.lang.Object,java.util.function.Supplier)>"
"<c0.g: boolean a(android.view.View)>","<c0.g: boolean a(android.view.View)>"
"<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>","<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>"
"<android.transition.Transition: android.transition.Transition removeTarget(java.lang.String)>","<android.transition.Transition: android.transition.Transition removeTarget(java.lang.String)>"
"<android.util.TypedValue: java.lang.String toString()>","<android.util.TypedValue: java.lang.String toString()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>"
"<android.util.SparseArray: boolean contentEquals(android.util.SparseArray)>","<android.util.SparseArray: boolean contentEquals(android.util.SparseArray)>"
"<java.lang.Deprecated: boolean forRemoval()>","<java.lang.Deprecated: boolean forRemoval()>"
"<android.webkit.WebView: boolean pageUp(boolean)>","<android.webkit.WebView: boolean pageUp(boolean)>"
"<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>"
"<android.webkit.TracingConfig: java.util.List getCustomIncludedCategories()>","<android.webkit.TracingConfig: java.util.List getCustomIncludedCategories()>"
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>","<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>"
"<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>","<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>"
"<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>","<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>"
"<android.widget.Scroller: int getStartX()>","<android.widget.Scroller: int getStartX()>"
"<android.view.View: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcher()>","<android.view.View: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcher()>"
"<android.animation.TypeConverter: void <init>(java.lang.Class,java.lang.Class)>","<android.animation.TypeConverter: void <init>(java.lang.Class,java.lang.Class)>"
"<android.view.ViewGroup: void measureChild(android.view.View,int,int)>","<android.view.ViewGroup: void measureChild(android.view.View,int,int)>"
"<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>","<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>"
"<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>","<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>"
"<android.graphics.ColorSpace: float getMinValue(int)>","<android.graphics.ColorSpace: float getMinValue(int)>"
"<android.hardware.Sensor: boolean isDirectChannelTypeSupported(int)>","<android.hardware.Sensor: boolean isDirectChannelTypeSupported(int)>"
"<java.lang.String: java.lang.String substring(int)>","<java.lang.String: java.lang.String substring(int)>"
"<android.view.ActionMode: void setTitleOptionalHint(boolean)>","<android.view.ActionMode: void setTitleOptionalHint(boolean)>"
"<javax.security.auth.Subject: java.util.Set getPrivateCredentials()>","<javax.security.auth.Subject: java.util.Set getPrivateCredentials()>"
"<java.time.chrono.IsoChronology: void <clinit>()>","<java.time.chrono.IsoChronology: void <clinit>()>"
"<org.json.JSONObject: boolean isNull(java.lang.String)>","<org.json.JSONObject: boolean isNull(java.lang.String)>"
"<android.view.SurfaceControl: boolean isValid()>","<android.view.SurfaceControl: boolean isValid()>"
"<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>","<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>"
"<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>","<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>"
"<android.view.View: boolean hasTransientState()>","<android.view.View: boolean hasTransientState()>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleRight()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleRight()>"
"<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()>","<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()>"
"<android.text.SpannableString: boolean equals(java.lang.Object)>","<android.text.SpannableString: boolean equals(java.lang.Object)>"
"<java.nio.ByteBuffer: boolean equals(java.lang.Object)>","<java.nio.ByteBuffer: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup: void addKeyboardNavigationClusters(java.util.Collection,int)>","<android.view.ViewGroup: void addKeyboardNavigationClusters(java.util.Collection,int)>"
"<android.view.View: void onWindowFocusChanged(boolean)>","<android.view.View: void onWindowFocusChanged(boolean)>"
"<android.widget.TextView: int length()>","<android.widget.TextView: int length()>"
"<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>","<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)>"
"<android.window.SplashScreen: void setSplashScreenTheme(int)>","<android.window.SplashScreen: void setSplashScreenTheme(int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>","<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>"
"<org.json.JSONObject: java.util.Iterator keys()>","<org.json.JSONObject: java.util.Iterator keys()>"
"<android.view.MotionEvent: java.lang.String actionToString(int)>","<android.view.MotionEvent: java.lang.String actionToString(int)>"
"<android.app.ActivityManager$MemoryInfo: void <clinit>()>","<android.app.ActivityManager$MemoryInfo: void <clinit>()>"
"<android.app.Notification$Action: android.app.Notification$Action clone()>","<android.app.Notification$Action: android.app.Notification$Action clone()>"
"<android.os.Bundle: void putAll(android.os.Bundle)>","<android.os.Bundle: void putAll(android.os.Bundle)>"
"<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<java.time.temporal.TemporalQuery: java.lang.Object queryFrom(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalQuery: java.lang.Object queryFrom(java.time.temporal.TemporalAccessor)>"
"<android.content.pm.PackageManager$OnChecksumsReadyListener: void onChecksumsReady(java.util.List)>","<android.content.pm.PackageManager$OnChecksumsReadyListener: void onChecksumsReady(java.util.List)>"
"<android.app.PendingIntent: void <clinit>()>","<android.app.PendingIntent: void <clinit>()>"
"<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()>","<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()>"
"<android.view.MenuItem: int getGroupId()>","<android.view.MenuItem: int getGroupId()>"
"<android.view.View: void setNextFocusForwardId(int)>","<android.view.View: void setNextFocusForwardId(int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSettingsText(java.lang.CharSequence)>","<android.app.Notification$Builder: android.app.Notification$Builder setSettingsText(java.lang.CharSequence)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createChainEffect(android.graphics.RenderEffect,android.graphics.RenderEffect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createChainEffect(android.graphics.RenderEffect,android.graphics.RenderEffect)>"
"<android.app.Fragment: boolean getAllowReturnTransitionOverlap()>","<android.app.Fragment: boolean getAllowReturnTransitionOverlap()>"
"<android.widget.Toolbar: void setTitleTextAppearance(android.content.Context,int)>","<android.widget.Toolbar: void setTitleTextAppearance(android.content.Context,int)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>"
"<java.util.Calendar: int hashCode()>","<java.util.Calendar: int hashCode()>"
"<android.app.Activity: void setShouldDockBigOverlays(boolean)>","<android.app.Activity: void setShouldDockBigOverlays(boolean)>"
"<java.lang.Integer: void <init>(int)>","<java.lang.Integer: void <init>(int)>"
"<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>","<java.io.ObjectInputStream$GetField: byte get(java.lang.String,byte)>"
"<android.graphics.DrawFilter: void finalize()>","<android.graphics.DrawFilter: void finalize()>"
"<android.graphics.SurfaceTexture: void attachToGLContext(int)>","<android.graphics.SurfaceTexture: void attachToGLContext(int)>"
"<android.graphics.Matrix: boolean postSkew(float,float)>","<android.graphics.Matrix: boolean postSkew(float,float)>"
"<android.content.ContentResolver: void cancelSync(android.net.Uri)>","<android.content.ContentResolver: void cancelSync(android.net.Uri)>"
"<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>","<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>"
"<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>","<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>"
"<java.text.FieldPosition: java.lang.String toString()>","<java.text.FieldPosition: java.lang.String toString()>"
"<android.os.Bundle: short[] getShortArray(java.lang.String)>","<android.os.Bundle: short[] getShortArray(java.lang.String)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<java.io.Reader: void mark(int)>","<java.io.Reader: void mark(int)>"
"<java.time.LocalTime: java.time.LocalTime minusMinutes(long)>","<java.time.LocalTime: java.time.LocalTime minusMinutes(long)>"
"<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.content.SyncAdapterType: int hashCode()>","<android.content.SyncAdapterType: int hashCode()>"
"<java.io.ObjectInputStream: java.lang.String readLine()>","<java.io.ObjectInputStream: java.lang.String readLine()>"
"<androidx.window.sidecar.SidecarInterface: void onDeviceStateListenersChanged(boolean)>","<androidx.window.sidecar.SidecarInterface: void onDeviceStateListenersChanged(boolean)>"
"<android.widget.AbsListView: float getTopFadingEdgeStrength()>","<android.widget.AbsListView: float getTopFadingEdgeStrength()>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>"
"<android.database.sqlite.SQLiteQuery: void <init>()>","<android.database.sqlite.SQLiteQuery: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>"
"<java.net.URLConnection: long getDate()>","<java.net.URLConnection: long getDate()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo build()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo build()>"
"<android.view.View: boolean removeCallbacks(java.lang.Runnable)>","<android.view.View: boolean removeCallbacks(java.lang.Runnable)>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean equals(java.lang.Object)>","<android.view.accessibility.AccessibilityWindowInfo: boolean equals(java.lang.Object)>"
"<android.graphics.Movie: boolean isOpaque()>","<android.graphics.Movie: boolean isOpaque()>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>"
"<android.content.Context: void unbindService(android.content.ServiceConnection)>","<android.content.Context: void unbindService(android.content.ServiceConnection)>"
"<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>","<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>"
"<java.io.ObjectStreamClass: void <clinit>()>","<java.io.ObjectStreamClass: void <clinit>()>"
"<java.time.DayOfWeek: java.time.DayOfWeek valueOf(java.lang.String)>","<java.time.DayOfWeek: java.time.DayOfWeek valueOf(java.lang.String)>"
"<android.webkit.WebChromeClient$FileChooserParams: java.lang.String[] getAcceptTypes()>","<android.webkit.WebChromeClient$FileChooserParams: java.lang.String[] getAcceptTypes()>"
"<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>","<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>"
"<java.security.Provider: java.lang.String getProperty(java.lang.String)>","<java.security.Provider: java.lang.String getProperty(java.lang.String)>"
"<android.animation.ValueAnimator: int getRepeatMode()>","<android.animation.ValueAnimator: int getRepeatMode()>"
"<android.app.Dialog: void unregisterForContextMenu(android.view.View)>","<android.app.Dialog: void unregisterForContextMenu(android.view.View)>"
"<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getDestination()>","<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getDestination()>"
"<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>","<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>"
"<java.util.DoubleSummaryStatistics: void accept(double)>","<java.util.DoubleSummaryStatistics: void accept(double)>"
"<android.widget.AbsListView: void onNestedScroll(android.view.View,int,int,int,int)>","<android.widget.AbsListView: void onNestedScroll(android.view.View,int,int,int,int)>"
"<android.app.Notification$WearableExtender: int getGravity()>","<android.app.Notification$WearableExtender: int getGravity()>"
"<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long,long)>","<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long,long)>"
"<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)>","<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)>"
"<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)>","<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setHintLaunchesActivity(boolean)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setHintLaunchesActivity(boolean)>"
"<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)>","<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)>"
"<java.io.BufferedReader: void mark(int)>","<java.io.BufferedReader: void mark(int)>"
"<android.database.Cursor: boolean getWantsAllOnMoveCalls()>","<android.database.Cursor: boolean getWantsAllOnMoveCalls()>"
"<java.net.SocketImpl: int getLocalPort()>","<java.net.SocketImpl: int getLocalPort()>"
"<java.lang.Float: boolean isNaN(float)>","<java.lang.Float: boolean isNaN(float)>"
"<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<android.os.Looper: android.os.Looper myLooper()>","<android.os.Looper: android.os.Looper myLooper()>"
"<android.widget.RemoteViews: void setColorAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColorAttr(int,java.lang.String,int)>"
"<android.content.IntentFilter: void <init>(java.lang.String)>","<android.content.IntentFilter: void <init>(java.lang.String)>"
"<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>","<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>"
"<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>","<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>"
"<android.view.View: void onDraw(android.graphics.Canvas)>","<android.view.View: void onDraw(android.graphics.Canvas)>"
"<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()>","<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()>"
"<java.text.NumberFormat: int getMinimumFractionDigits()>","<java.text.NumberFormat: int getMinimumFractionDigits()>"
"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>","<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>"
"<java.lang.Math: double nextUp(double)>","<java.lang.Math: double nextUp(double)>"
"<android.app.Activity: android.net.Uri getReferrer()>","<android.app.Activity: android.net.Uri getReferrer()>"
"<android.util.SparseArray: void removeAt(int)>","<android.util.SparseArray: void removeAt(int)>"
"<android.graphics.DrawFilter: void <init>()>","<android.graphics.DrawFilter: void <init>()>"
"<android.app.Dialog: void onStart()>","<android.app.Dialog: void onStart()>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>"
"<java.io.ByteArrayInputStream: long skip(long)>","<java.io.ByteArrayInputStream: long skip(long)>"
"<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>","<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>"
"<java.lang.Double: int compare(double,double)>","<java.lang.Double: int compare(double,double)>"
"<android.content.ContentProvider: void onLowMemory()>","<android.content.ContentProvider: void onLowMemory()>"
"<android.app.Activity: boolean showDialog(int,android.os.Bundle)>","<android.app.Activity: boolean showDialog(int,android.os.Bundle)>"
"<android.webkit.WebView: void onFinishTemporaryDetach()>","<android.webkit.WebView: void onFinishTemporaryDetach()>"
"<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>","<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>"
"<android.app.ActionBar: boolean isShowing()>","<android.app.ActionBar: boolean isShowing()>"
"<android.icu.util.ULocale: int compareTo(android.icu.util.ULocale)>","<android.icu.util.ULocale: int compareTo(android.icu.util.ULocale)>"
"<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>","<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>"
"<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>","<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>"
"<java.time.OffsetDateTime: int getNano()>","<java.time.OffsetDateTime: int getNano()>"
"<android.opengl.Matrix: void translateM(float[],int,float,float,float)>","<android.opengl.Matrix: void translateM(float[],int,float,float,float)>"
"<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,java.lang.CharSequence)>","<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,java.lang.CharSequence)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>","<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>"
"<android.print.PrintAttributes: boolean equals(java.lang.Object)>","<android.print.PrintAttributes: boolean equals(java.lang.Object)>"
"<java.lang.ClassLoader: java.lang.ClassLoader getParent()>","<java.lang.ClassLoader: java.lang.ClassLoader getParent()>"
"<android.provider.Settings$Secure: void <init>()>","<android.provider.Settings$Secure: void <init>()>"
"<org.json.JSONTokener: void <init>(java.lang.String)>","<org.json.JSONTokener: void <init>(java.lang.String)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setDisallowMetered(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setDisallowMetered(boolean)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>","<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>"
"<android.os.Parcel: int dataCapacity()>","<android.os.Parcel: int dataCapacity()>"
"<java.lang.Character: int codePointAt(char[],int,int)>","<java.lang.Character: int codePointAt(char[],int,int)>"
"<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>","<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>"
"<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>","<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeNameResId(int)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeNameResId(int)>"
"<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>","<android.widget.ListPopupWindow: void setAdapter(android.widget.ListAdapter)>"
"<java.util.stream.Stream: java.lang.Object[] toArray()>","<java.util.stream.Stream: java.lang.Object[] toArray()>"
"<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>","<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>"
"<java.lang.Thread: void setDaemon(boolean)>","<java.lang.Thread: void setDaemon(boolean)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>"
"<android.content.res.Configuration: boolean isNightModeActive()>","<android.content.res.Configuration: boolean isNightModeActive()>"
"<java.util.PriorityQueue: java.lang.Object poll()>","<java.util.PriorityQueue: java.lang.Object poll()>"
"<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>"
"<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.app.Activity: void unregisterForContextMenu(android.view.View)>","<android.app.Activity: void unregisterForContextMenu(android.view.View)>"
"<android.content.Intent: android.content.Intent setPackage(java.lang.String)>","<android.content.Intent: android.content.Intent setPackage(java.lang.String)>"
"<java.lang.ThreadGroup: int getMaxPriority()>","<java.lang.ThreadGroup: int getMaxPriority()>"
"<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>","<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>"
"<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>","<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>"
"<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)>","<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)>"
"<java.util.Arrays: int compare(int[],int[])>","<java.util.Arrays: int compare(int[],int[])>"
"<android.webkit.WebSettings: void setMixedContentMode(int)>","<android.webkit.WebSettings: void setMixedContentMode(int)>"
"<java.util.Optional: void ifPresentOrElse(java.util.function.Consumer,java.lang.Runnable)>","<java.util.Optional: void ifPresentOrElse(java.util.function.Consumer,java.lang.Runnable)>"
"<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>","<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>"
"<java.util.Optional: boolean isEmpty()>","<java.util.Optional: boolean isEmpty()>"
"<android.view.WindowInsetsAnimation$Callback: void onEnd(android.view.WindowInsetsAnimation)>","<android.view.WindowInsetsAnimation$Callback: void onEnd(android.view.WindowInsetsAnimation)>"
"<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>","<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>"
"<java.nio.channels.SeekableByteChannel: long size()>","<java.nio.channels.SeekableByteChannel: long size()>"
"<android.content.pm.VersionedPackage: int getVersionCode()>","<android.content.pm.VersionedPackage: int getVersionCode()>"
"<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)>","<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setComposingText(int,java.lang.CharSequence)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setComposingText(int,java.lang.CharSequence)>"
"<android.transition.Transition: android.transition.Transition setDuration(long)>","<android.transition.Transition: android.transition.Transition setDuration(long)>"
"<android.view.accessibility.AccessibilityEvent: int getRecordCount()>","<android.view.accessibility.AccessibilityEvent: int getRecordCount()>"
"<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>","<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>"
"<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation valueOf(java.lang.String)>","<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation valueOf(java.lang.String)>"
"<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>","<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>"
"<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)>","<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)>"
"<java.lang.Double: double sum(double,double)>","<java.lang.Double: double sum(double,double)>"
"<android.view.MotionEvent: int findPointerIndex(int)>","<android.view.MotionEvent: int findPointerIndex(int)>"
"<java.util.Arrays: int binarySearch(byte[],byte)>","<java.util.Arrays: int binarySearch(byte[],byte)>"
"<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.content.pm.PackageInstaller$Session: void addChildSessionId(int)>","<android.content.pm.PackageInstaller$Session: void addChildSessionId(int)>"
"<android.media.MediaDescription: java.lang.String toString()>","<android.media.MediaDescription: java.lang.String toString()>"
"<java.util.Calendar: int getActualMaximum(int)>","<java.util.Calendar: int getActualMaximum(int)>"
"<android.app.Activity: android.view.View onCreatePanelView(int)>","<android.app.Activity: android.view.View onCreatePanelView(int)>"
"<java.lang.ArrayIndexOutOfBoundsException: void <init>()>","<java.lang.ArrayIndexOutOfBoundsException: void <init>()>"
"<m.b: void <init>(m.c,java.lang.String,int,m.c$d,java.nio.ByteBuffer,long)>","<m.b: void <init>(m.c,java.lang.String,int,m.c$d,java.nio.ByteBuffer,long)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromSplit(android.content.Context,java.lang.String)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromSplit(android.content.Context,java.lang.String)>"
"<android.media.session.MediaSessionManager: java.lang.String getMediaKeyEventSessionPackageName()>","<android.media.session.MediaSessionManager: java.lang.String getMediaKeyEventSessionPackageName()>"
"<android.transition.Transition: android.transition.Transition excludeChildren(int,boolean)>","<android.transition.Transition: android.transition.Transition excludeChildren(int,boolean)>"
"<android.view.textclassifier.TextClassification: void <clinit>()>","<android.view.textclassifier.TextClassification: void <clinit>()>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.Object[] toArray()>","<java.util.concurrent.LinkedBlockingQueue: java.lang.Object[] toArray()>"
"<java.util.DoubleSummaryStatistics: double getMax()>","<java.util.DoubleSummaryStatistics: double getMax()>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>"
"<android.view.displayhash.DisplayHash: void <init>()>","<android.view.displayhash.DisplayHash: void <init>()>"
"<java.util.Arrays: int compare(char[],int,int,char[],int,int)>","<java.util.Arrays: int compare(char[],int,int,char[],int,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setReorderingAllowed(boolean)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setReorderingAllowed(boolean)>"
"<java.util.Hashtable: java.util.Enumeration keys()>","<java.util.Hashtable: java.util.Enumeration keys()>"
"<android.graphics.Paint: boolean equalsForTextMeasurement(android.graphics.Paint)>","<android.graphics.Paint: boolean equalsForTextMeasurement(android.graphics.Paint)>"
"<android.widget.TextView: void setTextCursorDrawable(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextCursorDrawable(android.graphics.drawable.Drawable)>"
"<java.io.PrintWriter: void flush()>","<java.io.PrintWriter: void flush()>"
"<android.app.ActivityManager: void clearWatchHeapLimit()>","<android.app.ActivityManager: void clearWatchHeapLimit()>"
"<java.lang.reflect.TypeVariable: java.lang.String getName()>","<java.lang.reflect.TypeVariable: java.lang.String getName()>"
"<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)>","<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)>"
"<android.content.Loader: void abandon()>","<android.content.Loader: void abandon()>"
"<java.util.Collection: java.lang.Object[] toArray(java.util.function.IntFunction)>","<java.util.Collection: java.lang.Object[] toArray(java.util.function.IntFunction)>"
"<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,int)>","<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,int)>"
"<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>","<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>"
"<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>","<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageManager$ComponentEnabledSetting: void writeToParcel(android.os.Parcel,int)>"
"<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>","<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>"
"<android.app.PictureInPictureUiState: int describeContents()>","<android.app.PictureInPictureUiState: int describeContents()>"
"<android.content.pm.FeatureGroupInfo: int describeContents()>","<android.content.pm.FeatureGroupInfo: int describeContents()>"
"<java.io.DataInput: java.lang.String readLine()>","<java.io.DataInput: java.lang.String readLine()>"
"<android.graphics.Color: boolean isSrgb(long)>","<android.graphics.Color: boolean isSrgb(long)>"
"<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>","<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>"
"<java.nio.channels.FileChannel$MapMode: void <init>()>","<java.nio.channels.FileChannel$MapMode: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>"
"<android.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>"
"<java.net.Socket: void setTrafficClass(int)>","<java.net.Socket: void setTrafficClass(int)>"
"<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()>","<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()>"
"<android.view.AttachedSurfaceControl: int getBufferTransformHint()>","<android.view.AttachedSurfaceControl: int getBufferTransformHint()>"
"<android.view.Window: void takeSurface(android.view.SurfaceHolder$Callback2)>","<android.view.Window: void takeSurface(android.view.SurfaceHolder$Callback2)>"
"<android.widget.ImageView: boolean getAdjustViewBounds()>","<android.widget.ImageView: boolean getAdjustViewBounds()>"
"<android.widget.TextView: int getTotalPaddingBottom()>","<android.widget.TextView: int getTotalPaddingBottom()>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.os.Parcel: void writeBlob(byte[])>","<android.os.Parcel: void writeBlob(byte[])>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)>"
"<android.graphics.text.MeasuredText$Builder: void <init>(android.graphics.text.MeasuredText)>","<android.graphics.text.MeasuredText$Builder: void <init>(android.graphics.text.MeasuredText)>"
"<android.app.RemoteAction: int hashCode()>","<android.app.RemoteAction: int hashCode()>"
"<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>","<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>"
"<java.text.FieldPosition: boolean equals(java.lang.Object)>","<java.text.FieldPosition: boolean equals(java.lang.Object)>"
"<android.view.ActionProvider: void <init>(android.content.Context)>","<android.view.ActionProvider: void <init>(android.content.Context)>"
"<java.lang.Long: long parseUnsignedLong(java.lang.String)>","<java.lang.Long: long parseUnsignedLong(java.lang.String)>"
"<java.util.Arrays: int compareUnsigned(long[],int,int,long[],int,int)>","<java.util.Arrays: int compareUnsigned(long[],int,int,long[],int,int)>"
"<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>","<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>"
"<android.app.Person: java.lang.String getUri()>","<android.app.Person: java.lang.String getUri()>"
"<java.time.Duration: int toMillisPart()>","<java.time.Duration: int toMillisPart()>"
"<android.content.BroadcastReceiver: void abortBroadcast()>","<android.content.BroadcastReceiver: void abortBroadcast()>"
"<java.net.NetworkInterface: void <init>()>","<java.net.NetworkInterface: void <init>()>"
"<android.media.session.MediaController$Callback: void onSessionDestroyed()>","<android.media.session.MediaController$Callback: void onSessionDestroyed()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setDescription(java.lang.CharSequence)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setDescription(java.lang.CharSequence)>"
"<android.content.Context: void revokeUriPermission(android.net.Uri,int)>","<android.content.Context: void revokeUriPermission(android.net.Uri,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>"
"<java.time.ZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.ZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>","<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>"
"<java.nio.channels.NetworkChannel: java.util.Set supportedOptions()>","<java.nio.channels.NetworkChannel: java.util.Set supportedOptions()>"
"<java.time.OffsetTime: int compareTo(java.lang.Object)>","<java.time.OffsetTime: int compareTo(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>"
"<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>","<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>"
"<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>","<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>"
"<android.icu.util.ULocale: java.lang.String getCountry()>","<android.icu.util.ULocale: java.lang.String getCountry()>"
"<java.lang.String: int lastIndexOf(int,int)>","<java.lang.String: int lastIndexOf(int,int)>"
"<android.view.ActionProvider: boolean onPerformDefaultAction()>","<android.view.ActionProvider: boolean onPerformDefaultAction()>"
"<java.io.Writer: void write(java.lang.String)>","<java.io.Writer: void write(java.lang.String)>"
"<java.util.Arrays: int binarySearch(float[],int,int,float)>","<java.util.Arrays: int binarySearch(float[],int,int,float)>"
"<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)>","<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)>"
"<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>","<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>"
"<java.util.ArrayList: boolean remove(java.lang.Object)>","<java.util.ArrayList: boolean remove(java.lang.Object)>"
"<android.app.Notification$BubbleMetadata: boolean getAutoExpandBubble()>","<android.app.Notification$BubbleMetadata: boolean getAutoExpandBubble()>"
"<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()>","<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()>"
"<android.media.session.MediaSession$Callback: void onPrepareFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPrepareFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.graphics.drawable.ColorDrawable: void <init>(int)>","<android.graphics.drawable.ColorDrawable: void <init>(int)>"
"<java.util.stream.IntStream: java.util.stream.IntStream$Builder builder()>","<java.util.stream.IntStream: java.util.stream.IntStream$Builder builder()>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>"
"<java.util.concurrent.atomic.AtomicInteger: float floatValue()>","<java.util.concurrent.atomic.AtomicInteger: float floatValue()>"
"<android.webkit.CookieManager: boolean allowFileSchemeCookies()>","<android.webkit.CookieManager: boolean allowFileSchemeCookies()>"
"<android.content.Loader: boolean isStarted()>","<android.content.Loader: boolean isStarted()>"
"<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)>","<android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)>"
"<android.transition.Transition: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)>","<android.transition.Transition: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)>"
"<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>"
"<android.content.pm.PermissionInfo: void <clinit>()>","<android.content.pm.PermissionInfo: void <clinit>()>"
"<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>","<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>"
"<android.view.ViewGroup: void dispatchFinishTemporaryDetach()>","<android.view.ViewGroup: void dispatchFinishTemporaryDetach()>"
"<java.util.Date: long UTC(int,int,int,int,int,int)>","<java.util.Date: long UTC(int,int,int,int,int,int)>"
"<android.graphics.Paint: float measureText(char[],int,int)>","<android.graphics.Paint: float measureText(char[],int,int)>"
"<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>","<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>"
"<java.util.Spliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>"
"<android.webkit.WebSettings: void setSafeBrowsingEnabled(boolean)>","<android.webkit.WebSettings: void setSafeBrowsingEnabled(boolean)>"
"<java.time.chrono.Era: int get(java.time.temporal.TemporalField)>","<java.time.chrono.Era: int get(java.time.temporal.TemporalField)>"
"<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>","<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>"
"<android.text.style.LocaleSpan: void <init>(android.os.LocaleList)>","<android.text.style.LocaleSpan: void <init>(android.os.LocaleList)>"
"<android.app.Notification$Style: void <init>()>","<android.app.Notification$Style: void <init>()>"
"<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)>","<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)>"
"<java.util.NavigableMap: java.lang.Object floorKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object floorKey(java.lang.Object)>"
"<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>"
"<java.time.Period: java.time.Period minus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.Period minus(java.time.temporal.TemporalAmount)>"
"<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReadPendingIntent()>","<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReadPendingIntent()>"
"<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>","<org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)>"
"<java.lang.Runtime: int availableProcessors()>","<java.lang.Runtime: int availableProcessors()>"
"<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>","<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>"
"<java.util.Locale$LanguageRange: int hashCode()>","<java.util.Locale$LanguageRange: int hashCode()>"
"<java.io.InputStream: long skip(long)>","<java.io.InputStream: long skip(long)>"
"<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>"
"<android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()>","<android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.webkit.WebView: void onScrollChanged(int,int,int,int)>","<android.webkit.WebView: void onScrollChanged(int,int,int,int)>"
"<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(int)>"
"<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()>","<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()>"
"<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>","<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>"
"<java.util.LinkedList: java.lang.Object pollLast()>","<java.util.LinkedList: java.lang.Object pollLast()>"
"<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>","<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>"
"<java.time.zone.ZoneOffsetTransition: java.time.zone.ZoneOffsetTransition of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>","<java.time.zone.ZoneOffsetTransition: java.time.zone.ZoneOffsetTransition of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()>"
"<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>","<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>"
"<android.view.accessibility.AccessibilityNodeInfo: void recycle()>","<android.view.accessibility.AccessibilityNodeInfo: void recycle()>"
"<java.util.Calendar: long getTimeInMillis()>","<java.util.Calendar: long getTimeInMillis()>"
"<android.graphics.Bitmap: void setColorSpace(android.graphics.ColorSpace)>","<android.graphics.Bitmap: void setColorSpace(android.graphics.ColorSpace)>"
"<java.util.regex.MatchResult: int groupCount()>","<java.util.regex.MatchResult: int groupCount()>"
"<android.webkit.WebView: void clearMatches()>","<android.webkit.WebView: void clearMatches()>"
"<android.webkit.WebView: boolean canGoBackOrForward(int)>","<android.webkit.WebView: boolean canGoBackOrForward(int)>"
"<java.util.ArrayDeque: java.lang.Object peek()>","<java.util.ArrayDeque: java.lang.Object peek()>"
"<android.view.View: void resetPivot()>","<android.view.View: void resetPivot()>"
"<java.util.concurrent.ConcurrentLinkedQueue: int size()>","<java.util.concurrent.ConcurrentLinkedQueue: int size()>"
"<android.media.VolumeProvider: int getMaxVolume()>","<android.media.VolumeProvider: int getMaxVolume()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>"
"<java.time.Period: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.Period: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<java.util.stream.DoubleStream: boolean allMatch(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: boolean allMatch(java.util.function.DoublePredicate)>"
"<android.os.Parcel: void writeMap(java.util.Map)>","<android.os.Parcel: void writeMap(java.util.Map)>"
"<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>","<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>"
"<java.nio.FloatBuffer: int hashCode()>","<java.nio.FloatBuffer: int hashCode()>"
"<java.util.List: java.util.List of(java.lang.Object[])>","<java.util.List: java.util.List of(java.lang.Object[])>"
"<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)>"
"<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>","<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>"
"<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>","<android.webkit.WebView: void savePassword(java.lang.String,java.lang.String,java.lang.String)>"
"<android.widget.TextView: void setInputType(int)>","<android.widget.TextView: void setInputType(int)>"
"<android.print.PrintAttributes: void <clinit>()>","<android.print.PrintAttributes: void <clinit>()>"
"<android.app.VoiceInteractor$Prompt: int describeContents()>","<android.app.VoiceInteractor$Prompt: int describeContents()>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.RectF)>","<android.graphics.Canvas: boolean quickReject(android.graphics.RectF)>"
"<java.lang.Runtime: java.lang.Runtime getRuntime()>","<java.lang.Runtime: java.lang.Runtime getRuntime()>"
"<android.view.View: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>","<android.view.View: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>"
"<java.util.concurrent.LinkedBlockingQueue: boolean retainAll(java.util.Collection)>","<java.util.concurrent.LinkedBlockingQueue: boolean retainAll(java.util.Collection)>"
"<java.time.ZonedDateTime: void <init>()>","<java.time.ZonedDateTime: void <init>()>"
"<java.lang.String: int codePointCount(int,int)>","<java.lang.String: int codePointCount(int,int)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.Math: int addExact(int,int)>","<java.lang.Math: int addExact(int,int)>"
"<java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>","<java.util.jar.Attributes: java.lang.Object remove(java.lang.Object)>"
"<android.widget.Toolbar: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.graphics.Insets: android.graphics.Insets min(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets min(android.graphics.Insets,android.graphics.Insets)>"
"<java.util.function.LongConsumer: void accept(long)>","<java.util.function.LongConsumer: void accept(long)>"
"<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit[] values()>","<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit[] values()>"
"<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>","<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>"
"<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>","<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>"
"<android.app.ActionBar: void setHideOnContentScrollEnabled(boolean)>","<android.app.ActionBar: void setHideOnContentScrollEnabled(boolean)>"
"<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.drawable.Icon)>"
"<java.util.AbstractMap: void clear()>","<java.util.AbstractMap: void clear()>"
"<io.flutter.plugins.webviewflutter.f1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.f1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.content.Loader: void stopLoading()>","<android.content.Loader: void stopLoading()>"
"<java.net.SocketImpl: java.io.InputStream getInputStream()>","<java.net.SocketImpl: java.io.InputStream getInputStream()>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.app.Service: void onTaskRemoved(android.content.Intent)>","<android.app.Service: void onTaskRemoved(android.content.Intent)>"
"<java.time.LocalDate: java.time.LocalDate now(java.time.ZoneId)>","<java.time.LocalDate: java.time.LocalDate now(java.time.ZoneId)>"
"<java.time.OffsetTime: java.time.OffsetTime withHour(int)>","<java.time.OffsetTime: java.time.OffsetTime withHour(int)>"
"<android.util.SizeF: java.lang.String toString()>","<android.util.SizeF: java.lang.String toString()>"
"<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>","<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>"
"<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>","<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>"
"<android.os.Messenger: void <init>(android.os.IBinder)>","<android.os.Messenger: void <init>(android.os.IBinder)>"
"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>","<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>"
"<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])>","<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle setVerificationText(java.lang.CharSequence)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle setVerificationText(java.lang.CharSequence)>"
"<android.content.ContentResolver$MimeTypeInfo: void <init>()>","<android.content.ContentResolver$MimeTypeInfo: void <init>()>"
"<android.graphics.fonts.FontVariationAxis: int hashCode()>","<android.graphics.fonts.FontVariationAxis: int hashCode()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.concurrent.Future: boolean cancel(boolean)>","<java.util.concurrent.Future: boolean cancel(boolean)>"
"<android.widget.PopupWindow: boolean isOutsideTouchable()>","<android.widget.PopupWindow: boolean isOutsideTouchable()>"
"<android.widget.TextView: int getHyphenationFrequency()>","<android.widget.TextView: int getHyphenationFrequency()>"
"<android.graphics.Path: void moveTo(float,float)>","<android.graphics.Path: void moveTo(float,float)>"
"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>","<java.lang.Boolean: boolean parseBoolean(java.lang.String)>"
"<android.graphics.Path: void close()>","<android.graphics.Path: void close()>"
"<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int,int)>","<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int,int)>"
"<android.app.Activity: void onWindowFocusChanged(boolean)>","<android.app.Activity: void onWindowFocusChanged(boolean)>"
"<android.app.Activity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>","<android.app.Activity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>"
"<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>","<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>"
"<java.lang.SecurityManager: java.lang.Object getSecurityContext()>","<java.lang.SecurityManager: java.lang.Object getSecurityContext()>"
"<java.time.LocalTime: int hashCode()>","<java.time.LocalTime: int hashCode()>"
"<android.media.session.PlaybackState: long getPosition()>","<android.media.session.PlaybackState: long getPosition()>"
"<android.content.res.ColorStateList: int getColorForState(int[],int)>","<android.content.res.ColorStateList: int getColorForState(int[],int)>"
"<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>","<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>"
"<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>","<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>"
"<android.graphics.Insets: java.lang.String toString()>","<android.graphics.Insets: java.lang.String toString()>"
"<android.view.ViewGroup: void scheduleLayoutAnimation()>","<android.view.ViewGroup: void scheduleLayoutAnimation()>"
"<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<java.lang.ref.WeakReference: void <init>(java.lang.Object)>","<java.lang.ref.WeakReference: void <init>(java.lang.Object)>"
"<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>","<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoLocalDate: java.time.chrono.Chronology getChronology()>"
"<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>"
"<android.content.ClipData: java.lang.String toString()>","<android.content.ClipData: java.lang.String toString()>"
"<java.util.Calendar: void computeFields()>","<java.util.Calendar: void computeFields()>"
"<android.content.ContentProvider: void restoreCallingIdentity(android.content.ContentProvider$CallingIdentity)>","<android.content.ContentProvider: void restoreCallingIdentity(android.content.ContentProvider$CallingIdentity)>"
"<android.graphics.Paint: float getTextSize()>","<android.graphics.Paint: float getTextSize()>"
"<android.os.VibrationAttributes$Builder: void <init>()>","<android.os.VibrationAttributes$Builder: void <init>()>"
"<java.util.zip.ZipException: void <init>(java.lang.String)>","<java.util.zip.ZipException: void <init>(java.lang.String)>"
"<java.lang.Byte: java.lang.String toString(byte)>","<java.lang.Byte: java.lang.String toString(byte)>"
"<android.content.Intent: short getShortExtra(java.lang.String,short)>","<android.content.Intent: short getShortExtra(java.lang.String,short)>"
"<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>","<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>"
"<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>","<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>"
"<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>","<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>"
"<java.util.MissingResourceException: java.lang.String getClassName()>","<java.util.MissingResourceException: java.lang.String getClassName()>"
"<android.graphics.Path$Direction: void <init>(java.lang.String,int)>","<android.graphics.Path$Direction: void <init>(java.lang.String,int)>"
"<android.view.translation.ViewTranslationCallback: boolean onClearTranslation(android.view.View)>","<android.view.translation.ViewTranslationCallback: boolean onClearTranslation(android.view.View)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>"
"<java.net.URLConnection: int getConnectTimeout()>","<java.net.URLConnection: int getConnectTimeout()>"
"<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)>"
"<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>","<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>"
"<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>","<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setSystemFallback(java.lang.String)>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setSystemFallback(java.lang.String)>"
"<android.transition.Transition: android.transition.Transition clone()>","<android.transition.Transition: android.transition.Transition clone()>"
"<java.nio.CharBuffer: java.util.stream.IntStream chars()>","<java.nio.CharBuffer: java.util.stream.IntStream chars()>"
"<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>","<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[])>"
"<java.nio.CharBuffer: java.nio.CharBuffer append(char)>","<java.nio.CharBuffer: java.nio.CharBuffer append(char)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)>"
"<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>","<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>"
"<java.util.stream.LongStream: boolean allMatch(java.util.function.LongPredicate)>","<java.util.stream.LongStream: boolean allMatch(java.util.function.LongPredicate)>"
"<android.widget.Adapter: java.lang.CharSequence[] getAutofillOptions()>","<android.widget.Adapter: java.lang.CharSequence[] getAutofillOptions()>"
"<android.widget.AbsListView: void setAdapter(android.widget.Adapter)>","<android.widget.AbsListView: void setAdapter(android.widget.Adapter)>"
"<java.util.Arrays: int binarySearch(char[],int,int,char)>","<java.util.Arrays: int binarySearch(char[],int,int,char)>"
"<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>","<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>"
"<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>"
"<android.graphics.Color: int rgb(int,int,int)>","<android.graphics.Color: int rgb(int,int,int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder addPerson(java.lang.String)>","<android.app.Notification$Builder: android.app.Notification$Builder addPerson(java.lang.String)>"
"<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Canvas: void drawARGB(int,int,int,int)>","<android.graphics.Canvas: void drawARGB(int,int,int,int)>"
"<android.content.res.Resources: java.lang.String[] getStringArray(int)>","<android.content.res.Resources: java.lang.String[] getStringArray(int)>"
"<java.time.LocalDate: java.time.LocalDate minusDays(long)>","<java.time.LocalDate: java.time.LocalDate minusDays(long)>"
"<android.text.Layout: android.text.Layout$Alignment getAlignment()>","<android.text.Layout: android.text.Layout$Alignment getAlignment()>"
"<android.view.animation.Animation: void initialize(int,int,int,int)>","<android.view.animation.Animation: void initialize(int,int,int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>"
"<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>"
"<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>","<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>"
"<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>","<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>"
"<android.os.VibrationAttributes: java.lang.String toString()>","<android.os.VibrationAttributes: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)>"
"<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>","<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>"
"<android.text.Spanned: int getSpanFlags(java.lang.Object)>","<android.text.Spanned: int getSpanFlags(java.lang.Object)>"
"<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>","<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>"
"<android.view.Choreographer$FrameData: long getFrameTimeNanos()>","<android.view.Choreographer$FrameData: long getFrameTimeNanos()>"
"<android.view.textclassifier.TextClassification: void <init>()>","<android.view.textclassifier.TextClassification: void <init>()>"
"<android.media.ImageReader$Builder: android.media.ImageReader build()>","<android.media.ImageReader$Builder: android.media.ImageReader build()>"
"<android.content.Context: void revokeSelfPermissionOnKill(java.lang.String)>","<android.content.Context: void revokeSelfPermissionOnKill(java.lang.String)>"
"<android.content.Context: int getWallpaperDesiredMinimumWidth()>","<android.content.Context: int getWallpaperDesiredMinimumWidth()>"
"<java.nio.FloatBuffer: java.nio.ByteOrder order()>","<java.nio.FloatBuffer: java.nio.ByteOrder order()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>"
"<java.util.concurrent.locks.LockSupport: void park()>","<java.util.concurrent.locks.LockSupport: void park()>"
"<java.util.concurrent.CopyOnWriteArrayList: void clear()>","<java.util.concurrent.CopyOnWriteArrayList: void clear()>"
"<java.time.Instant: java.time.Instant minusMillis(long)>","<java.time.Instant: java.time.Instant minusMillis(long)>"
"<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int)>","<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int)>"
"<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>","<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>"
"<android.view.View: int getMeasuredHeight()>","<android.view.View: int getMeasuredHeight()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])>","<android.app.Notification$Builder: android.app.Notification$Builder setVibrate(long[])>"
"<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()>","<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()>"
"<android.view.SurfaceView: void dispatchDraw(android.graphics.Canvas)>","<android.view.SurfaceView: void dispatchDraw(android.graphics.Canvas)>"
"<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>","<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>"
"<android.graphics.Canvas: void drawColor(long,android.graphics.BlendMode)>","<android.graphics.Canvas: void drawColor(long,android.graphics.BlendMode)>"
"<android.view.Window$Callback: void onDetachedFromWindow()>","<android.view.Window$Callback: void onDetachedFromWindow()>"
"<android.content.pm.ModuleInfo: void <init>()>","<android.content.pm.ModuleInfo: void <init>()>"
"<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>","<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable)>"
"<android.app.Fragment: void onDestroy()>","<android.app.Fragment: void onDestroy()>"
"<java.net.DatagramSocket: void <init>()>","<java.net.DatagramSocket: void <init>()>"
"<android.os.PersistableBundle: void <clinit>()>","<android.os.PersistableBundle: void <clinit>()>"
"<java.lang.Float: java.lang.String toHexString(float)>","<java.lang.Float: java.lang.String toHexString(float)>"
"<android.app.Activity: boolean isActivityTransitionRunning()>","<android.app.Activity: boolean isActivityTransitionRunning()>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>"
"<java.lang.Math: long multiplyHigh(long,long)>","<java.lang.Math: long multiplyHigh(long,long)>"
"<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>"
"<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>","<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setVisible(int,boolean)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setVisible(int,boolean)>"
"<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.webkit.WebSettings$LayoutAlgorithm: void <init>(java.lang.String,int)>","<android.webkit.WebSettings$LayoutAlgorithm: void <init>(java.lang.String,int)>"
"<android.webkit.WebSettings: boolean supportMultipleWindows()>","<android.webkit.WebSettings: boolean supportMultipleWindows()>"
"<android.view.animation.Animation$Description: void <init>()>","<android.view.animation.Animation$Description: void <init>()>"
"<java.io.ByteArrayOutputStream: int size()>","<java.io.ByteArrayOutputStream: int size()>"
"<android.graphics.Paint: int getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)>","<android.graphics.Paint: int getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)>"
"<java.util.concurrent.BlockingQueue: int remainingCapacity()>","<java.util.concurrent.BlockingQueue: int remainingCapacity()>"
"<java.lang.reflect.Type: java.lang.String getTypeName()>","<java.lang.reflect.Type: java.lang.String getTypeName()>"
"<android.media.MediaMetadata: void writeToParcel(android.os.Parcel,int)>","<android.media.MediaMetadata: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<android.view.Window: void addFlags(int)>","<android.view.Window: void addFlags(int)>"
"<android.util.ArrayMap: boolean containsAll(java.util.Collection)>","<android.util.ArrayMap: boolean containsAll(java.util.Collection)>"
"<android.view.inputmethod.EditorBoundsInfo: int hashCode()>","<android.view.inputmethod.EditorBoundsInfo: int hashCode()>"
"<android.webkit.WebView$PictureListener: void onNewPicture(android.webkit.WebView,android.graphics.Picture)>","<android.webkit.WebView$PictureListener: void onNewPicture(android.webkit.WebView,android.graphics.Picture)>"
"<java.time.Period: java.time.Period withMonths(int)>","<java.time.Period: java.time.Period withMonths(int)>"
"<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)>"
"<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>","<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>"
"<android.view.View: void setVerticalScrollbarPosition(int)>","<android.view.View: void setVerticalScrollbarPosition(int)>"
"<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>"
"<android.view.accessibility.AccessibilityEvent: void setEventType(int)>","<android.view.accessibility.AccessibilityEvent: void setEventType(int)>"
"<java.time.OffsetTime: java.time.OffsetTime withNano(int)>","<java.time.OffsetTime: java.time.OffsetTime withNano(int)>"
"<android.widget.TextView: void setTextAppearance(android.content.Context,int)>","<android.widget.TextView: void setTextAppearance(android.content.Context,int)>"
"<android.graphics.ImageDecoder: void setAllocator(int)>","<android.graphics.ImageDecoder: void setAllocator(int)>"
"<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>","<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setModelName(java.lang.String)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setModelName(java.lang.String)>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder putLocale(android.icu.util.ULocale,float)>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder putLocale(android.icu.util.ULocale,float)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)>"
"<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>","<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>"
"<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>","<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>"
"<android.view.inputmethod.BaseInputConnection: boolean performContextMenuAction(int)>","<android.view.inputmethod.BaseInputConnection: boolean performContextMenuAction(int)>"
"<android.view.View: android.graphics.drawable.Drawable getBackground()>","<android.view.View: android.graphics.drawable.Drawable getBackground()>"
"<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.content.ContextWrapper: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.ContextWrapper: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.os.UserHandle: int hashCode()>","<android.os.UserHandle: int hashCode()>"
"<android.widget.TextView: void setTextScaleX(float)>","<android.widget.TextView: void setTextScaleX(float)>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],double)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],double)>"
"<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>","<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>"
"<java.nio.file.LinkOption: java.nio.file.LinkOption valueOf(java.lang.String)>","<java.nio.file.LinkOption: java.nio.file.LinkOption valueOf(java.lang.String)>"
"<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>"
"<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>","<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>"
"<java.util.Arrays: void fill(int[],int,int,int)>","<java.util.Arrays: void fill(int[],int,int,int)>"
"<android.database.sqlite.SQLiteDatabase$CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>","<android.database.sqlite.SQLiteDatabase$CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>"
"<android.hardware.display.DisplayManager: int getMatchContentFrameRateUserPreference()>","<android.hardware.display.DisplayManager: int getMatchContentFrameRateUserPreference()>"
"<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>","<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>"
"<java.time.Instant: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View: float getLeftFadingEdgeStrength()>","<android.view.View: float getLeftFadingEdgeStrength()>"
"<android.os.Parcel: void writeSizeF(android.util.SizeF)>","<android.os.Parcel: void writeSizeF(android.util.SizeF)>"
"<android.hardware.SyncFence: long getSignalTime()>","<android.hardware.SyncFence: long getSignalTime()>"
"<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>","<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>"
"<android.view.Display: int getOrientation()>","<android.view.Display: int getOrientation()>"
"<android.content.Loader: java.lang.String toString()>","<android.content.Loader: java.lang.String toString()>"
"<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>","<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>"
"<android.os.Parcel: double readDouble()>","<android.os.Parcel: double readDouble()>"
"<android.view.textclassifier.TextClassification: android.content.Intent getIntent()>","<android.view.textclassifier.TextClassification: android.content.Intent getIntent()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordEndIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordEndIndex(int)>"
"<android.view.inputmethod.TextAttribute: java.util.List getTextConversionSuggestions()>","<android.view.inputmethod.TextAttribute: java.util.List getTextConversionSuggestions()>"
"<android.graphics.RectF: void round(android.graphics.Rect)>","<android.graphics.RectF: void round(android.graphics.Rect)>"
"<android.graphics.Rect: void readFromParcel(android.os.Parcel)>","<android.graphics.Rect: void readFromParcel(android.os.Parcel)>"
"<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>","<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>"
"<java.util.stream.Stream: java.lang.Object collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>","<java.util.stream.Stream: java.lang.Object collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>"
"<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>","<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>"
"<android.app.Notification$WearableExtender: boolean getStartScrollBottom()>","<android.app.Notification$WearableExtender: boolean getStartScrollBottom()>"
"<java.lang.Boolean: void <init>(java.lang.String)>","<java.lang.Boolean: void <init>(java.lang.String)>"
"<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>","<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>"
"<android.webkit.PermissionRequest: java.lang.String[] getResources()>","<android.webkit.PermissionRequest: java.lang.String[] getResources()>"
"<java.lang.Character: boolean isSurrogate(char)>","<java.lang.Character: boolean isSurrogate(char)>"
"<android.app.Activity: void setMediaController(android.media.session.MediaController)>","<android.app.Activity: void setMediaController(android.media.session.MediaController)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff$Mode)>"
"<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>","<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>"
"<android.widget.ImageView: void setMaxHeight(int)>","<android.widget.ImageView: void setMaxHeight(int)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>"
"<java.lang.Double: int hashCode(double)>","<java.lang.Double: int hashCode(double)>"
"<java.time.zone.ZoneOffsetTransition: void <init>()>","<java.time.zone.ZoneOffsetTransition: void <init>()>"
"<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()>","<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()>"
"<java.time.temporal.TemporalAmount: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.temporal.TemporalAmount: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<android.text.Layout$Alignment: void <init>(java.lang.String,int)>","<android.text.Layout$Alignment: void <init>(java.lang.String,int)>"
"<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>","<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>","<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>"
"<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>"
"<java.util.ArrayDeque: java.lang.Object poll()>","<java.util.ArrayDeque: java.lang.Object poll()>"
"<android.widget.AbsListView: void setTextFilterEnabled(boolean)>","<android.widget.AbsListView: void setTextFilterEnabled(boolean)>"
"<java.lang.System: void <init>()>","<java.lang.System: void <init>()>"
"<android.content.pm.ModuleInfo: int hashCode()>","<android.content.pm.ModuleInfo: int hashCode()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>"
"<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>","<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>"
"<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>","<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>"
"<android.database.SQLException: void <init>(java.lang.String,java.lang.Throwable)>","<android.database.SQLException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>","<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>"
"<android.graphics.Canvas: void drawColor(long)>","<android.graphics.Canvas: void drawColor(long)>"
"<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan build()>","<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan build()>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setId(java.lang.String)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setId(java.lang.String)>"
"<android.view.ViewStructure: void setClickable(boolean)>","<android.view.ViewStructure: void setClickable(boolean)>"
"<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>","<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>","<android.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedWriterThreads()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedWriterThreads()>"
"<android.graphics.Outline: boolean canClip()>","<android.graphics.Outline: boolean canClip()>"
"<java.time.DayOfWeek: int getValue()>","<java.time.DayOfWeek: int getValue()>"
"<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>"
"<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>","<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>"
"<android.graphics.Paint: void set(android.graphics.Paint)>","<android.graphics.Paint: void set(android.graphics.Paint)>"
"<android.view.MotionEvent: float getHistoricalPressure(int)>","<android.view.MotionEvent: float getHistoricalPressure(int)>"
"<android.view.View: android.view.PointerIcon getPointerIcon()>","<android.view.View: android.view.PointerIcon getPointerIcon()>"
"<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>","<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>"
"<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()>","<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()>"
"<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>","<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>"
"<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.lang.Object)>"
"<android.content.pm.PackageInfo: void <init>()>","<android.content.pm.PackageInfo: void <init>()>"
"<android.content.MutableContextWrapper: void <init>(android.content.Context)>","<android.content.MutableContextWrapper: void <init>(android.content.Context)>"
"<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>","<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>"
"<java.time.LocalTime: java.time.LocalTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.LocalTime: java.time.LocalTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<java.util.LongSummaryStatistics: java.lang.String toString()>","<java.util.LongSummaryStatistics: java.lang.String toString()>"
"<java.nio.ByteBuffer: java.nio.Buffer flip()>","<java.nio.ByteBuffer: java.nio.Buffer flip()>"
"<android.graphics.ColorSpace: int getId()>","<android.graphics.ColorSpace: int getId()>"
"<android.database.sqlite.SQLiteDatabase: void finalize()>","<android.database.sqlite.SQLiteDatabase: void finalize()>"
"<java.text.DateFormat: void <init>()>","<java.text.DateFormat: void <init>()>"
"<android.view.SurfaceControl: void release()>","<android.view.SurfaceControl: void release()>"
"<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>","<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>"
"<java.nio.LongBuffer: long[] array()>","<java.nio.LongBuffer: long[] array()>"
"<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>"
"<android.graphics.Paint: void clearShadowLayer()>","<android.graphics.Paint: void clearShadowLayer()>"
"<android.text.PrecomputedText: int getParagraphCount()>","<android.text.PrecomputedText: int getParagraphCount()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>","<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>"
"<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()>","<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()>"
"<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration$ParallelCombination addVibrator(int,android.os.VibrationEffect)>","<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration$ParallelCombination addVibrator(int,android.os.VibrationEffect)>"
"<java.time.ZonedDateTime: java.lang.String toString()>","<java.time.ZonedDateTime: java.lang.String toString()>"
"<android.webkit.WebView: void clearClientCertPreferences(java.lang.Runnable)>","<android.webkit.WebView: void clearClientCertPreferences(java.lang.Runnable)>"
"<android.webkit.WebView: void clearCache(boolean)>","<android.webkit.WebView: void clearCache(boolean)>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.widget.RemoteViews: void <init>(java.util.Map)>","<android.widget.RemoteViews: void <init>(java.util.Map)>"
"<java.io.PrintWriter: void write(int)>","<java.io.PrintWriter: void write(int)>"
"<android.text.TextUtils: void <init>()>","<android.text.TextUtils: void <init>()>"
"<android.view.textclassifier.TextSelection: java.lang.String getId()>","<android.view.textclassifier.TextSelection: java.lang.String getId()>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>","<android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>"
"<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>","<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>"
"<java.util.Date: java.lang.Object clone()>","<java.util.Date: java.lang.Object clone()>"
"<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>","<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>"
"<android.content.OperationApplicationException: void <init>(int)>","<android.content.OperationApplicationException: void <init>(int)>"
"<android.widget.ListPopupWindow: void dismiss()>","<android.widget.ListPopupWindow: void dismiss()>"
"<android.app.Notification$Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()>","<android.app.Notification$Action: android.app.RemoteInput[] getDataOnlyRemoteInputs()>"
"<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>","<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Queue: java.lang.Object peek()>","<java.util.Queue: java.lang.Object peek()>"
"<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>","<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>"
"<android.text.Layout: void increaseWidthTo(int)>","<android.text.Layout: void increaseWidthTo(int)>"
"<android.media.session.MediaSessionManager: void <init>()>","<android.media.session.MediaSessionManager: void <init>()>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>","<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>"
"<java.util.Date: int hashCode()>","<java.util.Date: int hashCode()>"
"<android.graphics.Color: long convert(long,android.graphics.ColorSpace$Connector)>","<android.graphics.Color: long convert(long,android.graphics.ColorSpace$Connector)>"
"<android.util.AttributeSet: java.lang.String getAttributeValue(int)>","<android.util.AttributeSet: java.lang.String getAttributeValue(int)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>","<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>"
"<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)>","<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)>"
"<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>"
"<java.net.URLConnection: java.lang.String getContentType()>","<java.net.URLConnection: java.lang.String getContentType()>"
"<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>","<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>"
"<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>","<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>"
"<android.os.CombinedVibration: android.os.CombinedVibration$ParallelCombination startParallel()>","<android.os.CombinedVibration: android.os.CombinedVibration$ParallelCombination startParallel()>"
"<android.content.res.AssetManager: void finalize()>","<android.content.res.AssetManager: void finalize()>"
"<android.os.Parcel: int dataPosition()>","<android.os.Parcel: int dataPosition()>"
"<android.graphics.Bitmap: void <clinit>()>","<android.graphics.Bitmap: void <clinit>()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>"
"<android.content.pm.InstrumentationInfo: java.lang.String toString()>","<android.content.pm.InstrumentationInfo: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>"
"<java.lang.ClassNotFoundException: java.lang.Throwable getException()>","<java.lang.ClassNotFoundException: java.lang.Throwable getException()>"
"<android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>","<android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>"
"<javax.security.auth.x500.X500Principal: java.lang.String toString()>","<javax.security.auth.x500.X500Principal: java.lang.String toString()>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: void reset()>","<android.view.inputmethod.CursorAnchorInfo$Builder: void reset()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>","<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>"
"<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)>","<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)>"
"<java.util.Arrays: void parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)>","<java.util.Arrays: void parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)>"
"<java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>"
"<java.lang.reflect.AccessibleObject: boolean isAccessible()>","<java.lang.reflect.AccessibleObject: boolean isAccessible()>"
"<android.widget.AbsListView: boolean showContextMenu()>","<android.widget.AbsListView: boolean showContextMenu()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: void lazySet(java.lang.Object,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: void lazySet(java.lang.Object,long)>"
"<android.view.animation.Animation: void setRepeatMode(int)>","<android.view.animation.Animation: void setRepeatMode(int)>"
"<java.nio.channels.Channel: boolean isOpen()>","<java.nio.channels.Channel: boolean isOpen()>"
"<android.database.Cursor: boolean isClosed()>","<android.database.Cursor: boolean isClosed()>"
"<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>","<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>"
"<java.net.SocketImpl: void connect(java.lang.String,int)>","<java.net.SocketImpl: void connect(java.lang.String,int)>"
"<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>"
"<java.time.Duration: long toDays()>","<java.time.Duration: long toDays()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintAvoidBackgroundClipping(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintAvoidBackgroundClipping(boolean)>"
"<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence)>"
"<java.util.concurrent.ThreadLocalRandom: double nextDouble(double)>","<java.util.concurrent.ThreadLocalRandom: double nextDouble(double)>"
"<java.time.LocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.app.Fragment: void onTrimMemory(int)>","<android.app.Fragment: void onTrimMemory(int)>"
"<java.net.URLStreamHandler: int getDefaultPort()>","<java.net.URLStreamHandler: int getDefaultPort()>"
"<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()>","<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()>"
"<android.util.SparseIntArray: java.lang.String toString()>","<android.util.SparseIntArray: java.lang.String toString()>"
"<java.lang.Character$UnicodeBlock: void <init>()>","<java.lang.Character$UnicodeBlock: void <init>()>"
"<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>","<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>"
"<android.view.Window: void setDecorFitsSystemWindows(boolean)>","<android.view.Window: void setDecorFitsSystemWindows(boolean)>"
"<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>","<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>"
"<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()>","<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedReaderThreads()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedReaderThreads()>"
"<android.print.PageRange: int describeContents()>","<android.print.PageRange: int describeContents()>"
"<java.util.Random: java.util.stream.DoubleStream doubles()>","<java.util.Random: java.util.stream.DoubleStream doubles()>"
"<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()>","<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()>"
"<org.json.JSONArray: org.json.JSONArray put(int,boolean)>","<org.json.JSONArray: org.json.JSONArray put(int,boolean)>"
"<java.util.Comparator: java.util.Comparator naturalOrder()>","<java.util.Comparator: java.util.Comparator naturalOrder()>"
"<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>","<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>"
"<java.util.Map: java.util.Map ofEntries(java.util.Map$Entry[])>","<java.util.Map: java.util.Map ofEntries(java.util.Map$Entry[])>"
"<android.app.ActionBar: void setTitle(java.lang.CharSequence)>","<android.app.ActionBar: void setTitle(java.lang.CharSequence)>"
"<android.text.SpannableStringBuilder: java.lang.Appendable append(java.lang.CharSequence)>","<android.text.SpannableStringBuilder: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.widget.ImageView: void onRtlPropertiesChanged(int)>","<android.widget.ImageView: void onRtlPropertiesChanged(int)>"
"<java.lang.ThreadGroup: void checkAccess()>","<java.lang.ThreadGroup: void checkAccess()>"
"<android.app.Fragment: void setRetainInstance(boolean)>","<android.app.Fragment: void setRetainInstance(boolean)>"
"<java.lang.reflect.Modifier: int parameterModifiers()>","<java.lang.reflect.Modifier: int parameterModifiers()>"
"<java.io.Reader: boolean markSupported()>","<java.io.Reader: boolean markSupported()>"
"<java.lang.Appendable: java.lang.Appendable append(char)>","<java.lang.Appendable: java.lang.Appendable append(char)>"
"<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>"
"<android.widget.AbsListView: void onFilterComplete(int)>","<android.widget.AbsListView: void onFilterComplete(int)>"
"<android.text.style.TtsSpan$MeasureBuilder: void <init>()>","<android.text.style.TtsSpan$MeasureBuilder: void <init>()>"
"<java.util.Collection: boolean remove(java.lang.Object)>","<java.util.Collection: boolean remove(java.lang.Object)>"
"<java.lang.Math: double toRadians(double)>","<java.lang.Math: double toRadians(double)>"
"<android.app.Fragment: boolean getRetainInstance()>","<android.app.Fragment: boolean getRetainInstance()>"
"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>","<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>"
"<java.lang.reflect.Field: float getFloat(java.lang.Object)>","<java.lang.reflect.Field: float getFloat(java.lang.Object)>"
"<java.time.temporal.TemporalUnit: boolean isDurationEstimated()>","<java.time.temporal.TemporalUnit: boolean isDurationEstimated()>"
"<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<java.lang.StringBuilder: void ensureCapacity(int)>","<java.lang.StringBuilder: void ensureCapacity(int)>"
"<android.widget.TextView: int getCompoundPaddingTop()>","<android.widget.TextView: int getCompoundPaddingTop()>"
"<android.webkit.PermissionRequest: android.net.Uri getOrigin()>","<android.webkit.PermissionRequest: android.net.Uri getOrigin()>"
"<java.lang.Math: int abs(int)>","<java.lang.Math: int abs(int)>"
"<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>","<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>"
"<android.content.pm.PermissionInfo: void <init>()>","<android.content.pm.PermissionInfo: void <init>()>"
"<java.util.Queue: java.lang.Object poll()>","<java.util.Queue: java.lang.Object poll()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()>"
"<java.util.Arrays: int compare(short[],short[])>","<java.util.Arrays: int compare(short[],short[])>"
"<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setExtension(java.lang.String)>","<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setExtension(java.lang.String)>"
"<android.view.textclassifier.TextClassifierEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent: void <clinit>()>"
"<java.math.BigInteger: void <init>(int,byte[])>","<java.math.BigInteger: void <init>(int,byte[])>"
"<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>","<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>"
"<java.util.ServiceLoader: java.util.Iterator iterator()>","<java.util.ServiceLoader: java.util.Iterator iterator()>"
"<android.widget.ListPopupWindow: int getAnimationStyle()>","<android.widget.ListPopupWindow: int getAnimationStyle()>"
"<android.view.translation.TranslationCapability: java.lang.String toString()>","<android.view.translation.TranslationCapability: java.lang.String toString()>"
"<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>","<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setReferenceTime(java.time.ZonedDateTime)>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setReferenceTime(java.time.ZonedDateTime)>"
"<java.security.cert.Certificate: void <init>(java.lang.String)>","<java.security.cert.Certificate: void <init>(java.lang.String)>"
"<android.view.RoundedCorner: boolean equals(java.lang.Object)>","<android.view.RoundedCorner: boolean equals(java.lang.Object)>"
"<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>","<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>"
"<java.nio.channels.spi.AbstractSelectionKey: void cancel()>","<java.nio.channels.spi.AbstractSelectionKey: void cancel()>"
"<java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>","<java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>"
"<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>","<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>"
"<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>","<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>"
"<android.graphics.Picture: void endRecording()>","<android.graphics.Picture: void endRecording()>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>","<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>"
"<android.view.ViewGroup: void onViewRemoved(android.view.View)>","<android.view.ViewGroup: void onViewRemoved(android.view.View)>"
"<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>","<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.IsoChronology: java.time.LocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>","<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>"
"<android.text.Layout: float getLineRight(int)>","<android.text.Layout: float getLineRight(int)>"
"<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>","<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>"
"<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>"
"<java.time.Period: java.time.Period plus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.Period plus(java.time.temporal.TemporalAmount)>"
"<java.nio.file.FileSystem: java.lang.Iterable getRootDirectories()>","<java.nio.file.FileSystem: java.lang.Iterable getRootDirectories()>"
"<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetAcquire(long,long)>","<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetAcquire(long,long)>"
"<java.time.LocalDateTime: void <clinit>()>","<java.time.LocalDateTime: void <clinit>()>"
"<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>","<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>"
"<android.app.FragmentManager: void popBackStack()>","<android.app.FragmentManager: void popBackStack()>"
"<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>","<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>"
"<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.view.View: int getLeftPaddingOffset()>","<android.view.View: int getLeftPaddingOffset()>"
"<android.view.translation.ViewTranslationResponse: android.view.translation.TranslationResponseValue getValue(java.lang.String)>","<android.view.translation.ViewTranslationResponse: android.view.translation.TranslationResponseValue getValue(java.lang.String)>"
"<android.app.PendingIntent: void <init>()>","<android.app.PendingIntent: void <init>()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>"
"<java.time.chrono.ChronoZonedDateTime: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoZonedDateTime: boolean equals(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnIndex(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnIndex(int)>"
"<android.view.animation.Animation: void <init>()>","<android.view.animation.Animation: void <init>()>"
"<android.view.textclassifier.TextClassification: java.lang.String getId()>","<android.view.textclassifier.TextClassification: java.lang.String getId()>"
"<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>"
"<android.app.Notification$CarExtender: android.app.Notification$Builder extend(android.app.Notification$Builder)>","<android.app.Notification$CarExtender: android.app.Notification$Builder extend(android.app.Notification$Builder)>"
"<android.hardware.HardwareBuffer: void close()>","<android.hardware.HardwareBuffer: void close()>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>"
"<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>","<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>"
"<java.net.SocketImpl: void create(boolean)>","<java.net.SocketImpl: void create(boolean)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest build()>","<android.content.SyncRequest$Builder: android.content.SyncRequest build()>"
"<android.widget.TextView: void setText(char[],int,int)>","<android.widget.TextView: void setText(char[],int,int)>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.graphics.Region: void <init>(android.graphics.Rect)>","<android.graphics.Region: void <init>(android.graphics.Rect)>"
"<java.util.List: boolean addAll(int,java.util.Collection)>","<java.util.List: boolean addAll(int,java.util.Collection)>"
"<android.graphics.drawable.Drawable: void invalidateSelf()>","<android.graphics.drawable.Drawable: void invalidateSelf()>"
"<java.nio.file.Path: int compareTo(java.nio.file.Path)>","<java.nio.file.Path: int compareTo(java.nio.file.Path)>"
"<android.graphics.Rect: int centerX()>","<android.graphics.Rect: int centerX()>"
"<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>"
"<android.view.ViewGroup: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>","<android.view.ViewGroup: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>"
"<java.time.LocalDate: void <clinit>()>","<java.time.LocalDate: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>"
"<android.view.FrameMetrics: long getMetric(int)>","<android.view.FrameMetrics: long getMetric(int)>"
"<android.content.Context: java.lang.String[] databaseList()>","<android.content.Context: java.lang.String[] databaseList()>"
"<java.lang.Object: boolean equals(java.lang.Object)>","<java.lang.Object: boolean equals(java.lang.Object)>"
"<android.content.ContextWrapper: android.content.ContextParams getParams()>","<android.content.ContextWrapper: android.content.ContextParams getParams()>"
"<android.app.assist.AssistContent: int describeContents()>","<android.app.assist.AssistContent: int describeContents()>"
"<java.lang.StringBuilder: int offsetByCodePoints(int,int)>","<java.lang.StringBuilder: int offsetByCodePoints(int,int)>"
"<android.app.ActivityManager$RunningTaskInfo: void <clinit>()>","<android.app.ActivityManager$RunningTaskInfo: void <clinit>()>"
"<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>","<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>"
"<android.os.Parcel: android.util.Size readSize()>","<android.os.Parcel: android.util.Size readSize()>"
"<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusColor()>","<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusColor()>"
"<java.io.ObjectOutputStream: void useProtocolVersion(int)>","<java.io.ObjectOutputStream: void useProtocolVersion(int)>"
"<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>","<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>"
"<android.graphics.RectF: void <init>(android.graphics.Rect)>","<android.graphics.RectF: void <init>(android.graphics.Rect)>"
"<java.lang.IllegalArgumentException: void <init>()>","<java.lang.IllegalArgumentException: void <init>()>"
"<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>","<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>"
"<android.net.Uri$Builder: java.lang.String toString()>","<android.net.Uri$Builder: java.lang.String toString()>"
"<android.view.View: void setNextFocusLeftId(int)>","<android.view.View: void setNextFocusLeftId(int)>"
"<java.time.OffsetTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.OffsetTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.text.style.TtsSpan: void writeToParcel(android.os.Parcel,int)>","<android.text.style.TtsSpan: void writeToParcel(android.os.Parcel,int)>"
"<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)>","<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)>"
"<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)>","<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)>"
"<android.media.session.MediaSession$Callback: void onCustomAction(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onCustomAction(java.lang.String,android.os.Bundle)>"
"<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>","<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>"
"<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>","<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>"
"<java.security.KeyException: void <init>(java.lang.Throwable)>","<java.security.KeyException: void <init>(java.lang.Throwable)>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>"
"<android.content.AttributionSource: java.lang.String getAttributionTag()>","<android.content.AttributionSource: java.lang.String getAttributionTag()>"
"<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>","<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>"
"<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(android.icu.util.ULocale)>","<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(android.icu.util.ULocale)>"
"<android.app.Activity: void stopLocalVoiceInteraction()>","<android.app.Activity: void stopLocalVoiceInteraction()>"
"<android.media.session.MediaController$TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)>"
"<java.time.ZonedDateTime: int getMonthValue()>","<java.time.ZonedDateTime: int getMonthValue()>"
"<android.graphics.ColorSpace$Model: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$Model: void <init>(java.lang.String,int)>"
"<android.content.pm.ModuleInfo: java.lang.String getPackageName()>","<android.content.pm.ModuleInfo: java.lang.String getPackageName()>"
"<android.app.Service: void onLowMemory()>","<android.app.Service: void onLowMemory()>"
"<android.view.WindowInsets$Side: void <init>()>","<android.view.WindowInsets$Side: void <init>()>"
"<android.content.res.Resources: void addLoaders(android.content.res.loader.ResourcesLoader[])>","<android.content.res.Resources: void addLoaders(android.content.res.loader.ResourcesLoader[])>"
"<java.util.Map: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.HashSet: void <init>()>","<java.util.HashSet: void <init>()>"
"<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()>","<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()>"
"<android.hardware.display.DeviceProductInfo: int getModelYear()>","<android.hardware.display.DeviceProductInfo: int getModelYear()>"
"<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>"
"<android.view.View: int getTextDirection()>","<android.view.View: int getTextDirection()>"
"<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>"
"<android.media.Image: long getTimestamp()>","<android.media.Image: long getTimestamp()>"
"<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>","<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>"
"<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>","<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>"
"<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>","<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>"
"<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>","<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>"
"<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>","<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>"
"<android.content.ContentValues: boolean isEmpty()>","<android.content.ContentValues: boolean isEmpty()>"
"<java.lang.Long: int compareTo(java.lang.Object)>","<java.lang.Long: int compareTo(java.lang.Object)>"
"<android.view.ViewGroup: void setPersistentDrawingCache(int)>","<android.view.ViewGroup: void setPersistentDrawingCache(int)>"
"<java.nio.file.Path: java.nio.file.Path getName(int)>","<java.nio.file.Path: java.nio.file.Path getName(int)>"
"<java.time.LocalTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.view.textservice.SentenceSuggestionsInfo: int describeContents()>","<android.view.textservice.SentenceSuggestionsInfo: int describeContents()>"
"<android.view.ActionProvider$VisibilityListener: void onActionProviderVisibilityChanged(boolean)>","<android.view.ActionProvider$VisibilityListener: void onActionProviderVisibilityChanged(boolean)>"
"<android.view.View: int getPaddingTop()>","<android.view.View: int getPaddingTop()>"
"<java.io.ByteArrayInputStream: void mark(int)>","<java.io.ByteArrayInputStream: void mark(int)>"
"<java.io.ObjectOutput: void write(byte[],int,int)>","<java.io.ObjectOutput: void write(byte[],int,int)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>"
"<io.flutter.plugins.webviewflutter.l2: void <init>(io.flutter.plugins.webviewflutter.m2,java.lang.String)>","<io.flutter.plugins.webviewflutter.l2: void <init>(io.flutter.plugins.webviewflutter.m2,java.lang.String)>"
"<android.graphics.RenderNode: boolean setUseCompositingLayer(boolean,android.graphics.Paint)>","<android.graphics.RenderNode: boolean setUseCompositingLayer(boolean,android.graphics.Paint)>"
"<java.util.UUID: java.util.UUID randomUUID()>","<java.util.UUID: java.util.UUID randomUUID()>"
"<android.graphics.Point: boolean equals(java.lang.Object)>","<android.graphics.Point: boolean equals(java.lang.Object)>"
"<android.content.IntentFilter: boolean hasDataType(java.lang.String)>","<android.content.IntentFilter: boolean hasDataType(java.lang.String)>"
"<android.graphics.drawable.Drawable: void clearColorFilter()>","<android.graphics.drawable.Drawable: void clearColorFilter()>"
"<org.json.JSONObject: java.lang.String optString(java.lang.String)>","<org.json.JSONObject: java.lang.String optString(java.lang.String)>"
"<u0.u: java.lang.Thread newThread(java.lang.Runnable)>","<u0.u: java.lang.Thread newThread(java.lang.Runnable)>"
"<java.util.ArrayDeque: void clear()>","<java.util.ArrayDeque: void clear()>"
"<android.graphics.Color: boolean isSrgb()>","<android.graphics.Color: boolean isSrgb()>"
"<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>"
"<java.util.Locale: java.lang.String getScript()>","<java.util.Locale: java.lang.String getScript()>"
"<java.net.InetAddress: java.net.InetAddress getLocalHost()>","<java.net.InetAddress: java.net.InetAddress getLocalHost()>"
"<android.widget.Scroller: int getStartY()>","<android.widget.Scroller: int getStartY()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>"
"<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)>","<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)>"
"<android.view.inputmethod.ExtractedText: void <clinit>()>","<android.view.inputmethod.ExtractedText: void <clinit>()>"
"<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,java.util.function.Function)>","<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,java.util.function.Function)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)>"
"<android.util.SparseIntArray: void append(int,int)>","<android.util.SparseIntArray: void append(int,int)>"
"<android.webkit.WebView: java.lang.CharSequence getAccessibilityClassName()>","<android.webkit.WebView: java.lang.CharSequence getAccessibilityClassName()>"
"<android.app.Person: boolean isImportant()>","<android.app.Person: boolean isImportant()>"
"<java.time.temporal.ValueRange: boolean isValidIntValue(long)>","<java.time.temporal.ValueRange: boolean isValidIntValue(long)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>"
"<android.view.textclassifier.SelectionEvent: int getEnd()>","<android.view.textclassifier.SelectionEvent: int getEnd()>"
"<android.graphics.RenderNode: int getAmbientShadowColor()>","<android.graphics.RenderNode: int getAmbientShadowColor()>"
"<android.view.animation.LayoutAnimationController: void setDelay(float)>","<android.view.animation.LayoutAnimationController: void setDelay(float)>"
"<java.time.temporal.ChronoField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.ChronoField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
"<java.lang.OutOfMemoryError: void <init>(java.lang.String)>","<java.lang.OutOfMemoryError: void <init>(java.lang.String)>"
"<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,int)>","<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,int)>"
"<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>","<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>"
"<java.lang.Byte: byte parseByte(java.lang.String)>","<java.lang.Byte: byte parseByte(java.lang.String)>"
"<android.graphics.Rect: java.lang.String toShortString()>","<android.graphics.Rect: java.lang.String toShortString()>"
"<android.graphics.Paint: int getHinting()>","<android.graphics.Paint: int getHinting()>"
"<java.util.function.IntSupplier: int getAsInt()>","<java.util.function.IntSupplier: int getAsInt()>"
"<java.text.CharacterIterator: char previous()>","<java.text.CharacterIterator: char previous()>"
"<java.util.LongSummaryStatistics: double getAverage()>","<java.util.LongSummaryStatistics: double getAverage()>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle forIncomingCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)>"
"<android.graphics.Typeface: int hashCode()>","<android.graphics.Typeface: int hashCode()>"
"<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>"
"<java.util.concurrent.TimeoutException: void <init>()>","<java.util.concurrent.TimeoutException: void <init>()>"
"<android.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>","<android.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>","<java.util.concurrent.CopyOnWriteArrayList: java.util.Spliterator spliterator()>"
"<java.lang.Character: boolean isJavaIdentifierStart(int)>","<java.lang.Character: boolean isJavaIdentifierStart(int)>"
"<java.nio.channels.CompletionHandler: void failed(java.lang.Throwable,java.lang.Object)>","<java.nio.channels.CompletionHandler: void failed(java.lang.Throwable,java.lang.Object)>"
"<java.time.temporal.Temporal: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.view.InputDevice: int getKeyboardType()>","<android.view.InputDevice: int getKeyboardType()>"
"<java.lang.Double: boolean isFinite(double)>","<java.lang.Double: boolean isFinite(double)>"
"<io.flutter.plugins.webviewflutter.x1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.x1: void a(java.lang.Object,y.a$e)>"
"<java.lang.Enum: int ordinal()>","<java.lang.Enum: int ordinal()>"
"<java.lang.Long: long max(long,long)>","<java.lang.Long: long max(long,long)>"
"<android.text.style.TtsSpan$TimeBuilder: void <init>(int,int)>","<android.text.style.TtsSpan$TimeBuilder: void <init>(int,int)>"
"<java.net.SocketOptions: java.lang.Object getOption(int)>","<java.net.SocketOptions: java.lang.Object getOption(int)>"
"<android.app.ActivityManager$RecentTaskInfo: void <clinit>()>","<android.app.ActivityManager$RecentTaskInfo: void <clinit>()>"
"<java.lang.reflect.Field: long getLong(java.lang.Object)>","<java.lang.reflect.Field: long getLong(java.lang.Object)>"
"<java.util.Arrays: int compareUnsigned(byte[],byte[])>","<java.util.Arrays: int compareUnsigned(byte[],byte[])>"
"<android.view.KeyEvent: boolean isCanceled()>","<android.view.KeyEvent: boolean isCanceled()>"
"<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>","<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>"
"<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)>","<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)>"
"<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()>","<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()>"
"<java.lang.Long: long highestOneBit(long)>","<java.lang.Long: long highestOneBit(long)>"
"<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>","<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>"
"<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>","<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>"
"<android.widget.Toolbar: void setTitle(int)>","<android.widget.Toolbar: void setTitle(int)>"
"<android.view.textclassifier.TextClassification$Request: android.os.LocaleList getDefaultLocales()>","<android.view.textclassifier.TextClassification$Request: android.os.LocaleList getDefaultLocales()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguageTag(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguageTag(java.lang.String)>"
"<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>","<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>"
"<java.time.format.TextStyle: void <init>(java.lang.String,int)>","<java.time.format.TextStyle: void <init>(java.lang.String,int)>"
"<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>","<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>"
"<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>","<java.util.TimeZone: boolean inDaylightTime(java.util.Date)>"
"<android.widget.PopupWindow: void dismiss()>","<android.widget.PopupWindow: void dismiss()>"
"<android.text.Editable: void setFilters(android.text.InputFilter[])>","<android.text.Editable: void setFilters(android.text.InputFilter[])>"
"<android.view.animation.Animation: int getZAdjustment()>","<android.view.animation.Animation: int getZAdjustment()>"
"<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>"
"<android.util.SparseIntArray: java.lang.Object clone()>","<android.util.SparseIntArray: java.lang.Object clone()>"
"<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()>","<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()>"
"<android.app.Fragment: android.content.Context getContext()>","<android.app.Fragment: android.content.Context getContext()>"
"<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>","<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
"<android.widget.AdapterView$OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>","<android.widget.AdapterView$OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>"
"<android.webkit.WebSettings: int getDefaultFixedFontSize()>","<android.webkit.WebSettings: int getDefaultFixedFontSize()>"
"<android.view.translation.TranslationResponseValue: java.lang.CharSequence getText()>","<android.view.translation.TranslationResponseValue: java.lang.CharSequence getText()>"
"<java.lang.Thread: void interrupt()>","<java.lang.Thread: void interrupt()>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAuthenticationRequired(boolean)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAuthenticationRequired(boolean)>"
"<java.util.function.IntBinaryOperator: int applyAsInt(int,int)>","<java.util.function.IntBinaryOperator: int applyAsInt(int,int)>"
"<java.util.stream.IntStream: java.util.stream.IntStream limit(long)>","<java.util.stream.IntStream: java.util.stream.IntStream limit(long)>"
"<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>","<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>"
"<android.app.Notification: android.app.Notification$BubbleMetadata getBubbleMetadata()>","<android.app.Notification: android.app.Notification$BubbleMetadata getBubbleMetadata()>"
"<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)>","<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)>"
"<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>","<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>"
"<java.net.URLConnection: void setIfModifiedSince(long)>","<java.net.URLConnection: void setIfModifiedSince(long)>"
"<java.nio.FloatBuffer: float get()>","<java.nio.FloatBuffer: float get()>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(java.lang.CharSequence)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(java.lang.CharSequence)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onCreated(int)>","<android.content.pm.PackageInstaller$SessionCallback: void onCreated(int)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordStartIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordStartIndex(int)>"
"<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>","<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>"
"<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest build()>","<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest build()>"
"<java.net.DatagramSocket: int getSendBufferSize()>","<java.net.DatagramSocket: int getSendBufferSize()>"
"<android.media.session.MediaSession$Callback: void onPlayFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPlayFromUri(android.net.Uri,android.os.Bundle)>"
"<java.util.PriorityQueue: boolean contains(java.lang.Object)>","<java.util.PriorityQueue: boolean contains(java.lang.Object)>"
"<android.graphics.ColorSpace: int hashCode()>","<android.graphics.ColorSpace: int hashCode()>"
"<android.view.translation.ViewTranslationResponse: java.lang.String toString()>","<android.view.translation.ViewTranslationResponse: java.lang.String toString()>"
"<android.media.session.MediaController$Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)>","<android.media.session.MediaController$Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)>"
"<android.graphics.Bitmap: byte[] getNinePatchChunk()>","<android.graphics.Bitmap: byte[] getNinePatchChunk()>"
"<android.webkit.WebViewClient: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequest)>","<android.webkit.WebViewClient: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequest)>"
"<java.util.ArrayList: java.lang.Object clone()>","<java.util.ArrayList: java.lang.Object clone()>"
"<android.view.textclassifier.TextLanguage$Request: int describeContents()>","<android.view.textclassifier.TextLanguage$Request: int describeContents()>"
"<android.view.ViewGroup: int getDescendantFocusability()>","<android.view.ViewGroup: int getDescendantFocusability()>"
"<io.flutter.plugins.webviewflutter.z2: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.z2: void a(java.lang.Object)>"
"<android.graphics.drawable.Drawable: int getIntrinsicHeight()>","<android.graphics.drawable.Drawable: int getIntrinsicHeight()>"
"<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>","<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>"
"<android.graphics.SurfaceTexture: void detachFromGLContext()>","<android.graphics.SurfaceTexture: void detachFromGLContext()>"
"<android.os.Build$VERSION: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>"
"<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>","<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>"
"<android.graphics.Region$Op: void <clinit>()>","<android.graphics.Region$Op: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <init>(int,java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <init>(int,java.lang.CharSequence)>"
"<java.nio.file.FileStore: long getUnallocatedSpace()>","<java.nio.file.FileStore: long getUnallocatedSpace()>"
"<android.app.FragmentManager: boolean executePendingTransactions()>","<android.app.FragmentManager: boolean executePendingTransactions()>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>"
"<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>","<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>"
"<java.security.Key: byte[] getEncoded()>","<java.security.Key: byte[] getEncoded()>"
"<android.media.session.PlaybackState: long getActions()>","<android.media.session.PlaybackState: long getActions()>"
"<android.os.Parcel: void writeIntArray(int[])>","<android.os.Parcel: void writeIntArray(int[])>"
"<java.io.ByteArrayInputStream: void <init>(byte[])>","<java.io.ByteArrayInputStream: void <init>(byte[])>"
"<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>","<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>"
"<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>","<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>"
"<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>","<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>"
"<java.lang.Double: double parseDouble(java.lang.String)>","<java.lang.Double: double parseDouble(java.lang.String)>"
"<android.widget.AbsListView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.AbsListView: java.lang.CharSequence getAccessibilityClassName()>"
"<java.time.Period: java.time.Period multipliedBy(int)>","<java.time.Period: java.time.Period multipliedBy(int)>"
"<java.util.Date: java.time.Instant toInstant()>","<java.util.Date: java.time.Instant toInstant()>"
"<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>","<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>"
"<android.content.res.Resources: void finishPreloading()>","<android.content.res.Resources: void finishPreloading()>"
"<android.widget.Toolbar: boolean hasExpandedActionView()>","<android.widget.Toolbar: boolean hasExpandedActionView()>"
"<io.flutter.plugins.webviewflutter.h3: void <clinit>()>","<io.flutter.plugins.webviewflutter.h3: void <clinit>()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>"
"<android.text.Layout: int getLineForVertical(int)>","<android.text.Layout: int getLineForVertical(int)>"
"<android.os.Parcel: void readStringList(java.util.List)>","<android.os.Parcel: void readStringList(java.util.List)>"
"<java.util.function.BiFunction: java.util.function.BiFunction andThen(java.util.function.Function)>","<java.util.function.BiFunction: java.util.function.BiFunction andThen(java.util.function.Function)>"
"<android.content.res.Configuration: int compareTo(java.lang.Object)>","<android.content.res.Configuration: int compareTo(java.lang.Object)>"
"<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>","<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>"
"<android.view.View: void onSizeChanged(int,int,int,int)>","<android.view.View: void onSizeChanged(int,int,int,int)>"
"<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>","<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>"
"<android.view.Menu: int size()>","<android.view.Menu: int size()>"
"<java.util.List: boolean remove(java.lang.Object)>","<java.util.List: boolean remove(java.lang.Object)>"
"<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri,int)>","<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri,int)>"
"<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>","<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>"
"<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>","<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)>"
"<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)>","<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)>"
"<android.content.pm.PackageInstaller$SessionParams: int describeContents()>","<android.content.pm.PackageInstaller$SessionParams: int describeContents()>"
"<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>","<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>"
"<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>","<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>"
"<android.hardware.Sensor: float getPower()>","<android.hardware.Sensor: float getPower()>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setLineBreakConfig(android.graphics.text.LineBreakConfig)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setLineBreakConfig(android.graphics.text.LineBreakConfig)>"
"<java.util.PriorityQueue: boolean remove(java.lang.Object)>","<java.util.PriorityQueue: boolean remove(java.lang.Object)>"
"<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>","<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>"
"<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration combine()>","<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration combine()>"
"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>","<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>"
"<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>","<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>"
"<android.widget.ListView: void smoothScrollByOffset(int)>","<android.widget.ListView: void smoothScrollByOffset(int)>"
"<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>","<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>"
"<java.nio.file.Path: java.nio.file.Path resolveSibling(java.lang.String)>","<java.nio.file.Path: java.nio.file.Path resolveSibling(java.lang.String)>"
"<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>","<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>"
"<android.database.Cursor: android.os.Bundle getExtras()>","<android.database.Cursor: android.os.Bundle getExtras()>"
"<java.util.Spliterator$OfInt: java.util.Spliterator$OfInt trySplit()>","<java.util.Spliterator$OfInt: java.util.Spliterator$OfInt trySplit()>"
"<android.view.MotionEvent: float getToolMajor(int)>","<android.view.MotionEvent: float getToolMajor(int)>"
"<java.util.Collection: boolean addAll(java.util.Collection)>","<java.util.Collection: boolean addAll(java.util.Collection)>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.AssetManager,java.lang.String)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.AssetManager,java.lang.String)>"
"<java.nio.channels.SelectionKey: boolean isWritable()>","<java.nio.channels.SelectionKey: boolean isWritable()>"
"<android.app.PendingIntent$CanceledException: void <init>()>","<android.app.PendingIntent$CanceledException: void <init>()>"
"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>","<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>"
"<java.nio.Buffer: java.nio.Buffer limit(int)>","<java.nio.Buffer: java.nio.Buffer limit(int)>"
"<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>","<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>"
"<android.content.DialogInterface$OnCancelListener: void onCancel(android.content.DialogInterface)>","<android.content.DialogInterface$OnCancelListener: void onCancel(android.content.DialogInterface)>"
"<java.util.ArrayList: java.lang.Object get(int)>","<java.util.ArrayList: java.lang.Object get(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayVariant(android.icu.util.ULocale)>"
"<android.print.PrintAttributes$Margins: boolean equals(java.lang.Object)>","<android.print.PrintAttributes$Margins: boolean equals(java.lang.Object)>"
"<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>"
"<android.graphics.Matrix: void <clinit>()>","<android.graphics.Matrix: void <clinit>()>"
"<android.animation.LayoutTransition: boolean isChangingLayout()>","<android.animation.LayoutTransition: boolean isChangingLayout()>"
"<java.net.URL: java.lang.String getProtocol()>","<java.net.URL: java.lang.String getProtocol()>"
"<java.util.Random: java.util.stream.DoubleStream doubles(long,double,double)>","<java.util.Random: java.util.stream.DoubleStream doubles(long,double,double)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>"
"<android.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>","<android.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: boolean tryLock()>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: boolean tryLock()>"
"<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>","<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>"
"<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>","<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>"
"<java.lang.Thread: boolean isInterrupted()>","<java.lang.Thread: boolean isInterrupted()>"
"<android.graphics.drawable.ColorDrawable: int getColor()>","<android.graphics.drawable.ColorDrawable: int getColor()>"
"<android.view.InputEvent: void <init>()>","<android.view.InputEvent: void <init>()>"
"<android.app.ActionBar: void setElevation(float)>","<android.app.ActionBar: void setElevation(float)>"
"<android.app.ActivityManager$TaskDescription: boolean equals(java.lang.Object)>","<android.app.ActivityManager$TaskDescription: boolean equals(java.lang.Object)>"
"<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>","<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>"
"<android.widget.AdapterView: void setAdapter(android.widget.Adapter)>","<android.widget.AdapterView: void setAdapter(android.widget.Adapter)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>"
"<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
"<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)>","<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)>"
"<android.view.InputDevice$MotionRange: float getFlat()>","<android.view.InputDevice$MotionRange: float getFlat()>"
"<android.view.View: void onAnimationStart()>","<android.view.View: void onAnimationStart()>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout build()>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout build()>"
"<android.widget.TextView: boolean getDefaultEditable()>","<android.widget.TextView: boolean getDefaultEditable()>"
"<java.time.OffsetDateTime: int getSecond()>","<java.time.OffsetDateTime: int getSecond()>"
"<io.flutter.plugins.webviewflutter.d3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.d3: void a(java.lang.Object)>"
"<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>"
"<org.json.JSONObject: long optLong(java.lang.String,long)>","<org.json.JSONObject: long optLong(java.lang.String,long)>"
"<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setLatestTimestamp(long)>","<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setLatestTimestamp(long)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>"
"<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>","<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfYear(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfYear(int)>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>","<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>"
"<android.os.Debug: int getThreadGcInvocationCount()>","<android.os.Debug: int getThreadGcInvocationCount()>"
"<android.content.Context: java.lang.String getSystemServiceName(java.lang.Class)>","<android.content.Context: java.lang.String getSystemServiceName(java.lang.Class)>"
"<android.view.ScrollCaptureSession: android.view.Surface getSurface()>","<android.view.ScrollCaptureSession: android.view.Surface getSurface()>"
"<android.view.WindowInsets$Type: int statusBars()>","<android.view.WindowInsets$Type: int statusBars()>"
"<android.widget.TextView: int getAutofillType()>","<android.widget.TextView: int getAutofillType()>"
"<android.app.Fragment: void setEnterSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Fragment: void setEnterSharedElementCallback(android.app.SharedElementCallback)>"
"<android.os.Parcel: int dataAvail()>","<android.os.Parcel: int dataAvail()>"
"<java.time.temporal.ChronoField: int checkValidIntValue(long)>","<java.time.temporal.ChronoField: int checkValidIntValue(long)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>"
"<android.graphics.RectF: void offset(float,float)>","<android.graphics.RectF: void offset(float,float)>"
"<android.widget.TextView: android.os.LocaleList getImeHintLocales()>","<android.widget.TextView: android.os.LocaleList getImeHintLocales()>"
"<android.view.ViewGroup: void detachViewFromParent(android.view.View)>","<android.view.ViewGroup: void detachViewFromParent(android.view.View)>"
"<java.time.format.DateTimeFormatter: java.util.Locale getLocale()>","<java.time.format.DateTimeFormatter: java.util.Locale getLocale()>"
"<java.io.InputStream: boolean markSupported()>","<java.io.InputStream: boolean markSupported()>"
"<android.content.Intent: void readFromParcel(android.os.Parcel)>","<android.content.Intent: void readFromParcel(android.os.Parcel)>"
"<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>","<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>"
"<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>","<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>"
"<java.util.Objects: boolean isNull(java.lang.Object)>","<java.util.Objects: boolean isNull(java.lang.Object)>"
"<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.util.LongSummaryStatistics: void <init>()>","<java.util.LongSummaryStatistics: void <init>()>"
"<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>","<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>"
"<android.window.OnBackInvokedDispatcher: void unregisterOnBackInvokedCallback(android.window.OnBackInvokedCallback)>","<android.window.OnBackInvokedDispatcher: void unregisterOnBackInvokedCallback(android.window.OnBackInvokedCallback)>"
"<java.net.URLConnection: void setUseCaches(boolean)>","<java.net.URLConnection: void setUseCaches(boolean)>"
"<android.view.MotionEvent: float getHistoricalX(int)>","<android.view.MotionEvent: float getHistoricalX(int)>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read()>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read()>"
"<android.media.session.MediaSession$Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>","<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence)>"
"<android.content.SharedPreferences: long getLong(java.lang.String,long)>","<android.content.SharedPreferences: long getLong(java.lang.String,long)>"
"<android.view.textclassifier.TextLinks$TextLinkSpan: void onClick(android.view.View)>","<android.view.textclassifier.TextLinks$TextLinkSpan: void onClick(android.view.View)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.widget.TextView: void setTextCursorDrawable(int)>","<android.widget.TextView: void setTextCursorDrawable(int)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>"
"<java.lang.Character$UnicodeScript: void <init>(java.lang.String,int)>","<java.lang.Character$UnicodeScript: void <init>(java.lang.String,int)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(long)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(long)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>"
"<java.util.LinkedList: java.lang.Object clone()>","<java.util.LinkedList: java.lang.Object clone()>"
"<android.view.textclassifier.TextClassificationSessionId: void <init>()>","<android.view.textclassifier.TextClassificationSessionId: void <init>()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
"<android.view.View: void dispatchWindowFocusChanged(boolean)>","<android.view.View: void dispatchWindowFocusChanged(boolean)>"
"<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>","<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>"
"<java.util.regex.Matcher: boolean find()>","<java.util.regex.Matcher: boolean find()>"
"<android.view.Window: void setSharedElementExitTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementExitTransition(android.transition.Transition)>"
"<java.util.Locale$Category: java.util.Locale$Category[] values()>","<java.util.Locale$Category: java.util.Locale$Category[] values()>"
"<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>","<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>"
"<android.app.VoiceInteractor: void <init>()>","<android.app.VoiceInteractor: void <init>()>"
"<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()>","<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()>"
"<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()>","<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()>"
"<java.util.concurrent.atomic.AtomicReference: void setOpaque(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: void setOpaque(java.lang.Object)>"
"<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>","<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>"
"<android.app.ActivityManager$AppTask: void setExcludeFromRecents(boolean)>","<android.app.ActivityManager$AppTask: void setExcludeFromRecents(boolean)>"
"<java.lang.Character: boolean isJavaIdentifierStart(char)>","<java.lang.Character: boolean isJavaIdentifierStart(char)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>"
"<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig build()>","<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig build()>"
"<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>"
"<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>","<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>"
"<java.text.NumberFormat: void setCurrency(java.util.Currency)>","<java.text.NumberFormat: void setCurrency(java.util.Currency)>"
"<android.widget.AdapterView: void setFocusableInTouchMode(boolean)>","<android.widget.AdapterView: void setFocusableInTouchMode(boolean)>"
"<android.view.Choreographer$FrameData: void <init>()>","<android.view.Choreographer$FrameData: void <init>()>"
"<java.lang.Character: int toChars(int,char[],int)>","<java.lang.Character: int toChars(int,char[],int)>"
"<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>","<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>"
"<android.os.Debug: void resetGlobalExternalFreedCount()>","<android.os.Debug: void resetGlobalExternalFreedCount()>"
"<java.lang.Character: boolean isJavaIdentifierPart(int)>","<java.lang.Character: boolean isJavaIdentifierPart(int)>"
"<java.lang.Integer: java.lang.String toString()>","<java.lang.Integer: java.lang.String toString()>"
"<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>","<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>"
"<android.text.Layout: int getParagraphRight(int)>","<android.text.Layout: int getParagraphRight(int)>"
"<java.time.DayOfWeek: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.DayOfWeek: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.view.accessibility.AccessibilityRecord: int getAddedCount()>","<android.view.accessibility.AccessibilityRecord: int getAddedCount()>"
"<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>","<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>"
"<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>","<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>"
"<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)>","<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)>"
"<android.view.DragAndDropPermissions: void <clinit>()>","<android.view.DragAndDropPermissions: void <clinit>()>"
"<java.time.temporal.TemporalField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>","<java.time.temporal.TemporalField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
"<java.lang.Process: java.io.InputStream getErrorStream()>","<java.lang.Process: java.io.InputStream getErrorStream()>"
"<android.database.sqlite.SQLiteException: void <init>()>","<android.database.sqlite.SQLiteException: void <init>()>"
"<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>","<java.io.ObjectInputStream$GetField: char get(java.lang.String,char)>"
"<java.math.BigInteger: int bitCount()>","<java.math.BigInteger: int bitCount()>"
"<java.util.concurrent.LinkedBlockingQueue: void put(java.lang.Object)>","<java.util.concurrent.LinkedBlockingQueue: void put(java.lang.Object)>"
"<android.graphics.Outline: void <init>(android.graphics.Outline)>","<android.graphics.Outline: void <init>(android.graphics.Outline)>"
"<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>","<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()>"
"<android.text.Layout: float getLineWidth(int)>","<android.text.Layout: float getLineWidth(int)>"
"<java.util.TimeZone: boolean useDaylightTime()>","<java.util.TimeZone: boolean useDaylightTime()>"
"<android.webkit.SafeBrowsingResponse: void showInterstitial(boolean)>","<android.webkit.SafeBrowsingResponse: void showInterstitial(boolean)>"
"<android.widget.RemoteViews: void setViewLayoutMarginDimen(int,int,int)>","<android.widget.RemoteViews: void setViewLayoutMarginDimen(int,int,int)>"
"<android.view.ViewStructure: void setText(java.lang.CharSequence)>","<android.view.ViewStructure: void setText(java.lang.CharSequence)>"
"<android.content.OperationApplicationException: void <init>(java.lang.String,int)>","<android.content.OperationApplicationException: void <init>(java.lang.String,int)>"
"<java.util.PriorityQueue: java.lang.Object peek()>","<java.util.PriorityQueue: java.lang.Object peek()>"
"<android.app.Activity: void setProgressBarIndeterminate(boolean)>","<android.app.Activity: void setProgressBarIndeterminate(boolean)>"
"<android.graphics.Paint: boolean isSubpixelText()>","<android.graphics.Paint: boolean isSubpixelText()>"
"<android.os.Bundle: java.lang.Object[] getParcelableArray(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.lang.Object[] getParcelableArray(java.lang.String,java.lang.Class)>"
"<java.time.zone.ZoneOffsetTransition: java.lang.String toString()>","<java.time.zone.ZoneOffsetTransition: java.lang.String toString()>"
"<android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>","<android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>"
"<android.graphics.Region: boolean quickReject(android.graphics.Region)>","<android.graphics.Region: boolean quickReject(android.graphics.Region)>"
"<android.app.Notification$MessagingStyle: android.app.Person getUser()>","<android.app.Notification$MessagingStyle: android.app.Person getUser()>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble max()>","<java.util.stream.DoubleStream: java.util.OptionalDouble max()>"
"<android.os.ParcelFileDescriptor: int describeContents()>","<android.os.ParcelFileDescriptor: int describeContents()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void <init>()>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void <init>()>"
"<java.time.OffsetTime: int getNano()>","<java.time.OffsetTime: int getNano()>"
"<java.net.InetAddress: boolean isAnyLocalAddress()>","<java.net.InetAddress: boolean isAnyLocalAddress()>"
"<java.time.ZoneId: int hashCode()>","<java.time.ZoneId: int hashCode()>"
"<java.net.URLConnection: java.lang.String getContentEncoding()>","<java.net.URLConnection: java.lang.String getContentEncoding()>"
"<java.nio.ByteBuffer: float getFloat(int)>","<java.nio.ByteBuffer: float getFloat(int)>"
"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>","<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>"
"<java.lang.Class: boolean isAnonymousClass()>","<java.lang.Class: boolean isAnonymousClass()>"
"<java.lang.Class: boolean isLocalClass()>","<java.lang.Class: boolean isLocalClass()>"
"<java.util.zip.ZipEntry: java.lang.String getComment()>","<java.util.zip.ZipEntry: java.lang.String getComment()>"
"<android.app.Activity: boolean shouldDockBigOverlays()>","<android.app.Activity: boolean shouldDockBigOverlays()>"
"<android.view.View: boolean awakenScrollBars()>","<android.view.View: boolean awakenScrollBars()>"
"<java.lang.StringBuffer: void setLength(int)>","<java.lang.StringBuffer: void setLength(int)>"
"<java.util.Calendar: boolean before(java.lang.Object)>","<java.util.Calendar: boolean before(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.i3: void <clinit>()>","<io.flutter.plugins.webviewflutter.i3: void <clinit>()>"
"<android.view.ViewDebug$FlagToString: boolean outputIf()>","<android.view.ViewDebug$FlagToString: boolean outputIf()>"
"<java.util.Deque: boolean offerLast(java.lang.Object)>","<java.util.Deque: boolean offerLast(java.lang.Object)>"
"<android.view.ViewOverlay: void <init>()>","<android.view.ViewOverlay: void <init>()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicReference: java.lang.String toString()>"
"<android.app.Activity: void onResume()>","<android.app.Activity: void onResume()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>"
"<java.text.ParsePosition: void setIndex(int)>","<java.text.ParsePosition: void setIndex(int)>"
"<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>","<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>"
"<android.graphics.ColorSpace$Rgb: float[] fromLinear(float,float,float)>","<android.graphics.ColorSpace$Rgb: float[] fromLinear(float,float,float)>"
"<java.lang.Character: char charValue()>","<java.lang.Character: char charValue()>"
"<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator)>"
"<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>","<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>"
"<android.view.View: int getSuggestedMinimumHeight()>","<android.view.View: int getSuggestedMinimumHeight()>"
"<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>","<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>"
"<java.util.Locale$LanguageRange: double getWeight()>","<java.util.Locale$LanguageRange: double getWeight()>"
"<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>","<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>"
"<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>","<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>"
"<java.util.LinkedHashSet: void <init>()>","<java.util.LinkedHashSet: void <init>()>"
"<java.util.Collections: java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)>","<java.util.Collections: java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)>"
"<android.app.Activity: void setSecondaryProgress(int)>","<android.app.Activity: void setSecondaryProgress(int)>"
"<android.view.View: void setNextFocusRightId(int)>","<android.view.View: void setNextFocusRightId(int)>"
"<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>","<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>"
"<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>","<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>"
"<java.lang.String: java.lang.String[] split(java.lang.String)>","<java.lang.String: java.lang.String[] split(java.lang.String)>"
"<java.math.BigInteger: boolean testBit(int)>","<java.math.BigInteger: boolean testBit(int)>"
"<java.time.OffsetTime: java.time.OffsetTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.OffsetTime: java.time.OffsetTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>","<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>"
"<android.app.Activity: boolean navigateUpTo(android.content.Intent)>","<android.app.Activity: boolean navigateUpTo(android.content.Intent)>"
"<android.graphics.Paint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>","<android.graphics.Paint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>"
"<android.database.sqlite.SQLiteDatabase: int releaseMemory()>","<android.database.sqlite.SQLiteDatabase: int releaseMemory()>"
"<android.view.ViewStructure: void setTextIdEntry(java.lang.String)>","<android.view.ViewStructure: void setTextIdEntry(java.lang.String)>"
"<android.widget.ImageView: void setBaselineAlignBottom(boolean)>","<android.widget.ImageView: void setBaselineAlignBottom(boolean)>"
"<java.lang.Math: long floorDiv(long,int)>","<java.lang.Math: long floorDiv(long,int)>"
"<java.lang.String: boolean startsWith(java.lang.String)>","<java.lang.String: boolean startsWith(java.lang.String)>"
"<android.view.inputmethod.SurroundingText: void <clinit>()>","<android.view.inputmethod.SurroundingText: void <clinit>()>"
"<android.os.Build$Partition: java.lang.String getFingerprint()>","<android.os.Build$Partition: java.lang.String getFingerprint()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>"
"<java.lang.Integer: int compareTo(java.lang.Object)>","<java.lang.Integer: int compareTo(java.lang.Object)>"
"<java.lang.String: java.lang.String repeat(int)>","<java.lang.String: java.lang.String repeat(int)>"
"<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>","<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>"
"<java.net.URLConnection: boolean getDoInput()>","<java.net.URLConnection: boolean getDoInput()>"
"<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>","<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>"
"<android.view.View: int getImportantForContentCapture()>","<android.view.View: int getImportantForContentCapture()>"
"<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>","<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>"
"<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>","<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>"
"<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>","<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>"
"<android.os.Vibrator: void vibrate(long[],int)>","<android.os.Vibrator: void vibrate(long[],int)>"
"<android.widget.ListPopupWindow: int getSoftInputMode()>","<android.widget.ListPopupWindow: int getSoftInputMode()>"
"<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>","<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>"
"<android.os.BaseBundle: void putInt(java.lang.String,int)>","<android.os.BaseBundle: void putInt(java.lang.String,int)>"
"<java.util.AbstractMap: boolean isEmpty()>","<java.util.AbstractMap: boolean isEmpty()>"
"<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>","<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>"
"<java.util.ListIterator: void remove()>","<java.util.ListIterator: void remove()>"
"<android.content.Intent: java.lang.Object[] getParcelableArrayExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.lang.Object[] getParcelableArrayExtra(java.lang.String,java.lang.Class)>"
"<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>","<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>"
"<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()>","<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()>"
"<android.webkit.WebView: android.view.textclassifier.TextClassifier getTextClassifier()>","<android.webkit.WebView: android.view.textclassifier.TextClassifier getTextClassifier()>"
"<java.lang.Process: boolean isAlive()>","<java.lang.Process: boolean isAlive()>"
"<android.app.assist.AssistContent: boolean isAppProvidedWebUri()>","<android.app.assist.AssistContent: boolean isAppProvidedWebUri()>"
"<java.time.chrono.Chronology: int compareTo(java.lang.Object)>","<java.time.chrono.Chronology: int compareTo(java.lang.Object)>"
"<android.app.Notification$Style: android.app.Notification build()>","<android.app.Notification$Style: android.app.Notification build()>"
"<android.graphics.SurfaceTexture: int getDataSpace()>","<android.graphics.SurfaceTexture: int getDataSpace()>"
"<android.widget.RemoteViews: void setViewLayoutHeightAttr(int,int)>","<android.widget.RemoteViews: void setViewLayoutHeightAttr(int,int)>"
"<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>","<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>"
"<io.flutter.plugins.webviewflutter.e2: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.e2: void a(java.lang.Object,y.a$e)>"
"<java.util.Spliterator$OfInt: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfInt: boolean tryAdvance(java.lang.Object)>"
"<java.lang.Integer: int parseInt(java.lang.String)>","<java.lang.Integer: int parseInt(java.lang.String)>"
"<android.graphics.Canvas: int getWidth()>","<android.graphics.Canvas: int getWidth()>"
"<java.io.ObjectOutputStream$PutField: void <init>()>","<java.io.ObjectOutputStream$PutField: void <init>()>"
"<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>","<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>"
"<android.app.Service: void onCreate()>","<android.app.Service: void onCreate()>"
"<android.app.PictureInPictureParams$Builder: void <init>()>","<android.app.PictureInPictureParams$Builder: void <init>()>"
"<android.view.textclassifier.TextClassification$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassification$Request: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent createDetailsIntent()>","<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent createDetailsIntent()>"
"<io.flutter.plugins.webviewflutter.k1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.k1: void a(java.lang.Object,y.a$e)>"
"<android.content.pm.PackageManager: void <init>()>","<android.content.pm.PackageManager: void <init>()>"
"<android.app.Activity: void onLocalVoiceInteractionStopped()>","<android.app.Activity: void onLocalVoiceInteractionStopped()>"
"<android.app.Notification$Action$Builder: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)>","<android.app.Notification$Action$Builder: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,android.app.PendingIntent)>"
"<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>","<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>"
"<android.webkit.WebView: int computeHorizontalScrollRange()>","<android.webkit.WebView: int computeHorizontalScrollRange()>"
"<java.io.FileDescriptor: void <init>()>","<java.io.FileDescriptor: void <init>()>"
"<android.graphics.drawable.Drawable: boolean onStateChange(int[])>","<android.graphics.drawable.Drawable: boolean onStateChange(int[])>"
"<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>","<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>"
"<java.util.AbstractCollection: java.util.Iterator iterator()>","<java.util.AbstractCollection: java.util.Iterator iterator()>"
"<android.view.WindowInsets: android.view.RoundedCorner getRoundedCorner(int)>","<android.view.WindowInsets: android.view.RoundedCorner getRoundedCorner(int)>"
"<android.app.PictureInPictureUiState: void <clinit>()>","<android.app.PictureInPictureUiState: void <clinit>()>"
"<java.lang.StringBuffer: void setCharAt(int,char)>","<java.lang.StringBuffer: void setCharAt(int,char)>"
"<java.lang.StackOverflowError: void <init>(java.lang.String)>","<java.lang.StackOverflowError: void <init>(java.lang.String)>"
"<android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>","<android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>"
"<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()>","<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()>"
"<java.time.DayOfWeek: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.DayOfWeek: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float,long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float,long)>"
"<java.lang.Runtime: void <init>()>","<java.lang.Runtime: void <init>()>"
"<android.view.View: boolean isScreenReaderFocusable()>","<android.view.View: boolean isScreenReaderFocusable()>"
"<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>","<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>"
"<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>","<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>"
"<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>"
"<java.util.Set: boolean contains(java.lang.Object)>","<java.util.Set: boolean contains(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.String toString()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.String toString()>"
"<android.os.IBinder$DeathRecipient: void binderDied()>","<android.os.IBinder$DeathRecipient: void binderDied()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>","<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>"
"<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>","<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>"
"<java.time.Period: java.time.Period withDays(int)>","<java.time.Period: java.time.Period withDays(int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>"
"<android.graphics.Path: void offset(float,float,android.graphics.Path)>","<android.graphics.Path: void offset(float,float,android.graphics.Path)>"
"<android.graphics.ColorSpace: java.lang.String getName()>","<android.graphics.ColorSpace: java.lang.String getName()>"
"<android.graphics.Color: float luminance(long)>","<android.graphics.Color: float luminance(long)>"
"<android.view.accessibility.AccessibilityManager: boolean removeAudioDescriptionRequestedChangeListener(android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener)>","<android.view.accessibility.AccessibilityManager: boolean removeAudioDescriptionRequestedChangeListener(android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener)>"
"<android.webkit.WebView: float getScale()>","<android.webkit.WebView: float getScale()>"
"<android.app.Fragment: void onMultiWindowModeChanged(boolean)>","<android.app.Fragment: void onMultiWindowModeChanged(boolean)>"
"<android.util.SparseBooleanArray: void append(int,boolean)>","<android.util.SparseBooleanArray: void append(int,boolean)>"
"<java.net.URLConnection: void connect()>","<java.net.URLConnection: void connect()>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusMonths(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusMonths(long)>"
"<android.util.TypedValue: void <init>()>","<android.util.TypedValue: void <init>()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>"
"<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>","<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>"
"<java.lang.ThreadGroup: boolean isDaemon()>","<java.lang.ThreadGroup: boolean isDaemon()>"
"<android.view.View: android.view.View focusSearch(int)>","<android.view.View: android.view.View focusSearch(int)>"
"<android.widget.RemoteViews: void setViewLayoutHeightDimen(int,int)>","<android.widget.RemoteViews: void setViewLayoutHeightDimen(int,int)>"
"<android.view.ViewStructure: void setChecked(boolean)>","<android.view.ViewStructure: void setChecked(boolean)>"
"<android.app.Activity: void recreate()>","<android.app.Activity: void recreate()>"
"<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>"
"<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>"
"<java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
"<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.function.Consumer)>","<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.function.Consumer)>"
"<android.hardware.lights.Light: boolean equals(java.lang.Object)>","<android.hardware.lights.Light: boolean equals(java.lang.Object)>"
"<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.util.NavigableSet: java.lang.Object pollFirst()>","<java.util.NavigableSet: java.lang.Object pollFirst()>"
"<android.print.PrintDocumentAdapter: void onWrite(android.print.PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter$WriteResultCallback)>","<android.print.PrintDocumentAdapter: void onWrite(android.print.PageRange[],android.os.ParcelFileDescriptor,android.os.CancellationSignal,android.print.PrintDocumentAdapter$WriteResultCallback)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.content.Loader: void onContentChanged()>","<android.content.Loader: void onContentChanged()>"
"<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>","<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithExplicitEntityList(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithExplicitEntityList(java.util.Collection)>"
"<android.content.pm.ServiceInfo: java.lang.String toString()>","<android.content.pm.ServiceInfo: java.lang.String toString()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream distinct()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream distinct()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAcquire()>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAcquire()>"
"<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>","<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>"
"<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>","<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.text.style.TtsSpan: void <init>(java.lang.String,android.os.PersistableBundle)>","<android.text.style.TtsSpan: void <init>(java.lang.String,android.os.PersistableBundle)>"
"<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>","<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"
"<android.view.View: void onPointerCaptureChange(boolean)>","<android.view.View: void onPointerCaptureChange(boolean)>"
"<android.webkit.CookieManager: void removeAllCookie()>","<android.webkit.CookieManager: void removeAllCookie()>"
"<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>","<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>"
"<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>","<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>"
"<android.content.IntentFilter: java.util.Iterator schemesIterator()>","<android.content.IntentFilter: java.util.Iterator schemesIterator()>"
"<java.util.Arrays: void sort(byte[],int,int)>","<java.util.Arrays: void sort(byte[],int,int)>"
"<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>","<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>"
"<android.net.http.SslError: java.lang.String toString()>","<android.net.http.SslError: java.lang.String toString()>"
"<android.graphics.Color: float alpha()>","<android.graphics.Color: float alpha()>"
"<java.lang.Object: java.lang.Class getClass()>","<java.lang.Object: java.lang.Class getClass()>"
"<android.view.View: int getVerticalScrollbarPosition()>","<android.view.View: int getVerticalScrollbarPosition()>"
"<android.graphics.Paint: float getShadowLayerDy()>","<android.graphics.Paint: float getShadowLayerDy()>"
"<android.media.session.MediaSessionManager: void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>","<android.media.session.MediaSessionManager: void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>"
"<android.graphics.Insets: void <clinit>()>","<android.graphics.Insets: void <clinit>()>"
"<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)>","<android.webkit.WebSettings: void setDefaultZoom(android.webkit.WebSettings$ZoomDensity)>"
"<android.view.MotionEvent: float getHistoricalTouchMajor(int)>","<android.view.MotionEvent: float getHistoricalTouchMajor(int)>"
"<java.text.FieldPosition: void <init>(java.text.Format$Field)>","<java.text.FieldPosition: void <init>(java.text.Format$Field)>"
"<android.util.Printer: void println(java.lang.String)>","<android.util.Printer: void println(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>"
"<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>"
"<java.io.File: long getTotalSpace()>","<java.io.File: long getTotalSpace()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: int describeContents()>","<android.app.VoiceInteractor$PickOptionRequest$Option: int describeContents()>"
"<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>","<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>"
"<java.util.Collections: java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)>","<java.util.Collections: java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)>"
"<android.util.LongSparseArray: void delete(long)>","<android.util.LongSparseArray: void delete(long)>"
"<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)>","<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)>"
"<android.view.KeyCharacterMap: int describeContents()>","<android.view.KeyCharacterMap: int describeContents()>"
"<java.lang.reflect.Modifier: boolean isNative(int)>","<java.lang.reflect.Modifier: boolean isNative(int)>"
"<android.transition.Scene: void enter()>","<android.transition.Scene: void enter()>"
"<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>","<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>"
"<java.io.DataOutput: void writeInt(int)>","<java.io.DataOutput: void writeInt(int)>"
"<android.content.DialogInterface$OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>","<android.content.DialogInterface$OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.function.IntFunction: java.lang.Object apply(int)>","<java.util.function.IntFunction: java.lang.Object apply(int)>"
"<java.security.Provider: double getVersion()>","<java.security.Provider: double getVersion()>"
"<android.os.Debug$MemoryInfo: void <clinit>()>","<android.os.Debug$MemoryInfo: void <clinit>()>"
"<android.view.Window: void setNavigationBarContrastEnforced(boolean)>","<android.view.Window: void setNavigationBarContrastEnforced(boolean)>"
"<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>","<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>"
"<java.lang.Float: boolean equals(java.lang.Object)>","<java.lang.Float: boolean equals(java.lang.Object)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void release()>","<android.view.SurfaceControlViewHost$SurfacePackage: void release()>"
"<android.view.ViewGroup: android.view.ViewOverlay getOverlay()>","<android.view.ViewGroup: android.view.ViewOverlay getOverlay()>"
"<android.app.Notification$MediaStyle: void <init>()>","<android.app.Notification$MediaStyle: void <init>()>"
"<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>","<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>"
"<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>","<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>"
"<java.time.format.DecimalStyle: int hashCode()>","<java.time.format.DecimalStyle: int hashCode()>"
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>","<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
"<android.app.Notification$WearableExtender: boolean getHintHideIcon()>","<android.app.Notification$WearableExtender: boolean getHintHideIcon()>"
"<android.content.res.Resources$Theme: void <init>(android.content.res.Resources)>","<android.content.res.Resources$Theme: void <init>(android.content.res.Resources)>"
"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>","<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
"<android.widget.AbsListView: void invalidateViews()>","<android.widget.AbsListView: void invalidateViews()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isSelected()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isSelected()>"
"<android.graphics.RenderNode: float getScaleX()>","<android.graphics.RenderNode: float getScaleX()>"
"<android.animation.Animator: long getTotalDuration()>","<android.animation.Animator: long getTotalDuration()>"
"<android.content.Intent: android.content.Intent setAction(java.lang.String)>","<android.content.Intent: android.content.Intent setAction(java.lang.String)>"
"<java.security.BasicPermission: java.lang.String getActions()>","<java.security.BasicPermission: java.lang.String getActions()>"
"<android.app.Activity: boolean requestVisibleBehind(boolean)>","<android.app.Activity: boolean requestVisibleBehind(boolean)>"
"<android.view.textclassifier.TextClassification: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassification: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)>","<android.webkit.WebView: void setPictureListener(android.webkit.WebView$PictureListener)>"
"<android.view.inputmethod.InputMethodManager: void invalidateInput(android.view.View)>","<android.view.inputmethod.InputMethodManager: void invalidateInput(android.view.View)>"
"<java.util.Arrays: int mismatch(int[],int[])>","<java.util.Arrays: int mismatch(int[],int[])>"
"<android.widget.TextView: java.lang.CharSequence getHint()>","<android.widget.TextView: java.lang.CharSequence getHint()>"
"<android.util.SparseArray: void put(int,java.lang.Object)>","<android.util.SparseArray: void put(int,java.lang.Object)>"
"<java.lang.Character: boolean isSpaceChar(int)>","<java.lang.Character: boolean isSpaceChar(int)>"
"<android.content.AttributionSource: void enforceCallingUid()>","<android.content.AttributionSource: void enforceCallingUid()>"
"<android.view.Window: void setFlags(int,int)>","<android.view.Window: void setFlags(int,int)>"
"<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)>","<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)>"
"<android.print.PrintAttributes$Resolution: int getHorizontalDpi()>","<android.print.PrintAttributes$Resolution: int getHorizontalDpi()>"
"<android.webkit.WebStorage$QuotaUpdater: void updateQuota(long)>","<android.webkit.WebStorage$QuotaUpdater: void updateQuota(long)>"
"<android.animation.ValueAnimator: void setIntValues(int[])>","<android.animation.ValueAnimator: void setIntValues(int[])>"
"<java.io.ObjectStreamConstants: void <clinit>()>","<java.io.ObjectStreamConstants: void <clinit>()>"
"<android.app.Dialog: void <init>(android.content.Context,int)>","<android.app.Dialog: void <init>(android.content.Context,int)>"
"<java.nio.channels.Selector: java.util.Set selectedKeys()>","<java.nio.channels.Selector: java.util.Set selectedKeys()>"
"<java.net.SocketImpl: void close()>","<java.net.SocketImpl: void close()>"
"<android.view.MotionEvent$PointerCoords: void <init>()>","<android.view.MotionEvent$PointerCoords: void <init>()>"
"<android.media.VolumeProvider: void setCurrentVolume(int)>","<android.media.VolumeProvider: void setCurrentVolume(int)>"
"<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>","<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>"
"<android.database.Cursor: byte[] getBlob(int)>","<android.database.Cursor: byte[] getBlob(int)>"
"<java.net.Socket: int getLocalPort()>","<java.net.Socket: int getLocalPort()>"
"<java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>"
"<java.lang.Character: boolean isJavaIdentifierPart(char)>","<java.lang.Character: boolean isJavaIdentifierPart(char)>"
"<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>","<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>"
"<android.app.AlertDialog: void setView(android.view.View)>","<android.app.AlertDialog: void setView(android.view.View)>"
"<android.view.Surface: void finalize()>","<android.view.Surface: void finalize()>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()>"
"<android.util.SparseBooleanArray: void clear()>","<android.util.SparseBooleanArray: void clear()>"
"<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>","<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>"
"<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>","<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>"
"<android.print.PrintAttributes$Margins: int getBottomMils()>","<android.print.PrintAttributes$Margins: int getBottomMils()>"
"<java.io.ObjectInput: java.lang.Object readObject()>","<java.io.ObjectInput: java.lang.Object readObject()>"
"<android.content.pm.VersionedPackage: java.lang.String getPackageName()>","<android.content.pm.VersionedPackage: java.lang.String getPackageName()>"
"<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>","<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>"
"<android.media.session.PlaybackState$CustomAction: void <init>()>","<android.media.session.PlaybackState$CustomAction: void <init>()>"
"<java.time.chrono.IsoEra: java.time.chrono.IsoEra valueOf(java.lang.String)>","<java.time.chrono.IsoEra: java.time.chrono.IsoEra valueOf(java.lang.String)>"
"<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>","<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>"
"<android.content.ClipData: android.content.ClipDescription getDescription()>","<android.content.ClipData: android.content.ClipDescription getDescription()>"
"<java.lang.StackTraceElement: java.lang.String getClassName()>","<java.lang.StackTraceElement: java.lang.String getClassName()>"
"<io.flutter.plugins.webviewflutter.h3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.h3: void a(java.lang.Object)>"
"<java.util.Properties: void load(java.io.InputStream)>","<java.util.Properties: void load(java.io.InputStream)>"
"<java.io.FileNotFoundException: void <init>()>","<java.io.FileNotFoundException: void <init>()>"
"<android.media.session.MediaSession: void release()>","<android.media.session.MediaSession: void release()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>"
"<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>","<java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>"
"<java.net.InetAddress: java.lang.String getCanonicalHostName()>","<java.net.InetAddress: java.lang.String getCanonicalHostName()>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>"
"<android.os.Parcel: void writeException(java.lang.Exception)>","<android.os.Parcel: void writeException(java.lang.Exception)>"
"<android.webkit.WebView: void setBackgroundColor(int)>","<android.webkit.WebView: void setBackgroundColor(int)>"
"<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>","<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>"
"<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>","<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>"
"<java.io.InputStream: void reset()>","<java.io.InputStream: void reset()>"
"<java.lang.Boolean: int compare(boolean,boolean)>","<java.lang.Boolean: int compare(boolean,boolean)>"
"<android.print.PrintAttributes$MediaSize: int getWidthMils()>","<android.print.PrintAttributes$MediaSize: int getWidthMils()>"
"<android.view.autofill.AutofillValue: void <clinit>()>","<android.view.autofill.AutofillValue: void <clinit>()>"
"<android.os.Build$VERSION_CODES: void <init>()>","<android.os.Build$VERSION_CODES: void <init>()>"
"<android.widget.TextView: void beginBatchEdit()>","<android.widget.TextView: void beginBatchEdit()>"
"<java.time.Period: java.time.Period of(int,int,int)>","<java.time.Period: java.time.Period of(int,int,int)>"
"<android.view.DragEvent: android.content.ClipData getClipData()>","<android.view.DragEvent: android.content.ClipData getClipData()>"
"<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)>","<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect()>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect()>"
"<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>","<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>"
"<java.lang.Package: java.lang.String getSpecificationVersion()>","<java.lang.Package: java.lang.String getSpecificationVersion()>"
"<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>"
"<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>","<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>"
"<android.view.autofill.AutofillId: java.lang.String toString()>","<android.view.autofill.AutofillId: java.lang.String toString()>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setExtras(android.os.Bundle)>"
"<android.transition.Transition: java.util.List getTargetTypes()>","<android.transition.Transition: java.util.List getTargetTypes()>"
"<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>","<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>"
"<org.xmlpull.v1.XmlPullParser: int getLineNumber()>","<org.xmlpull.v1.XmlPullParser: int getLineNumber()>"
"<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>","<android.webkit.WebSettings: void setDisplayZoomControls(boolean)>"
"<java.lang.Thread: void checkAccess()>","<java.lang.Thread: void checkAccess()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoPeriod period(int,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoPeriod period(int,int,int)>"
"<android.os.Debug$InstructionCount: int globalTotal()>","<android.os.Debug$InstructionCount: int globalTotal()>"
"<android.webkit.CookieManager: void removeAllCookies(android.webkit.ValueCallback)>","<android.webkit.CookieManager: void removeAllCookies(android.webkit.ValueCallback)>"
"<java.util.LongSummaryStatistics: void accept(long)>","<java.util.LongSummaryStatistics: void accept(long)>"
"<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>","<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>"
"<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.view.inputmethod.InputMethodManager: void toggleSoftInputFromWindow(android.os.IBinder,int,int)>","<android.view.inputmethod.InputMethodManager: void toggleSoftInputFromWindow(android.os.IBinder,int,int)>"
"<android.view.autofill.AutofillManager: void cancel()>","<android.view.autofill.AutofillManager: void cancel()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>"
"<java.time.chrono.ChronoLocalDate: int hashCode()>","<java.time.chrono.ChronoLocalDate: int hashCode()>"
"<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>","<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.Objects: java.lang.Object requireNonNullElse(java.lang.Object,java.lang.Object)>","<java.util.Objects: java.lang.Object requireNonNullElse(java.lang.Object,java.lang.Object)>"
"<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>","<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>"
"<android.animation.Animator$AnimatorPauseListener: void onAnimationPause(android.animation.Animator)>","<android.animation.Animator$AnimatorPauseListener: void onAnimationPause(android.animation.Animator)>"
"<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>","<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>"
"<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>","<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void dispatchStartTemporaryDetach()>","<android.view.ViewGroup: void dispatchStartTemporaryDetach()>"
"<java.util.concurrent.ThreadPoolExecutor: int prestartAllCoreThreads()>","<java.util.concurrent.ThreadPoolExecutor: int prestartAllCoreThreads()>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setReferenceTime(java.time.ZonedDateTime)>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setReferenceTime(java.time.ZonedDateTime)>"
"<android.content.pm.PackageManager: int checkSignatures(int,int)>","<android.content.pm.PackageManager: int checkSignatures(int,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>"
"<android.graphics.Paint: float getStrokeWidth()>","<android.graphics.Paint: float getStrokeWidth()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int,int)>"
"<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>","<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>"
"<android.view.textclassifier.TextLinks$TextLink: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLinks$TextLink: android.os.Bundle getExtras()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>"
"<android.app.FragmentManager: void popBackStack(int,int)>","<android.app.FragmentManager: void popBackStack(int,int)>"
"<android.view.Menu: void close()>","<android.view.Menu: void close()>"
"<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>","<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>"
"<java.lang.Character: boolean isUnicodeIdentifierStart(int)>","<java.lang.Character: boolean isUnicodeIdentifierStart(int)>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab)>"
"<android.graphics.Canvas: void <init>()>","<android.graphics.Canvas: void <init>()>"
"<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>","<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>"
"<android.content.Loader: boolean cancelLoad()>","<android.content.Loader: boolean cancelLoad()>"
"<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>","<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>"
"<java.util.OptionalInt: int orElseThrow(java.util.function.Supplier)>","<java.util.OptionalInt: int orElseThrow(java.util.function.Supplier)>"
"<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>","<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>"
"<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.view.textclassifier.ConversationActions$Request: int getMaxSuggestions()>","<android.view.textclassifier.ConversationActions$Request: int getMaxSuggestions()>"
"<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(java.lang.String)>","<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(java.lang.String)>"
"<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>"
"<java.util.Arrays: void parallelSetAll(long[],java.util.function.IntToLongFunction)>","<java.util.Arrays: void parallelSetAll(long[],java.util.function.IntToLongFunction)>"
"<android.app.Notification$CarExtender$UnreadConversation: long getLatestTimestamp()>","<android.app.Notification$CarExtender$UnreadConversation: long getLatestTimestamp()>"
"<java.time.LocalDate: int lengthOfMonth()>","<java.time.LocalDate: int lengthOfMonth()>"
"<java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicLong: java.lang.String toString()>"
"<android.view.Window: int getNavigationBarColor()>","<android.view.Window: int getNavigationBarColor()>"
"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(java.time.Instant)>","<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(java.time.Instant)>"
"<java.lang.Math: double log10(double)>","<java.lang.Math: double log10(double)>"
"<android.app.Notification$BubbleMetadata$Builder: void <init>(java.lang.String)>","<android.app.Notification$BubbleMetadata$Builder: void <init>(java.lang.String)>"
"<org.xmlpull.v1.XmlSerializer: void setProperty(java.lang.String,java.lang.Object)>","<org.xmlpull.v1.XmlSerializer: void setProperty(java.lang.String,java.lang.Object)>"
"<android.graphics.Canvas: boolean isHardwareAccelerated()>","<android.graphics.Canvas: boolean isHardwareAccelerated()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lockInterruptibly()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lockInterruptibly()>"
"<java.io.ObjectOutputStream: void writeShort(int)>","<java.io.ObjectOutputStream: void writeShort(int)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setHyphenationFrequency(int)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setHyphenationFrequency(int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)>"
"<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>","<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>"
"<android.os.Debug: void resetGlobalGcInvocationCount()>","<android.os.Debug: void resetGlobalGcInvocationCount()>"
"<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>","<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>"
"<android.widget.Toolbar: void onRestoreInstanceState(android.os.Parcelable)>","<android.widget.Toolbar: void onRestoreInstanceState(android.os.Parcelable)>"
"<java.util.Optional: java.util.Optional empty()>","<java.util.Optional: java.util.Optional empty()>"
"<android.webkit.WebSettings: void setAllowContentAccess(boolean)>","<android.webkit.WebSettings: void setAllowContentAccess(boolean)>"
"<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>","<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>"
"<java.io.NotActiveException: void <init>()>","<java.io.NotActiveException: void <init>()>"
"<java.nio.file.attribute.AttributeView: java.lang.String name()>","<java.nio.file.attribute.AttributeView: java.lang.String name()>"
"<android.webkit.WebView: boolean overlayVerticalScrollbar()>","<android.webkit.WebView: boolean overlayVerticalScrollbar()>"
"<android.webkit.WebChromeClient$FileChooserParams: boolean isCaptureEnabled()>","<android.webkit.WebChromeClient$FileChooserParams: boolean isCaptureEnabled()>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.view.Window: void setSoftInputMode(int)>","<android.view.Window: void setSoftInputMode(int)>"
"<android.content.ClipDescription: java.lang.CharSequence getLabel()>","<android.content.ClipDescription: java.lang.CharSequence getLabel()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>"
"<java.util.Set: java.util.Spliterator spliterator()>","<java.util.Set: java.util.Spliterator spliterator()>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>"
"<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>","<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>"
"<java.io.Writer: void close()>","<java.io.Writer: void close()>"
"<android.os.Message: void writeToParcel(android.os.Parcel,int)>","<android.os.Message: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>","<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>"
"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>","<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>"
"<android.animation.ValueAnimator: android.animation.Animator setDuration(long)>","<android.animation.ValueAnimator: android.animation.Animator setDuration(long)>"
"<android.view.DragEvent: float getX()>","<android.view.DragEvent: float getX()>"
"<android.os.LocaleList: void setDefault(android.os.LocaleList)>","<android.os.LocaleList: void setDefault(android.os.LocaleList)>"
"<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>","<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>"
"<android.view.MenuItem: android.view.MenuItem setActionView(int)>","<android.view.MenuItem: android.view.MenuItem setActionView(int)>"
"<android.util.SizeF: boolean equals(java.lang.Object)>","<android.util.SizeF: boolean equals(java.lang.Object)>"
"<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>","<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>"
"<android.hardware.HardwareBuffer: android.hardware.HardwareBuffer create(int,int,int,int,long)>","<android.hardware.HardwareBuffer: android.hardware.HardwareBuffer create(int,int,int,int,long)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clone()>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clone()>"
"<java.text.DateFormat: boolean isLenient()>","<java.text.DateFormat: boolean isLenient()>"
"<java.util.SortedSet: java.lang.Object first()>","<java.util.SortedSet: java.lang.Object first()>"
"<android.content.ContentResolver: boolean getMasterSyncAutomatically()>","<android.content.ContentResolver: boolean getMasterSyncAutomatically()>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>"
"<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>","<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>"
"<android.view.SurfaceControlViewHost: void release()>","<android.view.SurfaceControlViewHost: void release()>"
"<android.content.Context: java.io.File getExternalCacheDir()>","<android.content.Context: java.io.File getExternalCacheDir()>"
"<java.lang.System: void gc()>","<java.lang.System: void gc()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
"<android.app.Activity: void startPostponedEnterTransition()>","<android.app.Activity: void startPostponedEnterTransition()>"
"<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.BlendMode)>","<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.BlendMode)>"
"<java.util.Locale$Builder: java.util.Locale$Builder setLanguageTag(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setLanguageTag(java.lang.String)>"
"<android.view.View: boolean restoreDefaultFocus()>","<android.view.View: boolean restoreDefaultFocus()>"
"<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: void <init>(java.lang.Object)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)>"
"<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>","<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>"
"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>"
"<android.app.Activity: void dismissDialog(int)>","<android.app.Activity: void dismissDialog(int)>"
"<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)>","<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)>"
"<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>","<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>"
"<java.util.ArrayDeque: void <init>()>","<java.util.ArrayDeque: void <init>()>"
"<java.time.format.FormatStyle: void <init>(java.lang.String,int)>","<java.time.format.FormatStyle: void <init>(java.lang.String,int)>"
"<java.nio.channels.FileLock: long position()>","<java.nio.channels.FileLock: long position()>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.app.Activity: void onEnterAnimationComplete()>","<android.app.Activity: void onEnterAnimationComplete()>"
"<java.lang.StackTraceElement: java.lang.String getFileName()>","<java.lang.StackTraceElement: java.lang.String getFileName()>"
"<android.content.pm.ApplicationInfo: boolean isResourceOverlay()>","<android.content.pm.ApplicationInfo: boolean isResourceOverlay()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clearActions()>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clearActions()>"
"<android.app.Notification$CarExtender: android.graphics.Bitmap getLargeIcon()>","<android.app.Notification$CarExtender: android.graphics.Bitmap getLargeIcon()>"
"<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>","<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>"
"<android.app.PictureInPictureUiState: boolean isStashed()>","<android.app.PictureInPictureUiState: boolean isStashed()>"
"<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>"
"<android.os.Debug$MemoryInfo: int getTotalPrivateClean()>","<android.os.Debug$MemoryInfo: int getTotalPrivateClean()>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureSearch(android.os.CancellationSignal,java.util.function.Consumer)>","<android.view.ScrollCaptureCallback: void onScrollCaptureSearch(android.os.CancellationSignal,java.util.function.Consumer)>"
"<android.util.SparseIntArray: void removeAt(int)>","<android.util.SparseIntArray: void removeAt(int)>"
"<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>","<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>"
"<java.util.Random: java.util.stream.LongStream longs()>","<java.util.Random: java.util.stream.LongStream longs()>"
"<android.text.Spannable$Factory: void <init>()>","<android.text.Spannable$Factory: void <init>()>"
"<java.io.ObjectInputStream$GetField: double get(java.lang.String,double)>","<java.io.ObjectInputStream$GetField: double get(java.lang.String,double)>"
"<java.lang.IndexOutOfBoundsException: void <init>()>","<java.lang.IndexOutOfBoundsException: void <init>()>"
"<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,int[])>","<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,int[])>"
"<android.view.textclassifier.TextClassifierEvent: int getEventType()>","<android.view.textclassifier.TextClassifierEvent: int getEventType()>"
"<android.view.accessibility.AccessibilityRecord: int getItemCount()>","<android.view.accessibility.AccessibilityRecord: int getItemCount()>"
"<android.webkit.WebResourceError: java.lang.CharSequence getDescription()>","<android.webkit.WebResourceError: java.lang.CharSequence getDescription()>"
"<java.nio.file.LinkOption: java.nio.file.LinkOption[] values()>","<java.nio.file.LinkOption: java.nio.file.LinkOption[] values()>"
"<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.TextClassifier$EntityConfig getTypeConfig()>","<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.TextClassifier$EntityConfig getTypeConfig()>"
"<java.util.PriorityQueue: java.util.Spliterator spliterator()>","<java.util.PriorityQueue: java.util.Spliterator spliterator()>"
"<android.graphics.Rect: void inset(android.graphics.Insets)>","<android.graphics.Rect: void inset(android.graphics.Insets)>"
"<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setMinMargins(android.print.PrintAttributes$Margins)>","<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setMinMargins(android.print.PrintAttributes$Margins)>"
"<java.time.ZonedDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: long getLong(java.time.temporal.TemporalField)>"
"<java.util.function.IntUnaryOperator: int applyAsInt(int)>","<java.util.function.IntUnaryOperator: int applyAsInt(int)>"
"<java.lang.Short: int compareUnsigned(short,short)>","<java.lang.Short: int compareUnsigned(short,short)>"
"<android.view.ViewTreeObserver$OnPreDrawListener: boolean onPreDraw()>","<android.view.ViewTreeObserver$OnPreDrawListener: boolean onPreDraw()>"
"<android.view.View: boolean isAttachedToWindow()>","<android.view.View: boolean isAttachedToWindow()>"
"<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>","<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>"
"<java.util.List: int lastIndexOf(java.lang.Object)>","<java.util.List: int lastIndexOf(java.lang.Object)>"
"<android.widget.PopupWindow: void setOutsideTouchable(boolean)>","<android.widget.PopupWindow: void setOutsideTouchable(boolean)>"
"<android.graphics.drawable.Drawable$ConstantState: int getChangingConfigurations()>","<android.graphics.drawable.Drawable$ConstantState: int getChangingConfigurations()>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setAvailableOffline(boolean)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setAvailableOffline(boolean)>"
"<android.text.Layout: int getParagraphDirection(int)>","<android.text.Layout: int getParagraphDirection(int)>"
"<android.widget.ListView: void addHeaderView(android.view.View)>","<android.widget.ListView: void addHeaderView(android.view.View)>"
"<android.view.KeyEvent: int normalizeMetaState(int)>","<android.view.KeyEvent: int normalizeMetaState(int)>"
"<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>"
"<android.media.MediaMetadata$Builder: void <init>()>","<android.media.MediaMetadata$Builder: void <init>()>"
"<java.net.NetworkInterface: byte[] getHardwareAddress()>","<java.net.NetworkInterface: byte[] getHardwareAddress()>"
"<java.util.Calendar: int getGreatestMinimum(int)>","<java.util.Calendar: int getGreatestMinimum(int)>"
"<android.os.Bundle: float getFloat(java.lang.String,float)>","<android.os.Bundle: float getFloat(java.lang.String,float)>"
"<android.app.RemoteInput: android.os.Bundle getResultsFromIntent(android.content.Intent)>","<android.app.RemoteInput: android.os.Bundle getResultsFromIntent(android.content.Intent)>"
"<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.stream.Stream$Builder: void accept(java.lang.Object)>","<java.util.stream.Stream$Builder: void accept(java.lang.Object)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>"
"<android.content.Context: android.content.Context createWindowContext(int,android.os.Bundle)>","<android.content.Context: android.content.Context createWindowContext(int,android.os.Bundle)>"
"<org.xmlpull.v1.XmlPullParser: void <clinit>()>","<org.xmlpull.v1.XmlPullParser: void <clinit>()>"
"<android.widget.TextView: float getTextScaleX()>","<android.widget.TextView: float getTextScaleX()>"
"<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>","<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>"
"<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>","<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener: void onGetSentenceSuggestions(android.view.textservice.SentenceSuggestionsInfo[])>"
"<java.net.URLConnection: boolean getAllowUserInteraction()>","<java.net.URLConnection: boolean getAllowUserInteraction()>"
"<java.net.URI: java.lang.String getSchemeSpecificPart()>","<java.net.URI: java.lang.String getSchemeSpecificPart()>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.Bitmap)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigLargeIcon(android.graphics.Bitmap)>"
"<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>","<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>"
"<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>","<android.view.inputmethod.BaseInputConnection: boolean setComposingRegion(int,int)>"
"<android.widget.PopupWindow: int getSoftInputMode()>","<android.widget.PopupWindow: int getSoftInputMode()>"
"<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>","<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>"
"<android.app.AlertDialog: void setIconAttribute(int)>","<android.app.AlertDialog: void setIconAttribute(int)>"
"<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setIntegerPart(long)>","<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setIntegerPart(long)>"
"<java.nio.file.WatchEvent: int count()>","<java.nio.file.WatchEvent: int count()>"
"<java.util.Random: boolean nextBoolean()>","<java.util.Random: boolean nextBoolean()>"
"<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: void lazySet(java.lang.Object)>"
"<java.time.Month: java.time.Month[] values()>","<java.time.Month: java.time.Month[] values()>"
"<android.graphics.Paint: void setAlpha(int)>","<android.graphics.Paint: void setAlpha(int)>"
"<android.app.FragmentManager: int getBackStackEntryCount()>","<android.app.FragmentManager: int getBackStackEntryCount()>"
"<android.net.Uri: android.net.Uri parse(java.lang.String)>","<android.net.Uri: android.net.Uri parse(java.lang.String)>"
"<java.text.NumberFormat: java.util.Currency getCurrency()>","<java.text.NumberFormat: java.util.Currency getCurrency()>"
"<android.os.Handler: boolean hasMessages(int,java.lang.Object)>","<android.os.Handler: boolean hasMessages(int,java.lang.Object)>"
"<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>","<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>"
"<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>","<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.view.SurfaceView: void setVisibility(int)>","<android.view.SurfaceView: void setVisibility(int)>"
"<x.j: void a(x.k$c)>","<x.j: void a(x.k$c)>"
"<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>"
"<android.view.MotionEvent: void setSource(int)>","<android.view.MotionEvent: void setSource(int)>"
"<java.util.Spliterator: long getExactSizeIfKnown()>","<java.util.Spliterator: long getExactSizeIfKnown()>"
"<android.app.Notification$WearableExtender: int getContentIconGravity()>","<android.app.Notification$WearableExtender: int getContentIconGravity()>"
"<android.animation.ValueAnimator: java.lang.Object clone()>","<android.animation.ValueAnimator: java.lang.Object clone()>"
"<java.lang.Math: double fma(double,double,double)>","<java.lang.Math: double fma(double,double,double)>"
"<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>"
"<android.webkit.ClientCertRequest: void cancel()>","<android.webkit.ClientCertRequest: void cancel()>"
"<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>","<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>"
"<java.lang.Short: float floatValue()>","<java.lang.Short: float floatValue()>"
"<java.lang.reflect.Modifier: void <init>()>","<java.lang.reflect.Modifier: void <init>()>"
"<java.lang.Byte: byte parseByte(java.lang.String,int)>","<java.lang.Byte: byte parseByte(java.lang.String,int)>"
"<java.io.DataOutput: void writeShort(int)>","<java.io.DataOutput: void writeShort(int)>"
"<io.flutter.plugins.webviewflutter.f3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.f3: void a(java.lang.Object)>"
"<android.app.Service: void onStart(android.content.Intent,int)>","<android.app.Service: void onStart(android.content.Intent,int)>"
"<android.widget.AdapterView: void onProvideAutofillStructure(android.view.ViewStructure,int)>","<android.widget.AdapterView: void onProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.transition.TransitionManager: void <init>()>","<android.transition.TransitionManager: void <init>()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExpedited(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExpedited(boolean)>"
"<java.nio.channels.FileChannel: long position()>","<java.nio.channels.FileChannel: long position()>"
"<android.os.Debug: void startAllocCounting()>","<android.os.Debug: void startAllocCounting()>"
"<android.view.textclassifier.TextSelection: android.view.textclassifier.TextClassification getTextClassification()>","<android.view.textclassifier.TextSelection: android.view.textclassifier.TextClassification getTextClassification()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer slice()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer slice()>"
"<java.util.AbstractMap: int size()>","<java.util.AbstractMap: int size()>"
"<java.lang.reflect.Field: java.lang.Class getType()>","<java.lang.reflect.Field: java.lang.Class getType()>"
"<android.view.View: android.view.AttachedSurfaceControl getRootSurfaceControl()>","<android.view.View: android.view.AttachedSurfaceControl getRootSurfaceControl()>"
"<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>","<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence)>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence)>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>"
"<x.j: void <init>(y.i$d)>","<x.j: void <init>(y.i$d)>"
"<android.view.View: android.os.IBinder getWindowToken()>","<android.view.View: android.os.IBinder getWindowToken()>"
"<android.content.ContextWrapper: void startActivities(android.content.Intent[])>","<android.content.ContextWrapper: void startActivities(android.content.Intent[])>"
"<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>"
"<android.app.Notification$BubbleMetadata: int getDesiredHeight()>","<android.app.Notification$BubbleMetadata: int getDesiredHeight()>"
"<java.security.PermissionCollection: void setReadOnly()>","<java.security.PermissionCollection: void setReadOnly()>"
"<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>","<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>"
"<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>","<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect compose()>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect compose()>"
"<android.view.View: void cancelDragAndDrop()>","<android.view.View: void cancelDragAndDrop()>"
"<android.view.SurfaceControl: void <init>()>","<android.view.SurfaceControl: void <init>()>"
"<android.widget.TextView: boolean hasSelection()>","<android.widget.TextView: boolean hasSelection()>"
"<android.widget.ImageView: void setAlpha(int)>","<android.widget.ImageView: void setAlpha(int)>"
"<android.graphics.Matrix: void mapPoints(float[],float[])>","<android.graphics.Matrix: void mapPoints(float[],float[])>"
"<java.security.Provider: boolean remove(java.lang.Object,java.lang.Object)>","<java.security.Provider: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.view.ViewGroup: android.view.View getChildAt(int)>","<android.view.ViewGroup: android.view.View getChildAt(int)>"
"<android.app.Dialog: void <init>(android.content.Context)>","<android.app.Dialog: void <init>(android.content.Context)>"
"<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>","<android.view.inputmethod.BaseInputConnection: boolean finishComposingText()>"
"<java.util.Hashtable: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.util.Hashtable: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<android.graphics.RenderNode: boolean setTranslationZ(float)>","<android.graphics.RenderNode: boolean setTranslationZ(float)>"
"<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>"
"<java.util.stream.DoubleStream: java.util.stream.IntStream mapToInt(java.util.function.DoubleToIntFunction)>","<java.util.stream.DoubleStream: java.util.stream.IntStream mapToInt(java.util.function.DoubleToIntFunction)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
"<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>","<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>"
"<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>","<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>"
"<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>","<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>"
"<java.nio.charset.CoderResult: int length()>","<java.nio.charset.CoderResult: int length()>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>"
"<android.os.Parcel: char[] createCharArray()>","<android.os.Parcel: char[] createCharArray()>"
"<android.widget.ListView: void setDividerHeight(int)>","<android.widget.ListView: void setDividerHeight(int)>"
"<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>"
"<java.util.Collections: void swap(java.util.List,int,int)>","<java.util.Collections: void swap(java.util.List,int,int)>"
"<android.widget.RemoteViews: void setIntDimenAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setIntDimenAttr(int,java.lang.String,int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>"
"<java.lang.String: void <init>(byte[],java.lang.String)>","<java.lang.String: void <init>(byte[],java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>"
"<java.time.Period: java.time.Period plusYears(long)>","<java.time.Period: java.time.Period plusYears(long)>"
"<android.print.PrintDocumentAdapter: void <init>()>","<android.print.PrintDocumentAdapter: void <init>()>"
"<android.widget.RemoteViews: void setRadioGroupChecked(int,int)>","<android.widget.RemoteViews: void setRadioGroupChecked(int,int)>"
"<java.security.Provider: java.lang.String getName()>","<java.security.Provider: java.lang.String getName()>"
"<java.text.DateFormat: java.text.DateFormat getInstance()>","<java.text.DateFormat: java.text.DateFormat getInstance()>"
"<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>","<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>"
"<android.widget.TextView: void setMinWidth(int)>","<android.widget.TextView: void setMinWidth(int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withMonth(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withMonth(int)>"
"<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>","<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>"
"<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>"
"<java.time.LocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.LocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.webkit.WebSettings: void setMinimumFontSize(int)>","<android.webkit.WebSettings: void setMinimumFontSize(int)>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <clinit>()>"
"<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>","<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>"
"<java.util.IntSummaryStatistics: java.lang.String toString()>","<java.util.IntSummaryStatistics: java.lang.String toString()>"
"<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>","<java.text.DateFormat: java.util.Date parse(java.lang.String,java.text.ParsePosition)>"
"<android.graphics.fonts.Font$Builder: void <init>(android.graphics.fonts.Font)>","<android.graphics.fonts.Font$Builder: void <init>(android.graphics.fonts.Font)>"
"<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>","<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>"
"<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)>"
"<android.view.textclassifier.ConversationActions$Message: void <clinit>()>","<android.view.textclassifier.ConversationActions$Message: void <clinit>()>"
"<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>","<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>"
"<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)>","<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)>"
"<android.widget.PopupWindow: boolean isShowing()>","<android.widget.PopupWindow: boolean isShowing()>"
"<java.util.Spliterator: long estimateSize()>","<java.util.Spliterator: long estimateSize()>"
"<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>","<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>"
"<android.view.textclassifier.TextSelection$Request: int getEndIndex()>","<android.view.textclassifier.TextSelection$Request: int getEndIndex()>"
"<java.time.temporal.ValueRange: long getLargestMinimum()>","<java.time.temporal.ValueRange: long getLargestMinimum()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<java.lang.System: java.nio.channels.Channel inheritedChannel()>","<java.lang.System: java.nio.channels.Channel inheritedChannel()>"
"<java.util.Calendar: void setTimeZone(java.util.TimeZone)>","<java.util.Calendar: void setTimeZone(java.util.TimeZone)>"
"<java.nio.LongBuffer: int hashCode()>","<java.nio.LongBuffer: int hashCode()>"
"<android.graphics.Region: int describeContents()>","<android.graphics.Region: int describeContents()>"
"<android.graphics.Canvas: boolean clipOutRect(float,float,float,float)>","<android.graphics.Canvas: boolean clipOutRect(float,float,float,float)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long addAndGet(java.lang.Object,long)>"
"<java.lang.StringBuffer: char charAt(int)>","<java.lang.StringBuffer: char charAt(int)>"
"<java.io.File: java.lang.String getParent()>","<java.io.File: java.lang.String getParent()>"
"<java.net.URLConnection: java.lang.Object getContent()>","<java.net.URLConnection: java.lang.Object getContent()>"
"<java.time.Duration: java.time.Duration minusMinutes(long)>","<java.time.Duration: java.time.Duration minusMinutes(long)>"
"<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>","<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>"
"<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>","<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>"
"<android.view.MotionEvent: float getHistoricalSize(int,int)>","<android.view.MotionEvent: float getHistoricalSize(int,int)>"
"<java.util.Arrays: short[] copyOfRange(short[],int,int)>","<java.util.Arrays: short[] copyOfRange(short[],int,int)>"
"<android.widget.Toolbar: void setTitleMarginBottom(int)>","<android.widget.Toolbar: void setTitleMarginBottom(int)>"
"<android.graphics.Canvas: void rotate(float,float,float)>","<android.graphics.Canvas: void rotate(float,float,float)>"
"<android.widget.AdapterView: int getLastVisiblePosition()>","<android.widget.AdapterView: int getLastVisiblePosition()>"
"<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>","<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>"
"<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>","<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>"
"<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>","<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>"
"<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromPendingIntent(android.app.PendingIntent)>","<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromPendingIntent(android.app.PendingIntent)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable,java.util.concurrent.RunnableScheduledFuture)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.util.concurrent.Callable,java.util.concurrent.RunnableScheduledFuture)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()>"
"<android.content.ContentValues: boolean containsKey(java.lang.String)>","<android.content.ContentValues: boolean containsKey(java.lang.String)>"
"<android.content.pm.PermissionInfo: int getProtectionFlags()>","<android.content.pm.PermissionInfo: int getProtectionFlags()>"
"<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>","<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent build()>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent build()>"
"<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>"
"<java.time.Duration: java.time.Duration abs()>","<java.time.Duration: java.time.Duration abs()>"
"<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>","<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
"<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>","<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>"
"<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.app.Notification$BubbleMetadata: boolean isNotificationSuppressed()>","<android.app.Notification$BubbleMetadata: boolean isNotificationSuppressed()>"
"<android.media.AudioAttributes: int hashCode()>","<android.media.AudioAttributes: int hashCode()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: void <clinit>()>","<android.view.textclassifier.TextClassifier$EntityConfig: void <clinit>()>"
"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>","<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>"
"<java.util.stream.LongStream: java.util.OptionalLong reduce(java.util.function.LongBinaryOperator)>","<java.util.stream.LongStream: java.util.OptionalLong reduce(java.util.function.LongBinaryOperator)>"
"<android.content.DialogInterface$OnDismissListener: void onDismiss(android.content.DialogInterface)>","<android.content.DialogInterface$OnDismissListener: void onDismiss(android.content.DialogInterface)>"
"<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>"
"<android.icu.util.ULocale: java.lang.String toLegacyKey(java.lang.String)>","<android.icu.util.ULocale: java.lang.String toLegacyKey(java.lang.String)>"
"<java.lang.String: java.lang.String toLowerCase()>","<java.lang.String: java.lang.String toLowerCase()>"
"<java.lang.Math: int negateExact(int)>","<java.lang.Math: int negateExact(int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>","<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>"
"<android.content.pm.PackageManager$Property: int describeContents()>","<android.content.pm.PackageManager$Property: int describeContents()>"
"<android.app.SharedElementCallback$OnSharedElementsReadyListener: void onSharedElementsReady()>","<android.app.SharedElementCallback$OnSharedElementsReadyListener: void onSharedElementsReady()>"
"<android.webkit.WebView: boolean pageDown(boolean)>","<android.webkit.WebView: boolean pageDown(boolean)>"
"<android.view.View: void setAlpha(float)>","<android.view.View: void setAlpha(float)>"
"<android.view.WindowManager$LayoutParams: void setBlurBehindRadius(int)>","<android.view.WindowManager$LayoutParams: void setBlurBehindRadius(int)>"
"<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>","<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>"
"<java.lang.Thread: java.lang.Object clone()>","<java.lang.Thread: java.lang.Object clone()>"
"<android.view.Surface: void setFrameRate(float,int,int)>","<android.view.Surface: void setFrameRate(float,int,int)>"
"<android.database.Cursor: java.lang.String getColumnName(int)>","<android.database.Cursor: java.lang.String getColumnName(int)>"
"<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<java.util.Date: int getYear()>","<java.util.Date: int getYear()>"
"<java.lang.UnsatisfiedLinkError: void <init>()>","<java.lang.UnsatisfiedLinkError: void <init>()>"
"<android.graphics.Typeface: void <init>()>","<android.graphics.Typeface: void <init>()>"
"<java.util.stream.IntStream: boolean noneMatch(java.util.function.IntPredicate)>","<java.util.stream.IntStream: boolean noneMatch(java.util.function.IntPredicate)>"
"<android.util.SizeF: void writeToParcel(android.os.Parcel,int)>","<android.util.SizeF: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Surface: android.graphics.Canvas lockHardwareCanvas()>","<android.view.Surface: android.graphics.Canvas lockHardwareCanvas()>"
"<java.util.SortedMap: java.util.Set entrySet()>","<java.util.SortedMap: java.util.Set entrySet()>"
"<android.view.Window: java.util.List getSystemGestureExclusionRects()>","<android.view.Window: java.util.List getSystemGestureExclusionRects()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(float)>","<java.lang.StringBuffer: java.lang.StringBuffer append(float)>"
"<java.io.ObjectOutputStream: void flush()>","<java.io.ObjectOutputStream: void flush()>"
"<java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>","<java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>"
"<android.webkit.WebSettings: int getTextZoom()>","<android.webkit.WebSettings: int getTextZoom()>"
"<java.util.Currency: int getNumericCode()>","<java.util.Currency: int getNumericCode()>"
"<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>"
"<java.lang.reflect.Modifier: boolean isSynchronized(int)>","<java.lang.reflect.Modifier: boolean isSynchronized(int)>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>"
"<java.net.URI: java.lang.String toString()>","<java.net.URI: java.lang.String toString()>"
"<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>","<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>"
"<java.io.FilterOutputStream: void write(int)>","<java.io.FilterOutputStream: void write(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayName()>","<android.icu.util.ULocale: java.lang.String getDisplayName()>"
"<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>","<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>"
"<android.content.Context: java.lang.String[] fileList()>","<android.content.Context: java.lang.String[] fileList()>"
"<android.content.ComponentName: java.lang.String toShortString()>","<android.content.ComponentName: java.lang.String toShortString()>"
"<android.view.textclassifier.TextLanguage$Builder: void <init>()>","<android.view.textclassifier.TextLanguage$Builder: void <init>()>"
"<org.json.JSONArray: java.lang.String toString(int)>","<org.json.JSONArray: java.lang.String toString(int)>"
"<android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)>","<android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)>"
"<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>","<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>"
"<android.text.SpannableString: int length()>","<android.text.SpannableString: int length()>"
"<android.view.ViewStructure: void setVisibility(int)>","<android.view.ViewStructure: void setVisibility(int)>"
"<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>","<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>"
"<java.util.stream.IntStream: java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction)>","<java.util.stream.IntStream: java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction)>"
"<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)>","<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)>"
"<io.flutter.embedding.android.l: void <init>(io.flutter.embedding.android.s$d$a)>","<io.flutter.embedding.android.l: void <init>(io.flutter.embedding.android.s$d$a)>"
"<android.net.Uri: java.lang.String getSchemeSpecificPart()>","<android.net.Uri: java.lang.String getSchemeSpecificPart()>"
"<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>","<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.animation.LayoutTransition: void setDuration(long)>","<android.animation.LayoutTransition: void setDuration(long)>"
"<android.widget.ImageView: void onVisibilityAggregated(boolean)>","<android.widget.ImageView: void onVisibilityAggregated(boolean)>"
"<android.widget.TextView: void setCompoundDrawableTintList(android.content.res.ColorStateList)>","<android.widget.TextView: void setCompoundDrawableTintList(android.content.res.ColorStateList)>"
"<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>","<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>"
"<android.content.BroadcastReceiver$PendingResult: void finish()>","<android.content.BroadcastReceiver$PendingResult: void finish()>"
"<android.os.ParcelFileDescriptor: int detachFd()>","<android.os.ParcelFileDescriptor: int detachFd()>"
"<android.text.TextPaint: void <init>()>","<android.text.TextPaint: void <init>()>"
"<java.security.cert.X509Certificate: java.util.Date getNotBefore()>","<java.security.cert.X509Certificate: java.util.Date getNotBefore()>"
"<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>","<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setJournalMode(java.lang.String)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setJournalMode(java.lang.String)>"
"<java.lang.Math: double IEEEremainder(double,double)>","<java.lang.Math: double IEEEremainder(double,double)>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection build()>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection build()>"
"<android.widget.TextView: boolean performLongClick()>","<android.widget.TextView: boolean performLongClick()>"
"<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>","<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>"
"<android.view.DragEvent: void <init>()>","<android.view.DragEvent: void <init>()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: int getIndex()>","<android.app.VoiceInteractor$PickOptionRequest$Option: int getIndex()>"
"<android.view.translation.TranslationResponseValue: int hashCode()>","<android.view.translation.TranslationResponseValue: int hashCode()>"
"<android.view.inputmethod.BaseInputConnection: void closeConnection()>","<android.view.inputmethod.BaseInputConnection: void closeConnection()>"
"<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>","<android.webkit.WebView: void setVerticalScrollbarOverlay(boolean)>"
"<java.nio.CharBuffer: java.nio.Buffer position(int)>","<java.nio.CharBuffer: java.nio.Buffer position(int)>"
"<java.util.stream.LongStream: java.util.stream.LongStream rangeClosed(long,long)>","<java.util.stream.LongStream: java.util.stream.LongStream rangeClosed(long,long)>"
"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>","<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>"
"<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>"
"<android.app.ActivityManager$RunningTaskInfo: int describeContents()>","<android.app.ActivityManager$RunningTaskInfo: int describeContents()>"
"<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>","<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>"
"<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>","<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>"
"<java.lang.InstantiationError: void <init>(java.lang.String)>","<java.lang.InstantiationError: void <init>(java.lang.String)>"
"<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getCreationTime()>","<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getCreationTime()>"
"<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>","<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>"
"<java.net.SocketImpl: void accept(java.net.SocketImpl)>","<java.net.SocketImpl: void accept(java.net.SocketImpl)>"
"<java.math.BigInteger: int hashCode()>","<java.math.BigInteger: int hashCode()>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDeleteIntent(android.app.PendingIntent)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDeleteIntent(android.app.PendingIntent)>"
"<java.lang.'annotation'.RetentionPolicy: void <init>(java.lang.String,int)>","<java.lang.'annotation'.RetentionPolicy: void <init>(java.lang.String,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)>"
"<java.util.Arrays: int mismatch(int[],int,int,int[],int,int)>","<java.util.Arrays: int mismatch(int[],int,int,int[],int,int)>"
"<android.graphics.RenderNode: boolean isForceDarkAllowed()>","<android.graphics.RenderNode: boolean isForceDarkAllowed()>"
"<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>","<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>"
"<android.graphics.Paint: void setTextSize(float)>","<android.graphics.Paint: void setTextSize(float)>"
"<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>","<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>"
"<android.graphics.RecordingCanvas: void drawColor(long,android.graphics.BlendMode)>","<android.graphics.RecordingCanvas: void drawColor(long,android.graphics.BlendMode)>"
"<android.view.ViewParent: int getTextDirection()>","<android.view.ViewParent: int getTextDirection()>"
"<android.media.Rating: boolean isThumbUp()>","<android.media.Rating: boolean isThumbUp()>"
"<android.content.pm.PackageManager$Property: boolean isInteger()>","<android.content.pm.PackageManager$Property: boolean isInteger()>"
"<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()>","<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()>"
"<java.time.Instant: int hashCode()>","<java.time.Instant: int hashCode()>"
"<android.view.ViewGroup: boolean isLayoutSuppressed()>","<android.view.ViewGroup: boolean isLayoutSuppressed()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>","<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>"
"<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View,float,float)>","<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View,float,float)>"
"<android.text.Selection: void setSelection(android.text.Spannable,int)>","<android.text.Selection: void setSelection(android.text.Spannable,int)>"
"<android.view.textclassifier.ConversationActions$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.ConversationActions$Request: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: boolean equals(boolean[],int,int,boolean[],int,int)>","<java.util.Arrays: boolean equals(boolean[],int,int,boolean[],int,int)>"
"<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>","<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>"
"<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>","<android.webkit.WebSettings: boolean getMediaPlaybackRequiresUserGesture()>"
"<java.lang.RuntimeException: void <init>()>","<java.lang.RuntimeException: void <init>()>"
"<android.graphics.Paint: void setFlags(int)>","<android.graphics.Paint: void setFlags(int)>"
"<java.io.ByteArrayInputStream: byte[] readAllBytes()>","<java.io.ByteArrayInputStream: byte[] readAllBytes()>"
"<android.os.Debug: void resetGlobalExternalAllocSize()>","<android.os.Debug: void resetGlobalExternalAllocSize()>"
"<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()>","<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()>"
"<java.lang.Throwable: void <init>(java.lang.Throwable)>","<java.lang.Throwable: void <init>(java.lang.Throwable)>"
"<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>","<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>"
"<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)>","<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)>"
"<android.app.Notification: long getTimeoutAfter()>","<android.app.Notification: long getTimeoutAfter()>"
"<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)>","<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setMaxSuggestions(int)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setMaxSuggestions(int)>"
"<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>","<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>"
"<android.webkit.WebResourceRequest: android.net.Uri getUrl()>","<android.webkit.WebResourceRequest: android.net.Uri getUrl()>"
"<android.app.Notification$Action$Builder: void <init>(android.app.Notification$Action)>","<android.app.Notification$Action$Builder: void <init>(android.app.Notification$Action)>"
"<android.animation.Keyframe: void setValue(java.lang.Object)>","<android.animation.Keyframe: void setValue(java.lang.Object)>"
"<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>","<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>"
"<java.lang.NumberFormatException: void <init>()>","<java.lang.NumberFormatException: void <init>()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.app.ActivityManager$TaskDescription: void <init>()>","<android.app.ActivityManager$TaskDescription: void <init>()>"
"<android.app.Notification$Builder: android.widget.RemoteViews createBigContentView()>","<android.app.Notification$Builder: android.widget.RemoteViews createBigContentView()>"
"<java.util.LinkedList: boolean addAll(int,java.util.Collection)>","<java.util.LinkedList: boolean addAll(int,java.util.Collection)>"
"<android.widget.TextView: boolean onTextContextMenuItem(int)>","<android.widget.TextView: boolean onTextContextMenuItem(int)>"
"<android.graphics.RecordingCanvas: void drawPoint(float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPoint(float,float,android.graphics.Paint)>"
"<java.util.Arrays: int deepHashCode(java.lang.Object[])>","<java.util.Arrays: int deepHashCode(java.lang.Object[])>"
"<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>"
"<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View)>","<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View)>"
"<android.view.View: void setTop(int)>","<android.view.View: void setTop(int)>"
"<java.util.Locale$Category: void <init>(java.lang.String,int)>","<java.util.Locale$Category: void <init>(java.lang.String,int)>"
"<android.view.MenuItem: android.graphics.PorterDuff$Mode getIconTintMode()>","<android.view.MenuItem: android.graphics.PorterDuff$Mode getIconTintMode()>"
"<java.util.Collections: java.util.Map emptyMap()>","<java.util.Collections: java.util.Map emptyMap()>"
"<android.util.Rational: java.lang.String toString()>","<android.util.Rational: java.lang.String toString()>"
"<java.util.Spliterator$OfPrimitive: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfPrimitive: java.util.Spliterator trySplit()>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putText(java.lang.String,java.lang.CharSequence)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putText(java.lang.String,java.lang.CharSequence)>"
"<java.util.Locale: void <init>(java.lang.String)>","<java.util.Locale: void <init>(java.lang.String)>"
"<android.view.View: int computeVerticalScrollExtent()>","<android.view.View: int computeVerticalScrollExtent()>"
"<java.util.HashMap: void putAll(java.util.Map)>","<java.util.HashMap: void putAll(java.util.Map)>"
"<android.view.DisplayCutout: java.lang.String toString()>","<android.view.DisplayCutout: java.lang.String toString()>"
"<android.view.Menu: android.view.MenuItem findItem(int)>","<android.view.Menu: android.view.MenuItem findItem(int)>"
"<android.app.ActionBar: int getNavigationMode()>","<android.app.ActionBar: int getNavigationMode()>"
"<java.util.AbstractSet: boolean removeAll(java.util.Collection)>","<java.util.AbstractSet: boolean removeAll(java.util.Collection)>"
"<java.util.LinkedHashSet: void <init>(int)>","<java.util.LinkedHashSet: void <init>(int)>"
"<android.webkit.WebView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>","<android.webkit.WebView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>"
"<android.widget.AbsListView: void smoothScrollBy(int,int)>","<android.widget.AbsListView: void smoothScrollBy(int,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.view.View$OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>","<android.view.View$OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>"
"<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()>","<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()>"
"<android.content.Loader: void deliverResult(java.lang.Object)>","<android.content.Loader: void deliverResult(java.lang.Object)>"
"<android.content.ContextParams: android.content.AttributionSource getNextAttributionSource()>","<android.content.ContextParams: android.content.AttributionSource getNextAttributionSource()>"
"<android.view.View: boolean checkInputConnectionProxy(android.view.View)>","<android.view.View: boolean checkInputConnectionProxy(android.view.View)>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndSet(java.lang.Object)>"
"<android.view.ViewConfiguration: int getScaledScrollBarSize()>","<android.view.ViewConfiguration: int getScaledScrollBarSize()>"
"<java.nio.ByteOrder: java.lang.String toString()>","<java.nio.ByteOrder: java.lang.String toString()>"
"<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.widget.TextView: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.widget.TextView: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: boolean didTouchFocusSelect()>","<android.widget.TextView: boolean didTouchFocusSelect()>"
"<android.view.WindowInsetsAnimationController: int getTypes()>","<android.view.WindowInsetsAnimationController: int getTypes()>"
"<java.util.stream.IntStream: java.util.stream.IntStream distinct()>","<java.util.stream.IntStream: java.util.stream.IntStream distinct()>"
"<java.time.Instant: java.time.Instant plusMillis(long)>","<java.time.Instant: java.time.Instant plusMillis(long)>"
"<android.widget.TextView: int getTotalPaddingEnd()>","<android.widget.TextView: int getTotalPaddingEnd()>"
"<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.util.Map,java.io.InputStream)>","<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.util.Map,java.io.InputStream)>"
"<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)>","<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)>"
"<android.widget.AbsListView: void setCacheColorHint(int)>","<android.widget.AbsListView: void setCacheColorHint(int)>"
"<java.text.CharacterIterator: char next()>","<java.text.CharacterIterator: char next()>"
"<java.net.URLConnection: int getReadTimeout()>","<java.net.URLConnection: int getReadTimeout()>"
"<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.os.Parcel: int dataSize()>","<android.os.Parcel: int dataSize()>"
"<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>","<java.util.concurrent.BlockingQueue: boolean remove(java.lang.Object)>"
"<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>","<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>"
"<android.view.KeyEvent$Callback: boolean onKeyDown(int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.lang.StringBuffer: void <init>()>","<java.lang.StringBuffer: void <init>()>"
"<android.os.CancellationSignal: void throwIfCanceled()>","<android.os.CancellationSignal: void throwIfCanceled()>"
"<android.app.Notification$WearableExtender: android.app.Notification$Builder extend(android.app.Notification$Builder)>","<android.app.Notification$WearableExtender: android.app.Notification$Builder extend(android.app.Notification$Builder)>"
"<java.security.NoSuchProviderException: void <init>()>","<java.security.NoSuchProviderException: void <init>()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object updateAndGet(java.util.function.UnaryOperator)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object updateAndGet(java.util.function.UnaryOperator)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>"
"<android.content.ContentProvider: void <init>()>","<android.content.ContentProvider: void <init>()>"
"<java.io.ObjectOutputStream: void <init>()>","<java.io.ObjectOutputStream: void <init>()>"
"<android.view.Window: boolean getAllowEnterTransitionOverlap()>","<android.view.Window: boolean getAllowEnterTransitionOverlap()>"
"<java.time.LocalDate: java.time.LocalDate withMonth(int)>","<java.time.LocalDate: java.time.LocalDate withMonth(int)>"
"<android.media.session.MediaSession$Token: void <clinit>()>","<android.media.session.MediaSession$Token: void <clinit>()>"
"<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)>","<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Duration: java.time.Duration minus(java.time.Duration)>","<java.time.Duration: java.time.Duration minus(java.time.Duration)>"
"<android.widget.TextView: boolean isFallbackLineSpacing()>","<android.widget.TextView: boolean isFallbackLineSpacing()>"
"<android.graphics.Matrix: void <init>()>","<android.graphics.Matrix: void <init>()>"
"<android.graphics.drawable.Drawable: boolean canApplyTheme()>","<android.graphics.drawable.Drawable: boolean canApplyTheme()>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList withLStar(float)>","<android.content.res.ColorStateList: android.content.res.ColorStateList withLStar(float)>"
"<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>","<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>"
"<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)>","<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)>"
"<android.text.style.URLSpan: int describeContents()>","<android.text.style.URLSpan: int describeContents()>"
"<java.util.jar.JarFile: void <init>(java.lang.String)>","<java.util.jar.JarFile: void <init>(java.lang.String)>"
"<android.graphics.Matrix: void setScale(float,float)>","<android.graphics.Matrix: void setScale(float,float)>"
"<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>","<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>"
"<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.graphics.RecordingCanvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<android.os.VibrationAttributes: int describeContents()>","<android.os.VibrationAttributes: int describeContents()>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()>"
"<java.io.ObjectStreamField: boolean isUnshared()>","<java.io.ObjectStreamField: boolean isUnshared()>"
"<android.view.translation.ViewTranslationResponse: void <init>()>","<android.view.translation.ViewTranslationResponse: void <init>()>"
"<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>","<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>"
"<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>","<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>"
"<java.util.Calendar: int getMaximum(int)>","<java.util.Calendar: int getMaximum(int)>"
"<java.lang.Character: int charCount(int)>","<java.lang.Character: int charCount(int)>"
"<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>"
"<android.content.res.Configuration: int hashCode()>","<android.content.res.Configuration: int hashCode()>"
"<android.view.WindowInsetsController: void show(int)>","<android.view.WindowInsetsController: void show(int)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: java.util.concurrent.atomic.AtomicLongFieldUpdater newUpdater(java.lang.Class,java.lang.String)>"
"<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>","<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>"
"<android.util.Property: java.lang.String getName()>","<android.util.Property: java.lang.String getName()>"
"<java.net.InetAddress: boolean isMCSiteLocal()>","<java.net.InetAddress: boolean isMCSiteLocal()>"
"<android.content.Intent: java.lang.String getIdentifier()>","<android.content.Intent: java.lang.String getIdentifier()>"
"<android.graphics.drawable.Icon: int getType()>","<android.graphics.drawable.Icon: int getType()>"
"<javax.security.auth.Subject: boolean isReadOnly()>","<javax.security.auth.Subject: boolean isReadOnly()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>"
"<android.app.Notification$Builder: android.app.Notification$Builder setCustomHeadsUpContentView(android.widget.RemoteViews)>","<android.app.Notification$Builder: android.app.Notification$Builder setCustomHeadsUpContentView(android.widget.RemoteViews)>"
"<java.io.File: boolean isAbsolute()>","<java.io.File: boolean isAbsolute()>"
"<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>","<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>"
"<android.os.Parcel: void readFloatArray(float[])>","<android.os.Parcel: void readFloatArray(float[])>"
"<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>","<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>"
"<android.os.Messenger: android.os.IBinder getBinder()>","<android.os.Messenger: android.os.IBinder getBinder()>"
"<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>","<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>"
"<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>","<android.app.Notification$Builder: android.app.Notification$Builder addAction(android.app.Notification$Action)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection$Request)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder addItem(long,android.widget.RemoteViews)>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder addItem(long,android.widget.RemoteViews)>"
"<android.view.View: boolean isOpaque()>","<android.view.View: boolean isOpaque()>"
"<android.webkit.TracingController: boolean isTracing()>","<android.webkit.TracingController: boolean isTracing()>"
"<java.nio.channels.FileLock: void <init>(java.nio.channels.AsynchronousFileChannel,long,long,boolean)>","<java.nio.channels.FileLock: void <init>(java.nio.channels.AsynchronousFileChannel,long,long,boolean)>"
"<java.lang.Enum: void finalize()>","<java.lang.Enum: void finalize()>"
"<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()>","<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()>"
"<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>"
"<android.view.ViewStructure: void setAccessibilityFocused(boolean)>","<android.view.ViewStructure: void setAccessibilityFocused(boolean)>"
"<java.lang.Package: java.lang.String getName()>","<java.lang.Package: java.lang.String getName()>"
"<android.graphics.ColorSpace$Model: void <clinit>()>","<android.graphics.ColorSpace$Model: void <clinit>()>"
"<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setUsage(int)>","<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setUsage(int)>"
"<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle$Message)>","<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addHistoricMessage(android.app.Notification$MessagingStyle$Message)>"
"<android.app.ActivityManager$TaskDescription: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$TaskDescription: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void onDetachedFromWindow()>","<android.view.View: void onDetachedFromWindow()>"
"<android.widget.TextView: void setLetterSpacing(float)>","<android.widget.TextView: void setLetterSpacing(float)>"
"<android.widget.AbsListView: boolean onStartNestedScroll(android.view.View,android.view.View,int)>","<android.widget.AbsListView: boolean onStartNestedScroll(android.view.View,android.view.View,int)>"
"<java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)>","<java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)>"
"<android.os.Vibrator: boolean hasAmplitudeControl()>","<android.os.Vibrator: boolean hasAmplitudeControl()>"
"<java.nio.channels.Selector: int select(java.util.function.Consumer,long)>","<java.nio.channels.Selector: int select(java.util.function.Consumer,long)>"
"<android.app.Activity: void onVisibleBehindCanceled()>","<android.app.Activity: void onVisibleBehindCanceled()>"
"<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<java.text.CharacterIterator: int getEndIndex()>","<java.text.CharacterIterator: int getEndIndex()>"
"<android.view.Display: float[] getSupportedRefreshRates()>","<android.view.Display: float[] getSupportedRefreshRates()>"
"<java.nio.LongBuffer: int compareTo(java.lang.Object)>","<java.nio.LongBuffer: int compareTo(java.lang.Object)>"
"<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>","<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>"
"<android.os.CombinedVibration: int describeContents()>","<android.os.CombinedVibration: int describeContents()>"
"<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.time.temporal.ChronoField: long checkValidValue(long)>","<java.time.temporal.ChronoField: long checkValidValue(long)>"
"<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>","<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>"
"<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>","<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: int hashCode(short[])>","<java.util.Arrays: int hashCode(short[])>"
"<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>","<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>"
"<java.util.Locale: java.lang.String toString()>","<java.util.Locale: java.lang.String toString()>"
"<java.util.AbstractMap: java.util.Collection values()>","<java.util.AbstractMap: java.util.Collection values()>"
"<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>"
"<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>","<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>"
"<java.time.chrono.ChronoZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.chrono.ChronoZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.nio.LongBuffer: int arrayOffset()>","<java.nio.LongBuffer: int arrayOffset()>"
"<android.view.Choreographer$FrameTimeline: void <init>()>","<android.view.Choreographer$FrameTimeline: void <init>()>"
"<java.io.DataInput: int skipBytes(int)>","<java.io.DataInput: int skipBytes(int)>"
"<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>","<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.os.Debug$MemoryInfo: int getTotalPss()>","<android.os.Debug$MemoryInfo: int getTotalPss()>"
"<android.view.animation.Animation: boolean isInitialized()>","<android.view.animation.Animation: boolean isInitialized()>"
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>","<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>"
"<java.util.Arrays: java.lang.String toString(char[])>","<java.util.Arrays: java.lang.String toString(char[])>"
"<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>","<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>"
"<java.lang.Boolean: int compareTo(java.lang.Object)>","<java.lang.Boolean: int compareTo(java.lang.Object)>"
"<java.lang.Boolean: boolean logicalXor(boolean,boolean)>","<java.lang.Boolean: boolean logicalXor(boolean,boolean)>"
"<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long)>","<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long)>"
"<android.view.Menu: boolean hasVisibleItems()>","<android.view.Menu: boolean hasVisibleItems()>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>"
"<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>","<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Message: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.ConversationActions$Message: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Window: int getLocalFeatures()>","<android.view.Window: int getLocalFeatures()>"
"<java.lang.System: int identityHashCode(java.lang.Object)>","<java.lang.System: int identityHashCode(java.lang.Object)>"
"<android.app.RemoteInput: void addResultsToIntent(android.app.RemoteInput[],android.content.Intent,android.os.Bundle)>","<android.app.RemoteInput: void addResultsToIntent(android.app.RemoteInput[],android.content.Intent,android.os.Bundle)>"
"<android.media.session.MediaSession: void setRatingType(int)>","<android.media.session.MediaSession: void setRatingType(int)>"
"<java.lang.ClassLoader: void clearAssertionStatus()>","<java.lang.ClassLoader: void clearAssertionStatus()>"
"<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>","<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>"
"<java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>","<java.text.NumberFormat: java.text.NumberFormat getPercentInstance()>"
"<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>","<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>"
"<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>","<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)>","<android.app.Activity: void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)>"
"<android.widget.PopupWindow: float getElevation()>","<android.widget.PopupWindow: float getElevation()>"
"<android.view.View: boolean isImportantForAccessibility()>","<android.view.View: boolean isImportantForAccessibility()>"
"<java.math.BigInteger: java.math.BigInteger valueOf(long)>","<java.math.BigInteger: java.math.BigInteger valueOf(long)>"
"<android.print.PrintDocumentInfo: java.lang.String getName()>","<android.print.PrintDocumentInfo: java.lang.String getName()>"
"<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>","<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>"
"<android.os.Debug: int getGlobalAllocSize()>","<android.os.Debug: int getGlobalAllocSize()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>","<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>"
"<android.view.inputmethod.TextSnapshot: int getSelectionStart()>","<android.view.inputmethod.TextSnapshot: int getSelectionStart()>"
"<androidx.window.layout.a: void run()>","<androidx.window.layout.a: void run()>"
"<java.io.File: java.net.URI toURI()>","<java.io.File: java.net.URI toURI()>"
"<java.io.FileInputStream: int read(byte[],int,int)>","<java.io.FileInputStream: int read(byte[],int,int)>"
"<android.media.session.MediaController$TransportControls: void setRating(android.media.Rating)>","<android.media.session.MediaController$TransportControls: void setRating(android.media.Rating)>"
"<android.app.Activity: void setProgress(int)>","<android.app.Activity: void setProgress(int)>"
"<io.flutter.plugins.webviewflutter.n0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.n0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>","<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>"
"<android.graphics.Bitmap: boolean hasMipMap()>","<android.graphics.Bitmap: boolean hasMipMap()>"
"<android.media.session.MediaSession$QueueItem: long getQueueId()>","<android.media.session.MediaSession$QueueItem: long getQueueId()>"
"<android.view.Gravity: boolean isVertical(int)>","<android.view.Gravity: boolean isVertical(int)>"
"<android.text.Selection: void removeSelection(android.text.Spannable)>","<android.text.Selection: void removeSelection(android.text.Spannable)>"
"<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>","<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>"
"<android.animation.ValueAnimator: long getDuration()>","<android.animation.ValueAnimator: long getDuration()>"
"<java.time.LocalDate: java.time.LocalDate plusMonths(long)>","<java.time.LocalDate: java.time.LocalDate plusMonths(long)>"
"<android.icu.util.ULocale: int compareTo(java.lang.Object)>","<android.icu.util.ULocale: int compareTo(java.lang.Object)>"
"<android.app.VoiceInteractor$Request: void <init>()>","<android.app.VoiceInteractor$Request: void <init>()>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.ContentResolver,android.net.Uri)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.ContentResolver,android.net.Uri)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getUniqueId()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getUniqueId()>"
"<android.content.ClipData$Item: android.content.Intent getIntent()>","<android.content.ClipData$Item: android.content.Intent getIntent()>"
"<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>","<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>"
"<android.view.View: void bringToFront()>","<android.view.View: void bringToFront()>"
"<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>","<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>"
"<java.time.chrono.IsoChronology: int prolepticYear(java.time.chrono.Era,int)>","<java.time.chrono.IsoChronology: int prolepticYear(java.time.chrono.Era,int)>"
"<java.util.Dictionary: java.util.Enumeration elements()>","<java.util.Dictionary: java.util.Enumeration elements()>"
"<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)>","<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)>"
"<java.lang.ClassLoader: void <init>()>","<java.lang.ClassLoader: void <init>()>"
"<android.view.Window: void setColorMode(int)>","<android.view.Window: void setColorMode(int)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setHints(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setHints(java.util.Collection)>"
"<java.lang.StackOverflowError: void <init>()>","<java.lang.StackOverflowError: void <init>()>"
"<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>"
"<java.lang.reflect.Method: void <init>()>","<java.lang.reflect.Method: void <init>()>"
"<android.view.ViewStructure: void setAutofillOptions(java.lang.CharSequence[])>","<android.view.ViewStructure: void setAutofillOptions(java.lang.CharSequence[])>"
"<java.util.Arrays: int binarySearch(char[],char)>","<java.util.Arrays: int binarySearch(char[],char)>"
"<android.view.textclassifier.TextClassification$Request: int describeContents()>","<android.view.textclassifier.TextClassification$Request: int describeContents()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.Chronology getChronology()>"
"<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>","<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>"
"<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>","<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter(java.lang.String)>"
"<android.database.Cursor: boolean move(int)>","<android.database.Cursor: boolean move(int)>"
"<java.lang.Math: float fma(float,float,float)>","<java.lang.Math: float fma(float,float,float)>"
"<androidx.window.embedding.d: void <init>(androidx.window.embedding.SplitRule)>","<androidx.window.embedding.d: void <init>(androidx.window.embedding.SplitRule)>"
"<android.net.Uri: int compareTo(java.lang.Object)>","<android.net.Uri: int compareTo(java.lang.Object)>"
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"
"<android.media.session.MediaSession$Callback: void onSkipToPrevious()>","<android.media.session.MediaSession$Callback: void onSkipToPrevious()>"
"<android.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>"
"<java.io.File: java.io.File[] listFiles()>","<java.io.File: java.io.File[] listFiles()>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>"
"<android.view.View: boolean isHorizontalFadingEdgeEnabled()>","<android.view.View: boolean isHorizontalFadingEdgeEnabled()>"
"<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>","<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>"
"<android.view.ContentInfo: android.os.Bundle getExtras()>","<android.view.ContentInfo: android.os.Bundle getExtras()>"
"<android.webkit.WebSettings: void setDefaultFontSize(int)>","<android.webkit.WebSettings: void setDefaultFontSize(int)>"
"<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger and(java.math.BigInteger)>"
"<android.app.Notification$Builder: android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification)>","<android.app.Notification$Builder: android.app.Notification$Builder recoverBuilder(android.content.Context,android.app.Notification)>"
"<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>"
"<android.view.ViewStructure: void setFocused(boolean)>","<android.view.ViewStructure: void setFocused(boolean)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>"
"<android.widget.RemoteViews: void setViewOutlinePreferredRadius(int,float,int)>","<android.widget.RemoteViews: void setViewOutlinePreferredRadius(int,float,int)>"
"<java.time.chrono.IsoChronology: void <init>()>","<java.time.chrono.IsoChronology: void <init>()>"
"<android.os.Parcel: void writeStringList(java.util.List)>","<android.os.Parcel: void writeStringList(java.util.List)>"
"<java.net.Socket: void setReceiveBufferSize(int)>","<java.net.Socket: void setReceiveBufferSize(int)>"
"<android.view.KeyEvent: boolean isPrintingKey()>","<android.view.KeyEvent: boolean isPrintingKey()>"
"<org.json.JSONObject: int optInt(java.lang.String)>","<org.json.JSONObject: int optInt(java.lang.String)>"
"<android.util.SparseIntArray: void setValueAt(int,int)>","<android.util.SparseIntArray: void setValueAt(int,int)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)>"
"<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>","<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>"
"<android.animation.Keyframe: android.animation.Keyframe clone()>","<android.animation.Keyframe: android.animation.Keyframe clone()>"
"<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setReadPendingIntent(android.app.PendingIntent)>","<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setReadPendingIntent(android.app.PendingIntent)>"
"<android.app.Notification$Style: void internalSetSummaryText(java.lang.CharSequence)>","<android.app.Notification$Style: void internalSetSummaryText(java.lang.CharSequence)>"
"<java.text.AttributedCharacterIterator$Attribute: int hashCode()>","<java.text.AttributedCharacterIterator$Attribute: int hashCode()>"
"<android.media.session.MediaSession$Callback: void <init>()>","<android.media.session.MediaSession$Callback: void <init>()>"
"<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: void fill(long[],long)>","<java.util.Arrays: void fill(long[],long)>"
"<java.io.PrintStream: void println(float)>","<java.io.PrintStream: void println(float)>"
"<java.util.concurrent.atomic.AtomicInteger: int get()>","<java.util.concurrent.atomic.AtomicInteger: int get()>"
"<android.transition.Transition: void setMatchOrder(int[])>","<android.transition.Transition: void setMatchOrder(int[])>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setIcon(android.graphics.drawable.Icon)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setIcon(android.graphics.drawable.Icon)>"
"<java.util.ArrayDeque: java.util.Iterator iterator()>","<java.util.ArrayDeque: java.util.Iterator iterator()>"
"<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.lang.Integer: int numberOfTrailingZeros(int)>","<java.lang.Integer: int numberOfTrailingZeros(int)>"
"<android.view.ViewConfiguration: int getTapTimeout()>","<android.view.ViewConfiguration: int getTapTimeout()>"
"<java.util.LinkedList: java.lang.Object pop()>","<java.util.LinkedList: java.lang.Object pop()>"
"<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()>","<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object compareAndExchangeRelease(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object compareAndExchangeRelease(java.lang.Object,java.lang.Object)>"
"<android.os.Build: java.util.List getFingerprintedPartitions()>","<android.os.Build: java.util.List getFingerprintedPartitions()>"
"<android.app.Notification: boolean hasImage()>","<android.app.Notification: boolean hasImage()>"
"<java.time.Instant: boolean isBefore(java.time.Instant)>","<java.time.Instant: boolean isBefore(java.time.Instant)>"
"<android.view.textclassifier.TextClassifierEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassifierEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Paint: boolean isUnderlineText()>","<android.graphics.Paint: boolean isUnderlineText()>"
"<java.lang.ThreadGroup: void <init>(java.lang.String)>","<java.lang.ThreadGroup: void <init>(java.lang.String)>"
"<android.view.WindowId: void writeToParcel(android.os.Parcel,int)>","<android.view.WindowId: void writeToParcel(android.os.Parcel,int)>"
"<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>","<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>"
"<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)>","<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean,android.text.TextUtils$TruncateAt,int)>"
"<android.content.SharedPreferences: float getFloat(java.lang.String,float)>","<android.content.SharedPreferences: float getFloat(java.lang.String,float)>"
"<io.flutter.plugins.webviewflutter.g: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.g: void a(java.lang.Object)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)>"
"<java.security.cert.X509Certificate: int getBasicConstraints()>","<java.security.cert.X509Certificate: int getBasicConstraints()>"
"<android.graphics.Rect: int height()>","<android.graphics.Rect: int height()>"
"<java.lang.Enum: int compareTo(java.lang.Enum)>","<java.lang.Enum: int compareTo(java.lang.Enum)>"
"<android.graphics.RectF: float width()>","<android.graphics.RectF: float width()>"
"<java.lang.CloneNotSupportedException: void <init>()>","<java.lang.CloneNotSupportedException: void <init>()>"
"<java.time.Duration: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.Duration: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<java.time.temporal.TemporalField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)>","<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)>"
"<android.graphics.Region: boolean quickReject(android.graphics.Rect)>","<android.graphics.Region: boolean quickReject(android.graphics.Rect)>"
"<android.app.VoiceInteractor$Prompt: int countVoicePrompts()>","<android.app.VoiceInteractor$Prompt: int countVoicePrompts()>"
"<android.graphics.RenderNode: boolean getClipToBounds()>","<android.graphics.RenderNode: boolean getClipToBounds()>"
"<android.view.WindowInsetsController: void removeOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>","<android.view.WindowInsetsController: void removeOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>"
"<android.graphics.ColorSpace: void <init>()>","<android.graphics.ColorSpace: void <init>()>"
"<java.security.cert.Certificate: void verify(java.security.PublicKey)>","<java.security.cert.Certificate: void verify(java.security.PublicKey)>"
"<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>","<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>"
"<android.media.Image: int getDataSpace()>","<android.media.Image: int getDataSpace()>"
"<java.text.FieldPosition: int getEndIndex()>","<java.text.FieldPosition: int getEndIndex()>"
"<org.json.JSONArray: boolean isNull(int)>","<org.json.JSONArray: boolean isNull(int)>"
"<android.app.Dialog: android.view.View findViewById(int)>","<android.app.Dialog: android.view.View findViewById(int)>"
"<java.lang.SecurityManager: boolean inClassLoader()>","<java.lang.SecurityManager: boolean inClassLoader()>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>"
"<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>","<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>"
"<java.net.Socket: java.util.Set supportedOptions()>","<java.net.Socket: java.util.Set supportedOptions()>"
"<java.util.function.IntConsumer: void accept(int)>","<java.util.function.IntConsumer: void accept(int)>"
"<android.graphics.RectF: void inset(float,float)>","<android.graphics.RectF: void inset(float,float)>"
"<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>","<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>"
"<android.widget.Filter$FilterResults: void <init>()>","<android.widget.Filter$FilterResults: void <init>()>"
"<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<android.os.Build: java.lang.String getSerial()>","<android.os.Build: java.lang.String getSerial()>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,android.icu.util.ULocale[],boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,android.icu.util.ULocale[],boolean[])>"
"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>","<org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)>"
"<android.webkit.CookieManager: boolean hasCookies()>","<android.webkit.CookieManager: boolean hasCookies()>"
"<android.os.Parcel: void readByteArray(byte[])>","<android.os.Parcel: void readByteArray(byte[])>"
"<android.widget.TextView$OnEditorActionListener: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>","<android.widget.TextView$OnEditorActionListener: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>"
"<android.app.Notification$BubbleMetadata: int getDesiredHeightResId()>","<android.app.Notification$BubbleMetadata: int getDesiredHeightResId()>"
"<android.view.Surface: void release()>","<android.view.Surface: void release()>"
"<android.database.sqlite.SQLiteStatement: void <init>()>","<android.database.sqlite.SQLiteStatement: void <init>()>"
"<java.util.stream.LongStream: java.util.stream.LongStream distinct()>","<java.util.stream.LongStream: java.util.stream.LongStream distinct()>"
"<android.view.textclassifier.TextClassification: java.lang.String toString()>","<android.view.textclassifier.TextClassification: java.lang.String toString()>"
"<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>","<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>"
"<java.time.Clock: java.time.Clock systemDefaultZone()>","<java.time.Clock: java.time.Clock systemDefaultZone()>"
"<android.app.FragmentTransaction: int commitAllowingStateLoss()>","<android.app.FragmentTransaction: int commitAllowingStateLoss()>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>"
"<android.view.Window: void setResizingCaptionDrawable(android.graphics.drawable.Drawable)>","<android.view.Window: void setResizingCaptionDrawable(android.graphics.drawable.Drawable)>"
"<u0.t: void <init>()>","<u0.t: void <init>()>"
"<org.json.JSONArray: java.lang.Object get(int)>","<org.json.JSONArray: java.lang.Object get(int)>"
"<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>","<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>"
"<java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>","<java.util.concurrent.LinkedBlockingQueue: java.util.Spliterator spliterator()>"
"<java.lang.reflect.Method: boolean isSynthetic()>","<java.lang.reflect.Method: boolean isSynthetic()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.app.FragmentManager,android.app.Fragment)>"
"<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)>","<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)>"
"<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>","<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>"
"<android.widget.Toolbar: void dismissPopupMenus()>","<android.widget.Toolbar: void dismissPopupMenus()>"
"<android.view.WindowInsetsController: int getSystemBarsBehavior()>","<android.view.WindowInsetsController: int getSystemBarsBehavior()>"
"<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>","<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>"
"<android.animation.Animator: long getDuration()>","<android.animation.Animator: long getDuration()>"
"<android.webkit.TracingConfig: int getTracingMode()>","<android.webkit.TracingConfig: int getTracingMode()>"
"<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode[] values()>","<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode[] values()>"
"<java.util.IdentityHashMap: void <init>()>","<java.util.IdentityHashMap: void <init>()>"
"<android.view.accessibility.AccessibilityEvent: void recycle()>","<android.view.accessibility.AccessibilityEvent: void recycle()>"
"<android.text.style.CharacterStyle: void <init>()>","<android.text.style.CharacterStyle: void <init>()>"
"<java.util.regex.MatchResult: int start(int)>","<java.util.regex.MatchResult: int start(int)>"
"<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>","<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>"
"<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusStrokeWidth()>","<android.view.accessibility.AccessibilityManager: int getAccessibilityFocusStrokeWidth()>"
"<android.util.Log: int w(java.lang.String,java.lang.String)>","<android.util.Log: int w(java.lang.String,java.lang.String)>"
"<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>","<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>"
"<android.os.Handler: boolean sendEmptyMessage(int)>","<android.os.Handler: boolean sendEmptyMessage(int)>"
"<java.util.Hashtable: void <init>()>","<java.util.Hashtable: void <init>()>"
"<android.content.Context: int getWallpaperDesiredMinimumHeight()>","<android.content.Context: int getWallpaperDesiredMinimumHeight()>"
"<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>","<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>"
"<java.io.Console: java.lang.String readLine()>","<java.io.Console: java.lang.String readLine()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setUsage(long)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setUsage(long)>"
"<java.nio.channels.MulticastChannel: void close()>","<java.nio.channels.MulticastChannel: void close()>"
"<android.webkit.WebSettings: boolean getAllowFileAccessFromFileURLs()>","<android.webkit.WebSettings: boolean getAllowFileAccessFromFileURLs()>"
"<android.view.View: int generateViewId()>","<android.view.View: int generateViewId()>"
"<android.view.Menu: void removeItem(int)>","<android.view.Menu: void removeItem(int)>"
"<android.app.RemoteAction: void <clinit>()>","<android.app.RemoteAction: void <clinit>()>"
"<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<java.time.LocalDateTime: int hashCode()>","<java.time.LocalDateTime: int hashCode()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>"
"<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setDay(int)>","<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setDay(int)>"
"<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>","<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>"
"<android.app.Activity: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>","<android.app.Activity: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>"
"<java.lang.reflect.Field: void setLong(java.lang.Object,long)>","<java.lang.reflect.Field: void setLong(java.lang.Object,long)>"
"<android.view.MotionEvent: int getButtonState()>","<android.view.MotionEvent: int getButtonState()>"
"<android.media.session.PlaybackState$CustomAction: java.lang.String getAction()>","<android.media.session.PlaybackState$CustomAction: java.lang.String getAction()>"
"<java.lang.Thread: void resume()>","<java.lang.Thread: void resume()>"
"<java.time.Period: java.time.Period ofMonths(int)>","<java.time.Period: java.time.Period ofMonths(int)>"
"<java.time.Duration: long dividedBy(java.time.Duration)>","<java.time.Duration: long dividedBy(java.time.Duration)>"
"<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>","<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>"
"<android.app.PictureInPictureUiState: void <init>()>","<android.app.PictureInPictureUiState: void <init>()>"
"<java.lang.Character: boolean isDefined(int)>","<java.lang.Character: boolean isDefined(int)>"
"<android.view.View: int getHorizontalScrollbarHeight()>","<android.view.View: int getHorizontalScrollbarHeight()>"
"<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>"
"<java.net.MalformedURLException: void <init>()>","<java.net.MalformedURLException: void <init>()>"
"<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel position(long)>","<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel position(long)>"
"<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>","<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>"
"<java.lang.ClassCastException: void <init>(java.lang.String)>","<java.lang.ClassCastException: void <init>(java.lang.String)>"
"<java.net.ProtocolFamily: java.lang.String name()>","<java.net.ProtocolFamily: java.lang.String name()>"
"<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize valueOf(java.lang.String)>","<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize valueOf(java.lang.String)>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle showBigPictureWhenCollapsed(boolean)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle showBigPictureWhenCollapsed(boolean)>"
"<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)>","<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)>"
"<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,int)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setHidden(boolean)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setHidden(boolean)>"
"<android.os.CombinedVibration: void <init>()>","<android.os.CombinedVibration: void <init>()>"
"<android.view.View: void setDrawingCacheQuality(int)>","<android.view.View: void setDrawingCacheQuality(int)>"
"<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>","<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>"
"<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)>","<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)>"
"<java.lang.Thread: void stop(java.lang.Throwable)>","<java.lang.Thread: void stop(java.lang.Throwable)>"
"<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()>","<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()>"
"<java.util.concurrent.ThreadLocalRandom: long nextLong(long,long)>","<java.util.concurrent.ThreadLocalRandom: long nextLong(long,long)>"
"<android.view.ViewStructure: void setAlpha(float)>","<android.view.ViewStructure: void setAlpha(float)>"
"<android.database.Cursor: long getLong(int)>","<android.database.Cursor: long getLong(int)>"
"<android.os.VibrationAttributes: android.os.VibrationAttributes createForUsage(int)>","<android.os.VibrationAttributes: android.os.VibrationAttributes createForUsage(int)>"
"<android.os.Parcel: android.os.IBinder[] createBinderArray()>","<android.os.Parcel: android.os.IBinder[] createBinderArray()>"
"<android.widget.ImageView: void setAdjustViewBounds(boolean)>","<android.widget.ImageView: void setAdjustViewBounds(boolean)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setInsertionMarkerLocation(float,float,float,float,int)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setInsertionMarkerLocation(float,float,float,float,int)>"
"<android.view.ViewParent: void clearChildFocus(android.view.View)>","<android.view.ViewParent: void clearChildFocus(android.view.View)>"
"<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>","<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>"
"<java.lang.Math: long max(long,long)>","<java.lang.Math: long max(long,long)>"
"<android.content.pm.PackageManager$Property: boolean isString()>","<android.content.pm.PackageManager$Property: boolean isString()>"
"<java.net.InetAddress: byte[] getAddress()>","<java.net.InetAddress: byte[] getAddress()>"
"<android.content.res.ColorStateList: void <init>(int[][],int[])>","<android.content.res.ColorStateList: void <init>(int[][],int[])>"
"<android.print.PageRange: boolean equals(java.lang.Object)>","<android.print.PageRange: boolean equals(java.lang.Object)>"
"<android.webkit.WebView: void onSizeChanged(int,int,int,int)>","<android.webkit.WebView: void onSizeChanged(int,int,int,int)>"
"<android.os.Handler$Callback: boolean handleMessage(android.os.Message)>","<android.os.Handler$Callback: boolean handleMessage(android.os.Message)>"
"<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>"
"<android.widget.TextView: boolean isSuggestionsEnabled()>","<android.widget.TextView: boolean isSuggestionsEnabled()>"
"<android.app.RemoteInput$Builder: void <init>(java.lang.String)>","<android.app.RemoteInput$Builder: void <init>(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowIndex(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowIndex(int)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setOnClickListener(android.view.View$OnClickListener)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setOnClickListener(android.view.View$OnClickListener)>"
"<java.lang.String: java.lang.String concat(java.lang.String)>","<java.lang.String: java.lang.String concat(java.lang.String)>"
"<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>"
"<android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean moveUp(android.text.Spannable,android.text.Layout)>"
"<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>","<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>"
"<java.io.File: boolean mkdirs()>","<java.io.File: boolean mkdirs()>"
"<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>","<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>"
"<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>","<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>"
"<android.transition.Transition: void setPathMotion(android.transition.PathMotion)>","<android.transition.Transition: void setPathMotion(android.transition.PathMotion)>"
"<android.util.SparseBooleanArray: int indexOfKey(int)>","<android.util.SparseBooleanArray: int indexOfKey(int)>"
"<android.webkit.ClientCertRequest: java.security.Principal[] getPrincipals()>","<android.webkit.ClientCertRequest: java.security.Principal[] getPrincipals()>"
"<java.nio.CharBuffer: boolean hasArray()>","<java.nio.CharBuffer: boolean hasArray()>"
"<java.io.BufferedReader: void <init>(java.io.Reader,int)>","<java.io.BufferedReader: void <init>(java.io.Reader,int)>"
"<android.text.PrecomputedText$Params: void <init>()>","<android.text.PrecomputedText$Params: void <init>()>"
"<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>","<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>"
"<java.net.DatagramSocket: void setTrafficClass(int)>","<java.net.DatagramSocket: void setTrafficClass(int)>"
"<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>","<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>"
"<android.widget.TextView: void setEnabled(boolean)>","<android.widget.TextView: void setEnabled(boolean)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>"
"<java.time.DayOfWeek: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.SurfaceControl$Transaction: void <init>()>","<android.view.SurfaceControl$Transaction: void <init>()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>"
"<android.print.PrintAttributes: android.print.PrintAttributes$MediaSize getMediaSize()>","<android.print.PrintAttributes: android.print.PrintAttributes$MediaSize getMediaSize()>"
"<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>","<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>"
"<java.nio.channels.ClosedChannelException: void <init>()>","<java.nio.channels.ClosedChannelException: void <init>()>"
"<java.io.ByteArrayOutputStream: void reset()>","<java.io.ByteArrayOutputStream: void reset()>"
"<android.graphics.Rect: int describeContents()>","<android.graphics.Rect: int describeContents()>"
"<android.view.KeyEvent: boolean isMetaPressed()>","<android.view.KeyEvent: boolean isMetaPressed()>"
"<android.content.pm.PackageManager: java.util.List queryReceiverProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryReceiverProperty(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>","<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>"
"<android.view.animation.Animation: java.lang.Object clone()>","<android.view.animation.Animation: java.lang.Object clone()>"
"<android.os.MemoryFile: void <init>(java.lang.String,int)>","<android.os.MemoryFile: void <init>(java.lang.String,int)>"
"<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.security.Provider$Service: java.lang.String toString()>","<java.security.Provider$Service: java.lang.String toString()>"
"<java.util.function.LongUnaryOperator: long applyAsLong(long)>","<java.util.function.LongUnaryOperator: long applyAsLong(long)>"
"<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>","<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>"
"<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View)>","<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View)>"
"<android.view.KeyEvent$DispatcherState: void <init>()>","<android.view.KeyEvent$DispatcherState: void <init>()>"
"<java.util.Deque: java.lang.Object getLast()>","<java.util.Deque: java.lang.Object getLast()>"
"<android.widget.ListView: void setHeaderDividersEnabled(boolean)>","<android.widget.ListView: void setHeaderDividersEnabled(boolean)>"
"<android.app.FragmentManager: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>","<android.app.FragmentManager: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>"
"<android.app.ActivityManager$RunningServiceInfo: int describeContents()>","<android.app.ActivityManager$RunningServiceInfo: int describeContents()>"
"<android.webkit.WebResourceResponse: java.io.InputStream getData()>","<android.webkit.WebResourceResponse: java.io.InputStream getData()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
"<java.math.BigInteger: long longValue()>","<java.math.BigInteger: long longValue()>"
"<java.io.ByteArrayInputStream: int readNBytes(byte[],int,int)>","<java.io.ByteArrayInputStream: int readNBytes(byte[],int,int)>"
"<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>","<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>"
"<android.widget.TextView: android.text.InputFilter[] getFilters()>","<android.widget.TextView: android.text.InputFilter[] getFilters()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)>"
"<java.lang.Integer: void <clinit>()>","<java.lang.Integer: void <clinit>()>"
"<java.time.Instant: java.time.Instant ofEpochMilli(long)>","<java.time.Instant: java.time.Instant ofEpochMilli(long)>"
"<java.io.DataInput: byte readByte()>","<java.io.DataInput: byte readByte()>"
"<android.content.pm.PackageManager$Property: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageManager$Property: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle setDeclineButtonColorHint(int)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle setDeclineButtonColorHint(int)>"
"<android.view.View: void setViewTranslationCallback(android.view.translation.ViewTranslationCallback)>","<android.view.View: void setViewTranslationCallback(android.view.translation.ViewTranslationCallback)>"
"<android.provider.Settings$Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.lang.StringBuffer: java.lang.String toString()>","<java.lang.StringBuffer: java.lang.String toString()>"
"<android.os.PatternMatcher: boolean match(java.lang.String)>","<android.os.PatternMatcher: boolean match(java.lang.String)>"
"<android.media.MediaDescription$Builder: void <init>()>","<android.media.MediaDescription$Builder: void <init>()>"
"<android.media.session.MediaSession$Callback: void onSkipToNext()>","<android.media.session.MediaSession$Callback: void onSkipToNext()>"
"<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>","<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>"
"<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>"
"<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])>","<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])>"
"<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>","<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>"
"<android.content.IntentFilter: void addCategory(java.lang.String)>","<android.content.IntentFilter: void addCategory(java.lang.String)>"
"<android.content.ContextWrapper: java.lang.String getPackageCodePath()>","<android.content.ContextWrapper: java.lang.String getPackageCodePath()>"
"<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>","<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>"
"<java.time.chrono.ChronoLocalDateTime: int hashCode()>","<java.time.chrono.ChronoLocalDateTime: int hashCode()>"
"<android.view.View: int getNextFocusForwardId()>","<android.view.View: int getNextFocusForwardId()>"
"<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>","<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>"
"<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()>","<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance()>"
"<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)>","<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)>"
"<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.text.style.LocaleSpan: android.os.LocaleList getLocales()>","<android.text.style.LocaleSpan: android.os.LocaleList getLocales()>"
"<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>","<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
"<android.view.Display: long getAppVsyncOffsetNanos()>","<android.view.Display: long getAppVsyncOffsetNanos()>"
"<android.content.ContentProviderResult: void <init>(android.os.Parcel)>","<android.content.ContentProviderResult: void <init>(android.os.Parcel)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer alignedSlice(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer alignedSlice(int)>"
"<android.graphics.Canvas: int getMaximumBitmapWidth()>","<android.graphics.Canvas: int getMaximumBitmapWidth()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>","<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>"
"<android.view.ActionMode: android.view.View getCustomView()>","<android.view.ActionMode: android.view.View getCustomView()>"
"<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>","<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.util.function.ToDoubleFunction: double applyAsDouble(java.lang.Object)>","<java.util.function.ToDoubleFunction: double applyAsDouble(java.lang.Object)>"
"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>","<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"
"<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)>"
"<io.flutter.plugin.platform.n: void onFocusChange(android.view.View,boolean)>","<io.flutter.plugin.platform.n: void onFocusChange(android.view.View,boolean)>"
"<android.view.contentcapture.ContentCaptureSession: void <init>()>","<android.view.contentcapture.ContentCaptureSession: void <init>()>"
"<android.view.Display$Mode: int describeContents()>","<android.view.Display$Mode: int describeContents()>"
"<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object)>"
"<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>","<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>"
"<java.time.LocalTime: java.time.LocalTime plusSeconds(long)>","<java.time.LocalTime: java.time.LocalTime plusSeconds(long)>"
"<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>","<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>"
"<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Debug: int getBinderReceivedTransactions()>","<android.os.Debug: int getBinderReceivedTransactions()>"
"<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>","<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>"
"<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextBeforeCursor(int,int)>","<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextBeforeCursor(int,int)>"
"<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>","<java.util.Calendar: java.util.Map getDisplayNames(int,int,java.util.Locale)>"
"<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token getMediaKeyEventSession()>","<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token getMediaKeyEventSession()>"
"<android.content.Context: void sendBroadcastWithMultiplePermissions(android.content.Intent,java.lang.String[])>","<android.content.Context: void sendBroadcastWithMultiplePermissions(android.content.Intent,java.lang.String[])>"
"<android.webkit.WebView: void goForward()>","<android.webkit.WebView: void goForward()>"
"<android.graphics.RectF: boolean intersect(float,float,float,float)>","<android.graphics.RectF: boolean intersect(float,float,float,float)>"
"<android.app.Service: int onStartCommand(android.content.Intent,int,int)>","<android.app.Service: int onStartCommand(android.content.Intent,int,int)>"
"<android.graphics.RenderNode: float getRotationX()>","<android.graphics.RenderNode: float getRotationX()>"
"<android.os.PersistableBundle: int describeContents()>","<android.os.PersistableBundle: int describeContents()>"
"<android.widget.PopupWindow: void showAsDropDown(android.view.View)>","<android.widget.PopupWindow: void showAsDropDown(android.view.View)>"
"<java.time.Instant: java.time.Instant plusNanos(long)>","<java.time.Instant: java.time.Instant plusNanos(long)>"
"<android.graphics.drawable.ColorDrawable: void getOutline(android.graphics.Outline)>","<android.graphics.drawable.ColorDrawable: void getOutline(android.graphics.Outline)>"
"<android.view.translation.TranslationResponseValue: int describeContents()>","<android.view.translation.TranslationResponseValue: int describeContents()>"
"<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>","<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>"
"<androidx.window.sidecar.SidecarProvider: androidx.window.sidecar.SidecarInterface getSidecarImpl(android.content.Context)>","<androidx.window.sidecar.SidecarProvider: androidx.window.sidecar.SidecarInterface getSidecarImpl(android.content.Context)>"
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit of(java.time.temporal.ChronoUnit)>","<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit of(java.time.temporal.ChronoUnit)>"
"<android.app.Notification$Builder: android.widget.RemoteViews createHeadsUpContentView()>","<android.app.Notification$Builder: android.widget.RemoteViews createHeadsUpContentView()>"
"<io.flutter.plugins.webviewflutter.d2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.d2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setHasStableIds(boolean)>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setHasStableIds(boolean)>"
"<android.view.RoundedCorner: java.lang.String toString()>","<android.view.RoundedCorner: java.lang.String toString()>"
"<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>","<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>"
"<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>","<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>"
"<java.lang.Throwable: void <init>(java.lang.String)>","<java.lang.Throwable: void <init>(java.lang.String)>"
"<java.security.Provider$Service: java.lang.String getType()>","<java.security.Provider$Service: java.lang.String getType()>"
"<android.view.SurfaceView: void onDetachedFromWindow()>","<android.view.SurfaceView: void onDetachedFromWindow()>"
"<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>","<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>"
"<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>","<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>"
"<java.time.ZoneId: java.time.ZoneId systemDefault()>","<java.time.ZoneId: java.time.ZoneId systemDefault()>"
"<android.view.displayhash.DisplayHash: java.lang.String toString()>","<android.view.displayhash.DisplayHash: java.lang.String toString()>"
"<android.graphics.Path$Op: android.graphics.Path$Op[] values()>","<android.graphics.Path$Op: android.graphics.Path$Op[] values()>"
"<java.net.DatagramPacket: int getOffset()>","<java.net.DatagramPacket: int getOffset()>"
"<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>"
"<android.graphics.Bitmap: void setWidth(int)>","<android.graphics.Bitmap: void setWidth(int)>"
"<android.content.pm.Attribution: void <init>()>","<android.content.pm.Attribution: void <init>()>"
"<android.os.MessageQueue$OnFileDescriptorEventListener: int onFileDescriptorEvents(java.io.FileDescriptor,int)>","<android.os.MessageQueue$OnFileDescriptorEventListener: int onFileDescriptorEvents(java.io.FileDescriptor,int)>"
"<android.content.ClipDescription: void <init>(android.content.ClipDescription)>","<android.content.ClipDescription: void <init>(android.content.ClipDescription)>"
"<java.util.NavigableMap: java.util.Map$Entry pollLastEntry()>","<java.util.NavigableMap: java.util.Map$Entry pollLastEntry()>"
"<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setDenominator(java.lang.String)>","<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setDenominator(java.lang.String)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void setRelease(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: void setRelease(int,java.lang.Object)>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setLocale(java.util.Locale)>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setLocale(java.util.Locale)>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
"<java.util.LinkedList: boolean contains(java.lang.Object)>","<java.util.LinkedList: boolean contains(java.lang.Object)>"
"<android.view.View: void setSystemUiVisibility(int)>","<android.view.View: void setSystemUiVisibility(int)>"
"<android.app.Dialog: int getVolumeControlStream()>","<android.app.Dialog: int getVolumeControlStream()>"
"<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>"
"<android.view.contentcapture.ContentCaptureContext: void writeToParcel(android.os.Parcel,int)>","<android.view.contentcapture.ContentCaptureContext: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void setHapticFeedbackEnabled(boolean)>","<android.view.View: void setHapticFeedbackEnabled(boolean)>"
"<java.lang.Double: java.lang.String toString()>","<java.lang.Double: java.lang.String toString()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(java.lang.Object[])>","<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(java.lang.Object[])>"
"<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>","<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>"
"<android.content.AttributionSource: int getUid()>","<android.content.AttributionSource: int getUid()>"
"<android.content.pm.PackageInstaller$Session: void fsync(java.io.OutputStream)>","<android.content.pm.PackageInstaller$Session: void fsync(java.io.OutputStream)>"
"<android.view.ViewGroup: void measureChildren(int,int)>","<android.view.ViewGroup: void measureChildren(int,int)>"
"<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.Buffer reset()>","<java.nio.DoubleBuffer: java.nio.Buffer reset()>"
"<android.view.accessibility.AccessibilityEvent: void setAction(int)>","<android.view.accessibility.AccessibilityEvent: void setAction(int)>"
"<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>","<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>"
"<android.app.Notification$DecoratedCustomViewStyle: void <init>()>","<android.app.Notification$DecoratedCustomViewStyle: void <init>()>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.Bitmap)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.Bitmap)>"
"<android.graphics.Insets: boolean equals(java.lang.Object)>","<android.graphics.Insets: boolean equals(java.lang.Object)>"
"<java.lang.NoSuchMethodError: void <init>()>","<java.lang.NoSuchMethodError: void <init>()>"
"<android.media.session.MediaController$TransportControls: void setPlaybackSpeed(float)>","<android.media.session.MediaController$TransportControls: void setPlaybackSpeed(float)>"
"<java.util.OptionalInt: void ifPresentOrElse(java.util.function.IntConsumer,java.lang.Runnable)>","<java.util.OptionalInt: void ifPresentOrElse(java.util.function.IntConsumer,java.lang.Runnable)>"
"<android.widget.TextView: void setWidth(int)>","<android.widget.TextView: void setWidth(int)>"
"<android.graphics.RectF: void union(float,float,float,float)>","<android.graphics.RectF: void union(float,float,float,float)>"
"<android.view.View: boolean requestFocus()>","<android.view.View: boolean requestFocus()>"
"<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>","<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>"
"<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>","<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>"
"<android.webkit.WebSettings: void <init>()>","<android.webkit.WebSettings: void <init>()>"
"<java.net.SocketOptions: void setOption(int,java.lang.Object)>","<java.net.SocketOptions: void setOption(int,java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>","<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>"
"<java.security.PrivilegedExceptionAction: java.lang.Object run()>","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"
"<android.os.CancellationSignal: void cancel()>","<android.os.CancellationSignal: void cancel()>"
"<java.lang.Exception: void <init>(java.lang.Throwable)>","<java.lang.Exception: void <init>(java.lang.Throwable)>"
"<java.lang.Class: java.lang.String getTypeName()>","<java.lang.Class: java.lang.String getTypeName()>"
"<android.animation.ValueAnimator: void reverse()>","<android.animation.ValueAnimator: void reverse()>"
"<android.view.WindowInsets$Type: int systemGestures()>","<android.view.WindowInsets$Type: int systemGestures()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace)>"
"<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>","<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>"
"<java.lang.Math: double ceil(double)>","<java.lang.Math: double ceil(double)>"
"<android.text.DynamicLayout: int getEllipsisStart(int)>","<android.text.DynamicLayout: int getEllipsisStart(int)>"
"<android.os.Message: boolean isAsynchronous()>","<android.os.Message: boolean isAsynchronous()>"
"<android.graphics.RenderNode: boolean isPivotExplicitlySet()>","<android.graphics.RenderNode: boolean isPivotExplicitlySet()>"
"<android.widget.PopupWindow: void setWindowLayoutType(int)>","<android.widget.PopupWindow: void setWindowLayoutType(int)>"
"<android.view.View: void dispatchSetActivated(boolean)>","<android.view.View: void dispatchSetActivated(boolean)>"
"<android.animation.PropertyValuesHolder: void setIntValues(int[])>","<android.animation.PropertyValuesHolder: void setIntValues(int[])>"
"<android.view.ViewStructure: java.lang.CharSequence getText()>","<android.view.ViewStructure: java.lang.CharSequence getText()>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])>"
"<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<java.lang.Long: int compare(long,long)>","<java.lang.Long: int compare(long,long)>"
"<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>","<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>"
"<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>","<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
"<java.lang.Character: boolean isWhitespace(int)>","<java.lang.Character: boolean isWhitespace(int)>"
"<java.lang.Character: void <init>(char)>","<java.lang.Character: void <init>(char)>"
"<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>","<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>"
"<java.io.File: boolean exists()>","<java.io.File: boolean exists()>"
"<android.util.Log: int e(java.lang.String,java.lang.String)>","<android.util.Log: int e(java.lang.String,java.lang.String)>"
"<java.nio.ShortBuffer: int arrayOffset()>","<java.nio.ShortBuffer: int arrayOffset()>"
"<java.util.OptionalLong: long getAsLong()>","<java.util.OptionalLong: long getAsLong()>"
"<java.time.Duration: int toHoursPart()>","<java.time.Duration: int toHoursPart()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollX()>","<android.view.accessibility.AccessibilityRecord: int getScrollX()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int)>"
"<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator andThen(java.util.function.LongUnaryOperator)>","<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator andThen(java.util.function.LongUnaryOperator)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean retainAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: boolean retainAll(java.util.Collection)>"
"<java.time.LocalDate: java.time.Period until(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: java.time.Period until(java.time.chrono.ChronoLocalDate)>"
"<android.text.DynamicLayout: int getBottomPadding()>","<android.text.DynamicLayout: int getBottomPadding()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)>"
"<java.util.concurrent.RejectedExecutionException: void <init>()>","<java.util.concurrent.RejectedExecutionException: void <init>()>"
"<java.util.ListIterator: boolean hasPrevious()>","<java.util.ListIterator: boolean hasPrevious()>"
"<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>","<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>"
"<java.io.ByteArrayOutputStream: void write(int)>","<java.io.ByteArrayOutputStream: void write(int)>"
"<android.view.KeyCharacterMap: int getModifierBehavior()>","<android.view.KeyCharacterMap: int getModifierBehavior()>"
"<java.io.ObjectInputStream: int skipBytes(int)>","<java.io.ObjectInputStream: int skipBytes(int)>"
"<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>","<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>"
"<java.lang.Class: boolean isInterface()>","<java.lang.Class: boolean isInterface()>"
"<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>","<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>"
"<android.view.AttachedSurfaceControl: void setTouchableRegion(android.graphics.Region)>","<android.view.AttachedSurfaceControl: void setTouchableRegion(android.graphics.Region)>"
"<java.lang.Double: double doubleValue()>","<java.lang.Double: double doubleValue()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object updateAndGet(java.lang.Object,java.util.function.UnaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object updateAndGet(java.lang.Object,java.util.function.UnaryOperator)>"
"<android.view.WindowInsets: int getSystemWindowInsetTop()>","<android.view.WindowInsets: int getSystemWindowInsetTop()>"
"<android.view.View: boolean hasFocus()>","<android.view.View: boolean hasFocus()>"
"<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>","<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>"
"<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader,java.lang.Class)>"
"<android.content.Intent: java.util.Set getCategories()>","<android.content.Intent: java.util.Set getCategories()>"
"<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>","<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request build()>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request build()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()>"
"<java.lang.Math: double cos(double)>","<java.lang.Math: double cos(double)>"
"<android.view.MotionEvent: float getHistoricalX(int,int)>","<android.view.MotionEvent: float getHistoricalX(int,int)>"
"<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>","<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>"
"<android.media.session.MediaSession$QueueItem: android.media.MediaDescription getDescription()>","<android.media.session.MediaSession$QueueItem: android.media.MediaDescription getDescription()>"
"<android.widget.AbsListView: boolean onInterceptHoverEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onInterceptHoverEvent(android.view.MotionEvent)>"
"<java.lang.StringBuilder: char charAt(int)>","<java.lang.StringBuilder: char charAt(int)>"
"<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()>","<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()>"
"<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence)>","<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence)>"
"<android.app.Activity: boolean setTranslucent(boolean)>","<android.app.Activity: boolean setTranslucent(boolean)>"
"<org.xmlpull.v1.XmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>","<org.xmlpull.v1.XmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>"
"<javax.security.auth.x500.X500Principal: void <init>(byte[])>","<javax.security.auth.x500.X500Principal: void <init>(byte[])>"
"<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>","<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>"
"<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>","<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>"
"<android.view.DragAndDropPermissions: void <init>()>","<android.view.DragAndDropPermissions: void <init>()>"
"<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>","<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>"
"<io.flutter.plugins.webviewflutter.m: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.m: void a(java.lang.Object,y.a$e)>"
"<android.widget.TextView: int getJustificationMode()>","<android.widget.TextView: int getJustificationMode()>"
"<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)>","<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)>"
"<android.widget.ListPopupWindow: int getVerticalOffset()>","<android.widget.ListPopupWindow: int getVerticalOffset()>"
"<android.widget.TextView: int getAutoSizeTextType()>","<android.widget.TextView: int getAutoSizeTextType()>"
"<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>","<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>"
"<io.flutter.plugins.webviewflutter.e1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.e1: void a(java.lang.Object,y.a$e)>"
"<java.time.Instant: long toEpochMilli()>","<java.time.Instant: long toEpochMilli()>"
"<android.widget.TextView: void setTextSelectHandle(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextSelectHandle(android.graphics.drawable.Drawable)>"
"<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction addTransactionCommittedListener(java.util.concurrent.Executor,android.view.SurfaceControl$TransactionCommittedListener)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction addTransactionCommittedListener(java.util.concurrent.Executor,android.view.SurfaceControl$TransactionCommittedListener)>"
"<android.app.RemoteAction: int describeContents()>","<android.app.RemoteAction: int describeContents()>"
"<android.webkit.WebView: void requestImageRef(android.os.Message)>","<android.webkit.WebView: void requestImageRef(android.os.Message)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordEndIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordEndIndex(int)>"
"<android.'annotation'.SuppressLint: java.lang.String[] value()>","<android.'annotation'.SuppressLint: java.lang.String[] value()>"
"<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>","<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoPeriod period(int,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoPeriod period(int,int,int)>"
"<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>"
"<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>","<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>"
"<android.print.PrintAttributes$MediaSize: int getHeightMils()>","<android.print.PrintAttributes$MediaSize: int getHeightMils()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>"
"<android.graphics.Path: android.graphics.Path$FillType getFillType()>","<android.graphics.Path: android.graphics.Path$FillType getFillType()>"
"<android.text.style.URLSpan: void onClick(android.view.View)>","<android.text.style.URLSpan: void onClick(android.view.View)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)>"
"<android.text.PrecomputedText: void <init>()>","<android.text.PrecomputedText: void <init>()>"
"<android.view.MotionEvent: float getToolMajor()>","<android.view.MotionEvent: float getToolMajor()>"
"<android.graphics.drawable.Drawable: void jumpToCurrentState()>","<android.graphics.drawable.Drawable: void jumpToCurrentState()>"
"<android.webkit.WebHistoryItem: void <init>()>","<android.webkit.WebHistoryItem: void <init>()>"
"<android.view.View: void <init>(android.content.Context)>","<android.view.View: void <init>(android.content.Context)>"
"<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.View: boolean isActivated()>","<android.view.View: boolean isActivated()>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusMonths(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusMonths(long)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog create()>","<android.app.AlertDialog$Builder: android.app.AlertDialog create()>"
"<io.flutter.embedding.android.o: void run()>","<io.flutter.embedding.android.o: void run()>"
"<android.animation.Animator: long getStartDelay()>","<android.animation.Animator: long getStartDelay()>"
"<java.text.Format: java.lang.Object parseObject(java.lang.String)>","<java.text.Format: java.lang.Object parseObject(java.lang.String)>"
"<android.os.Handler: void <init>(android.os.Handler$Callback)>","<android.os.Handler: void <init>(android.os.Handler$Callback)>"
"<android.view.DragAndDropPermissions: void writeToParcel(android.os.Parcel,int)>","<android.view.DragAndDropPermissions: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.atomic.AtomicInteger: int getPlain()>","<java.util.concurrent.atomic.AtomicInteger: int getPlain()>"
"<java.text.NumberFormat: int getMaximumFractionDigits()>","<java.text.NumberFormat: int getMaximumFractionDigits()>"
"<android.view.View: boolean isImportantForAutofill()>","<android.view.View: boolean isImportantForAutofill()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(java.lang.CharSequence)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(java.lang.CharSequence)>"
"<android.view.TextureView: void onSizeChanged(int,int,int,int)>","<android.view.TextureView: void onSizeChanged(int,int,int,int)>"
"<android.app.Activity: void finish()>","<android.app.Activity: void finish()>"
"<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>","<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>"
"<java.io.FileOutputStream: void <init>(java.io.File)>","<java.io.FileOutputStream: void <init>(java.io.File)>"
"<java.time.LocalTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>","<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>"
"<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction$Builder setExtras(android.os.Bundle)>","<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction$Builder setExtras(android.os.Bundle)>"
"<android.view.translation.TranslationCapability: int describeContents()>","<android.view.translation.TranslationCapability: int describeContents()>"
"<java.util.PriorityQueue: void <init>()>","<java.util.PriorityQueue: void <init>()>"
"<android.media.AudioAttributes: boolean isContentSpatialized()>","<android.media.AudioAttributes: boolean isContentSpatialized()>"
"<android.app.assist.AssistContent: boolean isAppProvidedIntent()>","<android.app.assist.AssistContent: boolean isAppProvidedIntent()>"
"<android.content.res.TypedArray: int getIndex(int)>","<android.content.res.TypedArray: int getIndex(int)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>"
"<java.time.Period: void <init>()>","<java.time.Period: void <init>()>"
"<android.os.Parcelable: int describeContents()>","<android.os.Parcelable: int describeContents()>"
"<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>","<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>"
"<android.view.ViewTreeObserver: void addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>","<android.view.ViewTreeObserver: void addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>"
"<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()>","<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()>"
"<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>","<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>"
"<io.flutter.plugins.webviewflutter.w1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.w1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.database.sqlite.SQLiteStatement: long executeInsert()>","<android.database.sqlite.SQLiteStatement: long executeInsert()>"
"<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>"
"<android.app.RemoteInput: java.lang.CharSequence[] getChoices()>","<android.app.RemoteInput: java.lang.CharSequence[] getChoices()>"
"<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>","<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>"
"<java.util.Arrays: void setAll(java.lang.Object[],java.util.function.IntFunction)>","<java.util.Arrays: void setAll(java.lang.Object[],java.util.function.IntFunction)>"
"<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState build()>","<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState build()>"
"<android.os.Debug: void startMethodTracing()>","<android.os.Debug: void startMethodTracing()>"
"<java.lang.Thread: void start()>","<java.lang.Thread: void start()>"
"<android.print.PrintAttributes: int hashCode()>","<android.print.PrintAttributes: int hashCode()>"
"<android.webkit.TracingConfig$Builder: void <init>()>","<android.webkit.TracingConfig$Builder: void <init>()>"
"<android.graphics.Point: void negate()>","<android.graphics.Point: void negate()>"
"<java.security.cert.CertPath: void <init>(java.lang.String)>","<java.security.cert.CertPath: void <init>(java.lang.String)>"
"<java.lang.String: int lastIndexOf(java.lang.String)>","<java.lang.String: int lastIndexOf(java.lang.String)>"
"<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>","<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>"
"<java.time.Period: java.time.Period normalized()>","<java.time.Period: java.time.Period normalized()>"
"<java.nio.file.Path: java.nio.file.Path getRoot()>","<java.nio.file.Path: java.nio.file.Path getRoot()>"
"<android.content.ContentValues: boolean equals(java.lang.Object)>","<android.content.ContentValues: boolean equals(java.lang.Object)>"
"<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>","<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>"
"<android.widget.Scroller: boolean isFinished()>","<android.widget.Scroller: boolean isFinished()>"
"<android.view.inputmethod.InputConnection: boolean finishComposingText()>","<android.view.inputmethod.InputConnection: boolean finishComposingText()>"
"<android.widget.ListView: long[] getCheckItemIds()>","<android.widget.ListView: long[] getCheckItemIds()>"
"<java.nio.channels.Selector: void close()>","<java.nio.channels.Selector: void close()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: int getSupportedAttributes()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: int getSupportedAttributes()>"
"<java.io.ObjectInputStream: void registerValidation(java.io.ObjectInputValidation,int)>","<java.io.ObjectInputStream: void registerValidation(java.io.ObjectInputValidation,int)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>"
"<android.view.MenuItem: int getAlphabeticModifiers()>","<android.view.MenuItem: int getAlphabeticModifiers()>"
"<android.view.View: boolean performHapticFeedback(int)>","<android.view.View: boolean performHapticFeedback(int)>"
"<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>","<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>"
"<android.content.pm.PackageInstaller$SessionParams: void setInstallLocation(int)>","<android.content.pm.PackageInstaller$SessionParams: void setInstallLocation(int)>"
"<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>","<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Notification$MessagingStyle$Message: void <init>(java.lang.CharSequence,long,java.lang.CharSequence)>","<android.app.Notification$MessagingStyle$Message: void <init>(java.lang.CharSequence,long,java.lang.CharSequence)>"
"<java.lang.Integer: int highestOneBit(int)>","<java.lang.Integer: int highestOneBit(int)>"
"<android.widget.AbsListView: int getVerticalScrollbarWidth()>","<android.widget.AbsListView: int getVerticalScrollbarWidth()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>"
"<android.graphics.RectF: int hashCode()>","<android.graphics.RectF: int hashCode()>"
"<android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)>","<android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)>"
"<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>","<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>"
"<android.os.Bundle: void putFloatArray(java.lang.String,float[])>","<android.os.Bundle: void putFloatArray(java.lang.String,float[])>"
"<java.nio.file.DirectoryStream: java.util.Iterator iterator()>","<java.nio.file.DirectoryStream: java.util.Iterator iterator()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeId(int)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeId(int)>"
"<java.time.LocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.LocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>","<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>"
"<java.io.InputStream: int readNBytes(byte[],int,int)>","<java.io.InputStream: int readNBytes(byte[],int,int)>"
"<android.app.Activity: boolean showAssist(android.os.Bundle)>","<android.app.Activity: boolean showAssist(android.os.Bundle)>"
"<io.flutter.plugins.webviewflutter.z2: void <init>()>","<io.flutter.plugins.webviewflutter.z2: void <init>()>"
"<java.util.Hashtable: void <init>(int,float)>","<java.util.Hashtable: void <init>(int,float)>"
"<android.view.KeyEvent: long getDownTime()>","<android.view.KeyEvent: long getDownTime()>"
"<android.view.View$MeasureSpec: void <init>()>","<android.view.View$MeasureSpec: void <init>()>"
"<java.lang.Float: float sum(float,float)>","<java.lang.Float: float sum(float,float)>"
"<android.animation.Animator: void <init>()>","<android.animation.Animator: void <init>()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>"
"<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>"
"<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>","<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>"
"<android.content.ContentProvider: boolean isTemporary()>","<android.content.ContentProvider: boolean isTemporary()>"
"<android.icu.util.ULocale: java.lang.String getName()>","<android.icu.util.ULocale: java.lang.String getName()>"
"<java.util.stream.LongStream: java.util.stream.LongStream skip(long)>","<java.util.stream.LongStream: java.util.stream.LongStream skip(long)>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream parallel()>","<java.util.stream.BaseStream: java.util.stream.BaseStream parallel()>"
"<android.os.Bundle: byte getByte(java.lang.String)>","<android.os.Bundle: byte getByte(java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence)>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float,float)>"
"<android.webkit.WebView: void enableSlowWholeDocumentDraw()>","<android.webkit.WebView: void enableSlowWholeDocumentDraw()>"
"<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)>","<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)>"
"<android.net.http.SslCertificate$DName: java.lang.String getDName()>","<android.net.http.SslCertificate$DName: java.lang.String getDName()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAuxiliary(boolean)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAuxiliary(boolean)>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap,int)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap,int)>"
"<android.content.res.Resources$Theme: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.Resources$Theme: android.graphics.drawable.Drawable getDrawable(int)>"
"<java.io.ByteArrayInputStream: int read(byte[],int,int)>","<java.io.ByteArrayInputStream: int read(byte[],int,int)>"
"<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String,java.lang.Class)>"
"<android.view.inputmethod.InputMethodInfo: int getConfigChanges()>","<android.view.inputmethod.InputMethodInfo: int getConfigChanges()>"
"<android.os.Parcel: java.lang.Object readTypedObject(android.os.Parcelable$Creator)>","<android.os.Parcel: java.lang.Object readTypedObject(android.os.Parcelable$Creator)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: int length()>","<java.util.concurrent.atomic.AtomicReferenceArray: int length()>"
"<java.util.Optional: boolean equals(java.lang.Object)>","<java.util.Optional: boolean equals(java.lang.Object)>"
"<java.lang.Math: double sinh(double)>","<java.lang.Math: double sinh(double)>"
"<java.lang.Character: char lowSurrogate(int)>","<java.lang.Character: char lowSurrogate(int)>"
"<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>","<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>"
"<java.io.ObjectOutput: void write(int)>","<java.io.ObjectOutput: void write(int)>"
"<android.text.style.TtsSpan$DecimalBuilder: void <init>(double,int,int)>","<android.text.style.TtsSpan$DecimalBuilder: void <init>(double,int,int)>"
"<android.media.session.MediaController$PlaybackInfo: java.lang.String toString()>","<android.media.session.MediaController$PlaybackInfo: java.lang.String toString()>"
"<java.lang.reflect.Field: byte getByte(java.lang.Object)>","<java.lang.reflect.Field: byte getByte(java.lang.Object)>"
"<java.util.Arrays: void parallelSort(float[],int,int)>","<java.util.Arrays: void parallelSort(float[],int,int)>"
"<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>","<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>"
"<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>","<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>"
"<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>","<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>"
"<java.nio.Buffer: java.lang.Object array()>","<java.nio.Buffer: java.lang.Object array()>"
"<android.media.AudioAttributes: int getContentType()>","<android.media.AudioAttributes: int getContentType()>"
"<java.util.List: int size()>","<java.util.List: int size()>"
"<java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>","<java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>"
"<android.webkit.GeolocationPermissions: void clear(java.lang.String)>","<android.webkit.GeolocationPermissions: void clear(java.lang.String)>"
"<java.nio.CharBuffer: java.lang.Object array()>","<java.nio.CharBuffer: java.lang.Object array()>"
"<java.lang.Float: float intBitsToFloat(int)>","<java.lang.Float: float intBitsToFloat(int)>"
"<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable mutate()>"
"<java.time.Duration: java.time.Duration multipliedBy(long)>","<java.time.Duration: java.time.Duration multipliedBy(long)>"
"<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>","<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>"
"<android.graphics.Canvas: void concat(android.graphics.Matrix)>","<android.graphics.Canvas: void concat(android.graphics.Matrix)>"
"<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>","<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>"
"<android.view.Menu: android.view.MenuItem add(int,int,int,int)>","<android.view.Menu: android.view.MenuItem add(int,int,int,int)>"
"<android.view.translation.TranslationSpec: void <clinit>()>","<android.view.translation.TranslationSpec: void <clinit>()>"
"<android.webkit.WebStorage: void getOrigins(android.webkit.ValueCallback)>","<android.webkit.WebStorage: void getOrigins(android.webkit.ValueCallback)>"
"<java.lang.'annotation'.ElementType: void <clinit>()>","<java.lang.'annotation'.ElementType: void <clinit>()>"
"<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getOetf()>","<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getOetf()>"
"<androidx.window.layout.a: void <init>(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)>","<androidx.window.layout.a: void <init>(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)>"
"<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>","<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.os.Bundle,java.util.Locale,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener,boolean)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>","<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setMatrix(android.graphics.Matrix)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setMatrix(android.graphics.Matrix)>"
"<java.net.SocketImpl: void <init>()>","<java.net.SocketImpl: void <init>()>"
"<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>","<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>"
"<java.lang.reflect.Method: java.lang.String toGenericString()>","<java.lang.reflect.Method: java.lang.String toGenericString()>"
"<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>","<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>"
"<android.view.KeyEvent: boolean isSymPressed()>","<android.view.KeyEvent: boolean isSymPressed()>"
"<android.widget.ListView: int getMaxScrollAmount()>","<android.widget.ListView: int getMaxScrollAmount()>"
"<java.util.stream.LongStream: java.util.stream.BaseStream sequential()>","<java.util.stream.LongStream: java.util.stream.BaseStream sequential()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>"
"<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>","<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>"
"<android.os.Debug: int getGlobalClassInitCount()>","<android.os.Debug: int getGlobalClassInitCount()>"
"<android.database.sqlite.SQLiteClosable: void <init>()>","<android.database.sqlite.SQLiteClosable: void <init>()>"
"<android.view.Window: void setChildInt(int,int)>","<android.view.Window: void setChildInt(int,int)>"
"<java.time.OffsetTime: java.time.OffsetTime withSecond(int)>","<java.time.OffsetTime: java.time.OffsetTime withSecond(int)>"
"<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>","<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>"
"<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>","<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>"
"<android.app.Notification$WearableExtender: boolean getHintContentIntentLaunchesActivity()>","<android.app.Notification$WearableExtender: boolean getHintContentIntentLaunchesActivity()>"
"<java.net.ServerSocket: boolean getReuseAddress()>","<java.net.ServerSocket: boolean getReuseAddress()>"
"<java.net.ServerSocket: void setReuseAddress(boolean)>","<java.net.ServerSocket: void setReuseAddress(boolean)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addActions(java.util.List)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addActions(java.util.List)>"
"<java.time.temporal.TemporalField: boolean isDateBased()>","<java.time.temporal.TemporalField: boolean isDateBased()>"
"<android.text.TextUtils: java.lang.CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)>","<android.text.TextUtils: java.lang.CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)>"
"<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>","<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: void lazySet(int,java.lang.Object)>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>","<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll()>"
"<java.time.Month: java.time.Month of(int)>","<java.time.Month: java.time.Month of(int)>"
"<android.app.ActionBar: float getElevation()>","<android.app.ActionBar: float getElevation()>"
"<java.net.SocketImpl: void bind(java.net.InetAddress,int)>","<java.net.SocketImpl: void bind(java.net.InetAddress,int)>"
"<android.graphics.Outline: void setOval(int,int,int,int)>","<android.graphics.Outline: void setOval(int,int,int,int)>"
"<android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)>","<android.webkit.WebView: void evaluateJavascript(java.lang.String,android.webkit.ValueCallback)>"
"<io.flutter.plugins.webviewflutter.q0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.q0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()>"
"<java.io.ObjectStreamField: int getOffset()>","<java.io.ObjectStreamField: int getOffset()>"
"<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>","<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>"
"<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>","<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle setVerificationIcon(android.graphics.drawable.Icon)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle setVerificationIcon(android.graphics.drawable.Icon)>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <init>()>"
"<android.content.pm.ApplicationInfo: boolean isProfileable()>","<android.content.pm.ApplicationInfo: boolean isProfileable()>"
"<java.io.Reader: long transferTo(java.io.Writer)>","<java.io.Reader: long transferTo(java.io.Writer)>"
"<java.io.DataInput: float readFloat()>","<java.io.DataInput: float readFloat()>"
"<java.lang.Package: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<java.lang.Math: long multiplyFull(int,int)>","<java.lang.Math: long multiplyFull(int,int)>"
"<android.view.View: long getDrawingTime()>","<android.view.View: long getDrawingTime()>"
"<java.io.File: void <init>(java.lang.String,java.lang.String)>","<java.io.File: void <init>(java.lang.String,java.lang.String)>"
"<android.text.style.TtsSpan$TelephoneBuilder: void <init>()>","<android.text.style.TtsSpan$TelephoneBuilder: void <init>()>"
"<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>","<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>"
"<android.util.Property: void <init>(java.lang.Class,java.lang.String)>","<android.util.Property: void <init>(java.lang.Class,java.lang.String)>"
"<android.content.Context: java.util.concurrent.Executor getMainExecutor()>","<android.content.Context: java.util.concurrent.Executor getMainExecutor()>"
"<android.view.accessibility.AccessibilityRequestPreparer: void onPrepareExtraData(int,java.lang.String,android.os.Bundle,android.os.Message)>","<android.view.accessibility.AccessibilityRequestPreparer: void onPrepareExtraData(int,java.lang.String,android.os.Bundle,android.os.Message)>"
"<java.time.format.TextStyle: boolean isStandalone()>","<java.time.format.TextStyle: boolean isStandalone()>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArraySet: boolean addAll(java.util.Collection)>"
"<android.webkit.WebMessagePort: void <init>()>","<android.webkit.WebMessagePort: void <init>()>"
"<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>","<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>"
"<android.graphics.Color: boolean isWideGamut()>","<android.graphics.Color: boolean isWideGamut()>"
"<android.graphics.ImageDecoder$OnPartialImageListener: boolean onPartialImage(android.graphics.ImageDecoder$DecodeException)>","<android.graphics.ImageDecoder$OnPartialImageListener: boolean onPartialImage(android.graphics.ImageDecoder$DecodeException)>"
"<java.util.zip.ZipEntry: long getSize()>","<java.util.zip.ZipEntry: long getSize()>"
"<java.util.LinkedList: boolean add(java.lang.Object)>","<java.util.LinkedList: boolean add(java.lang.Object)>"
"<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>","<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>"
"<android.app.Activity: void setProgressBarVisibility(boolean)>","<android.app.Activity: void setProgressBarVisibility(boolean)>"
"<java.lang.Math: double atan(double)>","<java.lang.Math: double atan(double)>"
"<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>","<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.v0: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.v0: void a(java.lang.Object)>"
"<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.view.View: boolean requestFocus(int,android.graphics.Rect)>","<android.view.View: boolean requestFocus(int,android.graphics.Rect)>"
"<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>","<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>"
"<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>","<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)>"
"<java.util.SortedSet: java.util.SortedSet headSet(java.lang.Object)>","<java.util.SortedSet: java.util.SortedSet headSet(java.lang.Object)>"
"<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>","<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>"
"<android.view.Display: java.lang.String getName()>","<android.view.Display: java.lang.String getName()>"
"<android.graphics.RenderNode: float getTranslationZ()>","<android.graphics.RenderNode: float getTranslationZ()>"
"<android.app.Activity: android.view.View findViewById(int)>","<android.app.Activity: android.view.View findViewById(int)>"
"<java.time.format.DateTimeFormatter: void <clinit>()>","<java.time.format.DateTimeFormatter: void <clinit>()>"
"<android.webkit.WebChromeClient: void onPermissionRequestCanceled(android.webkit.PermissionRequest)>","<android.webkit.WebChromeClient: void onPermissionRequestCanceled(android.webkit.PermissionRequest)>"
"<android.app.Fragment: android.app.FragmentManager getFragmentManager()>","<android.app.Fragment: android.app.FragmentManager getFragmentManager()>"
"<java.net.URL: java.net.URLConnection openConnection()>","<java.net.URL: java.net.URLConnection openConnection()>"
"<android.os.LocaleList: int indexOf(java.util.Locale)>","<android.os.LocaleList: int indexOf(java.util.Locale)>"
"<android.content.pm.PackageInfo: java.lang.String toString()>","<android.content.pm.PackageInfo: java.lang.String toString()>"
"<java.time.Duration: java.time.Duration ofSeconds(long)>","<java.time.Duration: java.time.Duration ofSeconds(long)>"
"<android.media.session.PlaybackState$CustomAction: void <clinit>()>","<android.media.session.PlaybackState$CustomAction: void <clinit>()>"
"<java.time.LocalDateTime: int getSecond()>","<java.time.LocalDateTime: int getSecond()>"
"<android.app.VoiceInteractor$CompleteVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>","<android.app.VoiceInteractor$CompleteVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getLabel()>","<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getLabel()>"
"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)>","<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri)>"
"<java.time.Month: int firstDayOfYear(boolean)>","<java.time.Month: int firstDayOfYear(boolean)>"
"<android.os.LocaleList: java.lang.String toString()>","<android.os.LocaleList: java.lang.String toString()>"
"<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>","<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>"
"<java.lang.Long: long parseLong(java.lang.String,int)>","<java.lang.Long: long parseLong(java.lang.String,int)>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>"
"<java.time.Duration: java.time.Duration minusNanos(long)>","<java.time.Duration: java.time.Duration minusNanos(long)>"
"<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>","<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>"
"<java.util.Properties: void <init>(java.util.Properties)>","<java.util.Properties: void <init>(java.util.Properties)>"
"<android.widget.AdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)>","<android.widget.AdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)>"
"<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)>","<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)>"
"<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>","<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>"
"<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.window.SplashScreenView: void <init>()>","<android.window.SplashScreenView: void <init>()>"
"<android.content.pm.ModuleInfo: java.lang.CharSequence getName()>","<android.content.pm.ModuleInfo: java.lang.CharSequence getName()>"
"<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics valueOf(java.lang.String)>","<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics valueOf(java.lang.String)>"
"<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>","<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>"
"<java.nio.ShortBuffer: void <init>()>","<java.nio.ShortBuffer: void <init>()>"
"<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>","<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>"
"<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>","<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>"
"<android.view.textclassifier.ConversationActions$Message: void <init>()>","<android.view.textclassifier.ConversationActions$Message: void <init>()>"
"<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>","<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>"
"<android.widget.Toolbar: void setTitleTextColor(int)>","<android.widget.Toolbar: void setTitleTextColor(int)>"
"<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setReplyAction(android.app.PendingIntent,android.app.RemoteInput)>","<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder setReplyAction(android.app.PendingIntent,android.app.RemoteInput)>"
"<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>","<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>"
"<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>","<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>"
"<java.time.LocalDate: java.time.LocalDate minusYears(long)>","<java.time.LocalDate: java.time.LocalDate minusYears(long)>"
"<android.graphics.drawable.Drawable: boolean isVisible()>","<android.graphics.drawable.Drawable: boolean isVisible()>"
"<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)>"
"<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>","<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>"
"<java.util.Random: int nextInt(int)>","<java.util.Random: int nextInt(int)>"
"<android.media.Image: void setCropRect(android.graphics.Rect)>","<android.media.Image: void setCropRect(android.graphics.Rect)>"
"<android.graphics.Paint$Join: void <init>(java.lang.String,int)>","<android.graphics.Paint$Join: void <init>(java.lang.String,int)>"
"<android.content.SyncAdapterType: boolean equals(java.lang.Object)>","<android.content.SyncAdapterType: boolean equals(java.lang.Object)>"
"<java.util.jar.Manifest: void clear()>","<java.util.jar.Manifest: void clear()>"
"<java.nio.file.FileSystem: boolean isReadOnly()>","<java.nio.file.FileSystem: boolean isReadOnly()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: void <init>()>","<android.database.sqlite.SQLiteDatabase$OpenParams: void <init>()>"
"<java.io.PrintStream: void flush()>","<java.io.PrintStream: void flush()>"
"<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>","<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>"
"<java.util.Hashtable: java.lang.String toString()>","<java.util.Hashtable: java.lang.String toString()>"
"<java.util.Calendar: void setMinimalDaysInFirstWeek(int)>","<java.util.Calendar: void setMinimalDaysInFirstWeek(int)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>"
"<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()>","<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()>"
"<android.content.Context: java.lang.ClassLoader getClassLoader()>","<android.content.Context: java.lang.ClassLoader getClassLoader()>"
"<java.net.URI: java.net.URL toURL()>","<java.net.URI: java.net.URL toURL()>"
"<android.graphics.Canvas$VertexMode: void <clinit>()>","<android.graphics.Canvas$VertexMode: void <clinit>()>"
"<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>","<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>"
"<java.lang.NullPointerException: void <init>()>","<java.lang.NullPointerException: void <init>()>"
"<android.app.ActivityManager: int getLauncherLargeIconDensity()>","<android.app.ActivityManager: int getLauncherLargeIconDensity()>"
"<java.lang.Long: java.lang.String toHexString(long)>","<java.lang.Long: java.lang.String toHexString(long)>"
"<android.util.ArrayMap: java.lang.Object keyAt(int)>","<android.util.ArrayMap: java.lang.Object keyAt(int)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>"
"<android.webkit.WebView: int getContentHeight()>","<android.webkit.WebView: int getContentHeight()>"
"<android.net.Uri: android.net.Uri$Builder buildUpon()>","<android.net.Uri: android.net.Uri$Builder buildUpon()>"
"<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.content.IntentFilter: java.lang.String getDataType(int)>","<android.content.IntentFilter: java.lang.String getDataType(int)>"
"<java.text.AttributedCharacterIterator$Attribute: java.lang.Object readResolve()>","<java.text.AttributedCharacterIterator$Attribute: java.lang.Object readResolve()>"
"<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()>","<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()>"
"<java.lang.reflect.Parameter: java.lang.Class getType()>","<java.lang.reflect.Parameter: java.lang.Class getType()>"
"<android.content.pm.PackageManager: void verifyPendingInstall(int,int)>","<android.content.pm.PackageManager: void verifyPendingInstall(int,int)>"
"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>","<android.content.Context: android.content.ComponentName startService(android.content.Intent)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>","<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>"
"<android.os.VibrationAttributes: int getFlags()>","<android.os.VibrationAttributes: int getFlags()>"
"<org.json.JSONArray: void <init>()>","<org.json.JSONArray: void <init>()>"
"<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>","<android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withMonth(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withMonth(int)>"
"<android.os.ParcelFileDescriptor$OnCloseListener: void onClose(java.io.IOException)>","<android.os.ParcelFileDescriptor$OnCloseListener: void onClose(java.io.IOException)>"
"<java.util.Arrays: boolean equals(long[],long[])>","<java.util.Arrays: boolean equals(long[],long[])>"
"<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()>","<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()>"
"<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>","<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>"
"<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>","<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>"
"<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>","<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>"
"<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<java.math.BigInteger: boolean equals(java.lang.Object)>","<java.math.BigInteger: boolean equals(java.lang.Object)>"
"<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>"
"<android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>","<android.app.AppComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void notifyDetachedFromWindow()>","<android.view.SurfaceControlViewHost$SurfacePackage: void notifyDetachedFromWindow()>"
"<java.time.LocalDate: java.time.LocalDateTime atStartOfDay()>","<java.time.LocalDate: java.time.LocalDateTime atStartOfDay()>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.content.ContentProvider: void onCallingPackageChanged()>","<android.content.ContentProvider: void onCallingPackageChanged()>"
"<java.time.ZonedDateTime: int getSecond()>","<java.time.ZonedDateTime: int getSecond()>"
"<android.graphics.Path: boolean isInverseFillType()>","<android.graphics.Path: boolean isInverseFillType()>"
"<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getLowerBound()>","<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getLowerBound()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>","<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>"
"<java.util.Random: java.util.stream.IntStream ints(int,int)>","<java.util.Random: java.util.stream.IntStream ints(int,int)>"
"<android.app.Fragment: android.transition.Transition getReturnTransition()>","<android.app.Fragment: android.transition.Transition getReturnTransition()>"
"<java.util.zip.ZipEntry: long getCrc()>","<java.util.zip.ZipEntry: long getCrc()>"
"<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>","<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>"
"<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>","<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>"
"<java.time.Month: java.time.Month 'from'(java.time.temporal.TemporalAccessor)>","<java.time.Month: java.time.Month 'from'(java.time.temporal.TemporalAccessor)>"
"<android.webkit.WebView: android.webkit.WebViewRenderProcess getWebViewRenderProcess()>","<android.webkit.WebView: android.webkit.WebViewRenderProcess getWebViewRenderProcess()>"
"<android.widget.AdapterView$OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>","<android.widget.AdapterView$OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>"
"<java.text.DateFormat: java.util.Locale[] getAvailableLocales()>","<java.text.DateFormat: java.util.Locale[] getAvailableLocales()>"
"<android.widget.ListPopupWindow: boolean performItemClick(int)>","<android.widget.ListPopupWindow: boolean performItemClick(int)>"
"<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>","<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>"
"<android.os.Parcel: android.os.IBinder readStrongBinder()>","<android.os.Parcel: android.os.IBinder readStrongBinder()>"
"<java.util.Arrays: int binarySearch(double[],double)>","<java.util.Arrays: int binarySearch(double[],double)>"
"<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>","<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>"
"<android.os.Message: android.os.Bundle peekData()>","<android.os.Message: android.os.Bundle peekData()>"
"<android.view.View: void stopNestedScroll()>","<android.view.View: void stopNestedScroll()>"
"<java.net.ServerSocket: void implAccept(java.net.Socket)>","<java.net.ServerSocket: void implAccept(java.net.Socket)>"
"<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection)>","<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection)>"
"<java.util.Dictionary: boolean isEmpty()>","<java.util.Dictionary: boolean isEmpty()>"
"<android.os.Debug$InstructionCount: int globalMethodInvocations()>","<android.os.Debug$InstructionCount: int globalMethodInvocations()>"
"<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()>","<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()>"
"<android.text.style.TtsSpan$OrdinalBuilder: void <init>(long)>","<android.text.style.TtsSpan$OrdinalBuilder: void <init>(long)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>"
"<android.view.ViewParent: boolean isTextDirectionResolved()>","<android.view.ViewParent: boolean isTextDirectionResolved()>"
"<android.net.Uri: int getPort()>","<android.net.Uri: int getPort()>"
"<android.graphics.RecordingCanvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>"
"<android.print.PageRange: void <init>(int,int)>","<android.print.PageRange: void <init>(int,int)>"
"<android.graphics.Region: boolean set(int,int,int,int)>","<android.graphics.Region: boolean set(int,int,int,int)>"
"<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>"
"<android.view.inputmethod.EditorBoundsInfo: java.lang.String toString()>","<android.view.inputmethod.EditorBoundsInfo: java.lang.String toString()>"
"<android.widget.TextView: void setJustificationMode(int)>","<android.widget.TextView: void setJustificationMode(int)>"
"<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.app.Service: void stopForeground(int)>","<android.app.Service: void stopForeground(int)>"
"<android.view.View: boolean canScrollVertically(int)>","<android.view.View: boolean canScrollVertically(int)>"
"<android.app.Dialog: void setOwnerActivity(android.app.Activity)>","<android.app.Dialog: void setOwnerActivity(android.app.Activity)>"
"<java.util.LinkedHashMap: void <init>(int)>","<java.util.LinkedHashMap: void <init>(int)>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.view.View: int getWindowSystemUiVisibility()>","<android.view.View: int getWindowSystemUiVisibility()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(boolean)>"
"<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>","<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>"
"<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>","<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>"
"<android.hardware.Sensor: float getResolution()>","<android.hardware.Sensor: float getResolution()>"
"<android.view.View: void setEnabled(boolean)>","<android.view.View: void setEnabled(boolean)>"
"<java.nio.channels.FileLock: boolean isValid()>","<java.nio.channels.FileLock: boolean isValid()>"
"<java.util.Optional: java.lang.Object orElseThrow()>","<java.util.Optional: java.lang.Object orElseThrow()>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Extender)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Extender)>"
"<android.util.LongSparseArray: void remove(long)>","<android.util.LongSparseArray: void remove(long)>"
"<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onProgressChanged(int,float)>","<android.content.pm.PackageInstaller$SessionCallback: void onProgressChanged(int,float)>"
"<android.view.ActionMode: boolean isTitleOptional()>","<android.view.ActionMode: boolean isTitleOptional()>"
"<android.widget.AdapterView: void onDetachedFromWindow()>","<android.widget.AdapterView: void onDetachedFromWindow()>"
"<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>","<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>"
"<java.util.concurrent.atomic.AtomicLong: long longValue()>","<java.util.concurrent.atomic.AtomicLong: long longValue()>"
"<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>","<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>"
"<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()>","<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()>"
"<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>","<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>"
"<java.io.ObjectInputStream: float readFloat()>","<java.io.ObjectInputStream: float readFloat()>"
"<android.app.ActivityManager: boolean isLowMemoryKillReportSupported()>","<android.app.ActivityManager: boolean isLowMemoryKillReportSupported()>"
"<java.io.File: java.lang.String getPath()>","<java.io.File: java.lang.String getPath()>"
"<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>","<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>"
"<android.util.Property: void set(java.lang.Object,java.lang.Object)>","<android.util.Property: void set(java.lang.Object,java.lang.Object)>"
"<android.view.translation.TranslationSpec: void <init>(android.icu.util.ULocale,int)>","<android.view.translation.TranslationSpec: void <init>(android.icu.util.ULocale,int)>"
"<java.time.OffsetDateTime: int compareTo(java.lang.Object)>","<java.time.OffsetDateTime: int compareTo(java.lang.Object)>"
"<android.database.SQLException: void <init>()>","<android.database.SQLException: void <init>()>"
"<android.view.View: int getScrollY()>","<android.view.View: int getScrollY()>"
"<android.widget.RemoteViews: void setLightBackgroundLayoutId(int)>","<android.widget.RemoteViews: void setLightBackgroundLayoutId(int)>"
"<java.net.URLConnection: java.util.Map getHeaderFields()>","<java.net.URLConnection: java.util.Map getHeaderFields()>"
"<java.util.UUID: boolean equals(java.lang.Object)>","<java.util.UUID: boolean equals(java.lang.Object)>"
"<android.view.View: android.view.View requireViewById(int)>","<android.view.View: android.view.View requireViewById(int)>"
"<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>"
"<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>","<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>"
"<io.flutter.view.a: void <init>(io.flutter.view.c$l)>","<io.flutter.view.a: void <init>(io.flutter.view.c$l)>"
"<android.app.Fragment: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>","<android.app.Fragment: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>"
"<android.view.textclassifier.TextLinks$TextLink: int getStart()>","<android.view.textclassifier.TextLinks$TextLink: int getStart()>"
"<java.nio.charset.Charset: boolean isRegistered()>","<java.nio.charset.Charset: boolean isRegistered()>"
"<java.time.Duration: java.util.List getUnits()>","<java.time.Duration: java.util.List getUnits()>"
"<java.lang.String: int offsetByCodePoints(int,int)>","<java.lang.String: int offsetByCodePoints(int,int)>"
"<java.io.InputStream: long transferTo(java.io.OutputStream)>","<java.io.InputStream: long transferTo(java.io.OutputStream)>"
"<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>","<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>"
"<android.os.RemoteException: void <init>()>","<android.os.RemoteException: void <init>()>"
"<android.view.ViewDebug$ExportedProperty: boolean deepExport()>","<android.view.ViewDebug$ExportedProperty: boolean deepExport()>"
"<java.lang.String: java.lang.String stripTrailing()>","<java.lang.String: java.lang.String stripTrailing()>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>"
"<android.graphics.RenderNode: float getPivotY()>","<android.graphics.RenderNode: float getPivotY()>"
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>","<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>"
"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>","<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()>","<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()>"
"<android.webkit.WebSettings: boolean getDisplayZoomControls()>","<android.webkit.WebSettings: boolean getDisplayZoomControls()>"
"<io.flutter.plugins.webviewflutter.b3: void <clinit>()>","<io.flutter.plugins.webviewflutter.b3: void <clinit>()>"
"<android.content.res.Configuration: void setLocales(android.os.LocaleList)>","<android.content.res.Configuration: void setLocales(android.os.LocaleList)>"
"<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>","<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>"
"<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)>","<android.app.Notification$Style: android.widget.RemoteViews getStandardView(int)>"
"<android.app.Notification$BigPictureStyle: void <init>()>","<android.app.Notification$BigPictureStyle: void <init>()>"
"<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String)>","<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String)>"
"<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>","<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>"
"<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>","<android.text.DynamicLayout: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>"
"<java.util.zip.ZipFile: void <init>(java.io.File,int)>","<java.util.zip.ZipFile: void <init>(java.io.File,int)>"
"<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>","<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>"
"<java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>","<java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>"
"<java.nio.file.Path: java.io.File toFile()>","<java.nio.file.Path: java.io.File toFile()>"
"<android.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.content.Loader)>","<android.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.content.Loader)>"
"<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>","<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle setIsVideo(boolean)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle setIsVideo(boolean)>"
"<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(java.lang.Runnable)>","<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(java.lang.Runnable)>"
"<android.os.Debug: long threadCpuTimeNanos()>","<android.os.Debug: long threadCpuTimeNanos()>"
"<java.lang.Math: double atan2(double,double)>","<java.lang.Math: double atan2(double,double)>"
"<java.io.InputStream: java.io.InputStream nullInputStream()>","<java.io.InputStream: java.io.InputStream nullInputStream()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean)>"
"<java.util.concurrent.ExecutionException: void <init>(java.lang.String)>","<java.util.concurrent.ExecutionException: void <init>(java.lang.String)>"
"<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>","<java.util.concurrent.atomic.AtomicLong: long getAndSet(long)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetPlain(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetPlain(boolean,boolean)>"
"<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()>","<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()>"
"<android.widget.TextView$BufferType: void <init>(java.lang.String,int)>","<android.widget.TextView$BufferType: void <init>(java.lang.String,int)>"
"<android.graphics.RecordingCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>","<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>"
"<java.lang.Long: void <init>(java.lang.String)>","<java.lang.Long: void <init>(java.lang.String)>"
"<android.view.Window: int getDefaultFeatures(android.content.Context)>","<android.view.Window: int getDefaultFeatures(android.content.Context)>"
"<android.app.VoiceInteractor: android.app.VoiceInteractor$Request getActiveRequest(java.lang.String)>","<android.app.VoiceInteractor: android.app.VoiceInteractor$Request getActiveRequest(java.lang.String)>"
"<android.view.View: int[] getAttributeResolutionStack(int)>","<android.view.View: int[] getAttributeResolutionStack(int)>"
"<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>"
"<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>","<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>"
"<android.content.IntentFilter: void addDataPath(java.lang.String,int)>","<android.content.IntentFilter: void addDataPath(java.lang.String,int)>"
"<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: void lazySet(boolean)>"
"<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>"
"<java.time.temporal.TemporalField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>","<java.time.temporal.TemporalField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
"<android.icu.util.ULocale: android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale)>","<android.icu.util.ULocale: android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale)>"
"<java.lang.Class: boolean isArray()>","<java.lang.Class: boolean isArray()>"
"<android.view.translation.TranslationResponseValue: java.lang.String toString()>","<android.view.translation.TranslationResponseValue: java.lang.String toString()>"
"<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>","<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>"
"<android.graphics.Matrix: void setSkew(float,float)>","<android.graphics.Matrix: void setSkew(float,float)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)>"
"<android.graphics.Rect: boolean intersects(int,int,int,int)>","<android.graphics.Rect: boolean intersects(int,int,int,int)>"
"<android.view.View: void setLeftTopRightBottom(int,int,int,int)>","<android.view.View: void setLeftTopRightBottom(int,int,int,int)>"
"<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"
"<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>","<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>"
"<android.view.View: boolean isPressed()>","<android.view.View: boolean isPressed()>"
"<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>","<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>"
"<android.app.Notification$Action$WearableExtender: java.lang.Object clone()>","<android.app.Notification$Action$WearableExtender: java.lang.Object clone()>"
"<android.view.ViewConfiguration: long getZoomControlsTimeout()>","<android.view.ViewConfiguration: long getZoomControlsTimeout()>"
"<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>"
"<java.io.PrintStream: void write(int)>","<java.io.PrintStream: void write(int)>"
"<io.flutter.plugins.webviewflutter.n1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.n1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.os.Parcel: void writeTypedArrayMap(android.util.ArrayMap,int)>","<android.os.Parcel: void writeTypedArrayMap(android.util.ArrayMap,int)>"
"<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>","<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>"
"<android.view.View: boolean getHasOverlappingRendering()>","<android.view.View: boolean getHasOverlappingRendering()>"
"<org.xmlpull.v1.XmlSerializer: java.lang.String getNamespace()>","<org.xmlpull.v1.XmlSerializer: java.lang.String getNamespace()>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int[])>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int[])>"
"<android.view.Window: void injectInputEvent(android.view.InputEvent)>","<android.view.Window: void injectInputEvent(android.view.InputEvent)>"
"<android.hardware.lights.Light: int getOrdinal()>","<android.hardware.lights.Light: int getOrdinal()>"
"<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>","<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>"
"<java.time.chrono.IsoEra: java.time.chrono.IsoEra[] values()>","<java.time.chrono.IsoEra: java.time.chrono.IsoEra[] values()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>"
"<android.widget.Toolbar$LayoutParams: void <init>(int)>","<android.widget.Toolbar$LayoutParams: void <init>(int)>"
"<java.lang.Error: void <init>(java.lang.String)>","<java.lang.Error: void <init>(java.lang.String)>"
"<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()>","<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()>"
"<java.util.Collections: java.util.NavigableSet emptyNavigableSet()>","<java.util.Collections: java.util.NavigableSet emptyNavigableSet()>"
"<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription)>","<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription)>"
"<android.graphics.Color: float[] getComponents(float[])>","<android.graphics.Color: float[] getComponents(float[])>"
"<java.util.WeakHashMap: void <init>(int,float)>","<java.util.WeakHashMap: void <init>(int,float)>"
"<java.math.BigInteger: int signum()>","<java.math.BigInteger: int signum()>"
"<java.lang.System: java.lang.String lineSeparator()>","<java.lang.System: java.lang.String lineSeparator()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()>"
"<android.app.Fragment: void setArguments(android.os.Bundle)>","<android.app.Fragment: void setArguments(android.os.Bundle)>"
"<java.util.Map$Entry: java.util.Comparator comparingByValue(java.util.Comparator)>","<java.util.Map$Entry: java.util.Comparator comparingByValue(java.util.Comparator)>"
"<java.lang.ref.ReferenceQueue: void <init>()>","<java.lang.ref.ReferenceQueue: void <init>()>"
"<android.view.View: float getRightFadingEdgeStrength()>","<android.view.View: float getRightFadingEdgeStrength()>"
"<android.app.Fragment: java.lang.CharSequence getText(int)>","<android.app.Fragment: java.lang.CharSequence getText(int)>"
"<android.os.Debug: int setGlobalAllocationLimit(int)>","<android.os.Debug: int setGlobalAllocationLimit(int)>"
"<android.graphics.RecordingCanvas: void drawPoints(float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPoints(float[],android.graphics.Paint)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>"
"<android.graphics.ColorSpace: boolean isWideGamut()>","<android.graphics.ColorSpace: boolean isWideGamut()>"
"<android.widget.PopupWindow: void setHeight(int)>","<android.widget.PopupWindow: void setHeight(int)>"
"<io.flutter.plugins.webviewflutter.j3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.j3: void a(java.lang.Object)>"
"<java.time.OffsetDateTime: java.time.OffsetTime toOffsetTime()>","<java.time.OffsetDateTime: java.time.OffsetTime toOffsetTime()>"
"<android.graphics.RenderNode: boolean hasIdentityMatrix()>","<android.graphics.RenderNode: boolean hasIdentityMatrix()>"
"<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>"
"<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>","<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>"
"<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>"
"<java.net.Socket: void <init>()>","<java.net.Socket: void <init>()>"
"<android.util.Rational: void <init>(int,int)>","<android.util.Rational: void <init>(int,int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)>","<android.app.Notification$Builder: android.app.Notification$Builder setContent(android.widget.RemoteViews)>"
"<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>","<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>"
"<android.content.DialogInterface$OnClickListener: void onClick(android.content.DialogInterface,int)>","<android.content.DialogInterface$OnClickListener: void onClick(android.content.DialogInterface,int)>"
"<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>","<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>"
"<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.text.style.URLSpan: int getSpanTypeId()>","<android.text.style.URLSpan: int getSpanTypeId()>"
"<android.widget.PopupWindow: boolean isAboveAnchor()>","<android.widget.PopupWindow: boolean isAboveAnchor()>"
"<android.app.Person: android.app.Person$Builder toBuilder()>","<android.app.Person: android.app.Person$Builder toBuilder()>"
"<java.util.AbstractList: void removeRange(int,int)>","<java.util.AbstractList: void removeRange(int,int)>"
"<java.util.Collections: java.util.Iterator emptyIterator()>","<java.util.Collections: java.util.Iterator emptyIterator()>"
"<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>","<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>"
"<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])>","<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.ZoneId)>"
"<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>","<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>"
"<android.util.SparseArray: void append(int,java.lang.Object)>","<android.util.SparseArray: void append(int,java.lang.Object)>"
"<java.util.NavigableSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>","<java.util.NavigableSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>"
"<android.content.Context: int[] checkUriPermissions(java.util.List,int,int,int)>","<android.content.Context: int[] checkUriPermissions(java.util.List,int,int,int)>"
"<android.view.View: void setDrawingCacheBackgroundColor(int)>","<android.view.View: void setDrawingCacheBackgroundColor(int)>"
"<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>","<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>"
"<android.widget.TextView: boolean isSingleLine()>","<android.widget.TextView: boolean isSingleLine()>"
"<android.view.ViewGroup: void addView(android.view.View,int,int)>","<android.view.ViewGroup: void addView(android.view.View,int,int)>"
"<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>","<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>"
"<java.util.function.LongToIntFunction: int applyAsInt(long)>","<java.util.function.LongToIntFunction: int applyAsInt(long)>"
"<android.view.WindowInsets$Type: int mandatorySystemGestures()>","<android.view.WindowInsets$Type: int mandatorySystemGestures()>"
"<android.app.VoiceInteractor$Prompt: java.lang.String toString()>","<android.app.VoiceInteractor$Prompt: java.lang.String toString()>"
"<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)>"
"<android.graphics.Paint$FontMetricsInt: void <init>()>","<android.graphics.Paint$FontMetricsInt: void <init>()>"
"<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)>","<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)>"
"<android.content.pm.PackageManager$ComponentInfoFlags: void <init>()>","<android.content.pm.PackageManager$ComponentInfoFlags: void <init>()>"
"<android.view.View: void setRevealOnFocusHint(boolean)>","<android.view.View: void setRevealOnFocusHint(boolean)>"
"<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onActiveChanged(int,boolean)>","<android.content.pm.PackageInstaller$SessionCallback: void onActiveChanged(int,boolean)>"
"<android.hardware.Sensor: int getFifoReservedEventCount()>","<android.hardware.Sensor: int getFifoReservedEventCount()>"
"<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>","<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>"
"<java.nio.FloatBuffer: java.nio.Buffer reset()>","<java.nio.FloatBuffer: java.nio.Buffer reset()>"
"<android.app.Activity: void onUserLeaveHint()>","<android.app.Activity: void onUserLeaveHint()>"
"<java.io.ByteArrayInputStream: int available()>","<java.io.ByteArrayInputStream: int available()>"
"<android.widget.ImageView: void onMeasure(int,int)>","<android.widget.ImageView: void onMeasure(int,int)>"
"<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>"
"<android.view.ViewStructure: void setFocusable(boolean)>","<android.view.ViewStructure: void setFocusable(boolean)>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setSuppressNotification(boolean)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setSuppressNotification(boolean)>"
"<java.lang.Short: int compare(short,short)>","<java.lang.Short: int compare(short,short)>"
"<android.os.Bundle: char[] getCharArray(java.lang.String)>","<android.os.Bundle: char[] getCharArray(java.lang.String)>"
"<android.os.Vibrator: void cancel()>","<android.os.Vibrator: void cancel()>"
"<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>","<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>"
"<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.view.ViewGroup: int indexOfChild(android.view.View)>","<android.view.ViewGroup: int indexOfChild(android.view.View)>"
"<java.net.URI: int compareTo(java.net.URI)>","<java.net.URI: int compareTo(java.net.URI)>"
"<java.util.stream.DoubleStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)>","<java.util.stream.DoubleStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)>"
"<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>","<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setSummaryText(java.lang.CharSequence)>"
"<android.content.pm.PackageInstaller$SessionParams: void setPackageSource(int)>","<android.content.pm.PackageInstaller$SessionParams: void setPackageSource(int)>"
"<android.os.PatternMatcher: void <init>(java.lang.String,int)>","<android.os.PatternMatcher: void <init>(java.lang.String,int)>"
"<android.transition.PathMotion: void <init>()>","<android.transition.PathMotion: void <init>()>"
"<android.animation.ValueAnimator: android.animation.Animator clone()>","<android.animation.ValueAnimator: android.animation.Animator clone()>"
"<android.view.ActionMode: void setType(int)>","<android.view.ActionMode: void setType(int)>"
"<java.lang.Thread: void run()>","<java.lang.Thread: void run()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean)>"
"<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>"
"<android.widget.TextView: boolean hasOverlappingRendering()>","<android.widget.TextView: boolean hasOverlappingRendering()>"
"<android.widget.ImageView: boolean isOpaque()>","<android.widget.ImageView: boolean isOpaque()>"
"<android.view.inputmethod.InputConnection: boolean endBatchEdit()>","<android.view.inputmethod.InputConnection: boolean endBatchEdit()>"
"<java.io.PrintWriter: void print(java.lang.String)>","<java.io.PrintWriter: void print(java.lang.String)>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.app.Notification$WearableExtender: boolean getHintAvoidBackgroundClipping()>","<android.app.Notification$WearableExtender: boolean getHintAvoidBackgroundClipping()>"
"<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.view.View: void setOnCapturedPointerListener(android.view.View$OnCapturedPointerListener)>","<android.view.View: void setOnCapturedPointerListener(android.view.View$OnCapturedPointerListener)>"
"<android.view.WindowInsets: java.lang.String toString()>","<android.view.WindowInsets: java.lang.String toString()>"
"<java.util.LongSummaryStatistics: void <init>(long,long,long,long)>","<java.util.LongSummaryStatistics: void <init>(long,long,long,long)>"
"<java.util.stream.LongStream: java.util.stream.LongStream empty()>","<java.util.stream.LongStream: java.util.stream.LongStream empty()>"
"<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.lang.ClassNotFoundException: void <init>()>","<java.lang.ClassNotFoundException: void <init>()>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>"
"<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>","<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>"
"<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence)>","<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence)>"
"<java.util.WeakHashMap: void putAll(java.util.Map)>","<java.util.WeakHashMap: void putAll(java.util.Map)>"
"<android.webkit.WebView: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.webkit.WebView: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.media.Session2Token: android.os.Bundle getExtras()>","<android.media.Session2Token: android.os.Bundle getExtras()>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(java.lang.Object,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAdd(java.lang.Object,int)>"
"<android.animation.ValueAnimator: void resume()>","<android.animation.ValueAnimator: void resume()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>"
"<android.view.WindowInsets$Type: void <init>()>","<android.view.WindowInsets$Type: void <init>()>"
"<android.os.Debug: long getNativeHeapAllocatedSize()>","<android.os.Debug: long getNativeHeapAllocatedSize()>"
"<android.util.Rational: long longValue()>","<android.util.Rational: long longValue()>"
"<java.io.PrintWriter: void print(int)>","<java.io.PrintWriter: void print(int)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>"
"<android.net.Uri: boolean equals(java.lang.Object)>","<android.net.Uri: boolean equals(java.lang.Object)>"
"<android.webkit.WebHistoryItem: java.lang.String getUrl()>","<android.webkit.WebHistoryItem: java.lang.String getUrl()>"
"<java.util.Arrays: void parallelSort(double[])>","<java.util.Arrays: void parallelSort(double[])>"
"<android.widget.TextView: int getImeOptions()>","<android.widget.TextView: int getImeOptions()>"
"<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>","<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>"
"<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>","<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>"
"<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>","<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Debug: int getThreadExternalAllocSize()>","<android.os.Debug: int getThreadExternalAllocSize()>"
"<android.content.ClipData$Item: void <init>(android.net.Uri)>","<android.content.ClipData$Item: void <init>(android.net.Uri)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>"
"<android.webkit.WebView: boolean canGoBack()>","<android.webkit.WebView: boolean canGoBack()>"
"<java.time.Instant: java.time.Instant minusNanos(long)>","<java.time.Instant: java.time.Instant minusNanos(long)>"
"<android.view.View: int getOutlineSpotShadowColor()>","<android.view.View: int getOutlineSpotShadowColor()>"
"<android.view.View: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>","<android.view.View: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>"
"<android.view.View: int getMinimumHeight()>","<android.view.View: int getMinimumHeight()>"
"<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>","<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>","<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>"
"<android.widget.PopupWindow: boolean isTouchable()>","<android.widget.PopupWindow: boolean isTouchable()>"
"<android.widget.TextView: android.text.PrecomputedText$Params getTextMetricsParams()>","<android.widget.TextView: android.text.PrecomputedText$Params getTextMetricsParams()>"
"<android.graphics.RenderNode: boolean setRotationY(float)>","<android.graphics.RenderNode: boolean setRotationY(float)>"
"<android.view.accessibility.AccessibilityWindowInfo: void <init>()>","<android.view.accessibility.AccessibilityWindowInfo: void <init>()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantReadWriteLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>"
"<android.view.translation.TranslationResponseValue: int getStatusCode()>","<android.view.translation.TranslationResponseValue: int getStatusCode()>"
"<android.app.Activity: void startActivities(android.content.Intent[])>","<android.app.Activity: void startActivities(android.content.Intent[])>"
"<java.util.zip.ZipFile: java.lang.String getComment()>","<java.util.zip.ZipFile: java.lang.String getComment()>"
"<android.view.inputmethod.ExtractedText: int describeContents()>","<android.view.inputmethod.ExtractedText: int describeContents()>"
"<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)>","<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)>"
"<java.security.cert.CertPath: java.lang.String getType()>","<java.security.cert.CertPath: java.lang.String getType()>"
"<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>","<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>"
"<android.graphics.Matrix: void set(android.graphics.Matrix)>","<android.graphics.Matrix: void set(android.graphics.Matrix)>"
"<android.widget.AbsListView: int getCacheColorHint()>","<android.widget.AbsListView: int getCacheColorHint()>"
"<android.content.ContextWrapper: java.io.File getCodeCacheDir()>","<android.content.ContextWrapper: java.io.File getCodeCacheDir()>"
"<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>","<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>"
"<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)>"
"<android.view.View: void setNextFocusUpId(int)>","<android.view.View: void setNextFocusUpId(int)>"
"<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>","<java.util.jar.Attributes: java.lang.Object get(java.lang.Object)>"
"<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>"
"<java.nio.channels.Pipe$SourceChannel: int validOps()>","<java.nio.channels.Pipe$SourceChannel: int validOps()>"
"<android.graphics.RenderNode: boolean setPosition(android.graphics.Rect)>","<android.graphics.RenderNode: boolean setPosition(android.graphics.Rect)>"
"<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.ShortBuffer: short[] array()>","<java.nio.ShortBuffer: short[] array()>"
"<android.view.inputmethod.ExtractedTextRequest: void <init>()>","<android.view.inputmethod.ExtractedTextRequest: void <init>()>"
"<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>","<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>"
"<java.nio.CharBuffer: java.lang.Appendable append(char)>","<java.nio.CharBuffer: java.lang.Appendable append(char)>"
"<android.app.Notification$BigPictureStyle: void <init>(android.app.Notification$Builder)>","<android.app.Notification$BigPictureStyle: void <init>(android.app.Notification$Builder)>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: java.util.Locale getLocale()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: java.util.Locale getLocale()>"
"<android.app.ActivityManager: int addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.ActivityManager: int addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>"
"<javax.security.auth.Subject: boolean equals(java.lang.Object)>","<javax.security.auth.Subject: boolean equals(java.lang.Object)>"
"<java.time.chrono.Era: int getValue()>","<java.time.chrono.Era: int getValue()>"
"<android.widget.PopupWindow: void setSoftInputMode(int)>","<android.widget.PopupWindow: void setSoftInputMode(int)>"
"<android.graphics.Matrix: boolean preSkew(float,float,float,float)>","<android.graphics.Matrix: boolean preSkew(float,float,float,float)>"
"<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>","<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>"
"<android.view.WindowInsets$Builder: void <init>(android.view.WindowInsets)>","<android.view.WindowInsets$Builder: void <init>(android.view.WindowInsets)>"
"<java.lang.reflect.Array: void <init>()>","<java.lang.reflect.Array: void <init>()>"
"<android.content.ClipboardManager: boolean hasPrimaryClip()>","<android.content.ClipboardManager: boolean hasPrimaryClip()>"
"<android.content.Context: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>","<android.content.Context: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>"
"<android.content.pm.PathPermission: void <init>(android.os.Parcel)>","<android.content.pm.PathPermission: void <init>(android.os.Parcel)>"
"<java.time.Period: java.time.Period ofDays(int)>","<java.time.Period: java.time.Period ofDays(int)>"
"<android.graphics.Movie: int duration()>","<android.graphics.Movie: int duration()>"
"<android.app.Notification$WearableExtender: int getCustomSizePreset()>","<android.app.Notification$WearableExtender: int getCustomSizePreset()>"
"<android.view.View: int getMeasuredWidthAndState()>","<android.view.View: int getMeasuredWidthAndState()>"
"<android.app.Dialog: void setCancelMessage(android.os.Message)>","<android.app.Dialog: void setCancelMessage(android.os.Message)>"
"<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()>","<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()>"
"<android.view.textservice.SuggestionsInfo: int getCookie()>","<android.view.textservice.SuggestionsInfo: int getCookie()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBlendModeEffect(android.graphics.RenderEffect,android.graphics.RenderEffect,android.graphics.BlendMode)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBlendModeEffect(android.graphics.RenderEffect,android.graphics.RenderEffect,android.graphics.BlendMode)>"
"<java.util.Spliterator$OfInt: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfInt: java.util.Spliterator trySplit()>"
"<android.view.Window: int getFeatures()>","<android.view.Window: int getFeatures()>"
"<android.app.ActionBar: void setDisplayOptions(int,int)>","<android.app.ActionBar: void setDisplayOptions(int,int)>"
"<android.view.ViewStructure: java.lang.CharSequence getHint()>","<android.view.ViewStructure: java.lang.CharSequence getHint()>"
"<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()>","<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()>"
"<android.content.ContentProviderClient: boolean release()>","<android.content.ContentProviderClient: boolean release()>"
"<java.io.ObjectInput: int read()>","<java.io.ObjectInput: int read()>"
"<java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>","<java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>"
"<android.graphics.Point: int describeContents()>","<android.graphics.Point: int describeContents()>"
"<java.util.Collection: java.util.stream.Stream stream()>","<java.util.Collection: java.util.stream.Stream stream()>"
"<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>","<android.content.ContentValues: void put(java.lang.String,java.lang.String)>"
"<android.widget.AbsListView: void setFriction(float)>","<android.widget.AbsListView: void setFriction(float)>"
"<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>","<java.text.DateFormat: java.text.DateFormat getDateInstance(int)>"
"<android.view.View: int getLayerType()>","<android.view.View: int getLayerType()>"
"<android.os.SystemClock: void sleep(long)>","<android.os.SystemClock: void sleep(long)>"
"<android.view.ContextThemeWrapper: void <init>(android.content.Context,android.content.res.Resources$Theme)>","<android.view.ContextThemeWrapper: void <init>(android.content.Context,android.content.res.Resources$Theme)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withDecimalStyle(java.time.format.DecimalStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withDecimalStyle(java.time.format.DecimalStyle)>"
"<java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>","<java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>","<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>"
"<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>","<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>"
"<android.graphics.RecordingCanvas: void enableZ()>","<android.graphics.RecordingCanvas: void enableZ()>"
"<android.app.Activity: boolean isInMultiWindowMode()>","<android.app.Activity: boolean isInMultiWindowMode()>"
"<c0.g: void <init>()>","<c0.g: void <init>()>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(int,int)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(int,int)>"
"<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>","<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>"
"<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>","<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>"
"<java.io.StreamCorruptedException: void <init>()>","<java.io.StreamCorruptedException: void <init>()>"
"<android.widget.AbsListView: void handleDataChanged()>","<android.widget.AbsListView: void handleDataChanged()>"
"<android.text.Spannable: void removeSpan(java.lang.Object)>","<android.text.Spannable: void removeSpan(java.lang.Object)>"
"<java.util.Arrays: void fill(float[],int,int,float)>","<java.util.Arrays: void fill(float[],int,int,float)>"
"<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>","<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>"
"<android.view.LayoutInflater$Filter: boolean onLoadClass(java.lang.Class)>","<android.view.LayoutInflater$Filter: boolean onLoadClass(java.lang.Class)>"
"<android.content.Intent: java.lang.String toString()>","<android.content.Intent: java.lang.String toString()>"
"<android.view.inputmethod.TextSnapshot: void <init>(android.view.inputmethod.SurroundingText,int,int,int)>","<android.view.inputmethod.TextSnapshot: void <init>(android.view.inputmethod.SurroundingText,int,int,int)>"
"<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>","<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>"
"<java.security.cert.Certificate: java.lang.String toString()>","<java.security.cert.Certificate: java.lang.String toString()>"
"<android.view.animation.Animation: int getBackdropColor()>","<android.view.animation.Animation: int getBackdropColor()>"
"<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)>","<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)>"
"<android.app.Activity: android.transition.Scene getContentScene()>","<android.app.Activity: android.transition.Scene getContentScene()>"
"<java.util.AbstractQueue: java.lang.Object remove()>","<java.util.AbstractQueue: java.lang.Object remove()>"
"<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>","<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>"
"<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>","<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.ComponentName: android.content.ComponentName clone()>","<android.content.ComponentName: android.content.ComponentName clone()>"
"<java.util.Calendar: void setTime(java.util.Date)>","<java.util.Calendar: void setTime(java.util.Date)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusNanos(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusNanos(long)>"
"<android.graphics.Paint: void <init>()>","<android.graphics.Paint: void <init>()>"
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>","<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
"<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int hashCode()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int hashCode()>"
"<android.graphics.Bitmap: int getAllocationByteCount()>","<android.graphics.Bitmap: int getAllocationByteCount()>"
"<java.util.LongSummaryStatistics: long getMin()>","<java.util.LongSummaryStatistics: long getMin()>"
"<android.content.Context: int checkPermission(java.lang.String,int,int)>","<android.content.Context: int checkPermission(java.lang.String,int,int)>"
"<java.util.Arrays: int mismatch(float[],float[])>","<java.util.Arrays: int mismatch(float[],float[])>"
"<java.io.IOException: void <init>(java.lang.Throwable)>","<java.io.IOException: void <init>(java.lang.Throwable)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>"
"<android.os.Parcel: boolean[] createBooleanArray()>","<android.os.Parcel: boolean[] createBooleanArray()>"
"<android.content.BroadcastReceiver: boolean getAbortBroadcast()>","<android.content.BroadcastReceiver: boolean getAbortBroadcast()>"
"<android.widget.PopupWindow: void setExitTransition(android.transition.Transition)>","<android.widget.PopupWindow: void setExitTransition(android.transition.Transition)>"
"<android.widget.AbsListView: void clearChoices()>","<android.widget.AbsListView: void clearChoices()>"
"<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>"
"<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>","<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>"
"<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>","<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>"
"<java.io.Writer: void <init>()>","<java.io.Writer: void <init>()>"
"<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<android.database.Cursor: java.lang.String[] getColumnNames()>","<android.database.Cursor: java.lang.String[] getColumnNames()>"
"<java.util.concurrent.atomic.AtomicInteger: int getAndUpdate(java.util.function.IntUnaryOperator)>","<java.util.concurrent.atomic.AtomicInteger: int getAndUpdate(java.util.function.IntUnaryOperator)>"
"<java.time.format.DecimalStyle: char getZeroDigit()>","<java.time.format.DecimalStyle: char getZeroDigit()>"
"<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>","<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>"
"<java.lang.Readable: int read(java.nio.CharBuffer)>","<java.lang.Readable: int read(java.nio.CharBuffer)>"
"<android.media.Rating: android.media.Rating newPercentageRating(float)>","<android.media.Rating: android.media.Rating newPercentageRating(float)>"
"<java.time.Duration: java.time.Duration minusMillis(long)>","<java.time.Duration: java.time.Duration minusMillis(long)>"
"<android.view.InputDevice: boolean supportsSource(int)>","<android.view.InputDevice: boolean supportsSource(int)>"
"<android.app.Notification$Builder: android.os.Bundle getExtras()>","<android.app.Notification$Builder: android.os.Bundle getExtras()>"
"<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>","<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>"
"<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>","<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>"
"<android.view.TextureView: boolean isAvailable()>","<android.view.TextureView: boolean isAvailable()>"
"<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,int)>","<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,int)>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>"
"<java.time.ZonedDateTime: int getDayOfMonth()>","<java.time.ZonedDateTime: int getDayOfMonth()>"
"<android.view.Window: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.Window: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>","<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>"
"<java.lang.System: void exit(int)>","<java.lang.System: void exit(int)>"
"<java.util.Arrays: boolean[] copyOf(boolean[],int)>","<java.util.Arrays: boolean[] copyOf(boolean[],int)>"
"<java.lang.Integer: boolean equals(java.lang.Object)>","<java.lang.Integer: boolean equals(java.lang.Object)>"
"<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedAction)>","<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedAction)>"
"<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>","<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>"
"<java.util.OptionalLong: int hashCode()>","<java.util.OptionalLong: int hashCode()>"
"<android.database.Cursor: java.lang.String getString(int)>","<android.database.Cursor: java.lang.String getString(int)>"
"<android.app.Fragment: void setSharedElementReturnTransition(android.transition.Transition)>","<android.app.Fragment: void setSharedElementReturnTransition(android.transition.Transition)>"
"<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>","<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>"
"<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.io.ObjectInputStream$GetField: long get(java.lang.String,long)>","<java.io.ObjectInputStream$GetField: long get(java.lang.String,long)>"
"<android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
"<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>","<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>"
"<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<android.view.textclassifier.TextLanguage: int describeContents()>","<android.view.textclassifier.TextLanguage: int describeContents()>"
"<android.graphics.RenderNode: float getElevation()>","<android.graphics.RenderNode: float getElevation()>"
"<android.content.ClipboardManager: void clearPrimaryClip()>","<android.content.ClipboardManager: void clearPrimaryClip()>"
"<java.io.ObjectStreamClass: java.lang.String getName()>","<java.io.ObjectStreamClass: java.lang.String getName()>"
"<android.widget.TextView: int getCurrentTextColor()>","<android.widget.TextView: int getCurrentTextColor()>"
"<android.app.Notification$CarExtender$UnreadConversation: android.app.RemoteInput getRemoteInput()>","<android.app.Notification$CarExtender$UnreadConversation: android.app.RemoteInput getRemoteInput()>"
"<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>","<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>"
"<android.webkit.WebStorage$Origin: long getUsage()>","<android.webkit.WebStorage$Origin: long getUsage()>"
"<android.webkit.WebView: int computeHorizontalScrollOffset()>","<android.webkit.WebView: int computeHorizontalScrollOffset()>"
"<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)>","<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)>"
"<android.view.View: int[] mergeDrawableStates(int[],int[])>","<android.view.View: int[] mergeDrawableStates(int[],int[])>"
"<android.app.FragmentManager: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)>","<android.app.FragmentManager: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)>"
"<java.lang.Class: java.lang.Class[] getInterfaces()>","<java.lang.Class: java.lang.Class[] getInterfaces()>"
"<java.util.NavigableMap: java.lang.Object lowerKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object lowerKey(java.lang.Object)>"
"<java.lang.Runtime: void runFinalizersOnExit(boolean)>","<java.lang.Runtime: void runFinalizersOnExit(boolean)>"
"<android.os.Vibrator: boolean areAllPrimitivesSupported(int[])>","<android.os.Vibrator: boolean areAllPrimitivesSupported(int[])>"
"<java.time.LocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"
"<android.view.Menu: void setGroupVisible(int,boolean)>","<android.view.Menu: void setGroupVisible(int,boolean)>"
"<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<java.util.InvalidPropertiesFormatException: void <init>(java.lang.Throwable)>","<java.util.InvalidPropertiesFormatException: void <init>(java.lang.Throwable)>"
"<android.app.Activity: java.lang.CharSequence onCreateDescription()>","<android.app.Activity: java.lang.CharSequence onCreateDescription()>"
"<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>","<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>"
"<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.widget.TextView: int getCompoundPaddingStart()>","<android.widget.TextView: int getCompoundPaddingStart()>"
"<android.content.res.ColorStateList: int describeContents()>","<android.content.res.ColorStateList: int describeContents()>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void <init>()>","<android.app.ActivityManager$RunningAppProcessInfo: void <init>()>"
"<java.lang.String: void <init>()>","<java.lang.String: void <init>()>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean removeAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArraySet: boolean removeAll(java.util.Collection)>"
"<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>","<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>"
"<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>","<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>"
"<android.view.ViewGroup: void onDescendantInvalidated(android.view.View,android.view.View)>","<android.view.ViewGroup: void onDescendantInvalidated(android.view.View,android.view.View)>"
"<android.database.sqlite.SQLiteDatabase: void <init>()>","<android.database.sqlite.SQLiteDatabase: void <init>()>"
"<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>","<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(int)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(int)>"
"<java.util.Calendar: int internalGet(int)>","<java.util.Calendar: int internalGet(int)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: int getHoldCount()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: int getHoldCount()>"
"<android.widget.TextView: void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode)>","<android.widget.TextView: void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode)>"
"<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View,int)>","<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View,int)>"
"<android.view.inputmethod.InputMethodInfo: void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)>","<android.view.inputmethod.InputMethodInfo: void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)>"
"<android.widget.TextView: int getPaintFlags()>","<android.widget.TextView: int getPaintFlags()>"
"<android.view.inputmethod.InputMethodManager: void <init>()>","<android.view.inputmethod.InputMethodManager: void <init>()>"
"<android.content.pm.ConfigurationInfo: int describeContents()>","<android.content.pm.ConfigurationInfo: int describeContents()>"
"<java.time.LocalDateTime: java.time.LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.LocalDateTime: java.time.LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>"
"<java.time.format.DecimalStyle: java.lang.String toString()>","<java.time.format.DecimalStyle: java.lang.String toString()>"
"<android.graphics.Matrix: int hashCode()>","<android.graphics.Matrix: int hashCode()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>"
"<java.time.Period: java.time.Period plusMonths(long)>","<java.time.Period: java.time.Period plusMonths(long)>"
"<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>","<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>"
"<java.util.Arrays: void parallelSetAll(java.lang.Object[],java.util.function.IntFunction)>","<java.util.Arrays: void parallelSetAll(java.lang.Object[],java.util.function.IntFunction)>"
"<android.os.Parcel: android.util.SizeF readSizeF()>","<android.os.Parcel: android.util.SizeF readSizeF()>"
"<java.lang.Long: long reverse(long)>","<java.lang.Long: long reverse(long)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>"
"<android.content.pm.ModuleInfo: boolean equals(java.lang.Object)>","<android.content.pm.ModuleInfo: boolean equals(java.lang.Object)>"
"<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>","<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(java.time.LocalTime)>","<java.time.LocalDate: java.time.LocalDateTime atTime(java.time.LocalTime)>"
"<androidx.window.embedding.f: void <init>(java.util.Set)>","<androidx.window.embedding.f: void <init>(java.util.Set)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>"
"<java.nio.charset.Charset: boolean equals(java.lang.Object)>","<java.nio.charset.Charset: boolean equals(java.lang.Object)>"
"<android.view.InputDevice: boolean hasMicrophone()>","<android.view.InputDevice: boolean hasMicrophone()>"
"<android.view.MotionEvent$PointerProperties: void <init>()>","<android.view.MotionEvent$PointerProperties: void <init>()>"
"<java.lang.Float: int floatToIntBits(float)>","<java.lang.Float: int floatToIntBits(float)>"
"<android.graphics.Paint: void setStartHyphenEdit(int)>","<android.graphics.Paint: void setStartHyphenEdit(int)>"
"<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressable()>","<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressable()>"
"<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>"
"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
"<java.lang.ThreadLocal: java.lang.Object get()>","<java.lang.ThreadLocal: java.lang.Object get()>"
"<android.view.View: void setHorizontalScrollBarEnabled(boolean)>","<android.view.View: void setHorizontalScrollBarEnabled(boolean)>"
"<android.media.Rating: int getRatingStyle()>","<android.media.Rating: int getRatingStyle()>"
"<android.content.pm.PackageManager: void getGroupOfPlatformPermission(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>","<android.content.pm.PackageManager: void getGroupOfPlatformPermission(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>"
"<android.view.animation.Animation: void startNow()>","<android.view.animation.Animation: void startNow()>"
"<android.graphics.Color: long convert(long,android.graphics.ColorSpace)>","<android.graphics.Color: long convert(long,android.graphics.ColorSpace)>"
"<android.content.res.AssetManager: java.lang.String[] getLocales()>","<android.content.res.AssetManager: java.lang.String[] getLocales()>"
"<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()>","<android.view.autofill.AutofillManager: android.service.autofill.UserData getUserData()>"
"<java.util.Arrays: java.lang.String toString(int[])>","<java.util.Arrays: java.lang.String toString(int[])>"
"<java.util.concurrent.ThreadLocalRandom: void <init>()>","<java.util.concurrent.ThreadLocalRandom: void <init>()>"
"<android.view.View: int getAccessibilityTraversalAfter()>","<android.view.View: int getAccessibilityTraversalAfter()>"
"<org.xmlpull.v1.XmlSerializer: java.lang.Object getProperty(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: java.lang.Object getProperty(java.lang.String)>"
"<java.util.Locale$Category: java.util.Locale$Category valueOf(java.lang.String)>","<java.util.Locale$Category: java.util.Locale$Category valueOf(java.lang.String)>"
"<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()>","<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()>"
"<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>","<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>"
"<android.widget.AbsListView: int getListPaddingBottom()>","<android.widget.AbsListView: int getListPaddingBottom()>"
"<android.view.Window: void setSharedElementReenterTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementReenterTransition(android.transition.Transition)>"
"<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>","<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>"
"<java.nio.IntBuffer: int hashCode()>","<java.nio.IntBuffer: int hashCode()>"
"<java.lang.Thread$State: java.lang.Thread$State valueOf(java.lang.String)>","<java.lang.Thread$State: java.lang.Thread$State valueOf(java.lang.String)>"
"<android.webkit.WebMessagePort: void close()>","<android.webkit.WebMessagePort: void close()>"
"<android.content.ContentProvider: java.lang.String getReadPermission()>","<android.content.ContentProvider: java.lang.String getReadPermission()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>"
"<android.print.PrintAttributes$MediaSize: boolean equals(java.lang.Object)>","<android.print.PrintAttributes$MediaSize: boolean equals(java.lang.Object)>"
"<java.security.CodeSigner: int hashCode()>","<java.security.CodeSigner: int hashCode()>"
"<android.view.View: void requestLayout()>","<android.view.View: void requestLayout()>"
"<android.media.ImageReader: void <init>()>","<android.media.ImageReader: void <init>()>"
"<android.hardware.display.DeviceProductInfo: int getManufactureWeek()>","<android.hardware.display.DeviceProductInfo: int getManufactureWeek()>"
"<java.nio.Buffer: boolean isDirect()>","<java.nio.Buffer: boolean isDirect()>"
"<android.view.InputDevice: boolean isExternal()>","<android.view.InputDevice: boolean isExternal()>"
"<java.nio.ByteBuffer: byte get(int)>","<java.nio.ByteBuffer: byte get(int)>"
"<android.app.ActivityManager: java.util.List getRunningAppProcesses()>","<android.app.ActivityManager: java.util.List getRunningAppProcesses()>"
"<android.util.ArrayMap: java.util.Collection values()>","<android.util.ArrayMap: java.util.Collection values()>"
"<android.graphics.RectF: int describeContents()>","<android.graphics.RectF: int describeContents()>"
"<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>","<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>"
"<java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)>","<java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription build()>","<android.media.MediaDescription$Builder: android.media.MediaDescription build()>"
"<android.graphics.Matrix: boolean preRotate(float,float,float)>","<android.graphics.Matrix: boolean preRotate(float,float,float)>"
"<java.lang.Integer: int parseUnsignedInt(java.lang.String)>","<java.lang.Integer: int parseUnsignedInt(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence)>","<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence)>"
"<android.content.ComponentName: java.lang.String getPackageName()>","<android.content.ComponentName: java.lang.String getPackageName()>"
"<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>","<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>"
"<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>","<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>"
"<android.accounts.Account: void <clinit>()>","<android.accounts.Account: void <clinit>()>"
"<java.net.DatagramSocket: boolean getBroadcast()>","<java.net.DatagramSocket: boolean getBroadcast()>"
"<android.widget.Toolbar$LayoutParams: void <init>(int,int)>","<android.widget.Toolbar$LayoutParams: void <init>(int,int)>"
"<org.json.JSONObject: int getInt(java.lang.String)>","<org.json.JSONObject: int getInt(java.lang.String)>"
"<java.util.Collections: void <init>()>","<java.util.Collections: void <init>()>"
"<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence)>","<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence)>"
"<android.view.WindowId: int hashCode()>","<android.view.WindowId: int hashCode()>"
"<android.view.View: void setBackgroundResource(int)>","<android.view.View: void setBackgroundResource(int)>"
"<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getMessages()>","<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getMessages()>"
"<java.util.Map: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>"
"<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>"
"<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>","<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>"
"<java.time.temporal.ChronoUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>","<java.time.temporal.ChronoUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
"<android.view.DragAndDropPermissions: int describeContents()>","<android.view.DragAndDropPermissions: int describeContents()>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,int,int)>"
"<android.content.AttributionSource: int describeContents()>","<android.content.AttributionSource: int describeContents()>"
"<java.util.stream.LongStream: java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction)>","<java.util.stream.LongStream: java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction)>"
"<android.content.ClipDescription: boolean isStyledText()>","<android.content.ClipDescription: boolean isStyledText()>"
"<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.nio.file.Path: boolean endsWith(java.lang.String)>","<java.nio.file.Path: boolean endsWith(java.lang.String)>"
"<java.util.Date: int getSeconds()>","<java.util.Date: int getSeconds()>"
"<java.lang.Integer: int divideUnsigned(int,int)>","<java.lang.Integer: int divideUnsigned(int,int)>"
"<android.window.OnBackInvokedDispatcher: void registerOnBackInvokedCallback(int,android.window.OnBackInvokedCallback)>","<android.window.OnBackInvokedDispatcher: void registerOnBackInvokedCallback(int,android.window.OnBackInvokedCallback)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>"
"<android.graphics.Matrix: boolean postRotate(float,float,float)>","<android.graphics.Matrix: boolean postRotate(float,float,float)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>"
"<android.widget.ListPopupWindow: void setWindowLayoutType(int)>","<android.widget.ListPopupWindow: void setWindowLayoutType(int)>"
"<android.view.MotionEvent: float getX(int)>","<android.view.MotionEvent: float getX(int)>"
"<java.time.Period: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
"<java.net.DatagramSocketImpl: int getLocalPort()>","<java.net.DatagramSocketImpl: int getLocalPort()>"
"<android.graphics.Rect: boolean intersect(android.graphics.Rect)>","<android.graphics.Rect: boolean intersect(android.graphics.Rect)>"
"<android.graphics.RenderNode: float getTranslationY()>","<android.graphics.RenderNode: float getTranslationY()>"
"<android.view.View: void setTag(int,java.lang.Object)>","<android.view.View: void setTag(int,java.lang.Object)>"
"<java.io.ObjectOutput: void write(byte[])>","<java.io.ObjectOutput: void write(byte[])>"
"<java.util.Set: boolean equals(java.lang.Object)>","<java.util.Set: boolean equals(java.lang.Object)>"
"<android.hardware.Sensor: int getType()>","<android.hardware.Sensor: int getType()>"
"<java.lang.Character: java.lang.String getName(int)>","<java.lang.Character: java.lang.String getName(int)>"
"<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>","<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>"
"<android.app.Activity: void onContextMenuClosed(android.view.Menu)>","<android.app.Activity: void onContextMenuClosed(android.view.Menu)>"
"<java.lang.ArrayStoreException: void <init>(java.lang.String)>","<java.lang.ArrayStoreException: void <init>(java.lang.String)>"
"<java.util.LinkedList: java.util.Iterator descendingIterator()>","<java.util.LinkedList: java.util.Iterator descendingIterator()>"
"<android.hardware.SensorManager: int getSensors()>","<android.hardware.SensorManager: int getSensors()>"
"<java.io.File: boolean setReadable(boolean)>","<java.io.File: boolean setReadable(boolean)>"
"<java.io.FileInputStream: void <init>(java.lang.String)>","<java.io.FileInputStream: void <init>(java.lang.String)>"
"<java.util.stream.LongStream: java.util.stream.LongStream flatMap(java.util.function.LongFunction)>","<java.util.stream.LongStream: java.util.stream.LongStream flatMap(java.util.function.LongFunction)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>"
"<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>"
"<java.io.File: boolean delete()>","<java.io.File: boolean delete()>"
"<android.view.SurfaceHolder: void setFixedSize(int,int)>","<android.view.SurfaceHolder: void setFixedSize(int,int)>"
"<java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>","<java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>"
"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>","<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>"
"<android.webkit.WebView: void onWindowFocusChanged(boolean)>","<android.webkit.WebView: void onWindowFocusChanged(boolean)>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPassword(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPassword(java.lang.String)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>"
"<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>","<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>"
"<android.widget.TextView: int getLineBreakStyle()>","<android.widget.TextView: int getLineBreakStyle()>"
"<java.util.Locale: java.lang.String lookupTag(java.util.List,java.util.Collection)>","<java.util.Locale: java.lang.String lookupTag(java.util.List,java.util.Collection)>"
"<android.view.ViewParent: void requestFitSystemWindows()>","<android.view.ViewParent: void requestFitSystemWindows()>"
"<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String,java.lang.Class)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDataSpace(android.view.SurfaceControl,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDataSpace(android.view.SurfaceControl,int)>"
"<android.text.Layout: void draw(android.graphics.Canvas)>","<android.text.Layout: void draw(android.graphics.Canvas)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>"
"<java.util.Currency: java.lang.String toString()>","<java.util.Currency: java.lang.String toString()>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setOpaque(boolean)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setOpaque(boolean)>"
"<java.nio.FloatBuffer: java.nio.Buffer limit(int)>","<java.nio.FloatBuffer: java.nio.Buffer limit(int)>"
"<android.graphics.Rect: void union(int,int,int,int)>","<android.graphics.Rect: void union(int,int,int,int)>"
"<android.graphics.fonts.FontStyle: void <init>(int,int)>","<android.graphics.fonts.FontStyle: void <init>(int,int)>"
"<android.graphics.Color: float alpha(long)>","<android.graphics.Color: float alpha(long)>"
"<java.util.function.DoublePredicate: java.util.function.DoublePredicate negate()>","<java.util.function.DoublePredicate: java.util.function.DoublePredicate negate()>"
"<android.widget.AbsListView: void getFocusedRect(android.graphics.Rect)>","<android.widget.AbsListView: void getFocusedRect(android.graphics.Rect)>"
"<android.app.PendingIntent: java.lang.String getTargetPackage()>","<android.app.PendingIntent: java.lang.String getTargetPackage()>"
"<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>","<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setAllowSystemGeneratedContextualActions(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setAllowSystemGeneratedContextualActions(boolean)>"
"<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>","<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>"
"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>","<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()>","<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()>"
"<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>","<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>"
"<android.os.Build$Partition: void <init>()>","<android.os.Build$Partition: void <init>()>"
"<java.lang.Long: int numberOfTrailingZeros(long)>","<java.lang.Long: int numberOfTrailingZeros(long)>"
"<android.os.Bundle: java.lang.ClassLoader getClassLoader()>","<android.os.Bundle: java.lang.ClassLoader getClassLoader()>"
"<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()>","<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()>"
"<android.app.Activity: void startLockTask()>","<android.app.Activity: void startLockTask()>"
"<java.net.SocketImpl: java.io.OutputStream getOutputStream()>","<java.net.SocketImpl: java.io.OutputStream getOutputStream()>"
"<java.lang.SecurityManager: void checkExit(int)>","<java.lang.SecurityManager: void checkExit(int)>"
"<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.util.AttributeSet: java.lang.String getIdAttribute()>","<android.util.AttributeSet: java.lang.String getIdAttribute()>"
"<java.time.LocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>","<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>"
"<android.hardware.lights.Light: void <init>()>","<android.hardware.lights.Light: void <init>()>"
"<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>","<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>"
"<android.view.translation.ViewTranslationResponse: android.view.autofill.AutofillId getAutofillId()>","<android.view.translation.ViewTranslationResponse: android.view.autofill.AutofillId getAutofillId()>"
"<android.graphics.Color: long pack()>","<android.graphics.Color: long pack()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.time.temporal.TemporalField[])>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.time.temporal.TemporalField[])>"
"<android.widget.TextView$SavedState: void <init>()>","<android.widget.TextView$SavedState: void <init>()>"
"<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>","<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.media.Image: android.graphics.Rect getCropRect()>","<android.media.Image: android.graphics.Rect getCropRect()>"
"<android.view.View: void autofill(android.view.autofill.AutofillValue)>","<android.view.View: void autofill(android.view.autofill.AutofillValue)>"
"<android.view.View: void onHoverChanged(boolean)>","<android.view.View: void onHoverChanged(boolean)>"
"<io.flutter.plugins.webviewflutter.l: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.l: void a(java.lang.Object,y.a$e)>"
"<java.lang.Float: boolean isInfinite(float)>","<java.lang.Float: boolean isInfinite(float)>"
"<java.lang.Character: boolean isJavaLetterOrDigit(char)>","<java.lang.Character: boolean isJavaLetterOrDigit(char)>"
"<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>","<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>"
"<android.text.TextUtils: java.lang.CharSequence makeSafeForPresentation(java.lang.String,int,float,int)>","<android.text.TextUtils: java.lang.CharSequence makeSafeForPresentation(java.lang.String,int,float,int)>"
"<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>","<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>"
"<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>","<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>"
"<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>","<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>"
"<android.graphics.PathEffect: void <init>()>","<android.graphics.PathEffect: void <init>()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object accumulateAndGet(int,java.lang.Object,java.util.function.BinaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object accumulateAndGet(int,java.lang.Object,java.util.function.BinaryOperator)>"
"<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>","<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>"
"<android.graphics.RecordingCanvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>"
"<android.widget.ListPopupWindow: void setHorizontalOffset(int)>","<android.widget.ListPopupWindow: void setHorizontalOffset(int)>"
"<java.security.cert.X509Certificate: java.util.Date getNotAfter()>","<java.security.cert.X509Certificate: java.util.Date getNotAfter()>"
"<android.text.SpannableString: android.text.SpannableString valueOf(java.lang.CharSequence)>","<android.text.SpannableString: android.text.SpannableString valueOf(java.lang.CharSequence)>"
"<android.view.View: boolean isFocusableInTouchMode()>","<android.view.View: boolean isFocusableInTouchMode()>"
"<android.view.inputmethod.SurroundingText: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.SurroundingText: void writeToParcel(android.os.Parcel,int)>"
"<java.util.AbstractList: void clear()>","<java.util.AbstractList: void clear()>"
"<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>","<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>"
"<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>","<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>"
"<java.lang.Runtime: void gc()>","<java.lang.Runtime: void gc()>"
"<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>","<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>"
"<android.widget.TextView: void setText(java.lang.CharSequence)>","<android.widget.TextView: void setText(java.lang.CharSequence)>"
"<android.content.ContentValues: void putNull(java.lang.String)>","<android.content.ContentValues: void putNull(java.lang.String)>"
"<android.view.InputDevice: java.lang.String toString()>","<android.view.InputDevice: java.lang.String toString()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<java.nio.LongBuffer: boolean hasArray()>","<java.nio.LongBuffer: boolean hasArray()>"
"<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>","<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>"
"<java.util.jar.JarFile: void <init>(java.lang.String,boolean)>","<java.util.jar.JarFile: void <init>(java.lang.String,boolean)>"
"<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>","<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>"
"<android.app.ActionBar: void hide()>","<android.app.ActionBar: void hide()>"
"<android.graphics.Bitmap: void setHasAlpha(boolean)>","<android.graphics.Bitmap: void setHasAlpha(boolean)>"
"<android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>","<android.app.AppComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)>"
"<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble average()>","<java.util.stream.DoubleStream: java.util.OptionalDouble average()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setChronometerCountDown(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setChronometerCountDown(boolean)>"
"<android.view.View: java.util.ArrayList getTouchables()>","<android.view.View: java.util.ArrayList getTouchables()>"
"<android.graphics.fonts.Font: boolean equals(java.lang.Object)>","<android.graphics.fonts.Font: boolean equals(java.lang.Object)>"
"<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>","<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>"
"<android.os.Bundle: void putShortArray(java.lang.String,short[])>","<android.os.Bundle: void putShortArray(java.lang.String,short[])>"
"<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>","<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void <init>()>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void <init>()>"
"<java.util.Arrays: void fill(byte[],int,int,byte)>","<java.util.Arrays: void fill(byte[],int,int,byte)>"
"<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[])>","<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[])>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>"
"<android.view.contentcapture.ContentCaptureContext: void <init>()>","<android.view.contentcapture.ContentCaptureContext: void <init>()>"
"<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSession createContentCaptureSession(android.view.contentcapture.ContentCaptureContext)>","<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSession createContentCaptureSession(android.view.contentcapture.ContentCaptureContext)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
"<java.lang.Float: void <init>(float)>","<java.lang.Float: void <init>(float)>"
"<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)>"
"<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>","<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>"
"<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>","<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>"
"<java.net.DatagramPacket: void setLength(int)>","<java.net.DatagramPacket: void setLength(int)>"
"<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[])>","<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[])>"
"<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)>","<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.graphics.Matrix: boolean rectStaysRect()>","<android.graphics.Matrix: boolean rectStaysRect()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>"
"<java.lang.Package: boolean isCompatibleWith(java.lang.String)>","<java.lang.Package: boolean isCompatibleWith(java.lang.String)>"
"<android.database.sqlite.SQLiteQuery: java.lang.String toString()>","<android.database.sqlite.SQLiteQuery: java.lang.String toString()>"
"<android.view.inputmethod.CursorAnchorInfo: void <init>(android.os.Parcel)>","<android.view.inputmethod.CursorAnchorInfo: void <init>(android.os.Parcel)>"
"<android.animation.Animator: boolean isStarted()>","<android.animation.Animator: boolean isStarted()>"
"<android.print.PrintAttributes$MediaSize: java.lang.String getId()>","<android.print.PrintAttributes$MediaSize: java.lang.String getId()>"
"<android.os.ResultReceiver: int describeContents()>","<android.os.ResultReceiver: int describeContents()>"
"<java.io.PrintStream: void print(double)>","<java.io.PrintStream: void print(double)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>"
"<android.app.assist.AssistContent: void writeToParcel(android.os.Parcel,int)>","<android.app.assist.AssistContent: void writeToParcel(android.os.Parcel,int)>"
"<android.view.translation.TranslationResponseValue: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.TranslationResponseValue: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <clinit>()>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <clinit>()>"
"<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>","<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>"
"<android.app.VoiceInteractor$Prompt: void writeToParcel(android.os.Parcel,int)>","<android.app.VoiceInteractor$Prompt: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>","<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>"
"<java.util.Date: void <init>(int,int,int)>","<java.util.Date: void <init>(int,int,int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)>"
"<android.app.Activity: android.app.Application getApplication()>","<android.app.Activity: android.app.Application getApplication()>"
"<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>","<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>"
"<android.animation.ValueAnimator: long getTotalDuration()>","<android.animation.ValueAnimator: long getTotalDuration()>"
"<android.os.Parcel: java.lang.Object readSerializable(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object readSerializable(java.lang.ClassLoader,java.lang.Class)>"
"<android.os.LocaleList: boolean equals(java.lang.Object)>","<android.os.LocaleList: boolean equals(java.lang.Object)>"
"<android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>","<android.app.AppComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)>"
"<java.io.FilterOutputStream: void write(byte[])>","<java.io.FilterOutputStream: void write(byte[])>"
"<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>"
"<android.widget.AbsListView: boolean canScrollList(int)>","<android.widget.AbsListView: boolean canScrollList(int)>"
"<android.content.Intent$FilterComparison: int hashCode()>","<android.content.Intent$FilterComparison: int hashCode()>"
"<android.content.pm.ActivityInfo$WindowLayout: void <init>(int,float,int,float,int,int,int)>","<android.content.pm.ActivityInfo$WindowLayout: void <init>(int,float,int,float,int,int,int)>"
"<android.media.ImageReader: android.media.Image acquireLatestImage()>","<android.media.ImageReader: android.media.Image acquireLatestImage()>"
"<android.view.contentcapture.ContentCaptureSession: void close()>","<android.view.contentcapture.ContentCaptureSession: void close()>"
"<java.net.ServerSocket: int getSoTimeout()>","<java.net.ServerSocket: int getSoTimeout()>"
"<android.widget.AdapterView: void <init>(android.content.Context)>","<android.widget.AdapterView: void <init>(android.content.Context)>"
"<android.graphics.drawable.Icon: int describeContents()>","<android.graphics.drawable.Icon: int describeContents()>"
"<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.String,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.String,boolean)>"
"<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>","<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>"
"<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>","<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>"
"<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>","<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate)>"
"<android.view.View: android.view.WindowInsetsController getWindowInsetsController()>","<android.view.View: android.view.WindowInsetsController getWindowInsetsController()>"
"<android.content.pm.PackageManager: void extendVerificationTimeout(int,int,long)>","<android.content.pm.PackageManager: void extendVerificationTimeout(int,int,long)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithData(byte[],int,int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithData(byte[],int,int)>"
"<android.view.WindowInsetsAnimationControlListener: void onReady(android.view.WindowInsetsAnimationController,int)>","<android.view.WindowInsetsAnimationControlListener: void onReady(android.view.WindowInsetsAnimationController,int)>"
"<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Display$Mode: boolean equals(java.lang.Object)>","<android.view.Display$Mode: boolean equals(java.lang.Object)>"
"<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>","<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>"
"<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence,int,int)>","<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence,int,int)>"
"<java.nio.DoubleBuffer: void <init>()>","<java.nio.DoubleBuffer: void <init>()>"
"<android.app.ActionBar: java.lang.CharSequence getSubtitle()>","<android.app.ActionBar: java.lang.CharSequence getSubtitle()>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,java.lang.String)>"
"<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>","<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>"
"<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.net.Uri: java.lang.String getAuthority()>","<android.net.Uri: java.lang.String getAuthority()>"
"<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)>","<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)>"
"<android.view.SurfaceView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.view.SurfaceView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.graphics.fonts.FontFamily: void <init>()>","<android.graphics.fonts.FontFamily: void <init>()>"
"<java.lang.Long: java.lang.Long decode(java.lang.String)>","<java.lang.Long: java.lang.Long decode(java.lang.String)>"
"<android.view.View: void setAccessibilityTraversalAfter(int)>","<android.view.View: void setAccessibilityTraversalAfter(int)>"
"<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>","<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>"
"<android.content.pm.PermissionGroupInfo: int describeContents()>","<android.content.pm.PermissionGroupInfo: int describeContents()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace getFromDataSpace(int)>","<android.graphics.ColorSpace: android.graphics.ColorSpace getFromDataSpace(int)>"
"<java.lang.Thread: void join()>","<java.lang.Thread: void join()>"
"<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>","<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>"
"<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>","<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>"
"<java.util.stream.DoubleStream: double sum()>","<java.util.stream.DoubleStream: double sum()>"
"<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>"
"<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>","<java.text.NumberFormat: java.lang.Number parse(java.lang.String,java.text.ParsePosition)>"
"<android.app.Activity: void onSaveInstanceState(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onSaveInstanceState(android.os.Bundle,android.os.PersistableBundle)>"
"<android.widget.Toolbar: void setCollapseIcon(int)>","<android.widget.Toolbar: void setCollapseIcon(int)>"
"<java.time.OffsetDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>","<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>"
"<android.widget.AbsListView: void fling(int)>","<android.widget.AbsListView: void fling(int)>"
"<android.app.Notification$Action$WearableExtender: boolean getHintDisplayActionInline()>","<android.app.Notification$Action$WearableExtender: boolean getHintDisplayActionInline()>"
"<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>","<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>"
"<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>","<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>"
"<java.util.stream.LongStream: boolean noneMatch(java.util.function.LongPredicate)>","<java.util.stream.LongStream: boolean noneMatch(java.util.function.LongPredicate)>"
"<java.lang.reflect.Modifier: boolean isStrict(int)>","<java.lang.reflect.Modifier: boolean isStrict(int)>"
"<android.graphics.Bitmap: void prepareToDraw()>","<android.graphics.Bitmap: void prepareToDraw()>"
"<java.util.stream.IntStream: java.util.Spliterator spliterator()>","<java.util.stream.IntStream: java.util.Spliterator spliterator()>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,java.lang.CharSequence)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,java.lang.CharSequence)>"
"<java.time.OffsetTime: java.time.OffsetTime minusHours(long)>","<java.time.OffsetTime: java.time.OffsetTime minusHours(long)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)>"
"<java.util.ArrayDeque: java.lang.Object element()>","<java.util.ArrayDeque: java.lang.Object element()>"
"<android.hardware.display.VirtualDisplay$Callback: void onResumed()>","<android.hardware.display.VirtualDisplay$Callback: void onResumed()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.app.ActivityManager$AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)>","<android.app.ActivityManager$AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)>"
"<android.view.Display: int getWidth()>","<android.view.Display: int getWidth()>"
"<android.animation.Animator: void start()>","<android.animation.Animator: void start()>"
"<java.nio.ByteBuffer: int arrayOffset()>","<java.nio.ByteBuffer: int arrayOffset()>"
"<android.util.DisplayMetrics: boolean equals(java.lang.Object)>","<android.util.DisplayMetrics: boolean equals(java.lang.Object)>"
"<java.lang.String: int lastIndexOf(int)>","<java.lang.String: int lastIndexOf(int)>"
"<android.webkit.JsResult: void cancel()>","<android.webkit.JsResult: void cancel()>"
"<androidx.window.sidecar.SidecarDisplayFeature: android.graphics.Rect getRect()>","<androidx.window.sidecar.SidecarDisplayFeature: android.graphics.Rect getRect()>"
"<android.widget.TextView: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()>","<android.widget.TextView: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()>"
"<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>","<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>","<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>"
"<android.content.pm.ApplicationInfo: java.util.Set getKnownActivityEmbeddingCerts()>","<android.content.pm.ApplicationInfo: java.util.Set getKnownActivityEmbeddingCerts()>"
"<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>","<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>"
"<java.lang.Double: long doubleToLongBits(double)>","<java.lang.Double: long doubleToLongBits(double)>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofTotalSeconds(int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofTotalSeconds(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()>"
"<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[],int,int)>","<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[],int,int)>"
"<java.text.CharacterIterator: char current()>","<java.text.CharacterIterator: char current()>"
"<android.view.DragEvent: void <clinit>()>","<android.view.DragEvent: void <clinit>()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()>","<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()>"
"<java.nio.file.WatchEvent: java.lang.Object context()>","<java.nio.file.WatchEvent: java.lang.Object context()>"
"<android.print.PrintAttributes: android.print.PrintAttributes$Resolution getResolution()>","<android.print.PrintAttributes: android.print.PrintAttributes$Resolution getResolution()>"
"<io.flutter.plugins.webviewflutter.q1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.q1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>"
"<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: void reportFullyDrawn()>","<android.app.Activity: void reportFullyDrawn()>"
"<java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)>","<java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)>"
"<android.widget.PopupWindow: int getWindowLayoutType()>","<android.widget.PopupWindow: int getWindowLayoutType()>"
"<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>","<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>"
"<android.graphics.ColorSpace: float[] fromXyz(float,float,float)>","<android.graphics.ColorSpace: float[] fromXyz(float,float,float)>"
"<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>","<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(java.lang.Object)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndDecrement(java.lang.Object)>"
"<java.lang.ClassCircularityError: void <init>(java.lang.String)>","<java.lang.ClassCircularityError: void <init>(java.lang.String)>"
"<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>","<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>"
"<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>","<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>"
"<java.util.LinkedList: void addFirst(java.lang.Object)>","<java.util.LinkedList: void addFirst(java.lang.Object)>"
"<android.media.session.MediaController$TransportControls: void fastForward()>","<android.media.session.MediaController$TransportControls: void fastForward()>"
"<java.util.concurrent.CopyOnWriteArrayList: java.util.List subList(int,int)>","<java.util.concurrent.CopyOnWriteArrayList: java.util.List subList(int,int)>"
"<android.animation.Animator: void cancel()>","<android.animation.Animator: void cancel()>"
"<java.util.Arrays: int compare(byte[],byte[])>","<java.util.Arrays: int compare(byte[],byte[])>"
"<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>","<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>","<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>"
"<android.graphics.Paint: java.util.Locale getTextLocale()>","<android.graphics.Paint: java.util.Locale getTextLocale()>"
"<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>","<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>"
"<java.time.LocalTime: java.time.LocalTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.LocalTime: java.time.LocalTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.time.temporal.TemporalAmount: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.temporal.TemporalAmount: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<java.net.Socket: java.net.InetAddress getLocalAddress()>","<java.net.Socket: java.net.InetAddress getLocalAddress()>"
"<java.lang.ref.Reference: boolean enqueue()>","<java.lang.ref.Reference: boolean enqueue()>"
"<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastModifiedTime()>","<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastModifiedTime()>"
"<java.util.Spliterator$OfDouble: java.util.Spliterator$OfDouble trySplit()>","<java.util.Spliterator$OfDouble: java.util.Spliterator$OfDouble trySplit()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
"<android.view.ViewGroup: void setClipToPadding(boolean)>","<android.view.ViewGroup: void setClipToPadding(boolean)>"
"<android.widget.ImageView: boolean setFrame(int,int,int,int)>","<android.widget.ImageView: boolean setFrame(int,int,int,int)>"
"<java.util.HashMap: void forEach(java.util.function.BiConsumer)>","<java.util.HashMap: void forEach(java.util.function.BiConsumer)>"
"<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>","<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>"
"<android.view.textservice.SentenceSuggestionsInfo: void <clinit>()>","<android.view.textservice.SentenceSuggestionsInfo: void <clinit>()>"
"<android.content.Intent: java.lang.String toURI()>","<android.content.Intent: java.lang.String toURI()>"
"<java.nio.CharBuffer: int read(java.nio.CharBuffer)>","<java.nio.CharBuffer: int read(java.nio.CharBuffer)>"
"<android.widget.TextView: void setTypeface(android.graphics.Typeface)>","<android.widget.TextView: void setTypeface(android.graphics.Typeface)>"
"<android.app.Activity: void onTopResumedActivityChanged(boolean)>","<android.app.Activity: void onTopResumedActivityChanged(boolean)>"
"<java.io.PrintWriter: void print(char[])>","<java.io.PrintWriter: void print(char[])>"
"<java.lang.Boolean: boolean logicalAnd(boolean,boolean)>","<java.lang.Boolean: boolean logicalAnd(boolean,boolean)>"
"<java.time.chrono.ChronoLocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<java.net.ServerSocket: void <init>()>","<java.net.ServerSocket: void <init>()>"
"<java.net.DatagramSocket: void setReceiveBufferSize(int)>","<java.net.DatagramSocket: void setReceiveBufferSize(int)>"
"<java.time.Duration: java.time.Duration negated()>","<java.time.Duration: java.time.Duration negated()>"
"<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>","<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>"
"<android.graphics.drawable.Drawable: boolean isProjected()>","<android.graphics.drawable.Drawable: boolean isProjected()>"
"<java.time.temporal.ChronoField: java.time.temporal.ValueRange range()>","<java.time.temporal.ChronoField: java.time.temporal.ValueRange range()>"
"<java.lang.reflect.Method: java.lang.Class getReturnType()>","<java.lang.reflect.Method: java.lang.Class getReturnType()>"
"<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>","<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>"
"<java.util.Random: java.util.stream.DoubleStream doubles(long)>","<java.util.Random: java.util.stream.DoubleStream doubles(long)>"
"<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)>","<android.view.inputmethod.BaseInputConnection: int getCursorCapsMode(int)>"
"<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>","<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>"
"<java.util.LinkedHashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.LinkedHashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<android.graphics.Paint: float getStrikeThruPosition()>","<android.graphics.Paint: float getStrikeThruPosition()>"
"<io.flutter.plugins.webviewflutter.g: void <clinit>()>","<io.flutter.plugins.webviewflutter.g: void <clinit>()>"
"<android.text.ParcelableSpan: int getSpanTypeId()>","<android.text.ParcelableSpan: int getSpanTypeId()>"
"<android.widget.TextView: void autofill(android.view.autofill.AutofillValue)>","<android.widget.TextView: void autofill(android.view.autofill.AutofillValue)>"
"<java.net.Socket: boolean isConnected()>","<java.net.Socket: boolean isConnected()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)>"
"<android.database.sqlite.SQLiteDatabase: void setCustomScalarFunction(java.lang.String,java.util.function.UnaryOperator)>","<android.database.sqlite.SQLiteDatabase: void setCustomScalarFunction(java.lang.String,java.util.function.UnaryOperator)>"
"<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>","<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>"
"<java.nio.CharBuffer: char[] array()>","<java.nio.CharBuffer: char[] array()>"
"<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)>","<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)>"
"<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>","<java.io.ObjectOutputStream: void annotateClass(java.lang.Class)>"
"<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>"
"<android.view.View: boolean isAccessibilityFocused()>","<android.view.View: boolean isAccessibilityFocused()>"
"<android.util.Size: int getHeight()>","<android.util.Size: int getHeight()>"
"<org.xmlpull.v1.XmlPullParser: int getEventType()>","<org.xmlpull.v1.XmlPullParser: int getEventType()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>"
"<android.graphics.RecordingCanvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>"
"<android.view.View: boolean isShowingLayoutBounds()>","<android.view.View: boolean isShowingLayoutBounds()>"
"<android.content.Loader: int getId()>","<android.content.Loader: int getId()>"
"<java.io.ByteArrayOutputStream: void <init>()>","<java.io.ByteArrayOutputStream: void <init>()>"
"<org.json.JSONTokener: char skipTo(char)>","<org.json.JSONTokener: char skipTo(char)>"
"<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>","<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>"
"<android.graphics.fonts.FontVariationAxis: java.lang.String toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>","<android.graphics.fonts.FontVariationAxis: java.lang.String toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>"
"<android.app.ActionBar: int getTabCount()>","<android.app.ActionBar: int getTabCount()>"
"<java.nio.file.LinkOption: void <clinit>()>","<java.nio.file.LinkOption: void <clinit>()>"
"<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>"
"<java.util.Random: void nextBytes(byte[])>","<java.util.Random: void nextBytes(byte[])>"
"<android.text.Layout: boolean isSpanned()>","<android.text.Layout: boolean isSpanned()>"
"<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>","<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>"
"<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>","<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>"
"<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>","<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>"
"<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>","<android.webkit.WebView: void setWebViewClient(android.webkit.WebViewClient)>"
"<android.content.IntentFilter: java.lang.String getCategory(int)>","<android.content.IntentFilter: java.lang.String getCategory(int)>"
"<java.lang.reflect.Parameter: boolean isSynthetic()>","<java.lang.reflect.Parameter: boolean isSynthetic()>"
"<android.media.session.MediaController$PlaybackInfo: int getPlaybackType()>","<android.media.session.MediaController$PlaybackInfo: int getPlaybackType()>"
"<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>","<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>"
"<java.util.Arrays: void sort(char[],int,int)>","<java.util.Arrays: void sort(char[],int,int)>"
"<java.util.LinkedList: java.lang.Object peek()>","<java.util.LinkedList: java.lang.Object peek()>"
"<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>","<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setDefaultLocales(android.os.LocaleList)>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setDefaultLocales(android.os.LocaleList)>"
"<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>"
"<java.util.ArrayDeque: void addFirst(java.lang.Object)>","<java.util.ArrayDeque: void addFirst(java.lang.Object)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setCutoutPath(android.graphics.Path)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setCutoutPath(android.graphics.Path)>"
"<java.time.LocalDateTime: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>","<java.time.LocalDateTime: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>"
"<java.util.Arrays: int binarySearch(double[],int,int,double)>","<java.util.Arrays: int binarySearch(double[],int,int,double)>"
"<android.util.SizeF: android.util.SizeF parseSizeF(java.lang.String)>","<android.util.SizeF: android.util.SizeF parseSizeF(java.lang.String)>"
"<android.widget.TextView: void setLastBaselineToBottomHeight(int)>","<android.widget.TextView: void setLastBaselineToBottomHeight(int)>"
"<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>","<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>"
"<android.text.PrecomputedText$Params: int hashCode()>","<android.text.PrecomputedText$Params: int hashCode()>"
"<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>","<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.View: void getFocusedRect(android.graphics.Rect)>","<android.view.View: void getFocusedRect(android.graphics.Rect)>"
"<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>"
"<java.util.Calendar: int getFirstDayOfWeek()>","<java.util.Calendar: int getFirstDayOfWeek()>"
"<android.media.VolumeProvider: int getVolumeControl()>","<android.media.VolumeProvider: int getVolumeControl()>"
"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>","<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>"
"<android.graphics.Region: void <init>()>","<android.graphics.Region: void <init>()>"
"<android.text.Layout: int getBottomPadding()>","<android.text.Layout: int getBottomPadding()>"
"<android.icu.util.ULocale: android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale)>","<android.icu.util.ULocale: android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale)>"
"<android.widget.RemoteViews: void setViewLayoutHeight(int,float,int)>","<android.widget.RemoteViews: void setViewLayoutHeight(int,float,int)>"
"<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetVolatile(long,long)>","<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetVolatile(long,long)>"
"<java.lang.Character: java.lang.String toString(char)>","<java.lang.Character: java.lang.String toString(char)>"
"<android.text.Editable: java.lang.Appendable append(char)>","<android.text.Editable: java.lang.Appendable append(char)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>"
"<android.view.View: boolean isPaddingOffsetRequired()>","<android.view.View: boolean isPaddingOffsetRequired()>"
"<android.content.pm.ConfigurationInfo: void <clinit>()>","<android.content.pm.ConfigurationInfo: void <clinit>()>"
"<android.view.ViewConfiguration: long getDefaultActionModeHideDuration()>","<android.view.ViewConfiguration: long getDefaultActionModeHideDuration()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int describeContents()>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int describeContents()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setNumber(int)>"
"<java.net.URL: java.lang.String getFile()>","<java.net.URL: java.lang.String getFile()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>"
"<android.view.textservice.SpellCheckerSession: void cancel()>","<android.view.textservice.SpellCheckerSession: void cancel()>"
"<java.lang.Character: boolean isLowerCase(int)>","<java.lang.Character: boolean isLowerCase(int)>"
"<android.widget.AbsoluteLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsoluteLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.math.BigInteger: void <init>(int,int,java.util.Random)>","<java.math.BigInteger: void <init>(int,int,java.util.Random)>"
"<android.view.accessibility.AccessibilityManager: void addAudioDescriptionRequestedChangeListener(java.util.concurrent.Executor,android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener)>","<android.view.accessibility.AccessibilityManager: void addAudioDescriptionRequestedChangeListener(java.util.concurrent.Executor,android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener)>"
"<android.view.inputmethod.InputMethodSubtype: int getIconResId()>","<android.view.inputmethod.InputMethodSubtype: int getIconResId()>"
"<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>","<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>"
"<android.os.Parcel: android.os.Parcel obtain(android.os.IBinder)>","<android.os.Parcel: android.os.Parcel obtain(android.os.IBinder)>"
"<java.util.Random: void setSeed(long)>","<java.util.Random: void setSeed(long)>"
"<android.webkit.HttpAuthHandler: void <init>()>","<android.webkit.HttpAuthHandler: void <init>()>"
"<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()>","<java.util.jar.JarEntry: java.security.cert.Certificate[] getCertificates()>"
"<android.hardware.SensorDirectChannel: void close()>","<android.hardware.SensorDirectChannel: void close()>"
"<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>","<android.view.textservice.SentenceSuggestionsInfo: int getOffsetAt(int)>"
"<java.nio.channels.AsynchronousFileChannel: void force(boolean)>","<java.nio.channels.AsynchronousFileChannel: void force(boolean)>"
"<java.lang.Short: int intValue()>","<java.lang.Short: int intValue()>"
"<java.io.ObjectInputStream$GetField: float get(java.lang.String,float)>","<java.io.ObjectInputStream$GetField: float get(java.lang.String,float)>"
"<android.os.PatternMatcher: int getType()>","<android.os.PatternMatcher: int getType()>"
"<android.graphics.ColorSpace$Rgb: float getMinValue(int)>","<android.graphics.ColorSpace$Rgb: float getMinValue(int)>"
"<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>","<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>"
"<android.view.View: boolean awakenScrollBars(int)>","<android.view.View: boolean awakenScrollBars(int)>"
"<java.util.Calendar: boolean equals(java.lang.Object)>","<java.util.Calendar: boolean equals(java.lang.Object)>"
"<android.hardware.HardwareBuffer: void writeToParcel(android.os.Parcel,int)>","<android.hardware.HardwareBuffer: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>"
"<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>","<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>"
"<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>","<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>"
"<android.view.ViewGroup: int[] onCreateDrawableState(int)>","<android.view.ViewGroup: int[] onCreateDrawableState(int)>"
"<org.json.JSONArray: long optLong(int,long)>","<org.json.JSONArray: long optLong(int,long)>"
"<android.app.ActionBar$Tab: java.lang.CharSequence getText()>","<android.app.ActionBar$Tab: java.lang.CharSequence getText()>"
"<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>","<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>"
"<android.view.inputmethod.BaseInputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>","<android.view.inputmethod.BaseInputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>"
"<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>","<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>"
"<android.graphics.Paint: float ascent()>","<android.graphics.Paint: float ascent()>"
"<java.util.WeakHashMap: void replaceAll(java.util.function.BiFunction)>","<java.util.WeakHashMap: void replaceAll(java.util.function.BiFunction)>"
"<java.lang.Process: int waitFor()>","<java.lang.Process: int waitFor()>"
"<java.nio.channels.SocketChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.SocketChannel: java.net.SocketAddress getLocalAddress()>"
"<java.lang.reflect.Modifier: boolean isTransient(int)>","<java.lang.reflect.Modifier: boolean isTransient(int)>"
"<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>","<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>"
"<android.view.MotionEvent: float getHistoricalOrientation(int,int)>","<android.view.MotionEvent: float getHistoricalOrientation(int,int)>"
"<android.view.View: int getTextAlignment()>","<android.view.View: int getTextAlignment()>"
"<android.graphics.ImageDecoder: void setMemorySizePolicy(int)>","<android.graphics.ImageDecoder: void setMemorySizePolicy(int)>"
"<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<java.lang.Double: double longBitsToDouble(long)>","<java.lang.Double: double longBitsToDouble(long)>"
"<android.graphics.Matrix: boolean equals(java.lang.Object)>","<android.graphics.Matrix: boolean equals(java.lang.Object)>"
"<android.webkit.GeolocationPermissions$Callback: void invoke(java.lang.String,boolean,boolean)>","<android.webkit.GeolocationPermissions$Callback: void invoke(java.lang.String,boolean,boolean)>"
"<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>","<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View)>"
"<android.content.res.AssetManager: void close()>","<android.content.res.AssetManager: void close()>"
"<java.util.Arrays: void parallelSort(int[])>","<java.util.Arrays: void parallelSort(int[])>"
"<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.ZoneId)>","<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.ZoneId)>"
"<android.transition.TransitionPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>","<android.transition.TransitionPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>"
"<android.view.View: void onAttachedToWindow()>","<android.view.View: void onAttachedToWindow()>"
"<android.widget.Toolbar: int getContentInsetEnd()>","<android.widget.Toolbar: int getContentInsetEnd()>"
"<android.print.PrintAttributes$Margins: int getRightMils()>","<android.print.PrintAttributes$Margins: int getRightMils()>"
"<android.content.Context: java.io.File getCodeCacheDir()>","<android.content.Context: java.io.File getCodeCacheDir()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAutoEnterEnabled(boolean)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAutoEnterEnabled(boolean)>"
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>"
"<android.content.Intent: java.lang.String getPackage()>","<android.content.Intent: java.lang.String getPackage()>"
"<java.util.stream.LongStream: java.util.stream.LongStream of(long[])>","<java.util.stream.LongStream: java.util.stream.LongStream of(long[])>"
"<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View,float,float)>","<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View,float,float)>"
"<java.util.ListIterator: void set(java.lang.Object)>","<java.util.ListIterator: void set(java.lang.Object)>"
"<java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>","<java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>"
"<android.view.KeyEvent: boolean isTracking()>","<android.view.KeyEvent: boolean isTracking()>"
"<android.content.Context: boolean deleteFile(java.lang.String)>","<android.content.Context: boolean deleteFile(java.lang.String)>"
"<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>","<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>"
"<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence,int,int)>"
"<java.security.Guard: void checkGuard(java.lang.Object)>","<java.security.Guard: void checkGuard(java.lang.Object)>"
"<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator andThen(java.util.function.DoubleUnaryOperator)>","<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator andThen(java.util.function.DoubleUnaryOperator)>"
"<android.media.session.MediaSession$Token: void <init>()>","<android.media.session.MediaSession$Token: void <init>()>"
"<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>","<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>"
"<android.util.ArrayMap: int hashCode()>","<android.util.ArrayMap: int hashCode()>"
"<android.hardware.Sensor: java.lang.String getVendor()>","<android.hardware.Sensor: java.lang.String getVendor()>"
"<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)>","<java.util.Currency: java.lang.String getDisplayName(java.util.Locale)>"
"<java.time.OffsetTime: boolean isEqual(java.time.OffsetTime)>","<java.time.OffsetTime: boolean isEqual(java.time.OffsetTime)>"
"<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,short)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,short)>"
"<android.graphics.Movie: int height()>","<android.graphics.Movie: int height()>"
"<java.util.Deque: boolean contains(java.lang.Object)>","<java.util.Deque: boolean contains(java.lang.Object)>"
"<android.view.WindowInsetsAnimationController: float getCurrentAlpha()>","<android.view.WindowInsetsAnimationController: float getCurrentAlpha()>"
"<java.math.BigInteger: java.math.BigInteger negate()>","<java.math.BigInteger: java.math.BigInteger negate()>"
"<java.util.concurrent.atomic.AtomicInteger: void setRelease(int)>","<java.util.concurrent.atomic.AtomicInteger: void setRelease(int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)>"
"<java.nio.ByteBuffer: void <init>()>","<java.nio.ByteBuffer: void <init>()>"
"<java.time.OffsetTime: java.time.OffsetTime now()>","<java.time.OffsetTime: java.time.OffsetTime now()>"
"<java.nio.file.spi.FileSystemProvider: void <init>()>","<java.nio.file.spi.FileSystemProvider: void <init>()>"
"<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>","<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>"
"<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>","<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>"
"<android.graphics.Bitmap: int getDensity()>","<android.graphics.Bitmap: int getDensity()>"
"<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>"
"<android.transition.Scene: android.transition.Scene getCurrentScene(android.view.ViewGroup)>","<android.transition.Scene: android.transition.Scene getCurrentScene(android.view.ViewGroup)>"
"<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>","<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>"
"<android.os.Handler: void handleMessage(android.os.Message)>","<android.os.Handler: void handleMessage(android.os.Message)>"
"<android.content.IntentFilter: boolean matchAction(java.lang.String)>","<android.content.IntentFilter: boolean matchAction(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>","<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>"
"<android.view.KeyCharacterMap: char getNumber(int)>","<android.view.KeyCharacterMap: char getNumber(int)>"
"<java.security.CodeSource: boolean implies(java.security.CodeSource)>","<java.security.CodeSource: boolean implies(java.security.CodeSource)>"
"<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()>","<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()>"
"<android.view.InputDevice: android.hardware.lights.LightsManager getLightsManager()>","<android.view.InputDevice: android.hardware.lights.LightsManager getLightsManager()>"
"<org.json.JSONException: void <init>(java.lang.String,java.lang.Throwable)>","<org.json.JSONException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.Display: boolean isValid()>","<android.view.Display: boolean isValid()>"
"<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>","<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>"
"<android.widget.TextView: boolean bringPointIntoView(int)>","<android.widget.TextView: boolean bringPointIntoView(int)>"
"<java.lang.IllegalStateException: void <init>()>","<java.lang.IllegalStateException: void <init>()>"
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>","<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>"
"<android.os.Message: void setData(android.os.Bundle)>","<android.os.Message: void setData(android.os.Bundle)>"
"<android.transition.Transition: android.transition.Transition removeTarget(java.lang.Class)>","<android.transition.Transition: android.transition.Transition removeTarget(java.lang.Class)>"
"<android.hardware.lights.LightState$Builder: void <init>()>","<android.hardware.lights.LightState$Builder: void <init>()>"
"<java.util.AbstractQueue: boolean addAll(java.util.Collection)>","<java.util.AbstractQueue: boolean addAll(java.util.Collection)>"
"<android.graphics.Paint: void setLetterSpacing(float)>","<android.graphics.Paint: void setLetterSpacing(float)>"
"<android.graphics.drawable.ColorDrawable: void setAlpha(int)>","<android.graphics.drawable.ColorDrawable: void setAlpha(int)>"
"<java.time.chrono.IsoChronology: java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
"<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<java.net.Socket: int getReceiveBufferSize()>","<java.net.Socket: int getReceiveBufferSize()>"
"<java.lang.VerifyError: void <init>(java.lang.String)>","<java.lang.VerifyError: void <init>(java.lang.String)>"
"<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>","<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>"
"<android.view.InputDevice: int getKeyCodeForKeyLocation(int)>","<android.view.InputDevice: int getKeyCodeForKeyLocation(int)>"
"<java.util.Arrays: int mismatch(short[],int,int,short[],int,int)>","<java.util.Arrays: int mismatch(short[],int,int,short[],int,int)>"
"<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>","<android.widget.PopupWindow: void showAtLocation(android.view.View,int,int,int)>"
"<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()>","<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()>"
"<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(int[])>","<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(int[])>"
"<java.util.Arrays: int compare(int[],int,int,int[],int,int)>","<java.util.Arrays: int compare(int[],int,int,int[],int,int)>"
"<android.view.textclassifier.TextLanguage: void <clinit>()>","<android.view.textclassifier.TextLanguage: void <clinit>()>"
"<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)>","<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)>"
"<android.view.ActionMode: void setCustomView(android.view.View)>","<android.view.ActionMode: void setCustomView(android.view.View)>"
"<android.content.Intent: android.content.Intent cloneFilter()>","<android.content.Intent: android.content.Intent cloneFilter()>"
"<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>","<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>"
"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>","<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>"
"<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>","<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"
"<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.view.View: void getHitRect(android.graphics.Rect)>","<android.view.View: void getHitRect(android.graphics.Rect)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>","<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>"
"<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)>","<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)>"
"<android.view.ViewGroup: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.view.ViewGroup: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>","<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>"
"<org.json.JSONArray: long getLong(int)>","<org.json.JSONArray: long getLong(int)>"
"<android.webkit.WebViewRenderProcess: void <init>()>","<android.webkit.WebViewRenderProcess: void <init>()>"
"<java.lang.IncompatibleClassChangeError: void <init>()>","<java.lang.IncompatibleClassChangeError: void <init>()>"
"<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>","<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>"
"<android.content.ContentValues: int size()>","<android.content.ContentValues: int size()>"
"<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>","<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>"
"<android.widget.TextView: boolean getLinksClickable()>","<android.widget.TextView: boolean getLinksClickable()>"
"<android.os.Trace: void beginAsyncSection(java.lang.String,int)>","<android.os.Trace: void beginAsyncSection(java.lang.String,int)>"
"<android.window.SplashScreen: void clearOnExitAnimationListener()>","<android.window.SplashScreen: void clearOnExitAnimationListener()>"
"<java.text.ParsePosition: int getErrorIndex()>","<java.text.ParsePosition: int getErrorIndex()>"
"<android.content.Intent: android.net.Uri getData()>","<android.content.Intent: android.net.Uri getData()>"
"<android.content.res.Resources$Theme: android.content.res.Resources getResources()>","<android.content.res.Resources$Theme: android.content.res.Resources getResources()>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isOther()>","<java.nio.file.attribute.BasicFileAttributes: boolean isOther()>"
"<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>","<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>"
"<android.graphics.RectF: float height()>","<android.graphics.RectF: float height()>"
"<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>","<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>"
"<io.flutter.plugins.webviewflutter.h0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.h0: void a(java.lang.Object,y.a$e)>"
"<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>","<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>"
"<java.util.IdentityHashMap: java.util.Collection values()>","<java.util.IdentityHashMap: java.util.Collection values()>"
"<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)>","<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)>"
"<android.os.CombinedVibration: android.os.CombinedVibration createParallel(android.os.VibrationEffect)>","<android.os.CombinedVibration: android.os.CombinedVibration createParallel(android.os.VibrationEffect)>"
"<java.lang.Comparable: int compareTo(java.lang.Object)>","<java.lang.Comparable: int compareTo(java.lang.Object)>"
"<android.print.PrintAttributes$Resolution: java.lang.String toString()>","<android.print.PrintAttributes$Resolution: java.lang.String toString()>"
"<android.view.View: void setClipBounds(android.graphics.Rect)>","<android.view.View: void setClipBounds(android.graphics.Rect)>"
"<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>","<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>"
"<android.os.Bundle: void putShort(java.lang.String,short)>","<android.os.Bundle: void putShort(java.lang.String,short)>"
"<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)>","<android.webkit.WebSettings: java.lang.String getDefaultUserAgent(android.content.Context)>"
"<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>","<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>"
"<java.nio.charset.Charset: boolean canEncode()>","<java.nio.charset.Charset: boolean canEncode()>"
"<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>","<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>"
"<io.flutter.plugins.webviewflutter.r1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.r1: void a(java.lang.Object,y.a$e)>"
"<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>","<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<java.lang.Character: byte getDirectionality(char)>","<java.lang.Character: byte getDirectionality(char)>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: boolean shouldReferToSpellCheckerLanguageSettings()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: boolean shouldReferToSpellCheckerLanguageSettings()>"
"<android.graphics.RecordingCanvas: void drawPaint(android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPaint(android.graphics.Paint)>"
"<java.net.DatagramPacket: void setPort(int)>","<java.net.DatagramPacket: void setPort(int)>"
"<java.lang.Integer: byte byteValue()>","<java.lang.Integer: byte byteValue()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>"
"<java.util.HashMap: void <init>(java.util.Map)>","<java.util.HashMap: void <init>(java.util.Map)>"
"<android.content.pm.Attribution: void <clinit>()>","<android.content.pm.Attribution: void <clinit>()>"
"<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()>","<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()>"
"<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>","<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>"
"<java.util.MissingResourceException: java.lang.String getKey()>","<java.util.MissingResourceException: java.lang.String getKey()>"
"<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>","<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()>"
"<android.print.PrintAttributes$Resolution: int hashCode()>","<android.print.PrintAttributes$Resolution: int hashCode()>"
"<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>","<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>"
"<android.graphics.text.MeasuredText: float getCharWidthAt(int)>","<android.graphics.text.MeasuredText: float getCharWidthAt(int)>"
"<android.widget.ImageView: void setImageAlpha(int)>","<android.widget.ImageView: void setImageAlpha(int)>"
"<java.util.LinkedList: java.lang.Object get(int)>","<java.util.LinkedList: java.lang.Object get(int)>"
"<android.app.Activity: boolean isTaskRoot()>","<android.app.Activity: boolean isTaskRoot()>"
"<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>","<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>"
"<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>","<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>"
"<java.lang.NumberFormatException: void <init>(java.lang.String)>","<java.lang.NumberFormatException: void <init>(java.lang.String)>"
"<java.util.Arrays: void parallelSort(short[])>","<java.util.Arrays: void parallelSort(short[])>"
"<java.util.Arrays: void sort(long[],int,int)>","<java.util.Arrays: void sort(long[],int,int)>"
"<android.content.pm.PackageManager: int getInstantAppCookieMaxBytes()>","<android.content.pm.PackageManager: int getInstantAppCookieMaxBytes()>"
"<android.text.SpannableStringBuilder: int getTextWatcherDepth()>","<android.text.SpannableStringBuilder: int getTextWatcherDepth()>"
"<android.graphics.text.LineBreakConfig: int getLineBreakWordStyle()>","<android.graphics.text.LineBreakConfig: int getLineBreakWordStyle()>"
"<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>","<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>"
"<android.graphics.Bitmap: int getScaledWidth(int)>","<android.graphics.Bitmap: int getScaledWidth(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream iterate(double,java.util.function.DoubleUnaryOperator)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream iterate(double,java.util.function.DoubleUnaryOperator)>"
"<android.graphics.ImageDecoder: void setOnPartialImageListener(android.graphics.ImageDecoder$OnPartialImageListener)>","<android.graphics.ImageDecoder: void setOnPartialImageListener(android.graphics.ImageDecoder$OnPartialImageListener)>"
"<android.webkit.WebView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.webkit.WebView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<android.content.ContentValues: void remove(java.lang.String)>","<android.content.ContentValues: void remove(java.lang.String)>"
"<java.io.ObjectOutputStream$PutField: void write(java.io.ObjectOutput)>","<java.io.ObjectOutputStream$PutField: void write(java.io.ObjectOutput)>"
"<android.graphics.Outline: float getAlpha()>","<android.graphics.Outline: float getAlpha()>"
"<java.lang.reflect.Parameter: void <init>()>","<java.lang.reflect.Parameter: void <init>()>"
"<android.content.ContentValues: void putAll(android.content.ContentValues)>","<android.content.ContentValues: void putAll(android.content.ContentValues)>"
"<java.time.OffsetTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<java.security.cert.CertPath: boolean equals(java.lang.Object)>","<java.security.cert.CertPath: boolean equals(java.lang.Object)>"
"<android.widget.Filter: java.lang.CharSequence convertResultToString(java.lang.Object)>","<android.widget.Filter: java.lang.CharSequence convertResultToString(java.lang.Object)>"
"<android.graphics.Paint: int getAlpha()>","<android.graphics.Paint: int getAlpha()>"
"<android.view.View: boolean isFocused()>","<android.view.View: boolean isFocused()>"
"<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>","<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage$MessageLevel messageLevel()>","<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage$MessageLevel messageLevel()>"
"<android.animation.ValueAnimator: boolean isStarted()>","<android.animation.ValueAnimator: boolean isStarted()>"
"<java.io.PrintWriter: void write(java.lang.String)>","<java.io.PrintWriter: void write(java.lang.String)>"
"<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.lang.ArithmeticException: void <init>(java.lang.String)>","<java.lang.ArithmeticException: void <init>(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>"
"<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.io.ByteArrayOutputStream: java.lang.String toString(int)>","<java.io.ByteArrayOutputStream: java.lang.String toString(int)>"
"<android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>","<android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>"
"<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>","<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>"
"<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()>","<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()>"
"<android.widget.TextView: void drawableStateChanged()>","<android.widget.TextView: void drawableStateChanged()>"
"<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>","<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>"
"<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>","<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>"
"<android.content.pm.ProviderInfo: void <clinit>()>","<android.content.pm.ProviderInfo: void <clinit>()>"
"<java.util.Locale: java.util.Set getUnicodeLocaleAttributes()>","<java.util.Locale: java.util.Set getUnicodeLocaleAttributes()>"
"<android.view.MotionEvent: float getHistoricalY(int)>","<android.view.MotionEvent: float getHistoricalY(int)>"
"<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>","<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>"
"<android.app.ActionBar$Tab: java.lang.Object getTag()>","<android.app.ActionBar$Tab: java.lang.Object getTag()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setEntityType(java.lang.String,float)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setEntityType(java.lang.String,float)>"
"<java.util.zip.ZipEntry: java.util.zip.ZipEntry setCreationTime(java.nio.file.attribute.FileTime)>","<java.util.zip.ZipEntry: java.util.zip.ZipEntry setCreationTime(java.nio.file.attribute.FileTime)>"
"<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>","<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>"
"<android.content.pm.ResolveInfo: int describeContents()>","<android.content.pm.ResolveInfo: int describeContents()>"
"<android.graphics.drawable.Drawable: void <init>()>","<android.graphics.drawable.Drawable: void <init>()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: void <init>(android.view.textclassifier.TextClassifierEvent$1)>","<android.view.textclassifier.TextClassifierEvent$Builder: void <init>(android.view.textclassifier.TextClassifierEvent$1)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)>"
"<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>","<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>"
"<android.content.pm.PackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()>"
"<android.app.ActionBar$Tab: java.lang.CharSequence getContentDescription()>","<android.app.ActionBar$Tab: java.lang.CharSequence getContentDescription()>"
"<android.app.Dialog: void takeKeyEvents(boolean)>","<android.app.Dialog: void takeKeyEvents(boolean)>"
"<android.view.Window: void restoreHierarchyState(android.os.Bundle)>","<android.view.Window: void restoreHierarchyState(android.os.Bundle)>"
"<java.util.Objects: int checkFromIndexSize(int,int,int)>","<java.util.Objects: int checkFromIndexSize(int,int,int)>"
"<androidx.window.layout.c: void <init>(w0.f)>","<androidx.window.layout.c: void <init>(w0.f)>"
"<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String,java.lang.Class)>"
"<android.media.Image$Plane: void <init>()>","<android.media.Image$Plane: void <init>()>"
"<android.view.View: int getHorizontalFadingEdgeLength()>","<android.view.View: int getHorizontalFadingEdgeLength()>"
"<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>","<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>"
"<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>","<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAdd(java.lang.Object,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAdd(java.lang.Object,long)>"
"<android.opengl.Matrix: float length(float,float,float)>","<android.opengl.Matrix: float length(float,float,float)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>"
"<android.view.animation.Animation: boolean getShowBackdrop()>","<android.view.animation.Animation: boolean getShowBackdrop()>"
"<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>","<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>"
"<android.hardware.display.DeviceProductInfo: void writeToParcel(android.os.Parcel,int)>","<android.hardware.display.DeviceProductInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>"
"<java.net.URI: void <init>(java.lang.String)>","<java.net.URI: void <init>(java.lang.String)>"
"<java.io.DataInput: double readDouble()>","<java.io.DataInput: double readDouble()>"
"<android.widget.RemoteViews: int describeContents()>","<android.widget.RemoteViews: int describeContents()>"
"<java.util.Deque: java.lang.Object getFirst()>","<java.util.Deque: java.lang.Object getFirst()>"
"<android.util.AndroidException: void <init>(java.lang.Exception)>","<android.util.AndroidException: void <init>(java.lang.Exception)>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>"
"<android.content.res.Configuration: void <init>()>","<android.content.res.Configuration: void <init>()>"
"<android.text.PrecomputedText$Params: int getBreakStrategy()>","<android.text.PrecomputedText$Params: int getBreakStrategy()>"
"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>","<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>"
"<android.view.View: void setTextAlignment(int)>","<android.view.View: void setTextAlignment(int)>"
"<android.graphics.Region: boolean getBounds(android.graphics.Rect)>","<android.graphics.Region: boolean getBounds(android.graphics.Rect)>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()>"
"<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>","<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>"
"<android.view.View: void setCameraDistance(float)>","<android.view.View: void setCameraDistance(float)>"
"<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>","<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)>"
"<android.graphics.RecordingCanvas: int getMaximumBitmapHeight()>","<android.graphics.RecordingCanvas: int getMaximumBitmapHeight()>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,float)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,float)>"
"<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>","<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>"
"<java.lang.Short: int toUnsignedInt(short)>","<java.lang.Short: int toUnsignedInt(short)>"
"<android.webkit.JsPromptResult: void <init>()>","<android.webkit.JsPromptResult: void <init>()>"
"<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>","<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>","<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>"
"<android.accounts.Account: int describeContents()>","<android.accounts.Account: int describeContents()>"
"<android.text.SpannableStringBuilder: java.lang.CharSequence subSequence(int,int)>","<android.text.SpannableStringBuilder: java.lang.CharSequence subSequence(int,int)>"
"<android.view.View: boolean awakenScrollBars(int,boolean)>","<android.view.View: boolean awakenScrollBars(int,boolean)>"
"<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>","<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>"
"<android.app.Notification$MessagingStyle: void <init>(android.app.Person)>","<android.app.Notification$MessagingStyle: void <init>(android.app.Person)>"
"<android.database.sqlite.SQLiteProgram: int getUniqueId()>","<android.database.sqlite.SQLiteProgram: int getUniqueId()>"
"<java.net.URISyntaxException: java.lang.String getMessage()>","<java.net.URISyntaxException: java.lang.String getMessage()>"
"<java.util.jar.Manifest: boolean equals(java.lang.Object)>","<java.util.jar.Manifest: boolean equals(java.lang.Object)>"
"<java.time.temporal.TemporalField: java.lang.String toString()>","<java.time.temporal.TemporalField: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor: java.lang.String toString()>","<android.content.res.AssetFileDescriptor: java.lang.String toString()>"
"<java.text.NumberFormat: boolean isParseIntegerOnly()>","<java.text.NumberFormat: boolean isParseIntegerOnly()>"
"<java.io.BufferedReader: java.lang.String readLine()>","<java.io.BufferedReader: java.lang.String readLine()>"
"<java.util.Calendar: java.util.Locale[] getAvailableLocales()>","<java.util.Calendar: java.util.Locale[] getAvailableLocales()>"
"<io.flutter.plugins.webviewflutter.h1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.h1: void a(java.lang.Object,y.a$e)>"
"<java.util.jar.Attributes: java.lang.Object clone()>","<java.util.jar.Attributes: java.lang.Object clone()>"
"<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>","<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>"
"<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>","<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>"
"<android.app.PendingIntent: java.lang.String toString()>","<android.app.PendingIntent: java.lang.String toString()>"
"<android.hardware.Sensor: int getVersion()>","<android.hardware.Sensor: int getVersion()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setGroupAlertBehavior(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setGroupAlertBehavior(int)>"
"<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>","<java.util.concurrent.RejectedExecutionHandler: void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)>"
"<android.os.Debug: long getNativeHeapSize()>","<android.os.Debug: long getNativeHeapSize()>"
"<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>","<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>"
"<java.util.Date: void setTime(long)>","<java.util.Date: void setTime(long)>"
"<android.view.MotionEvent: void offsetLocation(float,float)>","<android.view.MotionEvent: void offsetLocation(float,float)>"
"<android.animation.ValueAnimator: void setRepeatCount(int)>","<android.animation.ValueAnimator: void setRepeatCount(int)>"
"<android.graphics.ColorSpace: float getMaxValue(int)>","<android.graphics.ColorSpace: float getMaxValue(int)>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>"
"<android.view.View: void refreshDrawableState()>","<android.view.View: void refreshDrawableState()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(int,char)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(int,char)>"
"<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>","<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>"
"<android.view.View: void setTransitionVisibility(int)>","<android.view.View: void setTransitionVisibility(int)>"
"<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader,java.lang.Class)>"
"<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>","<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>"
"<android.view.inputmethod.CorrectionInfo: int getOffset()>","<android.view.inputmethod.CorrectionInfo: int getOffset()>"
"<android.text.SpannableStringBuilder: void <init>()>","<android.text.SpannableStringBuilder: void <init>()>"
"<java.lang.Math: double nextAfter(double,double)>","<java.lang.Math: double nextAfter(double,double)>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int,int)>","<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int,int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>"
"<android.widget.TextView: java.lang.String getFontFeatureSettings()>","<android.widget.TextView: java.lang.String getFontFeatureSettings()>"
"<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>","<java.util.Objects: java.lang.String toString(java.lang.Object,java.lang.String)>"
"<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>","<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>"
"<android.view.ViewGroup: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>"
"<android.content.pm.FeatureGroupInfo: void <clinit>()>","<android.content.pm.FeatureGroupInfo: void <clinit>()>"
"<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>","<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>"
"<android.app.Activity: void enterPictureInPictureMode()>","<android.app.Activity: void enterPictureInPictureMode()>"
"<android.os.PersistableBundle: java.lang.Object clone()>","<android.os.PersistableBundle: java.lang.Object clone()>"
"<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>","<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>"
"<java.util.HashSet: void <init>(int)>","<java.util.HashSet: void <init>(int)>"
"<java.net.DatagramPacket: void setData(byte[],int,int)>","<java.net.DatagramPacket: void setData(byte[],int,int)>"
"<android.view.textclassifier.TextSelection$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextSelection$Request: java.lang.CharSequence getText()>"
"<android.content.pm.PackageManager: boolean isInstantApp(java.lang.String)>","<android.content.pm.PackageManager: boolean isInstantApp(java.lang.String)>"
"<android.view.animation.Animation: void setDetachWallpaper(boolean)>","<android.view.animation.Animation: void setDetachWallpaper(boolean)>"
"<android.view.animation.Animation: long computeDurationHint()>","<android.view.animation.Animation: long computeDurationHint()>"
"<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>","<java.util.concurrent.atomic.AtomicLong: long addAndGet(long)>"
"<java.lang.String: int indexOf(int)>","<java.lang.String: int indexOf(int)>"
"<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>"
"<android.os.Vibrator: void vibrate(long[],int,android.media.AudioAttributes)>","<android.os.Vibrator: void vibrate(long[],int,android.media.AudioAttributes)>"
"<java.util.Map: boolean equals(java.lang.Object)>","<java.util.Map: boolean equals(java.lang.Object)>"
"<java.time.LocalDate: int getDayOfMonth()>","<java.time.LocalDate: int getDayOfMonth()>"
"<java.util.Locale$Builder: java.util.Locale$Builder setExtension(char,java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setExtension(char,java.lang.String)>"
"<java.io.File: void <init>(java.net.URI)>","<java.io.File: void <init>(java.net.URI)>"
"<java.lang.SecurityManager: void checkLink(java.lang.String)>","<java.lang.SecurityManager: void checkLink(java.lang.String)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>","<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>"
"<java.util.stream.Stream: void forEach(java.util.function.Consumer)>","<java.util.stream.Stream: void forEach(java.util.function.Consumer)>"
"<java.time.Period: java.time.Period minusYears(long)>","<java.time.Period: java.time.Period minusYears(long)>"
"<java.util.Deque: void addFirst(java.lang.Object)>","<java.util.Deque: void addFirst(java.lang.Object)>"
"<android.content.Loader: void onAbandon()>","<android.content.Loader: void onAbandon()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollY()>","<android.view.accessibility.AccessibilityRecord: int getScrollY()>"
"<java.util.Arrays: java.util.stream.IntStream stream(int[],int,int)>","<java.util.Arrays: java.util.stream.IntStream stream(int[],int,int)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndUpdate(java.lang.Object,java.util.function.IntUnaryOperator)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndUpdate(java.lang.Object,java.util.function.IntUnaryOperator)>"
"<android.hardware.lights.LightsRequest: java.util.Map getLightsAndStates()>","<android.hardware.lights.LightsRequest: java.util.Map getLightsAndStates()>"
"<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>","<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>"
"<android.app.RemoteAction: android.app.RemoteAction clone()>","<android.app.RemoteAction: android.app.RemoteAction clone()>"
"<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>","<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>"
"<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,long)>","<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,long)>"
"<java.lang.Short: int compareTo(java.lang.Short)>","<java.lang.Short: int compareTo(java.lang.Short)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>"
"<android.view.Display: int getRotation()>","<android.view.Display: int getRotation()>"
"<java.util.List: java.util.List subList(int,int)>","<java.util.List: java.util.List subList(int,int)>"
"<android.app.FragmentManager$BackStackEntry: java.lang.String getName()>","<android.app.FragmentManager$BackStackEntry: java.lang.String getName()>"
"<org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()>","<org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>"
"<java.nio.charset.CharsetDecoder: void implReset()>","<java.nio.charset.CharsetDecoder: void implReset()>"
"<android.content.res.ColorStateList: java.lang.String toString()>","<android.content.res.ColorStateList: java.lang.String toString()>"
"<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>","<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>"
"<android.view.ViewStructure: void setAutofillType(int)>","<android.view.ViewStructure: void setAutofillType(int)>"
"<java.nio.file.Path: java.nio.file.Path subpath(int,int)>","<java.nio.file.Path: java.nio.file.Path subpath(int,int)>"
"<android.view.TextureView: android.graphics.Canvas lockCanvas()>","<android.view.TextureView: android.graphics.Canvas lockCanvas()>"
"<org.json.JSONObject: void <init>()>","<org.json.JSONObject: void <init>()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.String toString()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.String toString()>"
"<android.widget.PopupWindow: void setWidth(int)>","<android.widget.PopupWindow: void setWidth(int)>"
"<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>"
"<android.webkit.JsResult: void <init>()>","<android.webkit.JsResult: void <init>()>"
"<android.content.Context: boolean isUiContext()>","<android.content.Context: boolean isUiContext()>"
"<android.content.ClipData: int describeContents()>","<android.content.ClipData: int describeContents()>"
"<android.view.textservice.SpellCheckerSession: void <init>()>","<android.view.textservice.SpellCheckerSession: void <init>()>"
"<android.webkit.CookieManager: void setAcceptCookie(boolean)>","<android.webkit.CookieManager: void setAcceptCookie(boolean)>"
"<android.view.View$DragShadowBuilder: void <init>()>","<android.view.View$DragShadowBuilder: void <init>()>"
"<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace$RenderIntent getRenderIntent()>","<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace$RenderIntent getRenderIntent()>"
"<android.graphics.Path: void set(android.graphics.Path)>","<android.graphics.Path: void set(android.graphics.Path)>"
"<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<io.flutter.plugins.webviewflutter.t: void <init>(io.flutter.plugins.webviewflutter.k$h)>","<io.flutter.plugins.webviewflutter.t: void <init>(io.flutter.plugins.webviewflutter.k$h)>"
"<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>","<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>"
"<android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener: void onBufferTransformHintChanged(int)>","<android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener: void onBufferTransformHintChanged(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isTextSelectable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isTextSelectable()>"
"<android.text.style.LocaleSpan: void <init>(java.util.Locale)>","<android.text.style.LocaleSpan: void <init>(java.util.Locale)>"
"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>","<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>"
"<java.time.LocalTime: void <clinit>()>","<java.time.LocalTime: void <clinit>()>"
"<java.nio.file.Path: java.util.Iterator iterator()>","<java.nio.file.Path: java.util.Iterator iterator()>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor)>"
"<android.app.Presentation: void onDisplayChanged()>","<android.app.Presentation: void onDisplayChanged()>"
"<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>","<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void <clinit>()>","<android.app.VoiceInteractor$PickOptionRequest$Option: void <clinit>()>"
"<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)>","<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)>"
"<android.view.MenuItem: int getOrder()>","<android.view.MenuItem: int getOrder()>"
"<android.animation.LayoutTransition: void setStartDelay(int,long)>","<android.animation.LayoutTransition: void setStartDelay(int,long)>"
"<android.widget.ListPopupWindow: int getSelectedItemPosition()>","<android.widget.ListPopupWindow: int getSelectedItemPosition()>"
"<java.lang.SecurityManager: int classLoaderDepth()>","<java.lang.SecurityManager: int classLoaderDepth()>"
"<android.view.KeyEvent: int getSource()>","<android.view.KeyEvent: int getSource()>"
"<android.os.PatternMatcher: int describeContents()>","<android.os.PatternMatcher: int describeContents()>"
"<android.view.Window: void setLogo(int)>","<android.view.Window: void setLogo(int)>"
"<android.view.View: int getRightPaddingOffset()>","<android.view.View: int getRightPaddingOffset()>"
"<java.time.OffsetTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.webkit.ClientCertRequest: void proceed(java.security.PrivateKey,java.security.cert.X509Certificate[])>","<android.webkit.ClientCertRequest: void proceed(java.security.PrivateKey,java.security.cert.X509Certificate[])>"
"<android.view.accessibility.AccessibilityRecord: void recycle()>","<android.view.accessibility.AccessibilityRecord: void recycle()>"
"<android.view.Menu: void setGroupEnabled(int,boolean)>","<android.view.Menu: void setGroupEnabled(int,boolean)>"
"<android.webkit.JsPromptResult: void confirm(java.lang.String)>","<android.webkit.JsPromptResult: void confirm(java.lang.String)>"
"<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()>","<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()>"
"<java.util.function.Function: java.util.function.Function identity()>","<java.util.function.Function: java.util.function.Function identity()>"
"<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getCancelLabel()>","<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getCancelLabel()>"
"<java.lang.Long: java.lang.String toOctalString(long)>","<java.lang.Long: java.lang.String toOctalString(long)>"
"<android.content.Intent: android.content.Intent addFlags(int)>","<android.content.Intent: android.content.Intent addFlags(int)>"
"<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>","<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>"
"<android.graphics.RenderNode: int getBottom()>","<android.graphics.RenderNode: int getBottom()>"
"<java.io.File: boolean setExecutable(boolean,boolean)>","<java.io.File: boolean setExecutable(boolean,boolean)>"
"<android.hardware.lights.LightsManager: android.hardware.lights.LightState getLightState(android.hardware.lights.Light)>","<android.hardware.lights.LightsManager: android.hardware.lights.LightState getLightState(android.hardware.lights.Light)>"
"<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>","<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>"
"<android.widget.ListPopupWindow: int getInputMethodMode()>","<android.widget.ListPopupWindow: int getInputMethodMode()>"
"<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)>","<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)>"
"<java.util.concurrent.atomic.AtomicReference: void <init>()>","<java.util.concurrent.atomic.AtomicReference: void <init>()>"
"<java.util.LinkedList: boolean removeLastOccurrence(java.lang.Object)>","<java.util.LinkedList: boolean removeLastOccurrence(java.lang.Object)>"
"<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>","<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>"
"<java.time.Clock: void <init>()>","<java.time.Clock: void <init>()>"
"<android.view.KeyCharacterMap: void finalize()>","<android.view.KeyCharacterMap: void finalize()>"
"<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>","<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>"
"<android.graphics.Typeface: void <clinit>()>","<android.graphics.Typeface: void <clinit>()>"
"<android.media.session.MediaController$Callback: void onSessionEvent(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$Callback: void onSessionEvent(java.lang.String,android.os.Bundle)>"
"<android.hardware.SyncFence: int describeContents()>","<android.hardware.SyncFence: int describeContents()>"
"<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>","<android.webkit.WebSettings: void setBuiltInZoomControls(boolean)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withMonth(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withMonth(int)>"
"<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>","<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>"
"<android.webkit.RenderProcessGoneDetail: void <init>()>","<android.webkit.RenderProcessGoneDetail: void <init>()>"
"<java.util.OptionalInt: boolean isEmpty()>","<java.util.OptionalInt: boolean isEmpty()>"
"<android.text.style.TtsSpan$TextBuilder: android.text.style.TtsSpan$TextBuilder setText(java.lang.String)>","<android.text.style.TtsSpan$TextBuilder: android.text.style.TtsSpan$TextBuilder setText(java.lang.String)>"
"<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>","<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>"
"<android.graphics.Paint: void setStrikeThruText(boolean)>","<android.graphics.Paint: void setStrikeThruText(boolean)>"
"<android.content.res.Resources: float getFloat(int)>","<android.content.res.Resources: float getFloat(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)>"
"<android.content.pm.ApplicationInfo: boolean isVirtualPreload()>","<android.content.pm.ApplicationInfo: boolean isVirtualPreload()>"
"<java.util.function.IntPredicate: java.util.function.IntPredicate negate()>","<java.util.function.IntPredicate: java.util.function.IntPredicate negate()>"
"<android.graphics.PathEffect: void finalize()>","<android.graphics.PathEffect: void finalize()>"
"<android.content.Intent: android.content.Intent getIntent(java.lang.String)>","<android.content.Intent: android.content.Intent getIntent(java.lang.String)>"
"<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>","<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>"
"<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>","<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>"
"<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>","<java.util.jar.Attributes$Name: boolean equals(java.lang.Object)>"
"<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>"
"<java.lang.reflect.Executable: int getParameterCount()>","<java.lang.reflect.Executable: int getParameterCount()>"
"<java.io.ObjectInputStream: long readLong()>","<java.io.ObjectInputStream: long readLong()>"
"<io.flutter.plugins.webviewflutter.a2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.a2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>","<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>"
"<android.view.Display: long getPresentationDeadlineNanos()>","<android.view.Display: long getPresentationDeadlineNanos()>"
"<android.widget.TextView: int getAutoSizeMaxTextSize()>","<android.widget.TextView: int getAutoSizeMaxTextSize()>"
"<android.view.View: boolean isAutoHandwritingEnabled()>","<android.view.View: boolean isAutoHandwritingEnabled()>"
"<android.media.Session2Token: int hashCode()>","<android.media.Session2Token: int hashCode()>"
"<java.lang.Iterable: void forEach(java.util.function.Consumer)>","<java.lang.Iterable: void forEach(java.util.function.Consumer)>"
"<java.time.temporal.ChronoUnit: java.lang.String toString()>","<java.time.temporal.ChronoUnit: java.lang.String toString()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.Chronology getChronology()>"
"<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>","<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>"
"<android.widget.RemoteViews: void <init>(java.lang.String,int)>","<android.widget.RemoteViews: void <init>(java.lang.String,int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer reverse()>","<java.lang.StringBuffer: java.lang.StringBuffer reverse()>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setHyphenationFrequency(int)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setHyphenationFrequency(int)>"
"<android.app.PendingIntent: void send(int)>","<android.app.PendingIntent: void send(int)>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,java.util.List,android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,java.util.List,android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>","<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>"
"<android.view.View: void requestApplyInsets()>","<android.view.View: void requestApplyInsets()>"
"<android.view.View: void setNextFocusDownId(int)>","<android.view.View: void setNextFocusDownId(int)>"
"<java.lang.Character: int toUpperCase(int)>","<java.lang.Character: int toUpperCase(int)>"
"<android.graphics.Matrix: void setSkew(float,float,float,float)>","<android.graphics.Matrix: void setSkew(float,float,float,float)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>"
"<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>","<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.View: int getAutofillType()>","<android.view.View: int getAutofillType()>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.concurrent.LinkedBlockingQueue: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.text.Layout: int getLineStart(int)>","<android.text.Layout: int getLineStart(int)>"
"<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>","<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>"
"<androidx.window.sidecar.SidecarInterface: void onWindowLayoutChangeListenerRemoved(android.os.IBinder)>","<androidx.window.sidecar.SidecarInterface: void onWindowLayoutChangeListenerRemoved(android.os.IBinder)>"
"<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()>","<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()>"
"<android.os.Handler: android.os.Message obtainMessage(int)>","<android.os.Handler: android.os.Message obtainMessage(int)>"
"<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>","<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>"
"<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>"
"<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>","<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>"
"<android.view.autofill.AutofillManager: java.lang.String getUserDataId()>","<android.view.autofill.AutofillManager: java.lang.String getUserDataId()>"
"<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback)>","<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback)>"
"<java.util.ArrayList: java.util.Iterator iterator()>","<java.util.ArrayList: java.util.Iterator iterator()>"
"<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>","<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>"
"<java.time.temporal.ChronoField: boolean isDateBased()>","<java.time.temporal.ChronoField: boolean isDateBased()>"
"<android.app.Person: void <clinit>()>","<android.app.Person: void <clinit>()>"
"<android.webkit.WebView: android.view.View findFocus()>","<android.webkit.WebView: android.view.View findFocus()>"
"<android.app.Fragment: void onStart()>","<android.app.Fragment: void onStart()>"
"<java.util.NavigableSet: java.util.NavigableSet descendingSet()>","<java.util.NavigableSet: java.util.NavigableSet descendingSet()>"
"<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>"
"<java.lang.Short: long longValue()>","<java.lang.Short: long longValue()>"
"<android.webkit.WebView$HitTestResult: int getType()>","<android.webkit.WebView$HitTestResult: int getType()>"
"<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>","<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>"
"<android.widget.TextView: void setAutoLinkMask(int)>","<android.widget.TextView: void setAutoLinkMask(int)>"
"<android.webkit.WebSettings: void setOffscreenPreRaster(boolean)>","<android.webkit.WebSettings: void setOffscreenPreRaster(boolean)>"
"<android.content.pm.ComponentInfo: boolean isEnabled()>","<android.content.pm.ComponentInfo: boolean isEnabled()>"
"<java.lang.Runtime: void exit(int)>","<java.lang.Runtime: void exit(int)>"
"<android.widget.AbsListView: void setFilterText(java.lang.String)>","<android.widget.AbsListView: void setFilterText(java.lang.String)>"
"<java.lang.Integer: java.lang.String toString(int)>","<java.lang.Integer: java.lang.String toString(int)>"
"<android.hardware.display.DeviceProductInfo: java.lang.String getName()>","<android.hardware.display.DeviceProductInfo: java.lang.String getName()>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPort(int)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPort(int)>"
"<java.lang.Byte: java.lang.Byte valueOf(byte)>","<java.lang.Byte: java.lang.Byte valueOf(byte)>"
"<android.database.ContentObserver: void <init>(android.os.Handler)>","<android.database.ContentObserver: void <init>(android.os.Handler)>"
"<android.text.Layout: int getEllipsizedWidth()>","<android.text.Layout: int getEllipsizedWidth()>"
"<java.io.ByteArrayInputStream: void reset()>","<java.io.ByteArrayInputStream: void reset()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean refreshWithExtraData(java.lang.String,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeInfo: boolean refreshWithExtraData(java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: int getCompoundPaddingLeft()>","<android.widget.TextView: int getCompoundPaddingLeft()>"
"<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon,android.graphics.drawable.Icon)>","<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon,android.graphics.drawable.Icon)>"
"<android.app.Application: void onLowMemory()>","<android.app.Application: void onLowMemory()>"
"<java.time.Duration: long get(java.time.temporal.TemporalUnit)>","<java.time.Duration: long get(java.time.temporal.TemporalUnit)>"
"<android.view.Display$HdrCapabilities: int describeContents()>","<android.view.Display$HdrCapabilities: int describeContents()>"
"<android.view.inputmethod.InputMethodInfo: int hashCode()>","<android.view.inputmethod.InputMethodInfo: int hashCode()>"
"<android.app.ActivityManager: java.util.List getProcessesInErrorState()>","<android.app.ActivityManager: java.util.List getProcessesInErrorState()>"
"<android.content.ContextWrapper: java.util.concurrent.Executor getMainExecutor()>","<android.content.ContextWrapper: java.util.concurrent.Executor getMainExecutor()>"
"<java.lang.Enum: boolean equals(java.lang.Object)>","<java.lang.Enum: boolean equals(java.lang.Object)>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeLayout(boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeLayout(boolean)>"
"<io.flutter.plugins.webviewflutter.t1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.t1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.widget.ListView: void setFooterDividersEnabled(boolean)>","<android.widget.ListView: void setFooterDividersEnabled(boolean)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setScheduleAsExpeditedJob(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setScheduleAsExpeditedJob(boolean)>"
"<android.view.View: java.util.List getSystemGestureExclusionRects()>","<android.view.View: java.util.List getSystemGestureExclusionRects()>"
"<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>","<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>"
"<android.view.View: void onVisibilityAggregated(boolean)>","<android.view.View: void onVisibilityAggregated(boolean)>"
"<java.security.Provider: java.util.Set keySet()>","<java.security.Provider: java.util.Set keySet()>"
"<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>","<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>"
"<java.lang.Void: void <init>()>","<java.lang.Void: void <init>()>"
"<android.view.MotionEvent: long getEventTime()>","<android.view.MotionEvent: long getEventTime()>"
"<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.Integer: int hashCode(int)>","<java.lang.Integer: int hashCode(int)>"
"<android.util.AttributeSet: java.lang.String getPositionDescription()>","<android.util.AttributeSet: java.lang.String getPositionDescription()>"
"<java.util.Arrays: char[] copyOfRange(char[],int,int)>","<java.util.Arrays: char[] copyOfRange(char[],int,int)>"
"<android.graphics.Typeface$Builder: void <init>(java.io.File)>","<android.graphics.Typeface$Builder: void <init>(java.io.File)>"
"<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>","<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>"
"<android.animation.ValueAnimator$DurationScaleChangeListener: void onChanged(float)>","<android.animation.ValueAnimator$DurationScaleChangeListener: void onChanged(float)>"
"<java.security.PermissionCollection: void add(java.security.Permission)>","<java.security.PermissionCollection: void add(java.security.Permission)>"
"<android.view.WindowId: void registerFocusObserver(android.view.WindowId$FocusObserver)>","<android.view.WindowId: void registerFocusObserver(android.view.WindowId$FocusObserver)>"
"<android.view.ViewOverlay: void clear()>","<android.view.ViewOverlay: void clear()>"
"<android.os.Messenger: void <init>(android.os.Handler)>","<android.os.Messenger: void <init>(android.os.Handler)>"
"<android.content.pm.ServiceInfo: int describeContents()>","<android.content.pm.ServiceInfo: int describeContents()>"
"<android.util.ArrayMap: java.lang.Object valueAt(int)>","<android.util.ArrayMap: java.lang.Object valueAt(int)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle ofDefaultLocale()>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle ofDefaultLocale()>"
"<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>","<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>"
"<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>"
"<android.graphics.Paint: float getShadowLayerDx()>","<android.graphics.Paint: float getShadowLayerDx()>"
"<android.app.Notification$CallStyle: void <init>()>","<android.app.Notification$CallStyle: void <init>()>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>"
"<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>","<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>"
"<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>","<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>","<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>"
"<android.widget.TextView: int getTextSizeUnit()>","<android.widget.TextView: int getTextSizeUnit()>"
"<android.graphics.ColorSpace$Rgb: float[] getTransform(float[])>","<android.graphics.ColorSpace$Rgb: float[] getTransform(float[])>"
"<android.view.View: java.lang.CharSequence getContentDescription()>","<android.view.View: java.lang.CharSequence getContentDescription()>"
"<java.util.function.LongPredicate: java.util.function.LongPredicate or(java.util.function.LongPredicate)>","<java.util.function.LongPredicate: java.util.function.LongPredicate or(java.util.function.LongPredicate)>"
"<android.graphics.Color: float luminance(int)>","<android.graphics.Color: float luminance(int)>"
"<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date)>","<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.util.Date,java.util.Date)>"
"<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>","<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setShowWhen(boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()>"
"<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>","<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>"
"<android.content.ClipDescription: float getConfidenceScore(java.lang.String)>","<android.content.ClipDescription: float getConfidenceScore(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.h3: void <init>()>","<io.flutter.plugins.webviewflutter.h3: void <init>()>"
"<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<java.lang.Boolean: int compareTo(java.lang.Boolean)>","<java.lang.Boolean: int compareTo(java.lang.Boolean)>"
"<java.lang.Class: java.lang.Object cast(java.lang.Object)>","<java.lang.Class: java.lang.Object cast(java.lang.Object)>"
"<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>","<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>"
"<android.view.animation.Animation: void ensureInterpolator()>","<android.view.animation.Animation: void ensureInterpolator()>"
"<java.util.Calendar: java.util.TimeZone getTimeZone()>","<java.util.Calendar: java.util.TimeZone getTimeZone()>"
"<android.widget.TextView: int getAutoLinkMask()>","<android.widget.TextView: int getAutoLinkMask()>"
"<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>","<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>"
"<android.view.inputmethod.CorrectionInfo: int describeContents()>","<android.view.inputmethod.CorrectionInfo: int describeContents()>"
"<android.app.VoiceInteractor$ConfirmationRequest: void onConfirmationResult(boolean,android.os.Bundle)>","<android.app.VoiceInteractor$ConfirmationRequest: void onConfirmationResult(boolean,android.os.Bundle)>"
"<java.lang.reflect.Modifier: int methodModifiers()>","<java.lang.reflect.Modifier: int methodModifiers()>"
"<java.io.PrintStream: void print(boolean)>","<java.io.PrintStream: void print(boolean)>"
"<android.app.RemoteInput$Builder: android.os.Bundle getExtras()>","<android.app.RemoteInput$Builder: android.os.Bundle getExtras()>"
"<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>","<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>"
"<android.app.Dialog: void onContentChanged()>","<android.app.Dialog: void onContentChanged()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
"<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder clearLight(android.hardware.lights.Light)>","<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder clearLight(android.hardware.lights.Light)>"
"<android.os.ParcelFileDescriptor: void checkError()>","<android.os.ParcelFileDescriptor: void checkError()>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float)>"
"<android.view.View: boolean isSoundEffectsEnabled()>","<android.view.View: boolean isSoundEffectsEnabled()>"
"<android.os.VibrationAttributes: int hashCode()>","<android.os.VibrationAttributes: int hashCode()>"
"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>","<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>"
"<java.time.OffsetDateTime: boolean isAfter(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: boolean isAfter(java.time.OffsetDateTime)>"
"<java.util.concurrent.ThreadLocalRandom: long nextLong(long)>","<java.util.concurrent.ThreadLocalRandom: long nextLong(long)>"
"<java.lang.Thread: long getId()>","<java.lang.Thread: long getId()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)>"
"<java.io.File: boolean setExecutable(boolean)>","<java.io.File: boolean setExecutable(boolean)>"
"<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>","<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>"
"<java.time.chrono.ChronoZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.ChronoZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.text.style.LocaleSpan: int getSpanTypeId()>","<android.text.style.LocaleSpan: int getSpanTypeId()>"
"<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>"
"<android.content.pm.PackageInstaller: java.util.List getAllSessions()>","<android.content.pm.PackageInstaller: java.util.List getAllSessions()>"
"<java.util.OptionalLong: boolean isEmpty()>","<java.util.OptionalLong: boolean isEmpty()>"
"<android.app.ActivityManager: int getLockTaskModeState()>","<android.app.ActivityManager: int getLockTaskModeState()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class,java.lang.Class,java.lang.String)>"
"<java.io.FileInputStream: void close()>","<java.io.FileInputStream: void close()>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream onClose(java.lang.Runnable)>","<java.util.stream.BaseStream: java.util.stream.BaseStream onClose(java.lang.Runnable)>"
"<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()>","<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()>"
"<java.io.Reader: java.io.Reader nullReader()>","<java.io.Reader: java.io.Reader nullReader()>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],boolean[])>"
"<java.util.Objects: int compare(java.lang.Object,java.lang.Object,java.util.Comparator)>","<java.util.Objects: int compare(java.lang.Object,java.lang.Object,java.util.Comparator)>"
"<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)>","<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)>"
"<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[],int,int)>","<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[],int,int)>"
"<java.util.Locale$LanguageRange: java.util.List parse(java.lang.String,java.util.Map)>","<java.util.Locale$LanguageRange: java.util.List parse(java.lang.String,java.util.Map)>"
"<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>","<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>"
"<android.view.accessibility.AccessibilityWindowInfo: void <init>(android.view.accessibility.AccessibilityWindowInfo)>","<android.view.accessibility.AccessibilityWindowInfo: void <init>(android.view.accessibility.AccessibilityWindowInfo)>"
"<java.util.AbstractQueue: java.lang.Object element()>","<java.util.AbstractQueue: java.lang.Object element()>"
"<java.util.concurrent.ExecutionException: void <init>()>","<java.util.concurrent.ExecutionException: void <init>()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>"
"<android.view.Window: void setStatusBarContrastEnforced(boolean)>","<android.view.Window: void setStatusBarContrastEnforced(boolean)>"
"<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>","<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>"
"<io.flutter.plugins.webviewflutter.f: void <clinit>()>","<io.flutter.plugins.webviewflutter.f: void <clinit>()>"
"<android.webkit.TracingConfig: void <init>()>","<android.webkit.TracingConfig: void <init>()>"
"<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>","<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>"
"<android.webkit.WebChromeClient: void onHideCustomView()>","<android.webkit.WebChromeClient: void onHideCustomView()>"
"<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<android.app.Activity: void showLockTaskEscapeMessage()>","<android.app.Activity: void showLockTaskEscapeMessage()>"
"<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>","<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>"
"<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>","<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>"
"<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)>","<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setPriority(int)>"
"<android.app.Activity: boolean enterPictureInPictureMode(android.app.PictureInPictureParams)>","<android.app.Activity: boolean enterPictureInPictureMode(android.app.PictureInPictureParams)>"
"<android.media.session.MediaSession$QueueItem: void <init>(android.media.MediaDescription,long)>","<android.media.session.MediaSession$QueueItem: void <init>(android.media.MediaDescription,long)>"
"<android.icu.util.ULocale: java.util.Locale toLocale()>","<android.icu.util.ULocale: java.util.Locale toLocale()>"
"<java.util.DoubleSummaryStatistics: long getCount()>","<java.util.DoubleSummaryStatistics: long getCount()>"
"<android.graphics.ColorSpace$Connector: float[] transform(float,float,float)>","<android.graphics.ColorSpace$Connector: float[] transform(float,float,float)>"
"<android.app.Activity: boolean onPictureInPictureRequested()>","<android.app.Activity: boolean onPictureInPictureRequested()>"
"<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>","<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>"
"<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>","<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>"
"<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>","<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>"
"<android.view.WindowInsets: boolean hasStableInsets()>","<android.view.WindowInsets: boolean hasStableInsets()>"
"<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>","<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource(int)>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource(int)>"
"<java.util.ArrayList: void sort(java.util.Comparator)>","<java.util.ArrayList: void sort(java.util.Comparator)>"
"<android.os.Parcel: void writeBundle(android.os.Bundle)>","<android.os.Parcel: void writeBundle(android.os.Bundle)>"
"<java.nio.LongBuffer: java.nio.LongBuffer duplicate()>","<java.nio.LongBuffer: java.nio.LongBuffer duplicate()>"
"<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>","<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: void requestPermissions(java.lang.String[],int)>","<android.app.Activity: void requestPermissions(java.lang.String[],int)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow()>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow()>"
"<android.app.Activity: void onPause()>","<android.app.Activity: void onPause()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>"
"<android.text.SpannableStringBuilder: void clear()>","<android.text.SpannableStringBuilder: void clear()>"
"<android.graphics.Paint: java.lang.String getFontVariationSettings()>","<android.graphics.Paint: java.lang.String getFontVariationSettings()>"
"<android.app.VoiceInteractor$CompleteVoiceRequest: void onCompleteResult(android.os.Bundle)>","<android.app.VoiceInteractor$CompleteVoiceRequest: void onCompleteResult(android.os.Bundle)>"
"<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<java.time.Clock: boolean equals(java.lang.Object)>","<java.time.Clock: boolean equals(java.lang.Object)>"
"<android.widget.Toolbar: void setLogo(int)>","<android.widget.Toolbar: void setLogo(int)>"
"<android.content.Intent$FilterComparison: android.content.Intent getIntent()>","<android.content.Intent$FilterComparison: android.content.Intent getIntent()>"
"<android.app.Activity: void onRestart()>","<android.app.Activity: void onRestart()>"
"<android.app.FragmentManager: void <init>()>","<android.app.FragmentManager: void <init>()>"
"<android.view.MotionEvent: int axisFromString(java.lang.String)>","<android.view.MotionEvent: int axisFromString(java.lang.String)>"
"<android.widget.TextView: void setCursorVisible(boolean)>","<android.widget.TextView: void setCursorVisible(boolean)>"
"<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>","<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>"
"<android.view.View: void setScrollbarFadingEnabled(boolean)>","<android.view.View: void setScrollbarFadingEnabled(boolean)>"
"<android.view.animation.Animation: float getScaleFactor()>","<android.view.animation.Animation: float getScaleFactor()>"
"<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>","<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>"
"<android.graphics.Color: android.graphics.Color valueOf(long)>","<android.graphics.Color: android.graphics.Color valueOf(long)>"
"<java.time.LocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>"
"<java.time.LocalTime: int compareTo(java.time.LocalTime)>","<java.time.LocalTime: int compareTo(java.time.LocalTime)>"
"<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>","<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>"
"<android.widget.AbsListView: void scrollListBy(int)>","<android.widget.AbsListView: void scrollListBy(int)>"
"<java.util.Random: long nextLong()>","<java.util.Random: long nextLong()>"
"<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>","<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>","<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect)>"
"<java.security.AccessControlException: void <init>(java.lang.String)>","<java.security.AccessControlException: void <init>(java.lang.String)>"
"<java.time.temporal.TemporalAccessor: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.temporal.TemporalAccessor: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.hardware.lights.LightState: void writeToParcel(android.os.Parcel,int)>","<android.hardware.lights.LightState: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>","<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setEmailArguments(java.lang.String,java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setEmailArguments(java.lang.String,java.lang.String)>"
"<java.io.PrintStream: void close()>","<java.io.PrintStream: void close()>"
"<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>","<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>","<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>"
"<android.view.View: int getVerticalFadingEdgeLength()>","<android.view.View: int getVerticalFadingEdgeLength()>"
"<android.graphics.Paint$FontMetricsInt: int hashCode()>","<android.graphics.Paint$FontMetricsInt: int hashCode()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setActions(android.app.Notification$Action[])>","<android.app.Notification$Builder: android.app.Notification$Builder setActions(android.app.Notification$Action[])>"
"<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>","<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>"
"<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorConnected(android.hardware.Sensor)>","<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorConnected(android.hardware.Sensor)>"
"<java.time.chrono.IsoEra: int getValue()>","<java.time.chrono.IsoEra: int getValue()>"
"<android.media.session.MediaController$TransportControls: void rewind()>","<android.media.session.MediaController$TransportControls: void rewind()>"
"<android.view.animation.Animation: long getStartTime()>","<android.view.animation.Animation: long getStartTime()>"
"<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>","<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>"
"<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)>","<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)>"
"<android.content.Loader: boolean isReset()>","<android.content.Loader: boolean isReset()>"
"<android.view.View: boolean isContextClickable()>","<android.view.View: boolean isContextClickable()>"
"<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>"
"<java.nio.CharBuffer: int length()>","<java.nio.CharBuffer: int length()>"
"<android.view.textclassifier.TextClassifierEvent: int getEventIndex()>","<android.view.textclassifier.TextClassifierEvent: int getEventIndex()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)>"
"<android.widget.TextView: void setSelectAllOnFocus(boolean)>","<android.widget.TextView: void setSelectAllOnFocus(boolean)>"
"<android.content.res.AssetManager$AssetInputStream: int available()>","<android.content.res.AssetManager$AssetInputStream: int available()>"
"<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>","<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>"
"<android.database.Cursor: void setNotificationUris(android.content.ContentResolver,java.util.List)>","<android.database.Cursor: void setNotificationUris(android.content.ContentResolver,java.util.List)>"
"<java.util.HashSet: boolean remove(java.lang.Object)>","<java.util.HashSet: boolean remove(java.lang.Object)>"
"<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.Class,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.Class,boolean)>"
"<android.view.textservice.TextInfo: int getSequence()>","<android.view.textservice.TextInfo: int getSequence()>"
"<java.util.concurrent.CopyOnWriteArraySet: java.util.Spliterator spliterator()>","<java.util.concurrent.CopyOnWriteArraySet: java.util.Spliterator spliterator()>"
"<java.util.Calendar: java.time.Instant toInstant()>","<java.util.Calendar: java.time.Instant toInstant()>"
"<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>","<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>"
"<android.graphics.RenderNode: boolean getUseCompositingLayer()>","<android.graphics.RenderNode: boolean getUseCompositingLayer()>"
"<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getEditorBounds()>","<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getEditorBounds()>"
"<android.view.textclassifier.TextSelection: java.lang.String toString()>","<android.view.textclassifier.TextSelection: java.lang.String toString()>"
"<android.widget.ListPopupWindow: void setPromptView(android.view.View)>","<android.widget.ListPopupWindow: void setPromptView(android.view.View)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>"
"<android.view.ViewGroup: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>","<android.view.ViewGroup: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>"
"<android.widget.Scroller: void <init>(android.content.Context)>","<android.widget.Scroller: void <init>(android.content.Context)>"
"<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>","<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>"
"<android.webkit.WebView$HitTestResult: void <init>()>","<android.webkit.WebView$HitTestResult: void <init>()>"
"<android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>"
"<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,android.graphics.Color)>","<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,android.graphics.Color)>"
"<java.lang.Object: void finalize()>","<java.lang.Object: void finalize()>"
"<java.util.AbstractCollection: void clear()>","<java.util.AbstractCollection: void clear()>"
"<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>"
"<android.view.MotionEvent: int getDeviceId()>","<android.view.MotionEvent: int getDeviceId()>"
"<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>","<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>"
"<android.widget.PopupWindow: int getAnimationStyle()>","<android.widget.PopupWindow: int getAnimationStyle()>"
"<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>","<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>"
"<android.print.PrintAttributes$Builder: android.print.PrintAttributes build()>","<android.print.PrintAttributes$Builder: android.print.PrintAttributes build()>"
"<android.view.ViewParent: int getTextAlignment()>","<android.view.ViewParent: int getTextAlignment()>"
"<java.util.Arrays: java.lang.String toString(boolean[])>","<java.util.Arrays: java.lang.String toString(boolean[])>"
"<java.nio.ShortBuffer: java.nio.Buffer rewind()>","<java.nio.ShortBuffer: java.nio.Buffer rewind()>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>"
"<java.util.Collections: void fill(java.util.List,java.lang.Object)>","<java.util.Collections: void fill(java.util.List,java.lang.Object)>"
"<android.media.session.MediaSession$Callback: void onPause()>","<android.media.session.MediaSession$Callback: void onPause()>"
"<android.text.Layout: boolean isFallbackLineSpacingEnabled()>","<android.text.Layout: boolean isFallbackLineSpacingEnabled()>"
"<java.util.jar.Manifest: java.util.Map getEntries()>","<java.util.jar.Manifest: java.util.Map getEntries()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int describeContents()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int describeContents()>"
"<java.lang.System: long currentTimeMillis()>","<java.lang.System: long currentTimeMillis()>"
"<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.view.MenuItem: android.view.MenuItem setIconTintBlendMode(android.graphics.BlendMode)>","<android.view.MenuItem: android.view.MenuItem setIconTintBlendMode(android.graphics.BlendMode)>"
"<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>","<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>"
"<android.content.pm.ComponentInfo: int getLogoResource()>","<android.content.pm.ComponentInfo: int getLogoResource()>"
"<java.io.ObjectOutputStream: void writeStreamHeader()>","<java.io.ObjectOutputStream: void writeStreamHeader()>"
"<android.content.ContextWrapper: boolean isDeviceProtectedStorage()>","<android.content.ContextWrapper: boolean isDeviceProtectedStorage()>"
"<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>","<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>"
"<android.view.textclassifier.SelectionEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.SelectionEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>","<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>"
"<c0.g: void <clinit>()>","<c0.g: void <clinit>()>"
"<android.app.Notification$BubbleMetadata: void <clinit>()>","<android.app.Notification$BubbleMetadata: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>"
"<org.json.JSONArray: void <init>(java.util.Collection)>","<org.json.JSONArray: void <init>(java.util.Collection)>"
"<android.graphics.Canvas: int getHeight()>","<android.graphics.Canvas: int getHeight()>"
"<java.util.Arrays: int compare(float[],int,int,float[],int,int)>","<java.util.Arrays: int compare(float[],int,int,float[],int,int)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>"
"<java.security.Principal: boolean implies(javax.security.auth.Subject)>","<java.security.Principal: boolean implies(javax.security.auth.Subject)>"
"<java.lang.String: int indexOf(int,int)>","<java.lang.String: int indexOf(int,int)>"
"<android.view.AttachedSurfaceControl: boolean applyTransactionOnDraw(android.view.SurfaceControl$Transaction)>","<android.view.AttachedSurfaceControl: boolean applyTransactionOnDraw(android.view.SurfaceControl$Transaction)>"
"<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashError(int)>","<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashError(int)>"
"<android.os.Debug: void resetThreadAllocSize()>","<android.os.Debug: void resetThreadAllocSize()>"
"<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>"
"<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>","<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>"
"<android.view.View: float getBottomFadingEdgeStrength()>","<android.view.View: float getBottomFadingEdgeStrength()>"
"<java.time.ZonedDateTime: int getYear()>","<java.time.ZonedDateTime: int getYear()>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>"
"<android.graphics.ColorSpace: float[] toXyz(float,float,float)>","<android.graphics.ColorSpace: float[] toXyz(float,float,float)>"
"<android.view.View: void addFocusables(java.util.ArrayList,int)>","<android.view.View: void addFocusables(java.util.ArrayList,int)>"
"<o.c: void run()>","<o.c: void run()>"
"<java.util.concurrent.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)>","<java.util.concurrent.ThreadPoolExecutor: long getKeepAliveTime(java.util.concurrent.TimeUnit)>"
"<android.view.MotionEvent: float getY()>","<android.view.MotionEvent: float getY()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>"
"<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>","<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>"
"<java.lang.Byte: int hashCode(byte)>","<java.lang.Byte: int hashCode(byte)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>"
"<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.pm.PackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)>","<android.content.pm.PackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)>"
"<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>","<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>"
"<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>","<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>"
"<java.lang.Character: boolean isISOControl(int)>","<java.lang.Character: boolean isISOControl(int)>"
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>"
"<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>","<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>"
"<android.view.Window: void setReturnTransition(android.transition.Transition)>","<android.view.Window: void setReturnTransition(android.transition.Transition)>"
"<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>","<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"
"<android.view.ViewPropertyAnimator: void <init>()>","<android.view.ViewPropertyAnimator: void <init>()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>","<java.lang.StringBuffer: java.lang.StringBuffer append(int)>"
"<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>","<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.graphics.fonts.FontStyle: boolean equals(java.lang.Object)>","<android.graphics.fonts.FontStyle: boolean equals(java.lang.Object)>"
"<android.content.ServiceConnection: void onBindingDied(android.content.ComponentName)>","<android.content.ServiceConnection: void onBindingDied(android.content.ComponentName)>"
"<java.util.AbstractCollection: java.lang.Object[] toArray()>","<java.util.AbstractCollection: java.lang.Object[] toArray()>"
"<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>","<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>"
"<android.widget.RemoteViews$RemoteViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>","<android.widget.RemoteViews$RemoteViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setBadgeIconType(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setBadgeIconType(int)>"
"<android.view.WindowInsets: boolean equals(java.lang.Object)>","<android.view.WindowInsets: boolean equals(java.lang.Object)>"
"<android.view.View: void setActivated(boolean)>","<android.view.View: void setActivated(boolean)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void execute(java.lang.Runnable)>"
"<java.util.LinkedList: void add(int,java.lang.Object)>","<java.util.LinkedList: void add(int,java.lang.Object)>"
"<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>","<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>"
"<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)>","<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)>"
"<android.os.BaseBundle: long getLong(java.lang.String)>","<android.os.BaseBundle: long getLong(java.lang.String)>"
"<java.lang.Number: void <init>()>","<java.lang.Number: void <init>()>"
"<java.util.NavigableSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>","<java.util.NavigableSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>"
"<android.os.Parcel: void writeTypedObject(android.os.Parcelable,int)>","<android.os.Parcel: void writeTypedObject(android.os.Parcelable,int)>"
"<java.util.AbstractMap: boolean containsKey(java.lang.Object)>","<java.util.AbstractMap: boolean containsKey(java.lang.Object)>"
"<android.view.translation.ViewTranslationResponse: int describeContents()>","<android.view.translation.ViewTranslationResponse: int describeContents()>"
"<android.view.AttachedSurfaceControl: android.view.SurfaceControl$Transaction buildReparentTransaction(android.view.SurfaceControl)>","<android.view.AttachedSurfaceControl: android.view.SurfaceControl$Transaction buildReparentTransaction(android.view.SurfaceControl)>"
"<android.icu.util.ULocale$Category: void <init>(java.lang.String,int)>","<android.icu.util.ULocale$Category: void <init>(java.lang.String,int)>"
"<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setContentType(int)>","<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setContentType(int)>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>"
"<java.lang.Character: boolean isUpperCase(int)>","<java.lang.Character: boolean isUpperCase(int)>"
"<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>","<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>"
"<java.nio.channels.SelectionKey: boolean isAcceptable()>","<java.nio.channels.SelectionKey: boolean isAcceptable()>"
"<android.widget.Toolbar: void setNavigationContentDescription(int)>","<android.widget.Toolbar: void setNavigationContentDescription(int)>"
"<java.lang.reflect.Executable: java.lang.String getName()>","<java.lang.reflect.Executable: java.lang.String getName()>"
"<android.view.contentcapture.ContentCaptureContext: java.lang.String toString()>","<android.view.contentcapture.ContentCaptureContext: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.util.Set)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.util.Set)>"
"<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable)>","<java.util.concurrent.Executors: java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable)>"
"<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<java.util.concurrent.atomic.AtomicBoolean: void <init>()>","<java.util.concurrent.atomic.AtomicBoolean: void <init>()>"
"<android.graphics.Path: void addPath(android.graphics.Path)>","<android.graphics.Path: void addPath(android.graphics.Path)>"
"<java.util.stream.LongStream$Builder: java.util.stream.LongStream build()>","<java.util.stream.LongStream$Builder: java.util.stream.LongStream build()>"
"<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>","<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>"
"<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()>","<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()>"
"<android.graphics.BlendMode: void <clinit>()>","<android.graphics.BlendMode: void <clinit>()>"
"<android.view.animation.Animation: boolean getDetachWallpaper()>","<android.view.animation.Animation: boolean getDetachWallpaper()>"
"<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()>","<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()>"
"<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>","<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>"
"<android.view.animation.Animation: void setBackdropColor(int)>","<android.view.animation.Animation: void setBackdropColor(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>"
"<android.view.View: void setPivotY(float)>","<android.view.View: void setPivotY(float)>"
"<android.view.animation.Animation: void start()>","<android.view.animation.Animation: void start()>"
"<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int,int)>"
"<java.time.LocalTime: void <init>()>","<java.time.LocalTime: void <init>()>"
"<android.widget.TextView: int getMinWidth()>","<android.widget.TextView: int getMinWidth()>"
"<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>","<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>"
"<android.media.AudioAttributes: int getFlags()>","<android.media.AudioAttributes: int getFlags()>"
"<android.graphics.fonts.Font: int getTtcIndex()>","<android.graphics.fonts.Font: int getTtcIndex()>"
"<android.text.style.TtsSpan$CardinalBuilder: void <init>(long)>","<android.text.style.TtsSpan$CardinalBuilder: void <init>(long)>"
"<java.lang.Runtime: void loadLibrary(java.lang.String)>","<java.lang.Runtime: void loadLibrary(java.lang.String)>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.os.Debug: void printLoadedClasses(int)>","<android.os.Debug: void printLoadedClasses(int)>"
"<android.app.ActivityManager: void setWatchHeapLimit(long)>","<android.app.ActivityManager: void setWatchHeapLimit(long)>"
"<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>"
"<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>","<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod normalized()>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod normalized()>"
"<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory privilegedThreadFactory()>","<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory privilegedThreadFactory()>"
"<android.view.View: boolean hasWindowFocus()>","<android.view.View: boolean hasWindowFocus()>"
"<android.view.textservice.TextInfo: void <init>(android.os.Parcel)>","<android.view.textservice.TextInfo: void <init>(android.os.Parcel)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>"
"<java.io.FilterOutputStream: void close()>","<java.io.FilterOutputStream: void close()>"
"<android.util.ArrayMap: void <init>()>","<android.util.ArrayMap: void <init>()>"
"<android.app.FragmentManager: boolean isStateSaved()>","<android.app.FragmentManager: boolean isStateSaved()>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int,int)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int,int)>"
"<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>","<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>"
"<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)>"
"<java.time.LocalDateTime: int getDayOfYear()>","<java.time.LocalDateTime: int getDayOfYear()>"
"<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>","<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.app.Fragment: android.content.res.Resources getResources()>","<android.app.Fragment: android.content.res.Resources getResources()>"
"<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>","<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>"
"<java.util.TimeZone: java.util.TimeZone getTimeZone(java.time.ZoneId)>","<java.util.TimeZone: java.util.TimeZone getTimeZone(java.time.ZoneId)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()>","<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()>"
"<android.graphics.Paint: void setTextScaleX(float)>","<android.graphics.Paint: void setTextScaleX(float)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect()>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect()>"
"<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<android.view.translation.TranslationCapability: int getState()>","<android.view.translation.TranslationCapability: int getState()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>","<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>"
"<android.webkit.WebView: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>","<android.webkit.WebView: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>"
"<android.view.View: boolean isHovered()>","<android.view.View: boolean isHovered()>"
"<java.util.ArrayDeque: void <init>(java.util.Collection)>","<java.util.ArrayDeque: void <init>(java.util.Collection)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setLocale(android.icu.util.ULocale)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setLocale(android.icu.util.ULocale)>"
"<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)>","<java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)>"
"<android.widget.AbsListView: int getTranscriptMode()>","<android.widget.AbsListView: int getTranscriptMode()>"
"<android.os.Message: android.os.Handler getTarget()>","<android.os.Message: android.os.Handler getTarget()>"
"<android.graphics.fonts.Font: java.lang.String toString()>","<android.graphics.fonts.Font: java.lang.String toString()>"
"<java.security.Provider: java.util.Enumeration elements()>","<java.security.Provider: java.util.Enumeration elements()>"
"<android.content.ContentProvider: android.content.AttributionSource getCallingAttributionSource()>","<android.content.ContentProvider: android.content.AttributionSource getCallingAttributionSource()>"
"<java.net.URI: int hashCode()>","<java.net.URI: int hashCode()>"
"<java.lang.UnsupportedOperationException: void <init>()>","<java.lang.UnsupportedOperationException: void <init>()>"
"<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>","<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>"
"<android.hardware.SensorManager: java.util.List getSensorList(int)>","<android.hardware.SensorManager: java.util.List getSensorList(int)>"
"<android.media.Rating: java.lang.String toString()>","<android.media.Rating: java.lang.String toString()>"
"<androidx.window.embedding.e: void <init>(java.util.Set)>","<androidx.window.embedding.e: void <init>(java.util.Set)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>"
"<java.util.Spliterator$OfDouble: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfDouble: void forEachRemaining(java.lang.Object)>"
"<android.media.MediaDescription: void writeToParcel(android.os.Parcel,int)>","<android.media.MediaDescription: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>","<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>"
"<java.time.chrono.ChronoLocalDate: long toEpochDay()>","<java.time.chrono.ChronoLocalDate: long toEpochDay()>"
"<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>","<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>"
"<android.graphics.Paint: java.lang.String getFontFeatureSettings()>","<android.graphics.Paint: java.lang.String getFontFeatureSettings()>"
"<java.lang.Byte: double doubleValue()>","<java.lang.Byte: double doubleValue()>"
"<java.lang.Float: boolean isInfinite()>","<java.lang.Float: boolean isInfinite()>"
"<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>","<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>"
"<android.graphics.Paint: void setColor(long)>","<android.graphics.Paint: void setColor(long)>"
"<android.content.pm.PackageManager: android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String)>","<android.content.pm.PackageManager: android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String)>"
"<android.app.Activity: int getMaxNumPictureInPictureActions()>","<android.app.Activity: int getMaxNumPictureInPictureActions()>"
"<java.util.PriorityQueue: void <init>(java.util.Collection)>","<java.util.PriorityQueue: void <init>(java.util.Collection)>"
"<android.view.autofill.AutofillManager$AutofillCallback: void onAutofillEvent(android.view.View,int)>","<android.view.autofill.AutofillManager$AutofillCallback: void onAutofillEvent(android.view.View,int)>"
"<android.content.res.Resources: void flushLayoutCache()>","<android.content.res.Resources: void flushLayoutCache()>"
"<java.lang.String: void <clinit>()>","<java.lang.String: void <clinit>()>"
"<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>"
"<java.util.AbstractMap: java.util.Set keySet()>","<java.util.AbstractMap: java.util.Set keySet()>"
"<android.view.View: android.content.res.Resources getResources()>","<android.view.View: android.content.res.Resources getResources()>"
"<java.time.temporal.ChronoField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>","<java.time.temporal.ChronoField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
"<android.hardware.Sensor: int getMinDelay()>","<android.hardware.Sensor: int getMinDelay()>"
"<android.content.pm.PackageManager$Property: float getFloat()>","<android.content.pm.PackageManager$Property: float getFloat()>"
"<java.time.zone.ZoneRules: java.lang.String toString()>","<java.time.zone.ZoneRules: java.lang.String toString()>"
"<java.time.Period: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.Period: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<android.os.Parcel: void <clinit>()>","<android.os.Parcel: void <clinit>()>"
"<java.util.Collections: java.util.Set singleton(java.lang.Object)>","<java.util.Collections: java.util.Set singleton(java.lang.Object)>"
"<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.icu.util.ULocale$Category: void <clinit>()>","<android.icu.util.ULocale$Category: void <clinit>()>"
"<java.time.Duration: java.time.Duration plusSeconds(long)>","<java.time.Duration: java.time.Duration plusSeconds(long)>"
"<java.lang.Iterable: java.util.Iterator iterator()>","<java.lang.Iterable: java.util.Iterator iterator()>"
"<android.view.View: float getPivotY()>","<android.view.View: float getPivotY()>"
"<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>","<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>"
"<android.view.inputmethod.InputMethodSubtype: int describeContents()>","<android.view.inputmethod.InputMethodSubtype: int describeContents()>"
"<android.graphics.Matrix: void setSinCos(float,float,float,float)>","<android.graphics.Matrix: void setSinCos(float,float,float,float)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)>","<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int,int)>"
"<android.view.WindowManager$LayoutParams: void setFitInsetsIgnoringVisibility(boolean)>","<android.view.WindowManager$LayoutParams: void setFitInsetsIgnoringVisibility(boolean)>"
"<java.lang.String: int indexOf(java.lang.String)>","<java.lang.String: int indexOf(java.lang.String)>"
"<android.view.View: boolean dispatchNestedPreFling(float,float)>","<android.view.View: boolean dispatchNestedPreFling(float,float)>"
"<java.util.function.ObjLongConsumer: void accept(java.lang.Object,long)>","<java.util.function.ObjLongConsumer: void accept(java.lang.Object,long)>"
"<android.os.Bundle: void putByteArray(java.lang.String,byte[])>","<android.os.Bundle: void putByteArray(java.lang.String,byte[])>"
"<java.time.Duration: java.time.Duration withNanos(int)>","<java.time.Duration: java.time.Duration withNanos(int)>"
"<android.app.Fragment: boolean isHidden()>","<android.app.Fragment: boolean isHidden()>"
"<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model[] values()>","<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model[] values()>"
"<android.view.View: int getWindowVisibility()>","<android.view.View: int getWindowVisibility()>"
"<android.graphics.Bitmap: void setHasMipMap(boolean)>","<android.graphics.Bitmap: void setHasMipMap(boolean)>"
"<io.flutter.plugins.webviewflutter.t0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.t0: void a(java.lang.Object,y.a$e)>"
"<java.util.AbstractMap: void <init>()>","<java.util.AbstractMap: void <init>()>"
"<android.webkit.SafeBrowsingResponse: void proceed(boolean)>","<android.webkit.SafeBrowsingResponse: void proceed(boolean)>"
"<android.view.translation.TranslationResponseValue: boolean equals(java.lang.Object)>","<android.view.translation.TranslationResponseValue: boolean equals(java.lang.Object)>"
"<android.webkit.JsResult: void confirm()>","<android.webkit.JsResult: void confirm()>"
"<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>","<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>"
"<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>","<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>"
"<java.security.PrivilegedActionException: java.lang.String toString()>","<java.security.PrivilegedActionException: java.lang.String toString()>"
"<android.app.Activity: void setExitSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Activity: void setExitSharedElementCallback(android.app.SharedElementCallback)>"
"<android.content.Loader: void reset()>","<android.content.Loader: void reset()>"
"<java.util.Queue: java.lang.Object remove()>","<java.util.Queue: java.lang.Object remove()>"
"<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>","<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>"
"<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>","<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>"
"<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>","<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>"
"<android.widget.AbsListView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.widget.AbsListView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<java.util.Calendar: void complete()>","<java.util.Calendar: void complete()>"
"<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()>","<android.app.Notification$Action: android.app.RemoteInput[] getRemoteInputs()>"
"<android.app.Dialog: void setDismissMessage(android.os.Message)>","<android.app.Dialog: void setDismissMessage(android.os.Message)>"
"<android.content.ContextParams$Builder: void <init>(android.content.ContextParams)>","<android.content.ContextParams$Builder: void <init>(android.content.ContextParams)>"
"<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>","<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>"
"<java.lang.Double: long longValue()>","<java.lang.Double: long longValue()>"
"<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>","<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>"
"<java.lang.String: void <init>(java.lang.StringBuilder)>","<java.lang.String: void <init>(java.lang.StringBuilder)>"
"<java.lang.String: java.lang.String toString()>","<java.lang.String: java.lang.String toString()>"
"<android.content.Context: void clearWallpaper()>","<android.content.Context: void clearWallpaper()>"
"<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>","<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>"
"<java.lang.Character: int compareTo(java.lang.Object)>","<java.lang.Character: int compareTo(java.lang.Object)>"
"<java.util.ArrayDeque: java.lang.Object getFirst()>","<java.util.ArrayDeque: java.lang.Object getFirst()>"
"<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>","<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>"
"<java.util.Set: boolean add(java.lang.Object)>","<java.util.Set: boolean add(java.lang.Object)>"
"<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>","<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>"
"<android.widget.RemoteViews: void setColorInt(int,java.lang.String,int,int)>","<android.widget.RemoteViews: void setColorInt(int,java.lang.String,int,int)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>"
"<java.time.DayOfWeek: long getLong(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: long getLong(java.time.temporal.TemporalField)>"
"<android.graphics.Rect: boolean contains(int,int)>","<android.graphics.Rect: boolean contains(int,int)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setCloseAction(android.app.RemoteAction)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setCloseAction(android.app.RemoteAction)>"
"<android.graphics.Paint: void setDither(boolean)>","<android.graphics.Paint: void setDither(boolean)>"
"<java.util.Arrays: int compareUnsigned(int[],int,int,int[],int,int)>","<java.util.Arrays: int compareUnsigned(int[],int,int,int[],int,int)>"
"<org.json.JSONTokener: java.lang.Object nextValue()>","<org.json.JSONTokener: java.lang.Object nextValue()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.String toString()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.String toString()>"
"<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>","<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>","<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>"
"<java.util.Arrays: void fill(char[],int,int,char)>","<java.util.Arrays: void fill(char[],int,int,char)>"
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>","<java.lang.String: void <init>(byte[],int,int,java.lang.String)>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.view.View: boolean hasFocusable()>","<android.view.View: boolean hasFocusable()>"
"<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>","<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>"
"<android.content.pm.PackageManager$Property: java.lang.String getPackageName()>","<android.content.pm.PackageManager$Property: java.lang.String getPackageName()>"
"<java.util.Arrays: int compare(short[],int,int,short[],int,int)>","<java.util.Arrays: int compare(short[],int,int,short[],int,int)>"
"<android.app.PendingIntent: int describeContents()>","<android.app.PendingIntent: int describeContents()>"
"<android.text.InputFilter$AllCaps: void <init>()>","<android.text.InputFilter$AllCaps: void <init>()>"
"<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>","<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>"
"<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>","<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>"
"<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>","<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>"
"<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>","<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>"
"<android.graphics.Typeface: int getWeight()>","<android.graphics.Typeface: int getWeight()>"
"<java.net.Socket: void bind(java.net.SocketAddress)>","<java.net.Socket: void bind(java.net.SocketAddress)>"
"<android.content.ContextWrapper: boolean isRestricted()>","<android.content.ContextWrapper: boolean isRestricted()>"
"<java.lang.reflect.Array: char getChar(java.lang.Object,int)>","<java.lang.reflect.Array: char getChar(java.lang.Object,int)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>"
"<android.os.Bundle: char getChar(java.lang.String,char)>","<android.os.Bundle: char getChar(java.lang.String,char)>"
"<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>","<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>"
"<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateDefaultLayoutParams()>","<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateDefaultLayoutParams()>"
"<android.app.PendingIntent: boolean isForegroundService()>","<android.app.PendingIntent: boolean isForegroundService()>"
"<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>","<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>"
"<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>","<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>"
"<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>","<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>"
"<android.widget.ImageView: void setImageResource(int)>","<android.widget.ImageView: void setImageResource(int)>"
"<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>","<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>"
"<android.graphics.RenderNode: int getWidth()>","<android.graphics.RenderNode: int getWidth()>"
"<java.util.HashSet: void <init>(java.util.Collection)>","<java.util.HashSet: void <init>(java.util.Collection)>"
"<android.content.ContentValues: java.lang.Object get(java.lang.String)>","<android.content.ContentValues: java.lang.Object get(java.lang.String)>"
"<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>","<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>"
"<android.graphics.Bitmap: boolean isRecycled()>","<android.graphics.Bitmap: boolean isRecycled()>"
"<android.widget.TextView: void append(java.lang.CharSequence)>","<android.widget.TextView: void append(java.lang.CharSequence)>"
"<android.view.animation.Animation: void setFillAfter(boolean)>","<android.view.animation.Animation: void setFillAfter(boolean)>"
"<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<java.util.Arrays: boolean equals(double[],double[])>","<java.util.Arrays: boolean equals(double[],double[])>"
"<java.util.stream.IntStream: java.util.OptionalInt findAny()>","<java.util.stream.IntStream: java.util.OptionalInt findAny()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>"
"<android.graphics.text.MeasuredText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>","<android.graphics.text.MeasuredText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>"
"<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream$Builder add(double)>","<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream$Builder add(double)>"
"<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>","<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>"
"<android.app.Notification$WearableExtender: void <init>(android.app.Notification)>","<android.app.Notification$WearableExtender: void <init>(android.app.Notification)>"
"<android.view.Window: void setLocalFocus(boolean,boolean)>","<android.view.Window: void setLocalFocus(boolean,boolean)>"
"<java.lang.Integer: java.lang.String toUnsignedString(int,int)>","<java.lang.Integer: java.lang.String toUnsignedString(int,int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<android.view.ViewGroup: void dispatchSetActivated(boolean)>","<android.view.ViewGroup: void dispatchSetActivated(boolean)>"
"<java.util.LinkedHashMap: void <init>(int,float,boolean)>","<java.util.LinkedHashMap: void <init>(int,float,boolean)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordStartIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordStartIndex(int)>"
"<android.graphics.Paint: void setAntiAlias(boolean)>","<android.graphics.Paint: void setAntiAlias(boolean)>"
"<java.lang.Integer: int parseInt(java.lang.String,int)>","<java.lang.Integer: int parseInt(java.lang.String,int)>"
"<android.webkit.WebView: int computeVerticalScrollExtent()>","<android.webkit.WebView: int computeVerticalScrollExtent()>"
"<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>","<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>"
"<android.view.MenuItem: void setShowAsAction(int)>","<android.view.MenuItem: void setShowAsAction(int)>"
"<android.widget.RemoteViews: void removeAllViews(int)>","<android.widget.RemoteViews: void removeAllViews(int)>"
"<android.widget.ListPopupWindow: long getSelectedItemId()>","<android.widget.ListPopupWindow: long getSelectedItemId()>"
"<android.media.session.PlaybackState: void <init>()>","<android.media.session.PlaybackState: void <init>()>"
"<java.io.ByteArrayOutputStream: java.lang.String toString()>","<java.io.ByteArrayOutputStream: java.lang.String toString()>"
"<android.os.Parcel: void writeTypedSparseArray(android.util.SparseArray,int)>","<android.os.Parcel: void writeTypedSparseArray(android.util.SparseArray,int)>"
"<android.view.View: void forceHasOverlappingRendering(boolean)>","<android.view.View: void forceHasOverlappingRendering(boolean)>"
"<android.widget.ImageView: void clearColorFilter()>","<android.widget.ImageView: void clearColorFilter()>"
"<java.io.FileOutputStream: void <init>(java.lang.String)>","<java.io.FileOutputStream: void <init>(java.lang.String)>"
"<android.content.ContentProviderClient: void close()>","<android.content.ContentProviderClient: void close()>"
"<android.widget.TextView: void setMaxWidth(int)>","<android.widget.TextView: void setMaxWidth(int)>"
"<java.util.concurrent.locks.LockSupport: void <init>()>","<java.util.concurrent.locks.LockSupport: void <init>()>"
"<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator andThen(java.util.function.IntUnaryOperator)>","<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator andThen(java.util.function.IntUnaryOperator)>"
"<java.util.Random: int next(int)>","<java.util.Random: int next(int)>"
"<java.time.LocalTime: java.time.LocalTime plusMinutes(long)>","<java.time.LocalTime: java.time.LocalTime plusMinutes(long)>"
"<android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>","<android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>"
"<java.io.File: long getFreeSpace()>","<java.io.File: long getFreeSpace()>"
"<java.nio.CharBuffer: java.nio.Buffer rewind()>","<java.nio.CharBuffer: java.nio.Buffer rewind()>"
"<android.view.View: void dispatchDrawableHotspotChanged(float,float)>","<android.view.View: void dispatchDrawableHotspotChanged(float,float)>"
"<android.view.ViewConfiguration: int getScaledMinimumScalingSpan()>","<android.view.ViewConfiguration: int getScaledMinimumScalingSpan()>"
"<java.text.Format: java.lang.Object clone()>","<java.text.Format: java.lang.Object clone()>"
"<android.view.View: void setRenderEffect(android.graphics.RenderEffect)>","<android.view.View: void setRenderEffect(android.graphics.RenderEffect)>"
"<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>","<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>"
"<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float)>","<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float)>"
"<android.view.Window: void setStatusBarColor(int)>","<android.view.Window: void setStatusBarColor(int)>"
"<android.util.Log: int wtf(java.lang.String,java.lang.String)>","<android.util.Log: int wtf(java.lang.String,java.lang.String)>"
"<java.nio.channels.Channel: void close()>","<java.nio.channels.Channel: void close()>"
"<android.media.Rating: android.media.Rating newStarRating(int,float)>","<android.media.Rating: android.media.Rating newStarRating(int,float)>"
"<java.lang.ref.Reference: java.lang.Object get()>","<java.lang.ref.Reference: java.lang.Object get()>"
"<io.flutter.plugins.webviewflutter.l3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.l3: void a(java.lang.Object)>"
"<java.lang.Character: char toUpperCase(char)>","<java.lang.Character: char toUpperCase(char)>"
"<android.os.PatternMatcher: java.lang.String getPath()>","<android.os.PatternMatcher: java.lang.String getPath()>"
"<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>","<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>"
"<android.view.textclassifier.ConversationActions: java.lang.String getId()>","<android.view.textclassifier.ConversationActions: java.lang.String getId()>"
"<android.widget.ListPopupWindow: void show()>","<android.widget.ListPopupWindow: void show()>"
"<java.time.Period: boolean isZero()>","<java.time.Period: boolean isZero()>"
"<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>","<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>"
"<android.view.View: float getRotationY()>","<android.view.View: float getRotationY()>"
"<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>","<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>"
"<android.view.animation.Animation: void cancel()>","<android.view.animation.Animation: void cancel()>"
"<java.util.IntSummaryStatistics: double getAverage()>","<java.util.IntSummaryStatistics: double getAverage()>"
"<android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>","<android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>"
"<android.view.MotionEvent: float getTouchMinor(int)>","<android.view.MotionEvent: float getTouchMinor(int)>"
"<java.util.concurrent.TimeUnit: long toSeconds(long)>","<java.util.concurrent.TimeUnit: long toSeconds(long)>"
"<java.time.chrono.ChronoPeriod: boolean isZero()>","<java.time.chrono.ChronoPeriod: boolean isZero()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.webkit.WebSettings: java.lang.String getDatabasePath()>","<android.webkit.WebSettings: java.lang.String getDatabasePath()>"
"<java.security.CodeSigner: java.lang.String toString()>","<java.security.CodeSigner: java.lang.String toString()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])>"
"<android.util.LongSparseArray: void put(long,java.lang.Object)>","<android.util.LongSparseArray: void put(long,java.lang.Object)>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>"
"<android.graphics.RenderNode: int getSpotShadowColor()>","<android.graphics.RenderNode: int getSpotShadowColor()>"
"<android.widget.AbsListView: int pointToPosition(int,int)>","<android.widget.AbsListView: int pointToPosition(int,int)>"
"<android.view.ViewDebug: void <init>()>","<android.view.ViewDebug: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)>","<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)>"
"<android.view.View: int[] onCreateDrawableState(int)>","<android.view.View: int[] onCreateDrawableState(int)>"
"<android.graphics.fonts.FontVariationAxis: java.lang.String toString()>","<android.graphics.fonts.FontVariationAxis: java.lang.String toString()>"
"<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>","<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>"
"<java.security.cert.CertificateEncodingException: void <init>()>","<java.security.cert.CertificateEncodingException: void <init>()>"
"<android.app.FragmentTransaction: void commitNowAllowingStateLoss()>","<android.app.FragmentTransaction: void commitNowAllowingStateLoss()>"
"<android.webkit.WebSettings: boolean getDomStorageEnabled()>","<android.webkit.WebSettings: boolean getDomStorageEnabled()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>"
"<java.net.Socket: boolean isBound()>","<java.net.Socket: boolean isBound()>"
"<java.io.StreamCorruptedException: void <init>(java.lang.String)>","<java.io.StreamCorruptedException: void <init>(java.lang.String)>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setAttributionTag(java.lang.String)>","<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setAttributionTag(java.lang.String)>"
"<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>","<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>"
"<java.util.Spliterator: java.util.Comparator getComparator()>","<java.util.Spliterator: java.util.Comparator getComparator()>"
"<java.util.function.Function: java.util.function.Function compose(java.util.function.Function)>","<java.util.function.Function: java.util.function.Function compose(java.util.function.Function)>"
"<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.Consumer)>","<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.Consumer)>"
"<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>","<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>"
"<android.app.Service: android.app.Application getApplication()>","<android.app.Service: android.app.Application getApplication()>"
"<android.widget.AbsListView: void deferNotifyDataSetChanged()>","<android.widget.AbsListView: void deferNotifyDataSetChanged()>"
"<java.io.PrintStream: void <init>(java.io.OutputStream)>","<java.io.PrintStream: void <init>(java.io.OutputStream)>"
"<android.view.WindowManager$LayoutParams: java.lang.String toString()>","<android.view.WindowManager$LayoutParams: java.lang.String toString()>"
"<android.view.View: void setAnimation(android.view.animation.Animation)>","<android.view.View: void setAnimation(android.view.animation.Animation)>"
"<java.lang.StringBuilder: int capacity()>","<java.lang.StringBuilder: int capacity()>"
"<java.lang.Math: float signum(float)>","<java.lang.Math: float signum(float)>"
"<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>","<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>"
"<android.media.Session2Token: void writeToParcel(android.os.Parcel,int)>","<android.media.Session2Token: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Math: long addExact(long,long)>","<java.lang.Math: long addExact(long,long)>"
"<android.content.pm.ModuleInfo: java.lang.String toString()>","<android.content.pm.ModuleInfo: java.lang.String toString()>"
"<android.webkit.WebView: int findAll(java.lang.String)>","<android.webkit.WebView: int findAll(java.lang.String)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>","<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>"
"<android.view.ViewGroup: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>","<android.view.ViewGroup: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>"
"<java.util.LinkedHashMap: java.util.Collection values()>","<java.util.LinkedHashMap: java.util.Collection values()>"
"<java.util.Collection: java.util.stream.Stream parallelStream()>","<java.util.Collection: java.util.stream.Stream parallelStream()>"
"<java.time.OffsetTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>"
"<java.time.Period: java.time.Period between(java.time.LocalDate,java.time.LocalDate)>","<java.time.Period: java.time.Period between(java.time.LocalDate,java.time.LocalDate)>"
"<java.net.Socket: boolean isClosed()>","<java.net.Socket: boolean isClosed()>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>","<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>"
"<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>","<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>"
"<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>","<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>"
"<java.nio.channels.SelectionKey: int readyOps()>","<java.nio.channels.SelectionKey: int readyOps()>"
"<android.text.SpannableString: int hashCode()>","<android.text.SpannableString: int hashCode()>"
"<java.util.zip.ZipFile: void <init>(java.io.File,java.nio.charset.Charset)>","<java.util.zip.ZipFile: void <init>(java.io.File,java.nio.charset.Charset)>"
"<android.webkit.WebSettings: int getForceDark()>","<android.webkit.WebSettings: int getForceDark()>"
"<java.util.Deque: java.lang.Object peekFirst()>","<java.util.Deque: java.lang.Object peekFirst()>"
"<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection,int)>","<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection,int)>"
"<java.lang.Math: int toIntExact(long)>","<java.lang.Math: int toIntExact(long)>"
"<android.animation.ValueAnimator: long getStartDelay()>","<android.animation.ValueAnimator: long getStartDelay()>"
"<android.graphics.RecordingCanvas: void drawRGB(int,int,int)>","<android.graphics.RecordingCanvas: void drawRGB(int,int,int)>"
"<android.view.MotionEvent: float getXPrecision()>","<android.view.MotionEvent: float getXPrecision()>"
"<java.io.BufferedReader: java.util.stream.Stream lines()>","<java.io.BufferedReader: java.util.stream.Stream lines()>"
"<java.lang.Class: java.lang.Class[] getDeclaredClasses()>","<java.lang.Class: java.lang.Class[] getDeclaredClasses()>"
"<java.time.LocalDate: int getMonthValue()>","<java.time.LocalDate: int getMonthValue()>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayCountry(android.icu.util.ULocale)>"
"<android.view.View: void dispatchFinishTemporaryDetach()>","<android.view.View: void dispatchFinishTemporaryDetach()>"
"<android.text.DynamicLayout: int getEllipsisCount(int)>","<android.text.DynamicLayout: int getEllipsisCount(int)>"
"<java.util.OptionalLong: long orElseThrow(java.util.function.Supplier)>","<java.util.OptionalLong: long orElseThrow(java.util.function.Supplier)>"
"<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>","<android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>"
"<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>","<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>"
"<android.app.assist.AssistContent: void setStructuredData(java.lang.String)>","<android.app.assist.AssistContent: void setStructuredData(java.lang.String)>"
"<java.security.PrivilegedAction: java.lang.Object run()>","<java.security.PrivilegedAction: java.lang.Object run()>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setText(java.lang.CharSequence)>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setText(java.lang.CharSequence)>"
"<android.text.Spanned: int getSpanStart(java.lang.Object)>","<android.text.Spanned: int getSpanStart(java.lang.Object)>"
"<android.webkit.WebView: boolean performLongClick()>","<android.webkit.WebView: boolean performLongClick()>"
"<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>","<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>"
"<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>","<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>"
"<java.util.ArrayDeque: boolean add(java.lang.Object)>","<java.util.ArrayDeque: boolean add(java.lang.Object)>"
"<android.media.VolumeProvider: void onSetVolumeTo(int)>","<android.media.VolumeProvider: void onSetVolumeTo(int)>"
"<android.widget.TextView: void setTextSelectHandleLeft(int)>","<android.widget.TextView: void setTextSelectHandleLeft(int)>"
"<android.graphics.ColorSpace$Rgb: float[] getTransform()>","<android.graphics.ColorSpace$Rgb: float[] getTransform()>"
"<android.animation.Animator: void setupEndValues()>","<android.animation.Animator: void setupEndValues()>"
"<android.animation.ValueAnimator: void pause()>","<android.animation.ValueAnimator: void pause()>"
"<android.graphics.Canvas$EdgeType: void <clinit>()>","<android.graphics.Canvas$EdgeType: void <clinit>()>"
"<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>","<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>"
"<android.content.ContextWrapper: boolean stopService(android.content.Intent)>","<android.content.ContextWrapper: boolean stopService(android.content.Intent)>"
"<android.content.ContentValues: int hashCode()>","<android.content.ContentValues: int hashCode()>"
"<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)>","<android.webkit.WebView: void setLayerType(int,android.graphics.Paint)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.String toString()>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.Toolbar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.Presentation: void show()>","<android.app.Presentation: void show()>"
"<android.webkit.WebMessage: void <init>(java.lang.String)>","<android.webkit.WebMessage: void <init>(java.lang.String)>"
"<android.content.pm.PackageManager$Property: java.lang.String getName()>","<android.content.pm.PackageManager$Property: java.lang.String getName()>"
"<android.database.Cursor: boolean isNull(int)>","<android.database.Cursor: boolean isNull(int)>"
"<java.util.Arrays: int mismatch(double[],double[])>","<java.util.Arrays: int mismatch(double[],double[])>"
"<java.util.concurrent.TimeUnit: java.time.temporal.ChronoUnit toChronoUnit()>","<java.util.concurrent.TimeUnit: java.time.temporal.ChronoUnit toChronoUnit()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setFractionalPart(java.lang.String)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setFractionalPart(java.lang.String)>"
"<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>","<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>"
"<android.os.Message: int describeContents()>","<android.os.Message: int describeContents()>"
"<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>","<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>"
"<java.io.ByteArrayInputStream: void close()>","<java.io.ByteArrayInputStream: void close()>"
"<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>","<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>","<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>"
"<org.json.JSONArray: org.json.JSONArray put(double)>","<org.json.JSONArray: org.json.JSONArray put(double)>"
"<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>","<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>"
"<android.app.VoiceInteractor$Request: void onDetached()>","<android.app.VoiceInteractor$Request: void onDetached()>"
"<android.widget.AbsListView: int getBottomPaddingOffset()>","<android.widget.AbsListView: int getBottomPaddingOffset()>"
"<android.graphics.RenderNode: boolean hasShadow()>","<android.graphics.RenderNode: boolean hasShadow()>"
"<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence)>","<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence)>"
"<java.math.BigInteger: java.math.BigInteger[] sqrtAndRemainder()>","<java.math.BigInteger: java.math.BigInteger[] sqrtAndRemainder()>"
"<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>","<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>"
"<android.os.Parcel: void setPropagateAllowBlocking()>","<android.os.Parcel: void setPropagateAllowBlocking()>"
"<android.text.style.TtsSpan$TimeBuilder: android.text.style.TtsSpan$TimeBuilder setMinutes(int)>","<android.text.style.TtsSpan$TimeBuilder: android.text.style.TtsSpan$TimeBuilder setMinutes(int)>"
"<android.util.LongSparseArray: java.lang.Object get(long)>","<android.util.LongSparseArray: java.lang.Object get(long)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(char)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>"
"<android.graphics.RectF: java.lang.String toShortString()>","<android.graphics.RectF: java.lang.String toShortString()>"
"<android.app.Fragment$SavedState: int describeContents()>","<android.app.Fragment$SavedState: int describeContents()>"
"<io.flutter.plugins.webviewflutter.o1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.o1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.view.Window: android.transition.TransitionManager getTransitionManager()>","<android.view.Window: android.transition.TransitionManager getTransitionManager()>"
"<android.graphics.Rect: void set(android.graphics.Rect)>","<android.graphics.Rect: void set(android.graphics.Rect)>"
"<android.media.Image: int getWidth()>","<android.media.Image: int getWidth()>"
"<android.graphics.RecordingCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>"
"<java.io.ObjectInputStream: byte readByte()>","<java.io.ObjectInputStream: byte readByte()>"
"<java.nio.channels.Pipe: java.nio.channels.Pipe$SinkChannel sink()>","<java.nio.channels.Pipe: java.nio.channels.Pipe$SinkChannel sink()>"
"<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.View: long getUniqueDrawingId()>","<android.view.View: long getUniqueDrawingId()>"
"<android.accounts.Account: void <init>(android.os.Parcel)>","<android.accounts.Account: void <init>(android.os.Parcel)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>"
"<java.lang.Thread: void <init>(java.lang.String)>","<java.lang.Thread: void <init>(java.lang.String)>"
"<java.time.ZoneOffset: java.time.ZoneOffset 'from'(java.time.temporal.TemporalAccessor)>","<java.time.ZoneOffset: java.time.ZoneOffset 'from'(java.time.temporal.TemporalAccessor)>"
"<android.webkit.SslErrorHandler: void <init>()>","<android.webkit.SslErrorHandler: void <init>()>"
"<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>","<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>"
"<android.view.InputDevice$MotionRange: float getMin()>","<android.view.InputDevice$MotionRange: float getMin()>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>"
"<java.lang.Thread: void <init>(java.lang.Runnable)>","<java.lang.Thread: void <init>(java.lang.Runnable)>"
"<java.lang.Character: boolean isISOControl(char)>","<java.lang.Character: boolean isISOControl(char)>"
"<android.icu.util.ULocale: java.util.Iterator getKeywords(java.lang.String)>","<android.icu.util.ULocale: java.util.Iterator getKeywords(java.lang.String)>"
"<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)>","<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)>"
"<android.media.session.MediaController: int getRatingType()>","<android.media.session.MediaController: int getRatingType()>"
"<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>","<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActionBar: android.app.ActionBar$Tab getSelectedTab()>","<android.app.ActionBar: android.app.ActionBar$Tab getSelectedTab()>"
"<java.util.Collections: void sort(java.util.List,java.util.Comparator)>","<java.util.Collections: void sort(java.util.List,java.util.Comparator)>"
"<java.time.DayOfWeek: java.time.DayOfWeek plus(long)>","<java.time.DayOfWeek: java.time.DayOfWeek plus(long)>"
"<android.content.ComponentName: android.content.ComponentName createRelative(java.lang.String,java.lang.String)>","<android.content.ComponentName: android.content.ComponentName createRelative(java.lang.String,java.lang.String)>"
"<android.service.autofill.UserData: int getMaxValueLength()>","<android.service.autofill.UserData: int getMaxValueLength()>"
"<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.widget.TextView: int computeVerticalScrollRange()>","<android.widget.TextView: int computeVerticalScrollRange()>"
"<android.os.Handler: void removeMessages(int)>","<android.os.Handler: void removeMessages(int)>"
"<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>","<java.util.TimeZone: java.lang.String getDisplayName(boolean,int)>"
"<android.webkit.SafeBrowsingResponse: void backToSafety(boolean)>","<android.webkit.SafeBrowsingResponse: void backToSafety(boolean)>"
"<android.content.DialogInterface: void cancel()>","<android.content.DialogInterface: void cancel()>"
"<android.view.View: void offsetLeftAndRight(int)>","<android.view.View: void offsetLeftAndRight(int)>"
"<java.lang.Class: java.lang.Package getPackage()>","<java.lang.Class: java.lang.Package getPackage()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setCustomContentView(android.widget.RemoteViews)>","<android.app.Notification$Builder: android.app.Notification$Builder setCustomContentView(android.widget.RemoteViews)>"
"<android.view.WindowId: int describeContents()>","<android.view.WindowId: int describeContents()>"
"<android.os.Debug$InstructionCount: boolean resetAndStart()>","<android.os.Debug$InstructionCount: boolean resetAndStart()>"
"<android.view.View: int getPaddingEnd()>","<android.view.View: int getPaddingEnd()>"
"<android.os.Handler: boolean post(java.lang.Runnable)>","<android.os.Handler: boolean post(java.lang.Runnable)>"
"<java.util.LinkedList: java.lang.Object peekFirst()>","<java.util.LinkedList: java.lang.Object peekFirst()>"
"<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<java.util.Collections: java.util.SortedSet emptySortedSet()>","<java.util.Collections: java.util.SortedSet emptySortedSet()>"
"<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>","<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>"
"<android.view.TextureView: android.graphics.Canvas lockCanvas(android.graphics.Rect)>","<android.view.TextureView: android.graphics.Canvas lockCanvas(android.graphics.Rect)>"
"<android.widget.PopupWindow: boolean isTouchModal()>","<android.widget.PopupWindow: boolean isTouchModal()>"
"<android.graphics.Color: android.graphics.Color valueOf(float,float,float)>","<android.graphics.Color: android.graphics.Color valueOf(float,float,float)>"
"<android.view.autofill.AutofillValue: boolean isText()>","<android.view.autofill.AutofillValue: boolean isText()>"
"<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setFlags(int,int)>","<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setFlags(int,int)>"
"<java.time.chrono.ChronoLocalDate: java.lang.String toString()>","<java.time.chrono.ChronoLocalDate: java.lang.String toString()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndAccumulate(int,java.lang.Object,java.util.function.BinaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndAccumulate(int,java.lang.Object,java.util.function.BinaryOperator)>"
"<java.nio.channels.SelectionKey: boolean isReadable()>","<java.nio.channels.SelectionKey: boolean isReadable()>"
"<java.lang.Package: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int,int)>"
"<java.lang.Boolean: boolean logicalOr(boolean,boolean)>","<java.lang.Boolean: boolean logicalOr(boolean,boolean)>"
"<java.util.stream.LongStream: long[] toArray()>","<java.util.stream.LongStream: long[] toArray()>"
"<android.util.SparseBooleanArray: int size()>","<android.util.SparseBooleanArray: int size()>"
"<android.widget.ListPopupWindow: android.view.View$OnTouchListener createDragToOpenListener(android.view.View)>","<android.widget.ListPopupWindow: android.view.View$OnTouchListener createDragToOpenListener(android.view.View)>"
"<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>","<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>"
"<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)>","<android.graphics.ImageDecoder: void setDecodeAsAlphaMaskEnabled(boolean)>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>"
"<android.graphics.RectF: void setEmpty()>","<android.graphics.RectF: void setEmpty()>"
"<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>","<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>"
"<android.content.Context: void sendBroadcast(android.content.Intent)>","<android.content.Context: void sendBroadcast(android.content.Intent)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream sorted()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream sorted()>"
"<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>","<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>"
"<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>","<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>"
"<java.util.stream.IntStream: java.util.IntSummaryStatistics summaryStatistics()>","<java.util.stream.IntStream: java.util.IntSummaryStatistics summaryStatistics()>"
"<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)>","<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)>"
"<java.util.Map: boolean containsKey(java.lang.Object)>","<java.util.Map: boolean containsKey(java.lang.Object)>"
"<java.util.Arrays: int hashCode(char[])>","<java.util.Arrays: int hashCode(char[])>"
"<io.flutter.plugins.webviewflutter.l3: void <init>()>","<io.flutter.plugins.webviewflutter.l3: void <init>()>"
"<android.animation.Animator: java.lang.Object clone()>","<android.animation.Animator: java.lang.Object clone()>"
"<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>","<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>"
"<java.util.Arrays: byte[] copyOf(byte[],int)>","<java.util.Arrays: byte[] copyOf(byte[],int)>"
"<java.time.chrono.ChronoLocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.chrono.ChronoLocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.util.Optional: java.util.Optional flatMap(java.util.function.Function)>","<java.util.Optional: java.util.Optional flatMap(java.util.function.Function)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime of(int,int,int,int,int,int,int,java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime of(int,int,int,int,int,int,int,java.time.ZoneOffset)>"
"<java.util.zip.ZipEntry: void setComment(java.lang.String)>","<java.util.zip.ZipEntry: void setComment(java.lang.String)>"
"<android.content.ContextWrapper: android.content.Context createContext(android.content.ContextParams)>","<android.content.ContextWrapper: android.content.Context createContext(android.content.ContextParams)>"
"<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>","<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>"
"<android.graphics.Rect: void <init>(int,int,int,int)>","<android.graphics.Rect: void <init>(int,int,int,int)>"
"<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>","<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoPeriod: java.time.chrono.Chronology getChronology()>"
"<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>","<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>"
"<android.view.RoundedCorner: void <init>(int,int,int,int)>","<android.view.RoundedCorner: void <init>(int,int,int,int)>"
"<android.view.RoundedCorner: int hashCode()>","<android.view.RoundedCorner: int hashCode()>"
"<android.content.LocusId: int describeContents()>","<android.content.LocusId: int describeContents()>"
"<java.util.Optional: java.util.Optional map(java.util.function.Function)>","<java.util.Optional: java.util.Optional map(java.util.function.Function)>"
"<io.flutter.plugins.webviewflutter.t2: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.t2: void a(java.lang.Object)>"
"<java.lang.Math: double asin(double)>","<java.lang.Math: double asin(double)>"
"<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>","<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)>"
"<java.lang.Class: java.lang.String toGenericString()>","<java.lang.Class: java.lang.String toGenericString()>"
"<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()>","<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextCursorDrawable()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextCursorDrawable()>"
"<android.view.MenuItem: java.lang.CharSequence getTitle()>","<android.view.MenuItem: java.lang.CharSequence getTitle()>"
"<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,java.lang.String)>","<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,java.lang.String)>"
"<android.text.style.TtsSpan$VerbatimBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$VerbatimBuilder: void <init>(java.lang.String)>"
"<java.text.AttributedCharacterIterator$Attribute: void <init>(java.lang.String)>","<java.text.AttributedCharacterIterator$Attribute: void <init>(java.lang.String)>"
"<android.content.Context: java.lang.String getPackageCodePath()>","<android.content.Context: java.lang.String getPackageCodePath()>"
"<java.util.SortedMap: java.util.Comparator comparator()>","<java.util.SortedMap: java.util.Comparator comparator()>"
"<android.graphics.RecordingCanvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>"
"<android.graphics.Region: boolean isRect()>","<android.graphics.Region: boolean isRect()>"
"<android.graphics.drawable.Drawable: void setDither(boolean)>","<android.graphics.drawable.Drawable: void setDither(boolean)>"
"<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long)>","<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long)>"
"<java.util.Properties: java.util.Enumeration propertyNames()>","<java.util.Properties: java.util.Enumeration propertyNames()>"
"<android.webkit.WebViewClient: boolean onRenderProcessGone(android.webkit.WebView,android.webkit.RenderProcessGoneDetail)>","<android.webkit.WebViewClient: boolean onRenderProcessGone(android.webkit.WebView,android.webkit.RenderProcessGoneDetail)>"
"<java.time.LocalDateTime: int getDayOfMonth()>","<java.time.LocalDateTime: int getDayOfMonth()>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>"
"<android.graphics.Path: void offset(float,float)>","<android.graphics.Path: void offset(float,float)>"
"<java.nio.IntBuffer: void <init>()>","<java.nio.IntBuffer: void <init>()>"
"<android.view.View: int getBaseline()>","<android.view.View: int getBaseline()>"
"<android.content.pm.PackageInstaller$Session: void close()>","<android.content.pm.PackageInstaller$Session: void close()>"
"<android.widget.PopupWindow: boolean isAttachedInDecor()>","<android.widget.PopupWindow: boolean isAttachedInDecor()>"
"<android.view.ViewConfiguration: int getScaledOverscrollDistance()>","<android.view.ViewConfiguration: int getScaledOverscrollDistance()>"
"<android.webkit.WebView: void onVisibilityChanged(android.view.View,int)>","<android.webkit.WebView: void onVisibilityChanged(android.view.View,int)>"
"<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>"
"<android.view.InputEvent: int describeContents()>","<android.view.InputEvent: int describeContents()>"
"<android.app.Service: void startForeground(int,android.app.Notification,int)>","<android.app.Service: void startForeground(int,android.app.Notification,int)>"
"<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>","<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],double)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],double)>"
"<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>","<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>"
"<android.os.Debug: void resetThreadExternalAllocSize()>","<android.os.Debug: void resetThreadExternalAllocSize()>"
"<android.content.ClipDescription: int getMimeTypeCount()>","<android.content.ClipDescription: int getMimeTypeCount()>"
"<android.widget.TextView: void setMaxEms(int)>","<android.widget.TextView: void setMaxEms(int)>"
"<java.util.IntSummaryStatistics: long getCount()>","<java.util.IntSummaryStatistics: long getCount()>"
"<java.io.ObjectInputStream$GetField: void <init>()>","<java.io.ObjectInputStream$GetField: void <init>()>"
"<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSet(long,long)>","<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSet(long,long)>"
"<java.lang.ArithmeticException: void <init>()>","<java.lang.ArithmeticException: void <init>()>"
"<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>","<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)>"
"<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger max(java.math.BigInteger)>"
"<java.nio.channels.NetworkChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.NetworkChannel: java.net.SocketAddress getLocalAddress()>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndExchangeRelease(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndExchangeRelease(boolean,boolean)>"
"<android.app.Person: void <init>()>","<android.app.Person: void <init>()>"
"<java.io.ByteArrayInputStream: boolean markSupported()>","<java.io.ByteArrayInputStream: boolean markSupported()>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setDefaultLocales(android.os.LocaleList)>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setDefaultLocales(android.os.LocaleList)>"
"<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>","<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>"
"<java.util.regex.Matcher: int start(java.lang.String)>","<java.util.regex.Matcher: int start(java.lang.String)>"
"<android.content.ContentResolver: void notifyChange(java.util.Collection,android.database.ContentObserver,int)>","<android.content.ContentResolver: void notifyChange(java.util.Collection,android.database.ContentObserver,int)>"
"<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.app.Notification: java.lang.String getShortcutId()>","<android.app.Notification: java.lang.String getShortcutId()>"
"<java.nio.file.WatchEvent$Kind: java.lang.Class type()>","<java.nio.file.WatchEvent$Kind: java.lang.Class type()>"
"<android.view.ViewConfiguration: int getDoubleTapTimeout()>","<android.view.ViewConfiguration: int getDoubleTapTimeout()>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(java.lang.String)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(java.lang.String)>"
"<android.content.ContextWrapper: void setTheme(int)>","<android.content.ContextWrapper: void setTheme(int)>"
"<android.view.SurfaceControl$Builder: void <init>()>","<android.view.SurfaceControl$Builder: void <init>()>"
"<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation[] values()>","<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation[] values()>"
"<java.util.Objects: int hash(java.lang.Object[])>","<java.util.Objects: int hash(java.lang.Object[])>"
"<android.graphics.Paint: boolean hasGlyph(java.lang.String)>","<android.graphics.Paint: boolean hasGlyph(java.lang.String)>"
"<android.view.animation.Animation: long getDuration()>","<android.view.animation.Animation: long getDuration()>"
"<java.time.LocalDateTime: java.time.LocalDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.LocalDateTime: java.time.LocalDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>","<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>"
"<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>","<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>"
"<android.content.pm.PackageManager: android.content.pm.ChangedPackages getChangedPackages(int)>","<android.content.pm.PackageManager: android.content.pm.ChangedPackages getChangedPackages(int)>"
"<android.view.autofill.AutofillManager: boolean isEnabled()>","<android.view.autofill.AutofillManager: boolean isEnabled()>"
"<android.graphics.drawable.Icon$OnDrawableLoadedListener: void onDrawableLoaded(android.graphics.drawable.Drawable)>","<android.graphics.drawable.Icon$OnDrawableLoadedListener: void onDrawableLoaded(android.graphics.drawable.Drawable)>"
"<android.view.ViewConfiguration: int getScaledOverflingDistance()>","<android.view.ViewConfiguration: int getScaledOverflingDistance()>"
"<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>","<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>"
"<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProvider)>","<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProvider)>"
"<android.content.DialogInterface: void dismiss()>","<android.content.DialogInterface: void dismiss()>"
"<java.time.chrono.Chronology: int prolepticYear(java.time.chrono.Era,int)>","<java.time.chrono.Chronology: int prolepticYear(java.time.chrono.Era,int)>"
"<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>","<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>"
"<android.graphics.Paint: long getShadowLayerColorLong()>","<android.graphics.Paint: long getShadowLayerColorLong()>"
"<java.util.LinkedHashMap: void replaceAll(java.util.function.BiFunction)>","<java.util.LinkedHashMap: void replaceAll(java.util.function.BiFunction)>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayScript(android.icu.util.ULocale)>"
"<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()>","<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()>"
"<android.media.Rating: boolean hasHeart()>","<android.media.Rating: boolean hasHeart()>"
"<android.content.Intent: android.content.Intent setFlags(int)>","<android.content.Intent: android.content.Intent setFlags(int)>"
"<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>","<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>"
"<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>","<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>"
"<android.text.Spanned: int getSpanEnd(java.lang.Object)>","<android.text.Spanned: int getSpanEnd(java.lang.Object)>"
"<java.time.LocalDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<java.util.zip.ZipEntry: void setTime(long)>","<java.util.zip.ZipEntry: void setTime(long)>"
"<android.app.Fragment: android.os.Bundle getArguments()>","<android.app.Fragment: android.os.Bundle getArguments()>"
"<android.app.Activity: void onRestoreInstanceState(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onRestoreInstanceState(android.os.Bundle,android.os.PersistableBundle)>"
"<android.database.Cursor: boolean moveToFirst()>","<android.database.Cursor: boolean moveToFirst()>"
"<android.app.RemoteInput: int getEditChoicesBeforeSending()>","<android.app.RemoteInput: int getEditChoicesBeforeSending()>"
"<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>"
"<android.os.Parcel: void writeInterfaceToken(java.lang.String)>","<android.os.Parcel: void writeInterfaceToken(java.lang.String)>"
"<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback,android.os.Handler)>","<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback,android.os.Handler)>"
"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>","<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>"
"<android.database.sqlite.SQLiteDatabase: void setCustomAggregateFunction(java.lang.String,java.util.function.BinaryOperator)>","<android.database.sqlite.SQLiteDatabase: void setCustomAggregateFunction(java.lang.String,java.util.function.BinaryOperator)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventContext(android.view.textclassifier.TextClassificationContext)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventContext(android.view.textclassifier.TextClassificationContext)>"
"<android.content.Intent: java.lang.String resolveType(android.content.Context)>","<android.content.Intent: java.lang.String resolveType(android.content.Context)>"
"<android.app.AlertDialog: void <init>(android.content.Context,int)>","<android.app.AlertDialog: void <init>(android.content.Context,int)>"
"<java.time.Duration: void <clinit>()>","<java.time.Duration: void <clinit>()>"
"<java.time.format.TextStyle: void <clinit>()>","<java.time.format.TextStyle: void <clinit>()>"
"<android.view.autofill.AutofillValue: boolean isToggle()>","<android.view.autofill.AutofillValue: boolean isToggle()>"
"<android.webkit.WebView: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>","<android.webkit.WebView: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>"
"<java.nio.file.FileSystem: java.lang.Iterable getFileStores()>","<java.nio.file.FileSystem: java.lang.Iterable getFileStores()>"
"<java.util.AbstractCollection: boolean contains(java.lang.Object)>","<java.util.AbstractCollection: boolean contains(java.lang.Object)>"
"<android.content.pm.Signature: byte[] toByteArray()>","<android.content.pm.Signature: byte[] toByteArray()>"
"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>","<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)>"
"<java.lang.StringBuffer: int indexOf(java.lang.String)>","<java.lang.StringBuffer: int indexOf(java.lang.String)>"
"<android.view.InputDevice: java.lang.String getName()>","<android.view.InputDevice: java.lang.String getName()>"
"<android.os.Parcel: android.os.IInterface[] createInterfaceArray(java.util.function.IntFunction,java.util.function.Function)>","<android.os.Parcel: android.os.IInterface[] createInterfaceArray(java.util.function.IntFunction,java.util.function.Function)>"
"<android.view.ViewDebug$IntToString: java.lang.String 'to'()>","<android.view.ViewDebug$IntToString: java.lang.String 'to'()>"
"<android.graphics.Region: boolean union(android.graphics.Rect)>","<android.graphics.Region: boolean union(android.graphics.Rect)>"
"<android.app.assist.AssistContent: void <init>()>","<android.app.assist.AssistContent: void <init>()>"
"<java.lang.Byte: java.lang.String toString()>","<java.lang.Byte: java.lang.String toString()>"
"<java.util.stream.IntStream: java.util.stream.IntStream map(java.util.function.IntUnaryOperator)>","<java.util.stream.IntStream: java.util.stream.IntStream map(java.util.function.IntUnaryOperator)>"
"<android.view.animation.Transformation: void set(android.view.animation.Transformation)>","<android.view.animation.Transformation: void set(android.view.animation.Transformation)>"
"<android.app.Activity: void invalidateOptionsMenu()>","<android.app.Activity: void invalidateOptionsMenu()>"
"<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>","<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>"
"<android.content.IntentFilter: java.util.Iterator categoriesIterator()>","<android.content.IntentFilter: java.util.Iterator categoriesIterator()>"
"<android.view.textclassifier.TextSelection: int getSelectionStartIndex()>","<android.view.textclassifier.TextSelection: int getSelectionStartIndex()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setTappableElementInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setTappableElementInsets(android.graphics.Insets)>"
"<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>","<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>"
"<java.util.LinkedList: int size()>","<java.util.LinkedList: int size()>"
"<java.util.NavigableMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>"
"<java.util.Properties: java.util.Set stringPropertyNames()>","<java.util.Properties: java.util.Set stringPropertyNames()>"
"<android.content.pm.PackageInstaller$Session: void removeSplit(java.lang.String)>","<android.content.pm.PackageInstaller$Session: void removeSplit(java.lang.String)>"
"<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String,java.lang.Class)>"
"<java.lang.Math: int multiplyExact(int,int)>","<java.lang.Math: int multiplyExact(int,int)>"
"<java.time.OffsetTime: boolean isBefore(java.time.OffsetTime)>","<java.time.OffsetTime: boolean isBefore(java.time.OffsetTime)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>"
"<android.view.Window: void setHideOverlayWindows(boolean)>","<android.view.Window: void setHideOverlayWindows(boolean)>"
"<java.net.NetworkInterface: boolean isLoopback()>","<java.net.NetworkInterface: boolean isLoopback()>"
"<android.content.Context: java.lang.CharSequence getText(int)>","<android.content.Context: java.lang.CharSequence getText(int)>"
"<android.graphics.ColorSpace$Model: int getComponentCount()>","<android.graphics.ColorSpace$Model: int getComponentCount()>"
"<android.view.textservice.SuggestionsInfo: void <init>(android.os.Parcel)>","<android.view.textservice.SuggestionsInfo: void <init>(android.os.Parcel)>"
"<android.content.Loader: void deliverCancellation()>","<android.content.Loader: void deliverCancellation()>"
"<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>","<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>"
"<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>","<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>"
"<io.flutter.plugins.webviewflutter.b1: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.b1: void a(java.lang.Object)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>"
"<android.graphics.Region: void <init>(int,int,int,int)>","<android.graphics.Region: void <init>(int,int,int,int)>"
"<android.graphics.BitmapShader: void setFilterMode(int)>","<android.graphics.BitmapShader: void setFilterMode(int)>"
"<android.media.session.MediaController$TransportControls: void <init>(android.media.session.MediaController)>","<android.media.session.MediaController$TransportControls: void <init>(android.media.session.MediaController)>"
"<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String,java.lang.Class)>","<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String,java.lang.Class)>"
"<android.view.Menu: void setQwertyMode(boolean)>","<android.view.Menu: void setQwertyMode(boolean)>"
"<java.net.DatagramSocketImpl: void setTTL(byte)>","<java.net.DatagramSocketImpl: void setTTL(byte)>"
"<android.widget.ListView: void setItemsCanFocus(boolean)>","<android.widget.ListView: void setItemsCanFocus(boolean)>"
"<android.view.View: void getDrawingRect(android.graphics.Rect)>","<android.view.View: void getDrawingRect(android.graphics.Rect)>"
"<java.lang.Byte: int compareTo(java.lang.Object)>","<java.lang.Byte: int compareTo(java.lang.Object)>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>"
"<android.view.View: void onVisibilityChanged(android.view.View,int)>","<android.view.View: void onVisibilityChanged(android.view.View,int)>"
"<android.view.ViewStructure: int getChildCount()>","<android.view.ViewStructure: int getChildCount()>"
"<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()>","<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()>"
"<android.graphics.Canvas: boolean isOpaque()>","<android.graphics.Canvas: boolean isOpaque()>"
"<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<java.nio.channels.SelectionKey: int interestOps()>","<java.nio.channels.SelectionKey: int interestOps()>"
"<android.widget.Toolbar: void setContentInsetEndWithActions(int)>","<android.widget.Toolbar: void setContentInsetEndWithActions(int)>"
"<android.view.inputmethod.EditorBoundsInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.EditorBoundsInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale)>"
"<android.graphics.fonts.Font$Builder: void <init>(android.content.res.Resources,int)>","<android.graphics.fonts.Font$Builder: void <init>(android.content.res.Resources,int)>"
"<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>","<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>"
"<android.content.LocusId: void <clinit>()>","<android.content.LocusId: void <clinit>()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)>"
"<android.media.MediaMetadata$Builder: void <init>(android.media.MediaMetadata)>","<android.media.MediaMetadata$Builder: void <init>(android.media.MediaMetadata)>"
"<android.graphics.Picture: void finalize()>","<android.graphics.Picture: void finalize()>"
"<java.io.ObjectStreamField: boolean isPrimitive()>","<java.io.ObjectStreamField: boolean isPrimitive()>"
"<java.util.concurrent.ExecutorService: boolean isTerminated()>","<java.util.concurrent.ExecutorService: boolean isTerminated()>"
"<android.media.Session2Token: void <init>(android.content.Context,android.content.ComponentName)>","<android.media.Session2Token: void <init>(android.content.Context,android.content.ComponentName)>"
"<io.flutter.plugins.webviewflutter.t2: void <clinit>()>","<io.flutter.plugins.webviewflutter.t2: void <clinit>()>"
"<android.graphics.Path: void toggleInverseFillType()>","<android.graphics.Path: void toggleInverseFillType()>"
"<android.view.SurfaceControlViewHost: void relayout(int,int)>","<android.view.SurfaceControlViewHost: void relayout(int,int)>"
"<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>","<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock(long,long,boolean)>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock(long,long,boolean)>"
"<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source)>","<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source)>"
"<android.view.textservice.SpellCheckerSubtype: int getNameResId()>","<android.view.textservice.SpellCheckerSubtype: int getNameResId()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>"
"<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>","<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>"
"<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>","<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withHour(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withHour(int)>"
"<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>","<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setBreakStrategy(int)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setBreakStrategy(int)>"
"<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>","<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>"
"<android.view.View: void setFadingEdgeLength(int)>","<android.view.View: void setFadingEdgeLength(int)>"
"<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View,int)>","<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View,int)>"
"<android.view.ViewGroup: void addView(android.view.View,int)>","<android.view.ViewGroup: void addView(android.view.View,int)>"
"<android.view.ActionMode: void onWindowFocusChanged(boolean)>","<android.view.ActionMode: void onWindowFocusChanged(boolean)>"
"<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>","<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>"
"<java.time.chrono.ChronoPeriod: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoPeriod: boolean equals(java.lang.Object)>"
"<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()>","<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()>"
"<java.util.ListIterator: void add(java.lang.Object)>","<java.util.ListIterator: void add(java.lang.Object)>"
"<android.graphics.RenderNode: float getRotationY()>","<android.graphics.RenderNode: float getRotationY()>"
"<java.time.ZoneOffset: int hashCode()>","<java.time.ZoneOffset: int hashCode()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[])>","<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[])>"
"<java.net.ServerSocket: boolean isClosed()>","<java.net.ServerSocket: boolean isClosed()>"
"<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>","<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>"
"<android.view.inputmethod.InputContentInfo: int describeContents()>","<android.view.inputmethod.InputContentInfo: int describeContents()>"
"<android.view.inputmethod.InputConnection: boolean setSelection(int,int)>","<android.view.inputmethod.InputConnection: boolean setSelection(int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>"
"<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>","<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>"
"<java.lang.Character: boolean isMirrored(char)>","<java.lang.Character: boolean isMirrored(char)>"
"<android.graphics.Insets: int describeContents()>","<android.graphics.Insets: int describeContents()>"
"<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()>","<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()>"
"<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>","<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>"
"<android.view.View: void setScreenReaderFocusable(boolean)>","<android.view.View: void setScreenReaderFocusable(boolean)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks build()>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks build()>"
"<android.view.textclassifier.TextLinks$TextLink: int describeContents()>","<android.view.textclassifier.TextLinks$TextLink: int describeContents()>"
"<java.time.temporal.ValueRange: boolean isFixed()>","<java.time.temporal.ValueRange: boolean isFixed()>"
"<java.io.PrintWriter: void println(float)>","<java.io.PrintWriter: void println(float)>"
"<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>","<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>"
"<android.view.textclassifier.TextClassifier: void <clinit>()>","<android.view.textclassifier.TextClassifier: void <clinit>()>"
"<android.view.Window: android.view.View findViewById(int)>","<android.view.Window: android.view.View findViewById(int)>"
"<android.app.Notification$InboxStyle: void <init>(android.app.Notification$Builder)>","<android.app.Notification$InboxStyle: void <init>(android.app.Notification$Builder)>"
"<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>","<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>"
"<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>","<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>"
"<android.view.inputmethod.CursorAnchorInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.CursorAnchorInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Instant: java.time.Instant plus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.Instant plus(long,java.time.temporal.TemporalUnit)>"
"<android.content.pm.ActivityInfo: java.lang.String toString()>","<android.content.pm.ActivityInfo: java.lang.String toString()>"
"<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)>","<android.widget.ImageView: void setImageTintList(android.content.res.ColorStateList)>"
"<org.json.JSONObject: double optDouble(java.lang.String)>","<org.json.JSONObject: double optDouble(java.lang.String)>"
"<java.security.cert.X509Certificate: byte[] getTBSCertificate()>","<java.security.cert.X509Certificate: byte[] getTBSCertificate()>"
"<java.util.TimeZone: void setID(java.lang.String)>","<java.util.TimeZone: void setID(java.lang.String)>"
"<android.view.View: void setRotationY(float)>","<android.view.View: void setRotationY(float)>"
"<java.lang.Float: short shortValue()>","<java.lang.Float: short shortValue()>"
"<android.view.TextureView: void setForeground(android.graphics.drawable.Drawable)>","<android.view.TextureView: void setForeground(android.graphics.drawable.Drawable)>"
"<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>","<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>"
"<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>","<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnSpan(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnSpan(int)>"
"<android.app.SharedElementCallback: void <init>()>","<android.app.SharedElementCallback: void <init>()>"
"<java.lang.Integer: int numberOfLeadingZeros(int)>","<java.lang.Integer: int numberOfLeadingZeros(int)>"
"<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>"
"<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>","<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>"
"<android.view.ViewGroup: boolean hasFocus()>","<android.view.ViewGroup: boolean hasFocus()>"
"<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>","<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>"
"<java.util.concurrent.atomic.AtomicInteger: double doubleValue()>","<java.util.concurrent.atomic.AtomicInteger: double doubleValue()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float)>"
"<java.util.zip.ZipEntry: void <init>(java.lang.String)>","<java.util.zip.ZipEntry: void <init>(java.lang.String)>"
"<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>","<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>"
"<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>","<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>"
"<android.view.translation.TranslationSpec: boolean equals(java.lang.Object)>","<android.view.translation.TranslationSpec: boolean equals(java.lang.Object)>"
"<android.hardware.SensorDirectChannel: void finalize()>","<android.hardware.SensorDirectChannel: void finalize()>"
"<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>","<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>"
"<java.nio.file.WatchService: java.nio.file.WatchKey take()>","<java.nio.file.WatchService: java.nio.file.WatchKey take()>"
"<java.time.ZoneOffset: java.lang.String toString()>","<java.time.ZoneOffset: java.lang.String toString()>"
"<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>","<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>"
"<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<android.util.TypedValue: float complexToFraction(int,float,float)>","<android.util.TypedValue: float complexToFraction(int,float,float)>"
"<io.flutter.plugins.webviewflutter.d2: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.d2: void a(java.lang.Object,y.a$e)>"
"<java.util.concurrent.locks.Lock: boolean tryLock()>","<java.util.concurrent.locks.Lock: boolean tryLock()>"
"<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>","<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>"
"<android.app.PictureInPictureParams: android.app.RemoteAction getCloseAction()>","<android.app.PictureInPictureParams: android.app.RemoteAction getCloseAction()>"
"<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getRangeUnit()>","<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getRangeUnit()>"
"<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>","<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>"
"<java.util.concurrent.locks.ReentrantLock: void unlock()>","<java.util.concurrent.locks.ReentrantLock: void unlock()>"
"<android.view.textclassifier.TextClassification: java.lang.String getText()>","<android.view.textclassifier.TextClassification: java.lang.String getText()>"
"<java.time.format.DecimalStyle: char getPositiveSign()>","<java.time.format.DecimalStyle: char getPositiveSign()>"
"<android.graphics.Matrix: boolean postScale(float,float)>","<android.graphics.Matrix: boolean postScale(float,float)>"
"<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>","<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>"
"<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>","<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
"<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.ActionBar$Tab: int getPosition()>","<android.app.ActionBar$Tab: int getPosition()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setPrimaryNavigationFragment(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setPrimaryNavigationFragment(android.app.Fragment)>"
"<java.math.BigInteger: java.math.BigInteger probablePrime(int,java.util.Random)>","<java.math.BigInteger: java.math.BigInteger probablePrime(int,java.util.Random)>"
"<android.webkit.WebSettings: void setSavePassword(boolean)>","<android.webkit.WebSettings: void setSavePassword(boolean)>"
"<java.lang.ClassFormatError: void <init>(java.lang.String)>","<java.lang.ClassFormatError: void <init>(java.lang.String)>"
"<android.view.View: void setKeyboardNavigationCluster(boolean)>","<android.view.View: void setKeyboardNavigationCluster(boolean)>"
"<android.widget.AbsListView: void onDetachedFromWindow()>","<android.widget.AbsListView: void onDetachedFromWindow()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double[])>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double[])>"
"<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)>","<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)>"
"<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>","<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>"
"<java.util.Queue: boolean offer(java.lang.Object)>","<java.util.Queue: boolean offer(java.lang.Object)>"
"<java.util.Hashtable: boolean equals(java.lang.Object)>","<java.util.Hashtable: boolean equals(java.lang.Object)>"
"<android.webkit.CookieManager: java.lang.Object clone()>","<android.webkit.CookieManager: java.lang.Object clone()>"
"<java.nio.ByteBuffer: java.nio.Buffer position(int)>","<java.nio.ByteBuffer: java.nio.Buffer position(int)>"
"<android.app.Fragment: void setExitTransition(android.transition.Transition)>","<android.app.Fragment: void setExitTransition(android.transition.Transition)>"
"<java.util.Properties: void loadFromXML(java.io.InputStream)>","<java.util.Properties: void loadFromXML(java.io.InputStream)>"
"<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy[] values()>","<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy[] values()>"
"<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>","<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>"
"<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>","<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>"
"<android.view.ViewStructure: void setReceiveContentMimeTypes(java.lang.String[])>","<android.view.ViewStructure: void setReceiveContentMimeTypes(java.lang.String[])>"
"<android.print.PrintAttributes: int getColorMode()>","<android.print.PrintAttributes: int getColorMode()>"
"<java.util.Locale: java.util.Set getUnicodeLocaleKeys()>","<java.util.Locale: java.util.Set getUnicodeLocaleKeys()>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>"
"<android.app.Service: void startForeground(int,android.app.Notification)>","<android.app.Service: void startForeground(int,android.app.Notification)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setCustomBigContentView(android.widget.RemoteViews)>","<android.app.Notification$Builder: android.app.Notification$Builder setCustomBigContentView(android.widget.RemoteViews)>"
"<java.lang.String: java.lang.String copyValueOf(char[])>","<java.lang.String: java.lang.String copyValueOf(char[])>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setExtras(android.os.Bundle)>"
"<android.graphics.Outline: void <init>()>","<android.graphics.Outline: void <init>()>"
"<android.view.View: void setTransitionAlpha(float)>","<android.view.View: void setTransitionAlpha(float)>"
"<android.view.ViewGroup: void dispatchDisplayHint(int)>","<android.view.ViewGroup: void dispatchDisplayHint(int)>"
"<android.webkit.WebSettings$TextSize: void <init>(java.lang.String,int)>","<android.webkit.WebSettings$TextSize: void <init>(java.lang.String,int)>"
"<android.graphics.Movie: void <init>()>","<android.graphics.Movie: void <init>()>"
"<android.view.translation.TranslationSpec: int hashCode()>","<android.view.translation.TranslationSpec: int hashCode()>"
"<io.flutter.plugins.webviewflutter.k3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k3: void a(java.lang.Object)>"
"<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()>","<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()>"
"<android.webkit.WebView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>","<android.webkit.WebView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>"
"<java.io.InputStream: int read(byte[],int,int)>","<java.io.InputStream: int read(byte[],int,int)>"
"<android.view.KeyEvent: boolean hasModifiers(int)>","<android.view.KeyEvent: boolean hasModifiers(int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>","<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>"
"<android.util.Rational: int getDenominator()>","<android.util.Rational: int getDenominator()>"
"<java.util.Arrays: void sort(double[],int,int)>","<java.util.Arrays: void sort(double[],int,int)>"
"<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>","<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>"
"<android.view.View: java.lang.CharSequence getAccessibilityClassName()>","<android.view.View: java.lang.CharSequence getAccessibilityClassName()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setTitle(java.lang.CharSequence)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setTitle(java.lang.CharSequence)>"
"<android.view.animation.Animation: void reset()>","<android.view.animation.Animation: void reset()>"
"<android.widget.TextView: void onAttachedToWindow()>","<android.widget.TextView: void onAttachedToWindow()>"
"<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>","<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class)>"
"<android.view.Window: android.transition.Transition getSharedElementExitTransition()>","<android.view.Window: android.transition.Transition getSharedElementExitTransition()>"
"<android.widget.TextView: boolean onPreDraw()>","<android.widget.TextView: boolean onPreDraw()>"
"<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>","<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>"
"<android.view.Display: int getState()>","<android.view.Display: int getState()>"
"<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>","<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>"
"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>","<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"
"<android.text.SpannableString: char charAt(int)>","<android.text.SpannableString: char charAt(int)>"
"<java.time.Period: java.time.Period parse(java.lang.CharSequence)>","<java.time.Period: java.time.Period parse(java.lang.CharSequence)>"
"<android.os.SystemClock: long elapsedRealtimeNanos()>","<android.os.SystemClock: long elapsedRealtimeNanos()>"
"<android.widget.AbsListView: int getCheckedItemCount()>","<android.widget.AbsListView: int getCheckedItemCount()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent(int)>"
"<java.lang.Byte: int intValue()>","<java.lang.Byte: int intValue()>"
"<android.app.Notification$Builder: android.app.Notification$Style getStyle()>","<android.app.Notification$Builder: android.app.Notification$Style getStyle()>"
"<android.os.Debug$MemoryInfo: int describeContents()>","<android.os.Debug$MemoryInfo: int describeContents()>"
"<android.widget.AbsListView: void onRtlPropertiesChanged(int)>","<android.widget.AbsListView: void onRtlPropertiesChanged(int)>"
"<android.view.Window: void setFeatureInt(int,int)>","<android.view.Window: void setFeatureInt(int,int)>"
"<java.lang.Long: int bitCount(long)>","<java.lang.Long: int bitCount(long)>"
"<android.app.Notification$Builder: android.app.Notification$Builder addExtras(android.os.Bundle)>","<android.app.Notification$Builder: android.app.Notification$Builder addExtras(android.os.Bundle)>"
"<android.print.PrintAttributes$MediaSize: boolean isPortrait()>","<android.print.PrintAttributes$MediaSize: boolean isPortrait()>"
"<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>","<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>"
"<android.view.AbsSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>","<android.view.AbsSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>"
"<android.os.CancellationSignal: void <init>()>","<android.os.CancellationSignal: void <init>()>"
"<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>","<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>"
"<android.view.View: void buildDrawingCache(boolean)>","<android.view.View: void buildDrawingCache(boolean)>"
"<java.util.HashMap: int size()>","<java.util.HashMap: int size()>"
"<io.flutter.plugins.webviewflutter.g1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.g1: void a(java.lang.Object,y.a$e)>"
"<android.view.View: int getScrollIndicators()>","<android.view.View: int getScrollIndicators()>"
"<android.view.WindowId: void <init>()>","<android.view.WindowId: void <init>()>"
"<java.io.BufferedReader: boolean markSupported()>","<java.io.BufferedReader: boolean markSupported()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void setPlain(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: void setPlain(int,java.lang.Object)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream map(java.util.function.DoubleUnaryOperator)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream map(java.util.function.DoubleUnaryOperator)>"
"<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>","<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>"
"<android.util.DisplayMetrics: void <init>()>","<android.util.DisplayMetrics: void <init>()>"
"<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>","<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>"
"<android.content.Loader: java.lang.String dataToString(java.lang.Object)>","<android.content.Loader: java.lang.String dataToString(java.lang.Object)>"
"<android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>","<android.text.format.DateFormat: java.lang.String getBestDateTimePattern(java.util.Locale,java.lang.String)>"
"<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>","<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>"
"<android.view.textclassifier.TextLinks: java.util.Collection getLinks()>","<android.view.textclassifier.TextLinks: java.util.Collection getLinks()>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setScores(float[])>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setScores(float[])>"
"<android.view.ViewGroupOverlay: void add(android.view.View)>","<android.view.ViewGroupOverlay: void add(android.view.View)>"
"<java.util.concurrent.locks.Condition: void await()>","<java.util.concurrent.locks.Condition: void await()>"
"<java.util.Set: boolean addAll(java.util.Collection)>","<java.util.Set: boolean addAll(java.util.Collection)>"
"<io.flutter.plugins.webviewflutter.c3: void <clinit>()>","<io.flutter.plugins.webviewflutter.c3: void <clinit>()>"
"<android.content.Intent$ShortcutIconResource: java.lang.String toString()>","<android.content.Intent$ShortcutIconResource: java.lang.String toString()>"
"<android.widget.AbsListView: void drawableStateChanged()>","<android.widget.AbsListView: void drawableStateChanged()>"
"<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.widget.FrameLayout$LayoutParams)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.widget.FrameLayout$LayoutParams)>"
"<android.view.View: boolean isShown()>","<android.view.View: boolean isShown()>"
"<android.graphics.Bitmap: int getPixel(int,int)>","<android.graphics.Bitmap: int getPixel(int,int)>"
"<android.widget.TextView: void setPaddingRelative(int,int,int,int)>","<android.widget.TextView: void setPaddingRelative(int,int,int,int)>"
"<java.time.temporal.ValueRange: boolean equals(java.lang.Object)>","<java.time.temporal.ValueRange: boolean equals(java.lang.Object)>"
"<java.lang.reflect.Method: int getModifiers()>","<java.lang.reflect.Method: int getModifiers()>"
"<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: void <init>()>"
"<java.util.IdentityHashMap: void forEach(java.util.function.BiConsumer)>","<java.util.IdentityHashMap: void forEach(java.util.function.BiConsumer)>"
"<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>","<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>"
"<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>","<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStopped(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStopped(android.app.Activity)>"
"<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>"
"<android.widget.TextView: int getTotalPaddingTop()>","<android.widget.TextView: int getTotalPaddingTop()>"
"<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object compareAndExchangeAcquire(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object compareAndExchangeAcquire(java.lang.Object,java.lang.Object)>"
"<android.media.session.PlaybackState: java.util.List getCustomActions()>","<android.media.session.PlaybackState: java.util.List getCustomActions()>"
"<android.graphics.RenderNode: boolean hasDisplayList()>","<android.graphics.RenderNode: boolean hasDisplayList()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendReplacementRun(android.graphics.Paint,int,float)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendReplacementRun(android.graphics.Paint,int,float)>"
"<java.lang.StackTraceElement: boolean equals(java.lang.Object)>","<java.lang.StackTraceElement: boolean equals(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.u2: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.u2: void a(java.lang.Object)>"
"<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.textservice.SpellCheckerInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Path$Op: void <init>(java.lang.String,int)>","<android.graphics.Path$Op: void <init>(java.lang.String,int)>"
"<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>","<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>"
"<java.io.PrintStream: void print(java.lang.Object)>","<java.io.PrintStream: void print(java.lang.Object)>"
"<java.security.Principal: int hashCode()>","<java.security.Principal: int hashCode()>"
"<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>","<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>"
"<android.content.ComponentName: void <clinit>()>","<android.content.ComponentName: void <clinit>()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.lang.String toString()>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.lang.String toString()>"
"<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>","<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>"
"<android.view.InputDevice: boolean isVirtual()>","<android.view.InputDevice: boolean isVirtual()>"
"<android.app.Activity: void showDialog(int)>","<android.app.Activity: void showDialog(int)>"
"<android.content.Loader: boolean takeContentChanged()>","<android.content.Loader: boolean takeContentChanged()>"
"<java.nio.DoubleBuffer: java.nio.Buffer limit(int)>","<java.nio.DoubleBuffer: java.nio.Buffer limit(int)>"
"<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<android.transition.Scene: void <init>(android.view.ViewGroup)>","<android.transition.Scene: void <init>(android.view.ViewGroup)>"
"<java.util.concurrent.atomic.AtomicInteger: int accumulateAndGet(int,java.util.function.IntBinaryOperator)>","<java.util.concurrent.atomic.AtomicInteger: int accumulateAndGet(int,java.util.function.IntBinaryOperator)>"
"<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.MotionEvent: float getSize()>","<android.view.MotionEvent: float getSize()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>"
"<android.view.View: boolean isDirty()>","<android.view.View: boolean isDirty()>"
"<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>","<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>"
"<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>","<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>"
"<java.util.function.DoubleSupplier: double getAsDouble()>","<java.util.function.DoubleSupplier: double getAsDouble()>"
"<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>","<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>"
"<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>","<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>"
"<java.io.ObjectOutputStream: void writeInt(int)>","<java.io.ObjectOutputStream: void writeInt(int)>"
"<android.icu.util.ULocale: java.lang.String toLegacyType(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String toLegacyType(java.lang.String,java.lang.String)>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: void <clinit>()>","<android.content.pm.PackageManager$ComponentEnabledSetting: void <clinit>()>"
"<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>","<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>"
"<android.app.AlertDialog: android.widget.ListView getListView()>","<android.app.AlertDialog: android.widget.ListView getListView()>"
"<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>","<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>"
"<android.os.Bundle: java.lang.Object clone()>","<android.os.Bundle: java.lang.Object clone()>"
"<android.text.DynamicLayout: int getLineTop(int)>","<android.text.DynamicLayout: int getLineTop(int)>"
"<io.flutter.plugins.webviewflutter.r1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.r1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.view.autofill.AutofillManager: void commit()>","<android.view.autofill.AutofillManager: void commit()>"
"<android.view.View: void setLayerType(int,android.graphics.Paint)>","<android.view.View: void setLayerType(int,android.graphics.Paint)>"
"<android.content.pm.PermissionInfo: int getProtection()>","<android.content.pm.PermissionInfo: int getProtection()>"
"<android.app.Activity: void startActivityForResult(android.content.Intent,int)>","<android.app.Activity: void startActivityForResult(android.content.Intent,int)>"
"<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>","<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>"
"<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>","<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder addExtras(android.os.Bundle)>","<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder addExtras(android.os.Bundle)>"
"<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)>","<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)>"
"<java.lang.CharSequence: int length()>","<java.lang.CharSequence: int length()>"
"<android.text.PrecomputedText: java.lang.CharSequence subSequence(int,int)>","<android.text.PrecomputedText: java.lang.CharSequence subSequence(int,int)>"
"<android.graphics.Paint: int getStartHyphenEdit()>","<android.graphics.Paint: int getStartHyphenEdit()>"
"<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>","<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>"
"<android.media.MediaMetadata: android.media.MediaDescription getDescription()>","<android.media.MediaMetadata: android.media.MediaDescription getDescription()>"
"<android.view.View: void scrollTo(int,int)>","<android.view.View: void scrollTo(int,int)>"
"<java.util.Arrays: boolean equals(short[],short[])>","<java.util.Arrays: boolean equals(short[],short[])>"
"<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>","<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<android.graphics.SurfaceTexture: long getTimestamp()>","<android.graphics.SurfaceTexture: long getTimestamp()>"
"<java.net.URL: java.lang.String toString()>","<java.net.URL: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>","<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>"
"<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>","<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Calendar)>"
"<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>","<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>"
"<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>","<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>"
"<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>","<java.util.concurrent.atomic.AtomicInteger: void lazySet(int)>"
"<android.view.ViewStructure: void setElevation(float)>","<android.view.ViewStructure: void setElevation(float)>"
"<java.lang.StringBuffer: int offsetByCodePoints(int,int)>","<java.lang.StringBuffer: int offsetByCodePoints(int,int)>"
"<android.view.ViewGroup: void dispatchPointerCaptureChanged(boolean)>","<android.view.ViewGroup: void dispatchPointerCaptureChanged(boolean)>"
"<android.widget.AbsListView: void dispatchSetPressed(boolean)>","<android.widget.AbsListView: void dispatchSetPressed(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,android.content.ComponentName)>","<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,android.content.ComponentName)>"
"<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>","<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()>"
"<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>","<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>"
"<android.widget.TextView: java.lang.CharSequence getText()>","<android.widget.TextView: java.lang.CharSequence getText()>"
"<java.util.Map$Entry: boolean equals(java.lang.Object)>","<java.util.Map$Entry: boolean equals(java.lang.Object)>"
"<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)>","<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)>"
"<io.flutter.plugins.webviewflutter.z1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.z1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.util.concurrent.atomic.AtomicInteger: long longValue()>","<java.util.concurrent.atomic.AtomicInteger: long longValue()>"
"<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>"
"<java.net.DatagramSocket: java.lang.Object getOption(java.net.SocketOption)>","<java.net.DatagramSocket: java.lang.Object getOption(java.net.SocketOption)>"
"<android.widget.TextView: void onSelectionChanged(int,int)>","<android.widget.TextView: void onSelectionChanged(int,int)>"
"<android.widget.AdapterView: long getItemIdAtPosition(int)>","<android.widget.AdapterView: long getItemIdAtPosition(int)>"
"<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>","<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>"
"<android.transition.Transition$EpicenterCallback: android.graphics.Rect onGetEpicenter(android.transition.Transition)>","<android.transition.Transition$EpicenterCallback: android.graphics.Rect onGetEpicenter(android.transition.Transition)>"
"<java.text.NumberFormat: void setMaximumIntegerDigits(int)>","<java.text.NumberFormat: void setMaximumIntegerDigits(int)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks$Request)>"
"<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>","<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>"
"<android.view.inputmethod.CursorAnchorInfo: java.lang.String toString()>","<android.view.inputmethod.CursorAnchorInfo: java.lang.String toString()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime of(int,int,int,int,int,int,int,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime of(int,int,int,int,int,int,int,java.time.ZoneId)>"
"<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>","<java.text.DateFormat: void setTimeZone(java.util.TimeZone)>"
"<android.widget.AbsListView$OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>","<android.widget.AbsListView$OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>"
"<java.io.Writer: void write(java.lang.String,int,int)>","<java.io.Writer: void write(java.lang.String,int,int)>"
"<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<java.nio.channels.FileLock: long size()>","<java.nio.channels.FileLock: long size()>"
"<android.animation.ValueAnimator: void <init>()>","<android.animation.ValueAnimator: void <init>()>"
"<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>","<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>"
"<io.flutter.plugins.webviewflutter.g0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.g0: void a(java.lang.Object,y.a$e)>"
"<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>"
"<java.lang.Object: void <init>()>","<java.lang.Object: void <init>()>"
"<java.util.ArrayDeque: boolean isEmpty()>","<java.util.ArrayDeque: boolean isEmpty()>"
"<java.nio.file.attribute.FileTime: int hashCode()>","<java.nio.file.attribute.FileTime: int hashCode()>"
"<java.nio.file.attribute.BasicFileAttributes: long size()>","<java.nio.file.attribute.BasicFileAttributes: long size()>"
"<android.app.Activity: android.view.SearchEvent getSearchEvent()>","<android.app.Activity: android.view.SearchEvent getSearchEvent()>"
"<android.util.SparseArray: int size()>","<android.util.SparseArray: int size()>"
"<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>","<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setTextClassification(android.view.textclassifier.TextClassification)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setTextClassification(android.view.textclassifier.TextClassification)>"
"<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)>","<java.lang.Runtime: java.io.OutputStream getLocalizedOutputStream(java.io.OutputStream)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>"
"<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()>","<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()>"
"<java.time.LocalTime: java.time.LocalTime withHour(int)>","<java.time.LocalTime: java.time.LocalTime withHour(int)>"
"<android.hardware.HardwareBuffer: long getUsage()>","<android.hardware.HardwareBuffer: long getUsage()>"
"<java.util.Queue: java.lang.Object element()>","<java.util.Queue: java.lang.Object element()>"
"<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>","<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusWeeks(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusWeeks(long)>"
"<java.net.URL: java.lang.String getUserInfo()>","<java.net.URL: java.lang.String getUserInfo()>"
"<java.util.OptionalInt: boolean equals(java.lang.Object)>","<java.util.OptionalInt: boolean equals(java.lang.Object)>"
"<android.webkit.WebBackForwardList: java.lang.Object clone()>","<android.webkit.WebBackForwardList: java.lang.Object clone()>"
"<java.util.concurrent.LinkedBlockingQueue: void forEach(java.util.function.Consumer)>","<java.util.concurrent.LinkedBlockingQueue: void forEach(java.util.function.Consumer)>"
"<java.time.Period: long get(java.time.temporal.TemporalUnit)>","<java.time.Period: long get(java.time.temporal.TemporalUnit)>"
"<android.webkit.WebView: void freeMemory()>","<android.webkit.WebView: void freeMemory()>"
"<android.app.Fragment: void setExitSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Fragment: void setExitSharedElementCallback(android.app.SharedElementCallback)>"
"<androidx.window.sidecar.SidecarDeviceState: void <init>()>","<androidx.window.sidecar.SidecarDeviceState: void <init>()>"
"<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>","<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>"
"<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>","<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>"
"<android.view.MenuItem: java.lang.CharSequence getContentDescription()>","<android.view.MenuItem: java.lang.CharSequence getContentDescription()>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAspectRatio(android.util.Rational)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAspectRatio(android.util.Rational)>"
"<java.nio.file.FileStore: java.nio.file.attribute.FileStoreAttributeView getFileStoreAttributeView(java.lang.Class)>","<java.nio.file.FileStore: java.nio.file.attribute.FileStoreAttributeView getFileStoreAttributeView(java.lang.Class)>"
"<java.net.DatagramPacket: void setData(byte[])>","<java.net.DatagramPacket: void setData(byte[])>"
"<java.text.FieldPosition: void setBeginIndex(int)>","<java.text.FieldPosition: void setBeginIndex(int)>"
"<android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>","<android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>"
"<android.widget.TextView: int getMarqueeRepeatLimit()>","<android.widget.TextView: int getMarqueeRepeatLimit()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>"
"<java.util.stream.LongStream: java.util.stream.LongStream of(long)>","<java.util.stream.LongStream: java.util.stream.LongStream of(long)>"
"<android.webkit.WebStorage$Origin: java.lang.String getOrigin()>","<android.webkit.WebStorage$Origin: java.lang.String getOrigin()>"
"<android.view.WindowInsets$Type: int systemBars()>","<android.view.WindowInsets$Type: int systemBars()>"
"<java.nio.channels.InterruptibleChannel: void close()>","<java.nio.channels.InterruptibleChannel: void close()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()>"
"<android.view.View: int getPaddingBottom()>","<android.view.View: int getPaddingBottom()>"
"<java.time.Duration: java.time.Duration plusNanos(long)>","<java.time.Duration: java.time.Duration plusNanos(long)>"
"<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>","<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>"
"<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>","<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>"
"<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>","<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>"
"<android.graphics.Paint: void setTextSkewX(float)>","<android.graphics.Paint: void setTextSkewX(float)>"
"<java.util.stream.Stream: java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)>"
"<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.text.Editable: void clear()>","<android.text.Editable: void clear()>"
"<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate,java.lang.String)>","<android.net.http.SslError: void <init>(int,java.security.cert.X509Certificate,java.lang.String)>"
"<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>","<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>"
"<android.view.WindowInsets: android.graphics.Insets getStableInsets()>","<android.view.WindowInsets: android.graphics.Insets getStableInsets()>"
"<java.util.IdentityHashMap: boolean containsValue(java.lang.Object)>","<java.util.IdentityHashMap: boolean containsValue(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.g3: void <clinit>()>","<io.flutter.plugins.webviewflutter.g3: void <clinit>()>"
"<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>","<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>"
"<android.os.Parcel: void readFixedArray(java.lang.Object,android.os.Parcelable$Creator)>","<android.os.Parcel: void readFixedArray(java.lang.Object,android.os.Parcelable$Creator)>"
"<java.io.Reader: int read(char[])>","<java.io.Reader: int read(char[])>"
"<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId$FocusObserver)>","<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId$FocusObserver)>"
"<java.nio.ByteBuffer: short getShort()>","<java.nio.ByteBuffer: short getShort()>"
"<android.view.Window$Callback: boolean onSearchRequested()>","<android.view.Window$Callback: boolean onSearchRequested()>"
"<java.time.ZoneId: java.time.ZoneId of(java.lang.String,java.util.Map)>","<java.time.ZoneId: java.time.ZoneId of(java.lang.String,java.util.Map)>"
"<java.nio.FloatBuffer: boolean isDirect()>","<java.nio.FloatBuffer: boolean isDirect()>"
"<android.util.SparseArray: int indexOfKey(int)>","<android.util.SparseArray: int indexOfKey(int)>"
"<java.time.Duration: java.time.Duration withSeconds(long)>","<java.time.Duration: java.time.Duration withSeconds(long)>"
"<android.graphics.fonts.Font: int getSourceIdentifier()>","<android.graphics.fonts.Font: int getSourceIdentifier()>"
"<java.lang.System: void setErr(java.io.PrintStream)>","<java.lang.System: void setErr(java.io.PrintStream)>"
"<android.content.pm.PackageManager$Property: boolean isBoolean()>","<android.content.pm.PackageManager$Property: boolean isBoolean()>"
"<android.content.ContentResolver: java.util.List getCurrentSyncs()>","<android.content.ContentResolver: java.util.List getCurrentSyncs()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setGroup(java.lang.String)>","<android.app.Notification$Builder: android.app.Notification$Builder setGroup(java.lang.String)>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setId(java.lang.String)>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setId(java.lang.String)>"
"<android.widget.ListPopupWindow: void clearListSelection()>","<android.widget.ListPopupWindow: void clearListSelection()>"
"<java.util.stream.LongStream: java.util.stream.LongStream limit(long)>","<java.util.stream.LongStream: java.util.stream.LongStream limit(long)>"
"<android.os.VibrationAttributes: int getUsage()>","<android.os.VibrationAttributes: int getUsage()>"
"<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.LocalDate: java.time.LocalDate plusWeeks(long)>","<java.time.LocalDate: java.time.LocalDate plusWeeks(long)>"
"<android.media.session.MediaController$Callback: void onQueueTitleChanged(java.lang.CharSequence)>","<android.media.session.MediaController$Callback: void onQueueTitleChanged(java.lang.CharSequence)>"
"<android.graphics.Region: boolean isComplex()>","<android.graphics.Region: boolean isComplex()>"
"<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int)>"
"<android.widget.RemoteViews: void setOnClickResponse(int,android.widget.RemoteViews$RemoteResponse)>","<android.widget.RemoteViews: void setOnClickResponse(int,android.widget.RemoteViews$RemoteResponse)>"
"<android.view.inputmethod.TextSnapshot: int getCompositionEnd()>","<android.view.inputmethod.TextSnapshot: int getCompositionEnd()>"
"<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>","<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>"
"<android.view.textservice.SpellCheckerSubtype: int describeContents()>","<android.view.textservice.SpellCheckerSubtype: int describeContents()>"
"<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>","<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>"
"<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>","<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>"
"<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.lang.Object)>"
"<android.animation.LayoutTransition$TransitionListener: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition$TransitionListener: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>"
"<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)>","<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)>"
"<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>","<java.util.concurrent.ThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)>"
"<android.media.MediaDescription: java.lang.CharSequence getSubtitle()>","<android.media.MediaDescription: java.lang.CharSequence getSubtitle()>"
"<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>","<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>"
"<java.time.OffsetDateTime: int getDayOfYear()>","<java.time.OffsetDateTime: int getDayOfYear()>"
"<android.content.pm.PackageManager$Property: boolean isFloat()>","<android.content.pm.PackageManager$Property: boolean isFloat()>"
"<java.util.concurrent.AbstractExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.AbstractExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>"
"<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>","<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>"
"<java.time.LocalDate: java.time.chrono.Chronology getChronology()>","<java.time.LocalDate: java.time.chrono.Chronology getChronology()>"
"<android.content.res.TypedArray: int getInteger(int,int)>","<android.content.res.TypedArray: int getInteger(int,int)>"
"<android.text.Layout: java.lang.CharSequence getText()>","<android.text.Layout: java.lang.CharSequence getText()>"
"<android.view.ViewGroup: void addTouchables(java.util.ArrayList)>","<android.view.ViewGroup: void addTouchables(java.util.ArrayList)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(java.lang.String)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(java.lang.String)>"
"<java.util.List: void sort(java.util.Comparator)>","<java.util.List: void sort(java.util.Comparator)>"
"<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>"
"<android.app.AlertDialog: android.widget.Button getButton(int)>","<android.app.AlertDialog: android.widget.Button getButton(int)>"
"<android.graphics.Color: float red()>","<android.graphics.Color: float red()>"
"<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<java.util.OptionalDouble: java.lang.String toString()>","<java.util.OptionalDouble: java.lang.String toString()>"
"<java.io.File: boolean canRead()>","<java.io.File: boolean canRead()>"
"<java.io.Flushable: void flush()>","<java.io.Flushable: void flush()>"
"<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>","<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>"
"<android.view.inputmethod.BaseInputConnection: boolean commitText(java.lang.CharSequence,int)>","<android.view.inputmethod.BaseInputConnection: boolean commitText(java.lang.CharSequence,int)>"
"<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>","<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>"
"<java.time.chrono.ChronoZonedDateTime: boolean isBefore(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: boolean isBefore(java.time.chrono.ChronoZonedDateTime)>"
"<org.xmlpull.v1.XmlPullParser: int getColumnNumber()>","<org.xmlpull.v1.XmlPullParser: int getColumnNumber()>"
"<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.os.Parcel: void enforceInterface(java.lang.String)>","<android.os.Parcel: void enforceInterface(java.lang.String)>"
"<android.os.Bundle: java.lang.String toString()>","<android.os.Bundle: java.lang.String toString()>"
"<java.net.InetAddress: boolean isLoopbackAddress()>","<java.net.InetAddress: boolean isLoopbackAddress()>"
"<java.security.PrivilegedActionException: java.lang.Exception getException()>","<java.security.PrivilegedActionException: java.lang.Exception getException()>"
"<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>"
"<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>","<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>"
"<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>"
"<android.content.BroadcastReceiver: void <init>()>","<android.content.BroadcastReceiver: void <init>()>"
"<android.transition.Transition$TransitionListener: void onTransitionStart(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionStart(android.transition.Transition)>"
"<android.app.Presentation: android.view.Display getDisplay()>","<android.app.Presentation: android.view.Display getDisplay()>"
"<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>","<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>"
"<android.app.Application: java.lang.String getProcessName()>","<android.app.Application: java.lang.String getProcessName()>"
"<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()>","<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()>"
"<android.os.Debug: void resetGlobalExternalFreedSize()>","<android.os.Debug: void resetGlobalExternalFreedSize()>"
"<android.webkit.WebSettings$TextSize: void <clinit>()>","<android.webkit.WebSettings$TextSize: void <clinit>()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferTransform(android.view.SurfaceControl,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferTransform(android.view.SurfaceControl,int)>"
"<android.os.Handler: void dispatchMessage(android.os.Message)>","<android.os.Handler: void dispatchMessage(android.os.Message)>"
"<java.nio.IntBuffer: java.nio.Buffer flip()>","<java.nio.IntBuffer: java.nio.Buffer flip()>"
"<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>","<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>"
"<android.widget.ImageView: void <init>(android.content.Context)>","<android.widget.ImageView: void <init>(android.content.Context)>"
"<android.app.Notification: java.lang.Object clone()>","<android.app.Notification: java.lang.Object clone()>"
"<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<java.time.OffsetDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.OffsetDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.view.WindowId: void <clinit>()>","<android.view.WindowId: void <clinit>()>"
"<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>","<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>"
"<android.view.View: int getMeasuredState()>","<android.view.View: int getMeasuredState()>"
"<android.app.Notification$MessagingStyle: java.util.List getMessages()>","<android.app.Notification$MessagingStyle: java.util.List getMessages()>"
"<android.graphics.Paint: void setTextLocale(java.util.Locale)>","<android.graphics.Paint: void setTextLocale(java.util.Locale)>"
"<java.time.temporal.ChronoUnit: void <init>(java.lang.String,int)>","<java.time.temporal.ChronoUnit: void <init>(java.lang.String,int)>"
"<android.view.View: void requestUnbufferedDispatch(int)>","<android.view.View: void requestUnbufferedDispatch(int)>"
"<android.graphics.Paint$Style: android.graphics.Paint$Style[] values()>","<android.graphics.Paint$Style: android.graphics.Paint$Style[] values()>"
"<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>","<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>"
"<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>","<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>"
"<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>","<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>"
"<android.content.Context: android.content.ContentResolver getContentResolver()>","<android.content.Context: android.content.ContentResolver getContentResolver()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <init>()>"
"<android.os.Message: void copyFrom(android.os.Message)>","<android.os.Message: void copyFrom(android.os.Message)>"
"<android.app.RemoteInput: int describeContents()>","<android.app.RemoteInput: int describeContents()>"
"<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>","<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>"
"<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>","<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>"
"<android.app.Notification$MediaStyle: void <init>(android.app.Notification$Builder)>","<android.app.Notification$MediaStyle: void <init>(android.app.Notification$Builder)>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setIntent(android.app.PendingIntent)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setIntent(android.app.PendingIntent)>"
"<android.view.ViewGroup: int getChildDrawingOrder(int,int)>","<android.view.ViewGroup: int getChildDrawingOrder(int,int)>"
"<java.util.LinkedList: boolean offerLast(java.lang.Object)>","<java.util.LinkedList: boolean offerLast(java.lang.Object)>"
"<android.view.Display: boolean isMinimalPostProcessingSupported()>","<android.view.Display: boolean isMinimalPostProcessingSupported()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
"<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()>","<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()>"
"<android.graphics.ColorSpace$Rgb: float[] toXyz(float[])>","<android.graphics.ColorSpace$Rgb: float[] toXyz(float[])>"
"<android.widget.TextView: float getShadowRadius()>","<android.widget.TextView: float getShadowRadius()>"
"<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>"
"<android.database.SQLException: void <init>(java.lang.String)>","<android.database.SQLException: void <init>(java.lang.String)>"
"<java.io.PrintWriter: java.lang.Appendable append(char)>","<java.io.PrintWriter: java.lang.Appendable append(char)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>"
"<java.nio.file.Path: java.nio.file.Path resolveSibling(java.nio.file.Path)>","<java.nio.file.Path: java.nio.file.Path resolveSibling(java.nio.file.Path)>"
"<java.util.stream.LongStream: java.util.PrimitiveIterator$OfLong iterator()>","<java.util.stream.LongStream: java.util.PrimitiveIterator$OfLong iterator()>"
"<android.view.KeyEvent: java.lang.String toString()>","<android.view.KeyEvent: java.lang.String toString()>"
"<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>","<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Math: double max(double,double)>","<java.lang.Math: double max(double,double)>"
"<android.view.Window: int getNavigationBarDividerColor()>","<android.view.Window: int getNavigationBarDividerColor()>"
"<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>","<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>"
"<android.content.ContentProvider: void onTrimMemory(int)>","<android.content.ContentProvider: void onTrimMemory(int)>"
"<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)>","<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)>"
"<android.widget.RemoteViews$RemoteViewOutlineProvider: void <init>(float)>","<android.widget.RemoteViews$RemoteViewOutlineProvider: void <init>(float)>"
"<org.json.JSONArray: void <init>(java.lang.String)>","<org.json.JSONArray: void <init>(java.lang.String)>"
"<android.app.Activity: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Activity: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<java.text.NumberFormat: java.lang.String format(long)>","<java.text.NumberFormat: java.lang.String format(long)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int)>"
"<java.lang.reflect.Constructor: java.lang.String getName()>","<java.lang.reflect.Constructor: java.lang.String getName()>"
"<java.lang.Double: boolean isNaN(double)>","<java.lang.Double: boolean isNaN(double)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>"
"<android.database.sqlite.SQLiteTransactionListener: void onBegin()>","<android.database.sqlite.SQLiteTransactionListener: void onBegin()>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()>"
"<android.content.pm.Signature: char[] toChars()>","<android.content.pm.Signature: char[] toChars()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,java.lang.String)>"
"<android.text.DynamicLayout: int getLineStart(int)>","<android.text.DynamicLayout: int getLineStart(int)>"
"<android.view.WindowInsetsAnimationController: boolean isReady()>","<android.view.WindowInsetsAnimationController: boolean isReady()>"
"<java.io.DataOutput: void writeBoolean(boolean)>","<java.io.DataOutput: void writeBoolean(boolean)>"
"<android.view.KeyCharacterMap: int get(int,int)>","<android.view.KeyCharacterMap: int get(int,int)>"
"<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialSelectedText(int)>","<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialSelectedText(int)>"
"<android.widget.AdapterView: void setSelection(int)>","<android.widget.AdapterView: void setSelection(int)>"
"<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence)>"
"<android.graphics.Rect: boolean equals(java.lang.Object)>","<android.graphics.Rect: boolean equals(java.lang.Object)>"
"<android.graphics.Bitmap: void recycle()>","<android.graphics.Bitmap: void recycle()>"
"<android.os.Bundle: void <init>(int)>","<android.os.Bundle: void <init>(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)>"
"<java.lang.Thread: boolean isDaemon()>","<java.lang.Thread: boolean isDaemon()>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void writeToParcel(android.os.Parcel,int)>","<android.view.SurfaceControlViewHost$SurfacePackage: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void setTag(java.lang.Object)>","<android.view.View: void setTag(java.lang.Object)>"
"<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>","<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>"
"<java.util.stream.DoubleStream: java.util.stream.BaseStream parallel()>","<java.util.stream.DoubleStream: java.util.stream.BaseStream parallel()>"
"<java.net.DatagramSocket: void close()>","<java.net.DatagramSocket: void close()>"
"<java.util.Comparator: java.util.Comparator thenComparing(java.util.Comparator)>","<java.util.Comparator: java.util.Comparator thenComparing(java.util.Comparator)>"
"<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>","<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>","<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>"
"<android.print.PrintDocumentInfo: int describeContents()>","<android.print.PrintDocumentInfo: int describeContents()>"
"<org.json.JSONArray: boolean equals(java.lang.Object)>","<org.json.JSONArray: boolean equals(java.lang.Object)>"
"<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>","<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>"
"<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>","<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double)>"
"<java.lang.Character: boolean isHighSurrogate(char)>","<java.lang.Character: boolean isHighSurrogate(char)>"
"<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>"
"<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.ActionMode$Callback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>","<android.view.ActionMode$Callback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>"
"<java.util.Arrays: int binarySearch(float[],float)>","<java.util.Arrays: int binarySearch(float[],float)>"
"<java.text.DateFormat: java.text.DateFormat getTimeInstance()>","<java.text.DateFormat: java.text.DateFormat getTimeInstance()>"
"<java.util.Arrays: boolean equals(float[],int,int,float[],int,int)>","<java.util.Arrays: boolean equals(float[],int,int,float[],int,int)>"
"<android.app.Notification$CarExtender: android.app.Notification$CarExtender setUnreadConversation(android.app.Notification$CarExtender$UnreadConversation)>","<android.app.Notification$CarExtender: android.app.Notification$CarExtender setUnreadConversation(android.app.Notification$CarExtender$UnreadConversation)>"
"<android.widget.TextView: android.graphics.Typeface getTypeface()>","<android.widget.TextView: android.graphics.Typeface getTypeface()>"
"<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>"
"<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.widget.Toolbar$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>","<android.widget.Toolbar$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>"
"<android.widget.TextView: int getSelectionEnd()>","<android.widget.TextView: int getSelectionEnd()>"
"<android.os.IBinder: boolean isBinderAlive()>","<android.os.IBinder: boolean isBinderAlive()>"
"<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>","<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>"
"<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.graphics.Matrix: void setRotate(float)>","<android.graphics.Matrix: void setRotate(float)>"
"<java.util.Arrays: void sort(int[])>","<java.util.Arrays: void sort(int[])>"
"<android.widget.ListPopupWindow: void <init>(android.content.Context)>","<android.widget.ListPopupWindow: void <init>(android.content.Context)>"
"<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>","<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>"
"<android.widget.TextView: void setMarqueeRepeatLimit(int)>","<android.widget.TextView: void setMarqueeRepeatLimit(int)>"
"<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>","<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>"
"<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>","<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>"
"<java.net.URL: java.lang.Object getContent(java.lang.Class[])>","<java.net.URL: java.lang.Object getContent(java.lang.Class[])>"
"<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>","<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>"
"<java.nio.channels.spi.AbstractSelector: boolean isOpen()>","<java.nio.channels.spi.AbstractSelector: boolean isOpen()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean,boolean)>"
"<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>"
"<java.util.stream.IntStream: java.util.stream.IntStream flatMap(java.util.function.IntFunction)>","<java.util.stream.IntStream: java.util.stream.IntStream flatMap(java.util.function.IntFunction)>"
"<android.view.View: boolean getFitsSystemWindows()>","<android.view.View: boolean getFitsSystemWindows()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withNano(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withNano(int)>"
"<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>","<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>"
"<java.net.ServerSocket: void <init>(int,int)>","<java.net.ServerSocket: void <init>(int,int)>"
"<java.util.TimeZone: void <init>()>","<java.util.TimeZone: void <init>()>"
"<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>","<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>"
"<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>","<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>"
"<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>","<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>"
"<android.content.res.Configuration: void <clinit>()>","<android.content.res.Configuration: void <clinit>()>"
"<android.os.Message: android.os.Message obtain()>","<android.os.Message: android.os.Message obtain()>"
"<android.text.Layout: int getLineForOffset(int)>","<android.text.Layout: int getLineForOffset(int)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
"<java.time.OffsetDateTime: int getHour()>","<java.time.OffsetDateTime: int getHour()>"
"<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>","<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>"
"<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>","<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>"
"<java.util.Arrays: java.lang.String toString(java.lang.Object[])>","<java.util.Arrays: java.lang.String toString(java.lang.Object[])>"
"<java.net.DatagramSocket: int getTrafficClass()>","<java.net.DatagramSocket: int getTrafficClass()>"
"<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)>","<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)>"
"<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()>","<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()>"
"<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>","<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>"
"<java.lang.Long: long parseLong(java.lang.String)>","<java.lang.Long: long parseLong(java.lang.String)>"
"<java.time.LocalDateTime: int getMinute()>","<java.time.LocalDateTime: int getMinute()>"
"<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetBefore()>","<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetBefore()>"
"<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>","<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>"
"<android.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>","<android.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>"
"<java.util.Deque: java.lang.Object remove()>","<java.util.Deque: java.lang.Object remove()>"
"<android.app.Dialog: android.view.View getCurrentFocus()>","<android.app.Dialog: android.view.View getCurrentFocus()>"
"<android.view.KeyEvent: int getMetaState()>","<android.view.KeyEvent: int getMetaState()>"
"<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>","<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>"
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
"<java.util.LinkedList: java.lang.Object remove(int)>","<java.util.LinkedList: java.lang.Object remove(int)>"
"<java.lang.Double: boolean isNaN()>","<java.lang.Double: boolean isNaN()>"
"<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>","<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>"
"<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>"
"<android.webkit.WebView: boolean onHoverEvent(android.view.MotionEvent)>","<android.webkit.WebView: boolean onHoverEvent(android.view.MotionEvent)>"
"<android.content.pm.PackageManager$Property: void <init>()>","<android.content.pm.PackageManager$Property: void <init>()>"
"<android.app.Activity: void onPostCreate(android.os.Bundle)>","<android.app.Activity: void onPostCreate(android.os.Bundle)>"
"<android.text.DynamicLayout: int getTopPadding()>","<android.text.DynamicLayout: int getTopPadding()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)>"
"<java.time.chrono.ChronoZonedDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: long getLong(java.time.temporal.TemporalField)>"
"<android.os.LocaleList: int size()>","<android.os.LocaleList: int size()>"
"<android.view.KeyEvent: int getDeadChar(int,int)>","<android.view.KeyEvent: int getDeadChar(int,int)>"
"<java.util.concurrent.ThreadLocalRandom: int nextInt(int)>","<java.util.concurrent.ThreadLocalRandom: int nextInt(int)>"
"<android.widget.ListView: void setAdapter(android.widget.Adapter)>","<android.widget.ListView: void setAdapter(android.widget.Adapter)>"
"<java.net.DatagramSocket: void bind(java.net.SocketAddress)>","<java.net.DatagramSocket: void bind(java.net.SocketAddress)>"
"<android.app.ActivityManager$RecentTaskInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RecentTaskInfo: void readFromParcel(android.os.Parcel)>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>","<java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>"
"<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>","<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>"
"<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>"
"<android.app.Activity: boolean isLocalVoiceInteractionSupported()>","<android.app.Activity: boolean isLocalVoiceInteractionSupported()>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>"
"<android.view.View: float getTopFadingEdgeStrength()>","<android.view.View: float getTopFadingEdgeStrength()>"
"<java.lang.Long: long divideUnsigned(long,long)>","<java.lang.Long: long divideUnsigned(long,long)>"
"<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()>","<android.view.inputmethod.BaseInputConnection: android.text.Editable getEditable()>"
"<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])>","<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])>"
"<java.nio.CharBuffer: java.nio.Buffer mark()>","<java.nio.CharBuffer: java.nio.Buffer mark()>"
"<android.view.View: void setPaddingRelative(int,int,int,int)>","<android.view.View: void setPaddingRelative(int,int,int,int)>"
"<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>","<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.view.ViewGroup: void removeViewsInLayout(int,int)>","<android.view.ViewGroup: void removeViewsInLayout(int,int)>"
"<java.util.Collection: boolean add(java.lang.Object)>","<java.util.Collection: boolean add(java.lang.Object)>"
"<java.time.OffsetTime: int compareTo(java.time.OffsetTime)>","<java.time.OffsetTime: int compareTo(java.time.OffsetTime)>"
"<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>","<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)>"
"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>","<android.content.Context: java.lang.String getString(int,java.lang.Object[])>"
"<android.content.pm.PackageManager$ApplicationInfoFlags: android.content.pm.PackageManager$ApplicationInfoFlags of(long)>","<android.content.pm.PackageManager$ApplicationInfoFlags: android.content.pm.PackageManager$ApplicationInfoFlags of(long)>"
"<android.os.Parcelable$Creator: java.lang.Object[] newArray(int)>","<android.os.Parcelable$Creator: java.lang.Object[] newArray(int)>"
"<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>","<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>"
"<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>","<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>"
"<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>","<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>"
"<android.webkit.WebResourceError: int getErrorCode()>","<android.webkit.WebResourceError: int getErrorCode()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>","<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>"
"<android.animation.Animator: void setStartDelay(long)>","<android.animation.Animator: void setStartDelay(long)>"
"<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>"
"<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>","<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>"
"<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>","<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>"
"<android.view.WindowManager$LayoutParams: int getFitInsetsSides()>","<android.view.WindowManager$LayoutParams: int getFitInsetsSides()>"
"<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>"
"<android.webkit.WebMessage: void <init>(java.lang.String,android.webkit.WebMessagePort[])>","<android.webkit.WebMessage: void <init>(java.lang.String,android.webkit.WebMessagePort[])>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap)>"
"<android.util.ArrayMap: boolean equals(java.lang.Object)>","<android.util.ArrayMap: boolean equals(java.lang.Object)>"
"<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>","<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>"
"<android.app.Activity: void onAttachedToWindow()>","<android.app.Activity: void onAttachedToWindow()>"
"<android.content.ComponentName: int compareTo(android.content.ComponentName)>","<android.content.ComponentName: int compareTo(android.content.ComponentName)>"
"<android.view.inputmethod.BaseInputConnection: boolean clearMetaKeyStates(int)>","<android.view.inputmethod.BaseInputConnection: boolean clearMetaKeyStates(int)>"
"<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>","<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>"
"<android.graphics.ColorSpace$Rgb: float[] getPrimaries()>","<android.graphics.ColorSpace$Rgb: float[] getPrimaries()>"
"<java.io.ObjectStreamClass: java.lang.String toString()>","<java.io.ObjectStreamClass: java.lang.String toString()>"
"<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>","<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>"
"<org.json.JSONArray: org.json.JSONObject optJSONObject(int)>","<org.json.JSONArray: org.json.JSONObject optJSONObject(int)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>","<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>"
"<android.animation.StateListAnimator: java.lang.Object clone()>","<android.animation.StateListAnimator: java.lang.Object clone()>"
"<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>","<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>"
"<android.text.Layout: int getLineDescent(int)>","<android.text.Layout: int getLineDescent(int)>"
"<java.util.concurrent.atomic.AtomicInteger: int getAcquire()>","<java.util.concurrent.atomic.AtomicInteger: int getAcquire()>"
"<android.graphics.RenderNode: float getRotationZ()>","<android.graphics.RenderNode: float getRotationZ()>"
"<java.lang.Math: long round(double)>","<java.lang.Math: long round(double)>"
"<android.view.View: void invalidateOutline()>","<android.view.View: void invalidateOutline()>"
"<android.graphics.Shader$TileMode: void <clinit>()>","<android.graphics.Shader$TileMode: void <clinit>()>"
"<java.io.ObjectOutputStream: void defaultWriteObject()>","<java.io.ObjectOutputStream: void defaultWriteObject()>"
"<java.net.InetAddress: boolean isLinkLocalAddress()>","<java.net.InetAddress: boolean isLinkLocalAddress()>"
"<android.view.View: void cancelLongPress()>","<android.view.View: void cancelLongPress()>"
"<android.graphics.Rect: int hashCode()>","<android.graphics.Rect: int hashCode()>"
"<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,android.icu.util.ULocale)>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)>"
"<android.util.SparseBooleanArray: void put(int,boolean)>","<android.util.SparseBooleanArray: void put(int,boolean)>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<javax.security.auth.DestroyFailedException: void <init>()>","<javax.security.auth.DestroyFailedException: void <init>()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>"
"<java.io.ObjectInputStream: int read()>","<java.io.ObjectInputStream: int read()>"
"<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.CopyOnWriteArrayList: void sort(java.util.Comparator)>","<java.util.concurrent.CopyOnWriteArrayList: void sort(java.util.Comparator)>"
"<android.view.Window: boolean hasChildren()>","<android.view.Window: boolean hasChildren()>"
"<java.util.Date: boolean before(java.util.Date)>","<java.util.Date: boolean before(java.util.Date)>"
"<org.json.JSONException: void <init>(java.lang.String)>","<org.json.JSONException: void <init>(java.lang.String)>"
"<android.content.res.Configuration: int getLayoutDirection()>","<android.content.res.Configuration: int getLayoutDirection()>"
"<android.view.ViewGroup: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.ViewGroup: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int,int)>","<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int,int)>"
"<org.json.JSONTokener: char nextClean()>","<org.json.JSONTokener: char nextClean()>"
"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>","<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"
"<java.util.stream.LongStream: java.util.OptionalLong findFirst()>","<java.util.stream.LongStream: java.util.OptionalLong findFirst()>"
"<java.util.concurrent.ExecutionException: void <init>(java.lang.String,java.lang.Throwable)>","<java.util.concurrent.ExecutionException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse build()>","<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse build()>"
"<java.lang.Math: long incrementExact(long)>","<java.lang.Math: long incrementExact(long)>"
"<android.view.textservice.TextInfo: java.lang.String getText()>","<android.view.textservice.TextInfo: java.lang.String getText()>"
"<android.app.Activity: boolean isDestroyed()>","<android.app.Activity: boolean isDestroyed()>"
"<java.net.DatagramSocketImpl: java.lang.Object getOption(java.net.SocketOption)>","<java.net.DatagramSocketImpl: java.lang.Object getOption(java.net.SocketOption)>"
"<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getBaseUnit()>","<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getBaseUnit()>"
"<android.icu.util.ULocale: java.lang.String getISO3Language()>","<android.icu.util.ULocale: java.lang.String getISO3Language()>"
"<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator identity()>","<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator identity()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.lang.AssertionError: void <init>(char)>","<java.lang.AssertionError: void <init>(char)>"
"<android.widget.TextView: java.lang.String[] getAutofillHints()>","<android.widget.TextView: java.lang.String[] getAutofillHints()>"
"<java.security.ProtectionDomain: boolean implies(java.security.Permission)>","<java.security.ProtectionDomain: boolean implies(java.security.Permission)>"
"<android.view.View: boolean isKeyboardNavigationCluster()>","<android.view.View: boolean isKeyboardNavigationCluster()>"
"<android.os.Bundle: void <clinit>()>","<android.os.Bundle: void <clinit>()>"
"<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>","<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>"
"<java.nio.ShortBuffer: java.nio.Buffer clear()>","<java.nio.ShortBuffer: java.nio.Buffer clear()>"
"<android.webkit.WebResourceRequest: boolean isForMainFrame()>","<android.webkit.WebResourceRequest: boolean isForMainFrame()>"
"<android.widget.ListView: int getFooterViewsCount()>","<android.widget.ListView: int getFooterViewsCount()>"
"<java.security.BasicPermission: void <init>(java.lang.String)>","<java.security.BasicPermission: void <init>(java.lang.String)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>","<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>"
"<android.view.ActionMode: int getType()>","<android.view.ActionMode: int getType()>"
"<android.view.WindowInsets: boolean isConsumed()>","<android.view.WindowInsets: boolean isConsumed()>"
"<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setCurrency(java.lang.String)>","<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setCurrency(java.lang.String)>"
"<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>","<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>"
"<android.net.Uri: boolean isOpaque()>","<android.net.Uri: boolean isOpaque()>"
"<java.nio.MappedByteBuffer: void <init>()>","<java.nio.MappedByteBuffer: void <init>()>"
"<android.view.InputDevice: boolean[] hasKeys(int[])>","<android.view.InputDevice: boolean[] hasKeys(int[])>"
"<android.graphics.ColorSpace$Rgb: boolean isSrgb()>","<android.graphics.ColorSpace$Rgb: boolean isSrgb()>"
"<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>"
"<android.graphics.Color: float green()>","<android.graphics.Color: float green()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>"
"<android.app.Activity: void runOnUiThread(java.lang.Runnable)>","<android.app.Activity: void runOnUiThread(java.lang.Runnable)>"
"<android.content.pm.PackageInfo: void <clinit>()>","<android.content.pm.PackageInfo: void <clinit>()>"
"<android.hardware.lights.Light: int getId()>","<android.hardware.lights.Light: int getId()>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(long,int,int)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(long,int,int)>"
"<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.lang.Object)>"
"<java.util.AbstractMap: java.lang.Object clone()>","<java.util.AbstractMap: java.lang.Object clone()>"
"<java.lang.reflect.Field: int getInt(java.lang.Object)>","<java.lang.reflect.Field: int getInt(java.lang.Object)>"
"<java.util.Map: void forEach(java.util.function.BiConsumer)>","<java.util.Map: void forEach(java.util.function.BiConsumer)>"
"<io.flutter.plugins.webviewflutter.a3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.a3: void a(java.lang.Object)>"
"<android.content.Intent: void writeToParcel(android.os.Parcel,int)>","<android.content.Intent: void writeToParcel(android.os.Parcel,int)>"
"<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>","<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>"
"<android.view.translation.ViewTranslationResponse$Builder: void <init>(android.view.autofill.AutofillId)>","<android.view.translation.ViewTranslationResponse$Builder: void <init>(android.view.autofill.AutofillId)>"
"<android.hardware.display.DisplayManager: void <init>()>","<android.hardware.display.DisplayManager: void <init>()>"
"<android.graphics.Paint: void setElegantTextHeight(boolean)>","<android.graphics.Paint: void setElegantTextHeight(boolean)>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <init>()>"
"<android.graphics.Path: void lineTo(float,float)>","<android.graphics.Path: void lineTo(float,float)>"
"<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>","<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>"
"<java.util.Locale: boolean equals(java.lang.Object)>","<java.util.Locale: boolean equals(java.lang.Object)>"
"<java.lang.String: int length()>","<java.lang.String: int length()>"
"<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>","<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>"
"<java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object peek()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object peek()>"
"<android.view.Display: android.view.DisplayCutout getCutout()>","<android.view.Display: android.view.DisplayCutout getCutout()>"
"<java.io.InputStream: int available()>","<java.io.InputStream: int available()>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)>"
"<android.content.res.AssetFileDescriptor: long getStartOffset()>","<android.content.res.AssetFileDescriptor: long getStartOffset()>"
"<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>","<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>"
"<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>","<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>"
"<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>","<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>"
"<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>","<java.io.ObjectStreamClass: java.io.ObjectStreamField getField(java.lang.String)>"
"<androidx.activity.ComponentActivity$2: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.activity.ComponentActivity$2: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>","<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>"
"<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>","<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setIntegerPart(long)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setIntegerPart(long)>"
"<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source)>","<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source)>"
"<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)>","<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)>"
"<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>","<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>"
"<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>","<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>"
"<java.lang.ThreadGroup: void list()>","<java.lang.ThreadGroup: void list()>"
"<android.os.VibrationEffect: void <init>()>","<android.os.VibrationEffect: void <init>()>"
"<android.app.Notification$MessagingStyle: boolean isGroupConversation()>","<android.app.Notification$MessagingStyle: boolean isGroupConversation()>"
"<android.widget.PopupWindow: void update(int,int)>","<android.widget.PopupWindow: void update(int,int)>"
"<android.view.View: java.lang.String toString()>","<android.view.View: java.lang.String toString()>"
"<org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)>","<org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)>"
"<android.view.View: void setScrollContainer(boolean)>","<android.view.View: void setScrollContainer(boolean)>"
"<java.util.concurrent.atomic.AtomicLong: long accumulateAndGet(long,java.util.function.LongBinaryOperator)>","<java.util.concurrent.atomic.AtomicLong: long accumulateAndGet(long,java.util.function.LongBinaryOperator)>"
"<android.view.textclassifier.TextClassifier: boolean isDestroyed()>","<android.view.textclassifier.TextClassifier: boolean isDestroyed()>"
"<android.media.session.MediaController$TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)>"
"<android.app.ActionBar: void setLogo(int)>","<android.app.ActionBar: void setLogo(int)>"
"<android.content.Loader: void onStopLoading()>","<android.content.Loader: void onStopLoading()>"
"<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()>","<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()>"
"<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>","<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>"
"<java.util.regex.Matcher: int end(int)>","<java.util.regex.Matcher: int end(int)>"
"<java.lang.Math: double sin(double)>","<java.lang.Math: double sin(double)>"
"<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>","<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>"
"<java.util.function.LongFunction: java.lang.Object apply(long)>","<java.util.function.LongFunction: java.lang.Object apply(long)>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>"
"<java.util.Arrays: boolean equals(short[],int,int,short[],int,int)>","<java.util.Arrays: boolean equals(short[],int,int,short[],int,int)>"
"<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>","<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>"
"<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>","<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>"
"<java.lang.'annotation'.Annotation: boolean equals(java.lang.Object)>","<java.lang.'annotation'.Annotation: boolean equals(java.lang.Object)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>"
"<android.content.ComponentName: int hashCode()>","<android.content.ComponentName: int hashCode()>"
"<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>"
"<java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>","<java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>"
"<java.nio.charset.Charset: int hashCode()>","<java.nio.charset.Charset: int hashCode()>"
"<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>"
"<android.view.View: void setScrollBarFadeDuration(int)>","<android.view.View: void setScrollBarFadeDuration(int)>"
"<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>","<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>"
"<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>","<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getISO3Country()>","<android.icu.util.ULocale: java.lang.String getISO3Country()>"
"<android.text.SpannableString: int nextSpanTransition(int,int,java.lang.Class)>","<android.text.SpannableString: int nextSpanTransition(int,int,java.lang.Class)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()>","<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLockedByCurrentThread()>"
"<android.util.Pair: int hashCode()>","<android.util.Pair: int hashCode()>"
"<android.app.PictureInPictureParams: java.lang.CharSequence getSubtitle()>","<android.app.PictureInPictureParams: java.lang.CharSequence getSubtitle()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>"
"<android.view.WindowInsets: android.graphics.Rect getPrivacyIndicatorBounds()>","<android.view.WindowInsets: android.graphics.Rect getPrivacyIndicatorBounds()>"
"<java.util.SortedSet: java.util.Comparator comparator()>","<java.util.SortedSet: java.util.Comparator comparator()>"
"<androidx.window.layout.d: void <clinit>()>","<androidx.window.layout.d: void <clinit>()>"
"<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence[],java.lang.CharSequence)>","<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence[],java.lang.CharSequence)>"
"<android.view.InputDevice: int getSources()>","<android.view.InputDevice: int getSources()>"
"<java.util.NavigableSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>","<java.util.NavigableSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>"
"<java.lang.VirtualMachineError: void <init>()>","<java.lang.VirtualMachineError: void <init>()>"
"<java.security.Provider: void load(java.io.InputStream)>","<java.security.Provider: void load(java.io.InputStream)>"
"<java.util.Arrays: int mismatch(boolean[],boolean[])>","<java.util.Arrays: int mismatch(boolean[],boolean[])>"
"<java.util.Deque: java.lang.Object removeLast()>","<java.util.Deque: java.lang.Object removeLast()>"
"<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>","<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>"
"<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>","<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>"
"<android.hardware.lights.Light: boolean hasBrightnessControl()>","<android.hardware.lights.Light: boolean hasBrightnessControl()>"
"<android.view.WindowInsetsAnimation: float getFraction()>","<android.view.WindowInsetsAnimation: float getFraction()>"
"<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getSource()>","<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getSource()>"
"<android.widget.Adapter: boolean isEmpty()>","<android.widget.Adapter: boolean isEmpty()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>"
"<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>","<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
"<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy valueOf(java.lang.String)>","<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy valueOf(java.lang.String)>"
"<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>","<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>"
"<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakStyle(int)>","<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakStyle(int)>"
"<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>","<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>"
"<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()>","<java.util.concurrent.atomic.AtomicLong: long getAndDecrement()>"
"<android.content.IntentFilter: int describeContents()>","<android.content.IntentFilter: int describeContents()>"
"<android.widget.TextView: void debug(int)>","<android.widget.TextView: void debug(int)>"
"<android.media.Rating: android.media.Rating newThumbRating(boolean)>","<android.media.Rating: android.media.Rating newThumbRating(boolean)>"
"<java.time.LocalDate: boolean equals(java.lang.Object)>","<java.time.LocalDate: boolean equals(java.lang.Object)>"
"<java.util.Spliterator: java.util.Spliterator trySplit()>","<java.util.Spliterator: java.util.Spliterator trySplit()>"
"<android.text.PrecomputedText$Params: boolean equals(java.lang.Object)>","<android.text.PrecomputedText$Params: boolean equals(java.lang.Object)>"
"<java.net.Socket: void shutdownOutput()>","<java.net.Socket: void shutdownOutput()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()>"
"<android.icu.util.ULocale: java.util.Set getExtensionKeys()>","<android.icu.util.ULocale: java.util.Set getExtensionKeys()>"
"<android.text.Layout: float getLineLeft(int)>","<android.text.Layout: float getLineLeft(int)>"
"<java.lang.Byte: byte byteValue()>","<java.lang.Byte: byte byteValue()>"
"<android.text.style.URLSpan: void <init>(android.os.Parcel)>","<android.text.style.URLSpan: void <init>(android.os.Parcel)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>"
"<java.util.stream.Stream: void forEachOrdered(java.util.function.Consumer)>","<java.util.stream.Stream: void forEachOrdered(java.util.function.Consumer)>"
"<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType[] values()>","<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType[] values()>"
"<java.time.OffsetTime: int hashCode()>","<java.time.OffsetTime: int hashCode()>"
"<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>"
"<java.util.IntSummaryStatistics: long getSum()>","<java.util.IntSummaryStatistics: long getSum()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateEpochDay(long)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateEpochDay(long)>"
"<android.app.Dialog: void onCreate(android.os.Bundle)>","<android.app.Dialog: void onCreate(android.os.Bundle)>"
"<android.content.BroadcastReceiver: boolean getDebugUnregister()>","<android.content.BroadcastReceiver: boolean getDebugUnregister()>"
"<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>"
"<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>","<android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)>"
"<java.nio.ByteBuffer: int getInt()>","<java.nio.ByteBuffer: int getInt()>"
"<android.view.View: android.view.ViewPropertyAnimator animate()>","<android.view.View: android.view.ViewPropertyAnimator animate()>"
"<java.lang.String: java.lang.String[] split(java.lang.String,int)>","<java.lang.String: java.lang.String[] split(java.lang.String,int)>"
"<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>","<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>","<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>"
"<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>","<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>"
"<android.net.Uri: java.lang.String getUserInfo()>","<android.net.Uri: java.lang.String getUserInfo()>"
"<java.time.temporal.ChronoField: java.time.temporal.ChronoField[] values()>","<java.time.temporal.ChronoField: java.time.temporal.ChronoField[] values()>"
"<java.lang.Long: long lowestOneBit(long)>","<java.lang.Long: long lowestOneBit(long)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>"
"<android.graphics.Matrix: boolean preScale(float,float)>","<android.graphics.Matrix: boolean preScale(float,float)>"
"<java.io.PrintStream: void println(boolean)>","<java.io.PrintStream: void println(boolean)>"
"<android.view.View: void setAutofillHints(java.lang.String[])>","<android.view.View: void setAutofillHints(java.lang.String[])>"
"<android.app.Activity: void removeDialog(int)>","<android.app.Activity: void removeDialog(int)>"
"<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>","<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>"
"<android.widget.ListPopupWindow: void postShow()>","<android.widget.ListPopupWindow: void postShow()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)>"
"<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>","<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>"
"<android.content.SyncAdapterType: int describeContents()>","<android.content.SyncAdapterType: int describeContents()>"
"<android.view.SurfaceControl: void finalize()>","<android.view.SurfaceControl: void finalize()>"
"<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>","<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>"
"<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>","<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>"
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<android.graphics.drawable.Drawable: int getIntrinsicWidth()>","<android.graphics.drawable.Drawable: int getIntrinsicWidth()>"
"<java.text.NumberFormat: java.lang.Object clone()>","<java.text.NumberFormat: java.lang.Object clone()>"
"<java.util.concurrent.atomic.AtomicLong: long compareAndExchangeRelease(long,long)>","<java.util.concurrent.atomic.AtomicLong: long compareAndExchangeRelease(long,long)>"
"<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>","<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>"
"<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>","<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>"
"<org.json.JSONArray: int getInt(int)>","<org.json.JSONArray: int getInt(int)>"
"<android.view.autofill.AutofillValue: boolean isList()>","<android.view.autofill.AutofillValue: boolean isList()>"
"<io.flutter.plugins.webviewflutter.j0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.j0: void a(java.lang.Object,y.a$e)>"
"<android.view.inputmethod.TextAttribute: void <init>()>","<android.view.inputmethod.TextAttribute: void <init>()>"
"<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo build()>","<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo build()>"
"<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>","<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>"
"<java.util.HashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.util.HashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>","<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>"
"<android.view.animation.LayoutAnimationController: void setOrder(int)>","<android.view.animation.LayoutAnimationController: void setOrder(int)>"
"<java.time.Instant: java.time.Instant ofEpochSecond(long)>","<java.time.Instant: java.time.Instant ofEpochSecond(long)>"
"<android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener)>","<android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener)>"
"<android.view.textclassifier.TextLinks: java.lang.String toString()>","<android.view.textclassifier.TextLinks: java.lang.String toString()>"
"<java.util.WeakHashMap: java.util.Collection values()>","<java.util.WeakHashMap: java.util.Collection values()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>"
"<android.media.session.MediaController$PlaybackInfo: int getCurrentVolume()>","<android.media.session.MediaController$PlaybackInfo: int getCurrentVolume()>"
"<android.app.Notification$Action$Extender: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder)>","<android.app.Notification$Action$Extender: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder)>"
"<android.widget.AdapterView: int getPositionForView(android.view.View)>","<android.widget.AdapterView: int getPositionForView(android.view.View)>"
"<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>","<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>"
"<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<android.os.Parcel: long readLong()>","<android.os.Parcel: long readLong()>"
"<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>","<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>"
"<java.util.AbstractList: int indexOf(java.lang.Object)>","<java.util.AbstractList: int indexOf(java.lang.Object)>"
"<java.util.regex.Pattern: java.lang.String quote(java.lang.String)>","<java.util.regex.Pattern: java.lang.String quote(java.lang.String)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(java.time.chrono.Era,int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(java.time.chrono.Era,int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>"
"<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>","<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setResultId(java.lang.String)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setResultId(java.lang.String)>"
"<android.window.SplashScreenView: void remove()>","<android.window.SplashScreenView: void remove()>"
"<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>","<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>"
"<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>"
"<android.app.Activity: void closeOptionsMenu()>","<android.app.Activity: void closeOptionsMenu()>"
"<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>","<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>"
"<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()>","<java.text.DateFormat: java.text.DateFormat getDateTimeInstance()>"
"<android.graphics.RecordingCanvas: int getMaximumBitmapWidth()>","<android.graphics.RecordingCanvas: int getMaximumBitmapWidth()>"
"<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>","<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>"
"<java.lang.Character$Subset: java.lang.String toString()>","<java.lang.Character$Subset: java.lang.String toString()>"
"<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)>","<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)>"
"<java.io.File: boolean setWritable(boolean,boolean)>","<java.io.File: boolean setWritable(boolean,boolean)>"
"<java.util.zip.ZipEntry: int hashCode()>","<java.util.zip.ZipEntry: int hashCode()>"
"<android.widget.ListPopupWindow: boolean onKeyPreIme(int,android.view.KeyEvent)>","<android.widget.ListPopupWindow: boolean onKeyPreIme(int,android.view.KeyEvent)>"
"<android.widget.PopupWindow: void <init>(android.view.View,int,int)>","<android.widget.PopupWindow: void <init>(android.view.View,int,int)>"
"<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>","<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusMonths(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusMonths(long)>"
"<android.graphics.Typeface: boolean isItalic()>","<android.graphics.Typeface: boolean isItalic()>"
"<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>","<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>"
"<java.nio.file.attribute.FileAttribute: java.lang.String name()>","<java.nio.file.attribute.FileAttribute: java.lang.String name()>"
"<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>","<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>"
"<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>","<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>"
"<android.graphics.Region: boolean quickReject(int,int,int,int)>","<android.graphics.Region: boolean quickReject(int,int,int,int)>"
"<java.lang.Class: java.lang.Object[] getSigners()>","<java.lang.Class: java.lang.Object[] getSigners()>"
"<android.icu.util.ULocale: java.lang.String getCountry(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getCountry(java.lang.String)>"
"<android.widget.TextView: void setGravity(int)>","<android.widget.TextView: void setGravity(int)>"
"<android.text.Layout: int getEllipsisStart(int)>","<android.text.Layout: int getEllipsisStart(int)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setStatusBarColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setStatusBarColor(int)>"
"<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>","<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>"
"<android.widget.TextView: android.view.ActionMode$Callback getCustomInsertionActionModeCallback()>","<android.widget.TextView: android.view.ActionMode$Callback getCustomInsertionActionModeCallback()>"
"<io.flutter.plugins.webviewflutter.e3: void <init>()>","<io.flutter.plugins.webviewflutter.e3: void <init>()>"
"<android.view.textclassifier.SelectionEvent: int getEventType()>","<android.view.textclassifier.SelectionEvent: int getEventType()>"
"<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>","<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>"
"<android.os.Debug: int getBinderDeathObjectCount()>","<android.os.Debug: int getBinderDeathObjectCount()>"
"<android.app.ActivityManager$RecentTaskInfo: void <init>()>","<android.app.ActivityManager$RecentTaskInfo: void <init>()>"
"<android.app.Person$Builder: android.app.Person$Builder setName(java.lang.CharSequence)>","<android.app.Person$Builder: android.app.Person$Builder setName(java.lang.CharSequence)>"
"<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>","<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>"
"<android.util.SparseArray: int contentHashCode()>","<android.util.SparseArray: int contentHashCode()>"
"<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>","<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>","<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>"
"<java.nio.FloatBuffer: boolean equals(java.lang.Object)>","<java.nio.FloatBuffer: boolean equals(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>"
"<android.widget.ImageView: void setVisibility(int)>","<android.widget.ImageView: void setVisibility(int)>"
"<android.view.View: void setAccessibilityTraversalBefore(int)>","<android.view.View: void setAccessibilityTraversalBefore(int)>"
"<android.view.KeyCharacterMap: char getMatch(int,char[])>","<android.view.KeyCharacterMap: char getMatch(int,char[])>"
"<java.util.stream.Stream: long count()>","<java.util.stream.Stream: long count()>"
"<android.graphics.RenderNode: int getRight()>","<android.graphics.RenderNode: int getRight()>"
"<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>","<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>"
"<android.widget.Toolbar: void onMeasure(int,int)>","<android.widget.Toolbar: void onMeasure(int,int)>"
"<java.util.Optional: int hashCode()>","<java.util.Optional: int hashCode()>"
"<android.widget.ImageView: void drawableHotspotChanged(float,float)>","<android.widget.ImageView: void drawableHotspotChanged(float,float)>"
"<android.content.pm.PackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()>","<android.content.pm.PackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()>"
"<java.util.IdentityHashMap: void clear()>","<java.util.IdentityHashMap: void clear()>"
"<java.nio.LongBuffer: java.nio.Buffer clear()>","<java.nio.LongBuffer: java.nio.Buffer clear()>"
"<android.view.animation.Animation: void setDuration(long)>","<android.view.animation.Animation: void setDuration(long)>"
"<android.webkit.WebView: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>","<android.webkit.WebView: void setSafeBrowsingWhitelist(java.util.List,android.webkit.ValueCallback)>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)>","<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)>"
"<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUri(android.net.Uri)>","<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUri(android.net.Uri)>"
"<java.util.concurrent.atomic.AtomicInteger: void set(int)>","<java.util.concurrent.atomic.AtomicInteger: void set(int)>"
"<android.widget.AdapterView: void dispatchSaveInstanceState(android.util.SparseArray)>","<android.widget.AdapterView: void dispatchSaveInstanceState(android.util.SparseArray)>"
"<android.content.res.Resources: java.lang.String getQuantityString(int,int)>","<android.content.res.Resources: java.lang.String getQuantityString(int,int)>"
"<java.lang.StringBuilder: int codePointBefore(int)>","<java.lang.StringBuilder: int codePointBefore(int)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setExcludedTypes(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setExcludedTypes(java.util.Collection)>"
"<android.widget.AbsListView$SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)>","<android.widget.AbsListView$SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
"<java.time.DayOfWeek: void <clinit>()>","<java.time.DayOfWeek: void <clinit>()>"
"<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)>","<android.view.TextureView: void setSurfaceTexture(android.graphics.SurfaceTexture)>"
"<io.flutter.plugins.webviewflutter.m3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.m3: void a(java.lang.Object)>"
"<android.view.WindowManager$LayoutParams: void setColorMode(int)>","<android.view.WindowManager$LayoutParams: void setColorMode(int)>"
"<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>","<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>"
"<android.graphics.RecordingCanvas: boolean isHardwareAccelerated()>","<android.graphics.RecordingCanvas: boolean isHardwareAccelerated()>"
"<android.view.inputmethod.BaseInputConnection: boolean reportFullscreenMode(boolean)>","<android.view.inputmethod.BaseInputConnection: boolean reportFullscreenMode(boolean)>"
"<android.content.res.Configuration: boolean needNewResources(int,int)>","<android.content.res.Configuration: boolean needNewResources(int,int)>"
"<java.io.Writer: java.io.Writer nullWriter()>","<java.io.Writer: java.io.Writer nullWriter()>"
"<java.nio.ByteBuffer: byte get()>","<java.nio.ByteBuffer: byte get()>"
"<android.app.VoiceInteractor$ConfirmationRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>","<android.app.VoiceInteractor$ConfirmationRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
"<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>","<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>"
"<android.view.View: android.view.autofill.AutofillId getAutofillId()>","<android.view.View: android.view.autofill.AutofillId getAutofillId()>"
"<java.util.AbstractMap: int hashCode()>","<java.util.AbstractMap: int hashCode()>"
"<java.security.Timestamp: java.lang.String toString()>","<java.security.Timestamp: java.lang.String toString()>"
"<android.widget.ListView: void onDetachedFromWindow()>","<android.widget.ListView: void onDetachedFromWindow()>"
"<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>","<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextSelection)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextSelection)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.LocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<java.util.Arrays: void parallelSort(int[],int,int)>","<java.util.Arrays: void parallelSort(int[],int,int)>"
"<android.graphics.Outline: boolean getRect(android.graphics.Rect)>","<android.graphics.Outline: boolean getRect(android.graphics.Rect)>"
"<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>","<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>"
"<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.text.style.TtsSpan$DateBuilder: void <init>()>","<android.text.style.TtsSpan$DateBuilder: void <init>()>"
"<java.net.URI: java.net.URI resolve(java.lang.String)>","<java.net.URI: java.net.URI resolve(java.lang.String)>"
"<io.flutter.embedding.android.o: void <init>(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,long,android.view.KeyEvent)>","<io.flutter.embedding.android.o: void <init>(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,long,android.view.KeyEvent)>"
"<java.util.Locale: java.lang.String[] getISOCountries()>","<java.util.Locale: java.lang.String[] getISOCountries()>"
"<java.util.Hashtable: void <init>(int)>","<java.util.Hashtable: void <init>(int)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>"
"<android.content.ContentResolver: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)>","<android.content.ContentResolver: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)>"
"<java.net.DatagramSocketImpl: void close()>","<java.net.DatagramSocketImpl: void close()>"
"<java.util.Calendar: java.util.Calendar getInstance()>","<java.util.Calendar: java.util.Calendar getInstance()>"
"<io.flutter.plugins.webviewflutter.j1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.j1: void a(java.lang.Object,y.a$e)>"
"<java.util.stream.LongStream$Builder: void accept(long)>","<java.util.stream.LongStream$Builder: void accept(long)>"
"<android.transition.Transition: java.util.List getTargets()>","<android.transition.Transition: java.util.List getTargets()>"
"<android.view.ViewStructure: android.os.Bundle getExtras()>","<android.view.ViewStructure: android.os.Bundle getExtras()>"
"<android.content.ContentProvider: java.lang.String getCallingPackage()>","<android.content.ContentProvider: java.lang.String getCallingPackage()>"
"<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>","<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>"
"<android.view.inputmethod.InputConnection: java.lang.CharSequence getSelectedText(int)>","<android.view.inputmethod.InputConnection: java.lang.CharSequence getSelectedText(int)>"
"<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)>"
"<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)>"
"<android.view.textclassifier.TextLinks$TextLink: void <clinit>()>","<android.view.textclassifier.TextLinks$TextLink: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.j2: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.j2: void a(java.lang.Object)>"
"<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>","<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Set: java.util.Set copyOf(java.util.Collection)>","<java.util.Set: java.util.Set copyOf(java.util.Collection)>"
"<java.util.PriorityQueue: void <init>(java.util.PriorityQueue)>","<java.util.PriorityQueue: void <init>(java.util.PriorityQueue)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()>"
"<android.util.AttributeSet: int getAttributeIntValue(int,int)>","<android.util.AttributeSet: int getAttributeIntValue(int,int)>"
"<android.util.SparseBooleanArray: boolean get(int)>","<android.util.SparseBooleanArray: boolean get(int)>"
"<java.lang.SecurityException: void <init>(java.lang.String)>","<java.lang.SecurityException: void <init>(java.lang.String)>"
"<java.util.Arrays: float[] copyOf(float[],int)>","<java.util.Arrays: float[] copyOf(float[],int)>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()>","<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()>"
"<android.widget.TextView: void setError(java.lang.CharSequence)>","<android.widget.TextView: void setError(java.lang.CharSequence)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEntityTypes(java.lang.String[])>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEntityTypes(java.lang.String[])>"
"<android.content.res.ColorStateList: boolean isStateful()>","<android.content.res.ColorStateList: boolean isStateful()>"
"<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>","<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>"
"<android.hardware.HardwareBuffer: void finalize()>","<android.hardware.HardwareBuffer: void finalize()>"
"<io.flutter.plugins.webviewflutter.q: void <init>(io.flutter.plugins.webviewflutter.k$f)>","<io.flutter.plugins.webviewflutter.q: void <init>(io.flutter.plugins.webviewflutter.k$f)>"
"<android.view.WindowId: boolean equals(java.lang.Object)>","<android.view.WindowId: boolean equals(java.lang.Object)>"
"<android.content.ContextWrapper: java.lang.String getAttributionTag()>","<android.content.ContextWrapper: java.lang.String getAttributionTag()>"
"<java.nio.channels.spi.AbstractSelector: void begin()>","<java.nio.channels.spi.AbstractSelector: void begin()>"
"<android.app.RemoteInput: android.os.Bundle getExtras()>","<android.app.RemoteInput: android.os.Bundle getExtras()>"
"<java.io.DataInput: int readUnsignedByte()>","<java.io.DataInput: int readUnsignedByte()>"
"<java.lang.reflect.Executable: boolean isVarArgs()>","<java.lang.reflect.Executable: boolean isVarArgs()>"
"<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.SyncAdapterType: boolean isUserVisible()>","<android.content.SyncAdapterType: boolean isUserVisible()>"
"<java.lang.Float: double doubleValue()>","<java.lang.Float: double doubleValue()>"
"<org.xmlpull.v1.XmlSerializer: void flush()>","<org.xmlpull.v1.XmlSerializer: void flush()>"
"<android.icu.util.ULocale$AvailableType: void <init>(java.lang.String,int)>","<android.icu.util.ULocale$AvailableType: void <init>(java.lang.String,int)>"
"<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>","<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,android.icu.util.ULocale)>"
"<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>","<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage build()>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage build()>"
"<java.time.LocalTime: int get(java.time.temporal.TemporalField)>","<java.time.LocalTime: int get(java.time.temporal.TemporalField)>"
"<java.math.RoundingMode: java.math.RoundingMode valueOf(int)>","<java.math.RoundingMode: java.math.RoundingMode valueOf(int)>"
"<android.graphics.Bitmap: void setPremultiplied(boolean)>","<android.graphics.Bitmap: void setPremultiplied(boolean)>"
"<java.lang.String: java.lang.String valueOf(char)>","<java.lang.String: java.lang.String valueOf(char)>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setLabel(java.lang.CharSequence)>","<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setLabel(java.lang.CharSequence)>"
"<android.webkit.WebView: boolean isPrivateBrowsingEnabled()>","<android.webkit.WebView: boolean isPrivateBrowsingEnabled()>"
"<java.io.ObjectInputStream$GetField: boolean defaulted(java.lang.String)>","<java.io.ObjectInputStream$GetField: boolean defaulted(java.lang.String)>"
"<android.text.style.LocaleSpan: void writeToParcel(android.os.Parcel,int)>","<android.text.style.LocaleSpan: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.graphics.RecordingCanvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>"
"<android.view.accessibility.AccessibilityWindowInfo: int getType()>","<android.view.accessibility.AccessibilityWindowInfo: int getType()>"
"<java.time.chrono.ChronoLocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.chrono.ChronoLocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>","<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>","<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>"
"<android.media.session.MediaController$PlaybackInfo: int getVolumeControl()>","<android.media.session.MediaController$PlaybackInfo: int getVolumeControl()>"
"<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>"
"<android.widget.AbsListView: void onCancelPendingInputEvents()>","<android.widget.AbsListView: void onCancelPendingInputEvents()>"
"<java.time.Month: java.time.Month firstMonthOfQuarter()>","<java.time.Month: java.time.Month firstMonthOfQuarter()>"
"<java.time.Duration: java.time.Duration plusMinutes(long)>","<java.time.Duration: java.time.Duration plusMinutes(long)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>"
"<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>","<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.lang.Runnable,java.lang.Object)>"
"<android.icu.util.ULocale: java.lang.String getDisplayName(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayName(android.icu.util.ULocale)>"
"<android.view.Display: android.view.Display$Mode[] getSupportedModes()>","<android.view.Display: android.view.Display$Mode[] getSupportedModes()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<android.view.Display: int getFlags()>","<android.view.Display: int getFlags()>"
"<android.view.KeyEvent: int getModifiers()>","<android.view.KeyEvent: int getModifiers()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray()>"
"<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>","<android.text.SpannableStringBuilder: void removeSpan(java.lang.Object)>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setExtras(android.os.Bundle)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setExtras(android.os.Bundle)>"
"<android.view.ContentInfo: android.content.ClipData getClip()>","<android.view.ContentInfo: android.content.ClipData getClip()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>"
"<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>","<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>"
"<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>","<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>"
"<java.lang.Package: java.lang.String toString()>","<java.lang.Package: java.lang.String toString()>"
"<java.util.Optional: void <init>()>","<java.util.Optional: void <init>()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams build()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams build()>"
"<java.lang.reflect.Array: short getShort(java.lang.Object,int)>","<java.lang.reflect.Array: short getShort(java.lang.Object,int)>"
"<android.media.Image: int getHeight()>","<android.media.Image: int getHeight()>"
"<java.lang.Character: boolean isTitleCase(int)>","<java.lang.Character: boolean isTitleCase(int)>"
"<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>"
"<io.flutter.plugins.webviewflutter.o: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.o: void a(java.lang.Object)>"
"<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>","<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>"
"<android.webkit.WebView$FindListener: void onFindResultReceived(int,int,boolean)>","<android.webkit.WebView$FindListener: void onFindResultReceived(int,int,boolean)>"
"<android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)>","<android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener: void onAccessibilityServicesStateChanged(android.view.accessibility.AccessibilityManager)>"
"<java.util.regex.Matcher: int end()>","<java.util.regex.Matcher: int end()>"
"<java.lang.reflect.Method: java.lang.Object getDefaultValue()>","<java.lang.reflect.Method: java.lang.Object getDefaultValue()>"
"<android.view.MotionEvent: void setEdgeFlags(int)>","<android.view.MotionEvent: void setEdgeFlags(int)>"
"<android.app.AppComponentFactory: void <init>()>","<android.app.AppComponentFactory: void <init>()>"
"<java.lang.SecurityManager: void checkPropertiesAccess()>","<java.lang.SecurityManager: void checkPropertiesAccess()>"
"<android.view.View: void buildDrawingCache()>","<android.view.View: void buildDrawingCache()>"
"<java.time.format.TextStyle: java.time.format.TextStyle asStandalone()>","<java.time.format.TextStyle: java.time.format.TextStyle asStandalone()>"
"<android.app.ActionBar: void setIcon(int)>","<android.app.ActionBar: void setIcon(int)>"
"<android.webkit.WebView: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>","<android.webkit.WebView: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>"
"<android.net.http.SslCertificate: java.lang.String toString()>","<android.net.http.SslCertificate: java.lang.String toString()>"
"<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>","<android.view.textservice.SentenceSuggestionsInfo: android.view.textservice.SuggestionsInfo getSuggestionsInfoAt(int)>"
"<java.util.stream.DoubleStream: java.util.PrimitiveIterator$OfDouble iterator()>","<java.util.stream.DoubleStream: java.util.PrimitiveIterator$OfDouble iterator()>"
"<android.content.AttributionSource: boolean isTrusted(android.content.Context)>","<android.content.AttributionSource: boolean isTrusted(android.content.Context)>"
"<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>","<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])>"
"<java.nio.FloatBuffer: float[] array()>","<java.nio.FloatBuffer: float[] array()>"
"<android.widget.TextView: int getCompoundPaddingRight()>","<android.widget.TextView: int getCompoundPaddingRight()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<java.util.stream.IntStream: int[] toArray()>","<java.util.stream.IntStream: int[] toArray()>"
"<android.os.Debug: void resetGlobalFreedCount()>","<android.os.Debug: void resetGlobalFreedCount()>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: void <init>(int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>","<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>"
"<android.widget.AbsListView: boolean showContextMenu(float,float)>","<android.widget.AbsListView: boolean showContextMenu(float,float)>"
"<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>","<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>"
"<android.view.WindowInsetsAnimation: int getTypeMask()>","<android.view.WindowInsetsAnimation: int getTypeMask()>"
"<android.widget.TextView: void setMaxLines(int)>","<android.widget.TextView: void setMaxLines(int)>"
"<androidx.window.layout.c: void accept(java.lang.Object)>","<androidx.window.layout.c: void accept(java.lang.Object)>"
"<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>","<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>"
"<java.lang.NoSuchFieldError: void <init>(java.lang.String)>","<java.lang.NoSuchFieldError: void <init>(java.lang.String)>"
"<android.os.Message: void setTarget(android.os.Handler)>","<android.os.Message: void setTarget(android.os.Handler)>"
"<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>","<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>"
"<android.view.contentcapture.ContentCaptureSessionId: int hashCode()>","<android.view.contentcapture.ContentCaptureSessionId: int hashCode()>"
"<java.util.Date: void setMonth(int)>","<java.util.Date: void setMonth(int)>"
"<java.nio.file.Path: java.nio.file.Path getFileName()>","<java.nio.file.Path: java.nio.file.Path getFileName()>"
"<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>","<android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>"
"<java.io.ObjectStreamClass: java.lang.Class forClass()>","<java.io.ObjectStreamClass: java.lang.Class forClass()>"
"<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>"
"<android.media.session.PlaybackState$CustomAction: java.lang.String toString()>","<android.media.session.PlaybackState$CustomAction: java.lang.String toString()>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void <init>(android.view.SurfaceControlViewHost$SurfacePackage)>","<android.view.SurfaceControlViewHost$SurfacePackage: void <init>(android.view.SurfaceControlViewHost$SurfacePackage)>"
"<android.content.Context: void updateServiceGroup(android.content.ServiceConnection,int,int)>","<android.content.Context: void updateServiceGroup(android.content.ServiceConnection,int,int)>"
"<java.lang.'annotation'.Target: java.lang.'annotation'.ElementType[] value()>","<java.lang.'annotation'.Target: java.lang.'annotation'.ElementType[] value()>"
"<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>","<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>"
"<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<java.util.PrimitiveIterator$OfLong: long nextLong()>","<java.util.PrimitiveIterator$OfLong: long nextLong()>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<java.net.InetAddress: boolean isMulticastAddress()>","<java.net.InetAddress: boolean isMulticastAddress()>"
"<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,int)>","<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,int)>"
"<android.view.animation.Animation: float resolveSize(int,float,int,int)>","<android.view.animation.Animation: float resolveSize(int,float,int,int)>"
"<android.app.Activity: android.view.Window getWindow()>","<android.app.Activity: android.view.Window getWindow()>"
"<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>","<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>"
"<java.lang.Math: double toDegrees(double)>","<java.lang.Math: double toDegrees(double)>"
"<java.time.Period: int getMonths()>","<java.time.Period: int getMonths()>"
"<android.view.ViewStructure$HtmlInfo: java.lang.String getTag()>","<android.view.ViewStructure$HtmlInfo: java.lang.String getTag()>"
"<java.lang.StringBuffer: int codePointCount(int,int)>","<java.lang.StringBuffer: int codePointCount(int,int)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: void <init>()>","<android.view.textclassifier.TextClassifierEvent$Builder: void <init>()>"
"<java.util.regex.Matcher: boolean hasAnchoringBounds()>","<java.util.regex.Matcher: boolean hasAnchoringBounds()>"
"<java.security.cert.X509Certificate: int getVersion()>","<java.security.cert.X509Certificate: int getVersion()>"
"<java.time.OffsetDateTime: void <init>()>","<java.time.OffsetDateTime: void <init>()>"
"<android.view.View: int getNextClusterForwardId()>","<android.view.View: int getNextClusterForwardId()>"
"<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>","<android.webkit.WebView: void loadUrl(java.lang.String,java.util.Map)>"
"<java.io.Writer: void <init>(java.lang.Object)>","<java.io.Writer: void <init>(java.lang.Object)>"
"<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(java.util.concurrent.Executor,android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>","<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(java.util.concurrent.Executor,android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>","<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>"
"<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)>","<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)>"
"<android.webkit.WebView: void setFindListener(android.webkit.WebView$FindListener)>","<android.webkit.WebView: void setFindListener(android.webkit.WebView$FindListener)>"
"<android.view.View: void setSoundEffectsEnabled(boolean)>","<android.view.View: void setSoundEffectsEnabled(boolean)>"
"<android.content.res.Configuration: void setLocale(java.util.Locale)>","<android.content.res.Configuration: void setLocale(java.util.Locale)>"
"<android.view.ViewGroup: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>","<android.view.ViewGroup: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>"
"<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>","<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>"
"<java.util.jar.Manifest: void <init>(java.util.jar.Manifest)>","<java.util.jar.Manifest: void <init>(java.util.jar.Manifest)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.OffsetDateTime: java.time.OffsetDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.util.Arrays: int compareUnsigned(int[],int[])>","<java.util.Arrays: int compareUnsigned(int[],int[])>"
"<io.flutter.plugins.webviewflutter.a2: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.a2: void a(java.lang.Object,y.a$e)>"
"<java.time.chrono.ChronoZonedDateTime: int get(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: int get(java.time.temporal.TemporalField)>"
"<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>","<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>"
"<android.view.View: boolean performContextClick(float,float)>","<android.view.View: boolean performContextClick(float,float)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object set(int,java.lang.Object)>"
"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[],java.util.Comparator)>"
"<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>","<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>"
"<android.content.SyncAdapterType: boolean supportsUploading()>","<android.content.SyncAdapterType: boolean supportsUploading()>"
"<io.flutter.plugins.webviewflutter.t1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.t1: void a(java.lang.Object,y.a$e)>"
"<android.webkit.WebSettings: boolean getAllowUniversalAccessFromFileURLs()>","<android.webkit.WebSettings: boolean getAllowUniversalAccessFromFileURLs()>"
"<android.content.ComponentName: boolean equals(java.lang.Object)>","<android.content.ComponentName: boolean equals(java.lang.Object)>"
"<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newVirtualViewStructure(android.view.autofill.AutofillId,long)>","<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newVirtualViewStructure(android.view.autofill.AutofillId,long)>"
"<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)>","<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)>"
"<android.view.accessibility.AccessibilityManager: boolean isAccessibilityButtonSupported()>","<android.view.accessibility.AccessibilityManager: boolean isAccessibilityButtonSupported()>"
"<java.time.chrono.ChronoPeriod: java.util.List getUnits()>","<java.time.chrono.ChronoPeriod: java.util.List getUnits()>"
"<android.content.ContentProviderResult: void <init>(java.lang.Throwable)>","<android.content.ContentProviderResult: void <init>(java.lang.Throwable)>"
"<android.util.AndroidRuntimeException: void <init>()>","<android.util.AndroidRuntimeException: void <init>()>"
"<java.util.concurrent.atomic.AtomicInteger: void setPlain(int)>","<java.util.concurrent.atomic.AtomicInteger: void setPlain(int)>"
"<android.graphics.Rect: void <init>(android.graphics.Rect)>","<android.graphics.Rect: void <init>(android.graphics.Rect)>"
"<java.time.chrono.ChronoPeriod: int hashCode()>","<java.time.chrono.ChronoPeriod: int hashCode()>"
"<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>","<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>"
"<android.app.Activity: void onCreate(android.os.Bundle)>","<android.app.Activity: void onCreate(android.os.Bundle)>"
"<android.os.Debug: long getNativeHeapFreeSize()>","<android.os.Debug: long getNativeHeapFreeSize()>"
"<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>","<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>"
"<android.widget.TextView: java.lang.CharSequence getError()>","<android.widget.TextView: java.lang.CharSequence getError()>"
"<android.view.translation.TranslationCapability: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.TranslationCapability: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void onStartTemporaryDetach()>","<android.view.View: void onStartTemporaryDetach()>"
"<android.view.View: void invalidate(android.graphics.Rect)>","<android.view.View: void invalidate(android.graphics.Rect)>"
"<java.util.Optional: java.util.Optional or(java.util.function.Supplier)>","<java.util.Optional: java.util.Optional or(java.util.function.Supplier)>"
"<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>","<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>"
"<org.json.JSONObject: java.lang.String toString(int)>","<org.json.JSONObject: java.lang.String toString(int)>"
"<android.graphics.drawable.ColorDrawable: boolean hasFocusStateSpecified()>","<android.graphics.drawable.ColorDrawable: boolean hasFocusStateSpecified()>"
"<java.io.DataOutput: void writeDouble(double)>","<java.io.DataOutput: void writeDouble(double)>"
"<android.webkit.ClientCertRequest: void <init>()>","<android.webkit.ClientCertRequest: void <init>()>"
"<java.util.stream.LongStream: java.util.stream.LongStream peek(java.util.function.LongConsumer)>","<java.util.stream.LongStream: java.util.stream.LongStream peek(java.util.function.LongConsumer)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>"
"<java.util.stream.IntStream: void forEachOrdered(java.util.function.IntConsumer)>","<java.util.stream.IntStream: void forEachOrdered(java.util.function.IntConsumer)>"
"<org.json.JSONArray: org.json.JSONArray put(int,int)>","<org.json.JSONArray: org.json.JSONArray put(int,int)>"
"<android.view.KeyEvent: boolean isModifierKey(int)>","<android.view.KeyEvent: boolean isModifierKey(int)>"
"<io.flutter.plugins.webviewflutter.f: void <init>()>","<io.flutter.plugins.webviewflutter.f: void <init>()>"
"<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>","<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureEnd(java.lang.Runnable)>","<android.view.ScrollCaptureCallback: void onScrollCaptureEnd(java.lang.Runnable)>"
"<android.media.ImageReader: int getMaxImages()>","<android.media.ImageReader: int getMaxImages()>"
"<java.util.concurrent.TimeUnit: long convert(java.time.Duration)>","<java.util.concurrent.TimeUnit: long convert(java.time.Duration)>"
"<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>","<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>"
"<android.graphics.Matrix: boolean preTranslate(float,float)>","<android.graphics.Matrix: boolean preTranslate(float,float)>"
"<java.lang.Short: java.lang.Short valueOf(java.lang.String)>","<java.lang.Short: java.lang.Short valueOf(java.lang.String)>"
"<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>","<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>"
"<android.widget.TextView: int getTotalPaddingRight()>","<android.widget.TextView: int getTotalPaddingRight()>"
"<android.content.res.TypedArray: int getColor(int,int)>","<android.content.res.TypedArray: int getColor(int,int)>"
"<android.view.ViewConfiguration: int getScaledHoverSlop()>","<android.view.ViewConfiguration: int getScaledHoverSlop()>"
"<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>","<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>"
"<android.widget.Adapter: int getViewTypeCount()>","<android.widget.Adapter: int getViewTypeCount()>"
"<android.graphics.Color: int argb(float,float,float,float)>","<android.graphics.Color: int argb(float,float,float,float)>"
"<java.util.OptionalDouble: double orElse(double)>","<java.util.OptionalDouble: double orElse(double)>"
"<android.view.autofill.AutofillId: int describeContents()>","<android.view.autofill.AutofillId: int describeContents()>"
"<android.view.inputmethod.InputContentInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.InputContentInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>","<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>"
"<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)>","<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)>"
"<android.app.PendingIntent: int hashCode()>","<android.app.PendingIntent: int hashCode()>"
"<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>","<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>"
"<android.print.PrintAttributes: void <init>()>","<android.print.PrintAttributes: void <init>()>"
"<android.app.assist.AssistContent: android.os.Bundle getExtras()>","<android.app.assist.AssistContent: android.os.Bundle getExtras()>"
"<android.graphics.RectF: void union(float,float)>","<android.graphics.RectF: void union(float,float)>"
"<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>","<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>"
"<android.graphics.Path$FillType: void <clinit>()>","<android.graphics.Path$FillType: void <clinit>()>"
"<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>","<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.LocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.util.Size: boolean equals(java.lang.Object)>","<android.util.Size: boolean equals(java.lang.Object)>"
"<android.graphics.Paint: int getColor()>","<android.graphics.Paint: int getColor()>"
"<android.app.Activity: android.content.ComponentName getComponentName()>","<android.app.Activity: android.content.ComponentName getComponentName()>"
"<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>","<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>"
"<android.os.Parcel: void writeCharArray(char[])>","<android.os.Parcel: void writeCharArray(char[])>"
"<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>","<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>"
"<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>","<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>"
"<java.time.Clock: java.time.Clock tickSeconds(java.time.ZoneId)>","<java.time.Clock: java.time.Clock tickSeconds(java.time.ZoneId)>"
"<java.security.cert.CertificateParsingException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.cert.CertificateParsingException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.ViewTreeObserver: void <init>()>","<android.view.ViewTreeObserver: void <init>()>"
"<java.io.File: boolean equals(java.lang.Object)>","<java.io.File: boolean equals(java.lang.Object)>"
"<java.time.Instant: java.time.Instant parse(java.lang.CharSequence)>","<java.time.Instant: java.time.Instant parse(java.lang.CharSequence)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
"<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.RunnableScheduledFuture decorateTask(java.lang.Runnable,java.util.concurrent.RunnableScheduledFuture)>"
"<android.media.MediaMetadata: void <init>()>","<android.media.MediaMetadata: void <init>()>"
"<android.content.res.Configuration: android.content.res.Configuration generateDelta(android.content.res.Configuration,android.content.res.Configuration)>","<android.content.res.Configuration: android.content.res.Configuration generateDelta(android.content.res.Configuration,android.content.res.Configuration)>"
"<android.graphics.Paint: android.graphics.BlendMode getBlendMode()>","<android.graphics.Paint: android.graphics.BlendMode getBlendMode()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)>"
"<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>","<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setExtras(android.os.Bundle)>"
"<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>","<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>"
"<android.widget.RemoteViews: void showPrevious(int)>","<android.widget.RemoteViews: void showPrevious(int)>"
"<android.widget.TextView: void cancelLongPress()>","<android.widget.TextView: void cancelLongPress()>"
"<android.content.res.ColorStateList: boolean isOpaque()>","<android.content.res.ColorStateList: boolean isOpaque()>"
"<android.database.Cursor: java.util.List getNotificationUris()>","<android.database.Cursor: java.util.List getNotificationUris()>"
"<android.view.View: void saveHierarchyState(android.util.SparseArray)>","<android.view.View: void saveHierarchyState(android.util.SparseArray)>"
"<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)>","<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)>"
"<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>","<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>"
"<android.graphics.drawable.ColorDrawable: boolean canApplyTheme()>","<android.graphics.drawable.ColorDrawable: boolean canApplyTheme()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<javax.security.auth.Subject: java.util.Set getPublicCredentials()>","<javax.security.auth.Subject: java.util.Set getPublicCredentials()>"
"<android.media.session.PlaybackState: int describeContents()>","<android.media.session.PlaybackState: int describeContents()>"
"<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>","<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>"
"<java.time.chrono.ChronoZonedDateTime: int compareTo(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: int compareTo(java.time.chrono.ChronoZonedDateTime)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clearPages()>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender clearPages()>"
"<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>","<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>","<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>"
"<java.time.chrono.Chronology: boolean equals(java.lang.Object)>","<java.time.chrono.Chronology: boolean equals(java.lang.Object)>"
"<android.graphics.RenderNode: long computeApproximateMemoryUsage()>","<android.graphics.RenderNode: long computeApproximateMemoryUsage()>"
"<android.view.RoundedCorner: int describeContents()>","<android.view.RoundedCorner: int describeContents()>"
"<java.nio.file.attribute.FileTime: void <init>()>","<java.nio.file.attribute.FileTime: void <init>()>"
"<android.widget.ListPopupWindow: void setModal(boolean)>","<android.widget.ListPopupWindow: void setModal(boolean)>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,java.lang.String)>"
"<android.view.KeyEvent: char getNumber()>","<android.view.KeyEvent: char getNumber()>"
"<java.util.stream.Stream: java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction)>","<java.util.stream.Stream: java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction)>"
"<android.view.View: boolean hasOnLongClickListeners()>","<android.view.View: boolean hasOnLongClickListeners()>"
"<java.util.OptionalDouble: boolean isEmpty()>","<java.util.OptionalDouble: boolean isEmpty()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotCount()>","<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotCount()>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean getAcquire()>","<java.util.concurrent.atomic.AtomicBoolean: boolean getAcquire()>"
"<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>","<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>"
"<java.time.Instant: java.time.Instant minusSeconds(long)>","<java.time.Instant: java.time.Instant minusSeconds(long)>"
"<android.content.res.ColorStateList: void <clinit>()>","<android.content.res.ColorStateList: void <clinit>()>"
"<java.time.Duration: java.time.Duration 'from'(java.time.temporal.TemporalAmount)>","<java.time.Duration: java.time.Duration 'from'(java.time.temporal.TemporalAmount)>"
"<java.security.PrivilegedActionException: java.lang.Throwable getCause()>","<java.security.PrivilegedActionException: java.lang.Throwable getCause()>"
"<java.net.Proxy: java.lang.String toString()>","<java.net.Proxy: java.lang.String toString()>"
"<android.webkit.WebSettings: void setForceDark(int)>","<android.webkit.WebSettings: void setForceDark(int)>"
"<android.os.Debug: int getGlobalGcInvocationCount()>","<android.os.Debug: int getGlobalGcInvocationCount()>"
"<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusMonths(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusMonths(long)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>"
"<java.nio.charset.CharsetEncoder: void implReset()>","<java.nio.charset.CharsetEncoder: void implReset()>"
"<java.util.stream.IntStream: java.util.stream.IntStream of(int[])>","<java.util.stream.IntStream: java.util.stream.IntStream of(int[])>"
"<java.io.File: java.lang.String[] list()>","<java.io.File: java.lang.String[] list()>"
"<android.view.Window: boolean isWideColorGamut()>","<android.view.Window: boolean isWideColorGamut()>"
"<java.lang.Thread: void sleep(long)>","<java.lang.Thread: void sleep(long)>"
"<android.graphics.Paint: void setSubpixelText(boolean)>","<android.graphics.Paint: void setSubpixelText(boolean)>"
"<android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)>","<android.view.accessibility.AccessibilityManager: int getRecommendedTimeoutMillis(int,int)>"
"<android.view.View: void setOverScrollMode(int)>","<android.view.View: void setOverScrollMode(int)>"
"<java.net.ServerSocket: java.net.Socket accept()>","<java.net.ServerSocket: java.net.Socket accept()>"
"<java.time.chrono.ChronoLocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>"
"<android.view.SurfaceView: void setAlpha(float)>","<android.view.SurfaceView: void setAlpha(float)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setCustomContentHeight(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setCustomContentHeight(int)>"
"<java.util.Deque: boolean offerFirst(java.lang.Object)>","<java.util.Deque: boolean offerFirst(java.lang.Object)>"
"<java.util.NavigableSet: java.util.SortedSet headSet(java.lang.Object)>","<java.util.NavigableSet: java.util.SortedSet headSet(java.lang.Object)>"
"<android.graphics.Path: void transform(android.graphics.Matrix)>","<android.graphics.Path: void transform(android.graphics.Matrix)>"
"<android.os.Debug: int getGlobalExternalFreedSize()>","<android.os.Debug: int getGlobalExternalFreedSize()>"
"<java.security.Key: java.lang.String getAlgorithm()>","<java.security.Key: java.lang.String getAlgorithm()>"
"<android.widget.TextView: void setShowSoftInputOnFocus(boolean)>","<android.widget.TextView: void setShowSoftInputOnFocus(boolean)>"
"<android.util.AttributeSet: java.lang.String getClassAttribute()>","<android.util.AttributeSet: java.lang.String getClassAttribute()>"
"<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>","<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>"
"<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>","<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>"
"<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>","<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>"
"<android.view.MenuItem: android.view.ActionProvider getActionProvider()>","<android.view.MenuItem: android.view.ActionProvider getActionProvider()>"
"<android.widget.TextView$SavedState: java.lang.String toString()>","<android.widget.TextView$SavedState: java.lang.String toString()>"
"<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.io.PrintWriter: void <init>(java.io.File,java.nio.charset.Charset)>","<java.io.PrintWriter: void <init>(java.io.File,java.nio.charset.Charset)>"
"<java.util.regex.Matcher: java.lang.String group(int)>","<java.util.regex.Matcher: java.lang.String group(int)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>","<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>"
"<android.view.textclassifier.SelectionEvent: long getEventTime()>","<android.view.textclassifier.SelectionEvent: long getEventTime()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.Window: void registerScrollCaptureCallback(android.view.ScrollCaptureCallback)>","<android.view.Window: void registerScrollCaptureCallback(android.view.ScrollCaptureCallback)>"
"<android.view.View: java.lang.String getTransitionName()>","<android.view.View: java.lang.String getTransitionName()>"
"<java.time.temporal.ValueRange: long getSmallestMaximum()>","<java.time.temporal.ValueRange: long getSmallestMaximum()>"
"<android.os.Bundle: void putByte(java.lang.String,byte)>","<android.os.Bundle: void putByte(java.lang.String,byte)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>"
"<java.io.ObjectOutputStream: void writeBytes(java.lang.String)>","<java.io.ObjectOutputStream: void writeBytes(java.lang.String)>"
"<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>","<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>"
"<android.widget.Scroller: void forceFinished(boolean)>","<android.widget.Scroller: void forceFinished(boolean)>"
"<java.lang.String: int hashCode()>","<java.lang.String: int hashCode()>"
"<java.util.function.Consumer: java.util.function.Consumer andThen(java.util.function.Consumer)>","<java.util.function.Consumer: java.util.function.Consumer andThen(java.util.function.Consumer)>"
"<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>"
"<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>","<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>"
"<android.widget.AbsListView$RecyclerListener: void onMovedToScrapHeap(android.view.View)>","<android.widget.AbsListView$RecyclerListener: void onMovedToScrapHeap(android.view.View)>"
"<java.time.LocalDateTime: java.time.LocalDateTime now()>","<java.time.LocalDateTime: java.time.LocalDateTime now()>"
"<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>","<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>"
"<android.graphics.RenderNode: float getTranslationX()>","<android.graphics.RenderNode: float getTranslationX()>"
"<java.lang.ThreadGroup: void suspend()>","<java.lang.ThreadGroup: void suspend()>"
"<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>"
"<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>","<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>"
"<java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>","<java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>"
"<java.io.PrintWriter: void println(boolean)>","<java.io.PrintWriter: void println(boolean)>"
"<android.app.Activity: void setInheritShowWhenLocked(boolean)>","<android.app.Activity: void setInheritShowWhenLocked(boolean)>"
"<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>","<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>"
"<android.webkit.WebChromeClient$FileChooserParams: android.content.Intent createIntent()>","<android.webkit.WebChromeClient$FileChooserParams: android.content.Intent createIntent()>"
"<java.io.Reader: void reset()>","<java.io.Reader: void reset()>"
"<android.content.pm.FeatureGroupInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.FeatureGroupInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.ZoneId: void <init>()>","<java.time.ZoneId: void <init>()>"
"<java.lang.StringBuffer: void <init>(int)>","<java.lang.StringBuffer: void <init>(int)>"
"<android.graphics.Rect: void sort()>","<android.graphics.Rect: void sort()>"
"<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)>","<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)>"
"<android.view.View: boolean isDuplicateParentStateEnabled()>","<android.view.View: boolean isDuplicateParentStateEnabled()>"
"<android.view.View: void updateDragShadow(android.view.View$DragShadowBuilder)>","<android.view.View: void updateDragShadow(android.view.View$DragShadowBuilder)>"
"<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>","<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>"
"<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>","<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>"
"<android.graphics.ImageDecoder: void finalize()>","<android.graphics.ImageDecoder: void finalize()>"
"<android.widget.RemoteViews$RemoteCollectionItems: void <init>()>","<android.widget.RemoteViews$RemoteCollectionItems: void <init>()>"
"<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)>","<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)>"
"<android.app.Dialog: void create()>","<android.app.Dialog: void create()>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(java.lang.CharSequence,int,int,android.os.LocaleList)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(java.lang.CharSequence,int,int,android.os.LocaleList)>"
"<android.graphics.Color: boolean isInColorSpace(long,android.graphics.ColorSpace)>","<android.graphics.Color: boolean isInColorSpace(long,android.graphics.ColorSpace)>"
"<android.graphics.Matrix: void setValues(float[])>","<android.graphics.Matrix: void setValues(float[])>"
"<java.time.Duration: int compareTo(java.time.Duration)>","<java.time.Duration: int compareTo(java.time.Duration)>"
"<android.graphics.RecordingCanvas: void <init>()>","<android.graphics.RecordingCanvas: void <init>()>"
"<java.nio.FloatBuffer: void <init>()>","<java.nio.FloatBuffer: void <init>()>"
"<java.util.zip.ZipFile: void <init>(java.io.File)>","<java.util.zip.ZipFile: void <init>(java.io.File)>"
"<android.view.SurfaceControl: int describeContents()>","<android.view.SurfaceControl: int describeContents()>"
"<java.util.stream.DoubleStream$Builder: void accept(double)>","<java.util.stream.DoubleStream$Builder: void accept(double)>"
"<android.view.TextureView: void <init>(android.content.Context)>","<android.view.TextureView: void <init>(android.content.Context)>"
"<java.lang.Math: double hypot(double,double)>","<java.lang.Math: double hypot(double,double)>"
"<android.view.SubMenu: android.view.SubMenu setIcon(int)>","<android.view.SubMenu: android.view.SubMenu setIcon(int)>"
"<android.util.ArrayMap: java.util.Set keySet()>","<android.util.ArrayMap: java.util.Set keySet()>"
"<android.view.inputmethod.SurroundingText: int describeContents()>","<android.view.inputmethod.SurroundingText: int describeContents()>"
"<android.content.ContentValues: void <clinit>()>","<android.content.ContentValues: void <clinit>()>"
"<android.graphics.Path: void rMoveTo(float,float)>","<android.graphics.Path: void rMoveTo(float,float)>"
"<java.util.Locale$Builder: void <init>()>","<java.util.Locale$Builder: void <init>()>"
"<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>","<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>"
"<java.util.SortedSet: java.util.SortedSet tailSet(java.lang.Object)>","<java.util.SortedSet: java.util.SortedSet tailSet(java.lang.Object)>"
"<android.view.WindowManager: void removeCrossWindowBlurEnabledListener(java.util.function.Consumer)>","<android.view.WindowManager: void removeCrossWindowBlurEnabledListener(java.util.function.Consumer)>"
"<java.time.chrono.ChronoLocalDate: boolean isLeapYear()>","<java.time.chrono.ChronoLocalDate: boolean isLeapYear()>"
"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>","<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>"
"<android.widget.FrameLayout: boolean getMeasureAllChildren()>","<android.widget.FrameLayout: boolean getMeasureAllChildren()>"
"<android.app.assist.AssistContent: android.net.Uri getWebUri()>","<android.app.assist.AssistContent: android.net.Uri getWebUri()>"
"<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)>","<android.view.autofill.AutofillManager: void setUserData(android.service.autofill.UserData)>"
"<java.time.format.FormatStyle: java.time.format.FormatStyle valueOf(java.lang.String)>","<java.time.format.FormatStyle: java.time.format.FormatStyle valueOf(java.lang.String)>"
"<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>","<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>"
"<android.view.textservice.SpellCheckerSession: void getSentenceSuggestions(android.view.textservice.TextInfo[],int)>","<android.view.textservice.SpellCheckerSession: void getSentenceSuggestions(android.view.textservice.TextInfo[],int)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence)>"
"<android.widget.Toolbar: int getTitleMarginEnd()>","<android.widget.Toolbar: int getTitleMarginEnd()>"
"<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>","<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>"
"<android.os.Parcel: void writeByteArray(byte[],int,int)>","<android.os.Parcel: void writeByteArray(byte[],int,int)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: int describeContents()>","<android.view.SurfaceControlViewHost$SurfacePackage: int describeContents()>"
"<android.content.res.TypedArray: int getInt(int,int)>","<android.content.res.TypedArray: int getInt(int,int)>"
"<java.util.AbstractQueue: void clear()>","<java.util.AbstractQueue: void clear()>"
"<java.nio.file.WatchKey: void cancel()>","<java.nio.file.WatchKey: void cancel()>"
"<org.json.JSONArray: int optInt(int)>","<org.json.JSONArray: int optInt(int)>"
"<android.app.Fragment: void onAttach(android.app.Activity)>","<android.app.Fragment: void onAttach(android.app.Activity)>"
"<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>","<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setExtras(android.os.Bundle)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setExtras(android.os.Bundle)>"
"<java.util.Collection: boolean removeIf(java.util.function.Predicate)>","<java.util.Collection: boolean removeIf(java.util.function.Predicate)>"
"<android.graphics.RecordingCanvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>"
"<android.content.res.Resources: float getFraction(int,int,int)>","<android.content.res.Resources: float getFraction(int,int,int)>"
"<java.time.Month: int get(java.time.temporal.TemporalField)>","<java.time.Month: int get(java.time.temporal.TemporalField)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)>","<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()>","<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()>"
"<java.util.concurrent.RunnableFuture: void run()>","<java.util.concurrent.RunnableFuture: void run()>"
"<android.os.Messenger: boolean equals(java.lang.Object)>","<android.os.Messenger: boolean equals(java.lang.Object)>"
"<android.content.res.TypedArray: int length()>","<android.content.res.TypedArray: int length()>"
"<android.app.Service: void stopForeground(boolean)>","<android.app.Service: void stopForeground(boolean)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int)>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int)>"
"<java.util.stream.IntStream: java.util.stream.IntStream sequential()>","<java.util.stream.IntStream: java.util.stream.IntStream sequential()>"
"<java.io.PrintWriter: void write(char[])>","<java.io.PrintWriter: void write(char[])>"
"<android.view.Choreographer$FrameTimeline: long getExpectedPresentationTimeNanos()>","<android.view.Choreographer$FrameTimeline: long getExpectedPresentationTimeNanos()>"
"<java.time.chrono.IsoChronology: java.time.chrono.IsoEra eraOf(int)>","<java.time.chrono.IsoChronology: java.time.chrono.IsoEra eraOf(int)>"
"<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)>","<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)>"
"<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>","<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>"
"<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>","<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>"
"<android.content.ContextWrapper: android.content.AttributionSource getAttributionSource()>","<android.content.ContextWrapper: android.content.AttributionSource getAttributionSource()>"
"<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>","<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>"
"<java.util.concurrent.CancellationException: void <init>(java.lang.String)>","<java.util.concurrent.CancellationException: void <init>(java.lang.String)>"
"<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>","<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>"
"<java.net.Socket: void close()>","<java.net.Socket: void close()>"
"<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.view.KeyEvent: boolean isCtrlPressed()>","<android.view.KeyEvent: boolean isCtrlPressed()>"
"<android.widget.RemoteViews: void setLabelFor(int,int)>","<android.widget.RemoteViews: void setLabelFor(int,int)>"
"<android.util.AttributeSet: java.lang.String getAttributeName(int)>","<android.util.AttributeSet: java.lang.String getAttributeName(int)>"
"<java.time.chrono.ChronoLocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>"
"<java.nio.channels.Selector: void <init>()>","<java.nio.channels.Selector: void <init>()>"
"<android.content.res.TypedArray: java.lang.String toString()>","<android.content.res.TypedArray: java.lang.String toString()>"
"<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>","<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>"
"<android.content.ContextWrapper: java.io.File getFilesDir()>","<android.content.ContextWrapper: java.io.File getFilesDir()>"
"<android.widget.ImageView: void drawableStateChanged()>","<android.widget.ImageView: void drawableStateChanged()>"
"<android.content.res.AssetManager$AssetInputStream: int read()>","<android.content.res.AssetManager$AssetInputStream: int read()>"
"<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>","<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addPage(android.app.Notification)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addPage(android.app.Notification)>"
"<android.view.textclassifier.SelectionEvent: int getStart()>","<android.view.textclassifier.SelectionEvent: int getStart()>"
"<android.os.BaseBundle: int[] getIntArray(java.lang.String)>","<android.os.BaseBundle: int[] getIntArray(java.lang.String)>"
"<org.json.JSONObject: boolean optBoolean(java.lang.String)>","<org.json.JSONObject: boolean optBoolean(java.lang.String)>"
"<android.view.View: android.view.View findViewWithTag(java.lang.Object)>","<android.view.View: android.view.View findViewWithTag(java.lang.Object)>"
"<android.hardware.SyncFence: boolean await(java.time.Duration)>","<android.hardware.SyncFence: boolean await(java.time.Duration)>"
"<android.media.session.PlaybackState: long getActiveQueueItemId()>","<android.media.session.PlaybackState: long getActiveQueueItemId()>"
"<android.webkit.WebView: java.lang.String getTitle()>","<android.webkit.WebView: java.lang.String getTitle()>"
"<android.graphics.text.LineBreakConfig: int getLineBreakStyle()>","<android.graphics.text.LineBreakConfig: int getLineBreakStyle()>"
"<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>","<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>"
"<android.webkit.WebChromeClient$FileChooserParams: java.lang.CharSequence getTitle()>","<android.webkit.WebChromeClient$FileChooserParams: java.lang.CharSequence getTitle()>"
"<android.util.SparseBooleanArray: void delete(int)>","<android.util.SparseBooleanArray: void delete(int)>"
"<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>","<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>"
"<android.app.Notification$Style: void checkBuilder()>","<android.app.Notification$Style: void checkBuilder()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>"
"<android.util.SparseArray: java.lang.Object valueAt(int)>","<android.util.SparseArray: java.lang.Object valueAt(int)>"
"<java.util.Collections: void sort(java.util.List)>","<java.util.Collections: void sort(java.util.List)>"
"<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>","<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>"
"<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>","<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>"
"<android.view.View: android.graphics.Bitmap getDrawingCache()>","<android.view.View: android.graphics.Bitmap getDrawingCache()>"
"<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.Region: void finalize()>","<android.graphics.Region: void finalize()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThreads()>","<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThreads()>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int)>"
"<android.view.ContentInfo: java.lang.String toString()>","<android.view.ContentInfo: java.lang.String toString()>"
"<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)>","<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)>"
"<android.text.style.TtsSpan$OrdinalBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$OrdinalBuilder: void <init>(java.lang.String)>"
"<android.content.res.loader.ResourcesLoader: void clearProviders()>","<android.content.res.loader.ResourcesLoader: void clearProviders()>"
"<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>"
"<java.util.jar.Manifest: void write(java.io.OutputStream)>","<java.util.jar.Manifest: void write(java.io.OutputStream)>"
"<java.util.AbstractCollection: boolean isEmpty()>","<java.util.AbstractCollection: boolean isEmpty()>"
"<android.graphics.SurfaceTexture$OnFrameAvailableListener: void onFrameAvailable(android.graphics.SurfaceTexture)>","<android.graphics.SurfaceTexture$OnFrameAvailableListener: void onFrameAvailable(android.graphics.SurfaceTexture)>"
"<java.nio.DoubleBuffer: java.nio.Buffer clear()>","<java.nio.DoubleBuffer: java.nio.Buffer clear()>"
"<java.util.NavigableMap: java.util.Map$Entry higherEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry higherEntry(java.lang.Object)>"
"<java.lang.Double: int compareTo(java.lang.Object)>","<java.lang.Double: int compareTo(java.lang.Object)>"
"<android.graphics.Paint: void setShadowLayer(float,float,float,long)>","<android.graphics.Paint: void setShadowLayer(float,float,float,long)>"
"<android.graphics.Paint: android.graphics.Shader getShader()>","<android.graphics.Paint: android.graphics.Shader getShader()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>","<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>"
"<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>","<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>"
"<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>","<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>"
"<android.os.Bundle: android.os.Bundle deepCopy()>","<android.os.Bundle: android.os.Bundle deepCopy()>"
"<android.view.ViewGroup: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>","<android.view.ViewGroup: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>"
"<android.view.View: void setBackground(android.graphics.drawable.Drawable)>","<android.view.View: void setBackground(android.graphics.drawable.Drawable)>"
"<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>","<android.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>"
"<java.util.Hashtable: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<java.time.Instant: void <init>()>","<java.time.Instant: void <init>()>"
"<android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener: void onAudioDescriptionRequestedChanged(boolean)>","<android.view.accessibility.AccessibilityManager$AudioDescriptionRequestedChangeListener: void onAudioDescriptionRequestedChanged(boolean)>"
"<java.text.CharacterIterator: char last()>","<java.text.CharacterIterator: char last()>"
"<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>","<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>"
"<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)>"
"<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.view.AbsSavedState: void <init>(android.os.Parcelable)>","<android.view.AbsSavedState: void <init>(android.os.Parcelable)>"
"<java.util.stream.DoubleStream: java.util.stream.BaseStream sequential()>","<java.util.stream.DoubleStream: java.util.stream.BaseStream sequential()>"
"<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>","<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>"
"<java.lang.NoSuchMethodException: void <init>(java.lang.String)>","<java.lang.NoSuchMethodException: void <init>(java.lang.String)>"
"<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>","<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>"
"<android.content.ContentValues: java.util.Set valueSet()>","<android.content.ContentValues: java.util.Set valueSet()>"
"<android.graphics.RecordingCanvas: void drawLine(float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawLine(float,float,float,float,android.graphics.Paint)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map)>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map)>"
"<android.view.ViewConfiguration: int getScrollBarSize()>","<android.view.ViewConfiguration: int getScrollBarSize()>"
"<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>","<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>"
"<android.transition.Transition$TransitionListener: void onTransitionPause(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionPause(android.transition.Transition)>"
"<android.graphics.fonts.FontVariationAxis: float getStyleValue()>","<android.graphics.fonts.FontVariationAxis: float getStyleValue()>"
"<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()>","<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()>"
"<java.lang.Math: double signum(double)>","<java.lang.Math: double signum(double)>"
"<java.io.Reader: void <init>(java.lang.Object)>","<java.io.Reader: void <init>(java.lang.Object)>"
"<java.lang.Package: java.lang.String getImplementationVersion()>","<java.lang.Package: java.lang.String getImplementationVersion()>"
"<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()>","<android.widget.ImageView: android.graphics.ColorFilter getColorFilter()>"
"<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>","<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>"
"<android.os.BaseBundle: void remove(java.lang.String)>","<android.os.BaseBundle: void remove(java.lang.String)>"
"<android.print.PrintAttributes$Resolution: int getVerticalDpi()>","<android.print.PrintAttributes$Resolution: int getVerticalDpi()>"
"<java.lang.Character$UnicodeBlock: void <clinit>()>","<java.lang.Character$UnicodeBlock: void <clinit>()>"
"<java.lang.reflect.Executable: java.lang.Class[] getExceptionTypes()>","<java.lang.reflect.Executable: java.lang.Class[] getExceptionTypes()>"
"<java.util.LongSummaryStatistics: void accept(int)>","<java.util.LongSummaryStatistics: void accept(int)>"
"<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[])>","<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[])>"
"<android.media.Image: void setFence(android.hardware.SyncFence)>","<android.media.Image: void setFence(android.hardware.SyncFence)>"
"<android.view.ViewStructure: int addChildCount(int)>","<android.view.ViewStructure: int addChildCount(int)>"
"<java.util.zip.ZipEntry: void setMethod(int)>","<java.util.zip.ZipEntry: void setMethod(int)>"
"<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>","<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>"
"<java.lang.System: java.lang.SecurityManager getSecurityManager()>","<java.lang.System: java.lang.SecurityManager getSecurityManager()>"
"<android.view.textclassifier.ConversationActions$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.ConversationActions$Request: android.os.Bundle getExtras()>"
"<android.widget.ListPopupWindow: void setSelection(int)>","<android.widget.ListPopupWindow: void setSelection(int)>"
"<android.view.Window: void togglePanel(int,android.view.KeyEvent)>","<android.view.Window: void togglePanel(int,android.view.KeyEvent)>"
"<java.lang.reflect.Method: boolean isBridge()>","<java.lang.reflect.Method: boolean isBridge()>"
"<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)>","<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)>"
"<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>","<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>"
"<android.view.textclassifier.TextLinks$TextLinkSpan: void <init>(android.view.textclassifier.TextLinks$TextLink)>","<android.view.textclassifier.TextLinks$TextLinkSpan: void <init>(android.view.textclassifier.TextLinks$TextLink)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)>"
"<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>","<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>"
"<android.view.ViewStructure: android.view.ViewStructure$HtmlInfo$Builder newHtmlInfoBuilder(java.lang.String)>","<android.view.ViewStructure: android.view.ViewStructure$HtmlInfo$Builder newHtmlInfoBuilder(java.lang.String)>"
"<android.app.Activity: boolean isVoiceInteractionRoot()>","<android.app.Activity: boolean isVoiceInteractionRoot()>"
"<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>","<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>"
"<android.content.SyncInfo: int describeContents()>","<android.content.SyncInfo: int describeContents()>"
"<java.util.stream.IntStream: java.util.stream.IntStream concat(java.util.stream.IntStream,java.util.stream.IntStream)>","<java.util.stream.IntStream: java.util.stream.IntStream concat(java.util.stream.IntStream,java.util.stream.IntStream)>"
"<java.nio.ByteBuffer: int hashCode()>","<java.nio.ByteBuffer: int hashCode()>"
"<android.view.ActionMode: void setTitle(int)>","<android.view.ActionMode: void setTitle(int)>"
"<android.text.PrecomputedText: void removeSpan(java.lang.Object)>","<android.text.PrecomputedText: void removeSpan(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>"
"<android.view.textclassifier.TextSelection$Builder: void <init>(int,int)>","<android.view.textclassifier.TextSelection$Builder: void <init>(int,int)>"
"<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>","<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>"
"<java.util.function.IntToLongFunction: long applyAsLong(int)>","<java.util.function.IntToLongFunction: long applyAsLong(int)>"
"<android.view.contentcapture.ContentCaptureSessionId: java.lang.String toString()>","<android.view.contentcapture.ContentCaptureSessionId: java.lang.String toString()>"
"<android.util.Size: int hashCode()>","<android.util.Size: int hashCode()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>"
"<java.lang.Character: char[] toChars(int)>","<java.lang.Character: char[] toChars(int)>"
"<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.jar.Attributes: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.webkit.WebChromeClient: boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient$FileChooserParams)>","<android.webkit.WebChromeClient: boolean onShowFileChooser(android.webkit.WebView,android.webkit.ValueCallback,android.webkit.WebChromeClient$FileChooserParams)>"
"<android.media.session.MediaController$Callback: void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo)>","<android.media.session.MediaController$Callback: void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo)>"
"<java.io.ObjectOutputStream: void writeDouble(double)>","<java.io.ObjectOutputStream: void writeDouble(double)>"
"<android.webkit.WebView: void postWebMessage(android.webkit.WebMessage,android.net.Uri)>","<android.webkit.WebView: void postWebMessage(android.webkit.WebMessage,android.net.Uri)>"
"<android.webkit.WebSettings$LayoutAlgorithm: void <clinit>()>","<android.webkit.WebSettings$LayoutAlgorithm: void <clinit>()>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(int,int)>","<java.time.LocalDate: java.time.LocalDateTime atTime(int,int)>"
"<java.time.temporal.TemporalUnit: boolean isDateBased()>","<java.time.temporal.TemporalUnit: boolean isDateBased()>"
"<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>","<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>"
"<java.lang.Long: java.lang.String toString(long,int)>","<java.lang.Long: java.lang.String toString(long,int)>"
"<android.content.pm.PackageManager: boolean canPackageQuery(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: boolean canPackageQuery(java.lang.String,java.lang.String)>"
"<android.media.AudioAttributes: java.lang.String toString()>","<android.media.AudioAttributes: java.lang.String toString()>"
"<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>","<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>"
"<java.lang.Float: int intValue()>","<java.lang.Float: int intValue()>"
"<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.widget.TextView: void setTextSize(float)>","<android.widget.TextView: void setTextSize(float)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
"<android.widget.Toolbar: int getTitleMarginBottom()>","<android.widget.Toolbar: int getTitleMarginBottom()>"
"<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>","<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>"
"<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>","<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>"
"<android.content.ContentProviderResult: void <init>(android.os.Bundle)>","<android.content.ContentProviderResult: void <init>(android.os.Bundle)>"
"<android.view.DisplayCutout: int getSafeInsetBottom()>","<android.view.DisplayCutout: int getSafeInsetBottom()>"
"<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>","<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setVariant(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setVariant(java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>"
"<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>","<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.reflect.Modifier: boolean isProtected(int)>","<java.lang.reflect.Modifier: boolean isProtected(int)>"
"<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>","<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>"
"<java.lang.reflect.Field: double getDouble(java.lang.Object)>","<java.lang.reflect.Field: double getDouble(java.lang.Object)>"
"<android.content.IntentSender: boolean equals(java.lang.Object)>","<android.content.IntentSender: boolean equals(java.lang.Object)>"
"<java.lang.Byte: int compareUnsigned(byte,byte)>","<java.lang.Byte: int compareUnsigned(byte,byte)>"
"<android.webkit.WebSettings$RenderPriority: void <init>(java.lang.String,int)>","<android.webkit.WebSettings$RenderPriority: void <init>(java.lang.String,int)>"
"<android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>","<android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>"
"<android.view.View: int computeVerticalScrollRange()>","<android.view.View: int computeVerticalScrollRange()>"
"<android.animation.StateListAnimator: void <init>()>","<android.animation.StateListAnimator: void <init>()>"
"<android.view.Window: android.transition.Transition getReturnTransition()>","<android.view.Window: android.transition.Transition getReturnTransition()>"
"<android.text.Layout: int getLineCount()>","<android.text.Layout: int getLineCount()>"
"<java.nio.DoubleBuffer: java.nio.Buffer mark()>","<java.nio.DoubleBuffer: java.nio.Buffer mark()>"
"<java.time.chrono.Chronology: java.time.chrono.Era eraOf(int)>","<java.time.chrono.Chronology: java.time.chrono.Era eraOf(int)>"
"<android.media.Rating: android.media.Rating newHeartRating(boolean)>","<android.media.Rating: android.media.Rating newHeartRating(boolean)>"
"<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>","<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>"
"<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>","<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>"
"<android.content.res.TypedArray: android.content.res.Resources getResources()>","<android.content.res.TypedArray: android.content.res.Resources getResources()>"
"<java.util.concurrent.locks.Lock: void lockInterruptibly()>","<java.util.concurrent.locks.Lock: void lockInterruptibly()>"
"<android.view.textservice.TextServicesManager: boolean isSpellCheckerEnabled()>","<android.view.textservice.TextServicesManager: boolean isSpellCheckerEnabled()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>"
"<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>","<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>"
"<java.time.OffsetTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.ImageDecoder$ImageInfo: android.graphics.ColorSpace getColorSpace()>","<android.graphics.ImageDecoder$ImageInfo: android.graphics.ColorSpace getColorSpace()>"
"<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category valueOf(java.lang.String)>","<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category valueOf(java.lang.String)>"
"<android.media.ImageReader: int getDataSpace()>","<android.media.ImageReader: int getDataSpace()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setExtras(android.os.Bundle)>"
"<android.graphics.Outline: void setPath(android.graphics.Path)>","<android.graphics.Outline: void setPath(android.graphics.Path)>"
"<java.util.Set: java.util.Iterator iterator()>","<java.util.Set: java.util.Iterator iterator()>"
"<android.app.Notification$Action: void writeToParcel(android.os.Parcel,int)>","<android.app.Notification$Action: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.transition.Transition: java.lang.String getName()>","<android.transition.Transition: java.lang.String getName()>"
"<x.c: void <init>(x.d$a)>","<x.c: void <init>(x.d$a)>"
"<android.os.Parcel: void writeByteArray(byte[])>","<android.os.Parcel: void writeByteArray(byte[])>"
"<java.util.ArrayDeque: boolean offerLast(java.lang.Object)>","<java.util.ArrayDeque: boolean offerLast(java.lang.Object)>"
"<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReplyPendingIntent()>","<android.app.Notification$CarExtender$UnreadConversation: android.app.PendingIntent getReplyPendingIntent()>"
"<android.os.ParcelFileDescriptor$FileDescriptorDetachedException: void <init>()>","<android.os.ParcelFileDescriptor$FileDescriptorDetachedException: void <init>()>"
"<java.util.Map: int size()>","<java.util.Map: int size()>"
"<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback)>","<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback)>"
"<java.math.RoundingMode: void <clinit>()>","<java.math.RoundingMode: void <clinit>()>"
"<java.nio.DoubleBuffer: java.nio.Buffer rewind()>","<java.nio.DoubleBuffer: java.nio.Buffer rewind()>"
"<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)>","<android.webkit.WebView: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)>"
"<android.view.Window: void openPanel(int,android.view.KeyEvent)>","<android.view.Window: void openPanel(int,android.view.KeyEvent)>"
"<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>","<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>"
"<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>","<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>"
"<java.util.Arrays: boolean equals(long[],int,int,long[],int,int)>","<java.util.Arrays: boolean equals(long[],int,int,long[],int,int)>"
"<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>","<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>"
"<android.view.translation.TranslationCapability: boolean isUiTranslationEnabled()>","<android.view.translation.TranslationCapability: boolean isUiTranslationEnabled()>"
"<java.util.LinkedHashMap: void clear()>","<java.util.LinkedHashMap: void clear()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)>"
"<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>","<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>"
"<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>","<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>"
"<android.database.ContentObserver: void onChange(boolean)>","<android.database.ContentObserver: void onChange(boolean)>"
"<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>","<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>"
"<android.content.res.TypedArray: java.lang.CharSequence getText(int)>","<android.content.res.TypedArray: java.lang.CharSequence getText(int)>"
"<android.os.Vibrator: int areAllEffectsSupported(int[])>","<android.os.Vibrator: int areAllEffectsSupported(int[])>"
"<java.time.ZoneId: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.ZoneId: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.app.RemoteAction: boolean equals(java.lang.Object)>","<android.app.RemoteAction: boolean equals(java.lang.Object)>"
"<java.math.BigInteger: java.math.BigInteger not()>","<java.math.BigInteger: java.math.BigInteger not()>"
"<android.content.pm.PackageManager: void <clinit>()>","<android.content.pm.PackageManager: void <clinit>()>"
"<java.lang.Long: java.lang.String toUnsignedString(long,int)>","<java.lang.Long: java.lang.String toUnsignedString(long,int)>"
"<android.graphics.RectF: boolean isEmpty()>","<android.graphics.RectF: boolean isEmpty()>"
"<android.graphics.Outline: void setEmpty()>","<android.graphics.Outline: void setEmpty()>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: int hashCode()>","<android.media.session.MediaSessionManager$RemoteUserInfo: int hashCode()>"
"<android.database.sqlite.SQLiteDatabase: long getPageSize()>","<android.database.sqlite.SQLiteDatabase: long getPageSize()>"
"<java.util.NavigableSet: java.lang.Object ceiling(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object ceiling(java.lang.Object)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>","<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>"
"<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getInstallReason()>","<android.content.pm.PackageInstaller$SessionInfo: int getInstallReason()>"
"<android.app.Activity: void openContextMenu(android.view.View)>","<android.app.Activity: void openContextMenu(android.view.View)>"
"<android.animation.Keyframe: java.lang.Class getType()>","<android.animation.Keyframe: java.lang.Class getType()>"
"<android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>","<android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setDomain(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setDomain(java.lang.String)>"
"<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>","<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>"
"<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)>","<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)>"
"<java.nio.LongBuffer: boolean equals(java.lang.Object)>","<java.nio.LongBuffer: boolean equals(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.m3: void <clinit>()>","<io.flutter.plugins.webviewflutter.m3: void <clinit>()>"
"<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>","<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>"
"<android.view.WindowInsetsController: void addOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>","<android.view.WindowInsetsController: void addOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>"
"<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>","<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>"
"<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>","<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>"
"<android.widget.TextView: int getRightPaddingOffset()>","<android.widget.TextView: int getRightPaddingOffset()>"
"<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>","<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>"
"<java.util.Random: java.util.stream.IntStream ints(long)>","<java.util.Random: java.util.stream.IntStream ints(long)>"
"<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.content.res.AssetManager$AssetInputStream: int read(byte[])>","<android.content.res.AssetManager$AssetInputStream: int read(byte[])>"
"<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()>","<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()>"
"<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<android.view.textclassifier.TextClassificationSessionId: java.lang.String toString()>","<android.view.textclassifier.TextClassificationSessionId: java.lang.String toString()>"
"<android.view.animation.Animation$AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>","<android.view.animation.Animation$AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>"
"<android.content.pm.PackageManager: void updateInstantAppCookie(byte[])>","<android.content.pm.PackageManager: void updateInstantAppCookie(byte[])>"
"<android.view.inputmethod.BaseInputConnection: boolean requestCursorUpdates(int)>","<android.view.inputmethod.BaseInputConnection: boolean requestCursorUpdates(int)>"
"<android.widget.ListPopupWindow: void setPromptPosition(int)>","<android.widget.ListPopupWindow: void setPromptPosition(int)>"
"<java.nio.file.Path: java.lang.String toString()>","<java.nio.file.Path: java.lang.String toString()>"
"<java.util.Arrays: void fill(double[],int,int,double)>","<java.util.Arrays: void fill(double[],int,int,double)>"
"<android.app.Fragment: void setReenterTransition(android.transition.Transition)>","<android.app.Fragment: void setReenterTransition(android.transition.Transition)>"
"<java.util.Collection: java.util.Spliterator spliterator()>","<java.util.Collection: java.util.Spliterator spliterator()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>"
"<java.util.ArrayList: boolean isEmpty()>","<java.util.ArrayList: boolean isEmpty()>"
"<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>","<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>"
"<android.content.pm.Attribution: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.Attribution: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>"
"<java.util.Collections: java.util.Queue checkedQueue(java.util.Queue,java.lang.Class)>","<java.util.Collections: java.util.Queue checkedQueue(java.util.Queue,java.lang.Class)>"
"<android.media.session.PlaybackState$CustomAction: java.lang.CharSequence getName()>","<android.media.session.PlaybackState$CustomAction: java.lang.CharSequence getName()>"
"<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>","<java.util.concurrent.ThreadPoolExecutor: java.util.List shutdownNow()>"
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>","<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>"
"<android.view.textclassifier.TextSelection: void <clinit>()>","<android.view.textclassifier.TextSelection: void <clinit>()>"
"<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Bitmap: int getHeight()>","<android.graphics.Bitmap: int getHeight()>"
"<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>","<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>"
"<android.graphics.SurfaceTexture: boolean isReleased()>","<android.graphics.SurfaceTexture: boolean isReleased()>"
"<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>","<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>"
"<u0.t: void <clinit>()>","<u0.t: void <clinit>()>"
"<java.time.temporal.ChronoUnit: boolean isTimeBased()>","<java.time.temporal.ChronoUnit: boolean isTimeBased()>"
"<io.flutter.plugins.webviewflutter.n1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.n1: void a(java.lang.Object,y.a$e)>"
"<android.app.PendingIntent: int getCreatorUid()>","<android.app.PendingIntent: int getCreatorUid()>"
"<java.util.List: boolean containsAll(java.util.Collection)>","<java.util.List: boolean containsAll(java.util.Collection)>"
"<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>","<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>"
"<android.widget.AbsListView: void setBottomEdgeEffectColor(int)>","<android.widget.AbsListView: void setBottomEdgeEffectColor(int)>"
"<android.widget.TextView: int[] onCreateDrawableState(int)>","<android.widget.TextView: int[] onCreateDrawableState(int)>"
"<android.widget.ListView: android.widget.ListAdapter getAdapter()>","<android.widget.ListView: android.widget.ListAdapter getAdapter()>"
"<java.util.function.DoubleToIntFunction: int applyAsInt(double)>","<java.util.function.DoubleToIntFunction: int applyAsInt(double)>"
"<java.util.function.DoublePredicate: java.util.function.DoublePredicate or(java.util.function.DoublePredicate)>","<java.util.function.DoublePredicate: java.util.function.DoublePredicate or(java.util.function.DoublePredicate)>"
"<android.view.View: void setScrollX(int)>","<android.view.View: void setScrollX(int)>"
"<java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>","<java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>"
"<java.time.ZonedDateTime: int getHour()>","<java.time.ZonedDateTime: int getHour()>"
"<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>"
"<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>","<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>"
"<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>","<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>"
"<java.lang.Character: void <clinit>()>","<java.lang.Character: void <clinit>()>"
"<android.os.Debug: void startNativeTracing()>","<android.os.Debug: void startNativeTracing()>"
"<android.view.textclassifier.TextClassifier: void destroy()>","<android.view.textclassifier.TextClassifier: void destroy()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>"
"<java.time.Month: int minLength()>","<java.time.Month: int minLength()>"
"<android.graphics.Canvas: void drawRGB(int,int,int)>","<android.graphics.Canvas: void drawRGB(int,int,int)>"
"<java.io.ObjectInputStream: int read(byte[],int,int)>","<java.io.ObjectInputStream: int read(byte[],int,int)>"
"<android.view.View: void onWindowVisibilityChanged(int)>","<android.view.View: void onWindowVisibilityChanged(int)>"
"<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setColor(int)>","<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setColor(int)>"
"<io.flutter.plugins.webviewflutter.l1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.l1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.util.Locale: java.lang.String getDisplayScript()>","<java.util.Locale: java.lang.String getDisplayScript()>"
"<java.lang.AssertionError: void <init>()>","<java.lang.AssertionError: void <init>()>"
"<android.app.ActionBar: int getHeight()>","<android.app.ActionBar: int getHeight()>"
"<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent valueOf(java.lang.String)>","<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent valueOf(java.lang.String)>"
"<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>","<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>"
"<java.lang.Double: int hashCode()>","<java.lang.Double: int hashCode()>"
"<android.media.session.MediaSession$QueueItem: java.lang.String toString()>","<android.media.session.MediaSession$QueueItem: java.lang.String toString()>"
"<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>","<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>"
"<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>","<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>"
"<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<android.widget.AdapterView: void removeView(android.view.View)>","<android.widget.AdapterView: void removeView(android.view.View)>"
"<java.time.Instant: int compareTo(java.lang.Object)>","<java.time.Instant: int compareTo(java.lang.Object)>"
"<java.nio.channels.AsynchronousFileChannel: long size()>","<java.nio.channels.AsynchronousFileChannel: long size()>"
"<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>","<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>"
"<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>","<java.util.IdentityHashMap: boolean containsKey(java.lang.Object)>"
"<android.content.pm.PackageInstaller$SessionParams: void <clinit>()>","<android.content.pm.PackageInstaller$SessionParams: void <clinit>()>"
"<java.time.Period: java.time.Period minusDays(long)>","<java.time.Period: java.time.Period minusDays(long)>"
"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>","<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>"
"<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>","<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>"
"<android.transition.Transition: android.transition.Transition setInterpolator(android.animation.TimeInterpolator)>","<android.transition.Transition: android.transition.Transition setInterpolator(android.animation.TimeInterpolator)>"
"<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>","<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>"
"<android.widget.TextView: boolean showContextMenu(float,float)>","<android.widget.TextView: boolean showContextMenu(float,float)>"
"<io.flutter.plugins.webviewflutter.k2: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.k2: void a(java.lang.Object)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>"
"<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,float,int)>","<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,float,int)>"
"<java.util.Collections: java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap)>","<java.util.Collections: java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap)>"
"<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>","<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>"
"<android.widget.RemoteViews: void setOnCheckedChangeResponse(int,android.widget.RemoteViews$RemoteResponse)>","<android.widget.RemoteViews: void setOnCheckedChangeResponse(int,android.widget.RemoteViews$RemoteResponse)>"
"<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>","<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>"
"<android.view.Window: android.content.res.TypedArray getWindowStyle()>","<android.view.Window: android.content.res.TypedArray getWindowStyle()>"
"<android.view.View: void postOnAnimation(java.lang.Runnable)>","<android.view.View: void postOnAnimation(java.lang.Runnable)>"
"<android.view.TextureView: android.graphics.Bitmap getBitmap()>","<android.view.TextureView: android.graphics.Bitmap getBitmap()>"
"<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>","<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>"
"<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>","<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>"
"<android.webkit.TracingController: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>","<android.webkit.TracingController: boolean stop(java.io.OutputStream,java.util.concurrent.Executor)>"
"<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>","<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>"
"<org.json.JSONTokener: java.lang.String toString()>","<org.json.JSONTokener: java.lang.String toString()>"
"<android.content.pm.PackageManager$PackageInfoFlags: long getValue()>","<android.content.pm.PackageManager$PackageInfoFlags: long getValue()>"
"<java.util.function.Predicate: boolean test(java.lang.Object)>","<java.util.function.Predicate: boolean test(java.lang.Object)>"
"<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()>","<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()>"
"<android.os.IInterface: android.os.IBinder asBinder()>","<android.os.IInterface: android.os.IBinder asBinder()>"
"<java.util.Map: java.util.Collection values()>","<java.util.Map: java.util.Collection values()>"
"<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)>","<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,long)>"
"<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext$Builder setWidgetVersion(java.lang.String)>","<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext$Builder setWidgetVersion(java.lang.String)>"
"<java.lang.Integer: java.lang.String toUnsignedString(int)>","<java.lang.Integer: java.lang.String toUnsignedString(int)>"
"<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>","<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>"
"<android.print.PrintAttributes: java.lang.String toString()>","<android.print.PrintAttributes: java.lang.String toString()>"
"<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(android.view.MenuItem)>","<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(android.view.MenuItem)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream$Builder builder()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream$Builder builder()>"
"<android.content.pm.PackageInstaller: void uninstallExistingPackage(java.lang.String,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void uninstallExistingPackage(java.lang.String,android.content.IntentSender)>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<androidx.lifecycle.Lifecycling$1: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.lifecycle.Lifecycling$1: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<java.lang.IllegalMonitorStateException: void <init>()>","<java.lang.IllegalMonitorStateException: void <init>()>"
"<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: boolean add(java.lang.Object)>"
"<java.io.InputStreamReader: void <init>(java.io.InputStream)>","<java.io.InputStreamReader: void <init>(java.io.InputStream)>"
"<android.app.assist.AssistContent: void setIntent(android.content.Intent)>","<android.app.assist.AssistContent: void setIntent(android.content.Intent)>"
"<android.media.Image: void setTimestamp(long)>","<android.media.Image: void setTimestamp(long)>"
"<android.graphics.Color: java.lang.String toString()>","<android.graphics.Color: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>"
"<android.window.SplashScreenView: java.time.Duration getIconAnimationDuration()>","<android.window.SplashScreenView: java.time.Duration getIconAnimationDuration()>"
"<android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean moveToRightEdge(android.text.Spannable,android.text.Layout)>"
"<java.util.concurrent.atomic.AtomicLong: float floatValue()>","<java.util.concurrent.atomic.AtomicLong: float floatValue()>"
"<java.lang.StringBuffer: java.lang.Appendable append(char)>","<java.lang.StringBuffer: java.lang.Appendable append(char)>"
"<android.content.Intent: boolean filterEquals(android.content.Intent)>","<android.content.Intent: boolean filterEquals(android.content.Intent)>"
"<android.app.Activity: void setFeatureDrawableAlpha(int,int)>","<android.app.Activity: void setFeatureDrawableAlpha(int,int)>"
"<android.app.Fragment: void unregisterForContextMenu(android.view.View)>","<android.app.Fragment: void unregisterForContextMenu(android.view.View)>"
"<android.content.IntentFilter: void <clinit>()>","<android.content.IntentFilter: void <clinit>()>"
"<android.graphics.Matrix: boolean isIdentity()>","<android.graphics.Matrix: boolean isIdentity()>"
"<java.lang.System: java.util.Properties getProperties()>","<java.lang.System: java.util.Properties getProperties()>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>"
"<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>","<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>"
"<android.graphics.RecordingCanvas: void drawPath(android.graphics.Path,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPath(android.graphics.Path,android.graphics.Paint)>"
"<android.graphics.Paint: void setWordSpacing(float)>","<android.graphics.Paint: void setWordSpacing(float)>"
"<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>","<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>"
"<android.print.PrintDocumentInfo: java.lang.String toString()>","<android.print.PrintDocumentInfo: java.lang.String toString()>"
"<android.graphics.NinePatch: int getDensity()>","<android.graphics.NinePatch: int getDensity()>"
"<android.view.Window: void setIcon(int)>","<android.view.Window: void setIcon(int)>"
"<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>","<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>"
"<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>"
"<java.net.URL: boolean sameFile(java.net.URL)>","<java.net.URL: boolean sameFile(java.net.URL)>"
"<android.app.Activity: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Activity: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.hardware.SyncFence: void <clinit>()>","<android.hardware.SyncFence: void <clinit>()>"
"<java.util.function.DoublePredicate: java.util.function.DoublePredicate and(java.util.function.DoublePredicate)>","<java.util.function.DoublePredicate: java.util.function.DoublePredicate and(java.util.function.DoublePredicate)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setItalic(boolean)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setItalic(boolean)>"
"<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>"
"<android.util.SparseBooleanArray: void removeAt(int)>","<android.util.SparseBooleanArray: void removeAt(int)>"
"<android.content.pm.PackageInstaller$Session: java.io.InputStream openRead(java.lang.String)>","<android.content.pm.PackageInstaller$Session: java.io.InputStream openRead(java.lang.String)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createShaderEffect(android.graphics.Shader)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createShaderEffect(android.graphics.Shader)>"
"<java.util.Arrays: boolean equals(int[],int[])>","<java.util.Arrays: boolean equals(int[],int[])>"
"<android.os.Message: java.lang.String toString()>","<android.os.Message: java.lang.String toString()>"
"<android.webkit.WebView: void zoomBy(float)>","<android.webkit.WebView: void zoomBy(float)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>","<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.b3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.b3: void a(java.lang.Object)>"
"<android.app.Notification$Action: boolean isContextual()>","<android.app.Notification$Action: boolean isContextual()>"
"<java.time.ZoneOffset: int compareTo(java.time.ZoneOffset)>","<java.time.ZoneOffset: int compareTo(java.time.ZoneOffset)>"
"<android.view.WindowInsetsAnimationController: android.graphics.Insets getShownStateInsets()>","<android.view.WindowInsetsAnimationController: android.graphics.Insets getShownStateInsets()>"
"<android.os.Parcel: java.lang.String readString()>","<android.os.Parcel: java.lang.String readString()>"
"<java.util.Arrays: boolean equals(boolean[],boolean[])>","<java.util.Arrays: boolean equals(boolean[],boolean[])>"
"<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>","<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>"
"<android.animation.LayoutTransition: long getStartDelay(int)>","<android.animation.LayoutTransition: long getStartDelay(int)>"
"<android.view.ViewPropertyAnimator: long getStartDelay()>","<android.view.ViewPropertyAnimator: long getStartDelay()>"
"<android.util.AndroidException: void <init>(java.lang.String)>","<android.util.AndroidException: void <init>(java.lang.String)>"
"<android.util.Log: int v(java.lang.String,java.lang.String)>","<android.util.Log: int v(java.lang.String,java.lang.String)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>","<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>"
"<android.view.View: boolean isHorizontalScrollBarEnabled()>","<android.view.View: boolean isHorizontalScrollBarEnabled()>"
"<android.webkit.WebViewClient: void onPageCommitVisible(android.webkit.WebView,java.lang.String)>","<android.webkit.WebViewClient: void onPageCommitVisible(android.webkit.WebView,java.lang.String)>"
"<android.content.res.TypedArray: java.lang.String getString(int)>","<android.content.res.TypedArray: java.lang.String getString(int)>"
"<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>","<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>"
"<android.content.ContextWrapper: java.io.File getCacheDir()>","<android.content.ContextWrapper: java.io.File getCacheDir()>"
"<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback)>","<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback)>"
"<android.content.ContentProvider: void shutdown()>","<android.content.ContentProvider: void shutdown()>"
"<android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>","<android.app.AppComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)>"
"<java.nio.file.AccessMode: java.nio.file.AccessMode[] values()>","<java.nio.file.AccessMode: java.nio.file.AccessMode[] values()>"
"<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.text.TextUtils: boolean isGraphic(char)>","<android.text.TextUtils: boolean isGraphic(char)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>"
"<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>"
"<java.lang.Long: long remainderUnsigned(long,long)>","<java.lang.Long: long remainderUnsigned(long,long)>"
"<android.view.View: boolean isPivotSet()>","<android.view.View: boolean isPivotSet()>"
"<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>","<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>"
"<android.view.MotionEvent: int getActionButton()>","<android.view.MotionEvent: int getActionButton()>"
"<org.json.JSONObject: double optDouble(java.lang.String,double)>","<org.json.JSONObject: double optDouble(java.lang.String,double)>"
"<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>","<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>"
"<android.graphics.Paint: void reset()>","<android.graphics.Paint: void reset()>"
"<android.view.KeyEvent: char getMatch(char[],int)>","<android.view.KeyEvent: char getMatch(char[],int)>"
"<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.widget.AbsListView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.widget.AbsListView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<java.util.function.IntToDoubleFunction: double applyAsDouble(int)>","<java.util.function.IntToDoubleFunction: double applyAsDouble(int)>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>"
"<java.lang.ThreadGroup: java.lang.String toString()>","<java.lang.ThreadGroup: java.lang.String toString()>"
"<org.json.JSONArray: int hashCode()>","<org.json.JSONArray: int hashCode()>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewInsetsChanged(android.graphics.Insets)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewInsetsChanged(android.graphics.Insets)>"
"<android.view.contentcapture.ContentCaptureSession: void destroy()>","<android.view.contentcapture.ContentCaptureSession: void destroy()>"
"<java.nio.file.AccessMode: java.nio.file.AccessMode valueOf(java.lang.String)>","<java.nio.file.AccessMode: java.nio.file.AccessMode valueOf(java.lang.String)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle of(java.util.Locale)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle of(java.util.Locale)>"
"<org.json.JSONObject: int optInt(java.lang.String,int)>","<org.json.JSONObject: int optInt(java.lang.String,int)>"
"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.hardware.SensorListener: void onSensorChanged(int,float[])>","<android.hardware.SensorListener: void onSensorChanged(int,float[])>"
"<android.content.res.Resources: int getDimensionPixelSize(int)>","<android.content.res.Resources: int getDimensionPixelSize(int)>"
"<java.time.LocalTime: java.time.LocalTime plusHours(long)>","<java.time.LocalTime: java.time.LocalTime plusHours(long)>"
"<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.DateFormat: java.lang.StringBuffer format(java.util.Date,java.lang.StringBuffer,java.text.FieldPosition)>"
"<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.content.Intent: java.lang.String getDataString()>","<android.content.Intent: java.lang.String getDataString()>"
"<android.view.textclassifier.TextClassificationContext$Builder: void <init>(java.lang.String,java.lang.String)>","<android.view.textclassifier.TextClassificationContext$Builder: void <init>(java.lang.String,java.lang.String)>"
"<android.view.textclassifier.SelectionEvent: void <clinit>()>","<android.view.textclassifier.SelectionEvent: void <clinit>()>"
"<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>","<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>"
"<android.graphics.ImageDecoder: boolean isUnpremultipliedRequired()>","<android.graphics.ImageDecoder: boolean isUnpremultipliedRequired()>"
"<android.os.PatternMatcher: void <init>(android.os.Parcel)>","<android.os.PatternMatcher: void <init>(android.os.Parcel)>"
"<io.flutter.plugins.webviewflutter.b1: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.b1: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<android.icu.util.ULocale: java.lang.String getLanguage(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getLanguage(java.lang.String)>"
"<android.net.Uri: int compareTo(android.net.Uri)>","<android.net.Uri: int compareTo(android.net.Uri)>"
"<android.widget.RemoteViews: void setAccessibilityTraversalAfter(int,int)>","<android.widget.RemoteViews: void setAccessibilityTraversalAfter(int,int)>"
"<android.view.animation.Animation$AnimationListener: void onAnimationEnd(android.view.animation.Animation)>","<android.view.animation.Animation$AnimationListener: void onAnimationEnd(android.view.animation.Animation)>"
"<android.graphics.Movie: int width()>","<android.graphics.Movie: int width()>"
"<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>","<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>"
"<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()>","<android.text.style.TtsSpan: android.os.PersistableBundle getArgs()>"
"<java.util.Properties: java.lang.String getProperty(java.lang.String)>","<java.util.Properties: java.lang.String getProperty(java.lang.String)>"
"<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>","<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setSupportedAttributes(int)>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setSupportedAttributes(int)>"
"<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>"
"<android.app.Notification$Action: int getSemanticAction()>","<android.app.Notification$Action: int getSemanticAction()>"
"<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>","<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>"
"<android.view.WindowMetrics: android.graphics.Rect getBounds()>","<android.view.WindowMetrics: android.graphics.Rect getBounds()>"
"<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>","<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>"
"<android.view.accessibility.AccessibilityWindowInfo: int hashCode()>","<android.view.accessibility.AccessibilityWindowInfo: int hashCode()>"
"<android.database.ContentObserver: void onChange(boolean,java.util.Collection,int)>","<android.database.ContentObserver: void onChange(boolean,java.util.Collection,int)>"
"<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUid(int)>","<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUid(int)>"
"<android.hardware.lights.LightState: java.lang.String toString()>","<android.hardware.lights.LightState: java.lang.String toString()>"
"<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>"
"<java.nio.channels.FileLock: void release()>","<java.nio.channels.FileLock: void release()>"
"<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()>","<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()>"
"<java.util.Locale$LanguageRange: java.util.List parse(java.lang.String)>","<java.util.Locale$LanguageRange: java.util.List parse(java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)>"
"<java.nio.ShortBuffer: java.nio.ByteOrder order()>","<java.nio.ShortBuffer: java.nio.ByteOrder order()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>"
"<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>","<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>"
"<android.webkit.WebView: void saveWebArchive(java.lang.String)>","<android.webkit.WebView: void saveWebArchive(java.lang.String)>"
"<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<java.util.stream.IntStream: java.util.PrimitiveIterator$OfInt iterator()>","<java.util.stream.IntStream: java.util.PrimitiveIterator$OfInt iterator()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.Shader$TileMode)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.Shader$TileMode)>"
"<java.util.OptionalDouble: boolean equals(java.lang.Object)>","<java.util.OptionalDouble: boolean equals(java.lang.Object)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>"
"<io.flutter.plugins.webviewflutter.a0: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.a0: void a(java.lang.Object)>"
"<android.view.Window: android.transition.Transition getReenterTransition()>","<android.view.Window: android.transition.Transition getReenterTransition()>"
"<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>","<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>"
"<android.view.WindowInsets: int getStableInsetRight()>","<android.view.WindowInsets: int getStableInsetRight()>"
"<android.app.Activity: void onDestroy()>","<android.app.Activity: void onDestroy()>"
"<java.text.CharacterIterator: char setIndex(int)>","<java.text.CharacterIterator: char setIndex(int)>"
"<java.util.Date: int getDate()>","<java.util.Date: int getDate()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>"
"<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>","<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>"
"<android.widget.RemoteViews: void setTextColor(int,int)>","<android.widget.RemoteViews: void setTextColor(int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>"
"<java.math.BigInteger: int compareTo(java.lang.Object)>","<java.math.BigInteger: int compareTo(java.lang.Object)>"
"<org.json.JSONObject: boolean has(java.lang.String)>","<org.json.JSONObject: boolean has(java.lang.String)>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>"
"<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>","<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>"
"<java.lang.Long: long parseLong(java.lang.CharSequence,int,int,int)>","<java.lang.Long: long parseLong(java.lang.CharSequence,int,int,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>"
"<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.content.ContentProviderClient: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>"
"<java.net.URI: java.lang.String getRawAuthority()>","<java.net.URI: java.lang.String getRawAuthority()>"
"<android.view.textservice.SpellCheckerInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.view.textservice.SpellCheckerInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>","<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>"
"<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>","<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>"
"<java.lang.Runtime: void traceInstructions(boolean)>","<java.lang.Runtime: void traceInstructions(boolean)>"
"<android.text.Layout: int getWidth()>","<android.text.Layout: int getWidth()>"
"<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>","<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>"
"<android.view.SurfaceControl$Transaction: int describeContents()>","<android.view.SurfaceControl$Transaction: int describeContents()>"
"<android.content.AttributionSource$Builder: void <init>(int)>","<android.content.AttributionSource$Builder: void <init>(int)>"
"<java.time.Period: void <clinit>()>","<java.time.Period: void <clinit>()>"
"<io.flutter.plugins.webviewflutter.u1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.u1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.os.UserHandle: int describeContents()>","<android.os.UserHandle: int describeContents()>"
"<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)>","<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)>"
"<android.os.Parcel: void recycle()>","<android.os.Parcel: void recycle()>"
"<java.lang.StringBuilder: void getChars(int,int,char[],int)>","<java.lang.StringBuilder: void getChars(int,int,char[],int)>"
"<android.view.WindowId: java.lang.String toString()>","<android.view.WindowId: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>"
"<java.util.LinkedList: java.lang.Object poll()>","<java.util.LinkedList: java.lang.Object poll()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordStartIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordStartIndex()>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setLinkUri(android.net.Uri)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setLinkUri(android.net.Uri)>"
"<java.util.Locale: java.lang.String getISO3Country()>","<java.util.Locale: java.lang.String getISO3Country()>"
"<android.content.res.Configuration: boolean isScreenWideColorGamut()>","<android.content.res.Configuration: boolean isScreenWideColorGamut()>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setDefaultLocales(android.os.LocaleList)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setDefaultLocales(android.os.LocaleList)>"
"<java.util.regex.Pattern: void <init>()>","<java.util.regex.Pattern: void <init>()>"
"<android.content.res.Resources: java.lang.String getResourceName(int)>","<android.content.res.Resources: java.lang.String getResourceName(int)>"
"<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>","<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>"
"<android.content.pm.PackageInstaller$SessionInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageInstaller$SessionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.AudioAttributes: boolean areHapticChannelsMuted()>","<android.media.AudioAttributes: boolean areHapticChannelsMuted()>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription build()>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription build()>"
"<android.app.Activity: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>","<android.app.Activity: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>"
"<io.flutter.plugins.webviewflutter.z0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.z0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<java.lang.ThreadGroup: void setDaemon(boolean)>","<java.lang.ThreadGroup: void setDaemon(boolean)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[])>","<android.app.Notification$Builder: android.app.Notification$Builder setRemoteInputHistory(java.lang.CharSequence[])>"
"<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>","<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>"
"<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext build()>","<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext build()>"
"<android.graphics.Paint: void setFilterBitmap(boolean)>","<android.graphics.Paint: void setFilterBitmap(boolean)>"
"<android.content.pm.ServiceInfo: int getForegroundServiceType()>","<android.content.pm.ServiceInfo: int getForegroundServiceType()>"
"<android.content.ContextParams$Builder: void <init>()>","<android.content.ContextParams$Builder: void <init>()>"
"<android.app.Dialog: void setContentView(android.view.View)>","<android.app.Dialog: void setContentView(android.view.View)>"
"<java.time.LocalTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.text.Layout: int getLineBottom(int)>","<android.text.Layout: int getLineBottom(int)>"
"<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()>","<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()>"
"<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.Object peek()>","<java.util.concurrent.LinkedBlockingQueue: java.lang.Object peek()>"
"<android.media.ImageReader: int getHeight()>","<android.media.ImageReader: int getHeight()>"
"<android.print.PageRange: int getEnd()>","<android.print.PageRange: int getEnd()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void setExtras(android.os.Bundle)>","<android.app.VoiceInteractor$PickOptionRequest$Option: void setExtras(android.os.Bundle)>"
"<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>","<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>"
"<java.util.Locale$Builder: java.util.Locale$Builder setVariant(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setVariant(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.a0: void <init>(io.flutter.plugins.webviewflutter.k$o$a)>","<io.flutter.plugins.webviewflutter.a0: void <init>(io.flutter.plugins.webviewflutter.k$o$a)>"
"<android.view.MotionEvent: float getPressure(int)>","<android.view.MotionEvent: float getPressure(int)>"
"<android.app.Dialog: android.view.SearchEvent getSearchEvent()>","<android.app.Dialog: android.view.SearchEvent getSearchEvent()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer)>"
"<android.widget.Toolbar: void setSubtitleTextColor(int)>","<android.widget.Toolbar: void setSubtitleTextColor(int)>"
"<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>","<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>"
"<java.io.PrintStream: void clearError()>","<java.io.PrintStream: void clearError()>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int)>"
"<java.nio.file.Path: boolean startsWith(java.lang.String)>","<java.nio.file.Path: boolean startsWith(java.lang.String)>"
"<android.content.pm.ServiceInfo: void <clinit>()>","<android.content.pm.ServiceInfo: void <clinit>()>"
"<java.util.ArrayDeque: java.util.Iterator descendingIterator()>","<java.util.ArrayDeque: java.util.Iterator descendingIterator()>"
"<android.hardware.TriggerEvent: void <init>()>","<android.hardware.TriggerEvent: void <init>()>"
"<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>","<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>"
"<android.media.AudioAttributes: void <init>()>","<android.media.AudioAttributes: void <init>()>"
"<java.security.Principal: boolean equals(java.lang.Object)>","<java.security.Principal: boolean equals(java.lang.Object)>"
"<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.util.Optional: boolean isPresent()>","<java.util.Optional: boolean isPresent()>"
"<java.util.Arrays: void fill(char[],char)>","<java.util.Arrays: void fill(char[],char)>"
"<android.widget.AdapterView: long getSelectedItemId()>","<android.widget.AdapterView: long getSelectedItemId()>"
"<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>","<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>"
"<android.os.LocaleList: int hashCode()>","<android.os.LocaleList: int hashCode()>"
"<android.content.pm.PackageManager$NameNotFoundException: void <init>()>","<android.content.pm.PackageManager$NameNotFoundException: void <init>()>"
"<java.io.ObjectOutput: void flush()>","<java.io.ObjectOutput: void flush()>"
"<android.app.VoiceInteractor$Request: android.content.Context getContext()>","<android.app.VoiceInteractor$Request: android.content.Context getContext()>"
"<android.webkit.WebSettings: int getDefaultFontSize()>","<android.webkit.WebSettings: int getDefaultFontSize()>"
"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>","<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.Path)>","<android.graphics.Canvas: boolean quickReject(android.graphics.Path)>"
"<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>","<java.util.concurrent.AbstractExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>"
"<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>","<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>"
"<android.webkit.WebView: void postVisualStateCallback(long,android.webkit.WebView$VisualStateCallback)>","<android.webkit.WebView: void postVisualStateCallback(long,android.webkit.WebView$VisualStateCallback)>"
"<android.view.InputDevice$MotionRange: boolean isFromSource(int)>","<android.view.InputDevice$MotionRange: boolean isFromSource(int)>"
"<java.io.PrintWriter: void <init>(java.lang.String)>","<java.io.PrintWriter: void <init>(java.lang.String)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: void <init>(java.util.List)>","<android.view.textclassifier.ConversationActions$Request$Builder: void <init>(java.util.List)>"
"<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>","<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>"
"<android.os.Bundle: float getFloat(java.lang.String)>","<android.os.Bundle: float getFloat(java.lang.String)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>"
"<java.util.Hashtable: int hashCode()>","<java.util.Hashtable: int hashCode()>"
"<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>","<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)>"
"<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)>","<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)>"
"<java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>","<java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>"
"<android.app.PendingIntent: android.app.PendingIntent getForegroundService(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getForegroundService(android.content.Context,int,android.content.Intent,int)>"
"<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<android.webkit.GeolocationPermissions: void clearAll()>","<android.webkit.GeolocationPermissions: void clearAll()>"
"<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.graphics.Bitmap: int getByteCount()>","<android.graphics.Bitmap: int getByteCount()>"
"<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setIcon(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setIcon(int)>"
"<java.lang.NoSuchMethodError: void <init>(java.lang.String)>","<java.lang.NoSuchMethodError: void <init>(java.lang.String)>"
"<java.io.PrintWriter: void close()>","<java.io.PrintWriter: void close()>"
"<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int)>","<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int)>"
"<android.view.View: void onFinishTemporaryDetach()>","<android.view.View: void onFinishTemporaryDetach()>"
"<java.lang.Runtime: java.lang.Process exec(java.lang.String)>","<java.lang.Runtime: java.lang.Process exec(java.lang.String)>"
"<android.webkit.WebView: void onStartTemporaryDetach()>","<android.webkit.WebView: void onStartTemporaryDetach()>"
"<android.view.WindowInsets$Builder: void <init>()>","<android.view.WindowInsets$Builder: void <init>()>"
"<android.view.View: void drawableStateChanged()>","<android.view.View: void drawableStateChanged()>"
"<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>","<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>"
"<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setExtras(android.os.Bundle)>"
"<android.animation.LayoutTransition: long getDuration(int)>","<android.animation.LayoutTransition: long getDuration(int)>"
"<java.util.OptionalDouble: double orElseGet(java.util.function.DoubleSupplier)>","<java.util.OptionalDouble: double orElseGet(java.util.function.DoubleSupplier)>"
"<android.view.View: float getAlpha()>","<android.view.View: float getAlpha()>"
"<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>","<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>"
"<android.transition.Transition$EpicenterCallback: void <init>()>","<android.transition.Transition$EpicenterCallback: void <init>()>"
"<android.view.inputmethod.InputConnection: boolean reportFullscreenMode(boolean)>","<android.view.inputmethod.InputConnection: boolean reportFullscreenMode(boolean)>"
"<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>","<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>"
"<java.util.concurrent.TimeUnit: long toNanos(long)>","<java.util.concurrent.TimeUnit: long toNanos(long)>"
"<android.webkit.WebChromeClient$CustomViewCallback: void onCustomViewHidden()>","<android.webkit.WebChromeClient$CustomViewCallback: void onCustomViewHidden()>"
"<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)>","<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)>"
"<android.view.ContentInfo: void <init>()>","<android.view.ContentInfo: void <init>()>"
"<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>"
"<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>","<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>"
"<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)>","<android.text.SpannableStringBuilder: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
"<java.lang.Long: java.lang.String toBinaryString(long)>","<java.lang.Long: java.lang.String toBinaryString(long)>"
"<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>","<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>"
"<android.provider.Settings$System: void <init>()>","<android.provider.Settings$System: void <init>()>"
"<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>","<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>"
"<android.view.View: void setZ(float)>","<android.view.View: void setZ(float)>"
"<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)>","<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)>"
"<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>","<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()>","<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setManual(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setManual(boolean)>"
"<java.util.zip.ZipEntry: void setCrc(long)>","<java.util.zip.ZipEntry: void setCrc(long)>"
"<android.webkit.WebView$WebViewTransport: void setWebView(android.webkit.WebView)>","<android.webkit.WebView$WebViewTransport: void setWebView(android.webkit.WebView)>"
"<java.util.Date: void setYear(int)>","<java.util.Date: void setYear(int)>"
"<java.text.DateFormat: void setCalendar(java.util.Calendar)>","<java.text.DateFormat: void setCalendar(java.util.Calendar)>"
"<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)>","<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)>"
"<java.text.ParseException: int getErrorOffset()>","<java.text.ParseException: int getErrorOffset()>"
"<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>","<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>"
"<java.util.concurrent.atomic.AtomicLong: long getAndAccumulate(long,java.util.function.LongBinaryOperator)>","<java.util.concurrent.atomic.AtomicLong: long getAndAccumulate(long,java.util.function.LongBinaryOperator)>"
"<java.net.URLConnection: long getExpiration()>","<java.net.URLConnection: long getExpiration()>"
"<java.io.ObjectStreamField: java.lang.String toString()>","<java.io.ObjectStreamField: java.lang.String toString()>"
"<android.view.KeyEvent: boolean isGamepadButton(int)>","<android.view.KeyEvent: boolean isGamepadButton(int)>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>"
"<android.hardware.TriggerEventListener: void <init>()>","<android.hardware.TriggerEventListener: void <init>()>"
"<java.lang.Math: double cosh(double)>","<java.lang.Math: double cosh(double)>"
"<android.view.ViewGroup: void dispatchProvideStructure(android.view.ViewStructure)>","<android.view.ViewGroup: void dispatchProvideStructure(android.view.ViewStructure)>"
"<java.util.Spliterator: int characteristics()>","<java.util.Spliterator: int characteristics()>"
"<android.view.ViewDebug$RecyclerTraceType: void <clinit>()>","<android.view.ViewDebug$RecyclerTraceType: void <clinit>()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets build()>","<android.view.WindowInsets$Builder: android.view.WindowInsets build()>"
"<android.widget.PopupWindow: int getHeight()>","<android.widget.PopupWindow: int getHeight()>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int)>"
"<android.os.BaseBundle: int getInt(java.lang.String,int)>","<android.os.BaseBundle: int getInt(java.lang.String,int)>"
"<android.webkit.CookieManager: boolean acceptCookie()>","<android.webkit.CookieManager: boolean acceptCookie()>"
"<java.nio.charset.CharsetDecoder: java.lang.String replacement()>","<java.nio.charset.CharsetDecoder: java.lang.String replacement()>"
"<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>","<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>"
"<android.graphics.Matrix: boolean preRotate(float)>","<android.graphics.Matrix: boolean preRotate(float)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetVolatile(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetVolatile(boolean,boolean)>"
"<android.app.Activity: boolean onNavigateUp()>","<android.app.Activity: boolean onNavigateUp()>"
"<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>","<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>"
"<java.time.chrono.ChronoZonedDateTime: int hashCode()>","<java.time.chrono.ChronoZonedDateTime: int hashCode()>"
"<java.lang.SecurityManager: boolean inClass(java.lang.String)>","<java.lang.SecurityManager: boolean inClass(java.lang.String)>"
"<android.widget.PopupWindow: void setAttachedInDecor(boolean)>","<android.widget.PopupWindow: void setAttachedInDecor(boolean)>"
"<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>","<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>"
"<java.util.Arrays: int compareUnsigned(byte[],int,int,byte[],int,int)>","<java.util.Arrays: int compareUnsigned(byte[],int,int,byte[],int,int)>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>","<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>"
"<java.util.Dictionary: java.lang.Object get(java.lang.Object)>","<java.util.Dictionary: java.lang.Object get(java.lang.Object)>"
"<java.time.Instant: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.Instant: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>","<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>"
"<android.media.session.MediaController$Callback: void onQueueChanged(java.util.List)>","<android.media.session.MediaController$Callback: void onQueueChanged(java.util.List)>"
"<android.os.Parcel: double[] createDoubleArray()>","<android.os.Parcel: double[] createDoubleArray()>"
"<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>","<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>"
"<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>"
"<android.view.Display: int getPixelFormat()>","<android.view.Display: int getPixelFormat()>"
"<android.hardware.HardwareBuffer: void <clinit>()>","<android.hardware.HardwareBuffer: void <clinit>()>"
"<android.widget.ListView: int getDividerHeight()>","<android.widget.ListView: int getDividerHeight()>"
"<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()>","<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()>"
"<java.lang.SecurityManager: void checkSetFactory()>","<java.lang.SecurityManager: void checkSetFactory()>"
"<android.webkit.WebViewClient: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)>","<android.webkit.WebViewClient: void onReceivedHttpError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceResponse)>"
"<java.time.Instant: long getEpochSecond()>","<java.time.Instant: long getEpochSecond()>"
"<java.time.Instant: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.util.Optional: java.lang.String toString()>","<java.util.Optional: java.lang.String toString()>"
"<android.graphics.Region$Op: android.graphics.Region$Op[] values()>","<android.graphics.Region$Op: android.graphics.Region$Op[] values()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setIntegerPart(java.lang.String)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setIntegerPart(java.lang.String)>"
"<java.time.chrono.ChronoZonedDateTime: java.lang.String toString()>","<java.time.chrono.ChronoZonedDateTime: java.lang.String toString()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<android.view.KeyEvent: int getFlags()>","<android.view.KeyEvent: int getFlags()>"
"<java.util.Collections: void copy(java.util.List,java.util.List)>","<java.util.Collections: void copy(java.util.List,java.util.List)>"
"<android.media.session.MediaSession: void setExtras(android.os.Bundle)>","<android.media.session.MediaSession: void setExtras(android.os.Bundle)>"
"<android.view.contentcapture.ContentCaptureSession: void notifySessionPaused()>","<android.view.contentcapture.ContentCaptureSession: void notifySessionPaused()>"
"<android.transition.Transition: java.lang.Object clone()>","<android.transition.Transition: java.lang.Object clone()>"
"<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>","<java.util.concurrent.LinkedBlockingQueue: boolean remove(java.lang.Object)>"
"<android.webkit.WebSettings: void setAlgorithmicDarkeningAllowed(boolean)>","<android.webkit.WebSettings: void setAlgorithmicDarkeningAllowed(boolean)>"
"<android.widget.TextView: void setTextSelectHandleRight(int)>","<android.widget.TextView: void setTextSelectHandleRight(int)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>"
"<java.util.List: java.util.ListIterator listIterator()>","<java.util.List: java.util.ListIterator listIterator()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>","<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>"
"<android.graphics.RenderNode: boolean setElevation(float)>","<android.graphics.RenderNode: boolean setElevation(float)>"
"<java.io.DataInput: java.lang.String readUTF()>","<java.io.DataInput: java.lang.String readUTF()>"
"<java.time.LocalDate: int hashCode()>","<java.time.LocalDate: int hashCode()>"
"<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>","<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>"
"<java.lang.StringBuffer: int indexOf(java.lang.String,int)>","<java.lang.StringBuffer: int indexOf(java.lang.String,int)>"
"<java.io.File: java.io.File getParentFile()>","<java.io.File: java.io.File getParentFile()>"
"<java.lang.System: void runFinalization()>","<java.lang.System: void runFinalization()>"
"<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>","<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>"
"<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>","<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>"
"<android.view.inputmethod.InputMethodInfo: void <clinit>()>","<android.view.inputmethod.InputMethodInfo: void <clinit>()>"
"<android.graphics.ImageDecoder$ImageInfo: void <init>()>","<android.graphics.ImageDecoder$ImageInfo: void <init>()>"
"<java.util.zip.ZipEntry: java.lang.String toString()>","<java.util.zip.ZipEntry: java.lang.String toString()>"
"<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>","<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)>"
"<android.icu.util.ULocale: java.util.Iterator getKeywords()>","<android.icu.util.ULocale: java.util.Iterator getKeywords()>"
"<android.app.Activity: void onStop()>","<android.app.Activity: void onStop()>"
"<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>","<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>"
"<java.io.OutputStream: void close()>","<java.io.OutputStream: void close()>"
"<java.util.regex.Pattern: int flags()>","<java.util.regex.Pattern: int flags()>"
"<android.media.session.PlaybackState: float getPlaybackSpeed()>","<android.media.session.PlaybackState: float getPlaybackSpeed()>"
"<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure$HtmlInfo)>","<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure$HtmlInfo)>"
"<android.app.Notification$InboxStyle: void <init>()>","<android.app.Notification$InboxStyle: void <init>()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>","<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>"
"<java.util.ArrayList: int lastIndexOf(java.lang.Object)>","<java.util.ArrayList: int lastIndexOf(java.lang.Object)>"
"<android.animation.PropertyValuesHolder: void <init>()>","<android.animation.PropertyValuesHolder: void <init>()>"
"<android.view.Window: void closeAllPanels()>","<android.view.Window: void closeAllPanels()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()>","<java.util.concurrent.locks.ReentrantReadWriteLock: int getQueueLength()>"
"<android.text.SpannableString: void removeSpan(java.lang.Object)>","<android.text.SpannableString: void removeSpan(java.lang.Object)>"
"<android.view.animation.Animation: void setBackgroundColor(int)>","<android.view.animation.Animation: void setBackgroundColor(int)>"
"<android.view.ViewStructure: android.view.autofill.AutofillId getAutofillId()>","<android.view.ViewStructure: android.view.autofill.AutofillId getAutofillId()>"
"<android.graphics.RenderNode: boolean setPivotY(float)>","<android.graphics.RenderNode: boolean setPivotY(float)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>"
"<android.view.InputDevice: java.util.List getMotionRanges()>","<android.view.InputDevice: java.util.List getMotionRanges()>"
"<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>","<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>"
"<java.util.Map: java.util.Map copyOf(java.util.Map)>","<java.util.Map: java.util.Map copyOf(java.util.Map)>"
"<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>","<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
"<android.webkit.ClientCertRequest: java.lang.String[] getKeyTypes()>","<android.webkit.ClientCertRequest: java.lang.String[] getKeyTypes()>"
"<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>","<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>"
"<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>","<java.util.jar.Attributes: boolean containsKey(java.lang.Object)>"
"<java.util.LinkedHashSet: java.util.Spliterator spliterator()>","<java.util.LinkedHashSet: java.util.Spliterator spliterator()>"
"<android.graphics.ColorSpace: int getDataSpace()>","<android.graphics.ColorSpace: int getDataSpace()>"
"<android.content.res.Configuration: android.os.LocaleList getLocales()>","<android.content.res.Configuration: android.os.LocaleList getLocales()>"
"<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.app.ActionBar: android.view.View getCustomView()>","<android.app.ActionBar: android.view.View getCustomView()>"
"<java.nio.file.Path: int hashCode()>","<java.nio.file.Path: int hashCode()>"
"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>","<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>"
"<android.content.pm.FeatureInfo: java.lang.String toString()>","<android.content.pm.FeatureInfo: java.lang.String toString()>"
"<java.nio.channels.MembershipKey: void drop()>","<java.nio.channels.MembershipKey: void drop()>"
"<android.view.View: void setFilterTouchesWhenObscured(boolean)>","<android.view.View: void setFilterTouchesWhenObscured(boolean)>"
"<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>","<android.webkit.WebView: void setHorizontalScrollbarOverlay(boolean)>"
"<android.content.ClipData$Item: void <init>(android.content.Intent)>","<android.content.ClipData$Item: void <init>(android.content.Intent)>"
"<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>","<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>"
"<java.nio.ByteBuffer: long getLong()>","<java.nio.ByteBuffer: long getLong()>"
"<java.io.PrintWriter: void println(int)>","<java.io.PrintWriter: void println(int)>"
"<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>","<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>"
"<android.graphics.Rect: boolean intersect(int,int,int,int)>","<android.graphics.Rect: boolean intersect(int,int,int,int)>"
"<java.util.Hashtable: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<java.util.HashMap: void <init>()>","<java.util.HashMap: void <init>()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.nio.charset.CharsetEncoder: byte[] replacement()>","<java.nio.charset.CharsetEncoder: byte[] replacement()>"
"<android.widget.TextView: int getLastBaselineToBottomHeight()>","<android.widget.TextView: int getLastBaselineToBottomHeight()>"
"<java.lang.StringBuilder: void <init>(int)>","<java.lang.StringBuilder: void <init>(int)>"
"<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>","<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>"
"<android.graphics.RecordingCanvas: void drawOval(float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawOval(float,float,float,float,android.graphics.Paint)>"
"<java.nio.FloatBuffer: java.nio.Buffer position(int)>","<java.nio.FloatBuffer: java.nio.Buffer position(int)>"
"<android.view.WindowInsets: boolean isVisible(int)>","<android.view.WindowInsets: boolean isVisible(int)>"
"<android.view.inputmethod.InputConnection: void closeConnection()>","<android.view.inputmethod.InputConnection: void closeConnection()>"
"<android.content.pm.PackageManager$ResolveInfoFlags: long getValue()>","<android.content.pm.PackageManager$ResolveInfoFlags: long getValue()>"
"<android.media.session.MediaSession$QueueItem: void <clinit>()>","<android.media.session.MediaSession$QueueItem: void <clinit>()>"
"<java.time.Instant: java.time.Instant minus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.Instant minus(java.time.temporal.TemporalAmount)>"
"<android.view.textclassifier.TextClassifierEvent: void <init>(android.view.textclassifier.TextClassifierEvent$1)>","<android.view.textclassifier.TextClassifierEvent: void <init>(android.view.textclassifier.TextClassifierEvent$1)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"
"<android.view.View: android.graphics.Matrix getAnimationMatrix()>","<android.view.View: android.graphics.Matrix getAnimationMatrix()>"
"<org.json.JSONArray: org.json.JSONArray put(int,double)>","<org.json.JSONArray: org.json.JSONArray put(int,double)>"
"<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>","<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>"
"<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>"
"<android.view.ViewGroup: void setClipChildren(boolean)>","<android.view.ViewGroup: void setClipChildren(boolean)>"
"<java.nio.channels.SeekableByteChannel: long position()>","<java.nio.channels.SeekableByteChannel: long position()>"
"<android.widget.ListPopupWindow: void setDropDownGravity(int)>","<android.widget.ListPopupWindow: void setDropDownGravity(int)>"
"<android.view.View$BaseSavedState: void writeToParcel(android.os.Parcel,int)>","<android.view.View$BaseSavedState: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: void parallelSort(long[],int,int)>","<java.util.Arrays: void parallelSort(long[],int,int)>"
"<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>","<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>"
"<android.view.View: int getPaddingRight()>","<android.view.View: int getPaddingRight()>"
"<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>","<java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>"
"<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener)>","<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener)>"
"<android.animation.LayoutTransition: void setStagger(int,long)>","<android.animation.LayoutTransition: void setStagger(int,long)>"
"<java.time.Instant: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<io.flutter.plugins.webviewflutter.d0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.d0: void a(java.lang.Object,y.a$e)>"
"<java.nio.IntBuffer: int arrayOffset()>","<java.nio.IntBuffer: int arrayOffset()>"
"<java.net.Socket: boolean getKeepAlive()>","<java.net.Socket: boolean getKeepAlive()>"
"<android.widget.Filter: void <init>()>","<android.widget.Filter: void <init>()>"
"<android.animation.ValueAnimator: java.lang.String toString()>","<android.animation.ValueAnimator: java.lang.String toString()>"
"<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>","<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>"
"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags)>"
"<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel position(long)>","<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel position(long)>"
"<android.view.MenuItem: boolean isChecked()>","<android.view.MenuItem: boolean isChecked()>"
"<android.view.inputmethod.InputContentInfo: void requestPermission()>","<android.view.inputmethod.InputContentInfo: void requestPermission()>"
"<java.io.ByteArrayOutputStream: byte[] toByteArray()>","<java.io.ByteArrayOutputStream: byte[] toByteArray()>"
"<android.widget.RemoteViews: java.lang.String getPackage()>","<android.widget.RemoteViews: java.lang.String getPackage()>"
"<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>","<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>"
"<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.view.ContentInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.ContentInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Fragment: void onStop()>","<android.app.Fragment: void onStop()>"
"<java.nio.file.attribute.FileTime: java.time.Instant toInstant()>","<java.nio.file.attribute.FileTime: java.time.Instant toInstant()>"
"<android.view.SurfaceView: void draw(android.graphics.Canvas)>","<android.view.SurfaceView: void draw(android.graphics.Canvas)>"
"<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>","<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>"
"<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Insets)>","<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Insets)>"
"<android.widget.TextView: void setMinLines(int)>","<android.widget.TextView: void setMinLines(int)>"
"<java.lang.reflect.Field: boolean isEnumConstant()>","<java.lang.reflect.Field: boolean isEnumConstant()>"
"<java.net.URLConnection: java.util.Map getRequestProperties()>","<java.net.URLConnection: java.util.Map getRequestProperties()>"
"<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.ArrayDeque: boolean offer(java.lang.Object)>","<java.util.ArrayDeque: boolean offer(java.lang.Object)>"
"<java.util.OptionalInt: boolean isPresent()>","<java.util.OptionalInt: boolean isPresent()>"
"<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>"
"<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder addMessage(java.lang.String)>","<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$Builder addMessage(java.lang.String)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>","<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>"
"<android.os.Debug: long getPss()>","<android.os.Debug: long getPss()>"
"<java.util.IntSummaryStatistics: void <init>()>","<java.util.IntSummaryStatistics: void <init>()>"
"<android.graphics.Paint: android.graphics.Xfermode getXfermode()>","<android.graphics.Paint: android.graphics.Xfermode getXfermode()>"
"<io.flutter.plugins.webviewflutter.c3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.c3: void a(java.lang.Object)>"
"<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)>","<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>","<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>"
"<android.view.View: boolean getKeepScreenOn()>","<android.view.View: boolean getKeepScreenOn()>"
"<android.app.ActivityManager: void restartPackage(java.lang.String)>","<android.app.ActivityManager: void restartPackage(java.lang.String)>"
"<android.hardware.lights.LightsRequest$Builder: void <init>()>","<android.hardware.lights.LightsRequest$Builder: void <init>()>"
"<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>","<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>"
"<java.io.PrintWriter: void println(char[])>","<java.io.PrintWriter: void println(char[])>"
"<java.util.Date: void setSeconds(int)>","<java.util.Date: void setSeconds(int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>"
"<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>","<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>"
"<android.text.style.TtsSpan: void <init>(android.os.Parcel)>","<android.text.style.TtsSpan: void <init>(android.os.Parcel)>"
"<android.widget.TextView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.TextView: java.lang.CharSequence getAccessibilityClassName()>"
"<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>","<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>"
"<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()>","<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()>"
"<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void set(java.lang.Object,java.lang.Object)>"
"<org.json.JSONObject: java.lang.String quote(java.lang.String)>","<org.json.JSONObject: java.lang.String quote(java.lang.String)>"
"<android.view.autofill.AutofillId: void writeToParcel(android.os.Parcel,int)>","<android.view.autofill.AutofillId: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>","<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>"
"<android.content.Intent$ShortcutIconResource: void <init>()>","<android.content.Intent$ShortcutIconResource: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime of(int,int,int)>","<java.time.LocalTime: java.time.LocalTime of(int,int,int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)>","<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,int)>"
"<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>","<java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>"
"<android.widget.AbsListView: boolean isScrollingCacheEnabled()>","<android.widget.AbsListView: boolean isScrollingCacheEnabled()>"
"<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>","<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>"
"<java.time.format.DateTimeFormatter: java.util.Set getResolverFields()>","<java.time.format.DateTimeFormatter: java.util.Set getResolverFields()>"
"<android.graphics.RecordingCanvas: int getHeight()>","<android.graphics.RecordingCanvas: int getHeight()>"
"<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()>","<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()>"
"<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>","<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>"
"<android.app.VoiceInteractor$CommandRequest: void <init>(java.lang.String,android.os.Bundle)>","<android.app.VoiceInteractor$CommandRequest: void <init>(java.lang.String,android.os.Bundle)>"
"<android.app.Fragment: void onCreate(android.os.Bundle)>","<android.app.Fragment: void onCreate(android.os.Bundle)>"
"<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>","<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>"
"<android.view.ViewGroup: boolean onStartNestedScroll(android.view.View,android.view.View,int)>","<android.view.ViewGroup: boolean onStartNestedScroll(android.view.View,android.view.View,int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setGroupSummary(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setGroupSummary(boolean)>"
"<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>","<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>"
"<java.nio.CharBuffer: char get()>","<java.nio.CharBuffer: char get()>"
"<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>","<java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>"
"<android.view.View: void announceForAccessibility(java.lang.CharSequence)>","<android.view.View: void announceForAccessibility(java.lang.CharSequence)>"
"<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbShortTitle()>","<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbShortTitle()>"
"<android.graphics.Typeface$Builder: void <init>(java.lang.String)>","<android.graphics.Typeface$Builder: void <init>(java.lang.String)>"
"<android.content.Context: int checkCallingPermission(java.lang.String)>","<android.content.Context: int checkCallingPermission(java.lang.String)>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setExtras(android.os.Bundle)>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setExtras(android.os.Bundle)>"
"<android.os.Parcel: byte[] createByteArray()>","<android.os.Parcel: byte[] createByteArray()>"
"<android.content.SharedPreferences$Editor: boolean commit()>","<android.content.SharedPreferences$Editor: boolean commit()>"
"<android.app.Activity: android.content.ComponentName getCallingActivity()>","<android.app.Activity: android.content.ComponentName getCallingActivity()>"
"<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>","<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>"
"<android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>","<android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>"
"<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>","<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>"
"<android.view.Window: void unregisterScrollCaptureCallback(android.view.ScrollCaptureCallback)>","<android.view.Window: void unregisterScrollCaptureCallback(android.view.ScrollCaptureCallback)>"
"<java.time.chrono.ChronoLocalDateTime: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoLocalDateTime: boolean equals(java.lang.Object)>"
"<android.window.SplashScreen$OnExitAnimationListener: void onSplashScreenExit(android.window.SplashScreenView)>","<android.window.SplashScreen$OnExitAnimationListener: void onSplashScreenExit(android.window.SplashScreenView)>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setExtras(android.os.Bundle)>"
"<java.lang.reflect.Modifier: boolean isAbstract(int)>","<java.lang.reflect.Modifier: boolean isAbstract(int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>","<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>"
"<java.net.URI: boolean equals(java.lang.Object)>","<java.net.URI: boolean equals(java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>"
"<android.graphics.ColorSpace: int getComponentCount()>","<android.graphics.ColorSpace: int getComponentCount()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>"
"<android.widget.Toolbar: void <init>(android.content.Context)>","<android.widget.Toolbar: void <init>(android.content.Context)>"
"<java.io.InputStream: int read(byte[])>","<java.io.InputStream: int read(byte[])>"
"<android.view.WindowManager$LayoutParams: void <init>(int)>","<android.view.WindowManager$LayoutParams: void <init>(int)>"
"<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>","<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>"
"<android.content.pm.PackageInstaller$Session: void requestChecksums(java.lang.String,int,java.util.List,java.util.concurrent.Executor,android.content.pm.PackageManager$OnChecksumsReadyListener)>","<android.content.pm.PackageInstaller$Session: void requestChecksums(java.lang.String,int,java.util.List,java.util.concurrent.Executor,android.content.pm.PackageManager$OnChecksumsReadyListener)>"
"<java.util.stream.IntStream: int sum()>","<java.util.stream.IntStream: int sum()>"
"<android.widget.ListView: void setSelection(int)>","<android.widget.ListView: void setSelection(int)>"
"<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)>","<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)>"
"<java.util.Properties: void load(java.io.Reader)>","<java.util.Properties: void load(java.io.Reader)>"
"<android.media.session.MediaController$TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.graphics.Outline: void set(android.graphics.Outline)>","<android.graphics.Outline: void set(android.graphics.Outline)>"
"<java.util.stream.LongStream: java.util.LongSummaryStatistics summaryStatistics()>","<java.util.stream.LongStream: java.util.LongSummaryStatistics summaryStatistics()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumerator(long)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumerator(long)>"
"<android.view.View: void onAnimationEnd()>","<android.view.View: void onAnimationEnd()>"
"<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>","<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>"
"<android.graphics.Canvas: int getDensity()>","<android.graphics.Canvas: int getDensity()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>"
"<android.graphics.Paint$FontMetrics: void <init>()>","<android.graphics.Paint$FontMetrics: void <init>()>"
"<java.util.IdentityHashMap: void replaceAll(java.util.function.BiFunction)>","<java.util.IdentityHashMap: void replaceAll(java.util.function.BiFunction)>"
"<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>","<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>"
"<android.net.Uri: boolean isHierarchical()>","<android.net.Uri: boolean isHierarchical()>"
"<android.animation.LayoutTransition: void enableTransitionType(int)>","<android.animation.LayoutTransition: void enableTransitionType(int)>"
"<android.view.textclassifier.TextLanguage$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLanguage$Request: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Dialog: void registerForContextMenu(android.view.View)>","<android.app.Dialog: void registerForContextMenu(android.view.View)>"
"<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>","<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>"
"<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)>","<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)>"
"<java.nio.channels.FileChannel: void <init>()>","<java.nio.channels.FileChannel: void <init>()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)>"
"<android.view.MenuItem: android.view.View getActionView()>","<android.view.MenuItem: android.view.View getActionView()>"
"<java.time.LocalDate: java.time.LocalDate now()>","<java.time.LocalDate: java.time.LocalDate now()>"
"<android.graphics.PorterDuff: void <init>()>","<android.graphics.PorterDuff: void <init>()>"
"<android.widget.Toolbar: int getContentInsetStart()>","<android.widget.Toolbar: int getContentInsetStart()>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)>"
"<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<java.lang.reflect.Modifier: int constructorModifiers()>","<java.lang.reflect.Modifier: int constructorModifiers()>"
"<android.content.Intent: java.lang.String getType()>","<android.content.Intent: java.lang.String getType()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>","<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>"
"<android.webkit.WebStorage$Origin: void <init>()>","<android.webkit.WebStorage$Origin: void <init>()>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setConfirmLabel(java.lang.CharSequence)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setConfirmLabel(java.lang.CharSequence)>"
"<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)>","<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long,long)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long,long)>"
"<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
"<java.lang.Object: void wait(long,int)>","<java.lang.Object: void wait(long,int)>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>"
"<org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>","<org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>"
"<android.webkit.WebView$HitTestResult: java.lang.String getExtra()>","<android.webkit.WebView$HitTestResult: java.lang.String getExtra()>"
"<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>","<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isSealed()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isSealed()>"
"<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>"
"<java.nio.file.attribute.FileTime: java.lang.String toString()>","<java.nio.file.attribute.FileTime: java.lang.String toString()>"
"<android.widget.TextView: void setHint(java.lang.CharSequence)>","<android.widget.TextView: void setHint(java.lang.CharSequence)>"
"<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>","<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>"
"<android.graphics.Paint: float getUnderlineThickness()>","<android.graphics.Paint: float getUnderlineThickness()>"
"<android.content.IntentFilter: void setPriority(int)>","<android.content.IntentFilter: void setPriority(int)>"
"<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setIntegerPart(long)>","<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setIntegerPart(long)>"
"<org.json.JSONArray: org.json.JSONArray put(boolean)>","<org.json.JSONArray: org.json.JSONArray put(boolean)>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setFlags(int)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setFlags(int)>"
"<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>","<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>"
"<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>","<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>"
"<android.graphics.Color: int hashCode()>","<android.graphics.Color: int hashCode()>"
"<java.io.Console: char[] readPassword()>","<java.io.Console: char[] readPassword()>"
"<java.util.Collections: java.util.NavigableMap checkedNavigableMap(java.util.NavigableMap,java.lang.Class,java.lang.Class)>","<java.util.Collections: java.util.NavigableMap checkedNavigableMap(java.util.NavigableMap,java.lang.Class,java.lang.Class)>"
"<android.hardware.lights.Light: int hashCode()>","<android.hardware.lights.Light: int hashCode()>"
"<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>","<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>"
"<android.view.View: void startAnimation(android.view.animation.Animation)>","<android.view.View: void startAnimation(android.view.animation.Animation)>"
"<android.view.TextureView: void onAttachedToWindow()>","<android.view.TextureView: void onAttachedToWindow()>"
"<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>","<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>"
"<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>","<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>"
"<android.view.View: void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>"
"<android.util.TypedValue: float getFloat()>","<android.util.TypedValue: float getFloat()>"
"<java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)>","<java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTag(java.lang.Object)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTag(java.lang.Object)>"
"<java.util.ListIterator: boolean hasNext()>","<java.util.ListIterator: boolean hasNext()>"
"<java.io.PrintStream: void <init>(java.lang.String,java.nio.charset.Charset)>","<java.io.PrintStream: void <init>(java.lang.String,java.nio.charset.Charset)>"
"<android.content.res.Configuration: int diff(android.content.res.Configuration)>","<android.content.res.Configuration: int diff(android.content.res.Configuration)>"
"<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)>","<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)>"
"<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.graphics.Color: long convert(int,android.graphics.ColorSpace)>","<android.graphics.Color: long convert(int,android.graphics.ColorSpace)>"
"<android.content.Context: boolean isDeviceProtectedStorage()>","<android.content.Context: boolean isDeviceProtectedStorage()>"
"<java.util.Calendar: void <init>()>","<java.util.Calendar: void <init>()>"
"<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>","<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>"
"<android.app.Fragment: android.app.Fragment getParentFragment()>","<android.app.Fragment: android.app.Fragment getParentFragment()>"
"<java.util.LinkedList: boolean offerFirst(java.lang.Object)>","<java.util.LinkedList: boolean offerFirst(java.lang.Object)>"
"<android.content.ClipData$Item: java.lang.String toString()>","<android.content.ClipData$Item: java.lang.String toString()>"
"<android.graphics.Region: java.lang.String toString()>","<android.graphics.Region: java.lang.String toString()>"
"<android.webkit.WebView: boolean requestFocus(int,android.graphics.Rect)>","<android.webkit.WebView: boolean requestFocus(int,android.graphics.Rect)>"
"<android.animation.Keyframe: float getFraction()>","<android.animation.Keyframe: float getFraction()>"
"<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>"
"<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>"
"<io.flutter.plugins.webviewflutter.i3: void <init>()>","<io.flutter.plugins.webviewflutter.i3: void <init>()>"
"<android.graphics.Paint$FontMetricsInt: boolean equals(java.lang.Object)>","<android.graphics.Paint$FontMetricsInt: boolean equals(java.lang.Object)>"
"<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>","<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>"
"<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>","<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>"
"<java.lang.Class: java.lang.Object[] getEnumConstants()>","<java.lang.Class: java.lang.Object[] getEnumConstants()>"
"<android.view.View: void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)>","<android.view.View: void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)>"
"<java.lang.Class: java.lang.Class[] getClasses()>","<java.lang.Class: java.lang.Class[] getClasses()>"
"<java.lang.Float: java.lang.Float valueOf(float)>","<java.lang.Float: java.lang.Float valueOf(float)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator)>","<java.util.stream.DoubleStream: java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>","<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>"
"<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>","<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>"
"<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>","<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)>"
"<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>","<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>"
"<java.lang.Math: double nextDown(double)>","<java.lang.Math: double nextDown(double)>"
"<android.widget.AbsListView: long[] getCheckedItemIds()>","<android.widget.AbsListView: long[] getCheckedItemIds()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>"
"<java.util.NoSuchElementException: void <init>(java.lang.String)>","<java.util.NoSuchElementException: void <init>(java.lang.String)>"
"<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>","<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>"
"<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.view.MotionEvent: float getRawY()>","<android.view.MotionEvent: float getRawY()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordEndIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordEndIndex()>"
"<java.util.function.DoubleUnaryOperator: double applyAsDouble(double)>","<java.util.function.DoubleUnaryOperator: double applyAsDouble(double)>"
"<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$Session openSession(int)>","<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$Session openSession(int)>"
"<java.time.Clock: long millis()>","<java.time.Clock: long millis()>"
"<java.lang.reflect.Parameter: int getModifiers()>","<java.lang.reflect.Parameter: int getModifiers()>"
"<java.util.Date: void setDate(int)>","<java.util.Date: void setDate(int)>"
"<android.text.PrecomputedText: java.lang.String toString()>","<android.text.PrecomputedText: java.lang.String toString()>"
"<java.lang.ClassFormatError: void <init>()>","<java.lang.ClassFormatError: void <init>()>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>"
"<android.view.SurfaceControl$Transaction: void apply()>","<android.view.SurfaceControl$Transaction: void apply()>"
"<android.app.Fragment: boolean isRemoving()>","<android.app.Fragment: boolean isRemoving()>"
"<android.app.RemoteInput: void setResultsSource(android.content.Intent,int)>","<android.app.RemoteInput: void setResultsSource(android.content.Intent,int)>"
"<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>"
"<java.nio.file.FileSystem: void close()>","<java.nio.file.FileSystem: void close()>"
"<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>"
"<java.lang.Byte: void <clinit>()>","<java.lang.Byte: void <clinit>()>"
"<java.util.Spliterator$OfInt: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfInt: void forEachRemaining(java.lang.Object)>"
"<java.io.InputStreamReader: int read()>","<java.io.InputStreamReader: int read()>"
"<java.lang.Class: int getModifiers()>","<java.lang.Class: int getModifiers()>"
"<android.view.View: boolean isVerticalScrollBarEnabled()>","<android.view.View: boolean isVerticalScrollBarEnabled()>"
"<android.app.ActivityManager$TaskDescription: void <init>(android.app.ActivityManager$TaskDescription)>","<android.app.ActivityManager$TaskDescription: void <init>(android.app.ActivityManager$TaskDescription)>"
"<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: android.text.Editable append(java.lang.CharSequence,int,int)>"
"<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>","<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>"
"<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()>","<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()>"
"<java.util.AbstractSequentialList: java.util.Iterator iterator()>","<java.util.AbstractSequentialList: java.util.Iterator iterator()>"
"<android.view.View: boolean canResolveTextDirection()>","<android.view.View: boolean canResolveTextDirection()>"
"<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()>","<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()>"
"<android.util.Size: void <init>(int,int)>","<android.util.Size: void <init>(int,int)>"
"<android.app.Activity: android.media.session.MediaController getMediaController()>","<android.app.Activity: android.media.session.MediaController getMediaController()>"
"<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>","<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>"
"<android.app.ActionBar$TabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>","<android.app.ActionBar$TabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>"
"<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()>","<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()>"
"<android.graphics.Rect: java.lang.String flattenToString()>","<android.graphics.Rect: java.lang.String flattenToString()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder addAction(android.app.RemoteAction)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder addAction(android.app.RemoteAction)>"
"<java.util.NavigableSet: java.util.Iterator descendingIterator()>","<java.util.NavigableSet: java.util.Iterator descendingIterator()>"
"<android.content.Intent: void setSourceBounds(android.graphics.Rect)>","<android.content.Intent: void setSourceBounds(android.graphics.Rect)>"
"<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>","<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.text.NoCopySpan$Concrete: void <init>()>","<android.text.NoCopySpan$Concrete: void <init>()>"
"<java.nio.Buffer: java.nio.Buffer mark()>","<java.nio.Buffer: java.nio.Buffer mark()>"
"<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>","<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>"
"<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>","<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>"
"<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>","<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>"
"<java.util.Collections: java.util.Enumeration emptyEnumeration()>","<java.util.Collections: java.util.Enumeration emptyEnumeration()>"
"<android.widget.AbsListView: void setVerticalScrollbarPosition(int)>","<android.widget.AbsListView: void setVerticalScrollbarPosition(int)>"
"<java.lang.reflect.Constructor: boolean isSynthetic()>","<java.lang.reflect.Constructor: boolean isSynthetic()>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setDismissalId(java.lang.String)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setDismissalId(java.lang.String)>"
"<java.lang.String: java.util.stream.IntStream codePoints()>","<java.lang.String: java.util.stream.IntStream codePoints()>"
"<java.util.LinkedList: java.lang.Object pollFirst()>","<java.util.LinkedList: java.lang.Object pollFirst()>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setTransliteration(java.lang.CharSequence)>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setTransliteration(java.lang.CharSequence)>"
"<android.view.RoundedCorner: int getRadius()>","<android.view.RoundedCorner: int getRadius()>"
"<android.view.textclassifier.TextSelection$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextSelection$Request: android.os.Bundle getExtras()>"
"<java.lang.Integer: java.lang.String toString(int,int)>","<java.lang.Integer: java.lang.String toString(int,int)>"
"<java.time.Instant: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>","<java.time.Instant: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>"
"<android.view.ViewGroup: void addView(android.view.View)>","<android.view.ViewGroup: void addView(android.view.View)>"
"<android.view.Window: boolean requestFeature(int)>","<android.view.Window: boolean requestFeature(int)>"
"<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>","<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>"
"<java.text.ParsePosition: boolean equals(java.lang.Object)>","<java.text.ParsePosition: boolean equals(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.q0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.q0: void a(java.lang.Object,y.a$e)>"
"<android.text.style.TtsSpan$FractionBuilder: void <init>(long,long,long)>","<android.text.style.TtsSpan$FractionBuilder: void <init>(long,long,long)>"
"<java.lang.reflect.Method: java.lang.String toString()>","<java.lang.reflect.Method: java.lang.String toString()>"
"<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<java.lang.Math: double pow(double,double)>","<java.lang.Math: double pow(double,double)>"
"<java.nio.file.FileStore: java.lang.String type()>","<java.nio.file.FileStore: java.lang.String type()>"
"<android.content.AttributionSource: void <clinit>()>","<android.content.AttributionSource: void <clinit>()>"
"<java.time.LocalDate: java.time.LocalDate plusDays(long)>","<java.time.LocalDate: java.time.LocalDate plusDays(long)>"
"<android.graphics.Insets: android.graphics.Insets subtract(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets subtract(android.graphics.Insets,android.graphics.Insets)>"
"<android.view.View: boolean hasPointerCapture()>","<android.view.View: boolean hasPointerCapture()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>"
"<android.animation.LayoutTransition: long getStagger(int)>","<android.animation.LayoutTransition: long getStagger(int)>"
"<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetVolatile(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetVolatile(java.lang.Object,java.lang.Object)>"
"<android.view.KeyEvent: boolean isAltPressed()>","<android.view.KeyEvent: boolean isAltPressed()>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>","<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>"
"<java.net.NetworkInterface: int getMTU()>","<java.net.NetworkInterface: int getMTU()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>"
"<java.util.LinkedList: void push(java.lang.Object)>","<java.util.LinkedList: void push(java.lang.Object)>"
"<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asLandscape()>","<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asLandscape()>"
"<java.util.DoubleSummaryStatistics: double getAverage()>","<java.util.DoubleSummaryStatistics: double getAverage()>"
"<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>","<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>"
"<android.content.res.TypedArray: int getResourceId(int,int)>","<android.content.res.TypedArray: int getResourceId(int,int)>"
"<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>","<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>"
"<android.widget.RemoteViews$RemoteCollectionItems: int getViewTypeCount()>","<android.widget.RemoteViews$RemoteCollectionItems: int getViewTypeCount()>"
"<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>","<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean getPlain()>","<java.util.concurrent.atomic.AtomicBoolean: boolean getPlain()>"
"<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>","<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>"
"<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo,int)>","<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo,int)>"
"<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>","<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>"
"<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState[] values()>","<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState[] values()>"
"<android.view.autofill.AutofillValue: void <init>()>","<android.view.autofill.AutofillValue: void <init>()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setRequiresCharging(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setRequiresCharging(boolean)>"
"<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)>"
"<android.app.Notification$WearableExtender: boolean getContentIntentAvailableOffline()>","<android.app.Notification$WearableExtender: boolean getContentIntentAvailableOffline()>"
"<java.util.regex.Matcher: boolean lookingAt()>","<java.util.regex.Matcher: boolean lookingAt()>"
"<android.view.inputmethod.InputMethodManager: void startStylusHandwriting(android.view.View)>","<android.view.inputmethod.InputMethodManager: void startStylusHandwriting(android.view.View)>"
"<android.media.MediaDescription: android.os.Bundle getExtras()>","<android.media.MediaDescription: android.os.Bundle getExtras()>"
"<java.util.Locale$LanguageRange: boolean equals(java.lang.Object)>","<java.util.Locale$LanguageRange: boolean equals(java.lang.Object)>"
"<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>","<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)>"
"<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>","<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>"
"<java.io.PrintWriter: void print(char)>","<java.io.PrintWriter: void print(char)>"
"<java.util.concurrent.atomic.AtomicInteger: void setOpaque(int)>","<java.util.concurrent.atomic.AtomicInteger: void setOpaque(int)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintShowBackgroundOnly(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintShowBackgroundOnly(boolean)>"
"<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>","<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>"
"<android.graphics.SurfaceTexture: void <init>(boolean)>","<android.graphics.SurfaceTexture: void <init>(boolean)>"
"<java.nio.channels.NetworkChannel: java.lang.Object getOption(java.net.SocketOption)>","<java.nio.channels.NetworkChannel: java.lang.Object getOption(java.net.SocketOption)>"
"<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream build()>","<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream build()>"
"<android.util.Rational: boolean isInfinite()>","<android.util.Rational: boolean isInfinite()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.ZoneOffset getOffset()>","<java.time.chrono.ChronoZonedDateTime: java.time.ZoneOffset getOffset()>"
"<java.time.Clock: java.time.Clock system(java.time.ZoneId)>","<java.time.Clock: java.time.Clock system(java.time.ZoneId)>"
"<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable)>","<android.view.inputmethod.BaseInputConnection: void setComposingSpans(android.text.Spannable)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.database.ContentObserver: void dispatchChange(boolean,java.util.Collection,int)>","<android.database.ContentObserver: void dispatchChange(boolean,java.util.Collection,int)>"
"<java.lang.NoSuchFieldException: void <init>(java.lang.String)>","<java.lang.NoSuchFieldException: void <init>(java.lang.String)>"
"<android.content.Intent: android.content.Intent setType(java.lang.String)>","<android.content.Intent: android.content.Intent setType(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)>"
"<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>","<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>"
"<android.view.animation.Transformation: void <init>()>","<android.view.animation.Transformation: void <init>()>"
"<android.view.ViewStructure$HtmlInfo: void <init>()>","<android.view.ViewStructure$HtmlInfo: void <init>()>"
"<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>","<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble min()>","<java.util.stream.DoubleStream: java.util.OptionalDouble min()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
"<android.graphics.drawable.Icon: android.net.Uri getUri()>","<android.graphics.drawable.Icon: android.net.Uri getUri()>"
"<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>","<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>"
"<android.widget.TextView: float getShadowDy()>","<android.widget.TextView: float getShadowDy()>"
"<java.text.DateFormat: boolean equals(java.lang.Object)>","<java.text.DateFormat: boolean equals(java.lang.Object)>"
"<java.io.InputStream: void <init>()>","<java.io.InputStream: void <init>()>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>"
"<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>","<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>"
"<android.view.ViewStructure: void setContextClickable(boolean)>","<android.view.ViewStructure: void setContextClickable(boolean)>"
"<android.content.pm.ChangedPackages: int describeContents()>","<android.content.pm.ChangedPackages: int describeContents()>"
"<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>","<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withDayOfYear(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withDayOfYear(int)>"
"<android.view.textclassifier.TextClassification$Request: void <clinit>()>","<android.view.textclassifier.TextClassification$Request: void <clinit>()>"
"<android.graphics.RenderNode: int getHeight()>","<android.graphics.RenderNode: int getHeight()>"
"<android.app.ActivityManager: int getMemoryClass()>","<android.app.ActivityManager: int getMemoryClass()>"
"<android.view.View: void scrollBy(int,int)>","<android.view.View: void scrollBy(int,int)>"
"<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request)>","<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request)>"
"<java.util.stream.IntStream: java.util.stream.IntStream peek(java.util.function.IntConsumer)>","<java.util.stream.IntStream: java.util.stream.IntStream peek(java.util.function.IntConsumer)>"
"<java.lang.Float: byte byteValue()>","<java.lang.Float: byte byteValue()>"
"<android.graphics.Path: void addPath(android.graphics.Path,float,float)>","<android.graphics.Path: void addPath(android.graphics.Path,float,float)>"
"<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()>","<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()>"
"<android.app.ActivityManager$MemoryInfo: int describeContents()>","<android.app.ActivityManager$MemoryInfo: int describeContents()>"
"<android.util.SparseArray: void <init>(int)>","<android.util.SparseArray: void <init>(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>"
"<android.webkit.WebView: int getRendererRequestedPriority()>","<android.webkit.WebView: int getRendererRequestedPriority()>"
"<org.json.JSONObject: org.json.JSONObject append(java.lang.String,java.lang.Object)>","<org.json.JSONObject: org.json.JSONObject append(java.lang.String,java.lang.Object)>"
"<java.net.SocketOption: java.lang.String name()>","<java.net.SocketOption: java.lang.String name()>"
"<java.util.zip.ZipFile: void <init>(java.lang.String,java.nio.charset.Charset)>","<java.util.zip.ZipFile: void <init>(java.lang.String,java.nio.charset.Charset)>"
"<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>","<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>"
"<android.media.MediaMetadata: int getBitmapDimensionLimit()>","<android.media.MediaMetadata: int getBitmapDimensionLimit()>"
"<android.view.Window: void setLayout(int,int)>","<android.view.Window: void setLayout(int,int)>"
"<org.json.JSONTokener: java.lang.String nextTo(java.lang.String)>","<org.json.JSONTokener: java.lang.String nextTo(java.lang.String)>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],android.graphics.ColorSpace$Rgb$TransferParameters)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],android.graphics.ColorSpace$Rgb$TransferParameters)>"
"<android.widget.TextView: void jumpDrawablesToCurrentState()>","<android.widget.TextView: void jumpDrawablesToCurrentState()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()>","<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()>"
"<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>","<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: void <init>()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: void <init>()>"
"<android.webkit.WebSettings: int getMixedContentMode()>","<android.webkit.WebSettings: int getMixedContentMode()>"
"<java.io.SyncFailedException: void <init>(java.lang.String)>","<java.io.SyncFailedException: void <init>(java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getBaseName(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getBaseName(java.lang.String)>"
"<java.io.PrintStream: void print(char[])>","<java.io.PrintStream: void print(char[])>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$Builder extend(android.app.Notification$Action$Builder)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()>","<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()>"
"<java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger andNot(java.math.BigInteger)>"
"<android.view.textclassifier.TextLinks$TextLink: int getEnd()>","<android.view.textclassifier.TextLinks$TextLink: int getEnd()>"
"<java.lang.Class: void <init>()>","<java.lang.Class: void <init>()>"
"<android.view.ViewStructure: void setEnabled(boolean)>","<android.view.ViewStructure: void setEnabled(boolean)>"
"<android.view.ViewConfiguration: int getKeyRepeatTimeout()>","<android.view.ViewConfiguration: int getKeyRepeatTimeout()>"
"<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>","<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>"
"<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>","<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>"
"<android.app.TaskInfo: java.lang.String toString()>","<android.app.TaskInfo: java.lang.String toString()>"
"<android.icu.util.ULocale: android.icu.util.ULocale getDefault(android.icu.util.ULocale$Category)>","<android.icu.util.ULocale: android.icu.util.ULocale getDefault(android.icu.util.ULocale$Category)>"
"<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>","<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>"
"<java.util.Deque: java.lang.Object pollFirst()>","<java.util.Deque: java.lang.Object pollFirst()>"
"<android.content.ContentResolver$MimeTypeInfo: android.graphics.drawable.Icon getIcon()>","<android.content.ContentResolver$MimeTypeInfo: android.graphics.drawable.Icon getIcon()>"
"<android.view.DisplayCutout: int getSafeInsetRight()>","<android.view.DisplayCutout: int getSafeInsetRight()>"
"<android.graphics.Region: void <clinit>()>","<android.graphics.Region: void <clinit>()>"
"<java.util.AbstractMap: boolean equals(java.lang.Object)>","<java.util.AbstractMap: boolean equals(java.lang.Object)>"
"<android.icu.util.ULocale: android.icu.util.ULocale[] getAvailableLocales()>","<android.icu.util.ULocale: android.icu.util.ULocale[] getAvailableLocales()>"
"<android.content.Context: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>","<android.content.Context: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>"
"<android.content.pm.PackageManager: void requestChecksums(java.lang.String,boolean,int,java.util.List,android.content.pm.PackageManager$OnChecksumsReadyListener)>","<android.content.pm.PackageManager: void requestChecksums(java.lang.String,boolean,int,java.util.List,android.content.pm.PackageManager$OnChecksumsReadyListener)>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>"
"<java.util.ArrayList: void ensureCapacity(int)>","<java.util.ArrayList: void ensureCapacity(int)>"
"<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>","<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>"
"<java.lang.Thread: boolean holdsLock(java.lang.Object)>","<java.lang.Thread: boolean holdsLock(java.lang.Object)>"
"<java.util.AbstractList: int lastIndexOf(java.lang.Object)>","<java.util.AbstractList: int lastIndexOf(java.lang.Object)>"
"<java.util.Hashtable: boolean containsValue(java.lang.Object)>","<java.util.Hashtable: boolean containsValue(java.lang.Object)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()>"
"<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>","<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>"
"<java.lang.StringBuffer: int capacity()>","<java.lang.StringBuffer: int capacity()>"
"<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>","<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean)>"
"<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>","<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>"
"<java.time.ZoneId: boolean equals(java.lang.Object)>","<java.time.ZoneId: boolean equals(java.lang.Object)>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener getOnPartialImageListener()>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$OnPartialImageListener getOnPartialImageListener()>"
"<java.lang.reflect.Executable: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.Executable: boolean isAnnotationPresent(java.lang.Class)>"
"<java.time.chrono.ChronoLocalDate: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoLocalDate: boolean equals(java.lang.Object)>"
"<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)>","<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)>"
"<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>","<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>"
"<android.content.pm.PackageInstaller$SessionInfo: float getProgress()>","<android.content.pm.PackageInstaller$SessionInfo: float getProgress()>"
"<java.io.File: java.lang.String getCanonicalPath()>","<java.io.File: java.lang.String getCanonicalPath()>"
"<java.time.LocalDate: java.time.LocalDate ofYearDay(int,int)>","<java.time.LocalDate: java.time.LocalDate ofYearDay(int,int)>"
"<java.util.jar.Attributes: boolean containsValue(java.lang.Object)>","<java.util.jar.Attributes: boolean containsValue(java.lang.Object)>"
"<java.lang.Process: int exitValue()>","<java.lang.Process: int exitValue()>"
"<android.view.inputmethod.ExtractedTextRequest: void <clinit>()>","<android.view.inputmethod.ExtractedTextRequest: void <clinit>()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.RenderEffect,android.graphics.Shader$TileMode)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.RenderEffect,android.graphics.Shader$TileMode)>"
"<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>"
"<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<org.xmlpull.v1.XmlSerializer: boolean getFeature(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: boolean getFeature(java.lang.String)>"
"<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader,java.lang.Class,java.lang.Class)>","<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader,java.lang.Class,java.lang.Class)>"
"<android.view.Choreographer: void removeVsyncCallback(android.view.Choreographer$VsyncCallback)>","<android.view.Choreographer: void removeVsyncCallback(android.view.Choreographer$VsyncCallback)>"
"<java.util.jar.Attributes: void <init>()>","<java.util.jar.Attributes: void <init>()>"
"<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>","<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void getLocationInSurface(int[])>","<android.view.View: void getLocationInSurface(int[])>"
"<java.util.OptionalDouble: double orElseThrow()>","<java.util.OptionalDouble: double orElseThrow()>"
"<android.webkit.WebResourceRequest: boolean isRedirect()>","<android.webkit.WebResourceRequest: boolean isRedirect()>"
"<android.graphics.drawable.Drawable: int getLevel()>","<android.graphics.drawable.Drawable: int getLevel()>"
"<android.widget.AbsListView: int getTopEdgeEffectColor()>","<android.widget.AbsListView: int getTopEdgeEffectColor()>"
"<android.os.Parcel: void writeBoolean(boolean)>","<android.os.Parcel: void writeBoolean(boolean)>"
"<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>","<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>"
"<java.lang.IllegalAccessException: void <init>()>","<java.lang.IllegalAccessException: void <init>()>"
"<java.nio.DoubleBuffer: boolean hasArray()>","<java.nio.DoubleBuffer: boolean hasArray()>"
"<java.io.ObjectInput: int read(byte[])>","<java.io.ObjectInput: int read(byte[])>"
"<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()>","<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()>"
"<android.os.Looper: void prepare()>","<android.os.Looper: void prepare()>"
"<android.widget.ListView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.widget.ListView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<java.lang.SecurityManager: void <init>()>","<java.lang.SecurityManager: void <init>()>"
"<java.io.InputStream: byte[] readNBytes(int)>","<java.io.InputStream: byte[] readNBytes(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()>","<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()>"
"<android.graphics.RecordingCanvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>"
"<java.util.concurrent.CopyOnWriteArraySet: int size()>","<java.util.concurrent.CopyOnWriteArraySet: int size()>"
"<android.view.KeyEvent: int getRepeatCount()>","<android.view.KeyEvent: int getRepeatCount()>"
"<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()>","<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()>"
"<java.nio.file.Path: int compareTo(java.lang.Object)>","<java.nio.file.Path: int compareTo(java.lang.Object)>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.time.chrono.Era: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.Era: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.webkit.WebSettings: int getCacheMode()>","<android.webkit.WebSettings: int getCacheMode()>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandle()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandle()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setExtras(android.os.Bundle)>","<android.app.Notification$Builder: android.app.Notification$Builder setExtras(android.os.Bundle)>"
"<android.app.Fragment: java.lang.String toString()>","<android.app.Fragment: java.lang.String toString()>"
"<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>","<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>"
"<android.content.Context: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>","<android.content.Context: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>"
"<android.content.res.Resources: java.lang.String getResourceEntryName(int)>","<android.content.res.Resources: java.lang.String getResourceEntryName(int)>"
"<android.media.session.MediaController$TransportControls: void play()>","<android.media.session.MediaController$TransportControls: void play()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>"
"<java.lang.Integer: double doubleValue()>","<java.lang.Integer: double doubleValue()>"
"<android.util.Rational: int getNumerator()>","<android.util.Rational: int getNumerator()>"
"<android.view.contentcapture.ContentCaptureContext$Builder: void <init>(android.content.LocusId)>","<android.view.contentcapture.ContentCaptureContext$Builder: void <init>(android.content.LocusId)>"
"<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.k3: void <clinit>()>","<io.flutter.plugins.webviewflutter.k3: void <clinit>()>"
"<android.graphics.ColorSpace$Named: void <clinit>()>","<android.graphics.ColorSpace$Named: void <clinit>()>"
"<java.util.ArrayDeque: boolean remove(java.lang.Object)>","<java.util.ArrayDeque: boolean remove(java.lang.Object)>"
"<java.lang.String: java.lang.String stripLeading()>","<java.lang.String: java.lang.String stripLeading()>"
"<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>","<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>"
"<android.view.Choreographer$FrameTimeline: long getVsyncId()>","<android.view.Choreographer$FrameTimeline: long getVsyncId()>"
"<android.widget.Toolbar: boolean showOverflowMenu()>","<android.widget.Toolbar: boolean showOverflowMenu()>"
"<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>","<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>"
"<java.io.ObjectOutputStream: void drain()>","<java.io.ObjectOutputStream: void drain()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsets(int,android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsets(int,android.graphics.Insets)>"
"<android.content.ContentValues: void put(java.lang.String,byte[])>","<android.content.ContentValues: void put(java.lang.String,byte[])>"
"<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.widget.TextView: int getExtendedPaddingBottom()>","<android.widget.TextView: int getExtendedPaddingBottom()>"
"<java.nio.channels.ServerSocketChannel: int validOps()>","<java.nio.channels.ServerSocketChannel: int validOps()>"
"<java.util.Arrays: double[] copyOfRange(double[],int,int)>","<java.util.Arrays: double[] copyOfRange(double[],int,int)>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>"
"<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>","<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.ComponentInfo: int getIconResource()>","<android.content.pm.ComponentInfo: int getIconResource()>"
"<java.time.Instant: java.time.Instant plusSeconds(long)>","<java.time.Instant: java.time.Instant plusSeconds(long)>"
"<android.content.Intent: java.lang.String getScheme()>","<android.content.Intent: java.lang.String getScheme()>"
"<android.media.AudioAttributes: int describeContents()>","<android.media.AudioAttributes: int describeContents()>"
"<android.os.Parcel: void readStringArray(java.lang.String[])>","<android.os.Parcel: void readStringArray(java.lang.String[])>"
"<android.app.ActionBar: int getSelectedNavigationIndex()>","<android.app.ActionBar: int getSelectedNavigationIndex()>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>"
"<android.app.Activity: void setRecentsScreenshotEnabled(boolean)>","<android.app.Activity: void setRecentsScreenshotEnabled(boolean)>"
"<java.lang.Process: void destroy()>","<java.lang.Process: void destroy()>"
"<android.widget.TextView: int getBottomPaddingOffset()>","<android.widget.TextView: int getBottomPaddingOffset()>"
"<android.graphics.ColorSpace$Named: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$Named: void <init>(java.lang.String,int)>"
"<java.util.Arrays: void sort(short[],int,int)>","<java.util.Arrays: void sort(short[],int,int)>"
"<android.media.Rating: int describeContents()>","<android.media.Rating: int describeContents()>"
"<java.lang.reflect.Field: void setChar(java.lang.Object,char)>","<java.lang.reflect.Field: void setChar(java.lang.Object,char)>"
"<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>"
"<android.view.ViewGroup: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>","<android.view.ViewGroup: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.text.ClipboardManager: java.lang.CharSequence getText()>","<android.text.ClipboardManager: java.lang.CharSequence getText()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setChannelId(java.lang.String)>","<android.app.Notification$Builder: android.app.Notification$Builder setChannelId(java.lang.String)>"
"<android.graphics.ImageDecoder: void <init>()>","<android.graphics.ImageDecoder: void <init>()>"
"<java.nio.ByteBuffer: char getChar(int)>","<java.nio.ByteBuffer: char getChar(int)>"
"<android.graphics.Point: boolean equals(int,int)>","<android.graphics.Point: boolean equals(int,int)>"
"<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>","<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>"
"<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>","<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>"
"<java.util.Locale$LanguageRange: java.util.List mapEquivalents(java.util.List,java.util.Map)>","<java.util.Locale$LanguageRange: java.util.List mapEquivalents(java.util.List,java.util.Map)>"
"<java.util.Arrays: int compare(long[],int,int,long[],int,int)>","<java.util.Arrays: int compare(long[],int,int,long[],int,int)>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.app.SharedElementCallback: void onSharedElementStart(java.util.List,java.util.List,java.util.List)>","<android.app.SharedElementCallback: void onSharedElementStart(java.util.List,java.util.List,java.util.List)>"
"<android.view.MotionEvent: java.lang.String toString()>","<android.view.MotionEvent: java.lang.String toString()>"
"<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()>"
"<android.graphics.Bitmap: void setDensity(int)>","<android.graphics.Bitmap: void setDensity(int)>"
"<android.graphics.ColorSpace$Rgb: boolean isWideGamut()>","<android.graphics.ColorSpace$Rgb: boolean isWideGamut()>"
"<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>","<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>"
"<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>"
"<java.util.Random: java.util.stream.IntStream ints(long,int,int)>","<java.util.Random: java.util.stream.IntStream ints(long,int,int)>"
"<android.view.DragEvent: float getY()>","<android.view.DragEvent: float getY()>"
"<android.content.Intent: boolean hasCategory(java.lang.String)>","<android.content.Intent: boolean hasCategory(java.lang.String)>"
"<android.graphics.Bitmap$Config: void <clinit>()>","<android.graphics.Bitmap$Config: void <clinit>()>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle setAnswerButtonColorHint(int)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle setAnswerButtonColorHint(int)>"
"<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>","<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>"
"<android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>","<android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>"
"<io.flutter.plugins.webviewflutter.z: void <init>(io.flutter.plugins.webviewflutter.k$o$a)>","<io.flutter.plugins.webviewflutter.z: void <init>(io.flutter.plugins.webviewflutter.k$o$a)>"
"<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>","<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>"
"<java.util.Arrays: java.lang.String toString(short[])>","<java.util.Arrays: java.lang.String toString(short[])>"
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<android.view.View: void setForceDarkAllowed(boolean)>","<android.view.View: void setForceDarkAllowed(boolean)>"
"<java.time.chrono.ChronoZonedDateTime: boolean isEqual(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: boolean isEqual(java.time.chrono.ChronoZonedDateTime)>"
"<android.content.pm.SigningInfo: boolean hasMultipleSigners()>","<android.content.pm.SigningInfo: boolean hasMultipleSigners()>"
"<android.widget.AdapterView: void addView(android.view.View)>","<android.widget.AdapterView: void addView(android.view.View)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>","<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>"
"<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle setGroupConversation(boolean)>","<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle setGroupConversation(boolean)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostDestroyed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostDestroyed(android.app.Activity)>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndUpdate(java.lang.Object,java.util.function.UnaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndUpdate(java.lang.Object,java.util.function.UnaryOperator)>"
"<android.content.pm.Signature: void <init>(byte[])>","<android.content.pm.Signature: void <init>(byte[])>"
"<android.view.ViewParent: boolean isTextAlignmentResolved()>","<android.view.ViewParent: boolean isTextAlignmentResolved()>"
"<android.app.ActivityManager: java.util.List getHistoricalProcessExitReasons(java.lang.String,int,int)>","<android.app.ActivityManager: java.util.List getHistoricalProcessExitReasons(java.lang.String,int,int)>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>"
"<android.widget.TextView: java.lang.String getFontVariationSettings()>","<android.widget.TextView: java.lang.String getFontVariationSettings()>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfMonth(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfMonth(int)>"
"<android.widget.TextView: void setTextLocales(android.os.LocaleList)>","<android.widget.TextView: void setTextLocales(android.os.LocaleList)>"
"<java.util.SortedSet: java.lang.Object last()>","<java.util.SortedSet: java.lang.Object last()>"
"<java.net.ServerSocket: void setSoTimeout(int)>","<java.net.ServerSocket: void setSoTimeout(int)>"
"<android.os.MessageQueue: void finalize()>","<android.os.MessageQueue: void finalize()>"
"<java.time.chrono.ChronoLocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.ChronoLocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.content.pm.PermissionGroupInfo: java.lang.String toString()>","<android.content.pm.PermissionGroupInfo: java.lang.String toString()>"
"<java.time.Instant: java.time.Instant ofEpochSecond(long,long)>","<java.time.Instant: java.time.Instant ofEpochSecond(long,long)>"
"<android.app.Fragment: void postponeEnterTransition()>","<android.app.Fragment: void postponeEnterTransition()>"
"<android.view.Window: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>","<android.view.Window: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>"
"<android.os.Parcel: void setDataSize(int)>","<android.os.Parcel: void setDataSize(int)>"
"<android.hardware.lights.LightsManager$LightsSession: void requestLights(android.hardware.lights.LightsRequest)>","<android.hardware.lights.LightsManager$LightsSession: void requestLights(android.hardware.lights.LightsRequest)>"
"<javax.security.auth.Destroyable: boolean isDestroyed()>","<javax.security.auth.Destroyable: boolean isDestroyed()>"
"<java.net.URI: java.lang.String getRawSchemeSpecificPart()>","<java.net.URI: java.lang.String getRawSchemeSpecificPart()>"
"<android.content.Intent: byte getByteExtra(java.lang.String,byte)>","<android.content.Intent: byte getByteExtra(java.lang.String,byte)>"
"<android.view.inputmethod.CursorAnchorInfo: int hashCode()>","<android.view.inputmethod.CursorAnchorInfo: int hashCode()>"
"<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>","<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<android.view.View$OnContextClickListener: boolean onContextClick(android.view.View)>","<android.view.View$OnContextClickListener: boolean onContextClick(android.view.View)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>"
"<android.webkit.WebView: void setRendererPriorityPolicy(int,boolean)>","<android.webkit.WebView: void setRendererPriorityPolicy(int,boolean)>"
"<android.app.Activity: void attachBaseContext(android.content.Context)>","<android.app.Activity: void attachBaseContext(android.content.Context)>"
"<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>","<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>"
"<java.security.GeneralSecurityException: void <init>()>","<java.security.GeneralSecurityException: void <init>()>"
"<android.view.SurfaceView: void setClipBounds(android.graphics.Rect)>","<android.view.SurfaceView: void setClipBounds(android.graphics.Rect)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.drawable.Icon)>","<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.drawable.Icon)>"
"<android.util.SparseArray: void set(int,java.lang.Object)>","<android.util.SparseArray: void set(int,java.lang.Object)>"
"<android.graphics.RecordingCanvas: void setBitmap(android.graphics.Bitmap)>","<android.graphics.RecordingCanvas: void setBitmap(android.graphics.Bitmap)>"
"<java.lang.String: boolean endsWith(java.lang.String)>","<java.lang.String: boolean endsWith(java.lang.String)>"
"<java.util.jar.Manifest: int hashCode()>","<java.util.jar.Manifest: int hashCode()>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>"
"<java.lang.Thread: java.lang.String getName()>","<java.lang.Thread: java.lang.String getName()>"
"<android.app.Activity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>","<android.app.Activity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>"
"<android.graphics.Region: android.graphics.Rect getBounds()>","<android.graphics.Region: android.graphics.Rect getBounds()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>"
"<org.json.JSONTokener: int dehexchar(char)>","<org.json.JSONTokener: int dehexchar(char)>"
"<android.content.Context: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.Context: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<java.util.Calendar: boolean isWeekDateSupported()>","<java.util.Calendar: boolean isWeekDateSupported()>"
"<android.app.Activity: void dismissKeyboardShortcutsHelper()>","<android.app.Activity: void dismissKeyboardShortcutsHelper()>"
"<java.lang.Long: int signum(long)>","<java.lang.Long: int signum(long)>"
"<java.nio.channels.SocketChannel: boolean isConnected()>","<java.nio.channels.SocketChannel: boolean isConnected()>"
"<java.nio.file.attribute.UserPrincipalLookupService: void <init>()>","<java.nio.file.attribute.UserPrincipalLookupService: void <init>()>"
"<java.util.TimeZone: boolean observesDaylightTime()>","<java.util.TimeZone: boolean observesDaylightTime()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.textclassifier.ConversationActions: void <clinit>()>","<android.view.textclassifier.ConversationActions: void <clinit>()>"
"<android.content.pm.PackageInstaller$SessionInfo: int getStagedSessionErrorCode()>","<android.content.pm.PackageInstaller$SessionInfo: int getStagedSessionErrorCode()>"
"<android.widget.ListView: android.widget.Adapter getAdapter()>","<android.widget.ListView: android.widget.Adapter getAdapter()>"
"<java.io.PrintStream: void println(double)>","<java.io.PrintStream: void println(double)>"
"<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>","<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>"
"<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)>","<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)>"
"<java.time.Instant: boolean equals(java.lang.Object)>","<java.time.Instant: boolean equals(java.lang.Object)>"
"<android.content.IntentFilter: java.util.Iterator pathsIterator()>","<android.content.IntentFilter: java.util.Iterator pathsIterator()>"
"<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>","<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>"
"<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>","<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>"
"<java.io.PrintStream: void print(float)>","<java.io.PrintStream: void print(float)>"
"<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>","<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>"
"<android.content.res.AssetFileDescriptor: void <clinit>()>","<android.content.res.AssetFileDescriptor: void <clinit>()>"
"<android.os.Messenger: int hashCode()>","<android.os.Messenger: int hashCode()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>"
"<android.app.Person: int hashCode()>","<android.app.Person: int hashCode()>"
"<java.util.stream.IntStream: java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction)>","<java.util.stream.IntStream: java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean retainAll(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean retainAll(java.util.Collection)>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <clinit>()>"
"<java.net.NetworkInterface: boolean isVirtual()>","<java.net.NetworkInterface: boolean isVirtual()>"
"<android.widget.PopupWindow: boolean isLaidOutInScreen()>","<android.widget.PopupWindow: boolean isLaidOutInScreen()>"
"<java.time.chrono.ChronoLocalDate: int lengthOfYear()>","<java.time.chrono.ChronoLocalDate: int lengthOfYear()>"
"<android.widget.AdapterView$OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>","<android.widget.AdapterView$OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>"
"<android.net.Uri: void <init>()>","<android.net.Uri: void <init>()>"
"<java.nio.ShortBuffer: java.lang.Object array()>","<java.nio.ShortBuffer: java.lang.Object array()>"
"<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>","<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setUseLineSpacingFromFallbacks(boolean)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setUseLineSpacingFromFallbacks(boolean)>"
"<java.util.AbstractList: java.util.ListIterator listIterator()>","<java.util.AbstractList: java.util.ListIterator listIterator()>"
"<android.media.session.MediaSession$Callback: void onFastForward()>","<android.media.session.MediaSession$Callback: void onFastForward()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>"
"<android.app.Activity: void finishFromChild(android.app.Activity)>","<android.app.Activity: void finishFromChild(android.app.Activity)>"
"<java.lang.Character: boolean isUpperCase(char)>","<java.lang.Character: boolean isUpperCase(char)>"
"<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>","<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>"
"<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>","<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>"
"<java.io.ObjectOutputStream: void writeChar(int)>","<java.io.ObjectOutputStream: void writeChar(int)>"
"<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.graphics.Color: void RGBToHSV(int,int,int,float[])>","<android.graphics.Color: void RGBToHSV(int,int,int,float[])>"
"<android.icu.util.ULocale: java.lang.String toUnicodeLocaleKey(java.lang.String)>","<android.icu.util.ULocale: java.lang.String toUnicodeLocaleKey(java.lang.String)>"
"<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>","<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>"
"<android.accounts.Account: boolean equals(java.lang.Object)>","<android.accounts.Account: boolean equals(java.lang.Object)>"
"<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter()>","<android.webkit.WebView: android.print.PrintDocumentAdapter createPrintDocumentAdapter()>"
"<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>","<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>"
"<android.view.KeyEvent: int getUnicodeChar()>","<android.view.KeyEvent: int getUnicodeChar()>"
"<android.content.res.Configuration: boolean equals(java.lang.Object)>","<android.content.res.Configuration: boolean equals(java.lang.Object)>"
"<android.view.WindowManager$LayoutParams: int getColorMode()>","<android.view.WindowManager$LayoutParams: int getColorMode()>"
"<android.view.MenuItem: boolean isEnabled()>","<android.view.MenuItem: boolean isEnabled()>"
"<java.nio.Buffer: java.nio.Buffer rewind()>","<java.nio.Buffer: java.nio.Buffer rewind()>"
"<java.net.InetAddress: java.lang.String getHostAddress()>","<java.net.InetAddress: java.lang.String getHostAddress()>"
"<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.time.ZoneId: java.util.Set getAvailableZoneIds()>","<java.time.ZoneId: java.util.Set getAvailableZoneIds()>"
"<android.view.Window$Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.view.Window$Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.view.Window: void setContentView(android.view.View)>","<android.view.Window: void setContentView(android.view.View)>"
"<android.app.Fragment: void startActivity(android.content.Intent)>","<android.app.Fragment: void startActivity(android.content.Intent)>"
"<org.json.JSONTokener: void back()>","<org.json.JSONTokener: void back()>"
"<java.net.SocketImpl: int available()>","<java.net.SocketImpl: int available()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer duplicate()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer duplicate()>"
"<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>","<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Boolean: int hashCode(boolean)>","<java.lang.Boolean: int hashCode(boolean)>"
"<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>","<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>"
"<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.time.Duration: java.time.Duration minusDays(long)>","<java.time.Duration: java.time.Duration minusDays(long)>"
"<java.time.Period: java.util.List getUnits()>","<java.time.Period: java.util.List getUnits()>"
"<android.graphics.Color: int rgb(float,float,float)>","<android.graphics.Color: int rgb(float,float,float)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withPositiveSign(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withPositiveSign(char)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getJournalMode()>","<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getJournalMode()>"
"<java.io.UnsupportedEncodingException: void <init>()>","<java.io.UnsupportedEncodingException: void <init>()>"
"<android.content.pm.PackageInstaller$SessionParams: void setAutoRevokePermissionsMode(boolean)>","<android.content.pm.PackageInstaller$SessionParams: void setAutoRevokePermissionsMode(boolean)>"
"<android.content.Context: java.lang.String getPackageName()>","<android.content.Context: java.lang.String getPackageName()>"
"<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getText()>","<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getText()>"
"<android.app.Notification$MessagingStyle: void <init>(java.lang.CharSequence)>","<android.app.Notification$MessagingStyle: void <init>(java.lang.CharSequence)>"
"<java.lang.VerifyError: void <init>()>","<java.lang.VerifyError: void <init>()>"
"<java.util.concurrent.atomic.AtomicLong: long getAcquire()>","<java.util.concurrent.atomic.AtomicLong: long getAcquire()>"
"<java.time.LocalTime: java.time.LocalTime minusNanos(long)>","<java.time.LocalTime: java.time.LocalTime minusNanos(long)>"
"<java.net.Socket: void <init>(java.net.SocketImpl)>","<java.net.Socket: void <init>(java.net.SocketImpl)>"
"<java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>","<java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>"
"<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>","<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>"
"<java.lang.Class: boolean isInstance(java.lang.Object)>","<java.lang.Class: boolean isInstance(java.lang.Object)>"
"<android.content.pm.PackageInstaller$Session: void transfer(java.lang.String)>","<android.content.pm.PackageInstaller$Session: void transfer(java.lang.String)>"
"<android.content.BroadcastReceiver$PendingResult: void <init>()>","<android.content.BroadcastReceiver$PendingResult: void <init>()>"
"<java.lang.String: java.lang.String trim()>","<java.lang.String: java.lang.String trim()>"
"<android.graphics.Rect: boolean isEmpty()>","<android.graphics.Rect: boolean isEmpty()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.View: void setRotation(float)>","<android.view.View: void setRotation(float)>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setFragmentId(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setFragmentId(java.lang.String)>"
"<android.graphics.RectF: void <init>()>","<android.graphics.RectF: void <init>()>"
"<android.hardware.Sensor: void <init>()>","<android.hardware.Sensor: void <init>()>"
"<android.os.VibrationAttributes: boolean isFlagSet(int)>","<android.os.VibrationAttributes: boolean isFlagSet(int)>"
"<android.animation.TypeConverter: java.lang.Object convert(java.lang.Object)>","<android.animation.TypeConverter: java.lang.Object convert(java.lang.Object)>"
"<android.view.contentcapture.ContentCaptureSession: java.lang.String toString()>","<android.view.contentcapture.ContentCaptureSession: java.lang.String toString()>"
"<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)>","<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)>"
"<java.lang.Long: java.lang.String toString(long)>","<java.lang.Long: java.lang.String toString(long)>"
"<java.time.LocalDate: int lengthOfYear()>","<java.time.LocalDate: int lengthOfYear()>"
"<android.app.ActivityManager$RunningServiceInfo: void <clinit>()>","<android.app.ActivityManager$RunningServiceInfo: void <clinit>()>"
"<android.app.FragmentTransaction: int commit()>","<android.app.FragmentTransaction: int commit()>"
"<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()>","<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()>"
"<android.graphics.RenderNode: boolean setPivotX(float)>","<android.graphics.RenderNode: boolean setPivotX(float)>"
"<java.lang.Enum: int hashCode()>","<java.lang.Enum: int hashCode()>"
"<android.widget.TextView: int getExtendedPaddingTop()>","<android.widget.TextView: int getExtendedPaddingTop()>"
"<android.content.SyncRequest: void <clinit>()>","<android.content.SyncRequest: void <clinit>()>"
"<java.nio.ShortBuffer: java.nio.Buffer flip()>","<java.nio.ShortBuffer: java.nio.Buffer flip()>"
"<android.content.pm.Signature: int hashCode()>","<android.content.pm.Signature: int hashCode()>"
"<android.util.ArrayMap: boolean isEmpty()>","<android.util.ArrayMap: boolean isEmpty()>"
"<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>","<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>"
"<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>","<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>"
"<android.view.ActionMode$Callback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>","<android.view.ActionMode$Callback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>"
"<android.graphics.SurfaceTexture: void <init>(int)>","<android.graphics.SurfaceTexture: void <init>(int)>"
"<android.view.Surface: java.lang.String toString()>","<android.view.Surface: java.lang.String toString()>"
"<android.content.pm.ApplicationInfo: int getMemtagMode()>","<android.content.pm.ApplicationInfo: int getMemtagMode()>"
"<java.util.zip.ZipEntry: void setSize(long)>","<java.util.zip.ZipEntry: void setSize(long)>"
"<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)>","<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)>"
"<android.util.SparseArray: int indexOfValue(java.lang.Object)>","<android.util.SparseArray: int indexOfValue(java.lang.Object)>"
"<android.view.View: void setScrollIndicators(int,int)>","<android.view.View: void setScrollIndicators(int,int)>"
"<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>","<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>"
"<android.app.Activity: java.lang.CharSequence getTitle()>","<android.app.Activity: java.lang.CharSequence getTitle()>"
"<android.transition.Transition: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>","<android.transition.Transition: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>"
"<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>","<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>"
"<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)>","<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)>"
"<android.text.Layout: int getLineAscent(int)>","<android.text.Layout: int getLineAscent(int)>"
"<java.time.LocalDate: int compareTo(java.lang.Object)>","<java.time.LocalDate: int compareTo(java.lang.Object)>"
"<java.util.stream.LongStream: java.util.stream.LongStream parallel()>","<java.util.stream.LongStream: java.util.stream.LongStream parallel()>"
"<java.net.Socket: int getSoLinger()>","<java.net.Socket: int getSoLinger()>"
"<java.time.OffsetTime: int getSecond()>","<java.time.OffsetTime: int getSecond()>"
"<android.text.SpannableStringBuilder: java.lang.String toString()>","<android.text.SpannableStringBuilder: java.lang.String toString()>"
"<android.view.View: void setSaveEnabled(boolean)>","<android.view.View: void setSaveEnabled(boolean)>"
"<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>","<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>"
"<android.graphics.drawable.ColorDrawable: int getOpacity()>","<android.graphics.drawable.ColorDrawable: int getOpacity()>"
"<android.graphics.BitmapFactory$Options: void <init>()>","<android.graphics.BitmapFactory$Options: void <init>()>"
"<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()>","<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance()>"
"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setEntityConfig(android.view.textclassifier.TextClassifier$EntityConfig)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setEntityConfig(android.view.textclassifier.TextClassifier$EntityConfig)>"
"<android.view.MenuItem: android.view.SubMenu getSubMenu()>","<android.view.MenuItem: android.view.SubMenu getSubMenu()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)>"
"<org.json.JSONArray: void <init>(org.json.JSONTokener)>","<org.json.JSONArray: void <init>(org.json.JSONTokener)>"
"<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>","<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>"
"<java.util.List: java.lang.Object remove(int)>","<java.util.List: java.lang.Object remove(int)>"
"<android.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)>","<android.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean removeAll(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean removeAll(java.util.Collection)>"
"<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintScreenTimeout(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintScreenTimeout(int)>"
"<java.lang.String: void getChars(int,int,char[],int)>","<java.lang.String: void getChars(int,int,char[],int)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.os.Handler: android.os.Looper getLooper()>","<android.os.Handler: android.os.Looper getLooper()>"
"<org.json.JSONArray: int length()>","<org.json.JSONArray: int length()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withChronology(java.time.chrono.Chronology)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withChronology(java.time.chrono.Chronology)>"
"<android.view.textclassifier.TextSelection: int getSelectionEndIndex()>","<android.view.textclassifier.TextSelection: int getSelectionEndIndex()>"
"<android.view.View: void onDrawForeground(android.graphics.Canvas)>","<android.view.View: void onDrawForeground(android.graphics.Canvas)>"
"<android.content.Context: android.content.pm.PackageManager getPackageManager()>","<android.content.Context: android.content.pm.PackageManager getPackageManager()>"
"<java.util.Date: void <init>(long)>","<java.util.Date: void <init>(long)>"
"<android.database.Cursor: int getColumnIndex(java.lang.String)>","<android.database.Cursor: int getColumnIndex(java.lang.String)>"
"<java.util.HashMap: boolean containsValue(java.lang.Object)>","<java.util.HashMap: boolean containsValue(java.lang.Object)>"
"<android.widget.Toolbar: void onRtlPropertiesChanged(int)>","<android.widget.Toolbar: void onRtlPropertiesChanged(int)>"
"<android.view.InputDevice: android.view.InputDevice getDevice(int)>","<android.view.InputDevice: android.view.InputDevice getDevice(int)>"
"<android.view.autofill.AutofillManager: java.util.List getAvailableFieldClassificationAlgorithms()>","<android.view.autofill.AutofillManager: java.util.List getAvailableFieldClassificationAlgorithms()>"
"<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection)>","<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection)>"
"<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>","<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>"
"<android.view.ViewStructure: boolean hasExtras()>","<android.view.ViewStructure: boolean hasExtras()>"
"<android.view.accessibility.AccessibilityRecord: void <init>(android.view.accessibility.AccessibilityRecord)>","<android.view.accessibility.AccessibilityRecord: void <init>(android.view.accessibility.AccessibilityRecord)>"
"<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>","<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>"
"<android.content.pm.ActivityInfo: int describeContents()>","<android.content.pm.ActivityInfo: int describeContents()>"
"<android.widget.TextView: void setSingleLine()>","<android.widget.TextView: void setSingleLine()>"
"<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>","<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)>"
"<android.transition.Transition: long getStartDelay()>","<android.transition.Transition: long getStartDelay()>"
"<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>","<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>"
"<android.print.PrintDocumentInfo$Builder: void <init>(java.lang.String)>","<android.print.PrintDocumentInfo$Builder: void <init>(java.lang.String)>"
"<java.util.Arrays: java.lang.String toString(double[])>","<java.util.Arrays: java.lang.String toString(double[])>"
"<android.app.Notification$Style: void internalSetBigContentTitle(java.lang.CharSequence)>","<android.app.Notification$Style: void internalSetBigContentTitle(java.lang.CharSequence)>"
"<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>","<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()>","<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()>"
"<android.media.ImageReader: int getHardwareBufferFormat()>","<android.media.ImageReader: int getHardwareBufferFormat()>"
"<android.app.ActionBar: void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>","<android.app.ActionBar: void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>"
"<android.content.Context: android.content.AttributionSource getAttributionSource()>","<android.content.Context: android.content.AttributionSource getAttributionSource()>"
"<java.lang.Integer: int bitCount(int)>","<java.lang.Integer: int bitCount(int)>"
"<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>","<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint)>"
"<android.widget.AbsListView: boolean onRemoteAdapterConnected()>","<android.widget.AbsListView: boolean onRemoteAdapterConnected()>"
"<android.util.LongSparseArray: void <init>()>","<android.util.LongSparseArray: void <init>()>"
"<android.text.Editable: android.text.Editable append(char)>","<android.text.Editable: android.text.Editable append(char)>"
"<android.view.translation.TranslationResponseValue: java.lang.CharSequence getTransliteration()>","<android.view.translation.TranslationResponseValue: java.lang.CharSequence getTransliteration()>"
"<java.io.File: void <clinit>()>","<java.io.File: void <clinit>()>"
"<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])>","<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])>"
"<java.io.Reader: int read(char[],int,int)>","<java.io.Reader: int read(char[],int,int)>"
"<android.view.ActionMode: java.lang.Object getTag()>","<android.view.ActionMode: java.lang.Object getTag()>"
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>","<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>"
"<java.time.Duration: java.time.Duration minusHours(long)>","<java.time.Duration: java.time.Duration minusHours(long)>"
"<android.view.ViewGroup: void layout(int,int,int,int)>","<android.view.ViewGroup: void layout(int,int,int,int)>"
"<java.time.LocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.LocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.app.FragmentManager: boolean isDestroyed()>","<android.app.FragmentManager: boolean isDestroyed()>"
"<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>","<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>"
"<android.widget.RemoteViews: java.lang.Object clone()>","<android.widget.RemoteViews: java.lang.Object clone()>"
"<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.view.View: java.util.ArrayList getFocusables(int)>","<android.view.View: java.util.ArrayList getFocusables(int)>"
"<android.graphics.Color: float blue()>","<android.graphics.Color: float blue()>"
"<java.io.Reader: long skip(long)>","<java.io.Reader: long skip(long)>"
"<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>","<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>"
"<android.graphics.Picture: void <init>()>","<android.graphics.Picture: void <init>()>"
"<java.util.stream.Stream: java.util.Optional findFirst()>","<java.util.stream.Stream: java.util.Optional findFirst()>"
"<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>","<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>"
"<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>","<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>"
"<android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)>","<android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)>"
"<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>","<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>"
"<java.util.concurrent.locks.LockSupport: void parkNanos(long)>","<java.util.concurrent.locks.LockSupport: void parkNanos(long)>"
"<android.graphics.Color: int parseColor(java.lang.String)>","<android.graphics.Color: int parseColor(java.lang.String)>"
"<java.util.jar.Manifest: void read(java.io.InputStream)>","<java.util.jar.Manifest: void read(java.io.InputStream)>"
"<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>","<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>"
"<java.nio.channels.FileLock: boolean isShared()>","<java.nio.channels.FileLock: boolean isShared()>"
"<android.view.View: int getDrawingCacheQuality()>","<android.view.View: int getDrawingCacheQuality()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(char)>","<java.nio.CharBuffer: java.nio.CharBuffer put(char)>"
"<android.view.inputmethod.InputMethodSubtype: int hashCode()>","<android.view.inputmethod.InputMethodSubtype: int hashCode()>"
"<android.animation.ValueAnimator: long getCurrentPlayTime()>","<android.animation.ValueAnimator: long getCurrentPlayTime()>"
"<android.app.FragmentManager$OnBackStackChangedListener: void onBackStackChanged()>","<android.app.FragmentManager$OnBackStackChangedListener: void onBackStackChanged()>"
"<java.util.Arrays: void parallelPrefix(java.lang.Object[],int,int,java.util.function.BinaryOperator)>","<java.util.Arrays: void parallelPrefix(java.lang.Object[],int,int,java.util.function.BinaryOperator)>"
"<android.content.ContentProviderClient: void finalize()>","<android.content.ContentProviderClient: void finalize()>"
"<android.graphics.Path$Direction: android.graphics.Path$Direction[] values()>","<android.graphics.Path$Direction: android.graphics.Path$Direction[] values()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>"
"<android.graphics.Movie: void finalize()>","<android.graphics.Movie: void finalize()>"
"<android.view.View: void setSystemGestureExclusionRects(java.util.List)>","<android.view.View: void setSystemGestureExclusionRects(java.util.List)>"
"<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>","<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>","<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>"
"<java.lang.Math: int getExponent(double)>","<java.lang.Math: int getExponent(double)>"
"<android.app.PendingIntent: android.content.IntentSender getIntentSender()>","<android.app.PendingIntent: android.content.IntentSender getIntentSender()>"
"<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>","<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>"
"<java.net.Socket: java.io.InputStream getInputStream()>","<java.net.Socket: java.io.InputStream getInputStream()>"
"<java.lang.Long: long longValue()>","<java.lang.Long: long longValue()>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>"
"<java.util.Map$Entry: java.util.Comparator comparingByKey()>","<java.util.Map$Entry: java.util.Comparator comparingByKey()>"
"<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>","<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>"
"<android.app.Notification: void <clinit>()>","<android.app.Notification: void <clinit>()>"
"<android.widget.RemoteViews: void setViewLayoutWidthDimen(int,int)>","<android.widget.RemoteViews: void setViewLayoutWidthDimen(int,int)>"
"<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>","<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>"
"<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>","<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>"
"<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>","<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>"
"<java.nio.channels.AsynchronousFileChannel: void lock(java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void lock(java.lang.Object,java.nio.channels.CompletionHandler)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.text.Layout: float getPrimaryHorizontal(int)>","<android.text.Layout: float getPrimaryHorizontal(int)>"
"<android.os.Parcel: void writeFixedArray(java.lang.Object,int,int[])>","<android.os.Parcel: void writeFixedArray(java.lang.Object,int,int[])>"
"<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>","<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>"
"<android.view.WindowManager$LayoutParams: void <init>()>","<android.view.WindowManager$LayoutParams: void <init>()>"
"<android.media.MediaDescription: int describeContents()>","<android.media.MediaDescription: int describeContents()>"
"<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>","<java.util.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>"
"<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)>","<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)>"
"<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>","<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>"
"<android.view.View: boolean getFilterTouchesWhenObscured()>","<android.view.View: boolean getFilterTouchesWhenObscured()>"
"<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>","<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>"
"<android.media.session.MediaController$TransportControls: void playFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void playFromSearch(java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: void onEndBatchEdit()>","<android.widget.TextView: void onEndBatchEdit()>"
"<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()>"
"<java.lang.Double: java.lang.String toString(double)>","<java.lang.Double: java.lang.String toString(double)>"
"<android.transition.TransitionValues: int hashCode()>","<android.transition.TransitionValues: int hashCode()>"
"<android.view.ActionProvider: android.view.View onCreateActionView()>","<android.view.ActionProvider: android.view.View onCreateActionView()>"
"<java.util.concurrent.RunnableScheduledFuture: boolean isPeriodic()>","<java.util.concurrent.RunnableScheduledFuture: boolean isPeriodic()>"
"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.os.Parcel: void writeLong(long)>","<android.os.Parcel: void writeLong(long)>"
"<java.time.format.DateTimeFormatter: java.lang.String toString()>","<java.time.format.DateTimeFormatter: java.lang.String toString()>"
"<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>","<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"
"<java.util.zip.ZipFile: java.util.Enumeration entries()>","<java.util.zip.ZipFile: java.util.Enumeration entries()>"
"<android.view.textclassifier.TextSelection$Request: void <init>()>","<android.view.textclassifier.TextSelection$Request: void <init>()>"
"<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>","<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>"
"<java.lang.Long: java.lang.Long valueOf(java.lang.String)>","<java.lang.Long: java.lang.Long valueOf(java.lang.String)>"
"<android.widget.ImageView: void animateTransform(android.graphics.Matrix)>","<android.widget.ImageView: void animateTransform(android.graphics.Matrix)>"
"<java.lang.String: boolean startsWith(java.lang.String,int)>","<java.lang.String: boolean startsWith(java.lang.String,int)>"
"<java.lang.Thread: void <init>()>","<java.lang.Thread: void <init>()>"
"<android.os.Parcel: void readException()>","<android.os.Parcel: void readException()>"
"<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>","<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>"
"<java.net.SocketImpl: void connect(java.net.InetAddress,int)>","<java.net.SocketImpl: void connect(java.net.InetAddress,int)>"
"<java.math.RoundingMode: java.math.RoundingMode valueOf(java.lang.String)>","<java.math.RoundingMode: java.math.RoundingMode valueOf(java.lang.String)>"
"<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>","<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>"
"<java.util.regex.Matcher: int start(int)>","<java.util.regex.Matcher: int start(int)>"
"<java.util.stream.DoubleStream: java.util.stream.Stream boxed()>","<java.util.stream.DoubleStream: java.util.stream.Stream boxed()>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request build()>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request build()>"
"<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.graphics.Bitmap: void setHeight(int)>","<android.graphics.Bitmap: void setHeight(int)>"
"<android.content.BroadcastReceiver: java.lang.String getResultData()>","<android.content.BroadcastReceiver: java.lang.String getResultData()>"
"<java.util.Calendar: java.lang.String toString()>","<java.util.Calendar: java.lang.String toString()>"
"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>","<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>"
"<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>","<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>"
"<android.view.MotionEvent: float getRawX()>","<android.view.MotionEvent: float getRawX()>"
"<android.content.Intent: android.content.Intent setIdentifier(java.lang.String)>","<android.content.Intent: android.content.Intent setIdentifier(java.lang.String)>"
"<android.view.View: boolean isSaveFromParentEnabled()>","<android.view.View: boolean isSaveFromParentEnabled()>"
"<java.util.PrimitiveIterator: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator: void forEachRemaining(java.lang.Object)>"
"<java.util.ServiceLoader: void reload()>","<java.util.ServiceLoader: void reload()>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>"
"<java.io.DataInput: int readUnsignedShort()>","<java.io.DataInput: int readUnsignedShort()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void shutdown()>","<java.util.concurrent.ScheduledThreadPoolExecutor: void shutdown()>"
"<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>","<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>"
"<android.view.ContextMenu: void clearHeader()>","<android.view.ContextMenu: void clearHeader()>"
"<java.util.LinkedList: boolean removeFirstOccurrence(java.lang.Object)>","<java.util.LinkedList: boolean removeFirstOccurrence(java.lang.Object)>"
"<java.util.function.BinaryOperator: java.util.function.BinaryOperator minBy(java.util.Comparator)>","<java.util.function.BinaryOperator: java.util.function.BinaryOperator minBy(java.util.Comparator)>"
"<java.lang.ThreadGroup: boolean isDestroyed()>","<java.lang.ThreadGroup: boolean isDestroyed()>"
"<android.view.textclassifier.TextClassificationSessionId: boolean equals(java.lang.Object)>","<android.view.textclassifier.TextClassificationSessionId: boolean equals(java.lang.Object)>"
"<android.view.View: int getDrawingCacheBackgroundColor()>","<android.view.View: int getDrawingCacheBackgroundColor()>"
"<android.graphics.Rect: void union(android.graphics.Rect)>","<android.graphics.Rect: void union(android.graphics.Rect)>"
"<android.content.pm.PackageInstaller$SessionParams: void setWhitelistedRestrictedPermissions(java.util.Set)>","<android.content.pm.PackageInstaller$SessionParams: void setWhitelistedRestrictedPermissions(java.util.Set)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)>"
"<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>","<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setTextDirection(android.text.TextDirectionHeuristic)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setTextDirection(android.text.TextDirectionHeuristic)>"
"<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>","<java.util.concurrent.ThreadPoolExecutor: void setThreadFactory(java.util.concurrent.ThreadFactory)>"
"<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>","<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>"
"<android.app.Fragment: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>","<android.app.Fragment: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>"
"<java.net.URL: java.net.URI toURI()>","<java.net.URL: java.net.URI toURI()>"
"<io.flutter.plugins.webviewflutter.n0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.n0: void a(java.lang.Object,y.a$e)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>"
"<java.util.Date: int compareTo(java.lang.Object)>","<java.util.Date: int compareTo(java.lang.Object)>"
"<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>","<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>"
"<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>","<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>"
"<java.nio.LongBuffer: java.lang.String toString()>","<java.nio.LongBuffer: java.lang.String toString()>"
"<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)>","<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)>"
"<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>","<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>"
"<android.view.View: int getWindowAttachCount()>","<android.view.View: int getWindowAttachCount()>"
"<java.util.Hashtable: void forEach(java.util.function.BiConsumer)>","<java.util.Hashtable: void forEach(java.util.function.BiConsumer)>"
"<android.media.session.MediaController: void adjustVolume(int,int)>","<android.media.session.MediaController: void adjustVolume(int,int)>"
"<java.io.Reader: int read(java.nio.CharBuffer)>","<java.io.Reader: int read(java.nio.CharBuffer)>"
"<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>","<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>"
"<android.graphics.Paint: void setUnderlineText(boolean)>","<android.graphics.Paint: void setUnderlineText(boolean)>"
"<android.view.animation.Animation: long getStartOffset()>","<android.view.animation.Animation: long getStartOffset()>"
"<java.lang.IllegalAccessError: void <init>(java.lang.String)>","<java.lang.IllegalAccessError: void <init>(java.lang.String)>"
"<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.String: boolean equals(java.lang.Object)>"
"<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.lang.String[])>","<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.lang.String[])>"
"<android.print.PageRange: void writeToParcel(android.os.Parcel,int)>","<android.print.PageRange: void writeToParcel(android.os.Parcel,int)>"
"<android.view.MenuInflater: void inflate(int,android.view.Menu)>","<android.view.MenuInflater: void inflate(int,android.view.Menu)>"
"<android.widget.TextView: void setShadowLayer(float,float,float,int)>","<android.widget.TextView: void setShadowLayer(float,float,float,int)>"
"<android.graphics.Typeface: int getStyle()>","<android.graphics.Typeface: int getStyle()>"
"<java.io.PrintStream: void println()>","<java.io.PrintStream: void println()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>"
"<android.util.SparseArray: java.lang.Object get(int)>","<android.util.SparseArray: java.lang.Object get(int)>"
"<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>","<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>"
"<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>","<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>"
"<java.io.PrintStream: void <init>(java.io.File,java.nio.charset.Charset)>","<java.io.PrintStream: void <init>(java.io.File,java.nio.charset.Charset)>"
"<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean moveLeft(android.text.Spannable,android.text.Layout)>"
"<android.util.TypedValue: java.lang.CharSequence coerceToString()>","<android.util.TypedValue: java.lang.CharSequence coerceToString()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean,int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean,int)>"
"<java.util.stream.IntStream: java.util.OptionalInt reduce(java.util.function.IntBinaryOperator)>","<java.util.stream.IntStream: java.util.OptionalInt reduce(java.util.function.IntBinaryOperator)>"
"<android.content.LocusId: void <init>(java.lang.String)>","<android.content.LocusId: void <init>(java.lang.String)>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle forScreeningCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle forScreeningCall(android.app.Person,android.app.PendingIntent,android.app.PendingIntent)>"
"<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>","<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>"
"<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>","<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>"
"<java.util.HashMap: boolean isEmpty()>","<java.util.HashMap: boolean isEmpty()>"
"<android.content.ComponentCallbacks: void onLowMemory()>","<android.content.ComponentCallbacks: void onLowMemory()>"
"<android.os.Parcel: void writeTypedList(java.util.List)>","<android.os.Parcel: void writeTypedList(java.util.List)>"
"<android.print.PrintDocumentInfo: int getContentType()>","<android.print.PrintDocumentInfo: int getContentType()>"
"<javax.security.auth.Subject: int hashCode()>","<javax.security.auth.Subject: int hashCode()>"
"<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>","<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>"
"<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>","<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>"
"<android.view.MotionEvent: int getActionMasked()>","<android.view.MotionEvent: int getActionMasked()>"
"<java.util.AbstractSet: void <init>()>","<java.util.AbstractSet: void <init>()>"
"<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(android.view.MenuItem)>","<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(android.view.MenuItem)>"
"<io.flutter.plugins.webviewflutter.i1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.i1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.io.ObjectStreamException: void <init>(java.lang.String)>","<java.io.ObjectStreamException: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)>","<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)>"
"<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()>","<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()>"
"<android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean moveDown(android.text.Spannable,android.text.Layout)>"
"<java.lang.Integer: int compareUnsigned(int,int)>","<java.lang.Integer: int compareUnsigned(int,int)>"
"<android.graphics.Paint: int breakText(char[],int,int,float,float[])>","<android.graphics.Paint: int breakText(char[],int,int,float,float[])>"
"<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>","<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>"
"<android.webkit.WebView: void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient)>","<android.webkit.WebView: void setWebViewRenderProcessClient(android.webkit.WebViewRenderProcessClient)>"
"<java.util.concurrent.LinkedBlockingQueue: void clear()>","<java.util.concurrent.LinkedBlockingQueue: void clear()>"
"<android.view.SearchEvent: android.view.InputDevice getInputDevice()>","<android.view.SearchEvent: android.view.InputDevice getInputDevice()>"
"<android.app.Fragment: android.app.Fragment getTargetFragment()>","<android.app.Fragment: android.app.Fragment getTargetFragment()>"
"<android.view.MotionEvent: int getMetaState()>","<android.view.MotionEvent: int getMetaState()>"
"<android.widget.TextView: void setInputExtras(int)>","<android.widget.TextView: void setInputExtras(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry()>","<android.icu.util.ULocale: java.lang.String getDisplayCountry()>"
"<android.app.Fragment: int getId()>","<android.app.Fragment: int getId()>"
"<java.util.UUID: long getMostSignificantBits()>","<java.util.UUID: long getMostSignificantBits()>"
"<android.hardware.SensorDirectChannel: boolean isOpen()>","<android.hardware.SensorDirectChannel: boolean isOpen()>"
"<android.media.MediaDescription: java.lang.String getMediaId()>","<android.media.MediaDescription: java.lang.String getMediaId()>"
"<android.view.ActionMode$Callback2: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>","<android.view.ActionMode$Callback2: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>"
"<android.graphics.Paint: boolean isFakeBoldText()>","<android.graphics.Paint: boolean isFakeBoldText()>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>"
"<android.app.Activity: void setVrModeEnabled(boolean,android.content.ComponentName)>","<android.app.Activity: void setVrModeEnabled(boolean,android.content.ComponentName)>"
"<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>","<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>"
"<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>","<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>"
"<java.util.Hashtable: boolean containsKey(java.lang.Object)>","<java.util.Hashtable: boolean containsKey(java.lang.Object)>"
"<android.view.animation.Transformation: int getTransformationType()>","<android.view.animation.Transformation: int getTransformationType()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object compareAndExchangeAcquire(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object compareAndExchangeAcquire(int,java.lang.Object,java.lang.Object)>"
"<android.view.ContentInfo: void <clinit>()>","<android.view.ContentInfo: void <clinit>()>"
"<android.util.SparseIntArray: int valueAt(int)>","<android.util.SparseIntArray: int valueAt(int)>"
"<android.view.ViewStructure: void setClassName(java.lang.String)>","<android.view.ViewStructure: void setClassName(java.lang.String)>"
"<android.content.pm.InstallSourceInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.InstallSourceInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>","<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>"
"<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)>","<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)>"
"<android.widget.AdapterView: int getCount()>","<android.widget.AdapterView: int getCount()>"
"<java.io.DataOutput: void writeChars(java.lang.String)>","<java.io.DataOutput: void writeChars(java.lang.String)>"
"<android.media.MediaDescription: android.net.Uri getMediaUri()>","<android.media.MediaDescription: android.net.Uri getMediaUri()>"
"<android.content.BroadcastReceiver: void setOrderedHint(boolean)>","<android.content.BroadcastReceiver: void setOrderedHint(boolean)>"
"<android.widget.ListPopupWindow: android.widget.ListView getListView()>","<android.widget.ListPopupWindow: android.widget.ListView getListView()>"
"<android.view.MenuItem: int getNumericModifiers()>","<android.view.MenuItem: int getNumericModifiers()>"
"<android.app.VoiceInteractor$AbortVoiceRequest: void onAbortResult(android.os.Bundle)>","<android.app.VoiceInteractor$AbortVoiceRequest: void onAbortResult(android.os.Bundle)>"
"<android.graphics.Color: boolean isWideGamut(long)>","<android.graphics.Color: boolean isWideGamut(long)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setScale(android.view.SurfaceControl,float,float)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setScale(android.view.SurfaceControl,float,float)>"
"<java.nio.FloatBuffer: java.nio.Buffer flip()>","<java.nio.FloatBuffer: java.nio.Buffer flip()>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLanguage detectLanguage(android.view.textclassifier.TextLanguage$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLanguage detectLanguage(android.view.textclassifier.TextLanguage$Request)>"
"<android.util.SparseIntArray: int indexOfValue(int)>","<android.util.SparseIntArray: int indexOfValue(int)>"
"<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent[] values()>","<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent[] values()>"
"<java.util.regex.Matcher: boolean hasTransparentBounds()>","<java.util.regex.Matcher: boolean hasTransparentBounds()>"
"<android.view.Display$Mode: float getRefreshRate()>","<android.view.Display$Mode: float getRefreshRate()>"
"<java.time.Duration: java.time.Duration ofHours(long)>","<java.time.Duration: java.time.Duration ofHours(long)>"
"<java.lang.Float: int compareTo(java.lang.Object)>","<java.lang.Float: int compareTo(java.lang.Object)>"
"<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>","<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>"
"<java.net.Socket: void setSendBufferSize(int)>","<java.net.Socket: void setSendBufferSize(int)>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>"
"<java.util.zip.ZipEntry: void setExtra(byte[])>","<java.util.zip.ZipEntry: void setExtra(byte[])>"
"<java.util.Arrays: int compare(double[],double[])>","<java.util.Arrays: int compare(double[],double[])>"
"<android.view.KeyEvent: int getKeyCode()>","<android.view.KeyEvent: int getKeyCode()>"
"<javax.security.auth.x500.X500Principal: int hashCode()>","<javax.security.auth.x500.X500Principal: int hashCode()>"
"<java.time.chrono.AbstractChronology: java.lang.String toString()>","<java.time.chrono.AbstractChronology: java.lang.String toString()>"
"<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>","<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>"
"<java.util.Date: int getHours()>","<java.util.Date: int getHours()>"
"<android.graphics.Region: android.graphics.Path getBoundaryPath()>","<android.graphics.Region: android.graphics.Path getBoundaryPath()>"
"<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>","<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.TextView: float getShadowDx()>","<android.widget.TextView: float getShadowDx()>"
"<android.view.Window: android.view.WindowInsetsController getInsetsController()>","<android.view.Window: android.view.WindowInsetsController getInsetsController()>"
"<android.graphics.fonts.Font$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>","<android.graphics.fonts.Font$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>"
"<java.lang.SecurityManager: void checkPrintJobAccess()>","<java.lang.SecurityManager: void checkPrintJobAccess()>"
"<java.security.cert.X509Certificate: byte[] getSigAlgParams()>","<java.security.cert.X509Certificate: byte[] getSigAlgParams()>"
"<java.util.Arrays: int compare(float[],float[])>","<java.util.Arrays: int compare(float[],float[])>"
"<java.util.NoSuchElementException: void <init>()>","<java.util.NoSuchElementException: void <init>()>"
"<java.lang.AbstractMethodError: void <init>()>","<java.lang.AbstractMethodError: void <init>()>"
"<android.hardware.Sensor: java.lang.String toString()>","<android.hardware.Sensor: java.lang.String toString()>"
"<android.graphics.ImageDecoder: void setTargetColorSpace(android.graphics.ColorSpace)>","<android.graphics.ImageDecoder: void setTargetColorSpace(android.graphics.ColorSpace)>"
"<android.webkit.RenderProcessGoneDetail: boolean didCrash()>","<android.webkit.RenderProcessGoneDetail: boolean didCrash()>"
"<java.time.chrono.ChronoZonedDateTime: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>"
"<java.lang.IndexOutOfBoundsException: void <init>(int)>","<java.lang.IndexOutOfBoundsException: void <init>(int)>"
"<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.app.RemoteInput: boolean isDataOnly()>","<android.app.RemoteInput: boolean isDataOnly()>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.Image: void <init>()>","<android.media.Image: void <init>()>"
"<android.app.PendingIntent: boolean isService()>","<android.app.PendingIntent: boolean isService()>"
"<android.app.Fragment: android.transition.Transition getExitTransition()>","<android.app.Fragment: android.transition.Transition getExitTransition()>"
"<java.lang.StackTraceElement: int hashCode()>","<java.lang.StackTraceElement: int hashCode()>"
"<java.util.Locale: java.lang.Object clone()>","<java.util.Locale: java.lang.Object clone()>"
"<android.view.View: void setScrollY(int)>","<android.view.View: void setScrollY(int)>"
"<java.util.Arrays: int mismatch(short[],short[])>","<java.util.Arrays: int mismatch(short[],short[])>"
"<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>"
"<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>","<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>"
"<android.view.textclassifier.ConversationActions: void <init>(java.util.List,java.lang.String)>","<android.view.textclassifier.ConversationActions: void <init>(java.util.List,java.lang.String)>"
"<android.app.Activity: android.view.View requireViewById(int)>","<android.app.Activity: android.view.View requireViewById(int)>"
"<io.flutter.plugins.webviewflutter.l: void <init>(io.flutter.plugins.webviewflutter.k$b)>","<io.flutter.plugins.webviewflutter.l: void <init>(io.flutter.plugins.webviewflutter.k$b)>"
"<java.text.ParsePosition: int getIndex()>","<java.text.ParsePosition: int getIndex()>"
"<java.time.LocalTime: int getSecond()>","<java.time.LocalTime: int getSecond()>"
"<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)>","<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setContentDescription(java.lang.CharSequence)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setContentDescription(java.lang.CharSequence)>"
"<android.view.MotionEvent: long getHistoricalEventTime(int)>","<android.view.MotionEvent: long getHistoricalEventTime(int)>"
"<android.view.MenuItem: boolean isActionViewExpanded()>","<android.view.MenuItem: boolean isActionViewExpanded()>"
"<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>"
"<java.time.temporal.ChronoUnit: boolean isDurationEstimated()>","<java.time.temporal.ChronoUnit: boolean isDurationEstimated()>"
"<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.database.Cursor: double getDouble(int)>","<android.database.Cursor: double getDouble(int)>"
"<android.content.IntentFilter: java.util.function.Predicate asPredicate()>","<android.content.IntentFilter: java.util.function.Predicate asPredicate()>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>"
"<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>","<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>"
"<android.content.pm.Attribution: java.lang.String getTag()>","<android.content.pm.Attribution: java.lang.String getTag()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(java.lang.String,java.lang.String,int)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(java.lang.String,java.lang.String,int)>"
"<java.util.SortedSet: java.util.Spliterator spliterator()>","<java.util.SortedSet: java.util.Spliterator spliterator()>"
"<java.net.URLConnection: void setDoInput(boolean)>","<java.net.URLConnection: void setDoInput(boolean)>"
"<java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)>","<java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)>"
"<android.graphics.Path: void setLastPoint(float,float)>","<android.graphics.Path: void setLastPoint(float,float)>"
"<android.view.View: void dispatchStartTemporaryDetach()>","<android.view.View: void dispatchStartTemporaryDetach()>"
"<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>","<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>"
"<android.media.session.MediaController$TransportControls: void sendCustomAction(android.media.session.PlaybackState$CustomAction,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void sendCustomAction(android.media.session.PlaybackState$CustomAction,android.os.Bundle)>"
"<java.nio.LongBuffer: boolean isDirect()>","<java.nio.LongBuffer: boolean isDirect()>"
"<java.time.chrono.Chronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>","<java.time.chrono.Chronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
"<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<android.view.ViewGroup: boolean onNestedPreFling(android.view.View,float,float)>","<android.view.ViewGroup: boolean onNestedPreFling(android.view.View,float,float)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withZeroDigit(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withZeroDigit(char)>"
"<java.util.concurrent.atomic.AtomicReference: void setRelease(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: void setRelease(java.lang.Object)>"
"<java.math.BigInteger: void <init>(java.lang.String)>","<java.math.BigInteger: void <init>(java.lang.String)>"
"<java.nio.channels.SelectionKey: boolean isConnectable()>","<java.nio.channels.SelectionKey: boolean isConnectable()>"
"<android.content.Intent: void <init>()>","<android.content.Intent: void <init>()>"
"<java.util.Optional: java.lang.Object get()>","<java.util.Optional: java.lang.Object get()>"
"<java.net.URI: java.lang.String getRawPath()>","<java.net.URI: java.lang.String getRawPath()>"
"<java.lang.reflect.Field: java.lang.String toString()>","<java.lang.reflect.Field: java.lang.String toString()>"
"<android.text.SpannableString: void getChars(int,int,char[],int)>","<android.text.SpannableString: void getChars(int,int,char[],int)>"
"<java.time.LocalTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<java.lang.Process: java.io.InputStream getInputStream()>","<java.lang.Process: java.io.InputStream getInputStream()>"
"<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>","<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>"
"<android.view.Window: void setSustainedPerformanceMode(boolean)>","<android.view.Window: void setSustainedPerformanceMode(boolean)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>"
"<java.util.HashMap: boolean remove(java.lang.Object,java.lang.Object)>","<java.util.HashMap: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setEditorBounds(android.graphics.RectF)>","<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setEditorBounds(android.graphics.RectF)>"
"<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>","<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>"
"<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowAttached()>","<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowAttached()>"
"<android.app.PictureInPictureParams: int describeContents()>","<android.app.PictureInPictureParams: int describeContents()>"
"<java.nio.channels.DatagramChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.DatagramChannel: java.net.SocketAddress getLocalAddress()>"
"<java.lang.Process: java.io.OutputStream getOutputStream()>","<java.lang.Process: java.io.OutputStream getOutputStream()>"
"<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>","<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>"
"<android.media.session.MediaSession: void setQueueTitle(java.lang.CharSequence)>","<android.media.session.MediaSession: void setQueueTitle(java.lang.CharSequence)>"
"<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.os.Build$Partition: long getBuildTimeMillis()>","<android.os.Build$Partition: long getBuildTimeMillis()>"
"<java.util.Calendar: int getWeekYear()>","<java.util.Calendar: int getWeekYear()>"
"<android.widget.ImageView: void jumpDrawablesToCurrentState()>","<android.widget.ImageView: void jumpDrawablesToCurrentState()>"
"<io.flutter.plugins.webviewflutter.q1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.q1: void a(java.lang.Object,y.a$e)>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object accumulateAndGet(java.lang.Object,java.util.function.BinaryOperator)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object accumulateAndGet(java.lang.Object,java.util.function.BinaryOperator)>"
"<android.util.Base64: java.lang.String encodeToString(byte[],int)>","<android.util.Base64: java.lang.String encodeToString(byte[],int)>"
"<android.widget.PopupWindow: android.transition.Transition getExitTransition()>","<android.widget.PopupWindow: android.transition.Transition getExitTransition()>"
"<android.widget.TextView: int getMaxWidth()>","<android.widget.TextView: int getMaxWidth()>"
"<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>","<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(int,float)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(int,float)>"
"<android.os.PersistableBundle: android.os.PersistableBundle readFromStream(java.io.InputStream)>","<android.os.PersistableBundle: android.os.PersistableBundle readFromStream(java.io.InputStream)>"
"<android.graphics.RectF: boolean contains(float,float)>","<android.graphics.RectF: boolean contains(float,float)>"
"<java.lang.Character: boolean isUnicodeIdentifierPart(int)>","<java.lang.Character: boolean isUnicodeIdentifierPart(int)>"
"<android.provider.Settings$Global: void <clinit>()>","<android.provider.Settings$Global: void <clinit>()>"
"<java.util.ArrayList: int indexOf(java.lang.Object)>","<java.util.ArrayList: int indexOf(java.lang.Object)>"
"<java.util.LinkedList: int lastIndexOf(java.lang.Object)>","<java.util.LinkedList: int lastIndexOf(java.lang.Object)>"
"<java.lang.Character: boolean isSupplementaryCodePoint(int)>","<java.lang.Character: boolean isSupplementaryCodePoint(int)>"
"<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)>","<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)>"
"<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>","<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>"
"<android.webkit.PermissionRequest: void grant(java.lang.String[])>","<android.webkit.PermissionRequest: void grant(java.lang.String[])>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>"
"<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>","<android.webkit.WebView: void addJavascriptInterface(java.lang.Object,java.lang.String)>"
"<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>","<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>"
"<java.lang.Double: java.lang.String toHexString(double)>","<java.lang.Double: java.lang.String toHexString(double)>"
"<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>","<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>"
"<io.flutter.view.b: void <init>()>","<io.flutter.view.b: void <init>()>"
"<java.util.function.BinaryOperator: java.util.function.BinaryOperator maxBy(java.util.Comparator)>","<java.util.function.BinaryOperator: java.util.function.BinaryOperator maxBy(java.util.Comparator)>"
"<android.app.PendingIntent: void cancel()>","<android.app.PendingIntent: void cancel()>"
"<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>","<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>"
"<android.view.Window$Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.Window$Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.view.Choreographer: android.view.Choreographer getInstance()>","<android.view.Choreographer: android.view.Choreographer getInstance()>"
"<android.view.ViewTreeObserver$OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>","<android.view.ViewTreeObserver$OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>"
"<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>","<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>"
"<android.app.ActionBar: void show()>","<android.app.ActionBar: void show()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSubtitle(java.lang.CharSequence)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSubtitle(java.lang.CharSequence)>"
"<android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()>","<android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()>"
"<android.graphics.Paint: void getFontMetricsInt(char[],int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>","<android.graphics.Paint: void getFontMetricsInt(char[],int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>"
"<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder add(java.lang.String,java.lang.String)>","<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder add(java.lang.String,java.lang.String)>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDesiredHeight(int)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDesiredHeight(int)>"
"<java.net.URI: java.net.URI create(java.lang.String)>","<java.net.URI: java.net.URI create(java.lang.String)>"
"<android.view.Display: void getRealSize(android.graphics.Point)>","<android.view.Display: void getRealSize(android.graphics.Point)>"
"<android.graphics.ColorSpace$Rgb: float getMaxValue(int)>","<android.graphics.ColorSpace$Rgb: float getMaxValue(int)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectRight(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectRight(android.graphics.Rect)>"
"<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>","<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>"
"<android.os.Parcel: void writeDoubleArray(double[])>","<android.os.Parcel: void writeDoubleArray(double[])>"
"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>","<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>"
"<java.nio.CharBuffer: boolean isDirect()>","<java.nio.CharBuffer: boolean isDirect()>"
"<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>","<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>"
"<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.graphics.Bitmap: boolean isMutable()>","<android.graphics.Bitmap: boolean isMutable()>"
"<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.lang.Class: boolean isMemberClass()>","<java.lang.Class: boolean isMemberClass()>"
"<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>","<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>"
"<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>","<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>"
"<android.view.MotionEvent$PointerCoords: void clear()>","<android.view.MotionEvent$PointerCoords: void clear()>"
"<android.graphics.Point: void <init>()>","<android.graphics.Point: void <init>()>"
"<android.os.IBinder: int getSuggestedMaxIpcSizeBytes()>","<android.os.IBinder: int getSuggestedMaxIpcSizeBytes()>"
"<android.animation.ValueAnimator: long getFrameDelay()>","<android.animation.ValueAnimator: long getFrameDelay()>"
"<android.os.MemoryFile: void close()>","<android.os.MemoryFile: void close()>"
"<java.nio.ByteBuffer: boolean isDirect()>","<java.nio.ByteBuffer: boolean isDirect()>"
"<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.ViewConfiguration: int getWindowTouchSlop()>","<android.view.ViewConfiguration: int getWindowTouchSlop()>"
"<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>","<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>"
"<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>","<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>"
"<android.media.session.MediaController: android.os.Bundle getExtras()>","<android.media.session.MediaController: android.os.Bundle getExtras()>"
"<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>","<java.io.ObjectOutputStream: void writeClassDescriptor(java.io.ObjectStreamClass)>"
"<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)>","<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)>"
"<android.widget.TextView: int getCompoundPaddingBottom()>","<android.widget.TextView: int getCompoundPaddingBottom()>"
"<java.security.Permission: boolean implies(java.security.Permission)>","<java.security.Permission: boolean implies(java.security.Permission)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setGravity(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setGravity(int)>"
"<android.app.Notification$WearableExtender: android.app.PendingIntent getDisplayIntent()>","<android.app.Notification$WearableExtender: android.app.PendingIntent getDisplayIntent()>"
"<java.util.ArrayDeque: java.lang.Object peekLast()>","<java.util.ArrayDeque: java.lang.Object peekLast()>"
"<android.view.inputmethod.CompletionInfo: int getPosition()>","<android.view.inputmethod.CompletionInfo: int getPosition()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>"
"<java.lang.Thread: int enumerate(java.lang.Thread[])>","<java.lang.Thread: int enumerate(java.lang.Thread[])>"
"<java.lang.Math: double tan(double)>","<java.lang.Math: double tan(double)>"
"<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>","<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>"
"<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSet(int,int)>","<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSet(int,int)>"
"<java.util.Arrays: int mismatch(long[],int,int,long[],int,int)>","<java.util.Arrays: int mismatch(long[],int,int,long[],int,int)>"
"<java.lang.Short: java.lang.Short decode(java.lang.String)>","<java.lang.Short: java.lang.Short decode(java.lang.String)>"
"<android.content.ClipboardManager$OnPrimaryClipChangedListener: void onPrimaryClipChanged()>","<android.content.ClipboardManager$OnPrimaryClipChangedListener: void onPrimaryClipChanged()>"
"<java.util.HashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.util.HashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int)>","<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int)>"
"<android.app.Notification$Builder: android.app.Notification getNotification()>","<android.app.Notification$Builder: android.app.Notification getNotification()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.util.TypedValue: java.lang.String coerceToString(int,int)>","<android.util.TypedValue: java.lang.String coerceToString(int,int)>"
"<android.graphics.RectF: void sort()>","<android.graphics.RectF: void sort()>"
"<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,java.util.function.Function,int[])>","<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,java.util.function.Function,int[])>"
"<android.content.Intent: android.content.Intent setData(android.net.Uri)>","<android.content.Intent: android.content.Intent setData(android.net.Uri)>"
"<android.graphics.Region: boolean quickContains(int,int,int,int)>","<android.graphics.Region: boolean quickContains(int,int,int,int)>"
"<android.widget.Toolbar: int getCurrentContentInsetLeft()>","<android.widget.Toolbar: int getCurrentContentInsetLeft()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>","<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: boolean equals(java.lang.Object)>","<android.media.session.MediaSessionManager$RemoteUserInfo: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>","<android.view.ViewGroup: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>"
"<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>","<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>"
"<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)>","<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)>"
"<android.widget.RemoteViews: void <init>(java.lang.String,int,int)>","<android.widget.RemoteViews: void <init>(java.lang.String,int,int)>"
"<android.widget.Filter$FilterListener: void onFilterComplete(int)>","<android.widget.Filter$FilterListener: void onFilterComplete(int)>"
"<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>","<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)>"
"<java.util.concurrent.locks.LockSupport: java.lang.Object getBlocker(java.lang.Thread)>","<java.util.concurrent.locks.LockSupport: java.lang.Object getBlocker(java.lang.Thread)>"
"<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>","<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>"
"<java.util.zip.ZipFile: java.lang.String getName()>","<java.util.zip.ZipFile: java.lang.String getName()>"
"<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>"
"<android.app.TaskInfo: void <init>()>","<android.app.TaskInfo: void <init>()>"
"<android.os.Debug: void waitForDebugger()>","<android.os.Debug: void waitForDebugger()>"
"<android.graphics.fonts.Font: void getMetrics(android.graphics.Paint,android.graphics.Paint$FontMetrics)>","<android.graphics.fonts.Font: void getMetrics(android.graphics.Paint,android.graphics.Paint$FontMetrics)>"
"<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>","<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>"
"<java.lang.Character$UnicodeScript: void <clinit>()>","<java.lang.Character$UnicodeScript: void <clinit>()>"
"<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.view.animation.Animation: void finalize()>","<android.view.animation.Animation: void finalize()>"
"<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>","<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>"
"<java.nio.IntBuffer: java.nio.ByteOrder order()>","<java.nio.IntBuffer: java.nio.ByteOrder order()>"
"<io.flutter.plugins.webviewflutter.a1: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.a1: void a(java.lang.Object)>"
"<android.media.session.MediaSession: void setActive(boolean)>","<android.media.session.MediaSession: void setActive(boolean)>"
"<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>","<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>"
"<java.util.regex.Matcher: void <init>()>","<java.util.regex.Matcher: void <init>()>"
"<android.database.DataSetObserver: void onChanged()>","<android.database.DataSetObserver: void onChanged()>"
"<android.widget.TextView: void computeScroll()>","<android.widget.TextView: void computeScroll()>"
"<java.util.jar.Attributes$Name: java.lang.String toString()>","<java.util.jar.Attributes$Name: java.lang.String toString()>"
"<android.view.animation.Animation: boolean hasStarted()>","<android.view.animation.Animation: boolean hasStarted()>"
"<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>","<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>"
"<android.icu.util.ULocale: void <clinit>()>","<android.icu.util.ULocale: void <clinit>()>"
"<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.print.PageRange: void <clinit>()>","<android.print.PageRange: void <clinit>()>"
"<android.view.animation.LayoutAnimationController: boolean willOverlap()>","<android.view.animation.LayoutAnimationController: boolean willOverlap()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreBackoff(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreBackoff(boolean)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: void <init>()>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: void <init>()>"
"<android.graphics.fonts.FontStyle: java.lang.String toString()>","<android.graphics.fonts.FontStyle: java.lang.String toString()>"
"<android.graphics.Rect: void <clinit>()>","<android.graphics.Rect: void <clinit>()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.media.session.MediaSession: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()>","<android.media.session.MediaSession: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addExtras(android.os.Bundle)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addExtras(android.os.Bundle)>"
"<java.lang.AssertionError: void <init>(long)>","<java.lang.AssertionError: void <init>(long)>"
"<java.lang.CharSequence: char charAt(int)>","<java.lang.CharSequence: char charAt(int)>"
"<android.text.TextPaint: void <init>(int)>","<android.text.TextPaint: void <init>(int)>"
"<java.time.Period: java.time.Period minusMonths(long)>","<java.time.Period: java.time.Period minusMonths(long)>"
"<android.text.TextUtils$SimpleStringSplitter: void remove()>","<android.text.TextUtils$SimpleStringSplitter: void remove()>"
"<android.view.translation.ViewTranslationCallback: boolean onHideTranslation(android.view.View)>","<android.view.translation.ViewTranslationCallback: boolean onHideTranslation(android.view.View)>"
"<java.util.function.LongPredicate: java.util.function.LongPredicate negate()>","<java.util.function.LongPredicate: java.util.function.LongPredicate negate()>"
"<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>","<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>"
"<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>","<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>"
"<android.hardware.display.DisplayManager$DisplayListener: void onDisplayRemoved(int)>","<android.hardware.display.DisplayManager$DisplayListener: void onDisplayRemoved(int)>"
"<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>","<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>"
"<android.hardware.lights.LightsManager: java.util.List getLights()>","<android.hardware.lights.LightsManager: java.util.List getLights()>"
"<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)>","<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String,java.util.Map)>"
"<android.text.Layout: int getLineBaseline(int)>","<android.text.Layout: int getLineBaseline(int)>"
"<java.lang.Double: double min(double,double)>","<java.lang.Double: double min(double,double)>"
"<android.content.res.ColorStateList: int getDefaultColor()>","<android.content.res.ColorStateList: int getDefaultColor()>"
"<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>","<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>"
"<java.util.Date: void <init>(int,int,int,int,int)>","<java.util.Date: void <init>(int,int,int,int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>"
"<java.util.jar.Attributes: boolean equals(java.lang.Object)>","<java.util.jar.Attributes: boolean equals(java.lang.Object)>"
"<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>","<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>"
"<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>","<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>"
"<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getSender()>","<android.app.Notification$MessagingStyle$Message: java.lang.CharSequence getSender()>"
"<java.util.Arrays: int hashCode(double[])>","<java.util.Arrays: int hashCode(double[])>"
"<android.view.View: android.graphics.Rect getClipBounds()>","<android.view.View: android.graphics.Rect getClipBounds()>"
"<android.widget.TextView$SavedState: void <clinit>()>","<android.widget.TextView$SavedState: void <clinit>()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)>"
"<android.os.Debug: void resetGlobalAllocCount()>","<android.os.Debug: void resetGlobalAllocCount()>"
"<android.view.textservice.TextInfo: int describeContents()>","<android.view.textservice.TextInfo: int describeContents()>"
"<java.time.Period: java.time.Period ofWeeks(int)>","<java.time.Period: java.time.Period ofWeeks(int)>"
"<java.lang.Class: java.lang.reflect.Method[] getMethods()>","<java.lang.Class: java.lang.reflect.Method[] getMethods()>"
"<android.app.Fragment: java.lang.Object getHost()>","<android.app.Fragment: java.lang.Object getHost()>"
"<java.nio.channels.AsynchronousFileChannel: void <init>()>","<java.nio.channels.AsynchronousFileChannel: void <init>()>"
"<android.view.MotionEvent$PointerProperties: int hashCode()>","<android.view.MotionEvent$PointerProperties: int hashCode()>"
"<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>","<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setFlag(int,boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setFlag(int,boolean)>"
"<android.service.autofill.UserData$Builder: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<android.service.autofill.UserData$Builder: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<java.util.NavigableMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>","<java.util.NavigableMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>"
"<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>","<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>"
"<android.app.Dialog: void cancel()>","<android.app.Dialog: void cancel()>"
"<java.lang.Character: int codePointCount(char[],int,int)>","<java.lang.Character: int codePointCount(char[],int,int)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params build()>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params build()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIconGravity(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIconGravity(int)>"
"<android.widget.RemoteViews$RemoteCollectionItems: int getItemCount()>","<android.widget.RemoteViews$RemoteCollectionItems: int getItemCount()>"
"<java.util.Collections: java.util.List synchronizedList(java.util.List)>","<java.util.Collections: java.util.List synchronizedList(java.util.List)>"
"<android.widget.TextView: boolean isHorizontallyScrollable()>","<android.widget.TextView: boolean isHorizontallyScrollable()>"
"<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<java.lang.Byte: void <init>(java.lang.String)>","<java.lang.Byte: void <init>(java.lang.String)>"
"<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>","<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>"
"<java.net.DatagramSocket: void setReuseAddress(boolean)>","<java.net.DatagramSocket: void setReuseAddress(boolean)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript forName(java.lang.String)>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript forName(java.lang.String)>"
"<android.app.Activity: void onPerformDirectAction(java.lang.String,android.os.Bundle,android.os.CancellationSignal,java.util.function.Consumer)>","<android.app.Activity: void onPerformDirectAction(java.lang.String,android.os.Bundle,android.os.CancellationSignal,java.util.function.Consumer)>"
"<android.content.Intent: void setSelector(android.content.Intent)>","<android.content.Intent: void setSelector(android.content.Intent)>"
"<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>","<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>"
"<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>"
"<android.hardware.SyncFence: boolean awaitForever()>","<android.hardware.SyncFence: boolean awaitForever()>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig build()>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig build()>"
"<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)>","<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getColumnTitle()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getColumnTitle()>"
"<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)>","<java.lang.Runtime: java.io.InputStream getLocalizedInputStream(java.io.InputStream)>"
"<android.text.Layout: int getHeight()>","<android.text.Layout: int getHeight()>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>"
"<android.widget.AbsListView: void onOverScrolled(int,int,boolean,boolean)>","<android.widget.AbsListView: void onOverScrolled(int,int,boolean,boolean)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String toString()>","<android.view.inputmethod.InputMethodInfo: java.lang.String toString()>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>","<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>"
"<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressed()>","<android.app.Notification$BubbleMetadata: boolean isBubbleSuppressed()>"
"<java.lang.Double: boolean equals(java.lang.Object)>","<java.lang.Double: boolean equals(java.lang.Object)>"
"<android.webkit.WebView: boolean canZoomIn()>","<android.webkit.WebView: boolean canZoomIn()>"
"<java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>","<java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>"
"<android.os.Debug: void resetAllCounts()>","<android.os.Debug: void resetAllCounts()>"
"<java.lang.reflect.Field: boolean equals(java.lang.Object)>","<java.lang.reflect.Field: boolean equals(java.lang.Object)>"
"<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>","<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>"
"<java.lang.reflect.InvocationTargetException: void <init>()>","<java.lang.reflect.InvocationTargetException: void <init>()>"
"<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>","<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>"
"<java.util.LinkedList: java.lang.Object remove()>","<java.util.LinkedList: java.lang.Object remove()>"
"<android.graphics.NinePatch: boolean hasAlpha()>","<android.graphics.NinePatch: boolean hasAlpha()>"
"<android.hardware.display.DeviceProductInfo: boolean equals(java.lang.Object)>","<android.hardware.display.DeviceProductInfo: boolean equals(java.lang.Object)>"
"<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>","<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>"
"<android.app.Notification$Action: android.graphics.drawable.Icon getIcon()>","<android.app.Notification$Action: android.graphics.drawable.Icon getIcon()>"
"<android.view.ViewOutlineProvider: void <init>()>","<android.view.ViewOutlineProvider: void <init>()>"
"<android.view.textclassifier.TextLinks$Request: int describeContents()>","<android.view.textclassifier.TextLinks$Request: int describeContents()>"
"<android.view.TextureView: void onVisibilityChanged(android.view.View,int)>","<android.view.TextureView: void onVisibilityChanged(android.view.View,int)>"
"<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics[] values()>","<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics[] values()>"
"<android.app.Notification$MessagingStyle$Message: java.util.List getMessagesFromBundleArray(android.os.Parcelable[])>","<android.app.Notification$MessagingStyle$Message: java.util.List getMessagesFromBundleArray(android.os.Parcelable[])>"
"<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>","<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>"
"<java.lang.Thread: int getPriority()>","<java.lang.Thread: int getPriority()>"
"<android.graphics.PostProcessor: int onPostProcess(android.graphics.Canvas)>","<android.graphics.PostProcessor: int onPostProcess(android.graphics.Canvas)>"
"<android.graphics.BitmapFactory: void <init>()>","<android.graphics.BitmapFactory: void <init>()>"
"<java.util.Locale: java.lang.String getISO3Language()>","<java.util.Locale: java.lang.String getISO3Language()>"
"<java.util.function.UnaryOperator: java.util.function.UnaryOperator identity()>","<java.util.function.UnaryOperator: java.util.function.UnaryOperator identity()>"
"<java.math.BigInteger: java.math.BigInteger setBit(int)>","<java.math.BigInteger: java.math.BigInteger setBit(int)>"
"<android.view.textclassifier.TextClassification: int describeContents()>","<android.view.textclassifier.TextClassification: int describeContents()>"
"<java.time.LocalTime: long toEpochSecond(java.time.LocalDate,java.time.ZoneOffset)>","<java.time.LocalTime: long toEpochSecond(java.time.LocalDate,java.time.ZoneOffset)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndExchange(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndExchange(boolean,boolean)>"
"<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<android.content.Context: boolean stopService(android.content.Intent)>","<android.content.Context: boolean stopService(android.content.Intent)>"
"<java.security.cert.CertificateExpiredException: void <init>()>","<java.security.cert.CertificateExpiredException: void <init>()>"
"<java.nio.CharBuffer: int arrayOffset()>","<java.nio.CharBuffer: int arrayOffset()>"
"<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String)>","<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm valueOf(java.lang.String)>"
"<android.app.TaskInfo: boolean isVisible()>","<android.app.TaskInfo: boolean isVisible()>"
"<android.util.SizeF: void <clinit>()>","<android.util.SizeF: void <clinit>()>"
"<android.view.ViewGroup: void dispatchDrawableHotspotChanged(float,float)>","<android.view.ViewGroup: void dispatchDrawableHotspotChanged(float,float)>"
"<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>","<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>"
"<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>","<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>"
"<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()>","<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()>"
"<android.util.DisplayMetrics: void setToDefaults()>","<android.util.DisplayMetrics: void setToDefaults()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence,java.util.function.Consumer)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence,java.util.function.Consumer)>"
"<java.util.WeakHashMap: java.util.Set keySet()>","<java.util.WeakHashMap: java.util.Set keySet()>"
"<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>","<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>"
"<android.content.pm.ChangedPackages: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ChangedPackages: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Thread: void onSpinWait()>","<java.lang.Thread: void onSpinWait()>"
"<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>","<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>"
"<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>","<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>"
"<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>"
"<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>","<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>"
"<android.content.pm.Attribution: int describeContents()>","<android.content.pm.Attribution: int describeContents()>"
"<android.widget.Toolbar: void onDetachedFromWindow()>","<android.widget.Toolbar: void onDetachedFromWindow()>"
"<android.os.Parcel: long[] createLongArray()>","<android.os.Parcel: long[] createLongArray()>"
"<java.lang.Character: int toLowerCase(int)>","<java.lang.Character: int toLowerCase(int)>"
"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>","<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>"
"<android.view.WindowInsetsAnimation$Callback: void onPrepare(android.view.WindowInsetsAnimation)>","<android.view.WindowInsetsAnimation$Callback: void onPrepare(android.view.WindowInsetsAnimation)>"
"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>","<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>"
"<java.lang.reflect.Constructor: void <init>()>","<java.lang.reflect.Constructor: void <init>()>"
"<android.media.MediaDescription: void <init>()>","<android.media.MediaDescription: void <init>()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>"
"<java.text.NumberFormat: int hashCode()>","<java.text.NumberFormat: int hashCode()>"
"<android.app.Fragment: void setEnterTransition(android.transition.Transition)>","<android.app.Fragment: void setEnterTransition(android.transition.Transition)>"
"<android.app.Dialog: void setVolumeControlStream(int)>","<android.app.Dialog: void setVolumeControlStream(int)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float)>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float)>"
"<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int)>","<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int)>"
"<android.app.Person$Builder: void <init>()>","<android.app.Person$Builder: void <init>()>"
"<android.app.Notification$WearableExtender: java.lang.String getBridgeTag()>","<android.app.Notification$WearableExtender: java.lang.String getBridgeTag()>"
"<java.nio.channels.SelectionKey: int interestOpsOr(int)>","<java.nio.channels.SelectionKey: int interestOpsOr(int)>"
"<android.view.WindowId$FocusObserver: void onFocusLost(android.view.WindowId)>","<android.view.WindowId$FocusObserver: void onFocusLost(android.view.WindowId)>"
"<java.math.BigInteger: java.lang.String toString(int)>","<java.math.BigInteger: java.lang.String toString(int)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer compact()>","<java.nio.FloatBuffer: java.nio.FloatBuffer compact()>"
"<android.hardware.lights.LightsManager$LightsSession: void <init>()>","<android.hardware.lights.LightsManager$LightsSession: void <init>()>"
"<java.util.NavigableMap: java.util.SortedMap tailMap(java.lang.Object)>","<java.util.NavigableMap: java.util.SortedMap tailMap(java.lang.Object)>"
"<android.webkit.WebView: void onAttachedToWindow()>","<android.webkit.WebView: void onAttachedToWindow()>"
"<android.view.Choreographer: void <init>()>","<android.view.Choreographer: void <init>()>"
"<java.lang.OutOfMemoryError: void <init>()>","<java.lang.OutOfMemoryError: void <init>()>"
"<android.content.ComponentName: int describeContents()>","<android.content.ComponentName: int describeContents()>"
"<android.view.View: void setImportantForAutofill(int)>","<android.view.View: void setImportantForAutofill(int)>"
"<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>","<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>"
"<android.app.Person$Builder: android.app.Person$Builder setIcon(android.graphics.drawable.Icon)>","<android.app.Person$Builder: android.app.Person$Builder setIcon(android.graphics.drawable.Icon)>"
"<java.text.ParsePosition: int hashCode()>","<java.text.ParsePosition: int hashCode()>"
"<android.content.Context: void removeStickyBroadcast(android.content.Intent)>","<android.content.Context: void removeStickyBroadcast(android.content.Intent)>"
"<android.os.SystemClock: long currentThreadTimeMillis()>","<android.os.SystemClock: long currentThreadTimeMillis()>"
"<android.view.autofill.AutofillValue: java.lang.String toString()>","<android.view.autofill.AutofillValue: java.lang.String toString()>"
"<android.text.Layout: int getLineVisibleEnd(int)>","<android.text.Layout: int getLineVisibleEnd(int)>"
"<java.io.ObjectInput: long skip(long)>","<java.io.ObjectInput: long skip(long)>"
"<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>","<android.webkit.WebSettings: void setAllowFileAccessFromFileURLs(boolean)>"
"<android.text.style.LocaleSpan: void updateDrawState(android.text.TextPaint)>","<android.text.style.LocaleSpan: void updateDrawState(android.text.TextPaint)>"
"<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>"
"<android.webkit.WebStorage: void <init>()>","<android.webkit.WebStorage: void <init>()>"
"<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>","<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>"
"<java.lang.Math: double expm1(double)>","<java.lang.Math: double expm1(double)>"
"<android.os.Debug$InstructionCount: boolean collect()>","<android.os.Debug$InstructionCount: boolean collect()>"
"<android.widget.PopupWindow: void <init>()>","<android.widget.PopupWindow: void <init>()>"
"<android.view.ViewConfiguration: int getScrollBarFadeDuration()>","<android.view.ViewConfiguration: int getScrollBarFadeDuration()>"
"<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>","<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.view.ViewConfiguration: int getTouchSlop()>","<android.view.ViewConfiguration: int getTouchSlop()>"
"<java.lang.String: int lastIndexOf(java.lang.String,int)>","<java.lang.String: int lastIndexOf(java.lang.String,int)>"
"<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>","<java.util.LinkedHashMap: boolean containsValue(java.lang.Object)>"
"<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>"
"<android.view.ViewGroup: android.view.View getFocusedChild()>","<android.view.ViewGroup: android.view.View getFocusedChild()>"
"<java.lang.Integer: int remainderUnsigned(int,int)>","<java.lang.Integer: int remainderUnsigned(int,int)>"
"<android.os.PersistableBundle: android.os.PersistableBundle deepCopy()>","<android.os.PersistableBundle: android.os.PersistableBundle deepCopy()>"
"<android.view.accessibility.AccessibilityManager: boolean isEnabled()>","<android.view.accessibility.AccessibilityManager: boolean isEnabled()>"
"<java.net.URI: java.lang.String getPath()>","<java.net.URI: java.lang.String getPath()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>"
"<android.graphics.Paint: android.os.LocaleList getTextLocales()>","<android.graphics.Paint: android.os.LocaleList getTextLocales()>"
"<android.hardware.SyncFence: void <init>()>","<android.hardware.SyncFence: void <init>()>"
"<android.graphics.Color: int green(int)>","<android.graphics.Color: int green(int)>"
"<android.widget.AbsListView: void setVelocityScale(float)>","<android.widget.AbsListView: void setVelocityScale(float)>"
"<android.content.pm.PackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)>","<android.content.pm.PackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)>"
"<java.io.FileFilter: boolean accept(java.io.File)>","<java.io.FileFilter: boolean accept(java.io.File)>"
"<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>","<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>"
"<android.graphics.Shader: void <init>()>","<android.graphics.Shader: void <init>()>"
"<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>","<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>"
"<android.view.Surface: void setFrameRate(float,int)>","<android.view.Surface: void setFrameRate(float,int)>"
"<android.graphics.ImageDecoder: void close()>","<android.graphics.ImageDecoder: void close()>"
"<android.graphics.Paint: boolean isLinearText()>","<android.graphics.Paint: boolean isLinearText()>"
"<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>","<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>"
"<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>"
"<android.view.accessibility.AccessibilityManager: boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)>","<android.view.accessibility.AccessibilityManager: boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)>"
"<android.view.ViewConfiguration: float getAmbiguousGestureMultiplier()>","<android.view.ViewConfiguration: float getAmbiguousGestureMultiplier()>"
"<android.widget.TextView: float getLeftFadingEdgeStrength()>","<android.widget.TextView: float getLeftFadingEdgeStrength()>"
"<android.util.AttributeSet: float getAttributeFloatValue(int,float)>","<android.util.AttributeSet: float getAttributeFloatValue(int,float)>"
"<android.content.ContextWrapper: void clearWallpaper()>","<android.content.ContextWrapper: void clearWallpaper()>"
"<android.hardware.SensorEvent: void <init>()>","<android.hardware.SensorEvent: void <init>()>"
"<io.flutter.plugins.webviewflutter.p3: void onReceiveValue(java.lang.Object)>","<io.flutter.plugins.webviewflutter.p3: void onReceiveValue(java.lang.Object)>"
"<android.view.InputQueue: void finalize()>","<android.view.InputQueue: void finalize()>"
"<android.webkit.WebView: void <init>(android.content.Context)>","<android.webkit.WebView: void <init>(android.content.Context)>"
"<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<android.hardware.SensorManager: void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>","<android.hardware.SensorManager: void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>"
"<android.animation.PropertyValuesHolder: java.lang.String toString()>","<android.animation.PropertyValuesHolder: java.lang.String toString()>"
"<android.animation.Animator$AnimatorPauseListener: void onAnimationResume(android.animation.Animator)>","<android.animation.Animator$AnimatorPauseListener: void onAnimationResume(android.animation.Animator)>"
"<android.content.SyncStatusObserver: void onStatusChanged(int)>","<android.content.SyncStatusObserver: void onStatusChanged(int)>"
"<java.time.chrono.IsoChronology: java.util.List eras()>","<java.time.chrono.IsoChronology: java.util.List eras()>"
"<android.view.ViewTreeObserver: void registerFrameCommitCallback(java.lang.Runnable)>","<android.view.ViewTreeObserver: void registerFrameCommitCallback(java.lang.Runnable)>"
"<android.webkit.WebView: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>","<android.webkit.WebView: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>"
"<android.view.inputmethod.BaseInputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>","<android.view.inputmethod.BaseInputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>"
"<android.graphics.Paint: android.graphics.Typeface getTypeface()>","<android.graphics.Paint: android.graphics.Typeface getTypeface()>"
"<android.graphics.Paint: void <init>(android.graphics.Paint)>","<android.graphics.Paint: void <init>(android.graphics.Paint)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: void <init>()>","<android.view.inputmethod.CursorAnchorInfo$Builder: void <init>()>"
"<io.flutter.plugins.webviewflutter.j2: void <init>()>","<io.flutter.plugins.webviewflutter.j2: void <init>()>"
"<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>","<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>"
"<android.os.MemoryFile: boolean isPurgingAllowed()>","<android.os.MemoryFile: boolean isPurgingAllowed()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>"
"<java.util.Queue: boolean add(java.lang.Object)>","<java.util.Queue: boolean add(java.lang.Object)>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setPackageName(java.lang.String)>","<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setPackageName(java.lang.String)>"
"<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>","<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>"
"<android.view.textclassifier.ConversationActions: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.ConversationActions: void writeToParcel(android.os.Parcel,int)>"
"<android.text.Layout: int getTopPadding()>","<android.text.Layout: int getTopPadding()>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>","<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>","<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>"
"<android.view.ActionMode$Callback: void onDestroyActionMode(android.view.ActionMode)>","<android.view.ActionMode$Callback: void onDestroyActionMode(android.view.ActionMode)>"
"<android.content.pm.FeatureGroupInfo: void <init>()>","<android.content.pm.FeatureGroupInfo: void <init>()>"
"<java.nio.ByteBuffer: int alignmentOffset(int,int)>","<java.nio.ByteBuffer: int alignmentOffset(int,int)>"
"<android.hardware.lights.Light: void <clinit>()>","<android.hardware.lights.Light: void <clinit>()>"
"<java.time.OffsetDateTime: int getYear()>","<java.time.OffsetDateTime: int getYear()>"
"<android.webkit.WebViewClient: void <init>()>","<android.webkit.WebViewClient: void <init>()>"
"<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>","<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>"
"<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()>","<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()>"
"<android.widget.PopupWindow: void <init>(android.view.View)>","<android.widget.PopupWindow: void <init>(android.view.View)>"
"<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>","<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object updateAndGet(int,java.util.function.UnaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object updateAndGet(int,java.util.function.UnaryOperator)>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String)>"
"<android.view.Surface: void <clinit>()>","<android.view.Surface: void <clinit>()>"
"<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,int,boolean)>","<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,int,boolean)>"
"<java.util.concurrent.Future: java.lang.Object get()>","<java.util.concurrent.Future: java.lang.Object get()>"
"<java.util.Objects: boolean nonNull(java.lang.Object)>","<java.util.Objects: boolean nonNull(java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>"
"<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>","<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>"
"<java.security.cert.Certificate: java.lang.String getType()>","<java.security.cert.Certificate: java.lang.String getType()>"
"<android.widget.AbsListView: void reclaimViews(java.util.List)>","<android.widget.AbsListView: void reclaimViews(java.util.List)>"
"<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>","<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>"
"<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>"
"<android.os.Messenger: void send(android.os.Message)>","<android.os.Messenger: void send(android.os.Message)>"
"<android.content.pm.PackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>","<android.content.pm.PackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>"
"<java.lang.Character: char toTitleCase(char)>","<java.lang.Character: char toTitleCase(char)>"
"<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>","<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>"
"<android.widget.Button: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.Button: java.lang.CharSequence getAccessibilityClassName()>"
"<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>"
"<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>"
"<android.graphics.ImageDecoder: void setTargetSize(int,int)>","<android.graphics.ImageDecoder: void setTargetSize(int,int)>"
"<android.graphics.Bitmap: int getRowBytes()>","<android.graphics.Bitmap: int getRowBytes()>"
"<android.view.ContentInfo: int getFlags()>","<android.view.ContentInfo: int getFlags()>"
"<java.time.zone.ZoneRules: boolean isFixedOffset()>","<java.time.zone.ZoneRules: boolean isFixedOffset()>"
"<android.view.autofill.AutofillValue: boolean isDate()>","<android.view.autofill.AutofillValue: boolean isDate()>"
"<java.time.temporal.ChronoField: java.lang.String getDisplayName(java.util.Locale)>","<java.time.temporal.ChronoField: java.lang.String getDisplayName(java.util.Locale)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>"
"<android.content.res.TypedArray: int getType(int)>","<android.content.res.TypedArray: int getType(int)>"
"<android.widget.TextView: void setLineHeight(int)>","<android.widget.TextView: void setLineHeight(int)>"
"<java.time.temporal.ChronoUnit: boolean isSupportedBy(java.time.temporal.Temporal)>","<java.time.temporal.ChronoUnit: boolean isSupportedBy(java.time.temporal.Temporal)>"
"<android.webkit.WebSettings: boolean getSaveFormData()>","<android.webkit.WebSettings: boolean getSaveFormData()>"
"<android.app.ActionBar: java.lang.CharSequence getTitle()>","<android.app.ActionBar: java.lang.CharSequence getTitle()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithFilePath(java.lang.String)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithFilePath(java.lang.String)>"
"<android.view.ViewConfiguration: int getScrollDefaultDelay()>","<android.view.ViewConfiguration: int getScrollDefaultDelay()>"
"<javax.security.auth.Subject: java.lang.String toString()>","<javax.security.auth.Subject: java.lang.String toString()>"
"<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>","<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>"
"<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>","<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>"
"<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>","<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>"
"<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>","<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>"
"<android.content.pm.InstallSourceInfo: int describeContents()>","<android.content.pm.InstallSourceInfo: int describeContents()>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>"
"<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)>","<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)>"
"<java.util.stream.DoubleStream: long count()>","<java.util.stream.DoubleStream: long count()>"
"<java.io.ObjectInputStream: double readDouble()>","<java.io.ObjectInputStream: double readDouble()>"
"<android.app.Activity: boolean isFinishing()>","<android.app.Activity: boolean isFinishing()>"
"<java.lang.StringBuffer: void ensureCapacity(int)>","<java.lang.StringBuffer: void ensureCapacity(int)>"
"<java.security.PermissionCollection: void <init>()>","<java.security.PermissionCollection: void <init>()>"
"<android.net.Uri: java.lang.String decode(java.lang.String)>","<android.net.Uri: java.lang.String decode(java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clearExtensions()>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clearExtensions()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIcon(android.graphics.drawable.Drawable)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIcon(android.graphics.drawable.Drawable)>"
"<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>","<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>"
"<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>","<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>"
"<android.content.pm.PackageItemInfo: void <init>()>","<android.content.pm.PackageItemInfo: void <init>()>"
"<io.flutter.plugins.webviewflutter.t2: void <init>()>","<io.flutter.plugins.webviewflutter.t2: void <init>()>"
"<java.lang.Throwable: java.lang.String getLocalizedMessage()>","<java.lang.Throwable: java.lang.String getLocalizedMessage()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultDataSpace(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultDataSpace(int)>"
"<android.view.autofill.AutofillManager: void disableAutofillServices()>","<android.view.autofill.AutofillManager: void disableAutofillServices()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer duplicate()>","<java.nio.ShortBuffer: java.nio.ShortBuffer duplicate()>"
"<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>","<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>"
"<android.app.ActivityManager: void setProcessStateSummary(byte[])>","<android.app.ActivityManager: void setProcessStateSummary(byte[])>"
"<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>","<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>"
"<java.lang.NegativeArraySizeException: void <init>()>","<java.lang.NegativeArraySizeException: void <init>()>"
"<android.view.ViewGroup: void setTransitionGroup(boolean)>","<android.view.ViewGroup: void setTransitionGroup(boolean)>"
"<java.lang.String: void <init>(byte[],int)>","<java.lang.String: void <init>(byte[],int)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>"
"<android.graphics.drawable.ColorDrawable: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.ColorDrawable: void setTintList(android.content.res.ColorStateList)>"
"<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.SyncAdapterType: void <clinit>()>","<android.content.SyncAdapterType: void <clinit>()>"
"<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>","<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>"
"<java.util.Collections: java.util.Comparator reverseOrder()>","<java.util.Collections: java.util.Comparator reverseOrder()>"
"<android.graphics.Rect: void <init>()>","<android.graphics.Rect: void <init>()>"
"<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>","<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>"
"<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>","<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>"
"<android.graphics.Canvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>","<android.graphics.Canvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>"
"<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>","<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>"
"<android.widget.Toolbar: void setCollapseContentDescription(int)>","<android.widget.Toolbar: void setCollapseContentDescription(int)>"
"<android.view.ViewParent: void focusableViewAvailable(android.view.View)>","<android.view.ViewParent: void focusableViewAvailable(android.view.View)>"
"<android.util.SparseArray: int keyAt(int)>","<android.util.SparseArray: int keyAt(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream flatMap(java.util.function.DoubleFunction)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream flatMap(java.util.function.DoubleFunction)>"
"<java.io.ObjectOutput: void writeObject(java.lang.Object)>","<java.io.ObjectOutput: void writeObject(java.lang.Object)>"
"<android.content.OperationApplicationException: void <init>(java.lang.String)>","<android.content.OperationApplicationException: void <init>(java.lang.String)>"
"<android.graphics.NinePatch: int getHeight()>","<android.graphics.NinePatch: int getHeight()>"
"<android.graphics.Matrix: void setRotate(float,float,float)>","<android.graphics.Matrix: void setRotate(float,float,float)>"
"<android.app.Activity: void setShowWhenLocked(boolean)>","<android.app.Activity: void setShowWhenLocked(boolean)>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()>"
"<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>","<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>"
"<android.widget.AbsListView: boolean isPaddingOffsetRequired()>","<android.widget.AbsListView: boolean isPaddingOffsetRequired()>"
"<java.time.Month: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.Month: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.app.FragmentManager: boolean popBackStackImmediate()>","<android.app.FragmentManager: boolean popBackStackImmediate()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>"
"<java.lang.Math: float min(float,float)>","<java.lang.Math: float min(float,float)>"
"<android.widget.AbsListView: void setSelectionFromTop(int,int)>","<android.widget.AbsListView: void setSelectionFromTop(int,int)>"
"<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>","<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)>"
"<android.text.PrecomputedText$Params$Builder: void <init>(android.text.PrecomputedText$Params)>","<android.text.PrecomputedText$Params$Builder: void <init>(android.text.PrecomputedText$Params)>"
"<java.lang.StringBuilder: void setLength(int)>","<java.lang.StringBuilder: void setLength(int)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>"
"<android.app.PictureInPictureParams: java.lang.CharSequence getTitle()>","<android.app.PictureInPictureParams: java.lang.CharSequence getTitle()>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()>"
"<java.net.Socket: void <init>(java.lang.String,int,boolean)>","<java.net.Socket: void <init>(java.lang.String,int,boolean)>"
"<java.io.BufferedReader: int read(char[],int,int)>","<java.io.BufferedReader: int read(char[],int,int)>"
"<java.security.AccessControlException: java.security.Permission getPermission()>","<java.security.AccessControlException: java.security.Permission getPermission()>"
"<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>","<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>"
"<android.app.Notification$MessagingStyle$Message: void <init>(java.lang.CharSequence,long,android.app.Person)>","<android.app.Notification$MessagingStyle$Message: void <init>(java.lang.CharSequence,long,android.app.Person)>"
"<android.hardware.display.VirtualDisplay: void <init>()>","<android.hardware.display.VirtualDisplay: void <init>()>"
"<android.graphics.ColorSpace$Rgb: float[] getPrimaries(float[])>","<android.graphics.ColorSpace$Rgb: float[] getPrimaries(float[])>"
"<android.view.KeyEvent: boolean isScrollLockOn()>","<android.view.KeyEvent: boolean isScrollLockOn()>"
"<java.io.ByteArrayOutputStream: void write(byte[],int,int)>","<java.io.ByteArrayOutputStream: void write(byte[],int,int)>"
"<android.widget.AbsoluteLayout: void <init>(android.content.Context)>","<android.widget.AbsoluteLayout: void <init>(android.content.Context)>"
"<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.util.SparseIntArray: void delete(int)>","<android.util.SparseIntArray: void delete(int)>"
"<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>","<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>"
"<android.graphics.Bitmap: int getScaledHeight(int)>","<android.graphics.Bitmap: int getScaledHeight(int)>"
"<android.graphics.Rect: int centerY()>","<android.graphics.Rect: int centerY()>"
"<android.app.PendingIntent: java.lang.String getCreatorPackage()>","<android.app.PendingIntent: java.lang.String getCreatorPackage()>"
"<android.hardware.Sensor: int getFifoMaxEventCount()>","<android.hardware.Sensor: int getFifoMaxEventCount()>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,char)>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>"
"<java.text.NumberFormat: java.text.NumberFormat getNumberInstance()>","<java.text.NumberFormat: java.text.NumberFormat getNumberInstance()>"
"<android.view.InputDevice$MotionRange: float getRange()>","<android.view.InputDevice$MotionRange: float getRange()>"
"<android.content.ContentProvider: int delete(android.net.Uri,android.os.Bundle)>","<android.content.ContentProvider: int delete(android.net.Uri,android.os.Bundle)>"
"<android.print.PrintAttributes$Resolution: void <init>(java.lang.String,java.lang.String,int,int)>","<android.print.PrintAttributes$Resolution: void <init>(java.lang.String,java.lang.String,int,int)>"
"<android.media.session.MediaSession$Callback: boolean onMediaButtonEvent(android.content.Intent)>","<android.media.session.MediaSession$Callback: boolean onMediaButtonEvent(android.content.Intent)>"
"<java.util.Arrays: boolean equals(int[],int,int,int[],int,int)>","<java.util.Arrays: boolean equals(int[],int,int,int[],int,int)>"
"<java.io.ObjectInputStream: char readChar()>","<java.io.ObjectInputStream: char readChar()>"
"<java.net.Socket: java.lang.String toString()>","<java.net.Socket: java.lang.String toString()>"
"<java.net.InetAddress: java.lang.String getHostName()>","<java.net.InetAddress: java.lang.String getHostName()>"
"<java.util.ArrayList: java.util.List subList(int,int)>","<java.util.ArrayList: java.util.List subList(int,int)>"
"<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>","<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>"
"<java.time.ZoneId: java.time.ZoneId 'from'(java.time.temporal.TemporalAccessor)>","<java.time.ZoneId: java.time.ZoneId 'from'(java.time.temporal.TemporalAccessor)>"
"<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()>","<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()>"
"<android.webkit.WebView: android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()>","<android.webkit.WebView: android.webkit.WebViewRenderProcessClient getWebViewRenderProcessClient()>"
"<android.view.View: void postInvalidateOnAnimation()>","<android.view.View: void postInvalidateOnAnimation()>"
"<android.app.ActivityManager: void appNotResponding(java.lang.String)>","<android.app.ActivityManager: void appNotResponding(java.lang.String)>"
"<android.text.InputFilter$LengthFilter: void <init>(int)>","<android.text.InputFilter$LengthFilter: void <init>(int)>"
"<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(long)>","<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(long)>"
"<android.net.http.SslCertificate: java.security.cert.X509Certificate getX509Certificate()>","<android.net.http.SslCertificate: java.security.cert.X509Certificate getX509Certificate()>"
"<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace match(float[],android.graphics.ColorSpace$Rgb$TransferParameters)>","<android.graphics.ColorSpace: android.graphics.ColorSpace match(float[],android.graphics.ColorSpace$Rgb$TransferParameters)>"
"<java.lang.Math: void <init>()>","<java.lang.Math: void <init>()>"
"<java.time.chrono.Era: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.chrono.Era: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<java.time.Period: int getYears()>","<java.time.Period: int getYears()>"
"<android.util.LongSparseArray: void removeAt(int)>","<android.util.LongSparseArray: void removeAt(int)>"
"<android.graphics.Insets: void <init>()>","<android.graphics.Insets: void <init>()>"
"<android.widget.RemoteViews: void setViewOutlinePreferredRadiusDimen(int,int)>","<android.widget.RemoteViews: void setViewOutlinePreferredRadiusDimen(int,int)>"
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.view.KeyEvent: java.lang.String keyCodeToString(int)>","<android.view.KeyEvent: java.lang.String keyCodeToString(int)>"
"<java.time.LocalDate: java.time.chrono.Era getEra()>","<java.time.LocalDate: java.time.chrono.Era getEra()>"
"<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse addSharedElement(int,java.lang.String)>","<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse addSharedElement(int,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.OffsetDateTime toOffsetDateTime()>","<java.time.ZonedDateTime: java.time.OffsetDateTime toOffsetDateTime()>"
"<android.view.Window: android.transition.Transition getExitTransition()>","<android.view.Window: android.transition.Transition getExitTransition()>"
"<android.content.IntentFilter: java.lang.String getDataScheme(int)>","<android.content.IntentFilter: java.lang.String getDataScheme(int)>"
"<android.view.View: int getId()>","<android.view.View: int getId()>"
"<android.widget.TextView: void setLinksClickable(boolean)>","<android.widget.TextView: void setLinksClickable(boolean)>"
"<java.util.HashMap: java.util.Set entrySet()>","<java.util.HashMap: java.util.Set entrySet()>"
"<android.util.DisplayMetrics: int hashCode()>","<android.util.DisplayMetrics: int hashCode()>"
"<java.util.Calendar: void computeTime()>","<java.util.Calendar: void computeTime()>"
"<android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>","<android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>"
"<java.util.concurrent.atomic.AtomicLong: void setPlain(long)>","<java.util.concurrent.atomic.AtomicLong: void setPlain(long)>"
"<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>","<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.lang.String toString()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.lang.String toString()>"
"<android.widget.TextView: boolean getFreezesText()>","<android.widget.TextView: boolean getFreezesText()>"
"<android.content.pm.InstrumentationInfo: void <init>()>","<android.content.pm.InstrumentationInfo: void <init>()>"
"<java.nio.DoubleBuffer: double get(int)>","<java.nio.DoubleBuffer: double get(int)>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>","<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>"
"<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>","<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>"
"<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>","<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>"
"<java.io.DataInput: void readFully(byte[],int,int)>","<java.io.DataInput: void readFully(byte[],int,int)>"
"<java.lang.Character: boolean isAlphabetic(int)>","<java.lang.Character: boolean isAlphabetic(int)>"
"<android.widget.TextView$BufferType: void <clinit>()>","<android.widget.TextView$BufferType: void <clinit>()>"
"<android.os.PersistableBundle: void <init>(int)>","<android.os.PersistableBundle: void <init>(int)>"
"<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>","<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>"
"<java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>","<java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>"
"<android.util.SparseBooleanArray: boolean valueAt(int)>","<android.util.SparseBooleanArray: boolean valueAt(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)>"
"<java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>","<java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>"
"<java.net.ServerSocket: java.lang.String toString()>","<java.net.ServerSocket: java.lang.String toString()>"
"<java.util.OptionalInt: java.lang.String toString()>","<java.util.OptionalInt: java.lang.String toString()>"
"<android.view.SurfaceControl: void <clinit>()>","<android.view.SurfaceControl: void <clinit>()>"
"<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>","<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>"
"<android.media.session.MediaSession: boolean isActive()>","<android.media.session.MediaSession: boolean isActive()>"
"<android.view.textclassifier.TextSelection$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextSelection$Request: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>","<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>"
"<android.text.style.TtsSpan$CardinalBuilder: void <init>()>","<android.text.style.TtsSpan$CardinalBuilder: void <init>()>"
"<android.content.pm.VersionedPackage: int hashCode()>","<android.content.pm.VersionedPackage: int hashCode()>"
"<android.database.Cursor: android.net.Uri getNotificationUri()>","<android.database.Cursor: android.net.Uri getNotificationUri()>"
"<android.content.SharedPreferences$Editor: void apply()>","<android.content.SharedPreferences$Editor: void apply()>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface build()>","<android.graphics.Typeface$Builder: android.graphics.Typeface build()>"
"<android.app.Fragment: void onLowMemory()>","<android.app.Fragment: void onLowMemory()>"
"<java.util.LinkedHashMap: void <init>(int,float)>","<java.util.LinkedHashMap: void <init>(int,float)>"
"<java.lang.Character: boolean isLetterOrDigit(char)>","<java.lang.Character: boolean isLetterOrDigit(char)>"
"<android.media.session.MediaController: android.os.Bundle getSessionInfo()>","<android.media.session.MediaController: android.os.Bundle getSessionInfo()>"
"<android.widget.PopupWindow: void setEnterTransition(android.transition.Transition)>","<android.widget.PopupWindow: void setEnterTransition(android.transition.Transition)>"
"<java.lang.InternalError: void <init>()>","<java.lang.InternalError: void <init>()>"
"<java.util.Optional: java.lang.Object orElse(java.lang.Object)>","<java.util.Optional: java.lang.Object orElse(java.lang.Object)>"
"<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>"
"<java.security.cert.CertificateEncodingException: void <init>(java.lang.Throwable)>","<java.security.cert.CertificateEncodingException: void <init>(java.lang.Throwable)>"
"<java.time.chrono.Chronology: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.chrono.Chronology: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>","<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>"
"<java.util.Hashtable: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Hashtable: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>","<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>"
"<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>","<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>"
"<android.app.TaskStackBuilder: int getIntentCount()>","<android.app.TaskStackBuilder: int getIntentCount()>"
"<java.time.ZonedDateTime: int hashCode()>","<java.time.ZonedDateTime: int hashCode()>"
"<java.lang.InterruptedException: void <init>(java.lang.String)>","<java.lang.InterruptedException: void <init>(java.lang.String)>"
"<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setLineSpacing(float,float)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setLineSpacing(float,float)>"
"<android.view.ViewStructure: void setTextLines(int[],int[])>","<android.view.ViewStructure: void setTextLines(int[],int[])>"
"<android.content.res.Resources: float getDimension(int)>","<android.content.res.Resources: float getDimension(int)>"
"<javax.security.auth.Subject: void setReadOnly()>","<javax.security.auth.Subject: void setReadOnly()>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints()>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints()>"
"<java.nio.Buffer: boolean hasArray()>","<java.nio.Buffer: boolean hasArray()>"
"<android.icu.util.ULocale: java.lang.String[] getISOLanguages()>","<android.icu.util.ULocale: java.lang.String[] getISOLanguages()>"
"<java.util.Locale$Builder: java.util.Locale build()>","<java.util.Locale$Builder: java.util.Locale build()>"
"<android.os.Parcel: void unmarshall(byte[],int,int)>","<android.os.Parcel: void unmarshall(byte[],int,int)>"
"<java.io.ObjectInputStream: int readInt()>","<java.io.ObjectInputStream: int readInt()>"
"<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long updateAndGet(java.lang.Object,java.util.function.LongUnaryOperator)>"
"<android.graphics.ImageDecoder: boolean isDecodeAsAlphaMaskEnabled()>","<android.graphics.ImageDecoder: boolean isDecodeAsAlphaMaskEnabled()>"
"<android.view.Window: void setDimAmount(float)>","<android.view.Window: void setDimAmount(float)>"
"<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>","<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>"
"<android.view.ActionMode$Callback2: void <init>()>","<android.view.ActionMode$Callback2: void <init>()>"
"<androidx.window.layout.d: void execute(java.lang.Runnable)>","<androidx.window.layout.d: void execute(java.lang.Runnable)>"
"<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>","<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)>"
"<android.media.Session2Token: java.lang.String getServiceName()>","<android.media.Session2Token: java.lang.String getServiceName()>"
"<android.view.DisplayCutout$Builder: void <init>()>","<android.view.DisplayCutout$Builder: void <init>()>"
"<android.view.ActionMode: void setSubtitle(int)>","<android.view.ActionMode: void setSubtitle(int)>"
"<android.app.PictureInPictureParams$Builder: void <init>(android.app.PictureInPictureParams)>","<android.app.PictureInPictureParams$Builder: void <init>(android.app.PictureInPictureParams)>"
"<android.animation.ValueAnimator: void setStartDelay(long)>","<android.animation.ValueAnimator: void setStartDelay(long)>"
"<android.webkit.ValueCallback: void onReceiveValue(java.lang.Object)>","<android.webkit.ValueCallback: void onReceiveValue(java.lang.Object)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>","<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>"
"<java.util.HashSet: java.lang.Object clone()>","<java.util.HashSet: java.lang.Object clone()>"
"<android.content.pm.PackageManager: void getPlatformPermissionsForGroup(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>","<android.content.pm.PackageManager: void getPlatformPermissionsForGroup(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>"
"<java.util.List: java.util.List copyOf(java.util.Collection)>","<java.util.List: java.util.List copyOf(java.util.Collection)>"
"<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<java.math.BigInteger: int compareTo(java.math.BigInteger)>","<java.math.BigInteger: int compareTo(java.math.BigInteger)>"
"<java.lang.Class: java.lang.Class forName(java.lang.String)>","<java.lang.Class: java.lang.Class forName(java.lang.String)>"
"<java.util.Arrays: java.lang.String toString(byte[])>","<java.util.Arrays: java.lang.String toString(byte[])>"
"<java.lang.Thread: void setName(java.lang.String)>","<java.lang.Thread: void setName(java.lang.String)>"
"<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<java.util.stream.IntStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)>","<java.util.stream.IntStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
"<android.util.ArrayMap: void ensureCapacity(int)>","<android.util.ArrayMap: void ensureCapacity(int)>"
"<android.media.ImageReader$OnImageAvailableListener: void onImageAvailable(android.media.ImageReader)>","<android.media.ImageReader$OnImageAvailableListener: void onImageAvailable(android.media.ImageReader)>"
"<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>","<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>"
"<android.content.ContextWrapper: boolean isUiContext()>","<android.content.ContextWrapper: boolean isUiContext()>"
"<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>","<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>"
"<java.time.Clock: java.time.Clock offset(java.time.Clock,java.time.Duration)>","<java.time.Clock: java.time.Clock offset(java.time.Clock,java.time.Duration)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>","<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>","<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>"
"<java.io.ByteArrayOutputStream: java.lang.String toString(java.nio.charset.Charset)>","<java.io.ByteArrayOutputStream: java.lang.String toString(java.nio.charset.Charset)>"
"<java.lang.Exception: void <init>(java.lang.String)>","<java.lang.Exception: void <init>(java.lang.String)>"
"<android.app.VoiceInteractor: java.lang.String getPackageName()>","<android.app.VoiceInteractor: java.lang.String getPackageName()>"
"<android.graphics.Bitmap: int describeContents()>","<android.graphics.Bitmap: int describeContents()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)>"
"<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>","<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>"
"<android.widget.RemoteViews: void setBlendMode(int,java.lang.String,android.graphics.BlendMode)>","<android.widget.RemoteViews: void setBlendMode(int,java.lang.String,android.graphics.BlendMode)>"
"<android.content.pm.PackageManager$ApplicationInfoFlags: long getValue()>","<android.content.pm.PackageManager$ApplicationInfoFlags: long getValue()>"
"<android.graphics.Canvas: int getSaveCount()>","<android.graphics.Canvas: int getSaveCount()>"
"<android.text.Layout: float getLineMax(int)>","<android.text.Layout: float getLineMax(int)>"
"<android.app.Dialog: void openContextMenu(android.view.View)>","<android.app.Dialog: void openContextMenu(android.view.View)>"
"<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>","<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>"
"<android.view.Window: void setFormat(int)>","<android.view.Window: void setFormat(int)>"
"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.lang.Package: java.lang.String getSpecificationVendor()>","<java.lang.Package: java.lang.String getSpecificationVendor()>"
"<java.util.ArrayDeque: int size()>","<java.util.ArrayDeque: int size()>"
"<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>","<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>"
"<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>","<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>"
"<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>","<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>"
"<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getUpperBound()>","<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getUpperBound()>"
"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>","<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
"<android.view.accessibility.AccessibilityWindowInfo: void getRegionInScreen(android.graphics.Region)>","<android.view.accessibility.AccessibilityWindowInfo: void getRegionInScreen(android.graphics.Region)>"
"<android.view.animation.Transformation: float getAlpha()>","<android.view.animation.Transformation: float getAlpha()>"
"<android.webkit.WebSettings: int getDisabledActionModeMenuItems()>","<android.webkit.WebSettings: int getDisabledActionModeMenuItems()>"
"<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)>","<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)>"
"<java.util.zip.ZipEntry: java.lang.Object clone()>","<java.util.zip.ZipEntry: java.lang.Object clone()>"
"<android.webkit.WebView: boolean canZoomOut()>","<android.webkit.WebView: boolean canZoomOut()>"
"<java.util.concurrent.atomic.AtomicBoolean: void setOpaque(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: void setOpaque(boolean)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(int,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
"<java.lang.String: java.lang.String valueOf(long)>","<java.lang.String: java.lang.String valueOf(long)>"
"<java.util.Arrays: int binarySearch(long[],int,int,long)>","<java.util.Arrays: int binarySearch(long[],int,int,long)>"
"<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>","<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()>"
"<android.content.SharedPreferences: boolean contains(java.lang.String)>","<android.content.SharedPreferences: boolean contains(java.lang.String)>"
"<android.view.ViewConfiguration: int getLongPressTimeout()>","<android.view.ViewConfiguration: int getLongPressTimeout()>"
"<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.widget.PopupWindow: int getInputMethodMode()>","<android.widget.PopupWindow: int getInputMethodMode()>"
"<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>","<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withLaterOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.ZonedDateTime withLaterOffsetAtOverlap()>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>"
"<java.util.ArrayDeque: boolean contains(java.lang.Object)>","<java.util.ArrayDeque: boolean contains(java.lang.Object)>"
"<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>","<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>"
"<android.webkit.WebView: android.os.Looper getWebViewLooper()>","<android.webkit.WebView: android.os.Looper getWebViewLooper()>"
"<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>","<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.ZonedDateTime: java.time.ZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.util.List: void replaceAll(java.util.function.UnaryOperator)>","<java.util.List: void replaceAll(java.util.function.UnaryOperator)>"
"<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>"
"<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>","<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>"
"<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>","<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>"
"<java.util.Arrays: java.lang.String toString(long[])>","<java.util.Arrays: java.lang.String toString(long[])>"
"<android.view.View: void setOnContextClickListener(android.view.View$OnContextClickListener)>","<android.view.View: void setOnContextClickListener(android.view.View$OnContextClickListener)>"
"<java.net.DatagramSocketImpl: void <init>()>","<java.net.DatagramSocketImpl: void <init>()>"
"<android.hardware.BatteryState: boolean isPresent()>","<android.hardware.BatteryState: boolean isPresent()>"
"<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>","<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>"
"<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>","<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>"
"<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>","<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>"
"<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey block(java.net.InetAddress)>","<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey block(java.net.InetAddress)>"
"<java.util.LinkedList: void clear()>","<java.util.LinkedList: void clear()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)>"
"<android.view.View: void setY(float)>","<android.view.View: void setY(float)>"
"<java.lang.Deprecated: java.lang.String since()>","<java.lang.Deprecated: java.lang.String since()>"
"<android.app.ActivityManager$AppTask: void finishAndRemoveTask()>","<android.app.ActivityManager$AppTask: void finishAndRemoveTask()>"
"<java.time.ZonedDateTime: java.time.ZoneId getZone()>","<java.time.ZonedDateTime: java.time.ZoneId getZone()>"
"<java.net.Socket: void setSoTimeout(int)>","<java.net.Socket: void setSoTimeout(int)>"
"<android.view.ViewGroup: java.lang.CharSequence getAccessibilityClassName()>","<android.view.ViewGroup: java.lang.CharSequence getAccessibilityClassName()>"
"<android.webkit.WebView: void onProvideVirtualStructure(android.view.ViewStructure)>","<android.webkit.WebView: void onProvideVirtualStructure(android.view.ViewStructure)>"
"<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,android.os.Parcelable$Creator,int[])>","<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,android.os.Parcelable$Creator,int[])>"
"<java.util.stream.LongStream: java.util.stream.LongStream sequential()>","<java.util.stream.LongStream: java.util.stream.LongStream sequential()>"
"<java.net.Socket: int getSoTimeout()>","<java.net.Socket: int getSoTimeout()>"
"<android.view.View: void setSelected(boolean)>","<android.view.View: void setSelected(boolean)>"
"<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)>","<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)>"
"<android.graphics.fonts.FontVariationAxis: boolean equals(java.lang.Object)>","<android.graphics.fonts.FontVariationAxis: boolean equals(java.lang.Object)>"
"<android.app.ActionBar: void setTitle(int)>","<android.app.ActionBar: void setTitle(int)>"
"<java.time.Duration: int toNanosPart()>","<java.time.Duration: int toNanosPart()>"
"<android.text.DynamicLayout$Builder: void <init>()>","<android.text.DynamicLayout$Builder: void <init>()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndSet(java.lang.Object,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndSet(java.lang.Object,long)>"
"<android.content.ContentValues: java.lang.String toString()>","<android.content.ContentValues: java.lang.String toString()>"
"<java.util.UUID: int hashCode()>","<java.util.UUID: int hashCode()>"
"<android.app.Activity: void finishAfterTransition()>","<android.app.Activity: void finishAfterTransition()>"
"<android.view.MotionEvent: float getHistoricalSize(int)>","<android.view.MotionEvent: float getHistoricalSize(int)>"
"<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>","<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean)>"
"<android.content.pm.PackageManager$ComponentInfoFlags: long getValue()>","<android.content.pm.PackageManager$ComponentInfoFlags: long getValue()>"
"<android.view.Display$Mode: int hashCode()>","<android.view.Display$Mode: int hashCode()>"
"<android.graphics.Path: void addArc(float,float,float,float,float,float)>","<android.graphics.Path: void addArc(float,float,float,float,float,float)>"
"<android.view.Menu: boolean performIdentifierAction(int,int)>","<android.view.Menu: boolean performIdentifierAction(int,int)>"
"<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>","<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>"
"<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>","<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>"
"<android.view.KeyEvent: boolean isLongPress()>","<android.view.KeyEvent: boolean isLongPress()>"
"<android.view.View: void setScrollIndicators(int)>","<android.view.View: void setScrollIndicators(int)>"
"<java.lang.Character: int compareTo(java.lang.Character)>","<java.lang.Character: int compareTo(java.lang.Character)>"
"<android.media.session.PlaybackState$CustomAction: int getIcon()>","<android.media.session.PlaybackState$CustomAction: int getIcon()>"
"<android.content.pm.ApplicationInfo: void <clinit>()>","<android.content.pm.ApplicationInfo: void <clinit>()>"
"<android.view.ViewStructure: android.view.ViewStructure asyncNewChild(int)>","<android.view.ViewStructure: android.view.ViewStructure asyncNewChild(int)>"
"<java.net.SocketOption: java.lang.Class type()>","<java.net.SocketOption: java.lang.Class type()>"
"<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()>","<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()>"
"<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.os.Parcel)>","<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.os.Parcel)>"
"<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>","<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>"
"<android.icu.util.ULocale: java.lang.String toString()>","<android.icu.util.ULocale: java.lang.String toString()>"
"<java.util.stream.DoubleStream: double reduce(double,java.util.function.DoubleBinaryOperator)>","<java.util.stream.DoubleStream: double reduce(double,java.util.function.DoubleBinaryOperator)>"
"<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalField,long)>","<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalField,long)>"
"<android.app.Service: void attachBaseContext(android.content.Context)>","<android.app.Service: void attachBaseContext(android.content.Context)>"
"<java.lang.reflect.Executable: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Executable: java.lang.Class getDeclaringClass()>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextClassification)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextClassification)>"
"<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>","<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>"
"<android.os.VibrationAttributes: void writeToParcel(android.os.Parcel,int)>","<android.os.VibrationAttributes: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Service: void onDestroy()>","<android.app.Service: void onDestroy()>"
"<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>","<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>"
"<android.os.Parcel: byte readByte()>","<android.os.Parcel: byte readByte()>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder includeTypesFromTextClassifier(boolean)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder includeTypesFromTextClassifier(boolean)>"
"<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,int,int)>","<android.print.PrintAttributes$MediaSize: void <init>(java.lang.String,java.lang.String,int,int)>"
"<android.transition.PathMotion: void <init>(android.content.Context,android.util.AttributeSet)>","<android.transition.PathMotion: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<java.util.Comparator: java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction)>","<java.util.Comparator: java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction)>"
"<java.time.Duration: long toMillis()>","<java.time.Duration: long toMillis()>"
"<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)>"
"<android.view.SurfaceControlViewHost: void setView(android.view.View,int,int)>","<android.view.SurfaceControlViewHost: void setView(android.view.View,int,int)>"
"<android.graphics.RecordingCanvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>"
"<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState valueOf(java.lang.String)>","<android.webkit.WebSettings$PluginState: android.webkit.WebSettings$PluginState valueOf(java.lang.String)>"
"<android.graphics.Paint$Cap: void <clinit>()>","<android.graphics.Paint$Cap: void <clinit>()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.content.ClipData: void <clinit>()>","<android.content.ClipData: void <clinit>()>"
"<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>"
"<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>"
"<android.app.FragmentManager: void enableDebugLogging(boolean)>","<android.app.FragmentManager: void enableDebugLogging(boolean)>"
"<android.content.pm.PackageInstaller$SessionInfo: void <init>()>","<android.content.pm.PackageInstaller$SessionInfo: void <init>()>"
"<android.view.Window: void setDefaultWindowFormat(int)>","<android.view.Window: void setDefaultWindowFormat(int)>"
"<android.view.View: int getSuggestedMinimumWidth()>","<android.view.View: int getSuggestedMinimumWidth()>"
"<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFailed(java.lang.CharSequence)>","<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFailed(java.lang.CharSequence)>"
"<android.content.pm.PackageInfo: long getLongVersionCode()>","<android.content.pm.PackageInfo: long getLongVersionCode()>"
"<android.content.Intent: int getFlags()>","<android.content.Intent: int getFlags()>"
"<android.content.res.AssetFileDescriptor: long getDeclaredLength()>","<android.content.res.AssetFileDescriptor: long getDeclaredLength()>"
"<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>","<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>"
"<android.content.Intent: android.os.Bundle getExtras()>","<android.content.Intent: android.os.Bundle getExtras()>"
"<android.content.pm.PackageManager$Property: boolean getBoolean()>","<android.content.pm.PackageManager$Property: boolean getBoolean()>"
"<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>"
"<android.widget.AbsListView: android.view.View getSelectedView()>","<android.widget.AbsListView: android.view.View getSelectedView()>"
"<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>","<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>"
"<java.util.stream.LongStream: java.util.OptionalLong min()>","<java.util.stream.LongStream: java.util.OptionalLong min()>"
"<java.time.Period: int getDays()>","<java.time.Period: int getDays()>"
"<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>","<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getRequireUserAction()>","<android.content.pm.PackageInstaller$SessionInfo: int getRequireUserAction()>"
"<android.view.textclassifier.TextLinks$TextLink: void <init>()>","<android.view.textclassifier.TextLinks$TextLink: void <init>()>"
"<android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean moveToLeftEdge(android.text.Spannable,android.text.Layout)>"
"<android.media.session.MediaSession$Callback: void onStop()>","<android.media.session.MediaSession$Callback: void onStop()>"
"<android.graphics.drawable.ColorDrawable: void setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.ColorDrawable: void setTintBlendMode(android.graphics.BlendMode)>"
"<java.security.cert.CertificateParsingException: void <init>()>","<java.security.cert.CertificateParsingException: void <init>()>"
"<android.hardware.SensorManager: void <init>()>","<android.hardware.SensorManager: void <init>()>"
"<java.util.Locale: java.util.Set getExtensionKeys()>","<java.util.Locale: java.util.Set getExtensionKeys()>"
"<android.os.Parcel: void readCharArray(char[])>","<android.os.Parcel: void readCharArray(char[])>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>"
"<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>","<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>"
"<android.graphics.Matrix: boolean preSkew(float,float)>","<android.graphics.Matrix: boolean preSkew(float,float)>"
"<android.view.View: java.lang.Object getTag()>","<android.view.View: java.lang.Object getTag()>"
"<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>","<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>"
"<java.lang.LinkageError: void <init>()>","<java.lang.LinkageError: void <init>()>"
"<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>","<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>"
"<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setCountryCode(java.lang.String)>","<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setCountryCode(java.lang.String)>"
"<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader,java.lang.Class)>"
"<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>","<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setLanguageTag(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setLanguageTag(java.lang.String)>"
"<android.view.View: int getFocusable()>","<android.view.View: int getFocusable()>"
"<android.media.session.MediaSession: void setQueue(java.util.List)>","<android.media.session.MediaSession: void setQueue(java.util.List)>"
"<android.widget.ListView: void <init>(android.content.Context)>","<android.widget.ListView: void <init>(android.content.Context)>"
"<android.view.translation.TranslationResponseValue: void <init>()>","<android.view.translation.TranslationResponseValue: void <init>()>"
"<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>","<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>"
"<android.view.KeyCharacterMap: int getKeyboardType()>","<android.view.KeyCharacterMap: int getKeyboardType()>"
"<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>","<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>"
"<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>"
"<android.view.SurfaceView: android.os.IBinder getHostToken()>","<android.view.SurfaceView: android.os.IBinder getHostToken()>"
"<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>","<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>"
"<android.view.inputmethod.EditorBoundsInfo: void <init>()>","<android.view.inputmethod.EditorBoundsInfo: void <init>()>"
"<android.view.KeyCharacterMap$KeyData: void <init>()>","<android.view.KeyCharacterMap$KeyData: void <init>()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>","<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>"
"<android.view.View: float getPivotX()>","<android.view.View: float getPivotX()>"
"<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>","<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>"
"<java.util.stream.IntStream: java.util.stream.IntStream sorted()>","<java.util.stream.IntStream: java.util.stream.IntStream sorted()>"
"<android.media.ImageReader: void close()>","<android.media.ImageReader: void close()>"
"<android.content.ContentProvider$CallingIdentity: void <init>(android.content.ContentProvider)>","<android.content.ContentProvider$CallingIdentity: void <init>(android.content.ContentProvider)>"
"<java.util.Arrays: void fill(float[],float)>","<java.util.Arrays: void fill(float[],float)>"
"<java.time.Month: java.time.Month minus(long)>","<java.time.Month: java.time.Month minus(long)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])>","<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])>"
"<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>","<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>"
"<java.util.Set: void clear()>","<java.util.Set: void clear()>"
"<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList,android.content.res.ColorStateList)>","<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList,android.content.res.ColorStateList)>"
"<android.view.WindowInsetsController: void setSystemBarsBehavior(int)>","<android.view.WindowInsetsController: void setSystemBarsBehavior(int)>"
"<java.nio.file.FileStore: long getBlockSize()>","<java.nio.file.FileStore: long getBlockSize()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.WindowManager: boolean isCrossWindowBlurEnabled()>","<android.view.WindowManager: boolean isCrossWindowBlurEnabled()>"
"<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()>","<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()>"
"<java.util.Deque: boolean add(java.lang.Object)>","<java.util.Deque: boolean add(java.lang.Object)>"
"<android.icu.util.ULocale: java.lang.String canonicalize(java.lang.String)>","<android.icu.util.ULocale: java.lang.String canonicalize(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)>","<java.time.LocalDateTime: java.time.LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)>"
"<android.graphics.Paint$Join: android.graphics.Paint$Join[] values()>","<android.graphics.Paint$Join: android.graphics.Paint$Join[] values()>"
"<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()>","<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()>"
"<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutCancelled()>","<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutCancelled()>"
"<android.hardware.display.DeviceProductInfo: int hashCode()>","<android.hardware.display.DeviceProductInfo: int hashCode()>"
"<android.content.ContentProvider: android.content.Context getContext()>","<android.content.ContentProvider: android.content.Context getContext()>"
"<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>"
"<android.window.OnBackInvokedCallback: void onBackInvoked()>","<android.window.OnBackInvokedCallback: void onBackInvoked()>"
"<android.content.ContextParams: void <init>()>","<android.content.ContextParams: void <init>()>"
"<java.net.Socket: int getSendBufferSize()>","<java.net.Socket: int getSendBufferSize()>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>"
"<android.graphics.Region: void setEmpty()>","<android.graphics.Region: void setEmpty()>"
"<java.security.cert.Certificate: void verify(java.security.PublicKey,java.security.Provider)>","<java.security.cert.Certificate: void verify(java.security.PublicKey,java.security.Provider)>"
"<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>","<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>"
"<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>","<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>"
"<android.text.style.URLSpan: void <init>(java.lang.String)>","<android.text.style.URLSpan: void <init>(java.lang.String)>"
"<android.graphics.Matrix: void setScale(float,float,float,float)>","<android.graphics.Matrix: void setScale(float,float,float,float)>"
"<android.view.inputmethod.InputMethodSubtype: void <clinit>()>","<android.view.inputmethod.InputMethodSubtype: void <clinit>()>"
"<android.graphics.Paint: void getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)>","<android.graphics.Paint: void getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)>"
"<android.content.pm.PackageManager: java.lang.String[] getSystemSharedLibraryNames()>","<android.content.pm.PackageManager: java.lang.String[] getSystemSharedLibraryNames()>"
"<android.app.Fragment: void onDestroyView()>","<android.app.Fragment: void onDestroyView()>"
"<java.net.URI: boolean isAbsolute()>","<java.net.URI: boolean isAbsolute()>"
"<android.widget.TextView: int getMinHeight()>","<android.widget.TextView: int getMinHeight()>"
"<android.view.TextureView: void onDraw(android.graphics.Canvas)>","<android.view.TextureView: void onDraw(android.graphics.Canvas)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount)>"
"<java.time.Instant: long getLong(java.time.temporal.TemporalField)>","<java.time.Instant: long getLong(java.time.temporal.TemporalField)>"
"<java.util.ArrayList: void clear()>","<java.util.ArrayList: void clear()>"
"<java.lang.reflect.Executable: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.Executable: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.app.Notification$BubbleMetadata: java.lang.String getShortcutId()>","<android.app.Notification$BubbleMetadata: java.lang.String getShortcutId()>"
"<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>"
"<java.time.ZoneOffset: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.ZoneOffset: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>","<android.webkit.WebView: android.webkit.WebBackForwardList saveState(android.os.Bundle)>"
"<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float)>"
"<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>","<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>"
"<android.content.res.ColorStateList: int getChangingConfigurations()>","<android.content.res.ColorStateList: int getChangingConfigurations()>"
"<android.webkit.WebView: int computeVerticalScrollRange()>","<android.webkit.WebView: int computeVerticalScrollRange()>"
"<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>","<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>"
"<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>","<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>"
"<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>","<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>"
"<android.content.pm.VersionedPackage: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.VersionedPackage: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Context: java.io.File getNoBackupFilesDir()>","<android.content.Context: java.io.File getNoBackupFilesDir()>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout build()>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout build()>"
"<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>","<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>"
"<android.view.View: boolean requestFocusFromTouch()>","<android.view.View: boolean requestFocusFromTouch()>"
"<android.view.MotionEvent: void setAction(int)>","<android.view.MotionEvent: void setAction(int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setForegroundServiceBehavior(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setForegroundServiceBehavior(int)>"
"<android.content.pm.ActivityInfo: int getThemeResource()>","<android.content.pm.ActivityInfo: int getThemeResource()>"
"<android.view.MotionEvent: float getOrientation()>","<android.view.MotionEvent: float getOrientation()>"
"<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>","<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>"
"<java.nio.IntBuffer: java.lang.String toString()>","<java.nio.IntBuffer: java.lang.String toString()>"
"<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>","<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>"
"<android.content.pm.ApplicationInfo: boolean isProfileableByShell()>","<android.content.pm.ApplicationInfo: boolean isProfileableByShell()>"
"<android.content.ContextParams$Builder: android.content.ContextParams$Builder setNextAttributionSource(android.content.AttributionSource)>","<android.content.ContextParams$Builder: android.content.ContextParams$Builder setNextAttributionSource(android.content.AttributionSource)>"
"<android.widget.TextView: int getBreakStrategy()>","<android.widget.TextView: int getBreakStrategy()>"
"<android.widget.Toolbar: int getContentInsetRight()>","<android.widget.Toolbar: int getContentInsetRight()>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>"
"<java.net.ServerSocket: void close()>","<java.net.ServerSocket: void close()>"
"<android.widget.PopupWindow: void setTouchModal(boolean)>","<android.widget.PopupWindow: void setTouchModal(boolean)>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledState()>","<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledState()>"
"<java.net.NetworkInterface: int hashCode()>","<java.net.NetworkInterface: int hashCode()>"
"<android.util.Rational: int compareTo(android.util.Rational)>","<android.util.Rational: int compareTo(android.util.Rational)>"
"<android.app.PictureInPictureParams: android.util.Rational getAspectRatio()>","<android.app.PictureInPictureParams: android.util.Rational getAspectRatio()>"
"<android.webkit.SslErrorHandler: void proceed()>","<android.webkit.SslErrorHandler: void proceed()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setLocusId(android.content.LocusId)>","<android.app.Notification$Builder: android.app.Notification$Builder setLocusId(android.content.LocusId)>"
"<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)>","<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onBadgingChanged(int)>","<android.content.pm.PackageInstaller$SessionCallback: void onBadgingChanged(int)>"
"<java.util.HashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setSummaryText(java.lang.CharSequence)>"
"<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>"
"<android.content.Context: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>","<android.content.Context: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>"
"<android.os.Trace: boolean isEnabled()>","<android.os.Trace: boolean isEnabled()>"
"<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>","<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>"
"<android.app.RemoteAction: boolean shouldShowIcon()>","<android.app.RemoteAction: boolean shouldShowIcon()>"
"<android.content.AttributionSource: int hashCode()>","<android.content.AttributionSource: int hashCode()>"
"<android.content.pm.PackageManager: boolean canRequestPackageInstalls()>","<android.content.pm.PackageManager: boolean canRequestPackageInstalls()>"
"<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getInProgressLabel()>","<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getInProgressLabel()>"
"<java.time.format.DateTimeFormatter: void <init>()>","<java.time.format.DateTimeFormatter: void <init>()>"
"<android.app.Dialog: boolean requestWindowFeature(int)>","<android.app.Dialog: boolean requestWindowFeature(int)>"
"<android.view.WindowInsetsAnimationController: float getCurrentFraction()>","<android.view.WindowInsetsAnimationController: float getCurrentFraction()>"
"<android.graphics.Region: boolean quickContains(android.graphics.Rect)>","<android.graphics.Region: boolean quickContains(android.graphics.Rect)>"
"<java.time.Period: long toTotalMonths()>","<java.time.Period: long toTotalMonths()>"
"<java.util.Date: java.lang.String toLocaleString()>","<java.util.Date: java.lang.String toLocaleString()>"
"<android.widget.RemoteViews: void setDisplayedChild(int,int)>","<android.widget.RemoteViews: void setDisplayedChild(int,int)>"
"<android.app.TaskStackBuilder: void <init>()>","<android.app.TaskStackBuilder: void <init>()>"
"<java.util.Arrays: void parallelSort(float[])>","<java.util.Arrays: void parallelSort(float[])>"
"<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>","<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)>"
"<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>","<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>"
"<android.webkit.WebView: void destroy()>","<android.webkit.WebView: void destroy()>"
"<java.lang.IllegalAccessError: void <init>()>","<java.lang.IllegalAccessError: void <init>()>"
"<java.time.Duration: java.time.Duration ofMinutes(long)>","<java.time.Duration: java.time.Duration ofMinutes(long)>"
"<android.os.Vibrator: int[] areEffectsSupported(int[])>","<android.os.Vibrator: int[] areEffectsSupported(int[])>"
"<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()>","<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()>"
"<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.net.URLConnection: void setDefaultUseCaches(boolean)>","<java.net.URLConnection: void setDefaultUseCaches(boolean)>"
"<android.view.View: void setAccessibilityHeading(boolean)>","<android.view.View: void setAccessibilityHeading(boolean)>"
"<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>","<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>"
"<android.util.Rational: android.util.Rational parseRational(java.lang.String)>","<android.util.Rational: android.util.Rational parseRational(java.lang.String)>"
"<android.util.ArrayMap: java.util.Set entrySet()>","<android.util.ArrayMap: java.util.Set entrySet()>"
"<java.util.Locale: java.util.Locale stripExtensions()>","<java.util.Locale: java.util.Locale stripExtensions()>"
"<org.json.JSONArray: double optDouble(int)>","<org.json.JSONArray: double optDouble(int)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setRoundedCorner(int,android.view.RoundedCorner)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setRoundedCorner(int,android.view.RoundedCorner)>"
"<java.net.URI: boolean isOpaque()>","<java.net.URI: boolean isOpaque()>"
"<java.io.ObjectOutputStream: void write(byte[],int,int)>","<java.io.ObjectOutputStream: void write(byte[],int,int)>"
"<java.net.URISyntaxException: java.lang.String getInput()>","<java.net.URISyntaxException: java.lang.String getInput()>"
"<java.util.IdentityHashMap: void <init>(java.util.Map)>","<java.util.IdentityHashMap: void <init>(java.util.Map)>"
"<android.view.ViewGroup: int getLayoutMode()>","<android.view.ViewGroup: int getLayoutMode()>"
"<java.io.ObjectOutputStream: void writeFloat(float)>","<java.io.ObjectOutputStream: void writeFloat(float)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>","<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>"
"<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>","<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>"
"<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>","<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>"
"<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>","<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>"
"<io.flutter.plugins.webviewflutter.m1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.m1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>"
"<android.view.inputmethod.CursorAnchorInfo: void <clinit>()>","<android.view.inputmethod.CursorAnchorInfo: void <clinit>()>"
"<android.view.Window: boolean hasSoftInputMode()>","<android.view.Window: boolean hasSoftInputMode()>"
"<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.content.ClipboardManager: void setText(java.lang.CharSequence)>","<android.content.ClipboardManager: void setText(java.lang.CharSequence)>"
"<android.widget.AbsoluteLayout: boolean shouldDelayChildPressedState()>","<android.widget.AbsoluteLayout: boolean shouldDelayChildPressedState()>"
"<android.icu.util.ULocale: boolean equals(java.lang.Object)>","<android.icu.util.ULocale: boolean equals(java.lang.Object)>"
"<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)>"
"<android.view.View: boolean isTextAlignmentResolved()>","<android.view.View: boolean isTextAlignmentResolved()>"
"<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[],java.util.Comparator)>"
"<android.webkit.WebView: boolean onCheckIsTextEditor()>","<android.webkit.WebView: boolean onCheckIsTextEditor()>"
"<java.time.LocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)>"
"<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>"
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>","<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
"<android.view.View: void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>"
"<android.view.textclassifier.TextLinks$TextLink: int getEntityCount()>","<android.view.textclassifier.TextLinks$TextLink: int getEntityCount()>"
"<java.security.Provider: java.util.Set entrySet()>","<java.security.Provider: java.util.Set entrySet()>"
"<java.util.HashSet: java.util.Iterator iterator()>","<java.util.HashSet: java.util.Iterator iterator()>"
"<java.util.stream.LongStream: java.util.Spliterator spliterator()>","<java.util.stream.LongStream: java.util.Spliterator spliterator()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream sequential()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream sequential()>"
"<android.text.style.TtsSpan$ElectronicBuilder: void <init>()>","<android.text.style.TtsSpan$ElectronicBuilder: void <init>()>"
"<io.flutter.plugins.webviewflutter.j0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.j0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>","<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>"
"<android.content.pm.PackageInstaller$SessionParams: void setAppIcon(android.graphics.Bitmap)>","<android.content.pm.PackageInstaller$SessionParams: void setAppIcon(android.graphics.Bitmap)>"
"<java.lang.Integer: int lowestOneBit(int)>","<java.lang.Integer: int lowestOneBit(int)>"
"<android.app.Activity: void onActivityReenter(int,android.content.Intent)>","<android.app.Activity: void onActivityReenter(int,android.content.Intent)>"
"<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>","<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setSummaryText(java.lang.CharSequence)>"
"<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>","<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>"
"<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>","<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long get(java.lang.Object)>"
"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.content.ComponentName: void <init>(android.os.Parcel)>","<android.content.ComponentName: void <init>(android.os.Parcel)>"
"<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>","<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>","<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isActive()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isActive()>"
"<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View,int)>","<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View,int)>"
"<android.content.pm.PackageInstaller$Session: int getParentSessionId()>","<android.content.pm.PackageInstaller$Session: int getParentSessionId()>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.view.translation.TranslationCapability: void <clinit>()>","<android.view.translation.TranslationCapability: void <clinit>()>"
"<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>","<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>"
"<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>"
"<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)>","<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)>"
"<java.math.BigInteger: java.math.BigInteger pow(int)>","<java.math.BigInteger: java.math.BigInteger pow(int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withYear(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withYear(int)>"
"<android.widget.TextView: int getTotalPaddingLeft()>","<android.widget.TextView: int getTotalPaddingLeft()>"
"<io.flutter.plugin.platform.d: void <init>(io.flutter.plugin.platform.c$b,int)>","<io.flutter.plugin.platform.d: void <init>(io.flutter.plugin.platform.c$b,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: void <init>()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: void <init>()>"
"<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>","<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>"
"<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<androidx.window.sidecar.SidecarInterface: androidx.window.sidecar.SidecarWindowLayoutInfo getWindowLayoutInfo(android.os.IBinder)>","<androidx.window.sidecar.SidecarInterface: androidx.window.sidecar.SidecarWindowLayoutInfo getWindowLayoutInfo(android.os.IBinder)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>"
"<java.lang.SecurityException: void <init>(java.lang.Throwable)>","<java.lang.SecurityException: void <init>(java.lang.Throwable)>"
"<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>","<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>"
"<android.media.Image: void close()>","<android.media.Image: void close()>"
"<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()>","<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()>"
"<java.time.Duration: java.time.Duration ofDays(long)>","<java.time.Duration: java.time.Duration ofDays(long)>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)>"
"<android.view.SurfaceView: void <init>(android.content.Context)>","<android.view.SurfaceView: void <init>(android.content.Context)>"
"<android.content.pm.PackageInstaller$SessionParams: void setInstallScenario(int)>","<android.content.pm.PackageInstaller$SessionParams: void setInstallScenario(int)>"
"<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)>","<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)>"
"<java.util.AbstractQueue: boolean add(java.lang.Object)>","<java.util.AbstractQueue: boolean add(java.lang.Object)>"
"<android.print.PrintAttributes$Resolution: boolean equals(java.lang.Object)>","<android.print.PrintAttributes$Resolution: boolean equals(java.lang.Object)>"
"<android.view.WindowId$FocusObserver: void onFocusGained(android.view.WindowId)>","<android.view.WindowId$FocusObserver: void onFocusGained(android.view.WindowId)>"
"<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>","<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>"
"<android.text.Layout: boolean getLineContainsTab(int)>","<android.text.Layout: boolean getLineContainsTab(int)>"
"<android.text.SpannableStringBuilder: void clearSpans()>","<android.text.SpannableStringBuilder: void clearSpans()>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setCancelLabel(java.lang.CharSequence)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setCancelLabel(java.lang.CharSequence)>"
"<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>"
"<java.nio.ByteBuffer: double getDouble(int)>","<java.nio.ByteBuffer: double getDouble(int)>"
"<java.nio.charset.Charset: java.lang.String name()>","<java.nio.charset.Charset: java.lang.String name()>"
"<java.io.DataInput: long readLong()>","<java.io.DataInput: long readLong()>"
"<android.widget.RemoteViews$RemoteCollectionItems: long getItemId(int)>","<android.widget.RemoteViews$RemoteCollectionItems: long getItemId(int)>"
"<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>","<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>"
"<android.view.View: void onOverScrolled(int,int,boolean,boolean)>","<android.view.View: void onOverScrolled(int,int,boolean,boolean)>"
"<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()>","<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithm()>"
"<android.view.inputmethod.ExtractedTextRequest: int describeContents()>","<android.view.inputmethod.ExtractedTextRequest: int describeContents()>"
"<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>","<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>"
"<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<android.view.textclassifier.TextLanguage: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLanguage: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebSettings: int getMinimumLogicalFontSize()>","<android.webkit.WebSettings: int getMinimumLogicalFontSize()>"
"<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>"
"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>","<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>"
"<android.content.ContextWrapper: android.content.res.Resources getResources()>","<android.content.ContextWrapper: android.content.res.Resources getResources()>"
"<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>","<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>","<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>"
"<android.graphics.Matrix: boolean postScale(float,float,float,float)>","<android.graphics.Matrix: boolean postScale(float,float,float,float)>"
"<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.graphics.RecordingCanvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>"
"<android.content.res.Resources: java.lang.String getResourcePackageName(int)>","<android.content.res.Resources: java.lang.String getResourcePackageName(int)>"
"<android.content.BroadcastReceiver: int getResultCode()>","<android.content.BroadcastReceiver: int getResultCode()>"
"<java.lang.Short: short reverseBytes(short)>","<java.lang.Short: short reverseBytes(short)>"
"<android.widget.ListView: void onMeasure(int,int)>","<android.widget.ListView: void onMeasure(int,int)>"
"<java.util.SortedMap: java.util.Collection values()>","<java.util.SortedMap: java.util.Collection values()>"
"<android.view.View$BaseSavedState: void <clinit>()>","<android.view.View$BaseSavedState: void <clinit>()>"
"<android.view.ViewConfiguration: float getScrollFriction()>","<android.view.ViewConfiguration: float getScrollFriction()>"
"<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>","<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>"
"<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)>","<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)>"
"<android.os.Looper: void setMessageLogging(android.util.Printer)>","<android.os.Looper: void setMessageLogging(android.util.Printer)>"
"<android.view.View: void onScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>","<android.view.View: void onScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>"
"<android.os.Debug: void stopNativeTracing()>","<android.os.Debug: void stopNativeTracing()>"
"<android.app.Fragment: void setUserVisibleHint(boolean)>","<android.app.Fragment: void setUserVisibleHint(boolean)>"
"<java.security.Provider: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.security.Provider: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.Locale: java.lang.String getDisplayCountry()>","<java.util.Locale: java.lang.String getDisplayCountry()>"
"<android.media.Image: android.hardware.SyncFence getFence()>","<android.media.Image: android.hardware.SyncFence getFence()>"
"<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.drawable.ColorDrawable: android.graphics.ColorFilter getColorFilter()>","<android.graphics.drawable.ColorDrawable: android.graphics.ColorFilter getColorFilter()>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)>"
"<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>"
"<java.io.PrintStream: void <init>(java.lang.String)>","<java.io.PrintStream: void <init>(java.lang.String)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()>"
"<java.util.function.LongPredicate: java.util.function.LongPredicate and(java.util.function.LongPredicate)>","<java.util.function.LongPredicate: java.util.function.LongPredicate and(java.util.function.LongPredicate)>"
"<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>","<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>"
"<android.util.SizeF: int describeContents()>","<android.util.SizeF: int describeContents()>"
"<java.util.LinkedHashSet: void <init>(java.util.Collection)>","<java.util.LinkedHashSet: void <init>(java.util.Collection)>"
"<java.lang.Runtime: long maxMemory()>","<java.lang.Runtime: long maxMemory()>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setEllipsizedWidth(int)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setEllipsizedWidth(int)>"
"<android.os.Message: void setAsynchronous(boolean)>","<android.os.Message: void setAsynchronous(boolean)>"
"<java.lang.Character: int getType(char)>","<java.lang.Character: int getType(char)>"
"<android.widget.TextView: int getMaxEms()>","<android.widget.TextView: int getMaxEms()>"
"<android.content.ClipDescription: void <clinit>()>","<android.content.ClipDescription: void <clinit>()>"
"<java.nio.LongBuffer: java.nio.Buffer reset()>","<java.nio.LongBuffer: java.nio.Buffer reset()>"
"<android.os.Debug: int getThreadAllocSize()>","<android.os.Debug: int getThreadAllocSize()>"
"<java.util.Map: java.util.Set keySet()>","<java.util.Map: java.util.Set keySet()>"
"<android.animation.ValueAnimator: int getRepeatCount()>","<android.animation.ValueAnimator: int getRepeatCount()>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float)>"
"<android.view.View: void cancelPendingInputEvents()>","<android.view.View: void cancelPendingInputEvents()>"
"<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>","<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>"
"<java.util.stream.DoubleStream: java.util.Spliterator$OfDouble spliterator()>","<java.util.stream.DoubleStream: java.util.Spliterator$OfDouble spliterator()>"
"<java.util.concurrent.atomic.AtomicInteger: int compareAndExchange(int,int)>","<java.util.concurrent.atomic.AtomicInteger: int compareAndExchange(int,int)>"
"<android.os.Debug: void <init>()>","<android.os.Debug: void <init>()>"
"<java.util.ArrayList: void forEach(java.util.function.Consumer)>","<java.util.ArrayList: void forEach(java.util.function.Consumer)>"
"<java.util.PriorityQueue: boolean add(java.lang.Object)>","<java.util.PriorityQueue: boolean add(java.lang.Object)>"
"<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>","<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>"
"<android.graphics.RecordingCanvas: boolean isOpaque()>","<android.graphics.RecordingCanvas: boolean isOpaque()>"
"<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>","<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>"
"<android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener,android.os.Handler)>","<android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener,android.os.Handler)>"
"<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>","<android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>"
"<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>"
"<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>","<java.util.WeakHashMap: boolean containsValue(java.lang.Object)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>"
"<java.io.PrintWriter: void <init>(java.lang.String,java.nio.charset.Charset)>","<java.io.PrintWriter: void <init>(java.lang.String,java.nio.charset.Charset)>"
"<android.util.TypedValue: boolean isColorType()>","<android.util.TypedValue: boolean isColorType()>"
"<android.os.ResultReceiver: void <clinit>()>","<android.os.ResultReceiver: void <clinit>()>"
"<android.view.TextureView: void setLayerType(int,android.graphics.Paint)>","<android.view.TextureView: void setLayerType(int,android.graphics.Paint)>"
"<android.os.BaseBundle: double getDouble(java.lang.String)>","<android.os.BaseBundle: double getDouble(java.lang.String)>"
"<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>","<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)>"
"<java.util.zip.ZipFile: int size()>","<java.util.zip.ZipFile: int size()>"
"<java.util.concurrent.atomic.AtomicLong: long updateAndGet(java.util.function.LongUnaryOperator)>","<java.util.concurrent.atomic.AtomicLong: long updateAndGet(java.util.function.LongUnaryOperator)>"
"<android.os.Parcel: java.lang.Object readParcelable(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object readParcelable(java.lang.ClassLoader,java.lang.Class)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>"
"<android.content.ContentResolver: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>"
"<android.view.PointerIcon: void <init>()>","<android.view.PointerIcon: void <init>()>"
"<java.time.format.DecimalStyle: void <clinit>()>","<java.time.format.DecimalStyle: void <clinit>()>"
"<android.graphics.RenderNode: boolean getClipToOutline()>","<android.graphics.RenderNode: boolean getClipToOutline()>"
"<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>","<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>"
"<android.view.View: int computeVerticalScrollOffset()>","<android.view.View: int computeVerticalScrollOffset()>"
"<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.content.pm.ComponentInfo: void <init>()>","<android.content.pm.ComponentInfo: void <init>()>"
"<java.io.BufferedReader: void <init>(java.io.Reader)>","<java.io.BufferedReader: void <init>(java.io.Reader)>"
"<android.view.textclassifier.TextClassificationSessionId: int describeContents()>","<android.view.textclassifier.TextClassificationSessionId: int describeContents()>"
"<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.content.pm.ApplicationInfo: java.lang.String toString()>","<android.content.pm.ApplicationInfo: java.lang.String toString()>"
"<java.lang.AssertionError: void <init>(boolean)>","<java.lang.AssertionError: void <init>(boolean)>"
"<android.app.Activity: java.lang.String getCallingPackage()>","<android.app.Activity: java.lang.String getCallingPackage()>"
"<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>","<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>"
"<org.json.JSONArray: org.json.JSONArray optJSONArray(int)>","<org.json.JSONArray: org.json.JSONArray optJSONArray(int)>"
"<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>","<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer duplicate()>","<java.nio.FloatBuffer: java.nio.FloatBuffer duplicate()>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: int getTextSizeUnit()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: int getTextSizeUnit()>"
"<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>","<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>"
"<android.content.pm.PackageInstaller: java.util.List getMySessions()>","<android.content.pm.PackageInstaller: java.util.List getMySessions()>"
"<android.graphics.BlendMode: void <init>(java.lang.String,int)>","<android.graphics.BlendMode: void <init>(java.lang.String,int)>"
"<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>","<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>"
"<java.lang.AssertionError: void <init>(int)>","<java.lang.AssertionError: void <init>(int)>"
"<java.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>"
"<android.media.Rating: android.media.Rating newUnratedRating(int)>","<android.media.Rating: android.media.Rating newUnratedRating(int)>"
"<android.view.View: void setElevation(float)>","<android.view.View: void setElevation(float)>"
"<android.view.animation.Animation: boolean getFillBefore()>","<android.view.animation.Animation: boolean getFillBefore()>"
"<android.view.textservice.TextServicesManager: void <init>()>","<android.view.textservice.TextServicesManager: void <init>()>"
"<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.view.textservice.SpellCheckerSubtype: void writeToParcel(android.os.Parcel,int)>","<android.view.textservice.SpellCheckerSubtype: void writeToParcel(android.os.Parcel,int)>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'from'(java.time.temporal.TemporalAccessor)>"
"<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()>","<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()>"
"<java.time.Duration: java.time.Duration plusHours(long)>","<java.time.Duration: java.time.Duration plusHours(long)>"
"<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>","<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>"
"<android.database.Cursor: boolean isAfterLast()>","<android.database.Cursor: boolean isAfterLast()>"
"<java.util.Hashtable: void rehash()>","<java.util.Hashtable: void rehash()>"
"<android.app.Activity: void onPostResume()>","<android.app.Activity: void onPostResume()>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>","<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>"
"<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder setTracingMode(int)>","<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder setTracingMode(int)>"
"<android.view.textclassifier.ConversationActions: int describeContents()>","<android.view.textclassifier.ConversationActions: int describeContents()>"
"<java.io.File: boolean mkdir()>","<java.io.File: boolean mkdir()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>"
"<android.content.pm.ProviderInfo: java.lang.String toString()>","<android.content.pm.ProviderInfo: java.lang.String toString()>"
"<java.nio.ByteBuffer: float getFloat()>","<java.nio.ByteBuffer: float getFloat()>"
"<android.app.Dialog: void setTitle(java.lang.CharSequence)>","<android.app.Dialog: void setTitle(java.lang.CharSequence)>"
"<android.view.Window: void setReenterTransition(android.transition.Transition)>","<android.view.Window: void setReenterTransition(android.transition.Transition)>"
"<io.flutter.plugins.webviewflutter.t: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.t: void a(java.lang.Object,y.a$e)>"
"<android.graphics.drawable.Drawable: boolean isAutoMirrored()>","<android.graphics.drawable.Drawable: boolean isAutoMirrored()>"
"<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>","<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>"
"<java.time.ZoneOffset: void <init>()>","<java.time.ZoneOffset: void <init>()>"
"<android.os.BaseBundle: java.lang.String getString(java.lang.String)>","<android.os.BaseBundle: java.lang.String getString(java.lang.String)>"
"<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>","<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>"
"<java.net.Socket: java.net.InetAddress getInetAddress()>","<java.net.Socket: java.net.InetAddress getInetAddress()>"
"<android.transition.Transition: java.lang.String toString()>","<android.transition.Transition: java.lang.String toString()>"
"<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>","<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>"
"<io.flutter.plugins.webviewflutter.l3: void <clinit>()>","<io.flutter.plugins.webviewflutter.l3: void <clinit>()>"
"<org.json.JSONTokener: char next(char)>","<org.json.JSONTokener: char next(char)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>"
"<java.util.PriorityQueue: void clear()>","<java.util.PriorityQueue: void clear()>"
"<java.util.regex.Matcher: java.lang.String toString()>","<java.util.regex.Matcher: java.lang.String toString()>"
"<java.security.InvalidKeyException: void <init>()>","<java.security.InvalidKeyException: void <init>()>"
"<android.media.session.MediaSession$Callback: void onSkipToQueueItem(long)>","<android.media.session.MediaSession$Callback: void onSkipToQueueItem(long)>"
"<android.widget.PopupWindow: boolean getOverlapAnchor()>","<android.widget.PopupWindow: boolean getOverlapAnchor()>"
"<android.view.ViewGroup: void suppressLayout(boolean)>","<android.view.ViewGroup: void suppressLayout(boolean)>"
"<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>","<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>"
"<android.animation.ValueAnimator: void setRepeatMode(int)>","<android.animation.ValueAnimator: void setRepeatMode(int)>"
"<android.view.View: boolean getClipToOutline()>","<android.view.View: boolean getClipToOutline()>"
"<android.view.ViewConfiguration: int getMultiPressTimeout()>","<android.view.ViewConfiguration: int getMultiPressTimeout()>"
"<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)>","<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: long getSize()>","<android.content.pm.PackageInstaller$SessionInfo: long getSize()>"
"<android.transition.Transition: android.transition.Transition removeTarget(int)>","<android.transition.Transition: android.transition.Transition removeTarget(int)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(java.lang.Object,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int addAndGet(java.lang.Object,int)>"
"<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetAcquire(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetAcquire(java.lang.Object,java.lang.Object)>"
"<android.hardware.SyncFence: void writeToParcel(android.os.Parcel,int)>","<android.hardware.SyncFence: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Thread: int activeCount()>","<java.lang.Thread: int activeCount()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer compact()>","<java.nio.ShortBuffer: java.nio.ShortBuffer compact()>"
"<android.webkit.GeolocationPermissions: void allow(java.lang.String)>","<android.webkit.GeolocationPermissions: void allow(java.lang.String)>"
"<android.view.KeyEvent: void <clinit>()>","<android.view.KeyEvent: void <clinit>()>"
"<java.util.Enumeration: java.lang.Object nextElement()>","<java.util.Enumeration: java.lang.Object nextElement()>"
"<java.util.Optional: void ifPresent(java.util.function.Consumer)>","<java.util.Optional: void ifPresent(java.util.function.Consumer)>"
"<android.widget.Scroller: int getFinalX()>","<android.widget.Scroller: int getFinalX()>"
"<java.net.URLConnection: java.net.URL getURL()>","<java.net.URLConnection: java.net.URL getURL()>"
"<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()>","<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()>"
"<android.view.KeyEvent$Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>","<android.webkit.WebSettings: void setMediaPlaybackRequiresUserGesture(boolean)>"
"<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>","<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>"
"<android.content.ContentProviderClient: int delete(android.net.Uri,android.os.Bundle)>","<android.content.ContentProviderClient: int delete(android.net.Uri,android.os.Bundle)>"
"<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>","<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>"
"<java.time.temporal.ChronoUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>","<java.time.temporal.ChronoUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
"<java.util.Deque: int size()>","<java.util.Deque: int size()>"
"<android.widget.AbsListView: void onNestedScrollAccepted(android.view.View,android.view.View,int)>","<android.widget.AbsListView: void onNestedScrollAccepted(android.view.View,android.view.View,int)>"
"<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>","<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>"
"<java.time.LocalDate: java.time.LocalDate of(int,int,int)>","<java.time.LocalDate: java.time.LocalDate of(int,int,int)>"
"<android.util.Log: int println(int,java.lang.String,java.lang.String)>","<android.util.Log: int println(int,java.lang.String,java.lang.String)>"
"<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>","<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>"
"<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>","<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>"
"<java.util.PriorityQueue: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.PriorityQueue: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>","<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>"
"<android.content.pm.PackageManager: boolean isSafeMode()>","<android.content.pm.PackageManager: boolean isSafeMode()>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent build()>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent build()>"
"<android.widget.TextView: android.text.style.URLSpan[] getUrls()>","<android.widget.TextView: android.text.style.URLSpan[] getUrls()>"
"<android.app.Person: android.graphics.drawable.Icon getIcon()>","<android.app.Person: android.graphics.drawable.Icon getIcon()>"
"<android.graphics.Paint: float getWordSpacing()>","<android.graphics.Paint: float getWordSpacing()>"
"<java.lang.reflect.Executable: java.lang.String toGenericString()>","<java.lang.reflect.Executable: java.lang.String toGenericString()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>"
"<java.lang.NoClassDefFoundError: void <init>()>","<java.lang.NoClassDefFoundError: void <init>()>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>"
"<android.view.View: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>","<android.view.View: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>"
"<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>","<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>"
"<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>","<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>"
"<android.media.session.MediaController: long getFlags()>","<android.media.session.MediaController: long getFlags()>"
"<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>","<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>"
"<java.util.UUID: long node()>","<java.util.UUID: long node()>"
"<java.lang.reflect.Field: char getChar(java.lang.Object)>","<java.lang.reflect.Field: char getChar(java.lang.Object)>"
"<android.app.Fragment: android.app.Activity getActivity()>","<android.app.Fragment: android.app.Activity getActivity()>"
"<m.b: void run()>","<m.b: void run()>"
"<java.util.List: java.util.Spliterator spliterator()>","<java.util.List: java.util.Spliterator spliterator()>"
"<java.util.ListIterator: int nextIndex()>","<java.util.ListIterator: int nextIndex()>"
"<android.app.ActionBar: void setCustomView(android.view.View)>","<android.app.ActionBar: void setCustomView(android.view.View)>"
"<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()>","<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()>"
"<android.widget.AbsListView: void onMeasure(int,int)>","<android.widget.AbsListView: void onMeasure(int,int)>"
"<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>","<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>"
"<android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()>","<android.view.ViewConfiguration: boolean shouldShowMenuShortcutsWhenKeyboardPresent()>"
"<android.view.MotionEvent: void recycle()>","<android.view.MotionEvent: void recycle()>"
"<java.nio.DoubleBuffer: int compareTo(java.lang.Object)>","<java.nio.DoubleBuffer: int compareTo(java.lang.Object)>"
"<java.net.DatagramSocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>","<java.net.DatagramSocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.View: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>","<android.view.View: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>"
"<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>","<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>"
"<java.util.DoubleSummaryStatistics: void <init>()>","<java.util.DoubleSummaryStatistics: void <init>()>"
"<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>","<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>"
"<android.app.Notification$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message setData(java.lang.String,android.net.Uri)>","<android.app.Notification$MessagingStyle$Message: android.app.Notification$MessagingStyle$Message setData(java.lang.String,android.net.Uri)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)>"
"<android.media.session.MediaSession$QueueItem: int describeContents()>","<android.media.session.MediaSession$QueueItem: int describeContents()>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int decrementAndGet(java.lang.Object)>"
"<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()>","<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()>"
"<android.os.Bundle: void <init>(android.os.Bundle)>","<android.os.Bundle: void <init>(android.os.Bundle)>"
"<java.text.FieldPosition: void setEndIndex(int)>","<java.text.FieldPosition: void setEndIndex(int)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float,int)>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float,int)>"
"<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>","<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>"
"<java.io.ObjectInputStream: int readUnsignedShort()>","<java.io.ObjectInputStream: int readUnsignedShort()>"
"<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>","<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>"
"<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>","<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>"
"<android.graphics.Rect: java.lang.String toString()>","<android.graphics.Rect: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()>"
"<java.lang.Character: boolean isTitleCase(char)>","<java.lang.Character: boolean isTitleCase(char)>"
"<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>"
"<java.util.TimeZone: int getDSTSavings()>","<java.util.TimeZone: int getDSTSavings()>"
"<android.app.Notification$Action: boolean isAuthenticationRequired()>","<android.app.Notification$Action: boolean isAuthenticationRequired()>"
"<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>","<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>"
"<android.text.style.TtsSpan$DigitsBuilder: android.text.style.TtsSpan$DigitsBuilder setDigits(java.lang.String)>","<android.text.style.TtsSpan$DigitsBuilder: android.text.style.TtsSpan$DigitsBuilder setDigits(java.lang.String)>"
"<android.widget.AbsListView: void setChoiceMode(int)>","<android.widget.AbsListView: void setChoiceMode(int)>"
"<java.util.Comparator: boolean equals(java.lang.Object)>","<java.util.Comparator: boolean equals(java.lang.Object)>"
"<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources$Theme)>","<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources$Theme)>"
"<android.util.SparseIntArray: int get(int,int)>","<android.util.SparseIntArray: int get(int,int)>"
"<java.util.Deque: java.lang.Object element()>","<java.util.Deque: java.lang.Object element()>"
"<java.time.LocalDate: int getYear()>","<java.time.LocalDate: int getYear()>"
"<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>","<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>"
"<java.util.Arrays: int hashCode(float[])>","<java.util.Arrays: int hashCode(float[])>"
"<java.nio.channels.SeekableByteChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.SeekableByteChannel: int read(java.nio.ByteBuffer)>"
"<android.graphics.Outline: boolean isEmpty()>","<android.graphics.Outline: boolean isEmpty()>"
"<java.util.Hashtable: java.util.Set keySet()>","<java.util.Hashtable: java.util.Set keySet()>"
"<android.media.session.MediaController$Callback: void onMetadataChanged(android.media.MediaMetadata)>","<android.media.session.MediaController$Callback: void onMetadataChanged(android.media.MediaMetadata)>"
"<android.view.textservice.SpellCheckerInfo: java.lang.String getId()>","<android.view.textservice.SpellCheckerInfo: java.lang.String getId()>"
"<android.view.View: void setRotationX(float)>","<android.view.View: void setRotationX(float)>"
"<android.app.AlertDialog$Builder: android.content.Context getContext()>","<android.app.AlertDialog$Builder: android.content.Context getContext()>"
"<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>","<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setAlignment(android.text.Layout$Alignment)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setAlignment(android.text.Layout$Alignment)>"
"<android.net.Uri: java.lang.String getScheme()>","<android.net.Uri: java.lang.String getScheme()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getISO3Language(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getISO3Language(java.lang.String)>"
"<android.content.ContextWrapper: java.io.File getObbDir()>","<android.content.ContextWrapper: java.io.File getObbDir()>"
"<java.util.LinkedList: boolean addAll(java.util.Collection)>","<java.util.LinkedList: boolean addAll(java.util.Collection)>"
"<android.app.Activity: boolean onSearchRequested()>","<android.app.Activity: boolean onSearchRequested()>"
"<android.view.WindowManager$LayoutParams: int getBlurBehindRadius()>","<android.view.WindowManager$LayoutParams: int getBlurBehindRadius()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>"
"<java.net.InetAddress: java.lang.String toString()>","<java.net.InetAddress: java.lang.String toString()>"
"<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>","<org.json.JSONArray: org.json.JSONArray getJSONArray(int)>"
"<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>","<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>"
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>","<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>","<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void notifyConfigurationChanged(android.content.res.Configuration)>","<android.view.SurfaceControlViewHost$SurfacePackage: void notifyConfigurationChanged(android.content.res.Configuration)>"
"<android.view.contentcapture.ContentCaptureContext: void <clinit>()>","<android.view.contentcapture.ContentCaptureContext: void <clinit>()>"
"<android.util.Property: boolean isReadOnly()>","<android.util.Property: boolean isReadOnly()>"
"<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>","<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean,int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean,int)>"
"<android.net.Uri: boolean isRelative()>","<android.net.Uri: boolean isRelative()>"
"<android.view.textclassifier.TextClassification$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextClassification$Request: android.os.Bundle getExtras()>"
"<android.app.FragmentTransaction: boolean isEmpty()>","<android.app.FragmentTransaction: boolean isEmpty()>"
"<android.app.Activity: void postponeEnterTransition()>","<android.app.Activity: void postponeEnterTransition()>"
"<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence)>","<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence)>"
"<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)>","<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)>"
"<android.app.Activity: void onTrimMemory(int)>","<android.app.Activity: void onTrimMemory(int)>"
"<android.app.Notification$WearableExtender: boolean getHintAmbientBigPicture()>","<android.app.Notification$WearableExtender: boolean getHintAmbientBigPicture()>"
"<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,android.os.Handler)>","<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,android.os.Handler)>"
"<android.graphics.Bitmap: void <init>()>","<android.graphics.Bitmap: void <init>()>"
"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>","<android.content.Context: java.lang.Object getSystemService(java.lang.String)>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>"
"<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>","<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,double)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,double)>"
"<android.content.pm.PackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>","<android.content.pm.PackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>"
"<java.util.Collections: void <clinit>()>","<java.util.Collections: void <clinit>()>"
"<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.content.IntentFilter: java.util.Iterator typesIterator()>","<android.content.IntentFilter: java.util.Iterator typesIterator()>"
"<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType valueOf(java.lang.String)>","<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType valueOf(java.lang.String)>"
"<android.app.ActionBar: void setHomeActionContentDescription(int)>","<android.app.ActionBar: void setHomeActionContentDescription(int)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>"
"<java.util.Arrays: java.util.List asList(java.lang.Object[])>","<java.util.Arrays: java.util.List asList(java.lang.Object[])>"
"<java.net.DatagramSocket: void setSendBufferSize(int)>","<java.net.DatagramSocket: void setSendBufferSize(int)>"
"<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>","<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>"
"<java.time.chrono.ChronoLocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.ChronoLocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.animation.LayoutTransition: java.util.List getTransitionListeners()>","<android.animation.LayoutTransition: java.util.List getTransitionListeners()>"
"<java.util.Comparator: java.util.Comparator thenComparingInt(java.util.function.ToIntFunction)>","<java.util.Comparator: java.util.Comparator thenComparingInt(java.util.function.ToIntFunction)>"
"<io.flutter.plugins.webviewflutter.v: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.v: void a(java.lang.Object)>"
"<android.webkit.WebView: android.os.Handler getHandler()>","<android.webkit.WebView: android.os.Handler getHandler()>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>"
"<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>"
"<android.util.Pair: boolean equals(java.lang.Object)>","<android.util.Pair: boolean equals(java.lang.Object)>"
"<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>","<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>"
"<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>","<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>"
"<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setNumerator(java.lang.String)>","<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setNumerator(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.p1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.p1: void a(java.lang.Object,y.a$e)>"
"<android.graphics.RenderNode: boolean setCameraDistance(float)>","<android.graphics.RenderNode: boolean setCameraDistance(float)>"
"<android.os.Debug: int getGlobalExternalAllocCount()>","<android.os.Debug: int getGlobalExternalAllocCount()>"
"<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>","<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>"
"<android.view.View: int getLeft()>","<android.view.View: int getLeft()>"
"<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>","<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>"
"<android.view.View: void setX(float)>","<android.view.View: void setX(float)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>"
"<android.widget.ListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>","<android.widget.ListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>"
"<java.lang.ClassCircularityError: void <init>()>","<java.lang.ClassCircularityError: void <init>()>"
"<android.hardware.Sensor: float getMaximumRange()>","<android.hardware.Sensor: float getMaximumRange()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(int)>"
"<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>","<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>"
"<android.app.ActivityManager: java.util.List getRunningServices(int)>","<android.app.ActivityManager: java.util.List getRunningServices(int)>"
"<android.os.Build$VERSION: void <init>()>","<android.os.Build$VERSION: void <init>()>"
"<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>","<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>"
"<android.os.Debug: void resetGlobalClassInitTime()>","<android.os.Debug: void resetGlobalClassInitTime()>"
"<io.flutter.plugins.webviewflutter.e3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.e3: void a(java.lang.Object)>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>"
"<android.os.UserHandle: void <init>(android.os.Parcel)>","<android.os.UserHandle: void <init>(android.os.Parcel)>"
"<java.util.Collection: boolean retainAll(java.util.Collection)>","<java.util.Collection: boolean retainAll(java.util.Collection)>"
"<java.util.concurrent.atomic.AtomicInteger: int intValue()>","<java.util.concurrent.atomic.AtomicInteger: int intValue()>"
"<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>","<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>"
"<android.view.ViewGroup: void bringChildToFront(android.view.View)>","<android.view.ViewGroup: void bringChildToFront(android.view.View)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetAcquire(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetAcquire(boolean,boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>","<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>"
"<android.view.SurfaceControl$Transaction: void writeToParcel(android.os.Parcel,int)>","<android.view.SurfaceControl$Transaction: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotSize()>","<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotSize()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>"
"<android.os.Messenger: void <clinit>()>","<android.os.Messenger: void <clinit>()>"
"<android.view.View: void setBottom(int)>","<android.view.View: void setBottom(int)>"
"<android.graphics.RenderNode: boolean hasOverlappingRendering()>","<android.graphics.RenderNode: boolean hasOverlappingRendering()>"
"<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>","<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor wrap(android.os.ParcelFileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor wrap(android.os.ParcelFileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>"
"<android.webkit.TracingController: void start(android.webkit.TracingConfig)>","<android.webkit.TracingController: void start(android.webkit.TracingConfig)>"
"<android.view.WindowInsetsAnimation$Callback: int getDispatchMode()>","<android.view.WindowInsetsAnimation$Callback: int getDispatchMode()>"
"<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>","<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>"
"<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>","<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>"
"<android.content.pm.ChangedPackages: void <clinit>()>","<android.content.pm.ChangedPackages: void <clinit>()>"
"<java.nio.LongBuffer: java.nio.ByteOrder order()>","<java.nio.LongBuffer: java.nio.ByteOrder order()>"
"<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder setFieldClassificationAlgorithm(java.lang.String,android.os.Bundle)>","<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder setFieldClassificationAlgorithm(java.lang.String,android.os.Bundle)>"
"<android.transition.Scene: void setEnterAction(java.lang.Runnable)>","<android.transition.Scene: void setEnterAction(java.lang.Runnable)>"
"<java.nio.CharBuffer: char charAt(int)>","<java.nio.CharBuffer: char charAt(int)>"
"<java.lang.Class: boolean isSynthetic()>","<java.lang.Class: boolean isSynthetic()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>"
"<java.util.Date: void setHours(int)>","<java.util.Date: void setHours(int)>"
"<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>","<android.view.textservice.SentenceSuggestionsInfo: int getLengthAt(int)>"
"<java.text.DateFormat: java.text.DateFormat getDateInstance()>","<java.text.DateFormat: java.text.DateFormat getDateInstance()>"
"<java.text.DateFormat: java.util.TimeZone getTimeZone()>","<java.text.DateFormat: java.util.TimeZone getTimeZone()>"
"<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>","<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>"
"<java.lang.reflect.Modifier: boolean isVolatile(int)>","<java.lang.reflect.Modifier: boolean isVolatile(int)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(java.lang.CharSequence,int,int,android.os.LocaleList)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(java.lang.CharSequence,int,int,android.os.LocaleList)>"
"<android.content.res.TypedArray: int getChangingConfigurations()>","<android.content.res.TypedArray: int getChangingConfigurations()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>"
"<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>","<java.util.concurrent.BlockingQueue: boolean add(java.lang.Object)>"
"<android.os.Looper: android.os.MessageQueue getQueue()>","<android.os.Looper: android.os.MessageQueue getQueue()>"
"<java.net.Socket: void connect(java.net.SocketAddress)>","<java.net.Socket: void connect(java.net.SocketAddress)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>"
"<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>","<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>"
"<java.util.HashMap: void clear()>","<java.util.HashMap: void clear()>"
"<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)>"
"<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>","<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>"
"<android.content.ClipData: int getItemCount()>","<android.content.ClipData: int getItemCount()>"
"<java.io.PrintStream: void print(char)>","<java.io.PrintStream: void print(char)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(long)>","<java.lang.StringBuffer: java.lang.StringBuffer append(long)>"
"<io.flutter.plugins.webviewflutter.z2: void <clinit>()>","<io.flutter.plugins.webviewflutter.z2: void <clinit>()>"
"<android.os.Looper: void quitSafely()>","<android.os.Looper: void quitSafely()>"
"<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>","<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>"
"<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>","<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>"
"<java.util.Date: java.lang.String toString()>","<java.util.Date: java.lang.String toString()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>","<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>"
"<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>","<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>"
"<android.icu.util.ULocale$Builder: void <init>()>","<android.icu.util.ULocale$Builder: void <init>()>"
"<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo[],int,boolean)>","<android.view.textservice.SpellCheckerSession: void getSuggestions(android.view.textservice.TextInfo[],int,boolean)>"
"<java.util.stream.LongStream: java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction)>","<java.util.stream.LongStream: java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction)>"
"<android.content.Intent: int filterHashCode()>","<android.content.Intent: int filterHashCode()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)>"
"<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>","<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>"
"<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>"
"<java.util.Arrays: void setAll(int[],java.util.function.IntUnaryOperator)>","<java.util.Arrays: void setAll(int[],java.util.function.IntUnaryOperator)>"
"<java.util.concurrent.CopyOnWriteArraySet: void forEach(java.util.function.Consumer)>","<java.util.concurrent.CopyOnWriteArraySet: void forEach(java.util.function.Consumer)>"
"<android.transition.Transition: android.transition.Transition addTarget(int)>","<android.transition.Transition: android.transition.Transition addTarget(int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<io.flutter.plugins.webviewflutter.c2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.c2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<io.flutter.plugins.webviewflutter.b3: void <init>()>","<io.flutter.plugins.webviewflutter.b3: void <init>()>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()>","<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()>"
"<java.math.BigInteger: java.math.BigInteger nextProbablePrime()>","<java.math.BigInteger: java.math.BigInteger nextProbablePrime()>"
"<android.view.MenuItem: android.graphics.BlendMode getIconTintBlendMode()>","<android.view.MenuItem: android.graphics.BlendMode getIconTintBlendMode()>"
"<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.view.View$OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>","<android.view.View$OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>"
"<java.nio.ByteOrder: void <init>()>","<java.nio.ByteOrder: void <init>()>"
"<android.widget.AbsListView: void setTopEdgeEffectColor(int)>","<android.widget.AbsListView: void setTopEdgeEffectColor(int)>"
"<android.util.SparseArray: void clear()>","<android.util.SparseArray: void clear()>"
"<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>","<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>"
"<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>","<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>"
"<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>","<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>"
"<java.util.function.Predicate: java.util.function.Predicate negate()>","<java.util.function.Predicate: java.util.function.Predicate negate()>"
"<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>","<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>"
"<android.media.session.MediaSession$Callback: void onRewind()>","<android.media.session.MediaSession$Callback: void onRewind()>"
"<android.widget.PopupWindow: void setInputMethodMode(int)>","<android.widget.PopupWindow: void setInputMethodMode(int)>"
"<android.widget.RemoteViews: void setColor(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColor(int,java.lang.String,int)>"
"<io.flutter.plugins.webviewflutter.g0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.g0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.view.KeyEvent: boolean isCapsLockOn()>","<android.view.KeyEvent: boolean isCapsLockOn()>"
"<java.lang.'annotation'.Retention: java.lang.'annotation'.RetentionPolicy value()>","<java.lang.'annotation'.Retention: java.lang.'annotation'.RetentionPolicy value()>"
"<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>","<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>"
"<android.graphics.Color: float[] getComponents()>","<android.graphics.Color: float[] getComponents()>"
"<android.view.View: void dispatchSetSelected(boolean)>","<android.view.View: void dispatchSetSelected(boolean)>"
"<android.app.Notification$BubbleMetadata: android.graphics.drawable.Icon getIcon()>","<android.app.Notification$BubbleMetadata: android.graphics.drawable.Icon getIcon()>"
"<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)>","<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getVariant()>","<android.icu.util.ULocale: java.lang.String getVariant()>"
"<android.hardware.HardwareBuffer: void <init>()>","<android.hardware.HardwareBuffer: void <init>()>"
"<java.util.UUID: int compareTo(java.lang.Object)>","<java.util.UUID: int compareTo(java.lang.Object)>"
"<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>","<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>"
"<android.app.Person$Builder: android.app.Person$Builder setBot(boolean)>","<android.app.Person$Builder: android.app.Person$Builder setBot(boolean)>"
"<android.view.Window: void clearFlags(int)>","<android.view.Window: void clearFlags(int)>"
"<android.content.Loader: void onReset()>","<android.content.Loader: void onReset()>"
"<android.widget.TextView: android.text.Layout getLayout()>","<android.widget.TextView: android.text.Layout getLayout()>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>"
"<android.app.RemoteAction: android.app.PendingIntent getActionIntent()>","<android.app.RemoteAction: android.app.PendingIntent getActionIntent()>"
"<java.util.Arrays: java.util.stream.DoubleStream stream(double[],int,int)>","<java.util.Arrays: java.util.stream.DoubleStream stream(double[],int,int)>"
"<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>"
"<java.security.Timestamp: int hashCode()>","<java.security.Timestamp: int hashCode()>"
"<android.os.Bundle: void putFloat(java.lang.String,float)>","<android.os.Bundle: void putFloat(java.lang.String,float)>"
"<android.view.animation.LayoutAnimationController: void start()>","<android.view.animation.LayoutAnimationController: void start()>"
"<java.io.PrintStream: void println(java.lang.Object)>","<java.io.PrintStream: void println(java.lang.Object)>"
"<android.view.ViewStructure: int getTextSelectionStart()>","<android.view.ViewStructure: int getTextSelectionStart()>"
"<java.util.concurrent.BlockingQueue: java.lang.Object take()>","<java.util.concurrent.BlockingQueue: java.lang.Object take()>"
"<android.app.PictureInPictureParams: int hashCode()>","<android.app.PictureInPictureParams: int hashCode()>"
"<android.view.SurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>","<android.view.SurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>"
"<java.time.chrono.ChronoLocalDate: int compareTo(java.lang.Object)>","<java.time.chrono.ChronoLocalDate: int compareTo(java.lang.Object)>"
"<android.app.Activity: int getChangingConfigurations()>","<android.app.Activity: int getChangingConfigurations()>"
"<android.widget.TextView: void setTextSelectHandleLeft(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextSelectHandleLeft(android.graphics.drawable.Drawable)>"
"<android.graphics.drawable.ColorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.ColorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<java.security.SignatureException: void <init>()>","<java.security.SignatureException: void <init>()>"
"<java.lang.SecurityManager: void checkExec(java.lang.String)>","<java.lang.SecurityManager: void checkExec(java.lang.String)>"
"<android.graphics.Paint: int getShadowLayerColor()>","<android.graphics.Paint: int getShadowLayerColor()>"
"<android.content.pm.PackageManager$Property: int getResourceId()>","<android.content.pm.PackageManager$Property: int getResourceId()>"
"<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()>","<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()>"
"<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>","<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>"
"<android.view.autofill.AutofillManager: void registerCallback(android.view.autofill.AutofillManager$AutofillCallback)>","<android.view.autofill.AutofillManager: void registerCallback(android.view.autofill.AutofillManager$AutofillCallback)>"
"<android.app.Dialog: android.os.Bundle onSaveInstanceState()>","<android.app.Dialog: android.os.Bundle onSaveInstanceState()>"
"<android.view.View: android.view.WindowId getWindowId()>","<android.view.View: android.view.WindowId getWindowId()>"
"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.content.pm.PermissionInfo: int describeContents()>","<android.content.pm.PermissionInfo: int describeContents()>"
"<android.view.inputmethod.InputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>","<android.view.inputmethod.InputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.View: android.os.Parcelable onSaveInstanceState()>","<android.view.View: android.os.Parcelable onSaveInstanceState()>"
"<android.app.Activity: void <clinit>()>","<android.app.Activity: void <clinit>()>"
"<java.lang.Math: double exp(double)>","<java.lang.Math: double exp(double)>"
"<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>","<org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)>"
"<java.text.DateFormat: java.lang.String format(java.util.Date)>","<java.text.DateFormat: java.lang.String format(java.util.Date)>"
"<android.icu.util.ULocale: java.util.Collection getAvailableLocalesByType(android.icu.util.ULocale$AvailableType)>","<android.icu.util.ULocale: java.util.Collection getAvailableLocalesByType(android.icu.util.ULocale$AvailableType)>"
"<android.view.textclassifier.TextLinks: int describeContents()>","<android.view.textclassifier.TextLinks: int describeContents()>"
"<android.webkit.WebMessage: android.webkit.WebMessagePort[] getPorts()>","<android.webkit.WebMessage: android.webkit.WebMessagePort[] getPorts()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object compareAndExchange(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object compareAndExchange(java.lang.Object,java.lang.Object)>"
"<java.io.PrintWriter: void println(java.lang.Object)>","<java.io.PrintWriter: void println(java.lang.Object)>"
"<java.nio.file.FileStore: long getTotalSpace()>","<java.nio.file.FileStore: long getTotalSpace()>"
"<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>","<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>"
"<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>","<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>"
"<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()>","<java.text.NumberFormat: java.util.Locale[] getAvailableLocales()>"
"<android.os.MemoryFile: java.io.InputStream getInputStream()>","<android.os.MemoryFile: java.io.InputStream getInputStream()>"
"<java.util.zip.ZipFile: void close()>","<java.util.zip.ZipFile: void close()>"
"<android.webkit.WebView: void goBack()>","<android.webkit.WebView: void goBack()>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>"
"<java.util.AbstractMap: void putAll(java.util.Map)>","<java.util.AbstractMap: void putAll(java.util.Map)>"
"<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>","<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>"
"<android.os.Parcel: boolean hasFileDescriptors(int,int)>","<android.os.Parcel: boolean hasFileDescriptors(int,int)>"
"<android.app.Activity: android.content.Intent getIntent()>","<android.app.Activity: android.content.Intent getIntent()>"
"<android.content.pm.PackageInstaller$SessionParams: void setSize(long)>","<android.content.pm.PackageInstaller$SessionParams: void setSize(long)>"
"<android.app.Activity: android.app.Activity getParent()>","<android.app.Activity: android.app.Activity getParent()>"
"<java.util.Map: java.util.Set entrySet()>","<java.util.Map: java.util.Set entrySet()>"
"<android.view.textclassifier.TextSelection: int getEntityCount()>","<android.view.textclassifier.TextSelection: int getEntityCount()>"
"<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>","<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>"
"<java.util.stream.IntStream: boolean anyMatch(java.util.function.IntPredicate)>","<java.util.stream.IntStream: boolean anyMatch(java.util.function.IntPredicate)>"
"<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)>","<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)>"
"<java.nio.charset.Charset: java.lang.String toString()>","<java.nio.charset.Charset: java.lang.String toString()>"
"<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>","<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>"
"<java.lang.Character: int getNumericValue(char)>","<java.lang.Character: int getNumericValue(char)>"
"<android.app.ActionBar$Tab: android.graphics.drawable.Drawable getIcon()>","<android.app.ActionBar$Tab: android.graphics.drawable.Drawable getIcon()>"
"<java.util.List: int indexOf(java.lang.Object)>","<java.util.List: int indexOf(java.lang.Object)>"
"<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>","<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>"
"<android.widget.TextView: int getShadowColor()>","<android.widget.TextView: int getShadowColor()>"
"<android.view.WindowInsetsController: void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)>","<android.view.WindowInsetsController: void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)>"
"<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>","<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>"
"<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>","<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>"
"<android.webkit.WebMessagePort$WebMessageCallback: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>","<android.webkit.WebMessagePort$WebMessageCallback: void onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)>"
"<java.util.Spliterator$OfPrimitive: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfPrimitive: java.util.Spliterator$OfPrimitive trySplit()>"
"<java.nio.IntBuffer: java.nio.Buffer position(int)>","<java.nio.IntBuffer: java.nio.Buffer position(int)>"
"<android.app.Presentation: void onStop()>","<android.app.Presentation: void onStop()>"
"<org.json.JSONArray: void <init>(java.lang.Object)>","<org.json.JSONArray: void <init>(java.lang.Object)>"
"<java.util.Calendar: void roll(int,int)>","<java.util.Calendar: void roll(int,int)>"
"<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>","<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>"
"<android.view.ViewGroup: android.view.View findFocus()>","<android.view.ViewGroup: android.view.View findFocus()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.util.Dictionary: int size()>","<java.util.Dictionary: int size()>"
"<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()>","<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()>"
"<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<java.nio.DoubleBuffer: java.lang.Object array()>","<java.nio.DoubleBuffer: java.lang.Object array()>"
"<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>","<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>"
"<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>","<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>"
"<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>","<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>"
"<android.view.Display: int getDisplayId()>","<android.view.Display: int getDisplayId()>"
"<android.content.Intent: int getIntExtra(java.lang.String,int)>","<android.content.Intent: int getIntExtra(java.lang.String,int)>"
"<android.util.SparseArray: java.lang.String toString()>","<android.util.SparseArray: java.lang.String toString()>"
"<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>","<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>"
"<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.View: boolean canScrollHorizontally(int)>","<android.view.View: boolean canScrollHorizontally(int)>"
"<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()>","<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()>"
"<android.animation.Animator: void addPauseListener(android.animation.Animator$AnimatorPauseListener)>","<android.animation.Animator: void addPauseListener(android.animation.Animator$AnimatorPauseListener)>"
"<android.widget.AbsListView: void addTouchables(java.util.ArrayList)>","<android.widget.AbsListView: void addTouchables(java.util.ArrayList)>"
"<java.time.Month: java.time.Month plus(long)>","<java.time.Month: java.time.Month plus(long)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setPrimaryColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setPrimaryColor(int)>"
"<android.os.Debug: int setAllocationLimit(int)>","<android.os.Debug: int setAllocationLimit(int)>"
"<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>"
"<android.view.ViewDebug: void stopHierarchyTracing()>","<android.view.ViewDebug: void stopHierarchyTracing()>"
"<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)>","<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)>"
"<android.content.pm.InstrumentationInfo: int describeContents()>","<android.content.pm.InstrumentationInfo: int describeContents()>"
"<android.webkit.WebBackForwardList: int getSize()>","<android.webkit.WebBackForwardList: int getSize()>"
"<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>","<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActions(long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActions(long)>"
"<java.util.regex.Matcher: boolean hitEnd()>","<java.util.regex.Matcher: boolean hitEnd()>"
"<java.net.URL: java.lang.String getPath()>","<java.net.URL: java.lang.String getPath()>"
"<android.media.session.MediaController$TransportControls: void seekTo(long)>","<android.media.session.MediaController$TransportControls: void seekTo(long)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()>"
"<java.util.concurrent.ExecutorService: boolean isShutdown()>","<java.util.concurrent.ExecutorService: boolean isShutdown()>"
"<java.lang.String: java.lang.String substring(int,int)>","<java.lang.String: java.lang.String substring(int,int)>"
"<android.widget.TextView: boolean setFrame(int,int,int,int)>","<android.widget.TextView: boolean setFrame(int,int,int,int)>"
"<android.view.View: void clearFocus()>","<android.view.View: void clearFocus()>"
"<android.view.MotionEvent: int getPointerId(int)>","<android.view.MotionEvent: int getPointerId(int)>"
"<java.lang.Character: byte getDirectionality(int)>","<java.lang.Character: byte getDirectionality(int)>"
"<java.lang.String: java.lang.String toUpperCase()>","<java.lang.String: java.lang.String toUpperCase()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>","<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>"
"<java.time.ZoneId: void <clinit>()>","<java.time.ZoneId: void <clinit>()>"
"<java.util.stream.IntStream: int reduce(int,java.util.function.IntBinaryOperator)>","<java.util.stream.IntStream: int reduce(int,java.util.function.IntBinaryOperator)>"
"<java.util.Arrays: void parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)>","<java.util.Arrays: void parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)>"
"<android.graphics.Matrix: float mapRadius(float)>","<android.graphics.Matrix: float mapRadius(float)>"
"<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<io.flutter.embedding.android.q: void <init>(io.flutter.embedding.android.s$d$a)>","<io.flutter.embedding.android.q: void <init>(io.flutter.embedding.android.s$d$a)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>"
"<java.security.SignatureException: void <init>(java.lang.String)>","<java.security.SignatureException: void <init>(java.lang.String)>"
"<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>","<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>"
"<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>","<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>"
"<java.net.URLConnection: java.security.Permission getPermission()>","<java.net.URLConnection: java.security.Permission getPermission()>"
"<android.print.PrintDocumentAdapter: void onFinish()>","<android.print.PrintDocumentAdapter: void onFinish()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumerator(java.lang.String)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumerator(java.lang.String)>"
"<java.net.UnknownHostException: void <init>()>","<java.net.UnknownHostException: void <init>()>"
"<android.widget.Adapter: java.lang.Object getItem(int)>","<android.widget.Adapter: java.lang.Object getItem(int)>"
"<java.net.DatagramSocket: void disconnect()>","<java.net.DatagramSocket: void disconnect()>"
"<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)>","<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)>"
"<android.app.Activity: void onUserInteraction()>","<android.app.Activity: void onUserInteraction()>"
"<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>","<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>"
"<android.animation.Animator: void removeAllListeners()>","<android.animation.Animator: void removeAllListeners()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>"
"<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>"
"<java.net.URL: java.io.InputStream openStream()>","<java.net.URL: java.io.InputStream openStream()>"
"<android.graphics.drawable.Drawable: int[] getState()>","<android.graphics.drawable.Drawable: int[] getState()>"
"<android.content.ContentProviderResult: java.lang.String toString()>","<android.content.ContentProviderResult: java.lang.String toString()>"
"<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>","<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>"
"<android.view.WindowInsetsAnimationController: void setInsetsAndAlpha(android.graphics.Insets,float,float)>","<android.view.WindowInsetsAnimationController: void setInsetsAndAlpha(android.graphics.Insets,float,float)>"
"<java.lang.Math: float copySign(float,float)>","<java.lang.Math: float copySign(float,float)>"
"<java.io.ObjectStreamClass: long getSerialVersionUID()>","<java.io.ObjectStreamClass: long getSerialVersionUID()>"
"<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>","<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>"
"<java.lang.Number: short shortValue()>","<java.lang.Number: short shortValue()>"
"<android.content.res.TypedArray: int getSourceResourceId(int,int)>","<android.content.res.TypedArray: int getSourceResourceId(int,int)>"
"<android.content.IntentFilter: void <init>()>","<android.content.IntentFilter: void <init>()>"
"<java.util.OptionalLong: boolean equals(java.lang.Object)>","<java.util.OptionalLong: boolean equals(java.lang.Object)>"
"<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>","<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>"
"<java.util.Collection: boolean containsAll(java.util.Collection)>","<java.util.Collection: boolean containsAll(java.util.Collection)>"
"<android.graphics.Paint: float getFontSpacing()>","<android.graphics.Paint: float getFontSpacing()>"
"<android.view.ViewGroup: int getChildCount()>","<android.view.ViewGroup: int getChildCount()>"
"<java.util.regex.Matcher: int start()>","<java.util.regex.Matcher: int start()>"
"<java.lang.ref.Reference: boolean refersTo(java.lang.Object)>","<java.lang.ref.Reference: boolean refersTo(java.lang.Object)>"
"<android.view.View: void onWindowSystemUiVisibilityChanged(int)>","<android.view.View: void onWindowSystemUiVisibilityChanged(int)>"
"<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>","<android.net.http.SslCertificate: void <init>(java.security.cert.X509Certificate)>"
"<android.os.PatternMatcher: void <clinit>()>","<android.os.PatternMatcher: void <clinit>()>"
"<android.view.View: boolean isVisibleToUserForAutofill(int)>","<android.view.View: boolean isVisibleToUserForAutofill(int)>"
"<android.webkit.GeolocationPermissions: void getOrigins(android.webkit.ValueCallback)>","<android.webkit.GeolocationPermissions: void getOrigins(android.webkit.ValueCallback)>"
"<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>","<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>"
"<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>","<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>"
"<java.net.URL: int hashCode()>","<java.net.URL: int hashCode()>"
"<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>","<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>"
"<io.flutter.plugins.webviewflutter.z1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.z1: void a(java.lang.Object,y.a$e)>"
"<android.content.Context: java.io.File getObbDir()>","<android.content.Context: java.io.File getObbDir()>"
"<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>","<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>"
"<android.app.assist.AssistContent: void setClipData(android.content.ClipData)>","<android.app.assist.AssistContent: void setClipData(android.content.ClipData)>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>","<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>"
"<java.time.LocalDate: java.time.OffsetDateTime atTime(java.time.OffsetTime)>","<java.time.LocalDate: java.time.OffsetDateTime atTime(java.time.OffsetTime)>"
"<java.lang.ClassCastException: void <init>()>","<java.lang.ClassCastException: void <init>()>"
"<android.view.animation.Animation: boolean willChangeTransformationMatrix()>","<android.view.animation.Animation: boolean willChangeTransformationMatrix()>"
"<java.time.chrono.ChronoZonedDateTime: long toEpochSecond()>","<java.time.chrono.ChronoZonedDateTime: long toEpochSecond()>"
"<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>","<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>"
"<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>","<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>"
"<android.view.View: int getBottomPaddingOffset()>","<android.view.View: int getBottomPaddingOffset()>"
"<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()>","<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>"
"<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>","<java.util.zip.ZipFile: void <init>(java.io.File,int,java.nio.charset.Charset)>"
"<java.net.URLConnection: void <init>(java.net.URL)>","<java.net.URLConnection: void <init>(java.net.URL)>"
"<android.view.inputmethod.BaseInputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>","<android.view.inputmethod.BaseInputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>"
"<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>","<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>"
"<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.Notification$BubbleMetadata: android.app.PendingIntent getDeleteIntent()>","<android.app.Notification$BubbleMetadata: android.app.PendingIntent getDeleteIntent()>"
"<android.util.ArrayMap: void forEach(java.util.function.BiConsumer)>","<android.util.ArrayMap: void forEach(java.util.function.BiConsumer)>"
"<java.util.jar.Attributes$Name: void <init>(java.lang.String)>","<java.util.jar.Attributes$Name: void <init>(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)>"
"<android.view.textclassifier.SelectionEvent: int getSmartStart()>","<android.view.textclassifier.SelectionEvent: int getSmartStart()>"
"<android.view.Window$Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.view.Window$Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.widget.AbsListView: void onTouchModeChanged(boolean)>","<android.widget.AbsListView: void onTouchModeChanged(boolean)>"
"<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>","<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>"
"<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>"
"<android.hardware.SensorManager: float getInclination(float[])>","<android.hardware.SensorManager: float getInclination(float[])>"
"<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>","<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>"
"<android.os.Parcel: void setDataCapacity(int)>","<android.os.Parcel: void setDataCapacity(int)>"
"<java.lang.Double: short shortValue()>","<java.lang.Double: short shortValue()>"
"<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>","<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>"
"<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader,java.lang.Class)>"
"<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>","<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>"
"<android.app.Service: int getForegroundServiceType()>","<android.app.Service: int getForegroundServiceType()>"
"<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>","<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>"
"<android.graphics.RenderNode: boolean setScaleX(float)>","<android.graphics.RenderNode: boolean setScaleX(float)>"
"<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>","<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>"
"<android.text.style.ClickableSpan: void onClick(android.view.View)>","<android.text.style.ClickableSpan: void onClick(android.view.View)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>","<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>"
"<android.app.Activity: boolean isInPictureInPictureMode()>","<android.app.Activity: boolean isInPictureInPictureMode()>"
"<android.webkit.WebSettings: boolean getBlockNetworkImage()>","<android.webkit.WebSettings: boolean getBlockNetworkImage()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>"
"<java.lang.ref.Reference: void reachabilityFence(java.lang.Object)>","<java.lang.ref.Reference: void reachabilityFence(java.lang.Object)>"
"<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>","<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>"
"<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>","<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>","<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>"
"<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>","<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>"
"<java.util.Locale: java.lang.String getDisplayLanguage()>","<java.util.Locale: java.lang.String getDisplayLanguage()>"
"<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>","<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>"
"<android.app.Notification$MessagingStyle: java.lang.CharSequence getUserDisplayName()>","<android.app.Notification$MessagingStyle: java.lang.CharSequence getUserDisplayName()>"
"<java.lang.Enum: java.lang.Object clone()>","<java.lang.Enum: java.lang.Object clone()>"
"<java.lang.String: java.lang.String valueOf(int)>","<java.lang.String: java.lang.String valueOf(int)>"
"<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>","<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>"
"<android.util.LongSparseArray: java.lang.Object clone()>","<android.util.LongSparseArray: java.lang.Object clone()>"
"<java.net.Proxy: java.net.Proxy$Type type()>","<java.net.Proxy: java.net.Proxy$Type type()>"
"<java.util.OptionalInt: int hashCode()>","<java.util.OptionalInt: int hashCode()>"
"<java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)>","<java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)>"
"<android.view.textclassifier.TextLinks: void <init>()>","<android.view.textclassifier.TextLinks: void <init>()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>"
"<android.view.translation.ViewTranslationResponse: int hashCode()>","<android.view.translation.ViewTranslationResponse: int hashCode()>"
"<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEvent(int)>","<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEvent(int)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndExchangeAcquire(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndExchangeAcquire(boolean,boolean)>"
"<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.os.SystemClock: void <init>()>","<android.os.SystemClock: void <init>()>"
"<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>","<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>"
"<android.content.Context: boolean deleteDatabase(java.lang.String)>","<android.content.Context: boolean deleteDatabase(java.lang.String)>"
"<java.util.Collections: void shuffle(java.util.List)>","<java.util.Collections: void shuffle(java.util.List)>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>"
"<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction)>","<java.util.concurrent.Executors: java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction)>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>","<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>"
"<java.time.chrono.ChronoZonedDateTime: java.util.Comparator timeLineOrder()>","<java.time.chrono.ChronoZonedDateTime: java.util.Comparator timeLineOrder()>"
"<android.app.AlertDialog: void <init>(android.content.Context)>","<android.app.AlertDialog: void <init>(android.content.Context)>"
"<android.graphics.Path: void <init>()>","<android.graphics.Path: void <init>()>"
"<android.service.autofill.UserData: void <clinit>()>","<android.service.autofill.UserData: void <clinit>()>"
"<android.view.View: void autofill(android.util.SparseArray)>","<android.view.View: void autofill(android.util.SparseArray)>"
"<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>","<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>"
"<android.view.View: int getMinimumWidth()>","<android.view.View: int getMinimumWidth()>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()>"
"<android.view.Window: void setGravity(int)>","<android.view.Window: void setGravity(int)>"
"<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>"
"<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<android.content.BroadcastReceiver$PendingResult: int getResultCode()>","<android.content.BroadcastReceiver$PendingResult: int getResultCode()>"
"<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,int)>","<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,int)>"
"<java.time.chrono.Chronology: java.time.chrono.Chronology of(java.lang.String)>","<java.time.chrono.Chronology: java.time.chrono.Chronology of(java.lang.String)>"
"<android.view.Display$HdrCapabilities: boolean equals(java.lang.Object)>","<android.view.Display$HdrCapabilities: boolean equals(java.lang.Object)>"
"<java.util.Arrays: void <init>()>","<java.util.Arrays: void <init>()>"
"<android.content.ContextWrapper: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.ContextWrapper: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>","<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>"
"<android.print.PrintAttributes$Margins: void <init>(int,int,int,int)>","<android.print.PrintAttributes$Margins: void <init>(int,int,int,int)>"
"<android.accounts.Account: int hashCode()>","<android.accounts.Account: int hashCode()>"
"<android.view.View: void setFocusable(int)>","<android.view.View: void setFocusable(int)>"
"<android.content.res.loader.ResourcesLoader: void <init>()>","<android.content.res.loader.ResourcesLoader: void <init>()>"
"<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>","<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>"
"<android.graphics.Path: boolean isRect(android.graphics.RectF)>","<android.graphics.Path: boolean isRect(android.graphics.RectF)>"
"<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>","<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>"
"<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>","<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>"
"<android.os.Handler: boolean hasMessages(int)>","<android.os.Handler: boolean hasMessages(int)>"
"<android.hardware.display.VirtualDisplay$Callback: void <init>()>","<android.hardware.display.VirtualDisplay$Callback: void <init>()>"
"<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFallback(java.lang.String)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFallback(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)>"
"<androidx.fragment.app.Fragment$2: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.fragment.app.Fragment$2: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<android.view.View: boolean performClick()>","<android.view.View: boolean performClick()>"
"<java.util.Locale$Builder: java.util.Locale$Builder addUnicodeLocaleAttribute(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder addUnicodeLocaleAttribute(java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request: void <clinit>()>","<android.view.textclassifier.ConversationActions$Request: void <clinit>()>"
"<java.util.PriorityQueue: boolean offer(java.lang.Object)>","<java.util.PriorityQueue: boolean offer(java.lang.Object)>"
"<android.app.ActivityManager$TaskDescription$Builder: void <init>()>","<android.app.ActivityManager$TaskDescription$Builder: void <init>()>"
"<android.database.sqlite.SQLiteTransactionListener: void onCommit()>","<android.database.sqlite.SQLiteTransactionListener: void onCommit()>"
"<android.content.Context: android.os.Looper getMainLooper()>","<android.content.Context: android.os.Looper getMainLooper()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>"
"<java.util.OptionalLong: java.util.OptionalLong of(long)>","<java.util.OptionalLong: java.util.OptionalLong of(long)>"
"<java.time.ZoneOffset: int compareTo(java.lang.Object)>","<java.time.ZoneOffset: int compareTo(java.lang.Object)>"
"<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>"
"<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>","<java.util.concurrent.ThreadPoolExecutor: void beforeExecute(java.lang.Thread,java.lang.Runnable)>"
"<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<java.net.ServerSocket: java.util.Set supportedOptions()>","<java.net.ServerSocket: java.util.Set supportedOptions()>"
"<android.view.ViewTreeObserver$OnScrollChangedListener: void onScrollChanged()>","<android.view.ViewTreeObserver$OnScrollChangedListener: void onScrollChanged()>"
"<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>","<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>"
"<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>","<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>"
"<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>","<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>"
"<android.print.PrintAttributes$Resolution: java.lang.String getLabel()>","<android.print.PrintAttributes$Resolution: java.lang.String getLabel()>"
"<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setYear(int)>","<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setYear(int)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,java.lang.Object,int)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder append(java.lang.CharSequence,java.lang.Object,int)>"
"<android.view.ViewGroup: int getChildDrawingOrder(int)>","<android.view.ViewGroup: int getChildDrawingOrder(int)>"
"<java.net.NetworkInterface: java.lang.String toString()>","<java.net.NetworkInterface: java.lang.String toString()>"
"<java.time.chrono.IsoEra: void <clinit>()>","<java.time.chrono.IsoEra: void <clinit>()>"
"<android.view.View: boolean isScrollbarFadingEnabled()>","<android.view.View: boolean isScrollbarFadingEnabled()>"
"<java.net.DatagramSocketImpl: java.util.Set supportedOptions()>","<java.net.DatagramSocketImpl: java.util.Set supportedOptions()>"
"<java.math.BigInteger: int bitLength()>","<java.math.BigInteger: int bitLength()>"
"<android.content.ContentProviderResult: void <init>(int)>","<android.content.ContentProviderResult: void <init>(int)>"
"<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>","<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>"
"<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>","<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>"
"<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>","<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getRemoveOnCancelPolicy()>","<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getRemoveOnCancelPolicy()>"
"<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.view.View: int getBottom()>","<android.view.View: int getBottom()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean compareAndSet(java.lang.Object,long,long)>"
"<java.nio.ByteBuffer: java.nio.Buffer reset()>","<java.nio.ByteBuffer: java.nio.Buffer reset()>"
"<java.io.ObjectStreamField: java.lang.Class getType()>","<java.io.ObjectStreamField: java.lang.Class getType()>"
"<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList)>","<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList)>"
"<android.widget.RemoteViews: void setCompoundButtonChecked(int,boolean)>","<android.widget.RemoteViews: void setCompoundButtonChecked(int,boolean)>"
"<android.content.Intent: boolean hasExtra(java.lang.String)>","<android.content.Intent: boolean hasExtra(java.lang.String)>"
"<android.webkit.WebView: void postUrl(java.lang.String,byte[])>","<android.webkit.WebView: void postUrl(java.lang.String,byte[])>"
"<java.net.URL: java.lang.String getQuery()>","<java.net.URL: java.lang.String getQuery()>"
"<android.widget.Button: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.widget.Button: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.app.Notification: int getGroupAlertBehavior()>","<android.app.Notification: int getGroupAlertBehavior()>"
"<android.app.Activity: void onLowMemory()>","<android.app.Activity: void onLowMemory()>"
"<java.security.PermissionCollection: java.util.Enumeration elements()>","<java.security.PermissionCollection: java.util.Enumeration elements()>"
"<java.util.concurrent.CancellationException: void <init>()>","<java.util.concurrent.CancellationException: void <init>()>"
"<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetAcquire(int,int)>","<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetAcquire(int,int)>"
"<android.content.pm.ResolveInfo: void <init>()>","<android.content.pm.ResolveInfo: void <init>()>"
"<android.text.style.TtsSpan$TextBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$TextBuilder: void <init>(java.lang.String)>"
"<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<android.os.Parcel: void setDataPosition(int)>","<android.os.Parcel: void setDataPosition(int)>"
"<android.text.PrecomputedText: int getParagraphEnd(int)>","<android.text.PrecomputedText: int getParagraphEnd(int)>"
"<android.app.FragmentManager: java.util.List getFragments()>","<android.app.FragmentManager: java.util.List getFragments()>"
"<java.time.LocalDateTime: boolean equals(java.lang.Object)>","<java.time.LocalDateTime: boolean equals(java.lang.Object)>"
"<android.util.ArrayMap: void <init>(android.util.ArrayMap)>","<android.util.ArrayMap: void <init>(android.util.ArrayMap)>"
"<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>"
"<android.content.ClipDescription: int describeContents()>","<android.content.ClipDescription: int describeContents()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
"<android.graphics.RuntimeShader: void <init>(java.lang.String)>","<android.graphics.RuntimeShader: void <init>(java.lang.String)>"
"<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>","<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>"
"<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>","<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>"
"<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>","<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>"
"<java.time.Period: java.time.Period plusDays(long)>","<java.time.Period: java.time.Period plusDays(long)>"
"<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>"
"<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)>","<android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)>"
"<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)>","<android.webkit.WebView: void removeJavascriptInterface(java.lang.String)>"
"<java.util.AbstractList: boolean addAll(int,java.util.Collection)>","<java.util.AbstractList: boolean addAll(int,java.util.Collection)>"
"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>","<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>"
"<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.Long: long min(long,long)>","<java.lang.Long: long min(long,long)>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[])>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[])>"
"<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>","<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>"
"<android.view.DragEvent: java.lang.Object getLocalState()>","<android.view.DragEvent: java.lang.Object getLocalState()>"
"<java.lang.Float: float max(float,float)>","<java.lang.Float: float max(float,float)>"
"<android.view.InputEvent: int getSource()>","<android.view.InputEvent: int getSource()>"
"<android.graphics.BlendMode: android.graphics.BlendMode valueOf(java.lang.String)>","<android.graphics.BlendMode: android.graphics.BlendMode valueOf(java.lang.String)>"
"<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>","<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>"
"<android.text.method.MovementMethod: boolean canSelectArbitrarily()>","<android.text.method.MovementMethod: boolean canSelectArbitrarily()>"
"<android.app.ActivityManager$TaskDescription: void <clinit>()>","<android.app.ActivityManager$TaskDescription: void <clinit>()>"
"<java.lang.Math: double scalb(double,int)>","<java.lang.Math: double scalb(double,int)>"
"<android.app.Notification: java.lang.CharSequence getSettingsText()>","<android.app.Notification: java.lang.CharSequence getSettingsText()>"
"<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>"
"<java.net.URI: java.lang.String getAuthority()>","<java.net.URI: java.lang.String getAuthority()>"
"<io.flutter.plugins.webviewflutter.s0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.s0: void a(java.lang.Object,y.a$e)>"
"<java.util.Calendar: void set(int,int,int,int,int,int)>","<java.util.Calendar: void set(int,int,int,int,int,int)>"
"<java.lang.Integer: java.lang.String toBinaryString(int)>","<java.lang.Integer: java.lang.String toBinaryString(int)>"
"<android.webkit.CookieManager: void flush()>","<android.webkit.CookieManager: void flush()>"
"<java.nio.file.WatchEvent$Modifier: java.lang.String name()>","<java.nio.file.WatchEvent$Modifier: java.lang.String name()>"
"<android.app.PictureInPictureParams: boolean isSeamlessResizeEnabled()>","<android.app.PictureInPictureParams: boolean isSeamlessResizeEnabled()>"
"<android.database.sqlite.SQLiteDatabase: void setVersion(int)>","<android.database.sqlite.SQLiteDatabase: void setVersion(int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>"
"<android.app.Fragment: android.view.View getView()>","<android.app.Fragment: android.view.View getView()>"
"<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>","<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>"
"<java.util.concurrent.ThreadLocalRandom: double nextGaussian()>","<java.util.concurrent.ThreadLocalRandom: double nextGaussian()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"
"<android.view.View: void setOnReceiveContentListener(java.lang.String[],android.view.OnReceiveContentListener)>","<android.view.View: void setOnReceiveContentListener(java.lang.String[],android.view.OnReceiveContentListener)>"
"<android.app.Notification$Action: java.lang.Object clone()>","<android.app.Notification$Action: java.lang.Object clone()>"
"<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>"
"<android.media.Session2Token: void <clinit>()>","<android.media.Session2Token: void <clinit>()>"
"<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>","<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>"
"<java.net.Socket: java.net.Socket setOption(java.net.SocketOption,java.lang.Object)>","<java.net.Socket: java.net.Socket setOption(java.net.SocketOption,java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.a: void onReceiveValue(java.lang.Object)>","<io.flutter.plugins.webviewflutter.a: void onReceiveValue(java.lang.Object)>"
"<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig build()>","<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig build()>"
"<java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>","<java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>"
"<android.content.res.AssetFileDescriptor: void close()>","<android.content.res.AssetFileDescriptor: void close()>"
"<android.app.Fragment: void setSharedElementEnterTransition(android.transition.Transition)>","<android.app.Fragment: void setSharedElementEnterTransition(android.transition.Transition)>"
"<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>","<android.webkit.WebView: void saveWebArchive(java.lang.String,boolean,android.webkit.ValueCallback)>"
"<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>","<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>"
"<android.view.MenuItem: android.view.MenuItem setIcon(int)>","<android.view.MenuItem: android.view.MenuItem setIcon(int)>"
"<android.graphics.Paint: float getUnderlinePosition()>","<android.graphics.Paint: float getUnderlinePosition()>"
"<android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>","<android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>"
"<java.util.ArrayDeque: java.lang.Object[] toArray()>","<java.util.ArrayDeque: java.lang.Object[] toArray()>"
"<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>","<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>"
"<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.content.Context: void setWallpaper(java.io.InputStream)>","<android.content.Context: void setWallpaper(java.io.InputStream)>"
"<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>","<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>"
"<java.text.AttributedCharacterIterator: int getRunLimit()>","<java.text.AttributedCharacterIterator: int getRunLimit()>"
"<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>","<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>"
"<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>","<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>"
"<android.app.Activity: void setResult(int)>","<android.app.Activity: void setResult(int)>"
"<java.util.concurrent.atomic.AtomicBoolean: void setRelease(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: void setRelease(boolean)>"
"<android.view.contentcapture.ContentCaptureContext: int describeContents()>","<android.view.contentcapture.ContentCaptureContext: int describeContents()>"
"<java.util.Iterator: java.lang.Object next()>","<java.util.Iterator: java.lang.Object next()>"
"<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>","<org.json.JSONArray: org.json.JSONObject getJSONObject(int)>"
"<android.view.textservice.SpellCheckerInfo: void <clinit>()>","<android.view.textservice.SpellCheckerInfo: void <clinit>()>"
"<java.nio.DoubleBuffer: double[] array()>","<java.nio.DoubleBuffer: double[] array()>"
"<android.widget.TextView: void onWindowFocusChanged(boolean)>","<android.widget.TextView: void onWindowFocusChanged(boolean)>"
"<android.text.ClipboardManager: void setText(java.lang.CharSequence)>","<android.text.ClipboardManager: void setText(java.lang.CharSequence)>"
"<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator compose(java.util.function.LongUnaryOperator)>","<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator compose(java.util.function.LongUnaryOperator)>"
"<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)>","<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int)>","<java.nio.IntBuffer: java.nio.IntBuffer put(int)>"
"<java.util.HashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.HashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.regex.MatchResult: int start()>","<java.util.regex.MatchResult: int start()>"
"<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>","<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>"
"<java.util.concurrent.atomic.AtomicLong: long compareAndExchange(long,long)>","<java.util.concurrent.atomic.AtomicLong: long compareAndExchange(long,long)>"
"<java.time.Clock: java.time.Clock tick(java.time.Clock,java.time.Duration)>","<java.time.Clock: java.time.Clock tick(java.time.Clock,java.time.Duration)>"
"<android.view.KeyCharacterMap: char getDisplayLabel(int)>","<android.view.KeyCharacterMap: char getDisplayLabel(int)>"
"<android.app.Notification$CarExtender: int getColor()>","<android.app.Notification$CarExtender: int getColor()>"
"<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<android.widget.TextView: void setTextSize(int,float)>","<android.widget.TextView: void setTextSize(int,float)>"
"<java.util.Collections: java.util.List singletonList(java.lang.Object)>","<java.util.Collections: java.util.List singletonList(java.lang.Object)>"
"<java.util.concurrent.CopyOnWriteArraySet: void <init>(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArraySet: void <init>(java.util.Collection)>"
"<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>","<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>"
"<android.animation.ValueAnimator: void end()>","<android.animation.ValueAnimator: void end()>"
"<android.view.View: void <clinit>()>","<android.view.View: void <clinit>()>"
"<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.animation.PropertyValuesHolder: void setFloatValues(float[])>","<android.animation.PropertyValuesHolder: void setFloatValues(float[])>"
"<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>"
"<java.time.temporal.TemporalUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>","<java.time.temporal.TemporalUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
"<org.json.JSONArray: double getDouble(int)>","<org.json.JSONArray: double getDouble(int)>"
"<android.graphics.Rect: void offsetTo(int,int)>","<android.graphics.Rect: void offsetTo(int,int)>"
"<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>","<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>"
"<java.io.PrintWriter: void print(long)>","<java.io.PrintWriter: void print(long)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)>"
"<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>","<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>"
"<android.provider.Settings$NameValueTable: void <init>()>","<android.provider.Settings$NameValueTable: void <init>()>"
"<android.net.Uri$Builder: void <init>()>","<android.net.Uri$Builder: void <init>()>"
"<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>","<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setWeight(int)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setWeight(int)>"
"<android.graphics.Paint: float measureText(java.lang.String)>","<android.graphics.Paint: float measureText(java.lang.String)>"
"<android.widget.RemoteViews: void <init>(android.os.Parcel)>","<android.widget.RemoteViews: void <init>(android.os.Parcel)>"
"<java.time.LocalTime: java.time.LocalTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.LocalTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ViewConfiguration: float getScaledVerticalScrollFactor()>","<android.view.ViewConfiguration: float getScaledVerticalScrollFactor()>"
"<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>","<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>"
"<android.app.RemoteAction: java.lang.CharSequence getTitle()>","<android.app.RemoteAction: java.lang.CharSequence getTitle()>"
"<android.app.Notification: void <init>(android.os.Parcel)>","<android.app.Notification: void <init>(android.os.Parcel)>"
"<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View)>","<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View)>"
"<android.widget.AbsListView: int computeVerticalScrollRange()>","<android.widget.AbsListView: int computeVerticalScrollRange()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>"
"<android.view.ViewStructure: void setDataIsSensitive(boolean)>","<android.view.ViewStructure: void setDataIsSensitive(boolean)>"
"<io.flutter.plugins.webviewflutter.p0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.p0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<io.flutter.plugin.platform.l: void onFocusChange(android.view.View,boolean)>","<io.flutter.plugin.platform.l: void onFocusChange(android.view.View,boolean)>"
"<android.view.View: void onLayout(boolean,int,int,int,int)>","<android.view.View: void onLayout(boolean,int,int,int,int)>"
"<java.time.chrono.IsoEra: java.time.chrono.IsoEra of(int)>","<java.time.chrono.IsoEra: java.time.chrono.IsoEra of(int)>"
"<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>","<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>"
"<android.view.View: int resolveSize(int,int)>","<android.view.View: int resolveSize(int,int)>"
"<java.util.stream.Stream: java.util.Optional reduce(java.util.function.BinaryOperator)>","<java.util.stream.Stream: java.util.Optional reduce(java.util.function.BinaryOperator)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.widget.Toolbar: android.view.Menu getMenu()>","<android.widget.Toolbar: android.view.Menu getMenu()>"
"<android.content.ContextWrapper: android.content.Context createAttributionContext(java.lang.String)>","<android.content.ContextWrapper: android.content.Context createAttributionContext(java.lang.String)>"
"<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>","<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>"
"<u0.u: void <init>(java.util.concurrent.atomic.AtomicInteger)>","<u0.u: void <init>(java.util.concurrent.atomic.AtomicInteger)>"
"<android.view.inputmethod.EditorInfo: void <clinit>()>","<android.view.inputmethod.EditorInfo: void <clinit>()>"
"<android.icu.util.ULocale: java.lang.String getFallback(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getFallback(java.lang.String)>"
"<android.util.SparseArray: void remove(int)>","<android.util.SparseArray: void remove(int)>"
"<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>","<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>"
"<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.widget.AdapterView: void removeViewAt(int)>","<android.widget.AdapterView: void removeViewAt(int)>"
"<java.lang.SecurityManager: int classDepth(java.lang.String)>","<java.lang.SecurityManager: int classDepth(java.lang.String)>"
"<java.io.File: int compareTo(java.io.File)>","<java.io.File: int compareTo(java.io.File)>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setClip(android.content.ClipData)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setClip(android.content.ClipData)>"
"<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>","<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>"
"<android.hardware.SensorListener: void onAccuracyChanged(int,int)>","<android.hardware.SensorListener: void onAccuracyChanged(int,int)>"
"<android.view.View: android.view.View findViewById(int)>","<android.view.View: android.view.View findViewById(int)>"
"<android.app.ActionBar: void setSubtitle(int)>","<android.app.ActionBar: void setSubtitle(int)>"
"<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>","<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>"
"<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>"
"<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>","<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>"
"<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>","<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>"
"<java.util.jar.Attributes: boolean isEmpty()>","<java.util.jar.Attributes: boolean isEmpty()>"
"<org.json.JSONObject: void <init>(java.lang.String)>","<org.json.JSONObject: void <init>(java.lang.String)>"
"<java.util.TimeZone: void setDefault(java.util.TimeZone)>","<java.util.TimeZone: void setDefault(java.util.TimeZone)>"
"<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>","<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>"
"<android.animation.Animator: void resume()>","<android.animation.Animator: void resume()>"
"<android.webkit.WebView$VisualStateCallback: void onComplete(long)>","<android.webkit.WebView$VisualStateCallback: void onComplete(long)>"
"<java.lang.Long: long parseUnsignedLong(java.lang.CharSequence,int,int,int)>","<java.lang.Long: long parseUnsignedLong(java.lang.CharSequence,int,int,int)>"
"<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>","<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>"
"<java.lang.StackTraceElement: java.lang.String toString()>","<java.lang.StackTraceElement: java.lang.String toString()>"
"<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>","<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>"
"<android.content.pm.ResolveInfo: boolean isCrossProfileIntentForwarderActivity()>","<android.content.pm.ResolveInfo: boolean isCrossProfileIntentForwarderActivity()>"
"<android.view.View: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>","<android.view.View: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>"
"<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>"
"<android.content.ComponentName: java.lang.String flattenToString()>","<android.content.ComponentName: java.lang.String flattenToString()>"
"<org.json.JSONObject: long optLong(java.lang.String)>","<org.json.JSONObject: long optLong(java.lang.String)>"
"<java.util.stream.Stream: java.util.stream.Stream generate(java.util.function.Supplier)>","<java.util.stream.Stream: java.util.stream.Stream generate(java.util.function.Supplier)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setShortcutId(java.lang.String)>","<android.app.Notification$Builder: android.app.Notification$Builder setShortcutId(java.lang.String)>"
"<android.widget.Toolbar: java.lang.CharSequence getSubtitle()>","<android.widget.Toolbar: java.lang.CharSequence getSubtitle()>"
"<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<android.widget.RemoteViews: void setEmptyView(int,int)>","<android.widget.RemoteViews: void setEmptyView(int,int)>"
"<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)>","<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)>"
"<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>","<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>"
"<android.view.LayoutInflater$Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.view.LayoutInflater$Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<android.os.Message: void recycle()>","<android.os.Message: void recycle()>"
"<java.nio.channels.SocketChannel: java.net.Socket socket()>","<java.nio.channels.SocketChannel: java.net.Socket socket()>"
"<android.content.Loader: void onStartLoading()>","<android.content.Loader: void onStartLoading()>"
"<java.security.InvalidKeyException: void <init>(java.lang.String)>","<java.security.InvalidKeyException: void <init>(java.lang.String)>"
"<android.util.SparseBooleanArray: int indexOfValue(boolean)>","<android.util.SparseBooleanArray: int indexOfValue(boolean)>"
"<java.util.TimeZone: java.time.ZoneId toZoneId()>","<java.util.TimeZone: java.time.ZoneId toZoneId()>"
"<java.io.File: java.io.File getCanonicalFile()>","<java.io.File: java.io.File getCanonicalFile()>"
"<android.util.LongSparseArray: void append(long,java.lang.Object)>","<android.util.LongSparseArray: void append(long,java.lang.Object)>"
"<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle setConversationTitle(java.lang.CharSequence)>","<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle setConversationTitle(java.lang.CharSequence)>"
"<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<android.widget.AbsListView: int computeVerticalScrollOffset()>","<android.widget.AbsListView: int computeVerticalScrollOffset()>"
"<java.nio.ShortBuffer: java.nio.Buffer reset()>","<java.nio.ShortBuffer: java.nio.Buffer reset()>"
"<android.app.Service: void onRebind(android.content.Intent)>","<android.app.Service: void onRebind(android.content.Intent)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>"
"<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>","<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>"
"<java.io.ObjectOutputStream: void write(int)>","<java.io.ObjectOutputStream: void write(int)>"
"<android.util.LongSparseArray: void clear()>","<android.util.LongSparseArray: void clear()>"
"<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>","<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>"
"<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>","<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>"
"<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)>","<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)>"
"<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>","<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>"
"<io.flutter.plugins.webviewflutter.k2: void <clinit>()>","<io.flutter.plugins.webviewflutter.k2: void <clinit>()>"
"<android.view.View: int getWidth()>","<android.view.View: int getWidth()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>"
"<android.view.animation.Animation: void scaleCurrentDuration(float)>","<android.view.animation.Animation: void scaleCurrentDuration(float)>"
"<android.view.ViewGroup: void removeViewAt(int)>","<android.view.ViewGroup: void removeViewAt(int)>"
"<java.nio.charset.Charset: java.lang.String displayName()>","<java.nio.charset.Charset: java.lang.String displayName()>"
"<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>","<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>"
"<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>","<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>"
"<android.view.InputDevice: int getControllerNumber()>","<android.view.InputDevice: int getControllerNumber()>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.webkit.WebChromeClient$FileChooserParams: java.lang.String getFilenameHint()>","<android.webkit.WebChromeClient$FileChooserParams: java.lang.String getFilenameHint()>"
"<android.app.Notification$Action$WearableExtender: boolean isAvailableOffline()>","<android.app.Notification$Action$WearableExtender: boolean isAvailableOffline()>"
"<android.widget.AbsListView: void onGlobalLayout()>","<android.widget.AbsListView: void onGlobalLayout()>"
"<java.time.OffsetDateTime: long toEpochSecond()>","<java.time.OffsetDateTime: long toEpochSecond()>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>"
"<android.os.Handler: android.os.Handler createAsync(android.os.Looper)>","<android.os.Handler: android.os.Handler createAsync(android.os.Looper)>"
"<java.lang.ClassLoader: void resolveClass(java.lang.Class)>","<java.lang.ClassLoader: void resolveClass(java.lang.Class)>"
"<android.app.ActionBar: void setNavigationMode(int)>","<android.app.ActionBar: void setNavigationMode(int)>"
"<io.flutter.plugins.webviewflutter.w0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.w0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()>","<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()>"
"<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<java.math.BigInteger: double doubleValue()>","<java.math.BigInteger: double doubleValue()>"
"<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)>","<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)>"
"<android.content.pm.Signature: void <init>(java.lang.String)>","<android.content.pm.Signature: void <init>(java.lang.String)>"
"<org.json.JSONTokener: boolean more()>","<org.json.JSONTokener: boolean more()>"
"<android.app.Notification: java.lang.String toString()>","<android.app.Notification: java.lang.String toString()>"
"<org.json.JSONArray: boolean optBoolean(int,boolean)>","<org.json.JSONArray: boolean optBoolean(int,boolean)>"
"<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>","<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>"
"<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.io.Writer: void write(char[],int,int)>","<java.io.Writer: void write(char[],int,int)>"
"<android.graphics.RecordingCanvas: void drawLines(float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawLines(float[],android.graphics.Paint)>"
"<android.content.ContentProviderResult: void <init>(android.net.Uri)>","<android.content.ContentProviderResult: void <init>(android.net.Uri)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>"
"<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>","<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>"
"<java.net.Socket: void setOOBInline(boolean)>","<java.net.Socket: void setOOBInline(boolean)>"
"<java.util.stream.IntStream: java.util.OptionalInt min()>","<java.util.stream.IntStream: java.util.OptionalInt min()>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>"
"<android.app.PictureInPictureParams: void <clinit>()>","<android.app.PictureInPictureParams: void <clinit>()>"
"<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>","<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>"
"<android.util.ArrayMap: void replaceAll(java.util.function.BiFunction)>","<android.util.ArrayMap: void replaceAll(java.util.function.BiFunction)>"
"<android.util.TypedValue: void setTo(android.util.TypedValue)>","<android.util.TypedValue: void setTo(android.util.TypedValue)>"
"<android.app.VoiceInteractor$CommandRequest: void onCommandResult(boolean,android.os.Bundle)>","<android.app.VoiceInteractor$CommandRequest: void onCommandResult(boolean,android.os.Bundle)>"
"<java.time.LocalDate: long toEpochDay()>","<java.time.LocalDate: long toEpochDay()>"
"<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.app.Service: boolean stopSelfResult(int)>","<android.app.Service: boolean stopSelfResult(int)>"
"<android.view.MenuItem: java.lang.CharSequence getTooltipText()>","<android.view.MenuItem: java.lang.CharSequence getTooltipText()>"
"<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>","<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>"
"<java.lang.reflect.Field: void <init>()>","<java.lang.reflect.Field: void <init>()>"
"<android.service.autofill.UserData: java.lang.String getId()>","<android.service.autofill.UserData: java.lang.String getId()>"
"<java.util.concurrent.ThreadLocalRandom: double nextDouble(double,double)>","<java.util.concurrent.ThreadLocalRandom: double nextDouble(double,double)>"
"<android.graphics.Rect: void union(int,int)>","<android.graphics.Rect: void union(int,int)>"
"<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>","<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>"
"<android.text.Selection: void extendSelection(android.text.Spannable,int)>","<android.text.Selection: void extendSelection(android.text.Spannable,int)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>"
"<io.flutter.plugins.webviewflutter.p: void <init>(io.flutter.plugins.webviewflutter.k$d$a)>","<io.flutter.plugins.webviewflutter.p: void <init>(io.flutter.plugins.webviewflutter.k$d$a)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>"
"<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>","<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAllowGeneratedReplies(boolean)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setAllowGeneratedReplies(boolean)>"
"<android.webkit.WebHistoryItem: java.lang.Object clone()>","<android.webkit.WebHistoryItem: java.lang.Object clone()>"
"<android.os.Bundle: boolean hasFileDescriptors()>","<android.os.Bundle: boolean hasFileDescriptors()>"
"<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)>","<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)>"
"<android.content.res.AssetManager$AssetInputStream: void mark(int)>","<android.content.res.AssetManager$AssetInputStream: void mark(int)>"
"<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)>"
"<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>","<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setEditorBoundsInfo(android.view.inputmethod.EditorBoundsInfo)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setEditorBoundsInfo(android.view.inputmethod.EditorBoundsInfo)>"
"<java.lang.InstantiationException: void <init>(java.lang.String)>","<java.lang.InstantiationException: void <init>(java.lang.String)>"
"<android.view.Window$Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.view.Window$Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.Throwable)>","<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.Throwable)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>","<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>"
"<android.widget.TextView: void setLineSpacing(float,float)>","<android.widget.TextView: void setLineSpacing(float,float)>"
"<android.icu.util.ULocale: java.lang.String getName(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getName(java.lang.String)>"
"<android.net.Uri: java.lang.String getHost()>","<android.net.Uri: java.lang.String getHost()>"
"<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>","<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>"
"<java.lang.Float: float parseFloat(java.lang.String)>","<java.lang.Float: float parseFloat(java.lang.String)>"
"<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetPlain(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetPlain(java.lang.Object,java.lang.Object)>"
"<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>","<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>"
"<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>","<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>"
"<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,int,boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,int,boolean)>"
"<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>"
"<android.icu.util.ULocale: int hashCode()>","<android.icu.util.ULocale: int hashCode()>"
"<android.animation.StateListAnimator: void jumpToCurrentState()>","<android.animation.StateListAnimator: void jumpToCurrentState()>"
"<java.util.LinkedList: java.lang.Object element()>","<java.util.LinkedList: java.lang.Object element()>"
"<android.print.PageRange: int getStart()>","<android.print.PageRange: int getStart()>"
"<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setDenominator(long)>","<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setDenominator(long)>"
"<java.io.NotActiveException: void <init>(java.lang.String)>","<java.io.NotActiveException: void <init>(java.lang.String)>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>"
"<java.net.DatagramSocketImpl: void disconnect()>","<java.net.DatagramSocketImpl: void disconnect()>"
"<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>","<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>"
"<java.net.DatagramSocket: int getPort()>","<java.net.DatagramSocket: int getPort()>"
"<java.lang.Character: boolean isLowSurrogate(char)>","<java.lang.Character: boolean isLowSurrogate(char)>"
"<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>","<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>"
"<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>","<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>"
"<android.content.AttributionSource: android.content.AttributionSource myAttributionSource()>","<android.content.AttributionSource: android.content.AttributionSource myAttributionSource()>"
"<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.String)>","<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.String)>"
"<android.graphics.Canvas: int getMaximumBitmapHeight()>","<android.graphics.Canvas: int getMaximumBitmapHeight()>"
"<android.graphics.Paint: void setLinearText(boolean)>","<android.graphics.Paint: void setLinearText(boolean)>"
"<java.util.jar.JarEntry: void <init>(java.util.zip.ZipEntry)>","<java.util.jar.JarEntry: void <init>(java.util.zip.ZipEntry)>"
"<android.app.FragmentManager$BackStackEntry: int getId()>","<android.app.FragmentManager$BackStackEntry: int getId()>"
"<android.os.Parcel: void enforceNoDataAvail()>","<android.os.Parcel: void enforceNoDataAvail()>"
"<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>","<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>"
"<android.util.LongSparseArray: void <init>(int)>","<android.util.LongSparseArray: void <init>(int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>"
"<java.util.jar.JarFile: void <init>(java.io.File,boolean,int)>","<java.util.jar.JarFile: void <init>(java.io.File,boolean,int)>"
"<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>","<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>"
"<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>","<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>"
"<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[])>","<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[])>"
"<android.content.SyncRequest: void <init>()>","<android.content.SyncRequest: void <init>()>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()>"
"<android.view.ViewStructure: int getTextSelectionEnd()>","<android.view.ViewStructure: int getTextSelectionEnd()>"
"<android.widget.ImageView$ScaleType: void <clinit>()>","<android.widget.ImageView$ScaleType: void <clinit>()>"
"<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>","<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>"
"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>","<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>"
"<android.graphics.ColorSpace$Rgb: float[] fromXyz(float[])>","<android.graphics.ColorSpace$Rgb: float[] fromXyz(float[])>"
"<java.util.Calendar: void set(int,int,int,int,int)>","<java.util.Calendar: void set(int,int,int,int,int)>"
"<java.util.stream.Stream: java.util.stream.IntStream flatMapToInt(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.IntStream flatMapToInt(java.util.function.Function)>"
"<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()>","<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()>"
"<java.nio.channels.FileChannel$MapMode: void <clinit>()>","<java.nio.channels.FileChannel$MapMode: void <clinit>()>"
"<java.net.DatagramSocket: void send(java.net.DatagramPacket)>","<java.net.DatagramSocket: void send(java.net.DatagramPacket)>"
"<android.widget.TextView: int getCompoundDrawablePadding()>","<android.widget.TextView: int getCompoundDrawablePadding()>"
"<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>","<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>"
"<android.content.Intent: void <init>(java.lang.String)>","<android.content.Intent: void <init>(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<java.util.LongSummaryStatistics: long getMax()>","<java.util.LongSummaryStatistics: long getMax()>"
"<android.app.Fragment: boolean getUserVisibleHint()>","<android.app.Fragment: boolean getUserVisibleHint()>"
"<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>","<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>"
"<android.database.sqlite.SQLiteDatabase: java.lang.String toString()>","<android.database.sqlite.SQLiteDatabase: java.lang.String toString()>"
"<android.media.session.MediaController$PlaybackInfo: void <clinit>()>","<android.media.session.MediaController$PlaybackInfo: void <clinit>()>"
"<android.text.Layout$Alignment: void <clinit>()>","<android.text.Layout$Alignment: void <clinit>()>"
"<android.view.WindowInsetsController$OnControllableInsetsChangedListener: void onControllableInsetsChanged(android.view.WindowInsetsController,int)>","<android.view.WindowInsetsController$OnControllableInsetsChangedListener: void onControllableInsetsChanged(android.view.WindowInsetsController,int)>"
"<java.util.Spliterator$OfLong: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfLong: java.util.Spliterator$OfPrimitive trySplit()>"
"<java.util.function.Predicate: java.util.function.Predicate and(java.util.function.Predicate)>","<java.util.function.Predicate: java.util.function.Predicate and(java.util.function.Predicate)>"
"<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>","<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>"
"<android.view.View: void addFocusables(java.util.ArrayList,int,int)>","<android.view.View: void addFocusables(java.util.ArrayList,int,int)>"
"<android.os.Message: void <init>()>","<android.os.Message: void <init>()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(int)>"
"<java.lang.Character: int digit(char,int)>","<java.lang.Character: int digit(char,int)>"
"<android.widget.RemoteViews: void setViewOutlinePreferredRadiusAttr(int,int)>","<android.widget.RemoteViews: void setViewOutlinePreferredRadiusAttr(int,int)>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledFlags()>","<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledFlags()>"
"<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.content.OperationApplicationException: void <init>()>","<android.content.OperationApplicationException: void <init>()>"
"<android.widget.ListPopupWindow: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.ListPopupWindow: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.widget.TextView: void setLineBreakWordStyle(int)>","<android.widget.TextView: void setLineBreakWordStyle(int)>"
"<android.content.ContentValues: void <init>()>","<android.content.ContentValues: void <init>()>"
"<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>","<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>"
"<java.net.URLConnection: int getContentLength()>","<java.net.URLConnection: int getContentLength()>"
"<android.app.ActionBar: boolean isHideOnContentScrollEnabled()>","<android.app.ActionBar: boolean isHideOnContentScrollEnabled()>"
"<java.lang.Integer: int rotateRight(int,int)>","<java.lang.Integer: int rotateRight(int,int)>"
"<android.webkit.ConsoleMessage: java.lang.String sourceId()>","<android.webkit.ConsoleMessage: java.lang.String sourceId()>"
"<android.content.pm.ApplicationInfo: int getNativeHeapZeroInitialized()>","<android.content.pm.ApplicationInfo: int getNativeHeapZeroInitialized()>"
"<android.window.SplashScreenView: void onLayout(boolean,int,int,int,int)>","<android.window.SplashScreenView: void onLayout(boolean,int,int,int,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)>"
"<android.app.ActivityManager$TaskDescription: java.lang.String toString()>","<android.app.ActivityManager$TaskDescription: java.lang.String toString()>"
"<java.nio.file.Path: boolean isAbsolute()>","<java.nio.file.Path: boolean isAbsolute()>"
"<android.content.ClipDescription: int getClassificationStatus()>","<android.content.ClipDescription: int getClassificationStatus()>"
"<android.view.inputmethod.TextSnapshot: int getSelectionEnd()>","<android.view.inputmethod.TextSnapshot: int getSelectionEnd()>"
"<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>","<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>"
"<android.webkit.RenderProcessGoneDetail: int rendererPriorityAtExit()>","<android.webkit.RenderProcessGoneDetail: int rendererPriorityAtExit()>"
"<java.nio.CharBuffer: boolean equals(java.lang.Object)>","<java.nio.CharBuffer: boolean equals(java.lang.Object)>"
"<java.util.LinkedHashMap: java.util.Set entrySet()>","<java.util.LinkedHashMap: java.util.Set entrySet()>"
"<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>","<android.webkit.WebView: void requestFocusNodeHref(android.os.Message)>"
"<java.net.Socket: void <init>(java.net.Proxy)>","<java.net.Socket: void <init>(java.net.Proxy)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setHeading(boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setHeading(boolean)>"
"<java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>","<java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>"
"<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>"
"<java.lang.System: void setOut(java.io.PrintStream)>","<java.lang.System: void setOut(java.io.PrintStream)>"
"<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>"
"<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>","<java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>"
"<android.widget.ListPopupWindow: void setAnchorView(android.view.View)>","<android.widget.ListPopupWindow: void setAnchorView(android.view.View)>"
"<android.content.IntentSender: java.lang.String toString()>","<android.content.IntentSender: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.text.Format toFormat()>","<java.time.format.DateTimeFormatter: java.text.Format toFormat()>"
"<android.content.res.Resources: android.content.res.AssetManager getAssets()>","<android.content.res.Resources: android.content.res.AssetManager getAssets()>"
"<java.time.temporal.ChronoField: long getFrom(java.time.temporal.TemporalAccessor)>","<java.time.temporal.ChronoField: long getFrom(java.time.temporal.TemporalAccessor)>"
"<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[])>"
"<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>","<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>"
"<org.json.JSONObject: void <init>(org.json.JSONTokener)>","<org.json.JSONObject: void <init>(org.json.JSONTokener)>"
"<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>"
"<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>","<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>"
"<java.util.Locale$Builder: java.util.Locale$Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>"
"<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>","<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>"
"<java.nio.LongBuffer: java.lang.Object array()>","<java.nio.LongBuffer: java.lang.Object array()>"
"<java.util.IntSummaryStatistics: int getMin()>","<java.util.IntSummaryStatistics: int getMin()>"
"<android.content.pm.PackageInstaller$SessionParams: void setAppPackageName(java.lang.String)>","<android.content.pm.PackageInstaller$SessionParams: void setAppPackageName(java.lang.String)>"
"<android.widget.AdapterView: void setFocusable(int)>","<android.widget.AdapterView: void setFocusable(int)>"
"<android.icu.util.ULocale: boolean isRightToLeft()>","<android.icu.util.ULocale: boolean isRightToLeft()>"
"<java.lang.SecurityManager: void checkAwtEventQueueAccess()>","<java.lang.SecurityManager: void checkAwtEventQueueAccess()>"
"<android.app.Service: boolean onUnbind(android.content.Intent)>","<android.app.Service: boolean onUnbind(android.content.Intent)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>"
"<android.view.translation.TranslationSpec: android.icu.util.ULocale getLocale()>","<android.view.translation.TranslationSpec: android.icu.util.ULocale getLocale()>"
"<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>","<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>"
"<java.time.zone.ZoneRules: boolean equals(java.lang.Object)>","<java.time.zone.ZoneRules: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createRuntimeShaderEffect(android.graphics.RuntimeShader,java.lang.String)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createRuntimeShaderEffect(android.graphics.RuntimeShader,java.lang.String)>"
"<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>","<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>"
"<android.graphics.Point: java.lang.String toString()>","<android.graphics.Point: java.lang.String toString()>"
"<android.app.Notification$Builder: android.widget.RemoteViews createContentView()>","<android.app.Notification$Builder: android.widget.RemoteViews createContentView()>"
"<java.util.Calendar: java.util.Date getTime()>","<java.util.Calendar: java.util.Date getTime()>"
"<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>","<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>"
"<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>","<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>"
"<java.util.Arrays: float[] copyOfRange(float[],int,int)>","<java.util.Arrays: float[] copyOfRange(float[],int,int)>"
"<android.content.res.AssetFileDescriptor: int describeContents()>","<android.content.res.AssetFileDescriptor: int describeContents()>"
"<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader,java.lang.Class)>"
"<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getBaseUnit()>","<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getBaseUnit()>"
"<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>","<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>"
"<java.lang.ArrayStoreException: void <init>()>","<java.lang.ArrayStoreException: void <init>()>"
"<java.lang.Math: long floorMod(long,long)>","<java.lang.Math: long floorMod(long,long)>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText build()>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText build()>"
"<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)>","<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)>"
"<android.graphics.Color: float blue(long)>","<android.graphics.Color: float blue(long)>"
"<java.util.Arrays: void parallelSort(byte[],int,int)>","<java.util.Arrays: void parallelSort(byte[],int,int)>"
"<android.graphics.drawable.Drawable: boolean setState(int[])>","<android.graphics.drawable.Drawable: boolean setState(int[])>"
"<android.content.pm.PackageManager$Property: java.lang.String getClassName()>","<android.content.pm.PackageManager$Property: java.lang.String getClassName()>"
"<java.util.stream.Stream: java.util.stream.Stream skip(long)>","<java.util.stream.Stream: java.util.stream.Stream skip(long)>"
"<java.nio.channels.spi.SelectorProvider: void <init>()>","<java.nio.channels.spi.SelectorProvider: void <init>()>"
"<java.nio.channels.SelectionKey: void cancel()>","<java.nio.channels.SelectionKey: void cancel()>"
"<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>","<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>"
"<android.view.inputmethod.InputMethodInfo: boolean supportsStylusHandwriting()>","<android.view.inputmethod.InputMethodInfo: boolean supportsStylusHandwriting()>"
"<android.graphics.Paint: void setFakeBoldText(boolean)>","<android.graphics.Paint: void setFakeBoldText(boolean)>"
"<android.animation.Keyframe: void <init>()>","<android.animation.Keyframe: void <init>()>"
"<android.os.Message: void <clinit>()>","<android.os.Message: void <clinit>()>"
"<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>","<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>"
"<org.json.JSONArray: boolean getBoolean(int)>","<org.json.JSONArray: boolean getBoolean(int)>"
"<android.transition.Transition: android.transition.Transition setStartDelay(long)>","<android.transition.Transition: android.transition.Transition setStartDelay(long)>"
"<java.util.function.Consumer: void accept(java.lang.Object)>","<java.util.function.Consumer: void accept(java.lang.Object)>"
"<android.widget.TextView: int computeVerticalScrollExtent()>","<android.widget.TextView: int computeVerticalScrollExtent()>"
"<android.content.res.Resources$Theme: void applyStyle(int,boolean)>","<android.content.res.Resources$Theme: void applyStyle(int,boolean)>"
"<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<android.widget.AbsListView: void dispatchDrawableHotspotChanged(float,float)>","<android.widget.AbsListView: void dispatchDrawableHotspotChanged(float,float)>"
"<android.print.PrintAttributes: int getDuplexMode()>","<android.print.PrintAttributes: int getDuplexMode()>"
"<android.webkit.WebSettings: void setSaveFormData(boolean)>","<android.webkit.WebSettings: void setSaveFormData(boolean)>"
"<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>","<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>"
"<android.widget.Scroller: void setFinalY(int)>","<android.widget.Scroller: void setFinalY(int)>"
"<android.view.inputmethod.BaseInputConnection: boolean endBatchEdit()>","<android.view.inputmethod.BaseInputConnection: boolean endBatchEdit()>"
"<android.view.contentcapture.ContentCaptureSessionId: void writeToParcel(android.os.Parcel,int)>","<android.view.contentcapture.ContentCaptureSessionId: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>","<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>"
"<android.database.sqlite.SQLiteDatabase: int getVersion()>","<android.database.sqlite.SQLiteDatabase: int getVersion()>"
"<org.json.JSONTokener: void skipPast(java.lang.String)>","<org.json.JSONTokener: void skipPast(java.lang.String)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>"
"<io.flutter.plugins.webviewflutter.f1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f1: void a(java.lang.Object,y.a$e)>"
"<java.lang.Character: boolean isIdentifierIgnorable(int)>","<java.lang.Character: boolean isIdentifierIgnorable(int)>"
"<java.util.concurrent.atomic.AtomicInteger: int compareAndExchangeAcquire(int,int)>","<java.util.concurrent.atomic.AtomicInteger: int compareAndExchangeAcquire(int,int)>"
"<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.text.Layout: int getOffsetForHorizontal(int,float)>","<android.text.Layout: int getOffsetForHorizontal(int,float)>"
"<java.security.Provider: void removeService(java.security.Provider$Service)>","<java.security.Provider: void removeService(java.security.Provider$Service)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>"
"<android.text.Editable: android.text.InputFilter[] getFilters()>","<android.text.Editable: android.text.InputFilter[] getFilters()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>"
"<java.util.Map$Entry: java.util.Comparator comparingByValue()>","<java.util.Map$Entry: java.util.Comparator comparingByValue()>"
"<java.time.chrono.ChronoLocalDateTime: java.lang.String toString()>","<java.time.chrono.ChronoLocalDateTime: java.lang.String toString()>"
"<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()>","<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()>"
"<android.media.session.MediaSession$Callback: void onPlay()>","<android.media.session.MediaSession$Callback: void onPlay()>"
"<android.view.autofill.AutofillValue: void writeToParcel(android.os.Parcel,int)>","<android.view.autofill.AutofillValue: void writeToParcel(android.os.Parcel,int)>"
"<androidx.savedstate.SavedStateRegistry$1: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.savedstate.SavedStateRegistry$1: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<android.view.ViewGroup$LayoutParams: void <init>(int,int)>","<android.view.ViewGroup$LayoutParams: void <init>(int,int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream limit(long)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream limit(long)>"
"<android.os.Debug: int getGlobalClassInitTime()>","<android.os.Debug: int getGlobalClassInitTime()>"
"<java.time.Instant: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.content.res.XmlResourceParser: void close()>","<android.content.res.XmlResourceParser: void close()>"
"<android.text.style.MetricAffectingSpan: void <init>()>","<android.text.style.MetricAffectingSpan: void <init>()>"
"<android.content.pm.PackageManager: void setMimeGroup(java.lang.String,java.util.Set)>","<android.content.pm.PackageManager: void setMimeGroup(java.lang.String,java.util.Set)>"
"<java.nio.Buffer: boolean hasRemaining()>","<java.nio.Buffer: boolean hasRemaining()>"
"<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>","<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>"
"<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>","<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>"
"<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()>","<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()>"
"<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator identity()>","<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator identity()>"
"<android.graphics.MaskFilter: void finalize()>","<android.graphics.MaskFilter: void finalize()>"
"<android.graphics.fonts.FontVariationAxis: void <init>(java.lang.String,float)>","<android.graphics.fonts.FontVariationAxis: void <init>(java.lang.String,float)>"
"<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>","<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>"
"<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>","<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>"
"<java.time.LocalTime: java.time.LocalTime plusNanos(long)>","<java.time.LocalTime: java.time.LocalTime plusNanos(long)>"
"<android.widget.Toolbar: void collapseActionView()>","<android.widget.Toolbar: void collapseActionView()>"
"<android.app.Dialog: void openOptionsMenu()>","<android.app.Dialog: void openOptionsMenu()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>"
"<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.webkit.WebView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.widget.TextView: void getFocusedRect(android.graphics.Rect)>","<android.widget.TextView: void getFocusedRect(android.graphics.Rect)>"
"<android.app.ActionBar: int getHideOffset()>","<android.app.ActionBar: int getHideOffset()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>"
"<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>","<java.util.zip.ZipEntry: void <init>(java.util.zip.ZipEntry)>"
"<java.net.InetAddress: int hashCode()>","<java.net.InetAddress: int hashCode()>"
"<java.io.PrintWriter: void clearError()>","<java.io.PrintWriter: void clearError()>"
"<android.app.Dialog: void setFeatureDrawableResource(int,int)>","<android.app.Dialog: void setFeatureDrawableResource(int,int)>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.util.concurrent.Callable)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.util.concurrent.Callable)>"
"<java.util.ArrayList: void <init>(int)>","<java.util.ArrayList: void <init>(int)>"
"<java.lang.Character: int getType(int)>","<java.lang.Character: int getType(int)>"
"<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProviderClient)>","<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProviderClient)>"
"<java.util.concurrent.Executor: void execute(java.lang.Runnable)>","<java.util.concurrent.Executor: void execute(java.lang.Runnable)>"
"<java.time.zone.ZoneRules: java.util.List getTransitionRules()>","<java.time.zone.ZoneRules: java.util.List getTransitionRules()>"
"<android.widget.AbsListView: int getListPaddingTop()>","<android.widget.AbsListView: int getListPaddingTop()>"
"<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>","<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>"
"<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>","<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>"
"<android.view.inputmethod.InputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>","<android.view.inputmethod.InputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>"
"<java.util.jar.JarFile: void <init>(java.io.File)>","<java.util.jar.JarFile: void <init>(java.io.File)>"
"<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>","<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>"
"<io.flutter.embedding.engine.d: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>","<io.flutter.embedding.engine.d: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"
"<android.webkit.WebView: void computeScroll()>","<android.webkit.WebView: void computeScroll()>"
"<android.view.RoundedCorner: int getPosition()>","<android.view.RoundedCorner: int getPosition()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.database.Cursor: boolean isFirst()>","<android.database.Cursor: boolean isFirst()>"
"<android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])>","<android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])>"
"<android.view.View: java.util.Map getAttributeSourceResourceMap()>","<android.view.View: java.util.Map getAttributeSourceResourceMap()>"
"<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[])>","<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[])>"
"<android.app.Activity: void setTitle(java.lang.CharSequence)>","<android.app.Activity: void setTitle(java.lang.CharSequence)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>","<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>"
"<java.util.Collection: int size()>","<java.util.Collection: int size()>"
"<java.time.LocalDate: java.time.LocalDate minusWeeks(long)>","<java.time.LocalDate: java.time.LocalDate minusWeeks(long)>"
"<android.view.inputmethod.CursorAnchorInfo: int describeContents()>","<android.view.inputmethod.CursorAnchorInfo: int describeContents()>"
"<android.view.textclassifier.TextLinks$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextLinks$Request: java.lang.CharSequence getText()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>"
"<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>","<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void <init>(java.lang.CharSequence,int)>","<android.app.VoiceInteractor$PickOptionRequest$Option: void <init>(java.lang.CharSequence,int)>"
"<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.widget.Toolbar: void setPopupTheme(int)>","<android.widget.Toolbar: void setPopupTheme(int)>"
"<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request build()>","<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request build()>"
"<android.app.LoaderManager: void enableDebugLogging(boolean)>","<android.app.LoaderManager: void enableDebugLogging(boolean)>"
"<io.flutter.plugins.webviewflutter.k3: void <init>()>","<io.flutter.plugins.webviewflutter.k3: void <init>()>"
"<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>","<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>"
"<java.lang.Byte: float floatValue()>","<java.lang.Byte: float floatValue()>"
"<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>","<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>"
"<java.util.HashSet: boolean contains(java.lang.Object)>","<java.util.HashSet: boolean contains(java.lang.Object)>"
"<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>","<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>","<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>"
"<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()>","<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()>"
"<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>","<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>"
"<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator compose(java.util.function.DoubleUnaryOperator)>","<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator compose(java.util.function.DoubleUnaryOperator)>"
"<java.util.Calendar: int getMinimum(int)>","<java.util.Calendar: int getMinimum(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()>"
"<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>"
"<android.graphics.Path: float[] approximate(float)>","<android.graphics.Path: float[] approximate(float)>"
"<java.lang.Object: java.lang.Object clone()>","<java.lang.Object: java.lang.Object clone()>"
"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>","<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>"
"<android.graphics.Matrix: void setTranslate(float,float)>","<android.graphics.Matrix: void setTranslate(float,float)>"
"<android.app.Notification$Action: boolean getAllowGeneratedReplies()>","<android.app.Notification$Action: boolean getAllowGeneratedReplies()>"
"<android.util.Rational: boolean isZero()>","<android.util.Rational: boolean isZero()>"
"<java.util.NavigableMap: java.util.Map$Entry floorEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry floorEntry(java.lang.Object)>"
"<java.time.LocalDate: java.time.LocalDate of(int,java.time.Month,int)>","<java.time.LocalDate: java.time.LocalDate of(int,java.time.Month,int)>"
"<java.util.stream.LongStream: long sum()>","<java.util.stream.LongStream: long sum()>"
"<java.lang.Integer: int compareTo(java.lang.Integer)>","<java.lang.Integer: int compareTo(java.lang.Integer)>"
"<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>","<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>"
"<java.lang.Float: int compare(float,float)>","<java.lang.Float: int compare(float,float)>"
"<android.view.View$OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>","<android.view.View$OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>"
"<android.os.BaseBundle: boolean getBoolean(java.lang.String)>","<android.os.BaseBundle: boolean getBoolean(java.lang.String)>"
"<android.view.accessibility.AccessibilityManager: boolean isAudioDescriptionRequested()>","<android.view.accessibility.AccessibilityManager: boolean isAudioDescriptionRequested()>"
"<android.content.res.TypedArray: android.graphics.Typeface getFont(int)>","<android.content.res.TypedArray: android.graphics.Typeface getFont(int)>"
"<android.app.VoiceInteractor$Request: void cancel()>","<android.app.VoiceInteractor$Request: void cancel()>"
"<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>","<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>"
"<android.view.View: void measure(int,int)>","<android.view.View: void measure(int,int)>"
"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>","<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>"
"<java.security.Principal: java.lang.String toString()>","<java.security.Principal: java.lang.String toString()>"
"<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>","<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>"
"<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(long)>","<android.text.style.TtsSpan$CardinalBuilder: android.text.style.TtsSpan$CardinalBuilder setNumber(long)>"
"<java.nio.charset.Charset: boolean isSupported(java.lang.String)>","<java.nio.charset.Charset: boolean isSupported(java.lang.String)>"
"<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>","<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>"
"<java.util.Set: int size()>","<java.util.Set: int size()>"
"<java.lang.Iterable: java.util.Spliterator spliterator()>","<java.lang.Iterable: java.util.Spliterator spliterator()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>"
"<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>","<org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)>"
"<java.nio.LongBuffer: java.nio.LongBuffer compact()>","<java.nio.LongBuffer: java.nio.LongBuffer compact()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>"
"<java.time.OffsetTime: void <init>()>","<java.time.OffsetTime: void <init>()>"
"<android.content.pm.ActivityInfo: void <clinit>()>","<android.content.pm.ActivityInfo: void <clinit>()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.accessibility.AccessibilityWindowInfo: int describeContents()>","<android.view.accessibility.AccessibilityWindowInfo: int describeContents()>"
"<android.database.sqlite.SQLiteClosable: void acquireReference()>","<android.database.sqlite.SQLiteClosable: void acquireReference()>"
"<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>","<java.util.jar.JarFile: java.util.zip.ZipEntry getEntry(java.lang.String)>"
"<java.util.SortedMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>","<java.util.SortedMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>"
"<android.view.InputDevice: int getProductId()>","<android.view.InputDevice: int getProductId()>"
"<java.lang.Float: float floatValue()>","<java.lang.Float: float floatValue()>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutes(int,int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutes(int,int)>"
"<android.app.ActivityManager: void moveTaskToFront(int,int)>","<android.app.ActivityManager: void moveTaskToFront(int,int)>"
"<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>","<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object)>"
"<java.net.URI: java.lang.String getUserInfo()>","<java.net.URI: java.lang.String getUserInfo()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>"
"<android.view.LayoutInflater: android.view.View onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)>"
"<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>"
"<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)>","<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.p: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.p: void a(java.lang.Object)>"
"<android.view.View: boolean hasOverlappingRendering()>","<android.view.View: boolean hasOverlappingRendering()>"
"<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>","<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>","<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>"
"<java.lang.Integer: java.lang.String toOctalString(int)>","<java.lang.Integer: java.lang.String toOctalString(int)>"
"<android.view.View: void setFocusableInTouchMode(boolean)>","<android.view.View: void setFocusableInTouchMode(boolean)>"
"<android.widget.RemoteViews$RemoteViewOutlineProvider: float getRadius()>","<android.widget.RemoteViews$RemoteViewOutlineProvider: float getRadius()>"
"<android.graphics.ColorSpace$Rgb: float[] fromLinear(float[])>","<android.graphics.ColorSpace$Rgb: float[] fromLinear(float[])>"
"<java.net.SocketImpl: void sendUrgentData(int)>","<java.net.SocketImpl: void sendUrgentData(int)>"
"<android.content.IntentFilter: java.lang.String getAction(int)>","<android.content.IntentFilter: java.lang.String getAction(int)>"
"<android.view.ViewStructure: void setLongClickable(boolean)>","<android.view.ViewStructure: void setLongClickable(boolean)>"
"<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>","<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>"
"<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>","<android.webkit.WebView: void setDownloadListener(android.webkit.DownloadListener)>"
"<android.os.ResultReceiver: void <init>(android.os.Handler)>","<android.os.ResultReceiver: void <init>(android.os.Handler)>"
"<java.net.DatagramPacket: void <init>(byte[],int,int)>","<java.net.DatagramPacket: void <init>(byte[],int,int)>"
"<java.util.AbstractSequentialList: boolean addAll(int,java.util.Collection)>","<java.util.AbstractSequentialList: boolean addAll(int,java.util.Collection)>"
"<android.app.Notification$Builder: android.app.Notification build()>","<android.app.Notification$Builder: android.app.Notification build()>"
"<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>","<org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void <init>()>","<android.app.ActivityManager$ProcessErrorStateInfo: void <init>()>"
"<io.flutter.plugins.webviewflutter.p0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.p0: void a(java.lang.Object,y.a$e)>"
"<java.util.Collection: void clear()>","<java.util.Collection: void clear()>"
"<android.text.DynamicLayout: int getLineDescent(int)>","<android.text.DynamicLayout: int getLineDescent(int)>"
"<io.flutter.plugins.webviewflutter.e3: void <clinit>()>","<io.flutter.plugins.webviewflutter.e3: void <clinit>()>"
"<android.widget.TextView: boolean isAllCaps()>","<android.widget.TextView: boolean isAllCaps()>"
"<java.lang.Character: char toLowerCase(char)>","<java.lang.Character: char toLowerCase(char)>"
"<java.net.DatagramSocket: boolean isClosed()>","<java.net.DatagramSocket: boolean isClosed()>"
"<java.util.Deque: boolean remove(java.lang.Object)>","<java.util.Deque: boolean remove(java.lang.Object)>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setQueryString(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setQueryString(java.lang.String)>"
"<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>","<java.io.ObjectOutputStream: void annotateProxyClass(java.lang.Class)>"
"<android.os.Parcel: void writeStringArray(java.lang.String[])>","<android.os.Parcel: void writeStringArray(java.lang.String[])>"
"<android.widget.TextView: android.text.Editable getEditableText()>","<android.widget.TextView: android.text.Editable getEditableText()>"
"<android.view.SurfaceControl$TransactionCommittedListener: void onTransactionCommitted()>","<android.view.SurfaceControl$TransactionCommittedListener: void onTransactionCommitted()>"
"<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>","<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>"
"<android.graphics.PorterDuff$Mode: void <clinit>()>","<android.graphics.PorterDuff$Mode: void <clinit>()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>"
"<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>"
"<android.widget.AbsListView: int getChoiceMode()>","<android.widget.AbsListView: int getChoiceMode()>"
"<java.util.LinkedList: java.util.ListIterator listIterator(int)>","<java.util.LinkedList: java.util.ListIterator listIterator(int)>"
"<android.media.session.MediaController: java.util.List getQueue()>","<android.media.session.MediaController: java.util.List getQueue()>"
"<android.content.Context: android.content.res.Resources getResources()>","<android.content.Context: android.content.res.Resources getResources()>"
"<android.app.Notification$Builder: android.app.Notification$Builder extend(android.app.Notification$Extender)>","<android.app.Notification$Builder: android.app.Notification$Builder extend(android.app.Notification$Extender)>"
"<java.nio.channels.AsynchronousCloseException: void <init>()>","<java.nio.channels.AsynchronousCloseException: void <init>()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>"
"<java.lang.Throwable: void printStackTrace()>","<java.lang.Throwable: void printStackTrace()>"
"<android.view.View: void setOutlineAmbientShadowColor(int)>","<android.view.View: void setOutlineAmbientShadowColor(int)>"
"<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>","<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.drawable.Icon: void <init>()>","<android.graphics.drawable.Icon: void <init>()>"
"<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>","<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>"
"<java.net.SocketException: void <init>(java.lang.String)>","<java.net.SocketException: void <init>(java.lang.String)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>"
"<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>","<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
"<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>","<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setNoRetry(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setNoRetry(boolean)>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleLeft()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleLeft()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>"
"<android.content.ContentProviderResult: void <clinit>()>","<android.content.ContentProviderResult: void <clinit>()>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(java.lang.String)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(java.lang.String)>"
"<android.hardware.lights.LightState: void <init>()>","<android.hardware.lights.LightState: void <init>()>"
"<android.icu.util.ULocale: java.lang.String setKeywordValue(java.lang.String,java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String setKeywordValue(java.lang.String,java.lang.String,java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>()>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>()>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.drawable.Icon)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle bigPicture(android.graphics.drawable.Icon)>"
"<android.widget.AdapterView: android.view.View getEmptyView()>","<android.widget.AdapterView: android.view.View getEmptyView()>"
"<android.view.KeyEvent$DispatcherState: void reset()>","<android.view.KeyEvent$DispatcherState: void reset()>"
"<java.lang.reflect.Modifier: int fieldModifiers()>","<java.lang.reflect.Modifier: int fieldModifiers()>"
"<java.util.UUID: void <init>(long,long)>","<java.util.UUID: void <init>(long,long)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>"
"<android.media.AudioAttributes: int getUsage()>","<android.media.AudioAttributes: int getUsage()>"
"<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>","<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>"
"<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>","<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>"
"<java.util.concurrent.atomic.AtomicLong: void <init>()>","<java.util.concurrent.atomic.AtomicLong: void <init>()>"
"<android.graphics.Path: void reset()>","<android.graphics.Path: void reset()>"
"<android.media.session.MediaSession$Callback: void onSeekTo(long)>","<android.media.session.MediaSession$Callback: void onSeekTo(long)>"
"<android.app.Fragment: void registerForContextMenu(android.view.View)>","<android.app.Fragment: void registerForContextMenu(android.view.View)>"
"<android.text.Layout: int getLineTop(int)>","<android.text.Layout: int getLineTop(int)>"
"<android.view.Window: void setVolumeControlStream(int)>","<android.view.Window: void setVolumeControlStream(int)>"
"<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>","<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>"
"<java.util.Random: void <init>()>","<java.util.Random: void <init>()>"
"<java.lang.Runtime: long freeMemory()>","<java.lang.Runtime: long freeMemory()>"
"<android.text.PrecomputedText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>","<android.text.PrecomputedText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>"
"<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>","<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>"
"<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>","<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>"
"<java.lang.Boolean: java.lang.String toString()>","<java.lang.Boolean: java.lang.String toString()>"
"<java.lang.Math: double tanh(double)>","<java.lang.Math: double tanh(double)>"
"<java.util.Arrays: int mismatch(long[],long[])>","<java.util.Arrays: int mismatch(long[],long[])>"
"<android.database.Cursor: void close()>","<android.database.Cursor: void close()>"
"<android.app.Fragment: int hashCode()>","<android.app.Fragment: int hashCode()>"
"<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>","<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>"
"<android.widget.ListPopupWindow: void setHeight(int)>","<android.widget.ListPopupWindow: void setHeight(int)>"
"<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromFillInIntent(android.content.Intent)>","<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromFillInIntent(android.content.Intent)>"
"<java.lang.reflect.Method: int hashCode()>","<java.lang.reflect.Method: int hashCode()>"
"<android.print.PrintAttributes$Margins: int hashCode()>","<android.print.PrintAttributes$Margins: int hashCode()>"
"<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()>","<android.view.accessibility.AccessibilityRequestPreparer: android.view.View getView()>"
"<java.util.function.Function: java.util.function.Function andThen(java.util.function.Function)>","<java.util.function.Function: java.util.function.Function andThen(java.util.function.Function)>"
"<android.content.pm.ActivityInfo: java.util.Set getKnownActivityEmbeddingCerts()>","<android.content.pm.ActivityInfo: java.util.Set getKnownActivityEmbeddingCerts()>"
"<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.icu.util.ULocale: java.lang.String toLanguageTag()>","<android.icu.util.ULocale: java.lang.String toLanguageTag()>"
"<android.view.ViewGroupOverlay: void <init>()>","<android.view.ViewGroupOverlay: void <init>()>"
"<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>","<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>"
"<java.util.Arrays: int binarySearch(short[],short)>","<java.util.Arrays: int binarySearch(short[],short)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder removeUnicodeLocaleAttribute(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder removeUnicodeLocaleAttribute(java.lang.String)>"
"<java.lang.StringBuilder: int indexOf(java.lang.String)>","<java.lang.StringBuilder: int indexOf(java.lang.String)>"
"<java.io.ObjectStreamField: java.lang.String getName()>","<java.io.ObjectStreamField: java.lang.String getName()>"
"<android.os.Message: android.os.Bundle getData()>","<android.os.Message: android.os.Bundle getData()>"
"<android.content.pm.PackageManager: boolean isPackageSuspended()>","<android.content.pm.PackageManager: boolean isPackageSuspended()>"
"<android.view.translation.TranslationResponseValue: android.view.translation.TranslationResponseValue forError()>","<android.view.translation.TranslationResponseValue: android.view.translation.TranslationResponseValue forError()>"
"<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>","<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>"
"<android.graphics.Color: int argb(int,int,int,int)>","<android.graphics.Color: int argb(int,int,int,int)>"
"<android.view.View: boolean isFocusedByDefault()>","<android.view.View: boolean isFocusedByDefault()>"
"<java.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>"
"<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.util.SizeF: float getWidth()>","<android.util.SizeF: float getWidth()>"
"<java.net.Proxy: void <clinit>()>","<java.net.Proxy: void <clinit>()>"
"<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>","<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>"
"<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>","<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>"
"<java.security.KeyException: void <init>()>","<java.security.KeyException: void <init>()>"
"<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>","<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>","<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>"
"<java.lang.LinkageError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.LinkageError: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.concurrent.atomic.AtomicInteger: int getAndAccumulate(int,java.util.function.IntBinaryOperator)>","<java.util.concurrent.atomic.AtomicInteger: int getAndAccumulate(int,java.util.function.IntBinaryOperator)>"
"<android.view.WindowInsetsAnimation$Bounds: java.lang.String toString()>","<android.view.WindowInsetsAnimation$Bounds: java.lang.String toString()>"
"<android.content.ContentProvider: java.lang.String getCallingAttributionTag()>","<android.content.ContentProvider: java.lang.String getCallingAttributionTag()>"
"<android.graphics.ImageDecoder: void setMutableRequired(boolean)>","<android.graphics.ImageDecoder: void setMutableRequired(boolean)>"
"<android.app.Activity: void onProvideAssistContent(android.app.assist.AssistContent)>","<android.app.Activity: void onProvideAssistContent(android.app.assist.AssistContent)>"
"<android.view.inputmethod.BaseInputConnection: void removeComposingSpans(android.text.Spannable)>","<android.view.inputmethod.BaseInputConnection: void removeComposingSpans(android.text.Spannable)>"
"<android.content.AttributionSource: void <init>()>","<android.content.AttributionSource: void <init>()>"
"<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>","<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>"
"<android.app.RemoteAction: void writeToParcel(android.os.Parcel,int)>","<android.app.RemoteAction: void writeToParcel(android.os.Parcel,int)>"
"<android.content.IntentFilter: int countDataSchemeSpecificParts()>","<android.content.IntentFilter: int countDataSchemeSpecificParts()>"
"<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>","<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>"
"<android.print.PrintAttributes: void writeToParcel(android.os.Parcel,int)>","<android.print.PrintAttributes: void writeToParcel(android.os.Parcel,int)>"
"<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(java.lang.String)>","<android.text.style.TtsSpan$OrdinalBuilder: android.text.style.TtsSpan$OrdinalBuilder setNumber(java.lang.String)>"
"<java.io.FileInputStream: long skip(long)>","<java.io.FileInputStream: long skip(long)>"
"<android.media.Image: android.media.Image$Plane[] getPlanes()>","<android.media.Image: android.media.Image$Plane[] getPlanes()>"
"<java.security.PermissionCollection: boolean isReadOnly()>","<java.security.PermissionCollection: boolean isReadOnly()>"
"<android.content.ContextWrapper: java.io.File getDataDir()>","<android.content.ContextWrapper: java.io.File getDataDir()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setTitle(java.lang.CharSequence)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setTitle(java.lang.CharSequence)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isHeading()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isHeading()>"
"<android.os.Parcel: void writeBinderList(java.util.List)>","<android.os.Parcel: void writeBinderList(java.util.List)>"
"<java.time.ZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.ZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>"
"<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>","<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>"
"<android.view.inputmethod.EditorInfo: android.view.inputmethod.SurroundingText getInitialSurroundingText(int,int,int)>","<android.view.inputmethod.EditorInfo: android.view.inputmethod.SurroundingText getInitialSurroundingText(int,int,int)>"
"<android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)>","<android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)>"
"<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>","<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getInstallLocation()>","<android.content.pm.PackageInstaller$SessionInfo: int getInstallLocation()>"
"<android.widget.AbsListView: void requestDisallowInterceptTouchEvent(boolean)>","<android.widget.AbsListView: void requestDisallowInterceptTouchEvent(boolean)>"
"<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>","<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>"
"<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>"
"<android.app.Fragment: void setReturnTransition(android.transition.Transition)>","<android.app.Fragment: void setReturnTransition(android.transition.Transition)>"
"<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)>","<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)>"
"<android.graphics.Canvas: void disableZ()>","<android.graphics.Canvas: void disableZ()>"
"<android.print.PrintAttributes$Resolution: java.lang.String getId()>","<android.print.PrintAttributes$Resolution: java.lang.String getId()>"
"<android.view.MotionEvent: float getPressure()>","<android.view.MotionEvent: float getPressure()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer slice()>","<java.nio.FloatBuffer: java.nio.FloatBuffer slice()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusMonths(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusMonths(long)>"
"<android.view.View: void onRtlPropertiesChanged(int)>","<android.view.View: void onRtlPropertiesChanged(int)>"
"<java.nio.channels.Selector: java.nio.channels.Selector wakeup()>","<java.nio.channels.Selector: java.nio.channels.Selector wakeup()>"
"<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>","<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>"
"<android.app.ActivityManager: boolean isRunningInTestHarness()>","<android.app.ActivityManager: boolean isRunningInTestHarness()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>","<android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>"
"<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()>","<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()>"
"<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>","<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setActions(java.util.List)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setActions(java.util.List)>"
"<android.view.DragEvent: java.lang.String toString()>","<android.view.DragEvent: java.lang.String toString()>"
"<android.graphics.Color: long pack(int)>","<android.graphics.Color: long pack(int)>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request build()>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request build()>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)>"
"<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>"
"<android.view.WindowInsetsAnimation: void <init>(int,android.view.animation.Interpolator,long)>","<android.view.WindowInsetsAnimation: void <init>(int,android.view.animation.Interpolator,long)>"
"<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Presentation: void <init>(android.content.Context,android.view.Display)>","<android.app.Presentation: void <init>(android.content.Context,android.view.Display)>"
"<java.lang.Class: java.lang.Class getComponentType()>","<java.lang.Class: java.lang.Class getComponentType()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)>"
"<android.text.Selection: void <init>()>","<android.text.Selection: void <init>()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>"
"<android.widget.TextView: void onVisibilityChanged(android.view.View,int)>","<android.widget.TextView: void onVisibilityChanged(android.view.View,int)>"
"<android.hardware.HardwareBuffer: int describeContents()>","<android.hardware.HardwareBuffer: int describeContents()>"
"<android.view.ViewGroup: void jumpDrawablesToCurrentState()>","<android.view.ViewGroup: void jumpDrawablesToCurrentState()>"
"<java.lang.Integer: int reverseBytes(int)>","<java.lang.Integer: int reverseBytes(int)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>"
"<android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>","<android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>"
"<android.widget.PopupWindow: void setEpicenterBounds(android.graphics.Rect)>","<android.widget.PopupWindow: void setEpicenterBounds(android.graphics.Rect)>"
"<java.io.PrintStream: void println(char)>","<java.io.PrintStream: void println(char)>"
"<java.lang.Character: int codePointBefore(char[],int,int)>","<java.lang.Character: int codePointBefore(char[],int,int)>"
"<android.print.PrintDocumentAdapter: void onStart()>","<android.print.PrintDocumentAdapter: void onStart()>"
"<android.view.MenuItem: android.content.Intent getIntent()>","<android.view.MenuItem: android.content.Intent getIntent()>"
"<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>","<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>"
"<android.content.Loader$OnLoadCanceledListener: void onLoadCanceled(android.content.Loader)>","<android.content.Loader$OnLoadCanceledListener: void onLoadCanceled(android.content.Loader)>"
"<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>","<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>"
"<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>","<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getRowTitle()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getRowTitle()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getOpaque(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getOpaque(int)>"
"<android.view.View$BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>","<android.view.View$BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>"
"<android.text.style.URLSpan: java.lang.String getURL()>","<android.text.style.URLSpan: java.lang.String getURL()>"
"<android.view.autofill.AutofillValue: int hashCode()>","<android.view.autofill.AutofillValue: int hashCode()>"
"<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>","<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>"
"<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)>","<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)>"
"<java.util.stream.DoubleStream: java.util.Spliterator spliterator()>","<java.util.stream.DoubleStream: java.util.Spliterator spliterator()>"
"<android.view.textservice.TextInfo: void <init>(java.lang.String,int,int)>","<android.view.textservice.TextInfo: void <init>(java.lang.String,int,int)>"
"<android.net.Uri: java.lang.String getQuery()>","<android.net.Uri: java.lang.String getQuery()>"
"<java.lang.Thread$State: void <clinit>()>","<java.lang.Thread$State: void <clinit>()>"
"<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)>"
"<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>","<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>"
"<java.nio.channels.SocketChannel: boolean finishConnect()>","<java.nio.channels.SocketChannel: boolean finishConnect()>"
"<java.util.UUID: java.util.UUID fromString(java.lang.String)>","<java.util.UUID: java.util.UUID fromString(java.lang.String)>"
"<java.util.zip.ZipEntry: int getMethod()>","<java.util.zip.ZipEntry: int getMethod()>"
"<java.util.concurrent.ThreadPoolExecutor: void finalize()>","<java.util.concurrent.ThreadPoolExecutor: void finalize()>"
"<android.widget.ImageView: boolean getCropToPadding()>","<android.widget.ImageView: boolean getCropToPadding()>"
"<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>","<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>"
"<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>","<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>"
"<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode valueOf(java.lang.String)>","<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode valueOf(java.lang.String)>"
"<org.json.JSONObject: void <clinit>()>","<org.json.JSONObject: void <clinit>()>"
"<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)>"
"<android.graphics.fonts.Font: void <init>()>","<android.graphics.fonts.Font: void <init>()>"
"<android.webkit.PermissionRequest: void <init>()>","<android.webkit.PermissionRequest: void <init>()>"
"<android.view.inputmethod.InputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>","<android.view.inputmethod.InputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>"
"<android.os.Parcel: void writeInterfaceList(java.util.List)>","<android.os.Parcel: void writeInterfaceList(java.util.List)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>"
"<android.animation.ValueAnimator: void setFloatValues(float[])>","<android.animation.ValueAnimator: void setFloatValues(float[])>"
"<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setFullScreenIntent(android.app.PendingIntent,boolean)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>"
"<java.lang.Package: boolean isSealed()>","<java.lang.Package: boolean isSealed()>"
"<java.security.Provider: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.security.Provider: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.view.textclassifier.SelectionEvent: int getEventIndex()>","<android.view.textclassifier.SelectionEvent: int getEventIndex()>"
"<android.window.SplashScreenView: android.view.View getIconView()>","<android.window.SplashScreenView: android.view.View getIconView()>"
"<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>","<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>"
"<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>","<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>"
"<android.os.Debug: void dumpHprofData(java.lang.String)>","<android.os.Debug: void dumpHprofData(java.lang.String)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock()>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock()>"
"<android.view.ActionMode: void hide(long)>","<android.view.ActionMode: void hide(long)>"
"<android.icu.util.ULocale: void <init>(java.lang.String)>","<android.icu.util.ULocale: void <init>(java.lang.String)>"
"<java.lang.Package: java.lang.Package[] getPackages()>","<java.lang.Package: java.lang.Package[] getPackages()>"
"<android.graphics.Paint: float getLetterSpacing()>","<android.graphics.Paint: float getLetterSpacing()>"
"<java.util.ListIterator: java.lang.Object next()>","<java.util.ListIterator: java.lang.Object next()>"
"<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>","<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>"
"<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>","<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDesiredHeightResId(int)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setDesiredHeightResId(int)>"
"<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>","<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>"
"<java.lang.System: void setIn(java.io.InputStream)>","<java.lang.System: void setIn(java.io.InputStream)>"
"<android.widget.TextView: void setTextSelectHandleRight(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextSelectHandleRight(android.graphics.drawable.Drawable)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()>"
"<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.os.VibratorManager: int[] getVibratorIds()>","<android.os.VibratorManager: int[] getVibratorIds()>"
"<android.view.View: boolean requestFocus(int)>","<android.view.View: boolean requestFocus(int)>"
"<android.content.res.TypedArray: void <init>()>","<android.content.res.TypedArray: void <init>()>"
"<java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>","<java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>"
"<android.view.WindowInsetsAnimationControlListener: void onCancelled(android.view.WindowInsetsAnimationController)>","<android.view.WindowInsetsAnimationControlListener: void onCancelled(android.view.WindowInsetsAnimationController)>"
"<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator compose(java.util.function.IntUnaryOperator)>","<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator compose(java.util.function.IntUnaryOperator)>"
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>","<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>"
"<android.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,int)>","<android.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,int)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActiveQueueItemId(long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActiveQueueItemId(long)>"
"<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>","<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>"
"<android.content.pm.ResolveInfo: java.lang.String toString()>","<android.content.pm.ResolveInfo: java.lang.String toString()>"
"<android.view.WindowInsets: boolean isRound()>","<android.view.WindowInsets: boolean isRound()>"
"<java.util.stream.LongStream: java.util.stream.Stream mapToObj(java.util.function.LongFunction)>","<java.util.stream.LongStream: java.util.stream.Stream mapToObj(java.util.function.LongFunction)>"
"<java.util.Objects: int checkIndex(int,int)>","<java.util.Objects: int checkIndex(int,int)>"
"<android.graphics.drawable.Drawable: int getAlpha()>","<android.graphics.drawable.Drawable: int getAlpha()>"
"<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()>"
"<android.media.Rating: void <init>()>","<android.media.Rating: void <init>()>"
"<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>","<javax.security.auth.x500.X500Principal: java.lang.String getName(java.lang.String)>"
"<android.view.inputmethod.TextAttribute: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.TextAttribute: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>"
"<android.os.Parcel: java.util.ArrayList createStringArrayList()>","<android.os.Parcel: java.util.ArrayList createStringArrayList()>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setSource(int)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setSource(int)>"
"<java.util.Calendar: int compareTo(java.lang.Object)>","<java.util.Calendar: int compareTo(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>"
"<android.webkit.WebView: void resumeTimers()>","<android.webkit.WebView: void resumeTimers()>"
"<android.widget.TextView: int getLineCount()>","<android.widget.TextView: int getLineCount()>"
"<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>","<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>","<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>"
"<android.app.RemoteInput: java.lang.String getResultKey()>","<android.app.RemoteInput: java.lang.String getResultKey()>"
"<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>","<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>"
"<java.io.PrintWriter: void println(char)>","<java.io.PrintWriter: void println(char)>"
"<java.util.zip.ZipEntry: boolean isDirectory()>","<java.util.zip.ZipEntry: boolean isDirectory()>"
"<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.graphics.Bitmap: boolean isPremultiplied()>","<android.graphics.Bitmap: boolean isPremultiplied()>"
"<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>","<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>"
"<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>"
"<android.graphics.ImageDecoder$Source: void <init>()>","<android.graphics.ImageDecoder$Source: void <init>()>"
"<java.io.DataOutput: void writeUTF(java.lang.String)>","<java.io.DataOutput: void writeUTF(java.lang.String)>"
"<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>"
"<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>","<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>"
"<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>","<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>"
"<android.os.BaseBundle: void <init>()>","<android.os.BaseBundle: void <init>()>"
"<android.content.ClipData: void addItem(android.content.ContentResolver,android.content.ClipData$Item)>","<android.content.ClipData: void addItem(android.content.ContentResolver,android.content.ClipData$Item)>"
"<java.net.URLConnection: java.lang.String getHeaderField(int)>","<java.net.URLConnection: java.lang.String getHeaderField(int)>"
"<android.content.ContextParams$Builder: android.content.ContextParams build()>","<android.content.ContextParams$Builder: android.content.ContextParams build()>"
"<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>","<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>"
"<android.webkit.WebView: void onOverScrolled(int,int,boolean,boolean)>","<android.webkit.WebView: void onOverScrolled(int,int,boolean,boolean)>"
"<android.database.Cursor: boolean moveToNext()>","<android.database.Cursor: boolean moveToNext()>"
"<android.media.ImageReader$Builder: void <init>(int,int)>","<android.media.ImageReader$Builder: void <init>(int,int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime now()>","<java.time.OffsetDateTime: java.time.OffsetDateTime now()>"
"<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>","<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>"
"<android.graphics.ImageDecoder: android.graphics.PostProcessor getPostProcessor()>","<android.graphics.ImageDecoder: android.graphics.PostProcessor getPostProcessor()>"
"<android.view.ViewGroup: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>","<android.view.ViewGroup: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>"
"<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>","<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIcon(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIcon(int)>"
"<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>","<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>"
"<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel truncate(long)>","<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel truncate(long)>"
"<android.media.session.PlaybackState: int getState()>","<android.media.session.PlaybackState: int getState()>"
"<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>"
"<java.time.LocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)>","<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)>"
"<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()>","<android.view.autofill.AutofillManager: java.lang.String getDefaultFieldClassificationAlgorithm()>"
"<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)>"
"<android.view.Window: android.view.Window$Callback getCallback()>","<android.view.Window: android.view.Window$Callback getCallback()>"
"<java.util.concurrent.atomic.AtomicLong: void setRelease(long)>","<java.util.concurrent.atomic.AtomicLong: void setRelease(long)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>"
"<android.view.ViewStructure: void setOpaque(boolean)>","<android.view.ViewStructure: void setOpaque(boolean)>"
"<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>","<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>"
"<android.view.Display: android.hardware.display.DeviceProductInfo getDeviceProductInfo()>","<android.view.Display: android.hardware.display.DeviceProductInfo getDeviceProductInfo()>"
"<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()>","<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()>"
"<java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>","<java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintAmbientBigPicture(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintAmbientBigPicture(boolean)>"
"<java.text.CharacterIterator: int getBeginIndex()>","<java.text.CharacterIterator: int getBeginIndex()>"
"<java.util.Arrays: int binarySearch(short[],int,int,short)>","<java.util.Arrays: int binarySearch(short[],int,int,short)>"
"<android.webkit.WebResourceRequest: java.util.Map getRequestHeaders()>","<android.webkit.WebResourceRequest: java.util.Map getRequestHeaders()>"
"<android.content.LocusId: java.lang.String toString()>","<android.content.LocusId: java.lang.String toString()>"
"<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>","<android.widget.PopupWindow: void update(android.view.View,int,int,int,int)>"
"<android.database.Cursor: int getInt(int)>","<android.database.Cursor: int getInt(int)>"
"<androidx.window.embedding.e: boolean test(java.lang.Object)>","<androidx.window.embedding.e: boolean test(java.lang.Object)>"
"<android.opengl.Matrix: void transposeM(float[],int,float[],int)>","<android.opengl.Matrix: void transposeM(float[],int,float[],int)>"
"<java.lang.SecurityException: void <init>()>","<java.lang.SecurityException: void <init>()>"
"<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>","<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>"
"<java.lang.Character: int codePointBefore(char[],int)>","<java.lang.Character: int codePointBefore(char[],int)>"
"<java.security.NoSuchProviderException: void <init>(java.lang.String)>","<java.security.NoSuchProviderException: void <init>(java.lang.String)>"
"<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>","<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>"
"<android.os.Parcel: void readFixedArray(java.lang.Object)>","<android.os.Parcel: void readFixedArray(java.lang.Object)>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()>"
"<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>","<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>"
"<android.widget.AbsListView: void onSizeChanged(int,int,int,int)>","<android.widget.AbsListView: void onSizeChanged(int,int,int,int)>"
"<android.app.Activity: void startLocalVoiceInteraction(android.os.Bundle)>","<android.app.Activity: void startLocalVoiceInteraction(android.os.Bundle)>"
"<java.util.stream.DoubleStream: boolean anyMatch(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: boolean anyMatch(java.util.function.DoublePredicate)>"
"<android.view.ViewDebug$HierarchyTraceType: void <clinit>()>","<android.view.ViewDebug$HierarchyTraceType: void <clinit>()>"
"<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>","<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>"
"<android.widget.ListPopupWindow: int getWidth()>","<android.widget.ListPopupWindow: int getWidth()>"
"<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()>","<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()>"
"<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>","<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>"
"<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()>","<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.RejectedExecutionHandler getRejectedExecutionHandler()>"
"<android.view.Window$Callback: android.view.View onCreatePanelView(int)>","<android.view.Window$Callback: android.view.View onCreatePanelView(int)>"
"<java.util.OptionalDouble: java.util.OptionalDouble of(double)>","<java.util.OptionalDouble: java.util.OptionalDouble of(double)>"
"<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)>","<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)>"
"<java.util.OptionalInt: java.util.stream.IntStream stream()>","<java.util.OptionalInt: java.util.stream.IntStream stream()>"
"<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()>","<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()>"
"<android.content.pm.ProviderInfo: int describeContents()>","<android.content.pm.ProviderInfo: int describeContents()>"
"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>"
"<java.net.URL: void <init>(java.lang.String)>","<java.net.URL: void <init>(java.lang.String)>"
"<java.io.ObjectInputStream: void defaultReadObject()>","<java.io.ObjectInputStream: void defaultReadObject()>"
"<java.time.temporal.TemporalField: boolean isTimeBased()>","<java.time.temporal.TemporalField: boolean isTimeBased()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[])>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[])>"
"<android.view.View: boolean showContextMenu(float,float)>","<android.view.View: boolean showContextMenu(float,float)>"
"<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>","<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>"
"<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.security.Provider)>","<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.security.Provider)>"
"<java.util.Objects: int hashCode(java.lang.Object)>","<java.util.Objects: int hashCode(java.lang.Object)>"
"<android.content.Context: android.content.Context createContext(android.content.ContextParams)>","<android.content.Context: android.content.Context createContext(android.content.ContextParams)>"
"<android.view.ActionProvider: boolean hasSubMenu()>","<android.view.ActionProvider: boolean hasSubMenu()>"
"<java.util.Arrays: void parallelSort(java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: void parallelSort(java.lang.Object[],java.util.Comparator)>"
"<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>","<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>"
"<android.animation.LayoutTransition: void <init>()>","<android.animation.LayoutTransition: void <init>()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setExtras(android.os.Bundle)>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setExtras(android.os.Bundle)>"
"<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>","<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>"
"<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>","<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>"
"<io.flutter.plugins.webviewflutter.m0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.m0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.animation.ValueAnimator: boolean registerDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>","<android.animation.ValueAnimator: boolean registerDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>"
"<org.xmlpull.v1.XmlSerializer: java.lang.String getName()>","<org.xmlpull.v1.XmlSerializer: java.lang.String getName()>"
"<android.view.Window: int getStatusBarColor()>","<android.view.Window: int getStatusBarColor()>"
"<io.flutter.embedding.android.j: void <clinit>()>","<io.flutter.embedding.android.j: void <clinit>()>"
"<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>","<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>"
"<android.app.Notification$WearableExtender: int getContentIcon()>","<android.app.Notification$WearableExtender: int getContentIcon()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,android.media.AudioAttributes)>","<android.app.Notification$Builder: android.app.Notification$Builder setSound(android.net.Uri,android.media.AudioAttributes)>"
"<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>","<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>"
"<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])>","<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])>"
"<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFinished(android.print.PrintDocumentInfo,boolean)>","<android.print.PrintDocumentAdapter$LayoutResultCallback: void onLayoutFinished(android.print.PrintDocumentInfo,boolean)>"
"<android.view.View: void onCancelPendingInputEvents()>","<android.view.View: void onCancelPendingInputEvents()>"
"<android.app.Activity: void setTurnScreenOn(boolean)>","<android.app.Activity: void setTurnScreenOn(boolean)>"
"<android.app.Activity: void onBackPressed()>","<android.app.Activity: void onBackPressed()>"
"<java.util.WeakHashMap: int size()>","<java.util.WeakHashMap: int size()>"
"<java.nio.FloatBuffer: java.lang.String toString()>","<java.nio.FloatBuffer: java.lang.String toString()>"
"<android.graphics.ColorSpace: float[] toXyz(float[])>","<android.graphics.ColorSpace: float[] toXyz(float[])>"
"<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>","<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>"
"<java.util.concurrent.TimeUnit: long toMicros(long)>","<java.util.concurrent.TimeUnit: long toMicros(long)>"
"<java.io.BufferedReader: boolean ready()>","<java.io.BufferedReader: boolean ready()>"
"<java.lang.Math: int floorMod(int,int)>","<java.lang.Math: int floorMod(int,int)>"
"<android.view.ViewDebug: void stopRecyclerTracing()>","<android.view.ViewDebug: void stopRecyclerTracing()>"
"<java.util.concurrent.atomic.AtomicLong: long compareAndExchangeAcquire(long,long)>","<java.util.concurrent.atomic.AtomicLong: long compareAndExchangeAcquire(long,long)>"
"<android.os.Debug$MemoryInfo: java.lang.String getMemoryStat(java.lang.String)>","<android.os.Debug$MemoryInfo: java.lang.String getMemoryStat(java.lang.String)>"
"<java.nio.ShortBuffer: short get(int)>","<java.nio.ShortBuffer: short get(int)>"
"<java.time.chrono.ChronoPeriod: long get(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoPeriod: long get(java.time.temporal.TemporalUnit)>"
"<android.media.session.MediaSession$QueueItem: void writeToParcel(android.os.Parcel,int)>","<android.media.session.MediaSession$QueueItem: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebView: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.webkit.WebView: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)>","<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.temporal.TemporalAccessor)>"
"<android.transition.Transition$TransitionListener: void onTransitionEnd(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionEnd(android.transition.Transition)>"
"<android.content.ClipData$Item: android.net.Uri getUri()>","<android.content.ClipData$Item: android.net.Uri getUri()>"
"<android.graphics.drawable.Drawable: boolean isFilterBitmap()>","<android.graphics.drawable.Drawable: boolean isFilterBitmap()>"
"<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>","<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)>"
"<android.widget.AbsListView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.AbsListView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>"
"<java.lang.Math: double abs(double)>","<java.lang.Math: double abs(double)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)>"
"<android.view.MotionEvent: java.lang.String axisToString(int)>","<android.view.MotionEvent: java.lang.String axisToString(int)>"
"<android.view.View: void setPivotX(float)>","<android.view.View: void setPivotX(float)>"
"<android.graphics.Color: int red(int)>","<android.graphics.Color: int red(int)>"
"<android.content.Intent: long getLongExtra(java.lang.String,long)>","<android.content.Intent: long getLongExtra(java.lang.String,long)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.pm.PathPermission: java.lang.String getWritePermission()>","<android.content.pm.PathPermission: java.lang.String getWritePermission()>"
"<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>"
"<android.content.pm.ComponentInfo: int getBannerResource()>","<android.content.pm.ComponentInfo: int getBannerResource()>"
"<android.view.View: int computeHorizontalScrollExtent()>","<android.view.View: int computeHorizontalScrollExtent()>"
"<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>","<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>"
"<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>","<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>"
"<java.nio.file.WatchKey: boolean reset()>","<java.nio.file.WatchKey: boolean reset()>"
"<android.graphics.Paint: void setEndHyphenEdit(int)>","<android.graphics.Paint: void setEndHyphenEdit(int)>"
"<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>","<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>"
"<android.util.AttributeSet: int getAttributeResourceValue(int,int)>","<android.util.AttributeSet: int getAttributeResourceValue(int,int)>"
"<java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)>","<java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)>"
"<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>"
"<java.util.OptionalLong: void ifPresent(java.util.function.LongConsumer)>","<java.util.OptionalLong: void ifPresent(java.util.function.LongConsumer)>"
"<org.json.JSONArray: java.lang.Object remove(int)>","<org.json.JSONArray: java.lang.Object remove(int)>"
"<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>","<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>"
"<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>","<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>"
"<java.util.List: java.util.ListIterator listIterator(int)>","<java.util.List: java.util.ListIterator listIterator(int)>"
"<android.view.ViewGroup: void onAttachedToWindow()>","<android.view.ViewGroup: void onAttachedToWindow()>"
"<android.view.SurfaceControlViewHost: void finalize()>","<android.view.SurfaceControlViewHost: void finalize()>"
"<java.util.concurrent.locks.Condition: long awaitNanos(long)>","<java.util.concurrent.locks.Condition: long awaitNanos(long)>"
"<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>","<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>"
"<android.os.Parcel: void finalize()>","<android.os.Parcel: void finalize()>"
"<android.app.ActivityManager: boolean isLowRamDevice()>","<android.app.ActivityManager: boolean isLowRamDevice()>"
"<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellCheckerInfo()>","<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerInfo getCurrentSpellCheckerInfo()>"
"<androidx.window.embedding.f: boolean test(java.lang.Object)>","<androidx.window.embedding.f: boolean test(java.lang.Object)>"
"<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>","<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>"
"<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.util.List: java.util.List of(java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object)>"
"<android.webkit.WebSettings: boolean getDatabaseEnabled()>","<android.webkit.WebSettings: boolean getDatabaseEnabled()>"
"<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.time.LocalDateTime: java.lang.String toString()>","<java.time.LocalDateTime: java.lang.String toString()>"
"<android.content.Context: android.content.Context getApplicationContext()>","<android.content.Context: android.content.Context getApplicationContext()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>"
"<android.os.Debug$MemoryInfo: void <init>()>","<android.os.Debug$MemoryInfo: void <init>()>"
"<android.webkit.WebSettings$ZoomDensity: void <init>(java.lang.String,int)>","<android.webkit.WebSettings$ZoomDensity: void <init>(java.lang.String,int)>"
"<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.Long: java.lang.Long valueOf(long)>"
"<android.webkit.WebView: void pauseTimers()>","<android.webkit.WebView: void pauseTimers()>"
"<android.text.Editable: android.text.Editable delete(int,int)>","<android.text.Editable: android.text.Editable delete(int,int)>"
"<java.math.BigInteger: int intValue()>","<java.math.BigInteger: int intValue()>"
"<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>","<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>"
"<java.lang.Short: short parseShort(java.lang.String,int)>","<java.lang.Short: short parseShort(java.lang.String,int)>"
"<java.time.Period: java.time.chrono.IsoChronology getChronology()>","<java.time.Period: java.time.chrono.IsoChronology getChronology()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>"
"<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()>","<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()>"
"<android.app.Activity: void closeContextMenu()>","<android.app.Activity: void closeContextMenu()>"
"<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>","<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>"
"<android.content.ComponentName: android.content.ComponentName createRelative(android.content.Context,java.lang.String)>","<android.content.ComponentName: android.content.ComponentName createRelative(android.content.Context,java.lang.String)>"
"<java.util.Arrays: int hashCode(int[])>","<java.util.Arrays: int hashCode(int[])>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream filter(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream filter(java.util.function.DoublePredicate)>"
"<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)>","<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)>"
"<java.time.LocalDate: java.time.LocalDate withYear(int)>","<java.time.LocalDate: java.time.LocalDate withYear(int)>"
"<android.graphics.Rect: void set(int,int,int,int)>","<android.graphics.Rect: void set(int,int,int,int)>"
"<android.content.res.AssetManager: void <init>()>","<android.content.res.AssetManager: void <init>()>"
"<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>","<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>"
"<java.lang.Character: int codePointAt(char[],int)>","<java.lang.Character: int codePointAt(char[],int)>"
"<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>","<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>"
"<java.lang.Long: byte byteValue()>","<java.lang.Long: byte byteValue()>"
"<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>","<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>"
"<android.view.accessibility.AccessibilityEvent: long getEventTime()>","<android.view.accessibility.AccessibilityEvent: long getEventTime()>"
"<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>","<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>"
"<java.time.temporal.ValueRange: long getMinimum()>","<java.time.temporal.ValueRange: long getMinimum()>"
"<android.database.Cursor: float getFloat(int)>","<android.database.Cursor: float getFloat(int)>"
"<java.lang.Character: boolean isIdeographic(int)>","<java.lang.Character: boolean isIdeographic(int)>"
"<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)>","<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)>"
"<android.text.Selection: boolean extendToRightEdge(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean extendToRightEdge(android.text.Spannable,android.text.Layout)>"
"<android.graphics.Canvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.lang.Class: java.net.URL getResource(java.lang.String)>","<java.lang.Class: java.net.URL getResource(java.lang.String)>"
"<java.util.SortedMap: java.util.Set keySet()>","<java.util.SortedMap: java.util.Set keySet()>"
"<android.content.res.Resources$Theme: java.lang.String toString()>","<android.content.res.Resources$Theme: java.lang.String toString()>"
"<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>","<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>"
"<android.view.View: void setFocusedByDefault(boolean)>","<android.view.View: void setFocusedByDefault(boolean)>"
"<java.net.Socket: void shutdownInput()>","<java.net.Socket: void shutdownInput()>"
"<io.flutter.plugins.webviewflutter.e1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.e1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.content.Intent: boolean hasFileDescriptors()>","<android.content.Intent: boolean hasFileDescriptors()>"
"<android.widget.TextView: void setCompoundDrawablePadding(int)>","<android.widget.TextView: void setCompoundDrawablePadding(int)>"
"<java.time.Period: java.time.chrono.Chronology getChronology()>","<java.time.Period: java.time.chrono.Chronology getChronology()>"
"<android.view.View: void setForegroundGravity(int)>","<android.view.View: void setForegroundGravity(int)>"
"<android.graphics.Path: void rewind()>","<android.graphics.Path: void rewind()>"
"<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.ListPopupWindow: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.Activity: void setRequestedOrientation(int)>","<android.app.Activity: void setRequestedOrientation(int)>"
"<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>"
"<android.graphics.ImageDecoder: boolean isMimeTypeSupported(java.lang.String)>","<android.graphics.ImageDecoder: boolean isMimeTypeSupported(java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>"
"<android.view.DragEvent: android.content.ClipDescription getClipDescription()>","<android.view.DragEvent: android.content.ClipDescription getClipDescription()>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>","<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>"
"<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)>","<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)>"
"<java.lang.Integer: void <init>(java.lang.String)>","<java.lang.Integer: void <init>(java.lang.String)>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.app.PictureInPictureUiState: void writeToParcel(android.os.Parcel,int)>","<android.app.PictureInPictureUiState: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<java.lang.Long: double doubleValue()>","<java.lang.Long: double doubleValue()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
"<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>","<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>"
"<java.lang.Number: long longValue()>","<java.lang.Number: long longValue()>"
"<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>","<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>"
"<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>","<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>"
"<android.webkit.WebSettings$PluginState: void <clinit>()>","<android.webkit.WebSettings$PluginState: void <clinit>()>"
"<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)>","<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValueOf(java.lang.String)>"
"<android.app.Notification$WearableExtender: int getHintScreenTimeout()>","<android.app.Notification$WearableExtender: int getHintScreenTimeout()>"
"<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asPortrait()>","<android.print.PrintAttributes$MediaSize: android.print.PrintAttributes$MediaSize asPortrait()>"
"<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>","<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>"
"<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<java.time.OffsetDateTime: int hashCode()>","<java.time.OffsetDateTime: int hashCode()>"
"<android.widget.Adapter: int getItemViewType(int)>","<android.widget.Adapter: int getItemViewType(int)>"
"<android.app.Notification$BubbleMetadata: int describeContents()>","<android.app.Notification$BubbleMetadata: int describeContents()>"
"<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>","<java.util.concurrent.LinkedBlockingQueue: boolean contains(java.lang.Object)>"
"<android.graphics.fonts.FontStyle: int getSlant()>","<android.graphics.fonts.FontStyle: int getSlant()>"
"<java.util.ArrayDeque: void push(java.lang.Object)>","<java.util.ArrayDeque: void push(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>"
"<java.net.URLConnection: void setConnectTimeout(int)>","<java.net.URLConnection: void setConnectTimeout(int)>"
"<android.view.KeyEvent: void setSource(int)>","<android.view.KeyEvent: void setSource(int)>"
"<java.io.File: java.nio.file.Path toPath()>","<java.io.File: java.nio.file.Path toPath()>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean contains(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean contains(java.lang.Object)>"
"<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>","<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>"
"<android.app.Notification$WearableExtender: java.util.List getPages()>","<android.app.Notification$WearableExtender: java.util.List getPages()>"
"<android.view.View: boolean performHapticFeedback(int,int)>","<android.view.View: boolean performHapticFeedback(int,int)>"
"<java.util.concurrent.AbstractExecutorService: java.lang.Object invokeAny(java.util.Collection)>","<java.util.concurrent.AbstractExecutorService: java.lang.Object invokeAny(java.util.Collection)>"
"<java.lang.Float: boolean isNaN()>","<java.lang.Float: boolean isNaN()>"
"<java.util.AbstractCollection: boolean remove(java.lang.Object)>","<java.util.AbstractCollection: boolean remove(java.lang.Object)>"
"<android.view.autofill.AutofillValue: int describeContents()>","<android.view.autofill.AutofillValue: int describeContents()>"
"<android.os.VibrationEffect: int describeContents()>","<android.os.VibrationEffect: int describeContents()>"
"<java.nio.IntBuffer: java.nio.IntBuffer slice()>","<java.nio.IntBuffer: java.nio.IntBuffer slice()>"
"<android.view.View: boolean isHapticFeedbackEnabled()>","<android.view.View: boolean isHapticFeedbackEnabled()>"
"<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>","<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>"
"<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>","<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>"
"<android.app.Dialog: void setCancelable(boolean)>","<android.app.Dialog: void setCancelable(boolean)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectLeft(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectLeft(android.graphics.Rect)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean weakCompareAndSet(java.lang.Object,int,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean weakCompareAndSet(java.lang.Object,int,int)>"
"<java.util.Deque: void push(java.lang.Object)>","<java.util.Deque: void push(java.lang.Object)>"
"<android.transition.Transition: android.transition.TransitionPropagation getPropagation()>","<android.transition.Transition: android.transition.TransitionPropagation getPropagation()>"
"<java.time.format.ResolverStyle: void <init>(java.lang.String,int)>","<java.time.format.ResolverStyle: void <init>(java.lang.String,int)>"
"<android.view.InputEvent: boolean isFromSource(int)>","<android.view.InputEvent: boolean isFromSource(int)>"
"<java.lang.Double: byte byteValue()>","<java.lang.Double: byte byteValue()>"
"<java.nio.channels.SelectableChannel: int validOps()>","<java.nio.channels.SelectableChannel: int validOps()>"
"<android.app.ActionBar: void setCustomView(int)>","<android.app.ActionBar: void setCustomView(int)>"
"<android.view.ActionMode: void finish()>","<android.view.ActionMode: void finish()>"
"<android.content.SyncAdapterType: boolean allowParallelSyncs()>","<android.content.SyncAdapterType: boolean allowParallelSyncs()>"
"<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()>","<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()>"
"<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.SyncAdapterType: void <init>(android.os.Parcel)>","<android.content.SyncAdapterType: void <init>(android.os.Parcel)>"
"<android.database.sqlite.SQLiteClosable: void close()>","<android.database.sqlite.SQLiteClosable: void close()>"
"<android.media.MediaMetadata: int describeContents()>","<android.media.MediaMetadata: int describeContents()>"
"<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>","<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>"
"<android.hardware.display.DeviceProductInfo: void <clinit>()>","<android.hardware.display.DeviceProductInfo: void <clinit>()>"
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.view.View: boolean isInEditMode()>","<android.view.View: boolean isInEditMode()>"
"<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>"
"<android.hardware.display.VirtualDisplay: void release()>","<android.hardware.display.VirtualDisplay: void release()>"
"<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>","<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>"
"<java.lang.Thread$State: java.lang.Thread$State[] values()>","<java.lang.Thread$State: java.lang.Thread$State[] values()>"
"<java.io.DataOutput: void writeChar(int)>","<java.io.DataOutput: void writeChar(int)>"
"<android.view.View: boolean startNestedScroll(int)>","<android.view.View: boolean startNestedScroll(int)>"
"<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>"
"<android.print.PrintDocumentInfo: long getDataSize()>","<android.print.PrintDocumentInfo: long getDataSize()>"
"<java.lang.String: char charAt(int)>","<java.lang.String: char charAt(int)>"
"<android.text.SpannableStringBuilder: char charAt(int)>","<android.text.SpannableStringBuilder: char charAt(int)>"
"<android.view.InputDevice$MotionRange: int getSource()>","<android.view.InputDevice$MotionRange: int getSource()>"
"<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>","<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>"
"<android.media.session.MediaController: java.lang.String getPackageName()>","<android.media.session.MediaController: java.lang.String getPackageName()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getSynonymAt(int)>","<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getSynonymAt(int)>"
"<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>","<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>"
"<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>","<java.io.ObjectOutputStream: java.lang.Object replaceObject(java.lang.Object)>"
"<java.net.SocketImpl: java.lang.Object getOption(java.net.SocketOption)>","<java.net.SocketImpl: java.lang.Object getOption(java.net.SocketOption)>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>","<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>"
"<android.webkit.WebView: void loadUrl(java.lang.String)>","<android.webkit.WebView: void loadUrl(java.lang.String)>"
"<java.util.List: void add(int,java.lang.Object)>","<java.util.List: void add(int,java.lang.Object)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<java.io.ObjectInputStream: boolean readBoolean()>","<java.io.ObjectInputStream: boolean readBoolean()>"
"<android.text.SpannableString: int getSpanFlags(java.lang.Object)>","<android.text.SpannableString: int getSpanFlags(java.lang.Object)>"
"<android.widget.RemoteViews: int getViewId()>","<android.widget.RemoteViews: int getViewId()>"
"<android.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()>","<android.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()>"
"<android.content.ComponentName: java.lang.String getShortClassName()>","<android.content.ComponentName: java.lang.String getShortClassName()>"
"<android.view.textclassifier.TextClassification$Request: int getStartIndex()>","<android.view.textclassifier.TextClassification$Request: int getStartIndex()>"
"<java.util.regex.Matcher: java.util.regex.Pattern pattern()>","<java.util.regex.Matcher: java.util.regex.Pattern pattern()>"
"<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<java.net.DatagramPacket: java.net.InetAddress getAddress()>","<java.net.DatagramPacket: java.net.InetAddress getAddress()>"
"<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastAccessTime(java.nio.file.attribute.FileTime)>","<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastAccessTime(java.nio.file.attribute.FileTime)>"
"<android.app.Person$Builder: android.app.Person$Builder setImportant(boolean)>","<android.app.Person$Builder: android.app.Person$Builder setImportant(boolean)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>"
"<java.util.SortedMap: java.util.SortedMap headMap(java.lang.Object)>","<java.util.SortedMap: java.util.SortedMap headMap(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.p1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.p1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.view.textclassifier.SelectionEvent: int getSmartEnd()>","<android.view.textclassifier.SelectionEvent: int getSmartEnd()>"
"<android.widget.Toolbar$LayoutParams: void <init>(int,int,int)>","<android.widget.Toolbar$LayoutParams: void <init>(int,int,int)>"
"<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingText(int,int)>","<android.view.inputmethod.BaseInputConnection: boolean deleteSurroundingText(int,int)>"
"<android.graphics.Path: void rQuadTo(float,float,float,float)>","<android.graphics.Path: void rQuadTo(float,float,float,float)>"
"<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>","<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>"
"<java.io.ByteArrayInputStream: long transferTo(java.io.OutputStream)>","<java.io.ByteArrayInputStream: long transferTo(java.io.OutputStream)>"
"<android.view.autofill.AutofillId: int hashCode()>","<android.view.autofill.AutofillId: int hashCode()>"
"<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>","<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>"
"<android.graphics.Path: void incReserve(int)>","<android.graphics.Path: void incReserve(int)>"
"<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)>","<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>"
"<android.text.SpannableStringBuilder: java.lang.Appendable append(char)>","<android.text.SpannableStringBuilder: java.lang.Appendable append(char)>"
"<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.PorterDuff$Mode)>","<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.PorterDuff$Mode)>"
"<java.lang.String: java.util.stream.IntStream chars()>","<java.lang.String: java.util.stream.IntStream chars()>"
"<io.flutter.embedding.android.q: void a(java.nio.ByteBuffer)>","<io.flutter.embedding.android.q: void a(java.nio.ByteBuffer)>"
"<android.media.Session2Token: java.lang.String toString()>","<android.media.Session2Token: java.lang.String toString()>"
"<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>"
"<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>","<android.text.format.DateFormat: boolean is24HourFormat(android.content.Context)>"
"<android.view.ViewStructure: void setActivated(boolean)>","<android.view.ViewStructure: void setActivated(boolean)>"
"<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>","<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>"
"<android.app.Fragment: boolean isStateSaved()>","<android.app.Fragment: boolean isStateSaved()>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender clone()>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender clone()>"
"<java.lang.Thread: void stop()>","<java.lang.Thread: void stop()>"
"<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>","<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>"
"<java.util.Date: int getTimezoneOffset()>","<java.util.Date: int getTimezoneOffset()>"
"<android.os.Parcel: void writeParcelableList(java.util.List,int)>","<android.os.Parcel: void writeParcelableList(java.util.List,int)>"
"<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>","<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>"
"<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>","<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>"
"<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>","<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>","<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadLockCount()>"
"<android.webkit.WebView: void stopLoading()>","<android.webkit.WebView: void stopLoading()>"
"<android.view.ViewGroup: void onViewAdded(android.view.View)>","<android.view.ViewGroup: void onViewAdded(android.view.View)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndSet(java.lang.Object,int)>"
"<java.lang.Math: double sqrt(double)>","<java.lang.Math: double sqrt(double)>"
"<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>","<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>"
"<android.os.Looper: android.os.Looper getMainLooper()>","<android.os.Looper: android.os.Looper getMainLooper()>"
"<android.util.LongSparseArray: java.lang.String toString()>","<android.util.LongSparseArray: java.lang.String toString()>"
"<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()>","<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()>"
"<java.lang.Package: java.lang.String getImplementationVendor()>","<java.lang.Package: java.lang.String getImplementationVendor()>"
"<android.graphics.Outline: void setRect(android.graphics.Rect)>","<android.graphics.Outline: void setRect(android.graphics.Rect)>"
"<java.net.InetAddress: boolean isSiteLocalAddress()>","<java.net.InetAddress: boolean isSiteLocalAddress()>"
"<org.xmlpull.v1.XmlSerializer: void endDocument()>","<org.xmlpull.v1.XmlSerializer: void endDocument()>"
"<java.util.Properties: void <init>()>","<java.util.Properties: void <init>()>"
"<java.util.stream.DoubleStream: java.util.Iterator iterator()>","<java.util.stream.DoubleStream: java.util.Iterator iterator()>"
"<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>","<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>"
"<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>","<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>"
"<io.flutter.plugins.webviewflutter.f0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.f0: void a(java.lang.Object,y.a$e)>"
"<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)>","<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)>"
"<android.view.textclassifier.SelectionEvent: int hashCode()>","<android.view.textclassifier.SelectionEvent: int hashCode()>"
"<android.view.WindowInsetsAnimation$Bounds: android.view.WindowInsetsAnimation$Bounds inset(android.graphics.Insets)>","<android.view.WindowInsetsAnimation$Bounds: android.view.WindowInsetsAnimation$Bounds inset(android.graphics.Insets)>"
"<java.util.ArrayList: int size()>","<java.util.ArrayList: int size()>"
"<android.view.textclassifier.TextSelection$Request: int getStartIndex()>","<android.view.textclassifier.TextSelection$Request: int getStartIndex()>"
"<java.lang.String: java.lang.String valueOf(java.lang.Object)>","<java.lang.String: java.lang.String valueOf(java.lang.Object)>"
"<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)>","<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)>"
"<java.io.OutputStream: void write(byte[])>","<java.io.OutputStream: void write(byte[])>"
"<android.view.textclassifier.TextLinks$TextLinkSpan: android.view.textclassifier.TextLinks$TextLink getTextLink()>","<android.view.textclassifier.TextLinks$TextLinkSpan: android.view.textclassifier.TextLinks$TextLink getTextLink()>"
"<android.view.View: void onViewTranslationResponse(android.view.translation.ViewTranslationResponse)>","<android.view.View: void onViewTranslationResponse(android.view.translation.ViewTranslationResponse)>"
"<android.net.Uri: java.lang.String getLastPathSegment()>","<android.net.Uri: java.lang.String getLastPathSegment()>"
"<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setWeekday(int)>","<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setWeekday(int)>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: void <init>(int)>"
"<android.database.sqlite.SQLiteProgram: void <init>()>","<android.database.sqlite.SQLiteProgram: void <init>()>"
"<android.text.Selection: void setSelection(android.text.Spannable,int,int)>","<android.text.Selection: void setSelection(android.text.Spannable,int,int)>"
"<android.hardware.lights.LightsManager$LightsSession: void close()>","<android.hardware.lights.LightsManager$LightsSession: void close()>"
"<android.content.Context: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.Context: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<android.os.MemoryFile: int length()>","<android.os.MemoryFile: int length()>"
"<android.content.AttributionSource$Builder: void <init>(android.content.AttributionSource)>","<android.content.AttributionSource$Builder: void <init>(android.content.AttributionSource)>"
"<java.net.Socket: boolean isOutputShutdown()>","<java.net.Socket: boolean isOutputShutdown()>"
"<java.io.DataOutput: void write(byte[])>","<java.io.DataOutput: void write(byte[])>"
"<java.lang.reflect.Field: java.lang.String toGenericString()>","<java.lang.reflect.Field: java.lang.String toGenericString()>"
"<android.content.Context: android.content.ContextParams getParams()>","<android.content.Context: android.content.ContextParams getParams()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndUpdate(int,java.util.function.UnaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndUpdate(int,java.util.function.UnaryOperator)>"
"<java.lang.Math: int floorDiv(int,int)>","<java.lang.Math: int floorDiv(int,int)>"
"<android.view.inputmethod.EditorBoundsInfo: void <clinit>()>","<android.view.inputmethod.EditorBoundsInfo: void <clinit>()>"
"<android.app.Dialog: void onWindowFocusChanged(boolean)>","<android.app.Dialog: void onWindowFocusChanged(boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View)>"
"<android.view.KeyEvent$Callback: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityWindowInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityWindowInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.regex.Matcher: int regionEnd()>","<java.util.regex.Matcher: int regionEnd()>"
"<android.widget.TextView: int getLeftPaddingOffset()>","<android.widget.TextView: int getLeftPaddingOffset()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.Condition newCondition()>"
"<android.view.ViewGroup$MarginLayoutParams: void setMarginStart(int)>","<android.view.ViewGroup$MarginLayoutParams: void setMarginStart(int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>"
"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"
"<android.view.KeyCharacterMap: int getDeadChar(int,int)>","<android.view.KeyCharacterMap: int getDeadChar(int,int)>"
"<android.graphics.RenderNode: float getCameraDistance()>","<android.graphics.RenderNode: float getCameraDistance()>"
"<android.view.textclassifier.TextLinks$TextLink: float getConfidenceScore(java.lang.String)>","<android.view.textclassifier.TextLinks$TextLink: float getConfidenceScore(java.lang.String)>"
"<android.view.View: void setStateDescription(java.lang.CharSequence)>","<android.view.View: void setStateDescription(java.lang.CharSequence)>"
"<java.nio.channels.SelectionKey: java.lang.Object attachment()>","<java.nio.channels.SelectionKey: java.lang.Object attachment()>"
"<android.view.Window: android.view.LayoutInflater getLayoutInflater()>","<android.view.Window: android.view.LayoutInflater getLayoutInflater()>"
"<android.os.Looper: void loop()>","<android.os.Looper: void loop()>"
"<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>","<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>","<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>"
"<android.webkit.WebView: void onDraw(android.graphics.Canvas)>","<android.webkit.WebView: void onDraw(android.graphics.Canvas)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>","<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>"
"<java.io.BufferedReader: int read()>","<java.io.BufferedReader: int read()>"
"<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)>"
"<android.content.ComponentName: int compareTo(java.lang.Object)>","<android.content.ComponentName: int compareTo(java.lang.Object)>"
"<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>","<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>"
"<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)>","<android.webkit.WebView: void setWebChromeClient(android.webkit.WebChromeClient)>"
"<android.app.LoaderManager$LoaderCallbacks: android.content.Loader onCreateLoader(int,android.os.Bundle)>","<android.app.LoaderManager$LoaderCallbacks: android.content.Loader onCreateLoader(int,android.os.Bundle)>"
"<android.animation.ValueAnimator: void setFrameDelay(long)>","<android.animation.ValueAnimator: void setFrameDelay(long)>"
"<android.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)>","<android.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)>"
"<android.view.View: int getExplicitStyle()>","<android.view.View: int getExplicitStyle()>"
"<java.util.Locale: java.lang.String getLanguage()>","<java.util.Locale: java.lang.String getLanguage()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(long)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(long)>"
"<java.util.concurrent.locks.Lock: void unlock()>","<java.util.concurrent.locks.Lock: void unlock()>"
"<android.widget.TextView: void endBatchEdit()>","<android.widget.TextView: void endBatchEdit()>"
"<java.util.stream.LongStream: java.util.stream.DoubleStream asDoubleStream()>","<java.util.stream.LongStream: java.util.stream.DoubleStream asDoubleStream()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>"
"<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>","<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>"
"<io.flutter.plugins.webviewflutter.x: void <init>(io.flutter.plugins.webviewflutter.k$l)>","<io.flutter.plugins.webviewflutter.x: void <init>(io.flutter.plugins.webviewflutter.k$l)>"
"<android.view.KeyEvent: boolean isMediaSessionKey(int)>","<android.view.KeyEvent: boolean isMediaSessionKey(int)>"
"<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>","<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>","<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>"
"<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)>","<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)>"
"<java.util.Arrays: void fill(short[],int,int,short)>","<java.util.Arrays: void fill(short[],int,int,short)>"
"<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>","<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>"
"<android.graphics.drawable.ColorDrawable: void applyTheme(android.content.res.Resources$Theme)>","<android.graphics.drawable.ColorDrawable: void applyTheme(android.content.res.Resources$Theme)>"
"<android.view.View: int getScrollCaptureHint()>","<android.view.View: int getScrollCaptureHint()>"
"<android.content.ContextWrapper: java.lang.String[] databaseList()>","<android.content.ContextWrapper: java.lang.String[] databaseList()>"
"<android.os.Debug: int getThreadAllocCount()>","<android.os.Debug: int getThreadAllocCount()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetRelease(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetRelease(int,java.lang.Object,java.lang.Object)>"
"<java.nio.file.WatchService: java.nio.file.WatchKey poll()>","<java.nio.file.WatchService: java.nio.file.WatchKey poll()>"
"<io.flutter.plugins.webviewflutter.x1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.x1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.util.stream.Stream: java.util.Optional min(java.util.Comparator)>","<java.util.stream.Stream: java.util.Optional min(java.util.Comparator)>"
"<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>","<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>"
"<android.app.Activity: boolean hasWindowFocus()>","<android.app.Activity: boolean hasWindowFocus()>"
"<android.view.View: boolean performContextClick()>","<android.view.View: boolean performContextClick()>"
"<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()>","<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()>"
"<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>","<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>"
"<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>","<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>"
"<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)>","<android.text.format.DateFormat: java.lang.CharSequence format(java.lang.CharSequence,java.util.Date)>"
"<android.webkit.WebView: android.webkit.WebMessagePort[] createWebMessageChannel()>","<android.webkit.WebView: android.webkit.WebMessagePort[] createWebMessageChannel()>"
"<android.media.session.MediaSession: void setSessionActivity(android.app.PendingIntent)>","<android.media.session.MediaSession: void setSessionActivity(android.app.PendingIntent)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnTitle(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnTitle(java.lang.String)>"
"<java.lang.Math: double ulp(double)>","<java.lang.Math: double ulp(double)>"
"<android.app.RemoteInput: java.util.Set getAllowedDataTypes()>","<android.app.RemoteInput: java.util.Set getAllowedDataTypes()>"
"<android.app.ActionBar: void setSelectedNavigationItem(int)>","<android.app.ActionBar: void setSelectedNavigationItem(int)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder setExtras(android.os.Bundle)>"
"<java.util.Calendar: int getActualMinimum(int)>","<java.util.Calendar: int getActualMinimum(int)>"
"<android.content.pm.PackageManager: java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>","<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>"
"<android.app.Notification$MessagingStyle: java.lang.CharSequence getConversationTitle()>","<android.app.Notification$MessagingStyle: java.lang.CharSequence getConversationTitle()>"
"<android.app.Activity: void onMultiWindowModeChanged(boolean)>","<android.app.Activity: void onMultiWindowModeChanged(boolean)>"
"<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>","<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>"
"<android.graphics.Canvas: void restoreToCount(int)>","<android.graphics.Canvas: void restoreToCount(int)>"
"<android.graphics.RecordingCanvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>"
"<android.graphics.fonts.Font: float getGlyphBounds(int,android.graphics.Paint,android.graphics.RectF)>","<android.graphics.fonts.Font: float getGlyphBounds(int,android.graphics.Paint,android.graphics.RectF)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
"<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>","<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>"
"<android.graphics.Path: boolean isEmpty()>","<android.graphics.Path: boolean isEmpty()>"
"<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>"
"<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>","<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>"
"<java.util.ArrayDeque: boolean offerFirst(java.lang.Object)>","<java.util.ArrayDeque: boolean offerFirst(java.lang.Object)>"
"<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>","<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>"
"<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>","<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>"
"<java.util.ArrayList: void removeRange(int,int)>","<java.util.ArrayList: void removeRange(int,int)>"
"<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>","<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>"
"<java.net.UnknownHostException: void <init>(java.lang.String)>","<java.net.UnknownHostException: void <init>(java.lang.String)>"
"<android.os.ParcelFileDescriptor: void finalize()>","<android.os.ParcelFileDescriptor: void finalize()>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>","<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>"
"<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>","<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>"
"<android.view.textclassifier.TextLinks: void <clinit>()>","<android.view.textclassifier.TextLinks: void <clinit>()>"
"<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>","<android.view.inputmethod.BaseInputConnection: boolean setSelection(int,int)>"
"<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>","<javax.security.auth.x500.X500Principal: void <init>(java.lang.String,java.util.Map)>"
"<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)>","<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long)>"
"<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[],int,int)>","<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[],int,int)>"
"<android.webkit.WebView: void documentHasImages(android.os.Message)>","<android.webkit.WebView: void documentHasImages(android.os.Message)>"
"<android.view.TextureView: int getLayerType()>","<android.view.TextureView: int getLayerType()>"
"<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>","<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>"
"<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>","<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>"
"<android.widget.ListView: void onSizeChanged(int,int,int,int)>","<android.widget.ListView: void onSizeChanged(int,int,int,int)>"
"<java.math.BigInteger: boolean isProbablePrime(int)>","<java.math.BigInteger: boolean isProbablePrime(int)>"
"<java.time.Period: java.time.Period ofYears(int)>","<java.time.Period: java.time.Period ofYears(int)>"
"<java.util.OptionalLong: void ifPresentOrElse(java.util.function.LongConsumer,java.lang.Runnable)>","<java.util.OptionalLong: void ifPresentOrElse(java.util.function.LongConsumer,java.lang.Runnable)>"
"<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>","<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>"
"<android.webkit.WebViewRenderProcess: boolean terminate()>","<android.webkit.WebViewRenderProcess: boolean terminate()>"
"<android.graphics.RectF: boolean intersects(float,float,float,float)>","<android.graphics.RectF: boolean intersects(float,float,float,float)>"
"<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()>","<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()>"
"<android.view.WindowInsets$Type: int captionBar()>","<android.view.WindowInsets$Type: int captionBar()>"
"<android.widget.Toolbar: void setSubtitle(java.lang.CharSequence)>","<android.widget.Toolbar: void setSubtitle(java.lang.CharSequence)>"
"<java.util.UUID: long getLeastSignificantBits()>","<java.util.UUID: long getLeastSignificantBits()>"
"<java.util.stream.LongStream: java.util.OptionalLong max()>","<java.util.stream.LongStream: java.util.OptionalLong max()>"
"<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String)>","<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity valueOf(java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>"
"<java.nio.channels.Pipe: java.nio.channels.Pipe open()>","<java.nio.channels.Pipe: java.nio.channels.Pipe open()>"
"<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>"
"<android.content.res.Resources: int getInteger(int)>","<android.content.res.Resources: int getInteger(int)>"
"<java.util.Arrays: int binarySearch(int[],int)>","<java.util.Arrays: int binarySearch(int[],int)>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)>"
"<java.util.stream.Stream: java.util.stream.Stream limit(long)>","<java.util.stream.Stream: java.util.stream.Stream limit(long)>"
"<android.database.sqlite.SQLiteClosable: void releaseReference()>","<android.database.sqlite.SQLiteClosable: void releaseReference()>"
"<java.security.Permission: void <init>(java.lang.String)>","<java.security.Permission: void <init>(java.lang.String)>"
"<android.view.MotionEvent: long getDownTime()>","<android.view.MotionEvent: long getDownTime()>"
"<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.lang.String: java.lang.String valueOf(char[])>","<java.lang.String: java.lang.String valueOf(char[])>"
"<android.view.Window: boolean isActive()>","<android.view.Window: boolean isActive()>"
"<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>","<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>"
"<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>","<android.view.accessibility.AccessibilityManager: void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)>"
"<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)>","<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)>"
"<java.util.Arrays: java.lang.String toString(float[])>","<java.util.Arrays: java.lang.String toString(float[])>"
"<android.view.ContentInfo$Builder: void <init>(android.view.ContentInfo)>","<android.view.ContentInfo$Builder: void <init>(android.view.ContentInfo)>"
"<java.lang.InternalError: void <init>(java.lang.Throwable)>","<java.lang.InternalError: void <init>(java.lang.Throwable)>"
"<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes)>","<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes)>"
"<android.widget.ImageView: void setImageURI(android.net.Uri)>","<android.widget.ImageView: void setImageURI(android.net.Uri)>"
"<android.widget.ImageView: void setSelected(boolean)>","<android.widget.ImageView: void setSelected(boolean)>"
"<android.app.Notification: android.content.LocusId getLocusId()>","<android.app.Notification: android.content.LocusId getLocusId()>"
"<android.util.SparseArray: void <init>()>","<android.util.SparseArray: void <init>()>"
"<java.util.concurrent.ThreadPoolExecutor: boolean allowsCoreThreadTimeOut()>","<java.util.concurrent.ThreadPoolExecutor: boolean allowsCoreThreadTimeOut()>"
"<android.icu.util.ULocale: java.lang.String toUnicodeLocaleType(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String toUnicodeLocaleType(java.lang.String,java.lang.String)>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String toString()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String toString()>"
"<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>","<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setVisibility(android.view.SurfaceControl,boolean)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setVisibility(android.view.SurfaceControl,boolean)>"
"<java.util.Arrays: void fill(byte[],byte)>","<java.util.Arrays: void fill(byte[],byte)>"
"<android.webkit.WebSettings: boolean isAlgorithmicDarkeningAllowed()>","<android.webkit.WebSettings: boolean isAlgorithmicDarkeningAllowed()>"
"<java.nio.channels.SelectableChannel: void <init>()>","<java.nio.channels.SelectableChannel: void <init>()>"
"<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>","<java.text.DateFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>"
"<java.io.ByteArrayInputStream: int read()>","<java.io.ByteArrayInputStream: int read()>"
"<java.security.cert.X509Extension: boolean hasUnsupportedCriticalExtension()>","<java.security.cert.X509Extension: boolean hasUnsupportedCriticalExtension()>"
"<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>"
"<java.time.format.DateTimeFormatter: java.text.Format toFormat(java.time.temporal.TemporalQuery)>","<java.time.format.DateTimeFormatter: java.text.Format toFormat(java.time.temporal.TemporalQuery)>"
"<java.security.Provider: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<android.app.Fragment: boolean isInLayout()>","<android.app.Fragment: boolean isInLayout()>"
"<android.os.Looper: void dump(android.util.Printer,java.lang.String)>","<android.os.Looper: void dump(android.util.Printer,java.lang.String)>"
"<android.widget.ImageView: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.widget.ImageView: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification$Request)>"
"<android.view.inputmethod.SurroundingText: int getSelectionEnd()>","<android.view.inputmethod.SurroundingText: int getSelectionEnd()>"
"<java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>","<java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>"
"<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>","<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>"
"<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()>","<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()>"
"<android.view.ViewStructure: android.view.ViewStructure newChild(int)>","<android.view.ViewStructure: android.view.ViewStructure newChild(int)>"
"<java.net.DatagramSocket: void setBroadcast(boolean)>","<java.net.DatagramSocket: void setBroadcast(boolean)>"
"<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<java.util.stream.IntStream: long count()>","<java.util.stream.IntStream: long count()>"
"<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>","<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>"
"<android.os.Looper: java.lang.Thread getThread()>","<android.os.Looper: java.lang.Thread getThread()>"
"<java.net.DatagramSocketImpl: int getTimeToLive()>","<java.net.DatagramSocketImpl: int getTimeToLive()>"
"<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority[] values()>","<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority[] values()>"
"<android.view.InputDevice: int[] getDeviceIds()>","<android.view.InputDevice: int[] getDeviceIds()>"
"<android.view.MotionEvent: float getAxisValue(int,int)>","<android.view.MotionEvent: float getAxisValue(int,int)>"
"<android.widget.AbsListView$MultiChoiceModeListener: void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)>","<android.widget.AbsListView$MultiChoiceModeListener: void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)>"
"<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>","<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>"
"<android.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>","<android.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>"
"<android.webkit.WebView: android.webkit.WebViewClient getWebViewClient()>","<android.webkit.WebView: android.webkit.WebViewClient getWebViewClient()>"
"<android.graphics.fonts.FontFamily: int getSize()>","<android.graphics.fonts.FontFamily: int getSize()>"
"<java.time.ZoneId: java.time.ZoneId of(java.lang.String)>","<java.time.ZoneId: java.time.ZoneId of(java.lang.String)>"
"<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>","<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>"
"<android.util.SparseBooleanArray: java.lang.Object clone()>","<android.util.SparseBooleanArray: java.lang.Object clone()>"
"<android.webkit.ConsoleMessage: int lineNumber()>","<android.webkit.ConsoleMessage: int lineNumber()>"
"<android.widget.TextView: int getFirstBaselineToTopHeight()>","<android.widget.TextView: int getFirstBaselineToTopHeight()>"
"<org.json.JSONObject: java.lang.String toString()>","<org.json.JSONObject: java.lang.String toString()>"
"<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.webkit.WebSettings: boolean getBlockNetworkLoads()>","<android.webkit.WebSettings: boolean getBlockNetworkLoads()>"
"<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>","<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>"
"<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>","<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>"
"<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>"
"<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>"
"<android.util.SparseIntArray: void put(int,int)>","<android.util.SparseIntArray: void put(int,int)>"
"<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>","<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>"
"<android.widget.Scroller: float getCurrVelocity()>","<android.widget.Scroller: float getCurrVelocity()>"
"<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setViewTypeCount(int)>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setViewTypeCount(int)>"
"<java.util.jar.JarFile: java.util.stream.Stream stream()>","<java.util.jar.JarFile: java.util.stream.Stream stream()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>"
"<android.app.Activity: void finishActivity(int)>","<android.app.Activity: void finishActivity(int)>"
"<java.lang.Math: double min(double,double)>","<java.lang.Math: double min(double,double)>"
"<android.text.Layout: int getEllipsisCount(int)>","<android.text.Layout: int getEllipsisCount(int)>"
"<java.lang.Float: java.lang.String toString()>","<java.lang.Float: java.lang.String toString()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>","<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>"
"<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<android.app.AlertDialog: boolean onKeyUp(int,android.view.KeyEvent)>","<android.app.AlertDialog: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.time.temporal.TemporalAmount: java.util.List getUnits()>","<java.time.temporal.TemporalAmount: java.util.List getUnits()>"
"<java.util.stream.IntStream: boolean allMatch(java.util.function.IntPredicate)>","<java.util.stream.IntStream: boolean allMatch(java.util.function.IntPredicate)>"
"<java.security.Provider$Service: java.lang.String getClassName()>","<java.security.Provider$Service: java.lang.String getClassName()>"
"<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>","<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>"
"<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()>","<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()>"
"<java.net.Socket: void setReuseAddress(boolean)>","<java.net.Socket: void setReuseAddress(boolean)>"
"<android.view.View: void setWillNotCacheDrawing(boolean)>","<android.view.View: void setWillNotCacheDrawing(boolean)>"
"<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>","<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>"
"<android.widget.AdapterView: int getFirstVisiblePosition()>","<android.widget.AdapterView: int getFirstVisiblePosition()>"
"<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>","<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>"
"<android.util.SparseArray: void removeAtRange(int,int)>","<android.util.SparseArray: void removeAtRange(int,int)>"
"<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>"
"<java.nio.LongBuffer: java.nio.Buffer flip()>","<java.nio.LongBuffer: java.nio.Buffer flip()>"
"<java.net.URI: java.lang.String getRawQuery()>","<java.net.URI: java.lang.String getRawQuery()>"
"<java.io.File: boolean createNewFile()>","<java.io.File: boolean createNewFile()>"
"<java.util.function.DoublePredicate: boolean test(double)>","<java.util.function.DoublePredicate: boolean test(double)>"
"<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>","<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>"
"<java.io.ObjectInputStream: java.lang.String readUTF()>","<java.io.ObjectInputStream: java.lang.String readUTF()>"
"<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>","<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>"
"<android.app.RemoteAction: void setShouldShowIcon(boolean)>","<android.app.RemoteAction: void setShouldShowIcon(boolean)>"
"<android.app.TaskStackBuilder: void startActivities()>","<android.app.TaskStackBuilder: void startActivities()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>"
"<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int[],int)>","<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int[],int)>"
"<io.flutter.plugins.webviewflutter.m0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.m0: void a(java.lang.Object,y.a$e)>"
"<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>","<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>"
"<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>","<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>","<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>"
"<java.nio.CharBuffer: java.nio.ByteOrder order()>","<java.nio.CharBuffer: java.nio.ByteOrder order()>"
"<java.util.UUID: long timestamp()>","<java.util.UUID: long timestamp()>"
"<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>","<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>"
"<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)>"
"<io.flutter.plugins.webviewflutter.w1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.w1: void a(java.lang.Object,y.a$e)>"
"<android.graphics.Matrix: boolean postRotate(float)>","<android.graphics.Matrix: boolean postRotate(float)>"
"<java.time.format.TextStyle: java.time.format.TextStyle valueOf(java.lang.String)>","<java.time.format.TextStyle: java.time.format.TextStyle valueOf(java.lang.String)>"
"<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getTargetSpec()>","<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getTargetSpec()>"
"<android.content.ClipDescription: java.lang.String toString()>","<android.content.ClipDescription: java.lang.String toString()>"
"<android.view.translation.TranslationSpec: int describeContents()>","<android.view.translation.TranslationSpec: int describeContents()>"
"<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>"
"<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>","<android.webkit.WebView: java.lang.String findAddress(java.lang.String)>"
"<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>","<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>"
"<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>","<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>"
"<java.time.OffsetTime: java.time.OffsetTime plusHours(long)>","<java.time.OffsetTime: java.time.OffsetTime plusHours(long)>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()>"
"<android.hardware.Sensor: int getId()>","<android.hardware.Sensor: int getId()>"
"<android.os.VibratorManager: android.os.Vibrator getVibrator(int)>","<android.os.VibratorManager: android.os.Vibrator getVibrator(int)>"
"<androidx.window.embedding.b: void <init>(androidx.window.embedding.EmbeddingAdapter,java.util.Set)>","<androidx.window.embedding.b: void <init>(androidx.window.embedding.EmbeddingAdapter,java.util.Set)>"
"<android.view.Window: void setDecorCaptionShade(int)>","<android.view.Window: void setDecorCaptionShade(int)>"
"<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>","<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>"
"<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>","<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>"
"<android.widget.TextView: void onLayout(boolean,int,int,int,int)>","<android.widget.TextView: void onLayout(boolean,int,int,int,int)>"
"<java.lang.String: void <init>(char[],int,int)>","<java.lang.String: void <init>(char[],int,int)>"
"<android.app.Activity: void setIntent(android.content.Intent)>","<android.app.Activity: void setIntent(android.content.Intent)>"
"<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()>","<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()>"
"<android.os.BaseBundle: int getInt(java.lang.String)>","<android.os.BaseBundle: int getInt(java.lang.String)>"
"<java.util.stream.LongStream: void forEach(java.util.function.LongConsumer)>","<java.util.stream.LongStream: void forEach(java.util.function.LongConsumer)>"
"<java.util.Calendar: boolean isLenient()>","<java.util.Calendar: boolean isLenient()>"
"<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>","<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>"
"<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>"
"<android.view.MotionEvent: float getHistoricalToolMajor(int)>","<android.view.MotionEvent: float getHistoricalToolMajor(int)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.content.IntentSender: int hashCode()>","<android.content.IntentSender: int hashCode()>"
"<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()>","<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()>"
"<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>"
"<android.graphics.RuntimeShader: void setInputShader(java.lang.String,android.graphics.Shader)>","<android.graphics.RuntimeShader: void setInputShader(java.lang.String,android.graphics.Shader)>"
"<java.util.Arrays: void sort(short[])>","<java.util.Arrays: void sort(short[])>"
"<android.app.ActionBar: void removeAllTabs()>","<android.app.ActionBar: void removeAllTabs()>"
"<android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>","<android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent build()>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent build()>"
"<android.content.ContextWrapper: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.ContextWrapper: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<java.lang.StringBuilder: int length()>","<java.lang.StringBuilder: int length()>"
"<android.widget.Toolbar: int getContentInsetLeft()>","<android.widget.Toolbar: int getContentInsetLeft()>"
"<java.time.OffsetDateTime: java.util.Comparator timeLineOrder()>","<java.time.OffsetDateTime: java.util.Comparator timeLineOrder()>"
"<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>","<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>"
"<java.util.OptionalLong: boolean isPresent()>","<java.util.OptionalLong: boolean isPresent()>"
"<android.util.ArrayMap: int size()>","<android.util.ArrayMap: int size()>"
"<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>","<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>"
"<java.lang.ThreadDeath: void <init>()>","<java.lang.ThreadDeath: void <init>()>"
"<java.util.IdentityHashMap: boolean isEmpty()>","<java.util.IdentityHashMap: boolean isEmpty()>"
"<android.view.Window: android.view.View getCurrentFocus()>","<android.view.Window: android.view.View getCurrentFocus()>"
"<android.view.inputmethod.InputConnection: boolean clearMetaKeyStates(int)>","<android.view.inputmethod.InputConnection: boolean clearMetaKeyStates(int)>"
"<java.lang.Class: boolean isEnum()>","<java.lang.Class: boolean isEnum()>"
"<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>","<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>"
"<java.nio.charset.CoderResult: boolean isUnmappable()>","<java.nio.charset.CoderResult: boolean isUnmappable()>"
"<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>","<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>"
"<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetRelease(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSetRelease(java.lang.Object,java.lang.Object)>"
"<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>","<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>"
"<android.app.ActionBar$Tab: android.view.View getCustomView()>","<android.app.ActionBar$Tab: android.view.View getCustomView()>"
"<android.util.Log: void <init>()>","<android.util.Log: void <init>()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setUnit(java.lang.String)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setUnit(java.lang.String)>"
"<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>","<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>"
"<java.io.ObjectInputStream: void <init>()>","<java.io.ObjectInputStream: void <init>()>"
"<android.app.Dialog: android.view.View onCreatePanelView(int)>","<android.app.Dialog: android.view.View onCreatePanelView(int)>"
"<java.io.PrintWriter: void println(java.lang.String)>","<java.io.PrintWriter: void println(java.lang.String)>"
"<java.util.AbstractCollection: java.lang.String toString()>","<java.util.AbstractCollection: java.lang.String toString()>"
"<java.io.ObjectInputStream: void readFully(byte[])>","<java.io.ObjectInputStream: void readFully(byte[])>"
"<java.net.SocketImpl: java.lang.String toString()>","<java.net.SocketImpl: java.lang.String toString()>"
"<android.view.translation.ViewTranslationResponse: boolean equals(java.lang.Object)>","<android.view.translation.ViewTranslationResponse: boolean equals(java.lang.Object)>"
"<java.time.Clock: int hashCode()>","<java.time.Clock: int hashCode()>"
"<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>","<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>"
"<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.Class)>","<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.Class)>"
"<io.flutter.plugins.webviewflutter.i3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.i3: void a(java.lang.Object)>"
"<javax.security.auth.x500.X500Principal: byte[] getEncoded()>","<javax.security.auth.x500.X500Principal: byte[] getEncoded()>"
"<android.widget.TextView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.widget.TextView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>","<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>"
"<android.hardware.display.VirtualDisplay: void resize(int,int,int)>","<android.hardware.display.VirtualDisplay: void resize(int,int,int)>"
"<android.view.SurfaceControl: void writeToParcel(android.os.Parcel,int)>","<android.view.SurfaceControl: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>"
"<android.widget.ListView: boolean areFooterDividersEnabled()>","<android.widget.ListView: boolean areFooterDividersEnabled()>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setDisplayText(java.lang.CharSequence)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setDisplayText(java.lang.CharSequence)>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap)>"
"<java.io.ObjectStreamField: char getTypeCode()>","<java.io.ObjectStreamField: char getTypeCode()>"
"<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>","<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>"
"<android.graphics.Rect: float exactCenterX()>","<android.graphics.Rect: float exactCenterX()>"
"<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(android.os.Parcel,int)>"
"<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>","<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>"
"<java.util.Calendar: void set(int,int,int)>","<java.util.Calendar: void set(int,int,int)>"
"<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()>","<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()>"
"<android.os.Parcel: void writeNoException()>","<android.os.Parcel: void writeNoException()>"
"<android.view.ViewGroup: int getPersistentDrawingCache()>","<android.view.ViewGroup: int getPersistentDrawingCache()>"
"<android.animation.Animator: void setTarget(java.lang.Object)>","<android.animation.Animator: void setTarget(java.lang.Object)>"
"<android.view.inputmethod.EditorInfo: void makeCompatible(int)>","<android.view.inputmethod.EditorInfo: void makeCompatible(int)>"
"<android.view.Window: android.view.Window getContainer()>","<android.view.Window: android.view.Window getContainer()>"
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.widget.ImageView: void setBaseline(int)>","<android.widget.ImageView: void setBaseline(int)>"
"<java.util.concurrent.atomic.AtomicInteger: void <init>()>","<java.util.concurrent.atomic.AtomicInteger: void <init>()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object compareAndExchangeRelease(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object compareAndExchangeRelease(int,java.lang.Object,java.lang.Object)>"
"<org.json.JSONArray: java.lang.String getString(int)>","<org.json.JSONArray: java.lang.String getString(int)>"
"<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>","<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>"
"<android.animation.ValueAnimator: void removeAllUpdateListeners()>","<android.animation.ValueAnimator: void removeAllUpdateListeners()>"
"<android.webkit.ClientCertRequest: void ignore()>","<android.webkit.ClientCertRequest: void ignore()>"
"<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>"
"<android.view.MenuItem: boolean hasSubMenu()>","<android.view.MenuItem: boolean hasSubMenu()>"
"<android.app.ActivityManager: boolean isInLockTaskMode()>","<android.app.ActivityManager: boolean isInLockTaskMode()>"
"<android.content.ClipboardManager: void <init>()>","<android.content.ClipboardManager: void <init>()>"
"<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>","<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>"
"<android.os.Parcel: void readBinderList(java.util.List)>","<android.os.Parcel: void readBinderList(java.util.List)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaId(java.lang.String)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaId(java.lang.String)>"
"<android.graphics.Region: void translate(int,int)>","<android.graphics.Region: void translate(int,int)>"
"<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>","<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>"
"<java.util.Calendar: boolean after(java.lang.Object)>","<java.util.Calendar: boolean after(java.lang.Object)>"
"<android.text.SpannableStringBuilder: int length()>","<android.text.SpannableStringBuilder: int length()>"
"<java.time.Instant: java.time.Instant plus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.Instant plus(java.time.temporal.TemporalAmount)>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>"
"<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>"
"<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>","<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>"
"<java.util.NavigableSet: java.lang.Object pollLast()>","<java.util.NavigableSet: java.lang.Object pollLast()>"
"<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>","<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>"
"<android.content.res.TypedArray: float getDimension(int,float)>","<android.content.res.TypedArray: float getDimension(int,float)>"
"<android.view.SurfaceView: void setSecure(boolean)>","<android.view.SurfaceView: void setSecure(boolean)>"
"<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>","<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>"
"<android.os.IBinder: java.lang.String getInterfaceDescriptor()>","<android.os.IBinder: java.lang.String getInterfaceDescriptor()>"
"<android.view.TextureView: void unlockCanvasAndPost(android.graphics.Canvas)>","<android.view.TextureView: void unlockCanvasAndPost(android.graphics.Canvas)>"
"<android.view.autofill.AutofillManager: void <init>()>","<android.view.autofill.AutofillManager: void <init>()>"
"<android.content.pm.PackageInstaller$SessionCallback: void onFinished(int,boolean)>","<android.content.pm.PackageInstaller$SessionCallback: void onFinished(int,boolean)>"
"<java.lang.Double: double max(double,double)>","<java.lang.Double: double max(double,double)>"
"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>","<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>"
"<android.util.DisplayMetrics: java.lang.String toString()>","<android.util.DisplayMetrics: java.lang.String toString()>"
"<java.util.Locale: java.util.Locale getDefault()>","<java.util.Locale: java.util.Locale getDefault()>"
"<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>","<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>"
"<java.util.concurrent.BlockingQueue: boolean contains(java.lang.Object)>","<java.util.concurrent.BlockingQueue: boolean contains(java.lang.Object)>"
"<android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()>","<android.view.ViewConfiguration: float getScaledHorizontalScrollFactor()>"
"<android.view.inputmethod.EditorInfo: void <init>()>","<android.view.inputmethod.EditorInfo: void <init>()>"
"<android.view.View: int getRight()>","<android.view.View: int getRight()>"
"<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>","<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>"
"<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>","<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>"
"<android.os.ParcelFileDescriptor: boolean canDetectErrors()>","<android.os.ParcelFileDescriptor: boolean canDetectErrors()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>","<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>"
"<io.flutter.plugins.webviewflutter.b0: void <init>(io.flutter.plugins.webviewflutter.k$q)>","<io.flutter.plugins.webviewflutter.b0: void <init>(io.flutter.plugins.webviewflutter.k$q)>"
"<android.content.res.AssetFileDescriptor: long getLength()>","<android.content.res.AssetFileDescriptor: long getLength()>"
"<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>","<java.lang.Runtime: boolean removeShutdownHook(java.lang.Thread)>"
"<java.util.concurrent.atomic.AtomicLong: void <init>(long)>","<java.util.concurrent.atomic.AtomicLong: void <init>(long)>"
"<android.database.Cursor: int getColumnCount()>","<android.database.Cursor: int getColumnCount()>"
"<android.widget.Toolbar: int getContentInsetEndWithActions()>","<android.widget.Toolbar: int getContentInsetEndWithActions()>"
"<java.lang.Long: java.lang.String toUnsignedString(long)>","<java.lang.Long: java.lang.String toUnsignedString(long)>"
"<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>","<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>"
"<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>","<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>"
"<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>","<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>"
"<java.util.Calendar: void setLenient(boolean)>","<java.util.Calendar: void setLenient(boolean)>"
"<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>","<org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)>"
"<java.net.Socket: void <init>(java.lang.String,int)>","<java.net.Socket: void <init>(java.lang.String,int)>"
"<android.view.View: boolean isLaidOut()>","<android.view.View: boolean isLaidOut()>"
"<android.app.Notification$CarExtender: android.app.Notification$CarExtender$UnreadConversation getUnreadConversation()>","<android.app.Notification$CarExtender: android.app.Notification$CarExtender$UnreadConversation getUnreadConversation()>"
"<android.content.IntentFilter$AuthorityEntry: int getPort()>","<android.content.IntentFilter$AuthorityEntry: int getPort()>"
"<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>","<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>"
"<android.view.animation.Animation: boolean getFillAfter()>","<android.view.animation.Animation: boolean getFillAfter()>"
"<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>"
"<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>","<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>"
"<java.util.TimeZone: void setRawOffset(int)>","<java.util.TimeZone: void setRawOffset(int)>"
"<java.time.Month: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.Month: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.util.SparseIntArray: int size()>","<android.util.SparseIntArray: int size()>"
"<androidx.lifecycle.LiveData$LifecycleBoundObserver: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.lifecycle.LiveData$LifecycleBoundObserver: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<java.util.IdentityHashMap: java.util.Set entrySet()>","<java.util.IdentityHashMap: java.util.Set entrySet()>"
"<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>","<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>"
"<java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>","<java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>"
"<android.media.session.MediaSessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>","<android.media.session.MediaSessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>"
"<android.content.Context: java.io.File getDatabasePath(java.lang.String)>","<android.content.Context: java.io.File getDatabasePath(java.lang.String)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAsciiCapable(boolean)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAsciiCapable(boolean)>"
"<android.content.pm.PackageManager: void setComponentEnabledSettings(java.util.List)>","<android.content.pm.PackageManager: void setComponentEnabledSettings(java.util.List)>"
"<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>","<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>"
"<android.widget.AbsoluteLayout: void onLayout(boolean,int,int,int,int)>","<android.widget.AbsoluteLayout: void onLayout(boolean,int,int,int,int)>"
"<android.app.FragmentTransaction: void <init>()>","<android.app.FragmentTransaction: void <init>()>"
"<android.view.inputmethod.ExtractedText: void <init>()>","<android.view.inputmethod.ExtractedText: void <init>()>"
"<java.io.DataOutput: void writeFloat(float)>","<java.io.DataOutput: void writeFloat(float)>"
"<android.widget.TextView: void setRawInputType(int)>","<android.widget.TextView: void setRawInputType(int)>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.widget.RemoteViews: void setViewVisibility(int,int)>","<android.widget.RemoteViews: void setViewVisibility(int,int)>"
"<android.view.ViewTreeObserver$OnGlobalLayoutListener: void onGlobalLayout()>","<android.view.ViewTreeObserver$OnGlobalLayoutListener: void onGlobalLayout()>"
"<android.graphics.Canvas: boolean clipOutRect(android.graphics.RectF)>","<android.graphics.Canvas: boolean clipOutRect(android.graphics.RectF)>"
"<java.nio.charset.CodingErrorAction: java.lang.String toString()>","<java.nio.charset.CodingErrorAction: java.lang.String toString()>"
"<android.content.Context: java.io.File getDataDir()>","<android.content.Context: java.io.File getDataDir()>"
"<java.util.function.Function: java.lang.Object apply(java.lang.Object)>","<java.util.function.Function: java.lang.Object apply(java.lang.Object)>"
"<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>","<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>"
"<android.view.Window: void setTransitionManager(android.transition.TransitionManager)>","<android.view.Window: void setTransitionManager(android.transition.TransitionManager)>"
"<java.nio.file.Path: java.net.URI toUri()>","<java.nio.file.Path: java.net.URI toUri()>"
"<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection)>","<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>"
"<android.view.View: int getVisibility()>","<android.view.View: int getVisibility()>"
"<android.os.Parcel: void writeDouble(double)>","<android.os.Parcel: void writeDouble(double)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.graphics.Paint: float getTextSkewX()>","<android.graphics.Paint: float getTextSkewX()>"
"<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState build()>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState build()>"
"<java.util.function.LongToDoubleFunction: double applyAsDouble(long)>","<java.util.function.LongToDoubleFunction: double applyAsDouble(long)>"
"<java.io.InputStream: void close()>","<java.io.InputStream: void close()>"
"<java.util.stream.LongStream: java.util.stream.LongStream filter(java.util.function.LongPredicate)>","<java.util.stream.LongStream: java.util.stream.LongStream filter(java.util.function.LongPredicate)>"
"<android.animation.ValueAnimator: void setCurrentPlayTime(long)>","<android.animation.ValueAnimator: void setCurrentPlayTime(long)>"
"<android.text.Layout: int getOffsetToLeftOf(int)>","<android.text.Layout: int getOffsetToLeftOf(int)>"
"<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>","<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>"
"<java.net.InetAddress: boolean isReachable(int)>","<java.net.InetAddress: boolean isReachable(int)>"
"<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>","<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>"
"<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>","<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>"
"<android.view.DragEvent: boolean getResult()>","<android.view.DragEvent: boolean getResult()>"
"<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>","<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>"
"<android.graphics.fonts.FontStyle: int hashCode()>","<android.graphics.fonts.FontStyle: int hashCode()>"
"<android.graphics.fonts.FontStyle: void <init>()>","<android.graphics.fonts.FontStyle: void <init>()>"
"<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>","<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putBitmap(java.lang.String,android.graphics.Bitmap)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putBitmap(java.lang.String,android.graphics.Bitmap)>"
"<java.time.chrono.AbstractChronology: int hashCode()>","<java.time.chrono.AbstractChronology: int hashCode()>"
"<android.content.Context: void startActivity(android.content.Intent)>","<android.content.Context: void startActivity(android.content.Intent)>"
"<android.util.SparseBooleanArray: void <init>()>","<android.util.SparseBooleanArray: void <init>()>"
"<android.media.session.MediaController: java.lang.String getTag()>","<android.media.session.MediaController: java.lang.String getTag()>"
"<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>","<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>"
"<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>","<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>"
"<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>","<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>"
"<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>","<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>"
"<java.lang.reflect.Constructor: java.lang.String toString()>","<java.lang.reflect.Constructor: java.lang.String toString()>"
"<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>","<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>"
"<java.lang.String: byte[] getBytes(java.lang.String)>","<java.lang.String: byte[] getBytes(java.lang.String)>"
"<java.nio.ByteOrder: void <clinit>()>","<java.nio.ByteOrder: void <clinit>()>"
"<android.view.Window: void setCallback(android.view.Window$Callback)>","<android.view.Window: void setCallback(android.view.Window$Callback)>"
"<java.util.jar.JarEntry: java.lang.String getRealName()>","<java.util.jar.JarEntry: java.lang.String getRealName()>"
"<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)>","<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)>"
"<java.util.stream.IntStream: java.util.stream.IntStream iterate(int,java.util.function.IntUnaryOperator)>","<java.util.stream.IntStream: java.util.stream.IntStream iterate(int,java.util.function.IntUnaryOperator)>"
"<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.util.Collection)>"
"<java.time.Duration: java.time.Duration ofSeconds(long,long)>","<java.time.Duration: java.time.Duration ofSeconds(long,long)>"
"<java.util.ArrayList: java.lang.Object[] toArray()>","<java.util.ArrayList: java.lang.Object[] toArray()>"
"<android.app.Notification: java.lang.String getSortKey()>","<android.app.Notification: java.lang.String getSortKey()>"
"<java.util.Spliterator$OfDouble: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfDouble: boolean tryAdvance(java.lang.Object)>"
"<android.graphics.ImageDecoder$OnHeaderDecodedListener: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>","<android.graphics.ImageDecoder$OnHeaderDecodedListener: void onHeaderDecoded(android.graphics.ImageDecoder,android.graphics.ImageDecoder$ImageInfo,android.graphics.ImageDecoder$Source)>"
"<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFinished(android.print.PageRange[])>","<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFinished(android.print.PageRange[])>"
"<android.view.accessibility.AccessibilityEvent: int getEventType()>","<android.view.accessibility.AccessibilityEvent: int getEventType()>"
"<android.content.Context: java.lang.String getAttributionTag()>","<android.content.Context: java.lang.String getAttributionTag()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>"
"<java.net.SocketImpl: void shutdownInput()>","<java.net.SocketImpl: void shutdownInput()>"
"<android.hardware.display.DeviceProductInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.hardware.display.DeviceProductInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>"
"<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>","<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>"
"<android.view.View: void dispatchSystemUiVisibilityChanged(int)>","<android.view.View: void dispatchSystemUiVisibilityChanged(int)>"
"<android.widget.TextView: float getTextSize()>","<android.widget.TextView: float getTextSize()>"
"<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setIntegerPart(java.lang.String)>","<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setIntegerPart(java.lang.String)>"
"<android.content.pm.ActivityInfo: void <init>()>","<android.content.pm.ActivityInfo: void <init>()>"
"<android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>","<android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<androidx.activity.ComponentActivity$3: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>","<androidx.activity.ComponentActivity$3: void g(androidx.lifecycle.f,androidx.lifecycle.c$a)>"
"<java.util.List: java.lang.Object[] toArray()>","<java.util.List: java.lang.Object[] toArray()>"
"<android.os.Bundle: int describeContents()>","<android.os.Bundle: int describeContents()>"
"<java.util.Arrays: void sort(double[])>","<java.util.Arrays: void sort(double[])>"
"<android.app.Application: void onTrimMemory(int)>","<android.app.Application: void onTrimMemory(int)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.app.Fragment: void startPostponedEnterTransition()>","<android.app.Fragment: void startPostponedEnterTransition()>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery[])>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery[])>"
"<io.flutter.plugins.webviewflutter.j2: void <clinit>()>","<io.flutter.plugins.webviewflutter.j2: void <clinit>()>"
"<android.graphics.text.LineBreakConfig: boolean equals(java.lang.Object)>","<android.graphics.text.LineBreakConfig: boolean equals(java.lang.Object)>"
"<android.graphics.NinePatch: android.graphics.Paint getPaint()>","<android.graphics.NinePatch: android.graphics.Paint getPaint()>"
"<java.lang.System: void loadLibrary(java.lang.String)>","<java.lang.System: void loadLibrary(java.lang.String)>"
"<android.view.Window: void closePanel(int)>","<android.view.Window: void closePanel(int)>"
"<java.lang.'annotation'.Annotation: java.lang.String toString()>","<java.lang.'annotation'.Annotation: java.lang.String toString()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: void <init>()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: void <init>()>"
"<android.view.WindowManager$InvalidDisplayException: void <init>()>","<android.view.WindowManager$InvalidDisplayException: void <init>()>"
"<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>","<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>"
"<android.media.MediaMetadata: int size()>","<android.media.MediaMetadata: int size()>"
"<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>","<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>"
"<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>","<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>"
"<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>","<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>"
"<java.util.Locale$LanguageRange: void <init>(java.lang.String,double)>","<java.util.Locale$LanguageRange: void <init>(java.lang.String,double)>"
"<java.util.stream.IntStream$Builder: java.util.stream.IntStream build()>","<java.util.stream.IntStream$Builder: java.util.stream.IntStream build()>"
"<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>"
"<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>","<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>"
"<android.view.ViewConfiguration: int getPressedStateDuration()>","<android.view.ViewConfiguration: int getPressedStateDuration()>"
"<android.view.inputmethod.CompletionInfo: long getId()>","<android.view.inputmethod.CompletionInfo: long getId()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: void <init>()>","<android.view.textclassifier.TextClassifier$EntityConfig: void <init>()>"
"<java.net.SocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>","<java.net.SocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>"
"<android.widget.Toolbar: void setSubtitle(int)>","<android.widget.Toolbar: void setSubtitle(int)>"
"<android.view.textclassifier.TextClassification$Request: int getEndIndex()>","<android.view.textclassifier.TextClassification$Request: int getEndIndex()>"
"<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>","<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>"
"<android.content.IntentSender: int getCreatorUid()>","<android.content.IntentSender: int getCreatorUid()>"
"<android.view.Display$HdrCapabilities: void writeToParcel(android.os.Parcel,int)>","<android.view.Display$HdrCapabilities: void writeToParcel(android.os.Parcel,int)>"
"<android.text.style.TtsSpan$VerbatimBuilder: void <init>()>","<android.text.style.TtsSpan$VerbatimBuilder: void <init>()>"
"<android.webkit.WebView: void onPause()>","<android.webkit.WebView: void onPause()>"
"<android.graphics.RenderNode: boolean setTranslationY(float)>","<android.graphics.RenderNode: boolean setTranslationY(float)>"
"<java.util.Set: boolean remove(java.lang.Object)>","<java.util.Set: boolean remove(java.lang.Object)>"
"<android.app.Notification$BigTextStyle: void <init>(android.app.Notification$Builder)>","<android.app.Notification$BigTextStyle: void <init>(android.app.Notification$Builder)>"
"<java.lang.Thread: int countStackFrames()>","<java.lang.Thread: int countStackFrames()>"
"<io.flutter.plugins.webviewflutter.f3: void <init>()>","<io.flutter.plugins.webviewflutter.f3: void <init>()>"
"<android.graphics.Picture: int getWidth()>","<android.graphics.Picture: int getWidth()>"
"<android.webkit.WebResourceResponse: void setStatusCodeAndReasonPhrase(int,java.lang.String)>","<android.webkit.WebResourceResponse: void setStatusCodeAndReasonPhrase(int,java.lang.String)>"
"<android.app.Notification$CarExtender$Builder: void <init>(java.lang.String)>","<android.app.Notification$CarExtender$Builder: void <init>(java.lang.String)>"
"<java.lang.Thread: void join(long)>","<java.lang.Thread: void join(long)>"
"<android.widget.TextView: void setTextMetricsParams(android.text.PrecomputedText$Params)>","<android.widget.TextView: void setTextMetricsParams(android.text.PrecomputedText$Params)>"
"<android.view.View: void setHasTransientState(boolean)>","<android.view.View: void setHasTransientState(boolean)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetPlain(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetPlain(int,java.lang.Object,java.lang.Object)>"
"<android.content.pm.PackageManager: java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setSelected(boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setSelected(boolean)>"
"<android.text.style.TtsSpan$TextBuilder: void <init>()>","<android.text.style.TtsSpan$TextBuilder: void <init>()>"
"<java.util.Arrays: void sort(char[])>","<java.util.Arrays: void sort(char[])>"
"<android.app.Fragment: void <init>()>","<android.app.Fragment: void <init>()>"
"<android.graphics.Color: int HSVToColor(float[])>","<android.graphics.Color: int HSVToColor(float[])>"
"<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()>","<java.util.jar.JarEntry: java.security.CodeSigner[] getCodeSigners()>"
"<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>","<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>"
"<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>","<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>"
"<android.graphics.Canvas: void scale(float,float,float,float)>","<android.graphics.Canvas: void scale(float,float,float,float)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getPackageSource()>","<android.content.pm.PackageInstaller$SessionInfo: int getPackageSource()>"
"<java.util.Hashtable: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.util.Hashtable: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture)>","<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture)>"
"<java.util.OptionalDouble: int hashCode()>","<java.util.OptionalDouble: int hashCode()>"
"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>","<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>"
"<android.view.Window: android.content.Context getContext()>","<android.view.Window: android.content.Context getContext()>"
"<android.widget.ImageView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.ImageView: java.lang.CharSequence getAccessibilityClassName()>"
"<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>","<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>"
"<android.view.DisplayCutout: int hashCode()>","<android.view.DisplayCutout: int hashCode()>"
"<android.view.Display$Mode: java.lang.String toString()>","<android.view.Display$Mode: java.lang.String toString()>"
"<android.view.SurfaceHolder: boolean isCreating()>","<android.view.SurfaceHolder: boolean isCreating()>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.temporal.Temporal: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.widget.TextView: void drawableHotspotChanged(float,float)>","<android.widget.TextView: void drawableHotspotChanged(float,float)>"
"<android.view.ViewGroup: boolean addStatesFromChildren()>","<android.view.ViewGroup: boolean addStatesFromChildren()>"
"<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<java.lang.ThreadGroup: java.lang.String getName()>","<java.lang.ThreadGroup: java.lang.String getName()>"
"<android.view.SurfaceControlViewHost: void <init>(android.content.Context,android.view.Display,android.os.IBinder)>","<android.view.SurfaceControlViewHost: void <init>(android.content.Context,android.view.Display,android.os.IBinder)>"
"<android.webkit.CookieManager: void <init>()>","<android.webkit.CookieManager: void <init>()>"
"<android.hardware.HardwareBuffer: int getWidth()>","<android.hardware.HardwareBuffer: int getWidth()>"
"<android.view.inputmethod.InputMethodInfo: boolean shouldShowInInputMethodPicker()>","<android.view.inputmethod.InputMethodInfo: boolean shouldShowInInputMethodPicker()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()>"
"<java.net.URI: java.net.URI normalize()>","<java.net.URI: java.net.URI normalize()>"
"<java.util.LinkedHashMap: void <init>()>","<java.util.LinkedHashMap: void <init>()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.RejectedExecutionHandler)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.RejectedExecutionHandler)>"
"<android.view.MotionEvent: int getToolType(int)>","<android.view.MotionEvent: int getToolType(int)>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,long)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,long)>"
"<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.widget.ListView: boolean isOpaque()>","<android.widget.ListView: boolean isOpaque()>"
"<android.graphics.RenderNode: boolean setRotationX(float)>","<android.graphics.RenderNode: boolean setRotationX(float)>"
"<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>","<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>"
"<java.time.LocalDate: java.lang.String toString()>","<java.time.LocalDate: java.lang.String toString()>"
"<android.content.res.TypedArray: void recycle()>","<android.content.res.TypedArray: void recycle()>"
"<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>"
"<java.util.IdentityHashMap: void <init>(int)>","<java.util.IdentityHashMap: void <init>(int)>"
"<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>","<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: void <init>()>","<android.view.inputmethod.EditorBoundsInfo$Builder: void <init>()>"
"<android.text.Layout$Directions: void <init>()>","<android.text.Layout$Directions: void <init>()>"
"<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>","<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>"
"<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>","<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>"
"<java.io.PrintWriter: boolean checkError()>","<java.io.PrintWriter: boolean checkError()>"
"<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>","<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>"
"<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>","<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>"
"<android.graphics.Region$Op: void <init>(java.lang.String,int)>","<android.graphics.Region$Op: void <init>(java.lang.String,int)>"
"<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)>","<android.webkit.WebView: boolean onTrackballEvent(android.view.MotionEvent)>"
"<java.util.concurrent.atomic.AtomicInteger: int compareAndExchangeRelease(int,int)>","<java.util.concurrent.atomic.AtomicInteger: int compareAndExchangeRelease(int,int)>"
"<android.view.ViewConfiguration: int getMinimumFlingVelocity()>","<android.view.ViewConfiguration: int getMinimumFlingVelocity()>"
"<android.print.PrintDocumentAdapter: void onLayout(android.print.PrintAttributes,android.print.PrintAttributes,android.os.CancellationSignal,android.print.PrintDocumentAdapter$LayoutResultCallback,android.os.Bundle)>","<android.print.PrintDocumentAdapter: void onLayout(android.print.PrintAttributes,android.print.PrintAttributes,android.os.CancellationSignal,android.print.PrintDocumentAdapter$LayoutResultCallback,android.os.Bundle)>"
"<android.view.View: android.content.res.ColorStateList getForegroundTintList()>","<android.view.View: android.content.res.ColorStateList getForegroundTintList()>"
"<android.graphics.ColorSpace$Adaptation: void <clinit>()>","<android.graphics.ColorSpace$Adaptation: void <clinit>()>"
"<android.view.Window: void setFeatureDrawableAlpha(int,int)>","<android.view.Window: void setFeatureDrawableAlpha(int,int)>"
"<android.widget.RemoteViews: void setRemoteAdapter(int,android.widget.RemoteViews$RemoteCollectionItems)>","<android.widget.RemoteViews: void setRemoteAdapter(int,android.widget.RemoteViews$RemoteCollectionItems)>"
"<android.graphics.Point: void <clinit>()>","<android.graphics.Point: void <clinit>()>"
"<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>","<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>"
"<android.view.textservice.SuggestionsInfo: int describeContents()>","<android.view.textservice.SuggestionsInfo: int describeContents()>"
"<android.view.contentcapture.ContentCaptureSessionId: void <clinit>()>","<android.view.contentcapture.ContentCaptureSessionId: void <clinit>()>"
"<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>","<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>"
"<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>"
"<android.view.inputmethod.CursorAnchorInfo: int getSelectionStart()>","<android.view.inputmethod.CursorAnchorInfo: int getSelectionStart()>"
"<org.json.JSONTokener: char next()>","<org.json.JSONTokener: char next()>"
"<android.os.Debug: int getGlobalFreedCount()>","<android.os.Debug: int getGlobalFreedCount()>"
"<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>","<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>"
"<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>","<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>"
"<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>","<android.webkit.WebSettings: void setBlockNetworkLoads(boolean)>"
"<android.content.Context: java.io.File[] getExternalCacheDirs()>","<android.content.Context: java.io.File[] getExternalCacheDirs()>"
"<android.os.PersistableBundle: void <init>(android.os.PersistableBundle)>","<android.os.PersistableBundle: void <init>(android.os.PersistableBundle)>"
"<android.view.View: void dispatchPointerCaptureChanged(boolean)>","<android.view.View: void dispatchPointerCaptureChanged(boolean)>"
"<java.net.URI: java.net.URI parseServerAuthority()>","<java.net.URI: java.net.URI parseServerAuthority()>"
"<java.security.Provider: void replaceAll(java.util.function.BiFunction)>","<java.security.Provider: void replaceAll(java.util.function.BiFunction)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)>"
"<java.util.Arrays: boolean equals(float[],float[])>","<java.util.Arrays: boolean equals(float[],float[])>"
"<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity[] values()>","<android.webkit.WebSettings$ZoomDensity: android.webkit.WebSettings$ZoomDensity[] values()>"
"<android.graphics.Paint: boolean setFontVariationSettings(java.lang.String)>","<android.graphics.Paint: boolean setFontVariationSettings(java.lang.String)>"
"<java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>","<java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>"
"<android.os.Trace: void beginSection(java.lang.String)>","<android.os.Trace: void beginSection(java.lang.String)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>","<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>"
"<android.os.VibrationEffect: android.os.VibrationEffect$Composition startComposition()>","<android.os.VibrationEffect: android.os.VibrationEffect$Composition startComposition()>"
"<android.view.WindowInsets: int getStableInsetTop()>","<android.view.WindowInsets: int getStableInsetTop()>"
"<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>","<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>"
"<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()>","<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()>"
"<java.nio.FloatBuffer: int compareTo(java.lang.Object)>","<java.nio.FloatBuffer: int compareTo(java.lang.Object)>"
"<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.view.Window$Callback: void onActionModeFinished(android.view.ActionMode)>","<android.view.Window$Callback: void onActionModeFinished(android.view.ActionMode)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>"
"<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>","<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>"
"<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)>","<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)>"
"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>"
"<android.view.View: void setScaleX(float)>","<android.view.View: void setScaleX(float)>"
"<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>","<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>"
"<android.view.View: void setOnScrollChangeListener(android.view.View$OnScrollChangeListener)>","<android.view.View: void setOnScrollChangeListener(android.view.View$OnScrollChangeListener)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(long)>","<java.nio.LongBuffer: java.nio.LongBuffer put(long)>"
"<android.widget.TextView: void <init>(android.content.Context)>","<android.widget.TextView: void <init>(android.content.Context)>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>"
"<android.app.Activity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>"
"<android.util.SparseArray: boolean contains(int)>","<android.util.SparseArray: boolean contains(int)>"
"<android.media.session.MediaSession: android.media.session.MediaController getController()>","<android.media.session.MediaSession: android.media.session.MediaController getController()>"
"<android.content.ContentValues: void <init>(android.content.ContentValues)>","<android.content.ContentValues: void <init>(android.content.ContentValues)>"
"<android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)>","<android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)>"
"<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>","<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>"
"<android.graphics.Color: float getComponent(int)>","<android.graphics.Color: float getComponent(int)>"
"<android.graphics.drawable.ColorDrawable: void setColor(int)>","<android.graphics.drawable.ColorDrawable: void setColor(int)>"
"<android.os.Bundle: void putCharArray(java.lang.String,char[])>","<android.os.Bundle: void putCharArray(java.lang.String,char[])>"
"<android.app.LoaderManager: void <init>()>","<android.app.LoaderManager: void <init>()>"
"<android.content.Intent: void setClipData(android.content.ClipData)>","<android.content.Intent: void setClipData(android.content.ClipData)>"
"<java.lang.Character: char highSurrogate(int)>","<java.lang.Character: char highSurrogate(int)>"
"<java.math.BigInteger: void <init>(byte[],int,int)>","<java.math.BigInteger: void <init>(byte[],int,int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>"
"<android.content.Intent: android.content.ComponentName getComponent()>","<android.content.Intent: android.content.ComponentName getComponent()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int accumulateAndGet(java.lang.Object,int,java.util.function.IntBinaryOperator)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int accumulateAndGet(java.lang.Object,int,java.util.function.IntBinaryOperator)>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>","<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>"
"<android.os.VibratorManager: void <init>()>","<android.os.VibratorManager: void <init>()>"
"<android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>"
"<java.lang.reflect.Executable: int getModifiers()>","<java.lang.reflect.Executable: int getModifiers()>"
"<android.os.Bundle: void clear()>","<android.os.Bundle: void clear()>"
"<java.time.OffsetTime: java.time.OffsetTime withMinute(int)>","<java.time.OffsetTime: java.time.OffsetTime withMinute(int)>"
"<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>","<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>"
"<java.util.stream.LongStream: java.util.stream.LongStream$Builder builder()>","<java.util.stream.LongStream: java.util.stream.LongStream$Builder builder()>"
"<android.provider.Settings$System: void <clinit>()>","<android.provider.Settings$System: void <clinit>()>"
"<java.util.stream.Stream: java.util.Optional max(java.util.Comparator)>","<java.util.stream.Stream: java.util.Optional max(java.util.Comparator)>"
"<android.content.Loader: void <init>(android.content.Context)>","<android.content.Loader: void <init>(android.content.Context)>"
"<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>"
"<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>","<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>"
"<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>","<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>"
"<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor)>","<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor)>"
"<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>","<java.security.cert.X509Certificate: java.util.Collection getSubjectAlternativeNames()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>"
"<java.lang.Object: java.lang.String toString()>","<java.lang.Object: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
"<java.net.URI: int compareTo(java.lang.Object)>","<java.net.URI: int compareTo(java.lang.Object)>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float[])>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float[])>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,java.lang.String)>"
"<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>","<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>"
"<android.webkit.WebView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.webkit.WebView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<java.util.Locale: java.util.Locale lookup(java.util.List,java.util.Collection)>","<java.util.Locale: java.util.Locale lookup(java.util.List,java.util.Collection)>"
"<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>","<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>"
"<android.media.session.PlaybackState: java.lang.String toString()>","<android.media.session.PlaybackState: java.lang.String toString()>"
"<java.time.LocalTime: int getHour()>","<java.time.LocalTime: int getHour()>"
"<java.lang.ThreadGroup: int activeCount()>","<java.lang.ThreadGroup: int activeCount()>"
"<java.net.DatagramSocket: void setSoTimeout(int)>","<java.net.DatagramSocket: void setSoTimeout(int)>"
"<android.database.DataSetObserver: void <init>()>","<android.database.DataSetObserver: void <init>()>"
"<java.nio.channels.spi.AbstractSelectionKey: void <init>()>","<java.nio.channels.spi.AbstractSelectionKey: void <init>()>"
"<java.lang.Character: boolean isSpaceChar(char)>","<java.lang.Character: boolean isSpaceChar(char)>"
"<android.content.ContentProvider: android.content.Context requireContext()>","<android.content.ContentProvider: android.content.Context requireContext()>"
"<android.widget.PopupWindow$OnDismissListener: void onDismiss()>","<android.widget.PopupWindow$OnDismissListener: void onDismiss()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>"
"<java.lang.Character: boolean isLowerCase(char)>","<java.lang.Character: boolean isLowerCase(char)>"
"<android.widget.ListView: boolean getItemsCanFocus()>","<android.widget.ListView: boolean getItemsCanFocus()>"
"<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>","<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>"
"<android.view.TextureView: boolean isOpaque()>","<android.view.TextureView: boolean isOpaque()>"
"<android.text.style.LocaleSpan: void updateMeasureState(android.text.TextPaint)>","<android.text.style.LocaleSpan: void updateMeasureState(android.text.TextPaint)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>"
"<android.graphics.RectF: void set(android.graphics.RectF)>","<android.graphics.RectF: void set(android.graphics.RectF)>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>"
"<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>","<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>"
"<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>","<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>"
"<java.nio.CharBuffer: int hashCode()>","<java.nio.CharBuffer: int hashCode()>"
"<androidx.window.extensions.layout.WindowLayoutComponent: void addWindowLayoutInfoListener(android.app.Activity,java.util.function.Consumer)>","<androidx.window.extensions.layout.WindowLayoutComponent: void addWindowLayoutInfoListener(android.app.Activity,java.util.function.Consumer)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.util.PriorityQueue: void <init>(java.util.Comparator)>","<java.util.PriorityQueue: void <init>(java.util.Comparator)>"
"<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>","<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>"
"<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.graphics.RuntimeShader: void setInputBuffer(java.lang.String,android.graphics.BitmapShader)>","<android.graphics.RuntimeShader: void setInputBuffer(java.lang.String,android.graphics.BitmapShader)>"
"<android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean extendUp(android.text.Spannable,android.text.Layout)>"
"<java.util.Collections: java.lang.Object min(java.util.Collection)>","<java.util.Collections: java.lang.Object min(java.util.Collection)>"
"<java.lang.Math: float scalb(float,int)>","<java.lang.Math: float scalb(float,int)>"
"<android.webkit.WebResourceRequest: java.lang.String getMethod()>","<android.webkit.WebResourceRequest: java.lang.String getMethod()>"
"<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<java.util.Arrays: int compareUnsigned(long[],long[])>","<java.util.Arrays: int compareUnsigned(long[],long[])>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.res.Resources$Theme: int getChangingConfigurations()>","<android.content.res.Resources$Theme: int getChangingConfigurations()>"
"<java.util.TimeZone: java.util.TimeZone getDefault()>","<java.util.TimeZone: java.util.TimeZone getDefault()>"
"<android.view.View: boolean isAccessibilityHeading()>","<android.view.View: boolean isAccessibilityHeading()>"
"<java.lang.String: int compareToIgnoreCase(java.lang.String)>","<java.lang.String: int compareToIgnoreCase(java.lang.String)>"
"<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>","<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>"
"<android.view.View: void setMinimumHeight(int)>","<android.view.View: void setMinimumHeight(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>"
"<android.widget.ListView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.ListView: java.lang.CharSequence getAccessibilityClassName()>"
"<android.os.ResultReceiver: void send(int,android.os.Bundle)>","<android.os.ResultReceiver: void send(int,android.os.Bundle)>"
"<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>","<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>"
"<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>","<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>"
"<java.lang.SecurityManager: void checkRead(java.lang.String)>","<java.lang.SecurityManager: void checkRead(java.lang.String)>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>"
"<android.print.PrintDocumentAdapter$WriteResultCallback: void <init>()>","<android.print.PrintDocumentAdapter$WriteResultCallback: void <init>()>"
"<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>","<android.app.Notification$BigPictureStyle: android.app.Notification$BigPictureStyle setBigContentTitle(java.lang.CharSequence)>"
"<android.graphics.Outline: void setConvexPath(android.graphics.Path)>","<android.graphics.Outline: void setConvexPath(android.graphics.Path)>"
"<java.time.LocalTime: java.time.LocalTime minus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.LocalTime minus(java.time.temporal.TemporalAmount)>"
"<java.nio.IntBuffer: int compareTo(java.lang.Object)>","<java.nio.IntBuffer: int compareTo(java.lang.Object)>"
"<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>","<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>"
"<java.net.Socket: void setTcpNoDelay(boolean)>","<java.net.Socket: void setTcpNoDelay(boolean)>"
"<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>","<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>"
"<java.lang.reflect.Parameter: java.lang.String toString()>","<java.lang.reflect.Parameter: java.lang.String toString()>"
"<android.net.Uri: void <clinit>()>","<android.net.Uri: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>"
"<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>","<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>"
"<android.view.ViewTreeObserver$OnDrawListener: void onDraw()>","<android.view.ViewTreeObserver$OnDrawListener: void onDraw()>"
"<android.widget.ListPopupWindow: boolean isModal()>","<android.widget.ListPopupWindow: boolean isModal()>"
"<android.hardware.Sensor: int getHighestDirectReportRateLevel()>","<android.hardware.Sensor: int getHighestDirectReportRateLevel()>"
"<android.animation.Animator: android.animation.Animator setDuration(long)>","<android.animation.Animator: android.animation.Animator setDuration(long)>"
"<java.util.Deque: java.util.Iterator iterator()>","<java.util.Deque: java.util.Iterator iterator()>"
"<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>","<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>"
"<android.content.pm.ApplicationInfo: void <init>()>","<android.content.pm.ApplicationInfo: void <init>()>"
"<io.flutter.plugins.webviewflutter.s0: void <init>(io.flutter.plugins.webviewflutter.k$w)>","<io.flutter.plugins.webviewflutter.s0: void <init>(io.flutter.plugins.webviewflutter.k$w)>"
"<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>","<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>"
"<java.util.AbstractSequentialList: void add(int,java.lang.Object)>","<java.util.AbstractSequentialList: void add(int,java.lang.Object)>"
"<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>","<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>"
"<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>"
"<java.lang.reflect.Field: short getShort(java.lang.Object)>","<java.lang.reflect.Field: short getShort(java.lang.Object)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.ColorSpace: boolean equals(java.lang.Object)>","<android.graphics.ColorSpace: boolean equals(java.lang.Object)>"
"<java.text.AttributedCharacterIterator: int getRunStart()>","<java.text.AttributedCharacterIterator: int getRunStart()>"
"<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.time.OffsetDateTime: int getDayOfMonth()>","<java.time.OffsetDateTime: int getDayOfMonth()>"
"<android.widget.AbsListView: void setEdgeEffectColor(int)>","<android.widget.AbsListView: void setEdgeEffectColor(int)>"
"<android.view.View: int getOutlineAmbientShadowColor()>","<android.view.View: int getOutlineAmbientShadowColor()>"
"<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.content.res.loader.AssetsProvider: android.content.res.AssetFileDescriptor loadAssetFd(java.lang.String,int)>","<android.content.res.loader.AssetsProvider: android.content.res.AssetFileDescriptor loadAssetFd(java.lang.String,int)>"
"<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>","<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>"
"<java.util.Arrays: boolean equals(char[],char[])>","<java.util.Arrays: boolean equals(char[],char[])>"
"<android.content.res.XmlResourceParser: java.lang.String getAttributeNamespace(int)>","<android.content.res.XmlResourceParser: java.lang.String getAttributeNamespace(int)>"
"<android.webkit.WebView: java.lang.String getOriginalUrl()>","<android.webkit.WebView: java.lang.String getOriginalUrl()>"
"<android.os.Parcel: boolean readBoolean()>","<android.os.Parcel: boolean readBoolean()>"
"<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>","<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>"
"<android.os.Debug: void resetGlobalAllocSize()>","<android.os.Debug: void resetGlobalAllocSize()>"
"<android.view.inputmethod.InputConnection: boolean performSpellCheck()>","<android.view.inputmethod.InputConnection: boolean performSpellCheck()>"
"<java.net.InetAddress: boolean equals(java.lang.Object)>","<java.net.InetAddress: boolean equals(java.lang.Object)>"
"<android.webkit.CookieManager: void setAcceptThirdPartyCookies(android.webkit.WebView,boolean)>","<android.webkit.CookieManager: void setAcceptThirdPartyCookies(android.webkit.WebView,boolean)>"
"<android.app.ActionBar: int getDisplayOptions()>","<android.app.ActionBar: int getDisplayOptions()>"
"<java.time.Duration: int getNano()>","<java.time.Duration: int getNano()>"
"<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()>","<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()>"
"<android.widget.Toolbar: int getCurrentContentInsetEnd()>","<android.widget.Toolbar: int getCurrentContentInsetEnd()>"
"<android.view.View: boolean showContextMenu()>","<android.view.View: boolean showContextMenu()>"
"<java.util.jar.Attributes$Name: int hashCode()>","<java.util.jar.Attributes$Name: int hashCode()>"
"<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>","<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>"
"<java.util.AbstractList: java.lang.Object get(int)>","<java.util.AbstractList: java.lang.Object get(int)>"
"<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>","<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>"
"<android.util.SparseIntArray: void <init>()>","<android.util.SparseIntArray: void <init>()>"
"<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>","<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>"
"<java.lang.Double: boolean isInfinite(double)>","<java.lang.Double: boolean isInfinite(double)>"
"<java.util.AbstractMap: java.util.Set entrySet()>","<java.util.AbstractMap: java.util.Set entrySet()>"
"<java.util.AbstractSequentialList: java.lang.Object get(int)>","<java.util.AbstractSequentialList: java.lang.Object get(int)>"
"<java.nio.channels.FileLock: void close()>","<java.nio.channels.FileLock: void close()>"
"<android.content.pm.ConfigurationInfo: java.lang.String toString()>","<android.content.pm.ConfigurationInfo: java.lang.String toString()>"
"<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>","<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>"
"<android.view.ViewGroup$MarginLayoutParams: void setMarginEnd(int)>","<android.view.ViewGroup$MarginLayoutParams: void setMarginEnd(int)>"
"<android.os.Parcel: void writeBooleanArray(boolean[])>","<android.os.Parcel: void writeBooleanArray(boolean[])>"
"<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.content.pm.VersionedPackage: java.lang.String toString()>","<android.content.pm.VersionedPackage: java.lang.String toString()>"
"<android.content.pm.InstallSourceInfo: void <init>()>","<android.content.pm.InstallSourceInfo: void <init>()>"
"<org.json.JSONObject: double getDouble(java.lang.String)>","<org.json.JSONObject: double getDouble(java.lang.String)>"
"<java.lang.NoSuchFieldException: void <init>()>","<java.lang.NoSuchFieldException: void <init>()>"
"<java.util.LinkedList: java.lang.Object getFirst()>","<java.util.LinkedList: java.lang.Object getFirst()>"
"<java.net.URL: java.lang.String getAuthority()>","<java.net.URL: java.lang.String getAuthority()>"
"<android.hardware.lights.LightsRequest: java.util.List getLightStates()>","<android.hardware.lights.LightsRequest: java.util.List getLightStates()>"
"<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<java.lang.Math: double copySign(double,double)>","<java.lang.Math: double copySign(double,double)>"
"<java.util.jar.JarFile: void <init>(java.io.File,boolean)>","<java.util.jar.JarFile: void <init>(java.io.File,boolean)>"
"<java.io.Console: void <init>()>","<java.io.Console: void <init>()>"
"<android.content.IntentSender$SendIntentException: void <init>()>","<android.content.IntentSender$SendIntentException: void <init>()>"
"<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.nio.file.AccessMode: void <clinit>()>","<java.nio.file.AccessMode: void <clinit>()>"
"<android.app.Notification: android.app.Notification clone()>","<android.app.Notification: android.app.Notification clone()>"
"<java.lang.String: void <init>(byte[])>","<java.lang.String: void <init>(byte[])>"
"<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>","<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setExtras(android.os.Bundle)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String toString()>","<android.view.textclassifier.TextClassificationContext: java.lang.String toString()>"
"<java.nio.charset.CoderResult: boolean isUnderflow()>","<java.nio.charset.CoderResult: boolean isUnderflow()>"
"<java.io.FileOutputStream: void <init>(java.io.File,boolean)>","<java.io.FileOutputStream: void <init>(java.io.File,boolean)>"
"<android.util.SparseBooleanArray: int hashCode()>","<android.util.SparseBooleanArray: int hashCode()>"
"<android.app.RemoteAction: void setEnabled(boolean)>","<android.app.RemoteAction: void setEnabled(boolean)>"
"<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()>","<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()>"
"<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>","<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>"
"<android.graphics.ImageDecoder$ImageInfo: java.lang.String getMimeType()>","<android.graphics.ImageDecoder$ImageInfo: java.lang.String getMimeType()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: boolean equals(java.lang.Object)>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: boolean equals(java.lang.Object)>"
"<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>","<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>"
"<android.media.session.MediaController$PlaybackInfo: void writeToParcel(android.os.Parcel,int)>","<android.media.session.MediaController$PlaybackInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>","<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>"
"<android.content.pm.PackageManager$Property: void <clinit>()>","<android.content.pm.PackageManager$Property: void <clinit>()>"
"<java.lang.Thread: void yield()>","<java.lang.Thread: void yield()>"
"<android.view.WindowManager$LayoutParams: boolean isFitInsetsIgnoringVisibility()>","<android.view.WindowManager$LayoutParams: boolean isFitInsetsIgnoringVisibility()>"
"<android.webkit.WebView: void invokeZoomPicker()>","<android.webkit.WebView: void invokeZoomPicker()>"
"<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)>","<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>"
"<java.lang.Math: long subtractExact(long,long)>","<java.lang.Math: long subtractExact(long,long)>"
"<android.graphics.RenderNode: boolean setAlpha(float)>","<android.graphics.RenderNode: boolean setAlpha(float)>"
"<java.lang.Long: long rotateRight(long,int)>","<java.lang.Long: long rotateRight(long,int)>"
"<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>","<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>"
"<android.os.Trace: void <init>()>","<android.os.Trace: void <init>()>"
"<android.view.InflateException: void <init>()>","<android.view.InflateException: void <init>()>"
"<java.lang.Math: int decrementExact(int)>","<java.lang.Math: int decrementExact(int)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>"
"<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>","<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>"
"<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>","<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>"
"<java.lang.StringBuilder: void trimToSize()>","<java.lang.StringBuilder: void trimToSize()>"
"<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>","<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>"
"<android.content.ContentResolver: int delete(android.net.Uri,android.os.Bundle)>","<android.content.ContentResolver: int delete(android.net.Uri,android.os.Bundle)>"
"<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>"
"<java.time.LocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
"<android.app.Notification$CarExtender$UnreadConversation: java.lang.String getParticipant()>","<android.app.Notification$CarExtender$UnreadConversation: java.lang.String getParticipant()>"
"<android.view.SurfaceControl$Transaction: void close()>","<android.view.SurfaceControl$Transaction: void close()>"
"<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>","<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>"
"<io.flutter.plugins.webviewflutter.d3: void <clinit>()>","<io.flutter.plugins.webviewflutter.d3: void <clinit>()>"
"<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>","<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>"
"<android.view.animation.Animation: void setFillEnabled(boolean)>","<android.view.animation.Animation: void setFillEnabled(boolean)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent build()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent build()>"
"<android.view.Window: android.transition.Transition getSharedElementEnterTransition()>","<android.view.Window: android.transition.Transition getSharedElementEnterTransition()>"
"<java.lang.Long: long reverseBytes(long)>","<java.lang.Long: long reverseBytes(long)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>"
"<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>","<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>"
"<android.app.Notification$MessagingStyle$Message: android.os.Bundle getExtras()>","<android.app.Notification$MessagingStyle$Message: android.os.Bundle getExtras()>"
"<android.util.Size: android.util.Size parseSize(java.lang.String)>","<android.util.Size: android.util.Size parseSize(java.lang.String)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: boolean shouldIncludeTypesFromTextClassifier()>","<android.view.textclassifier.TextClassifier$EntityConfig: boolean shouldIncludeTypesFromTextClassifier()>"
"<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>","<java.io.ObjectStreamClass: java.io.ObjectStreamField[] getFields()>"
"<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()>","<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()>"
"<java.net.Socket: boolean getOOBInline()>","<java.net.Socket: boolean getOOBInline()>"
"<android.content.pm.VersionedPackage: void <clinit>()>","<android.content.pm.VersionedPackage: void <clinit>()>"
"<android.widget.PopupWindow: void <init>(android.content.Context)>","<android.widget.PopupWindow: void <init>(android.content.Context)>"
"<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>","<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>"
"<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>","<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>"
"<android.view.WindowInsets$Side: int all()>","<android.view.WindowInsets$Side: int all()>"
"<android.app.Dialog: void dismiss()>","<android.app.Dialog: void dismiss()>"
"<java.lang.reflect.Modifier: boolean isFinal(int)>","<java.lang.reflect.Modifier: boolean isFinal(int)>"
"<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>","<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>"
"<android.content.Context: void revokeSelfPermissionsOnKill(java.util.Collection)>","<android.content.Context: void revokeSelfPermissionsOnKill(java.util.Collection)>"
"<android.app.Notification$Action$Builder: android.os.Bundle getExtras()>","<android.app.Notification$Action$Builder: android.os.Bundle getExtras()>"
"<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>","<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>"
"<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>","<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)>"
"<java.nio.file.attribute.FileTime: int compareTo(java.lang.Object)>","<java.nio.file.attribute.FileTime: int compareTo(java.lang.Object)>"
"<java.lang.String: int compareTo(java.lang.Object)>","<java.lang.String: int compareTo(java.lang.Object)>"
"<java.util.stream.DoubleStream: boolean noneMatch(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: boolean noneMatch(java.util.function.DoublePredicate)>"
"<java.time.temporal.ChronoField: boolean isTimeBased()>","<java.time.temporal.ChronoField: boolean isTimeBased()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreSaveInstanceState(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreSaveInstanceState(android.app.Activity,android.os.Bundle)>"
"<java.util.DoubleSummaryStatistics: double getMin()>","<java.util.DoubleSummaryStatistics: double getMin()>"
"<android.view.ViewStructure: void setHint(java.lang.CharSequence)>","<android.view.ViewStructure: void setHint(java.lang.CharSequence)>"
"<java.security.cert.X509Extension: java.util.Set getCriticalExtensionOIDs()>","<java.security.cert.X509Extension: java.util.Set getCriticalExtensionOIDs()>"
"<java.util.OptionalInt: int orElse(int)>","<java.util.OptionalInt: int orElse(int)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>"
"<java.time.LocalDate: java.time.LocalDate plusYears(long)>","<java.time.LocalDate: java.time.LocalDate plusYears(long)>"
"<android.webkit.WebMessage: java.lang.String getData()>","<android.webkit.WebMessage: java.lang.String getData()>"
"<java.time.Duration: int toMinutesPart()>","<java.time.Duration: int toMinutesPart()>"
"<android.os.Handler: void <init>(android.os.Looper)>","<android.os.Handler: void <init>(android.os.Looper)>"
"<android.widget.Scroller: void setFriction(float)>","<android.widget.Scroller: void setFriction(float)>"
"<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>","<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>"
"<java.io.ObjectOutputStream: void writeBoolean(boolean)>","<java.io.ObjectOutputStream: void writeBoolean(boolean)>"
"<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.view.inputmethod.InputContentInfo: void <clinit>()>","<android.view.inputmethod.InputContentInfo: void <clinit>()>"
"<android.view.View: int getSolidColor()>","<android.view.View: int getSolidColor()>"
"<java.util.AbstractList: boolean add(java.lang.Object)>","<java.util.AbstractList: boolean add(java.lang.Object)>"
"<android.app.RemoteInput: java.lang.CharSequence getLabel()>","<android.app.RemoteInput: java.lang.CharSequence getLabel()>"
"<android.content.res.Resources: java.io.InputStream openRawResource(int)>","<android.content.res.Resources: java.io.InputStream openRawResource(int)>"
"<java.util.NavigableMap: java.util.Map$Entry firstEntry()>","<java.util.NavigableMap: java.util.Map$Entry firstEntry()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View: void dispatchDisplayHint(int)>","<android.view.View: void dispatchDisplayHint(int)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>","<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>"
"<android.view.inputmethod.CursorAnchorInfo: android.view.inputmethod.EditorBoundsInfo getEditorBoundsInfo()>","<android.view.inputmethod.CursorAnchorInfo: android.view.inputmethod.EditorBoundsInfo getEditorBoundsInfo()>"
"<android.view.View: android.graphics.drawable.Drawable getForeground()>","<android.view.View: android.graphics.drawable.Drawable getForeground()>"
"<java.util.HashSet: boolean isEmpty()>","<java.util.HashSet: boolean isEmpty()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>"
"<java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>"
"<java.time.OffsetTime: java.lang.String toString()>","<java.time.OffsetTime: java.lang.String toString()>"
"<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>","<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>"
"<android.util.Size: int getWidth()>","<android.util.Size: int getWidth()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>","<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>"
"<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>","<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>"
"<java.util.OptionalLong: void <init>()>","<java.util.OptionalLong: void <init>()>"
"<android.view.ContentInfo: int getSource()>","<android.view.ContentInfo: int getSource()>"
"<java.lang.Class: java.lang.Class getEnclosingClass()>","<java.lang.Class: java.lang.Class getEnclosingClass()>"
"<android.webkit.ConsoleMessage$MessageLevel: void <clinit>()>","<android.webkit.ConsoleMessage$MessageLevel: void <clinit>()>"
"<java.lang.Long: int compareTo(java.lang.Long)>","<java.lang.Long: int compareTo(java.lang.Long)>"
"<android.view.View: void draw(android.graphics.Canvas)>","<android.view.View: void draw(android.graphics.Canvas)>"
"<android.webkit.CookieManager: boolean acceptThirdPartyCookies(android.webkit.WebView)>","<android.webkit.CookieManager: boolean acceptThirdPartyCookies(android.webkit.WebView)>"
"<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>","<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>"
"<android.widget.RemoteViews$RemoteResponse: void <init>()>","<android.widget.RemoteViews$RemoteResponse: void <init>()>"
"<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>","<android.app.AppComponentFactory: java.lang.ClassLoader instantiateClassLoader(java.lang.ClassLoader,android.content.pm.ApplicationInfo)>"
"<java.util.Locale$Builder: java.util.Locale$Builder setScript(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setScript(java.lang.String)>"
"<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>","<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>"
"<java.lang.Character$Subset: void <init>(java.lang.String)>","<java.lang.Character$Subset: void <init>(java.lang.String)>"
"<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>","<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>"
"<android.icu.util.ULocale: java.lang.String getScript(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getScript(java.lang.String)>"
"<android.widget.ImageView: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.widget.ImageView: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<io.flutter.plugins.webviewflutter.j1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.j1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.graphics.Canvas: void scale(float,float)>","<android.graphics.Canvas: void scale(float,float)>"
"<java.util.OptionalLong: java.util.OptionalLong empty()>","<java.util.OptionalLong: java.util.OptionalLong empty()>"
"<java.lang.reflect.Method: java.lang.String getName()>","<java.lang.reflect.Method: java.lang.String getName()>"
"<java.util.OptionalLong: java.lang.String toString()>","<java.util.OptionalLong: java.lang.String toString()>"
"<java.util.Map$Entry: java.util.Comparator comparingByKey(java.util.Comparator)>","<java.util.Map$Entry: java.util.Comparator comparingByKey(java.util.Comparator)>"
"<android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>","<android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>"
"<android.content.res.TypedArray: int getIndexCount()>","<android.content.res.TypedArray: int getIndexCount()>"
"<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>","<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>"
"<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: android.app.VoiceInteractor$PickOptionRequest$Option addSynonym(java.lang.CharSequence)>","<android.app.VoiceInteractor$PickOptionRequest$Option: android.app.VoiceInteractor$PickOptionRequest$Option addSynonym(java.lang.CharSequence)>"
"<java.math.BigInteger: java.math.BigInteger flipBit(int)>","<java.math.BigInteger: java.math.BigInteger flipBit(int)>"
"<java.util.HashMap: java.util.Set keySet()>","<java.util.HashMap: java.util.Set keySet()>"
"<android.webkit.WebViewRenderProcessClient: void <init>()>","<android.webkit.WebViewRenderProcessClient: void <init>()>"
"<android.media.VolumeProvider: void onAdjustVolume(int)>","<android.media.VolumeProvider: void onAdjustVolume(int)>"
"<android.view.Surface: void readFromParcel(android.os.Parcel)>","<android.view.Surface: void readFromParcel(android.os.Parcel)>"
"<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>","<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>"
"<java.util.Comparator: java.util.Comparator thenComparingLong(java.util.function.ToLongFunction)>","<java.util.Comparator: java.util.Comparator thenComparingLong(java.util.function.ToLongFunction)>"
"<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>","<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAndSet(int,java.lang.Object)>"
"<java.io.PrintStream: java.io.PrintStream append(char)>","<java.io.PrintStream: java.io.PrintStream append(char)>"
"<android.media.session.MediaSession$Callback: void onPlayFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPlayFromSearch(java.lang.String,android.os.Bundle)>"
"<android.graphics.Canvas: void enableZ()>","<android.graphics.Canvas: void enableZ()>"
"<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>"
"<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>","<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>"
"<android.view.accessibility.AccessibilityRecord: boolean isChecked()>","<android.view.accessibility.AccessibilityRecord: boolean isChecked()>"
"<android.app.ActionBar: android.content.Context getThemedContext()>","<android.app.ActionBar: android.content.Context getThemedContext()>"
"<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>"
"<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>","<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>"
"<android.os.Build: void <init>()>","<android.os.Build: void <init>()>"
"<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>","<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>"
"<android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)>","<android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)>"
"<java.lang.ThreadLocal: void set(java.lang.Object)>","<java.lang.ThreadLocal: void set(java.lang.Object)>"
"<android.view.ViewParent: void requestTransparentRegion(android.view.View)>","<android.view.ViewParent: void requestTransparentRegion(android.view.View)>"
"<org.json.JSONObject: void <init>(java.util.Map)>","<org.json.JSONObject: void <init>(java.util.Map)>"
"<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.util.Arrays: void parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)>","<java.util.Arrays: void parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)>"
"<java.lang.Integer: long longValue()>","<java.lang.Integer: long longValue()>"
"<android.view.MotionEvent: float getAxisValue(int)>","<android.view.MotionEvent: float getAxisValue(int)>"
"<android.animation.Keyframe: void setFraction(float)>","<android.animation.Keyframe: void setFraction(float)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(java.lang.Object,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: void set(java.lang.Object,long)>"
"<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>","<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>"
"<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()>","<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()>"
"<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>","<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline getPreferredFrameTimeline()>","<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline getPreferredFrameTimeline()>"
"<java.time.zone.ZoneRules: boolean isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)>","<java.time.zone.ZoneRules: boolean isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)>"
"<android.view.Display$Mode: void <init>()>","<android.view.Display$Mode: void <init>()>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()>"
"<java.time.LocalTime: java.time.LocalTime of(int,int,int,int)>","<java.time.LocalTime: java.time.LocalTime of(int,int,int,int)>"
"<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>","<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>"
"<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>","<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>"
"<android.icu.util.ULocale: java.lang.String getCharacterOrientation()>","<android.icu.util.ULocale: java.lang.String getCharacterOrientation()>"
"<android.widget.Toolbar: void setTitleMarginTop(int)>","<android.widget.Toolbar: void setTitleMarginTop(int)>"
"<android.os.Debug: void enableEmulatorTraceOutput()>","<android.os.Debug: void enableEmulatorTraceOutput()>"
"<java.util.AbstractSequentialList: void <init>()>","<java.util.AbstractSequentialList: void <init>()>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setSemanticAction(int)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setSemanticAction(int)>"
"<java.time.ZoneOffset: java.lang.String getId()>","<java.time.ZoneOffset: java.lang.String getId()>"
"<android.view.ViewGroup: void removeView(android.view.View)>","<android.view.ViewGroup: void removeView(android.view.View)>"
"<android.media.ImageReader: android.media.Image acquireNextImage()>","<android.media.ImageReader: android.media.Image acquireNextImage()>"
"<android.os.LocaleList: java.util.Locale get(int)>","<android.os.LocaleList: java.util.Locale get(int)>"
"<android.text.PrecomputedText: char charAt(int)>","<android.text.PrecomputedText: char charAt(int)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemGestureInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemGestureInsets(android.graphics.Insets)>"
"<java.lang.Boolean: java.lang.String toString(boolean)>","<java.lang.Boolean: java.lang.String toString(boolean)>"
"<android.widget.RemoteViews: int getLayoutId()>","<android.widget.RemoteViews: int getLayoutId()>"
"<android.graphics.ColorSpace$Adaptation: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$Adaptation: void <init>(java.lang.String,int)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setBufferedPosition(long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setBufferedPosition(long)>"
"<java.nio.charset.CoderResult: boolean isError()>","<java.nio.charset.CoderResult: boolean isError()>"
"<java.lang.Long: void <clinit>()>","<java.lang.Long: void <clinit>()>"
"<java.util.stream.IntStream: java.util.OptionalInt findFirst()>","<java.util.stream.IntStream: java.util.OptionalInt findFirst()>"
"<java.util.jar.JarEntry: void <init>(java.lang.String)>","<java.util.jar.JarEntry: void <init>(java.lang.String)>"
"<android.app.Activity: void stopLockTask()>","<android.app.Activity: void stopLockTask()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: void <init>()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: void <init>()>"
"<android.print.PageRange: java.lang.String toString()>","<android.print.PageRange: java.lang.String toString()>"
"<java.lang.StringBuilder: int codePointAt(int)>","<java.lang.StringBuilder: int codePointAt(int)>"
"<java.time.temporal.ValueRange: void <init>()>","<java.time.temporal.ValueRange: void <init>()>"
"<android.view.ViewConfiguration: int getMaximumFlingVelocity()>","<android.view.ViewConfiguration: int getMaximumFlingVelocity()>"
"<android.widget.PopupWindow: int getWidth()>","<android.widget.PopupWindow: int getWidth()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>"
"<java.lang.reflect.Member: java.lang.String getName()>","<java.lang.reflect.Member: java.lang.String getName()>"
"<android.transition.Transition: void captureStartValues(android.transition.TransitionValues)>","<android.transition.Transition: void captureStartValues(android.transition.TransitionValues)>"
"<java.util.ArrayDeque: java.lang.Object clone()>","<java.util.ArrayDeque: java.lang.Object clone()>"
"<java.time.LocalDateTime: int compareTo(java.lang.Object)>","<java.time.LocalDateTime: int compareTo(java.lang.Object)>"
"<android.view.InputEvent: long getEventTime()>","<android.view.InputEvent: long getEventTime()>"
"<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.net.http.SslCertificate: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.View$MeasureSpec: int getSize(int)>","<android.view.View$MeasureSpec: int getSize(int)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setJustificationMode(int)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setJustificationMode(int)>"
"<android.media.session.MediaSessionManager$OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>","<android.media.session.MediaSessionManager$OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>"
"<android.opengl.Matrix: void perspectiveM(float[],int,float,float,float,float)>","<android.opengl.Matrix: void perspectiveM(float[],int,float,float,float,float)>"
"<android.view.contentcapture.ContentCaptureSessionId: boolean equals(java.lang.Object)>","<android.view.contentcapture.ContentCaptureSessionId: boolean equals(java.lang.Object)>"
"<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>","<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>"
"<android.content.ContextWrapper: android.content.Context createWindowContext(int,android.os.Bundle)>","<android.content.ContextWrapper: android.content.Context createWindowContext(int,android.os.Bundle)>"
"<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>","<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>"
"<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>","<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>"
"<o.c: void <init>(o.d$a)>","<o.c: void <init>(o.d$a)>"
"<java.util.List: boolean retainAll(java.util.Collection)>","<java.util.List: boolean retainAll(java.util.Collection)>"
"<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<android.content.res.Resources: android.content.res.Configuration getConfiguration()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowSpan(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowSpan(int)>"
"<android.content.pm.ApplicationInfo: java.lang.CharSequence getCategoryTitle(android.content.Context,int)>","<android.content.pm.ApplicationInfo: java.lang.CharSequence getCategoryTitle(android.content.Context,int)>"
"<java.lang.StringBuilder: java.lang.String substring(int,int)>","<java.lang.StringBuilder: java.lang.String substring(int,int)>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>"
"<android.view.ViewPropertyAnimator: void cancel()>","<android.view.ViewPropertyAnimator: void cancel()>"
"<android.webkit.WebView: android.graphics.Bitmap getFavicon()>","<android.webkit.WebView: android.graphics.Bitmap getFavicon()>"
"<android.graphics.Matrix: void mapPoints(float[])>","<android.graphics.Matrix: void mapPoints(float[])>"
"<android.content.Context: java.io.File[] getExternalMediaDirs()>","<android.content.Context: java.io.File[] getExternalMediaDirs()>"
"<android.os.Looper: android.os.MessageQueue myQueue()>","<android.os.Looper: android.os.MessageQueue myQueue()>"
"<java.security.Timestamp: java.util.Date getTimestamp()>","<java.security.Timestamp: java.util.Date getTimestamp()>"
"<android.view.DragEvent: int getAction()>","<android.view.DragEvent: int getAction()>"
"<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)>"
"<android.widget.Toolbar: void onAttachedToWindow()>","<android.widget.Toolbar: void onAttachedToWindow()>"
"<android.view.WindowManager$LayoutParams: void <clinit>()>","<android.view.WindowManager$LayoutParams: void <clinit>()>"
"<android.graphics.Xfermode: void <init>()>","<android.graphics.Xfermode: void <init>()>"
"<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>","<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>"
"<android.view.View: void layout(int,int,int,int)>","<android.view.View: void layout(int,int,int,int)>"
"<android.text.style.ClickableSpan: void <init>()>","<android.text.style.ClickableSpan: void <init>()>"
"<java.util.Currency: int getDefaultFractionDigits()>","<java.util.Currency: int getDefaultFractionDigits()>"
"<java.net.Socket: void <init>(java.net.InetAddress,int)>","<java.net.Socket: void <init>(java.net.InetAddress,int)>"
"<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>","<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>"
"<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>","<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>"
"<java.io.FileOutputStream: void write(int)>","<java.io.FileOutputStream: void write(int)>"
"<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>","<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>"
"<java.util.stream.BaseStream: void close()>","<java.util.stream.BaseStream: void close()>"
"<android.content.pm.PackageInstaller: void abandonSession(int)>","<android.content.pm.PackageInstaller: void abandonSession(int)>"
"<android.content.pm.ResolveInfo: void <clinit>()>","<android.content.pm.ResolveInfo: void <clinit>()>"
"<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>","<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>"
"<java.time.Period: java.time.chrono.ChronoPeriod normalized()>","<java.time.Period: java.time.chrono.ChronoPeriod normalized()>"
"<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()>","<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()>"
"<java.util.Spliterator$OfInt: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfInt: java.util.Spliterator$OfPrimitive trySplit()>"
"<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>"
"<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger or(java.math.BigInteger)>"
"<android.content.pm.PackageInstaller$Session: java.io.OutputStream openWrite(java.lang.String,long,long)>","<android.content.pm.PackageInstaller$Session: java.io.OutputStream openWrite(java.lang.String,long,long)>"
"<java.nio.ShortBuffer: java.nio.Buffer position(int)>","<java.nio.ShortBuffer: java.nio.Buffer position(int)>"
"<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>","<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>"
"<android.os.Parcel: java.lang.String[] createStringArray()>","<android.os.Parcel: java.lang.String[] createStringArray()>"
"<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>","<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>"
"<android.app.ActionBar: void setHomeActionContentDescription(java.lang.CharSequence)>","<android.app.ActionBar: void setHomeActionContentDescription(java.lang.CharSequence)>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int)>"
"<java.util.concurrent.atomic.AtomicBoolean: void setPlain(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: void setPlain(boolean)>"
"<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>","<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>"
"<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>","<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>"
"<android.content.pm.PackageInstaller: void installExistingPackage(java.lang.String,int,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void installExistingPackage(java.lang.String,int,android.content.IntentSender)>"
"<android.graphics.Color: void colorToHSV(int,float[])>","<android.graphics.Color: void colorToHSV(int,float[])>"
"<android.os.Parcel: void writeInterfaceArray(android.os.IInterface[])>","<android.os.Parcel: void writeInterfaceArray(android.os.IInterface[])>"
"<java.util.Collection: boolean equals(java.lang.Object)>","<java.util.Collection: boolean equals(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>"
"<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()>","<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()>"
"<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>","<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<java.util.function.Predicate: java.util.function.Predicate not(java.util.function.Predicate)>","<java.util.function.Predicate: java.util.function.Predicate not(java.util.function.Predicate)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo build()>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo build()>"
"<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>","<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>"
"<java.util.OptionalDouble: double orElseThrow(java.util.function.Supplier)>","<java.util.OptionalDouble: double orElseThrow(java.util.function.Supplier)>"
"<android.view.accessibility.AccessibilityEvent: void <init>(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityEvent: void <init>(android.view.accessibility.AccessibilityEvent)>"
"<android.view.SurfaceControlViewHost: android.view.View getView()>","<android.view.SurfaceControlViewHost: android.view.View getView()>"
"<android.database.sqlite.SQLiteProgram: void clearBindings()>","<android.database.sqlite.SQLiteProgram: void clearBindings()>"
"<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: void setHighlightColor(int)>","<android.widget.TextView: void setHighlightColor(int)>"
"<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>","<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>"
"<java.lang.Double: void <init>(java.lang.String)>","<java.lang.Double: void <init>(java.lang.String)>"
"<java.lang.Integer: int compare(int,int)>","<java.lang.Integer: int compare(int,int)>"
"<android.view.View: void onMeasure(int,int)>","<android.view.View: void onMeasure(int,int)>"
"<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>","<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>"
"<android.view.inputmethod.CompletionInfo: int describeContents()>","<android.view.inputmethod.CompletionInfo: int describeContents()>"
"<android.webkit.WebStorage: void deleteOrigin(java.lang.String)>","<android.webkit.WebStorage: void deleteOrigin(java.lang.String)>"
"<android.view.View: boolean performLongClick(float,float)>","<android.view.View: boolean performLongClick(float,float)>"
"<android.content.Intent: java.lang.Object getParcelableExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.lang.Object getParcelableExtra(java.lang.String,java.lang.Class)>"
"<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetVolatile(int,int)>","<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetVolatile(int,int)>"
"<android.app.Dialog: void setContentView(int)>","<android.app.Dialog: void setContentView(int)>"
"<android.text.method.MovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>","<android.text.method.MovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>"
"<java.util.function.DoubleBinaryOperator: double applyAsDouble(double,double)>","<java.util.function.DoubleBinaryOperator: double applyAsDouble(double,double)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostPaused(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostPaused(android.app.Activity)>"
"<android.app.ActivityManager$TaskDescription: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$TaskDescription: void readFromParcel(android.os.Parcel)>"
"<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>","<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>"
"<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>","<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>"
"<java.lang.Double: java.lang.Double valueOf(java.lang.String)>","<java.lang.Double: java.lang.Double valueOf(java.lang.String)>"
"<java.util.ArrayDeque: void <init>(int)>","<java.util.ArrayDeque: void <init>(int)>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>"
"<java.time.chrono.IsoChronology: java.lang.String getCalendarType()>","<java.time.chrono.IsoChronology: java.lang.String getCalendarType()>"
"<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.util.stream.LongStream: java.util.stream.LongStream iterate(long,java.util.function.LongUnaryOperator)>","<java.util.stream.LongStream: java.util.stream.LongStream iterate(long,java.util.function.LongUnaryOperator)>"
"<android.widget.AbsListView: void setStackFromBottom(boolean)>","<android.widget.AbsListView: void setStackFromBottom(boolean)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>","<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"
"<android.graphics.Matrix: void mapVectors(float[],float[])>","<android.graphics.Matrix: void mapVectors(float[],float[])>"
"<android.view.View: void setLayerPaint(android.graphics.Paint)>","<android.view.View: void setLayerPaint(android.graphics.Paint)>"
"<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>","<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>()>","<android.view.accessibility.AccessibilityNodeInfo: void <init>()>"
"<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>","<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset)>","<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset)>"
"<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>","<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>"
"<android.text.Editable: void clearSpans()>","<android.text.Editable: void clearSpans()>"
"<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>","<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>"
"<java.util.SortedMap: java.lang.Object firstKey()>","<java.util.SortedMap: java.lang.Object firstKey()>"
"<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>"
"<android.os.Handler: java.lang.String toString()>","<android.os.Handler: java.lang.String toString()>"
"<android.animation.ValueAnimator: boolean isRunning()>","<android.animation.ValueAnimator: boolean isRunning()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>"
"<android.app.Notification$CarExtender: void <init>(android.app.Notification)>","<android.app.Notification$CarExtender: void <init>(android.app.Notification)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.Condition newCondition()>"
"<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>","<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>"
"<android.webkit.WebSettings$RenderPriority: void <clinit>()>","<android.webkit.WebSettings$RenderPriority: void <clinit>()>"
"<android.view.ActionMode: android.view.Menu getMenu()>","<android.view.ActionMode: android.view.Menu getMenu()>"
"<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>","<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>"
"<android.view.View: float getScaleX()>","<android.view.View: float getScaleX()>"
"<java.util.NavigableSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>","<java.util.NavigableSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>"
"<android.widget.Toolbar: int getTitleMarginTop()>","<android.widget.Toolbar: int getTitleMarginTop()>"
"<android.view.AbsSavedState: void <init>(android.os.Parcel)>","<android.view.AbsSavedState: void <init>(android.os.Parcel)>"
"<android.widget.TextView: int getMaxHeight()>","<android.widget.TextView: int getMaxHeight()>"
"<java.time.Duration: long toNanos()>","<java.time.Duration: long toNanos()>"
"<android.graphics.Paint$Align: void <clinit>()>","<android.graphics.Paint$Align: void <clinit>()>"
"<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>"
"<javax.security.auth.x500.X500Principal: java.lang.String getName()>","<javax.security.auth.x500.X500Principal: java.lang.String getName()>"
"<java.util.stream.Stream: java.util.stream.Stream distinct()>","<java.util.stream.Stream: java.util.stream.Stream distinct()>"
"<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>","<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>"
"<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>","<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String)>"
"<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>","<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>"
"<android.os.Parcel: void readInterfaceList(java.util.List,java.util.function.Function)>","<android.os.Parcel: void readInterfaceList(java.util.List,java.util.function.Function)>"
"<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>","<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>"
"<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>","<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>"
"<java.security.cert.CertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.cert.CertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.os.Bundle: void remove(java.lang.String)>","<android.os.Bundle: void remove(java.lang.String)>"
"<android.content.pm.PackageInstaller$Session: void abandon()>","<android.content.pm.PackageInstaller$Session: void abandon()>"
"<android.content.ContextWrapper: boolean deleteSharedPreferences(java.lang.String)>","<android.content.ContextWrapper: boolean deleteSharedPreferences(java.lang.String)>"
"<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>","<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>"
"<java.time.Month: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.Month: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>","<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>"
"<java.lang.ThreadGroup: void interrupt()>","<java.lang.ThreadGroup: void interrupt()>"
"<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>","<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>","<java.util.concurrent.CopyOnWriteArraySet: boolean isEmpty()>"
"<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>","<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>"
"<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>"
"<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)>","<java.util.concurrent.ThreadLocalRandom: int nextInt(int,int)>"
"<android.webkit.WebSettings: void setTextZoom(int)>","<android.webkit.WebSettings: void setTextZoom(int)>"
"<java.io.Writer: void flush()>","<java.io.Writer: void flush()>"
"<android.util.ArrayMap: java.lang.Object removeAt(int)>","<android.util.ArrayMap: java.lang.Object removeAt(int)>"
"<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>","<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>"
"<android.view.InputDevice: android.hardware.SensorManager getSensorManager()>","<android.view.InputDevice: android.hardware.SensorManager getSensorManager()>"
"<java.net.InetAddress: void <init>()>","<java.net.InetAddress: void <init>()>"
"<java.time.Month: void <clinit>()>","<java.time.Month: void <clinit>()>"
"<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>","<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>"
"<org.json.JSONArray: java.lang.String optString(int)>","<org.json.JSONArray: java.lang.String optString(int)>"
"<android.view.ViewParent: boolean canResolveLayoutDirection()>","<android.view.ViewParent: boolean canResolveLayoutDirection()>"
"<android.content.pm.PackageManager$Property: java.lang.String getString()>","<android.content.pm.PackageManager$Property: java.lang.String getString()>"
"<java.lang.Integer: java.lang.Integer decode(java.lang.String)>","<java.lang.Integer: java.lang.Integer decode(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
"<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>","<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>"
"<java.util.regex.Matcher: int regionStart()>","<java.util.regex.Matcher: int regionStart()>"
"<java.util.HashSet: boolean add(java.lang.Object)>","<java.util.HashSet: boolean add(java.lang.Object)>"
"<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>","<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>"
"<android.graphics.Path$Op: void <clinit>()>","<android.graphics.Path$Op: void <clinit>()>"
"<android.view.View: java.lang.String[] getReceiveContentMimeTypes()>","<android.view.View: java.lang.String[] getReceiveContentMimeTypes()>"
"<android.widget.RemoteViews: void setFloatDimenAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setFloatDimenAttr(int,java.lang.String,int)>"
"<android.webkit.ConsoleMessage$MessageLevel: void <init>(java.lang.String,int)>","<android.webkit.ConsoleMessage$MessageLevel: void <init>(java.lang.String,int)>"
"<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>","<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>"
"<android.widget.ListPopupWindow: android.graphics.Rect getEpicenterBounds()>","<android.widget.ListPopupWindow: android.graphics.Rect getEpicenterBounds()>"
"<android.view.View: void setImportantForAccessibility(int)>","<android.view.View: void setImportantForAccessibility(int)>"
"<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowDetached()>","<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowDetached()>"
"<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator)>","<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator)>"
"<java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>","<java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>"
"<java.util.function.DoubleConsumer: java.util.function.DoubleConsumer andThen(java.util.function.DoubleConsumer)>","<java.util.function.DoubleConsumer: java.util.function.DoubleConsumer andThen(java.util.function.DoubleConsumer)>"
"<io.flutter.embedding.android.j: boolean test(java.lang.Object)>","<io.flutter.embedding.android.j: boolean test(java.lang.Object)>"
"<android.hardware.lights.LightsRequest: java.util.List getLights()>","<android.hardware.lights.LightsRequest: java.util.List getLights()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<java.util.function.Predicate: java.util.function.Predicate or(java.util.function.Predicate)>","<java.util.function.Predicate: java.util.function.Predicate or(java.util.function.Predicate)>"
"<java.nio.channels.DatagramChannel: boolean isConnected()>","<java.nio.channels.DatagramChannel: boolean isConnected()>"
"<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>","<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>"
"<android.view.View: boolean onSetAlpha(int)>","<android.view.View: boolean onSetAlpha(int)>"
"<android.view.contentcapture.ContentCaptureSession: void notifySessionResumed()>","<android.view.contentcapture.ContentCaptureSession: void notifySessionResumed()>"
"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>","<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"
"<java.lang.Boolean: boolean getBoolean(java.lang.String)>","<java.lang.Boolean: boolean getBoolean(java.lang.String)>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.nio.ByteBuffer)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.nio.ByteBuffer)>"
"<android.content.ContextWrapper: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>","<android.content.ContextWrapper: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>"
"<android.os.Parcel: void writeArray(java.lang.Object[])>","<android.os.Parcel: void writeArray(java.lang.Object[])>"
"<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>","<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>"
"<android.view.View: void setLongClickable(boolean)>","<android.view.View: void setLongClickable(boolean)>"
"<java.lang.Enum: java.lang.String name()>","<java.lang.Enum: java.lang.String name()>"
"<java.io.OutputStream: void <init>()>","<java.io.OutputStream: void <init>()>"
"<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>","<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>"
"<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>","<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>"
"<java.lang.Character: int hashCode(char)>","<java.lang.Character: int hashCode(char)>"
"<android.webkit.WebView: void flingScroll(int,int)>","<android.webkit.WebView: void flingScroll(int,int)>"
"<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>","<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>"
"<android.text.PrecomputedText: float getWidth(int,int)>","<android.text.PrecomputedText: float getWidth(int,int)>"
"<android.view.ViewStructure: void setTextStyle(float,int,int,int)>","<android.view.ViewStructure: void setTextStyle(float,int,int,int)>"
"<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>","<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>"
"<java.lang.Float: boolean isFinite(float)>","<java.lang.Float: boolean isFinite(float)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>","<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>"
"<java.util.Arrays: void sort(java.lang.Object[])>","<java.util.Arrays: void sort(java.lang.Object[])>"
"<android.widget.PopupWindow: void update(int,int,int,int,boolean)>","<android.widget.PopupWindow: void update(int,int,int,int,boolean)>"
"<android.view.MotionEvent: float getX()>","<android.view.MotionEvent: float getX()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(int)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(int)>"
"<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>","<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>"
"<java.lang.Float: void <init>(double)>","<java.lang.Float: void <init>(double)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>"
"<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>"
"<android.animation.Keyframe: java.lang.Object getValue()>","<android.animation.Keyframe: java.lang.Object getValue()>"
"<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.util.ArrayMap: void putAll(java.util.Map)>","<android.util.ArrayMap: void putAll(java.util.Map)>"
"<android.widget.TextView: void onVisibilityAggregated(boolean)>","<android.widget.TextView: void onVisibilityAggregated(boolean)>"
"<android.app.Notification$Action$Builder: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>","<android.app.Notification$Action$Builder: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>"
"<android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>","<android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>"
"<android.animation.Animator: void end()>","<android.animation.Animator: void end()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>"
"<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)>","<android.view.inputmethod.BaseInputConnection: java.lang.CharSequence getSelectedText(int)>"
"<android.app.Service: void <init>()>","<android.app.Service: void <init>()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)>"
"<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>","<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>"
"<java.security.PermissionCollection: boolean implies(java.security.Permission)>","<java.security.PermissionCollection: boolean implies(java.security.Permission)>"
"<java.time.Instant: boolean isAfter(java.time.Instant)>","<java.time.Instant: boolean isAfter(java.time.Instant)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()>"
"<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>"
"<java.util.concurrent.locks.Lock: void lock()>","<java.util.concurrent.locks.Lock: void lock()>"
"<android.app.ActivityManager: java.util.List getRunningTasks(int)>","<android.app.ActivityManager: java.util.List getRunningTasks(int)>"
"<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>","<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.content.Context: void setWallpaper(android.graphics.Bitmap)>","<android.content.Context: void setWallpaper(android.graphics.Bitmap)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isFair()>","<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isFair()>"
"<android.view.MotionEvent: float getTouchMinor()>","<android.view.MotionEvent: float getTouchMinor()>"
"<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
"<java.time.chrono.ChronoLocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>"
"<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<java.nio.LongBuffer: java.nio.LongBuffer slice()>","<java.nio.LongBuffer: java.nio.LongBuffer slice()>"
"<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>","<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>"
"<java.util.NavigableMap: java.util.NavigableSet descendingKeySet()>","<java.util.NavigableMap: java.util.NavigableSet descendingKeySet()>"
"<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>","<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>"
"<android.content.res.Resources$Theme: int hashCode()>","<android.content.res.Resources$Theme: int hashCode()>"
"<android.graphics.ColorSpace: java.lang.String toString()>","<android.graphics.ColorSpace: java.lang.String toString()>"
"<java.io.Reader: void close()>","<java.io.Reader: void close()>"
"<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>","<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>"
"<java.util.Arrays: void fill(boolean[],boolean)>","<java.util.Arrays: void fill(boolean[],boolean)>"
"<android.os.BaseBundle: boolean isEmpty()>","<android.os.BaseBundle: boolean isEmpty()>"
"<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator identity()>","<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator identity()>"
"<java.net.URLConnection: long getIfModifiedSince()>","<java.net.URLConnection: long getIfModifiedSince()>"
"<android.media.AudioAttributes: int getSpatializationBehavior()>","<android.media.AudioAttributes: int getSpatializationBehavior()>"
"<java.security.CodeSource: java.net.URL getLocation()>","<java.security.CodeSource: java.net.URL getLocation()>"
"<android.graphics.Insets: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Insets: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String)>"
"<android.animation.Animator: void setupStartValues()>","<android.animation.Animator: void setupStartValues()>"
"<java.util.HashMap: void <init>(int)>","<java.util.HashMap: void <init>(int)>"
"<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>","<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>"
"<java.io.DataInput: int readInt()>","<java.io.DataInput: int readInt()>"
"<android.widget.Scroller: void startScroll(int,int,int,int)>","<android.widget.Scroller: void startScroll(int,int,int,int)>"
"<android.widget.Scroller: int getCurrX()>","<android.widget.Scroller: int getCurrX()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool()>"
"<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>","<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>"
"<android.app.PendingIntent: void send()>","<android.app.PendingIntent: void send()>"
"<android.hardware.display.DeviceProductInfo: int getConnectionToSinkType()>","<android.hardware.display.DeviceProductInfo: int getConnectionToSinkType()>"
"<android.view.KeyEvent: int getModifierMetaStateMask()>","<android.view.KeyEvent: int getModifierMetaStateMask()>"
"<java.lang.System: java.lang.String getenv(java.lang.String)>","<java.lang.System: java.lang.String getenv(java.lang.String)>"
"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>","<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>"
"<android.graphics.RecordingCanvas: void drawLines(float[],int,int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawLines(float[],int,int,android.graphics.Paint)>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource build()>","<android.content.AttributionSource$Builder: android.content.AttributionSource build()>"
"<android.content.res.Resources: java.lang.String getString(int)>","<android.content.res.Resources: java.lang.String getString(int)>"
"<java.time.Period: java.time.Period 'from'(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.Period 'from'(java.time.temporal.TemporalAmount)>"
"<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey unblock(java.net.InetAddress)>","<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey unblock(java.net.InetAddress)>"
"<java.net.URI: int getPort()>","<java.net.URI: int getPort()>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod negated()>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod negated()>"
"<java.nio.DoubleBuffer: boolean isDirect()>","<java.nio.DoubleBuffer: boolean isDirect()>"
"<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>","<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>"
"<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path$Direction)>"
"<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>","<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>"
"<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>","<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>"
"<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>","<java.lang.Runtime: java.lang.Process exec(java.lang.String,java.lang.String[],java.io.File)>"
"<android.app.ActivityManager: java.util.List getAppTasks()>","<android.app.ActivityManager: java.util.List getAppTasks()>"
"<android.view.MotionEvent: void setLocation(float,float)>","<android.view.MotionEvent: void setLocation(float,float)>"
"<android.graphics.ImageDecoder$ImageInfo: boolean isAnimated()>","<android.graphics.ImageDecoder$ImageInfo: boolean isAnimated()>"
"<android.content.Context: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>","<android.content.Context: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>"
"<android.media.AudioAttributes$Builder: void <init>()>","<android.media.AudioAttributes$Builder: void <init>()>"
"<android.view.accessibility.AccessibilityRecord: void <init>()>","<android.view.accessibility.AccessibilityRecord: void <init>()>"
"<java.util.Arrays: void parallelSetAll(double[],java.util.function.IntToDoubleFunction)>","<java.util.Arrays: void parallelSetAll(double[],java.util.function.IntToDoubleFunction)>"
"<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>"
"<java.util.Arrays: java.util.stream.DoubleStream stream(double[])>","<java.util.Arrays: java.util.stream.DoubleStream stream(double[])>"
"<android.content.Context: android.content.res.AssetManager getAssets()>","<android.content.Context: android.content.res.AssetManager getAssets()>"
"<android.view.textclassifier.TextClassification$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextClassification$Request: java.lang.CharSequence getText()>"
"<android.content.ContextWrapper: java.lang.String getPackageName()>","<android.content.ContextWrapper: java.lang.String getPackageName()>"
"<android.graphics.RenderNode: boolean setTranslationX(float)>","<android.graphics.RenderNode: boolean setTranslationX(float)>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],android.icu.util.ULocale[],boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],android.icu.util.ULocale[],boolean[])>"
"<android.view.textclassifier.TextClassificationContext: void <clinit>()>","<android.view.textclassifier.TextClassificationContext: void <clinit>()>"
"<java.lang.System: java.util.Map getenv()>","<java.lang.System: java.util.Map getenv()>"
"<android.view.ViewTreeObserver: boolean isAlive()>","<android.view.ViewTreeObserver: boolean isAlive()>"
"<java.util.Arrays: int mismatch(float[],int,int,float[],int,int)>","<java.util.Arrays: int mismatch(float[],int,int,float[],int,int)>"
"<java.net.URLConnection: boolean getUseCaches()>","<java.net.URLConnection: boolean getUseCaches()>"
"<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.util.Arrays: int compare(boolean[],boolean[])>","<java.util.Arrays: int compare(boolean[],boolean[])>"
"<android.widget.Scroller: int getFinalY()>","<android.widget.Scroller: int getFinalY()>"
"<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>","<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>"
"<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>","<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>"
"<java.util.function.ToLongFunction: long applyAsLong(java.lang.Object)>","<java.util.function.ToLongFunction: long applyAsLong(java.lang.Object)>"
"<java.lang.String: java.lang.String replace(char,char)>","<java.lang.String: java.lang.String replace(char,char)>"
"<android.view.View: boolean hasExplicitFocusable()>","<android.view.View: boolean hasExplicitFocusable()>"
"<org.json.JSONObject: boolean getBoolean(java.lang.String)>","<org.json.JSONObject: boolean getBoolean(java.lang.String)>"
"<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)>","<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)>"
"<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>","<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>"
"<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>","<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusWeeks(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusWeeks(long)>"
"<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>"
"<android.print.PrintAttributes: int describeContents()>","<android.print.PrintAttributes: int describeContents()>"
"<android.graphics.ColorSpace$Rgb: int hashCode()>","<android.graphics.ColorSpace$Rgb: int hashCode()>"
"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>","<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.app.VoiceInteractor$Prompt: void <clinit>()>","<android.app.VoiceInteractor$Prompt: void <clinit>()>"
"<java.util.Hashtable: java.util.Collection values()>","<java.util.Hashtable: java.util.Collection values()>"
"<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>","<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>"
"<android.os.BaseBundle: double getDouble(java.lang.String,double)>","<android.os.BaseBundle: double getDouble(java.lang.String,double)>"
"<org.json.JSONObject: void <init>(org.json.JSONObject,java.lang.String[])>","<org.json.JSONObject: void <init>(org.json.JSONObject,java.lang.String[])>"
"<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>","<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>"
"<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.content.AttributionSource: boolean equals(java.lang.Object)>","<android.content.AttributionSource: boolean equals(java.lang.Object)>"
"<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>","<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>"
"<android.widget.Scroller: int getDuration()>","<android.widget.Scroller: int getDuration()>"
"<java.net.ServerSocket: int getLocalPort()>","<java.net.ServerSocket: int getLocalPort()>"
"<android.graphics.RectF: boolean equals(java.lang.Object)>","<android.graphics.RectF: boolean equals(java.lang.Object)>"
"<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>","<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>"
"<android.app.Activity: void onNewIntent(android.content.Intent)>","<android.app.Activity: void onNewIntent(android.content.Intent)>"
"<android.app.Fragment: java.lang.String getString(int)>","<android.app.Fragment: java.lang.String getString(int)>"
"<android.view.displayhash.DisplayHash: void <clinit>()>","<android.view.displayhash.DisplayHash: void <clinit>()>"
"<java.io.PrintWriter: void println()>","<java.io.PrintWriter: void println()>"
"<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.webkit.WebView: void loadDataWithBaseURL(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)>"
"<android.view.accessibility.AccessibilityEvent: void <clinit>()>","<android.view.accessibility.AccessibilityEvent: void <clinit>()>"
"<java.nio.IntBuffer: int get()>","<java.nio.IntBuffer: int get()>"
"<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.view.View: boolean isDrawingCacheEnabled()>","<android.view.View: boolean isDrawingCacheEnabled()>"
"<android.content.res.Resources: int getColor(int)>","<android.content.res.Resources: int getColor(int)>"
"<android.webkit.WebView: void goBackOrForward(int)>","<android.webkit.WebView: void goBackOrForward(int)>"
"<java.util.AbstractQueue: void <init>()>","<java.util.AbstractQueue: void <init>()>"
"<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>","<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>"
"<android.webkit.WebView: void clearHistory()>","<android.webkit.WebView: void clearHistory()>"
"<android.app.Activity: void startManagingCursor(android.database.Cursor)>","<android.app.Activity: void startManagingCursor(android.database.Cursor)>"
"<android.view.View: float getTranslationZ()>","<android.view.View: float getTranslationZ()>"
"<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>","<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>"
"<android.os.CombinedVibration$ParallelCombination: void <init>()>","<android.os.CombinedVibration$ParallelCombination: void <init>()>"
"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>","<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"
"<java.nio.IntBuffer: java.nio.Buffer rewind()>","<java.nio.IntBuffer: java.nio.Buffer rewind()>"
"<android.content.pm.ProviderInfo: void <init>()>","<android.content.pm.ProviderInfo: void <init>()>"
"<java.io.ObjectOutputStream: void close()>","<java.io.ObjectOutputStream: void close()>"
"<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>","<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>"
"<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>","<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.Instant toInstant()>","<java.time.chrono.ChronoZonedDateTime: java.time.Instant toInstant()>"
"<android.widget.ListPopupWindow: int getPromptPosition()>","<android.widget.ListPopupWindow: int getPromptPosition()>"
"<java.util.Calendar: void setWeekDate(int,int,int)>","<java.util.Calendar: void setWeekDate(int,int,int)>"
"<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>","<java.util.concurrent.atomic.AtomicLong: void lazySet(long)>"
"<java.util.Arrays: void parallelSort(char[])>","<java.util.Arrays: void parallelSort(char[])>"
"<android.media.session.PlaybackState: void writeToParcel(android.os.Parcel,int)>","<android.media.session.PlaybackState: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Application: void <init>()>","<android.app.Application: void <init>()>"
"<android.app.Activity: boolean requestWindowFeature(int)>","<android.app.Activity: boolean requestWindowFeature(int)>"
"<android.view.Choreographer$VsyncCallback: void onVsync(android.view.Choreographer$FrameData)>","<android.view.Choreographer$VsyncCallback: void onVsync(android.view.Choreographer$FrameData)>"
"<android.content.ContextWrapper: void <init>(android.content.Context)>","<android.content.ContextWrapper: void <init>(android.content.Context)>"
"<java.lang.StringBuffer: void trimToSize()>","<java.lang.StringBuffer: void trimToSize()>"
"<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>","<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>"
"<android.view.View: float getRotationX()>","<android.view.View: float getRotationX()>"
"<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.view.KeyEvent: void <init>(int,int)>","<android.view.KeyEvent: void <init>(int,int)>"
"<android.os.Vibrator: void vibrate(long)>","<android.os.Vibrator: void vibrate(long)>"
"<java.util.stream.Collector$Characteristics: void <init>(java.lang.String,int)>","<java.util.stream.Collector$Characteristics: void <init>(java.lang.String,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>","<java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>"
"<android.view.textclassifier.ConversationActions$Message$Builder: void <init>(android.app.Person)>","<android.view.textclassifier.ConversationActions$Message$Builder: void <init>(android.app.Person)>"
"<android.graphics.Canvas: void translate(float,float)>","<android.graphics.Canvas: void translate(float,float)>"
"<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>","<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>"
"<java.util.concurrent.CopyOnWriteArrayList: void <init>()>","<java.util.concurrent.CopyOnWriteArrayList: void <init>()>"
"<android.util.ArrayMap: boolean containsValue(java.lang.Object)>","<android.util.ArrayMap: boolean containsValue(java.lang.Object)>"
"<android.webkit.WebSettings: boolean getUseWideViewPort()>","<android.webkit.WebSettings: boolean getUseWideViewPort()>"
"<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakWordStyle(int)>","<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakWordStyle(int)>"
"<java.util.OptionalInt: void ifPresent(java.util.function.IntConsumer)>","<java.util.OptionalInt: void ifPresent(java.util.function.IntConsumer)>"
"<android.view.Window: void setContainer(android.view.Window)>","<android.view.Window: void setContainer(android.view.Window)>"
"<android.app.Notification$Action$WearableExtender: void <init>()>","<android.app.Notification$Action$WearableExtender: void <init>()>"
"<java.io.ObjectInputStream: boolean enableResolveObject(boolean)>","<java.io.ObjectInputStream: boolean enableResolveObject(boolean)>"
"<java.util.Date: void <init>(int,int,int,int,int,int)>","<java.util.Date: void <init>(int,int,int,int,int,int)>"
"<android.webkit.ConsoleMessage: java.lang.String message()>","<android.webkit.ConsoleMessage: java.lang.String message()>"
"<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)>"
"<android.os.Message: java.lang.Runnable getCallback()>","<android.os.Message: java.lang.Runnable getCallback()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>"
"<android.service.autofill.UserData: int describeContents()>","<android.service.autofill.UserData: int describeContents()>"
"<android.view.translation.TranslationCapability: int getSupportedTranslationFlags()>","<android.view.translation.TranslationCapability: int getSupportedTranslationFlags()>"
"<java.io.PrintStream: void print(java.lang.String)>","<java.io.PrintStream: void print(java.lang.String)>"
"<java.util.stream.Stream: java.util.stream.Stream empty()>","<java.util.stream.Stream: java.util.stream.Stream empty()>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectTop(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectTop(android.graphics.Rect)>"
"<java.util.stream.BaseStream: boolean isParallel()>","<java.util.stream.BaseStream: boolean isParallel()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>"
"<android.graphics.RecordingCanvas: void disableZ()>","<android.graphics.RecordingCanvas: void disableZ()>"
"<io.flutter.plugins.webviewflutter.g: void <init>()>","<io.flutter.plugins.webviewflutter.g: void <init>()>"
"<android.text.style.TtsSpan$DigitsBuilder: void <init>()>","<android.text.style.TtsSpan$DigitsBuilder: void <init>()>"
"<java.util.Deque: void addLast(java.lang.Object)>","<java.util.Deque: void addLast(java.lang.Object)>"
"<android.transition.Transition: void captureEndValues(android.transition.TransitionValues)>","<android.transition.Transition: void captureEndValues(android.transition.TransitionValues)>"
"<java.util.function.IntPredicate: boolean test(int)>","<java.util.function.IntPredicate: boolean test(int)>"
"<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>","<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>"
"<java.security.Provider$Service: void <init>(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)>","<java.security.Provider$Service: void <init>(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)>"
"<java.util.concurrent.TimeUnit: long toHours(long)>","<java.util.concurrent.TimeUnit: long toHours(long)>"
"<java.lang.String: java.lang.String valueOf(char[],int,int)>","<java.lang.String: java.lang.String valueOf(char[],int,int)>"
"<android.widget.TextView: int getCompoundPaddingEnd()>","<android.widget.TextView: int getCompoundPaddingEnd()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>"
"<android.content.pm.FeatureInfo: void <init>()>","<android.content.pm.FeatureInfo: void <init>()>"
"<android.widget.TextView: int getSelectionStart()>","<android.widget.TextView: int getSelectionStart()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultHardwareBufferFormat(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultHardwareBufferFormat(int)>"
"<java.util.Arrays: int binarySearch(int[],int,int,int)>","<java.util.Arrays: int binarySearch(int[],int,int,int)>"
"<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)>","<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)>"
"<java.util.Objects: void <init>()>","<java.util.Objects: void <init>()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<android.app.Activity: void registerForContextMenu(android.view.View)>","<android.app.Activity: void registerForContextMenu(android.view.View)>"
"<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor,long,long)>","<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor,long,long)>"
"<java.lang.StringBuffer: int length()>","<java.lang.StringBuffer: int length()>"
"<android.view.Window$Callback: void onActionModeStarted(android.view.ActionMode)>","<android.view.Window$Callback: void onActionModeStarted(android.view.ActionMode)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int updateAndGet(java.lang.Object,java.util.function.IntUnaryOperator)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int updateAndGet(java.lang.Object,java.util.function.IntUnaryOperator)>"
"<android.app.Activity: void requestShowKeyboardShortcuts()>","<android.app.Activity: void requestShowKeyboardShortcuts()>"
"<android.window.SplashScreenView: void onDetachedFromWindow()>","<android.window.SplashScreenView: void onDetachedFromWindow()>"
"<java.util.UUID: int variant()>","<java.util.UUID: int variant()>"
"<java.lang.VirtualMachineError: void <init>(java.lang.String)>","<java.lang.VirtualMachineError: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>","<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>"
"<org.json.JSONArray: double optDouble(int,double)>","<org.json.JSONArray: double optDouble(int,double)>"
"<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>","<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>"
"<android.view.View: int getAccessibilityTraversalBefore()>","<android.view.View: int getAccessibilityTraversalBefore()>"
"<android.os.VibrationEffect$Composition: void <init>()>","<android.os.VibrationEffect$Composition: void <init>()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setTextDirection(android.text.TextDirectionHeuristic)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setTextDirection(android.text.TextDirectionHeuristic)>"
"<android.view.InputDevice: boolean isEnabled()>","<android.view.InputDevice: boolean isEnabled()>"
"<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>","<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>"
"<java.nio.ByteBuffer: boolean hasArray()>","<java.nio.ByteBuffer: boolean hasArray()>"
"<android.view.View: void setLeft(int)>","<android.view.View: void setLeft(int)>"
"<java.util.Arrays: boolean equals(double[],int,int,double[],int,int)>","<java.util.Arrays: boolean equals(double[],int,int,double[],int,int)>"
"<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>","<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>"
"<android.content.Loader: void startLoading()>","<android.content.Loader: void startLoading()>"
"<java.lang.Math: long negateExact(long)>","<java.lang.Math: long negateExact(long)>"
"<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>","<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)>"
"<java.lang.StringBuffer: void getChars(int,int,char[],int)>","<java.lang.StringBuffer: void getChars(int,int,char[],int)>"
"<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.NumberFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>"
"<java.time.OffsetTime: java.time.OffsetTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.OffsetTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>","<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>"
"<android.util.AttributeSet: int getAttributeNameResource(int)>","<android.util.AttributeSet: int getAttributeNameResource(int)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>"
"<org.json.JSONObject: java.lang.Object get(java.lang.String)>","<org.json.JSONObject: java.lang.Object get(java.lang.String)>"
"<android.graphics.BlendMode: android.graphics.BlendMode[] values()>","<android.graphics.BlendMode: android.graphics.BlendMode[] values()>"
"<java.util.concurrent.LinkedBlockingQueue: boolean removeAll(java.util.Collection)>","<java.util.concurrent.LinkedBlockingQueue: boolean removeAll(java.util.Collection)>"
"<android.widget.ListView: boolean removeFooterView(android.view.View)>","<android.widget.ListView: boolean removeFooterView(android.view.View)>"
"<android.webkit.WebSettings: boolean getAllowContentAccess()>","<android.webkit.WebSettings: boolean getAllowContentAccess()>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()>","<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()>"
"<java.util.PrimitiveIterator$OfLong: java.lang.Object next()>","<java.util.PrimitiveIterator$OfLong: java.lang.Object next()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(java.util.Map)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(java.util.Map)>"
"<java.lang.Long: int hashCode()>","<java.lang.Long: int hashCode()>"
"<android.graphics.ImageDecoder: void setUnpremultipliedRequired(boolean)>","<android.graphics.ImageDecoder: void setUnpremultipliedRequired(boolean)>"
"<android.text.SpannableString: java.lang.CharSequence subSequence(int,int)>","<android.text.SpannableString: java.lang.CharSequence subSequence(int,int)>"
"<java.util.Locale: int hashCode()>","<java.util.Locale: int hashCode()>"
"<android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>","<android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>"
"<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>","<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>"
"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.content.pm.PackageInfo: int describeContents()>","<android.content.pm.PackageInfo: int describeContents()>"
"<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>","<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>"
"<android.animation.ValueAnimator: boolean unregisterDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>","<android.animation.ValueAnimator: boolean unregisterDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>"
"<android.graphics.SurfaceTexture: void releaseTexImage()>","<android.graphics.SurfaceTexture: void releaseTexImage()>"
"<android.widget.TextView: int getBaseline()>","<android.widget.TextView: int getBaseline()>"
"<android.transition.Transition: java.util.List getTargetNames()>","<android.transition.Transition: java.util.List getTargetNames()>"
"<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>","<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>"
"<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>","<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>","<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>"
"<android.widget.ImageView: int getMaxHeight()>","<android.widget.ImageView: int getMaxHeight()>"
"<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>","<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>"
"<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence)>","<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence)>"
"<io.flutter.plugin.platform.m: void <init>(io.flutter.plugin.platform.q)>","<io.flutter.plugin.platform.m: void <init>(io.flutter.plugin.platform.q)>"
"<java.util.Set: boolean removeAll(java.util.Collection)>","<java.util.Set: boolean removeAll(java.util.Collection)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>"
"<java.lang.SecurityManager: void checkRead(java.lang.String,java.lang.Object)>","<java.lang.SecurityManager: void checkRead(java.lang.String,java.lang.Object)>"
"<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()>","<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()>"
"<android.view.ViewGroup$MarginLayoutParams: void resolveLayoutDirection(int)>","<android.view.ViewGroup$MarginLayoutParams: void resolveLayoutDirection(int)>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setInProgressLabel(java.lang.CharSequence)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setInProgressLabel(java.lang.CharSequence)>"
"<java.security.SignatureException: void <init>(java.lang.Throwable)>","<java.security.SignatureException: void <init>(java.lang.Throwable)>"
"<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>"
"<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>","<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>"
"<android.app.ActivityManager: boolean clearApplicationUserData()>","<android.app.ActivityManager: boolean clearApplicationUserData()>"
"<android.media.session.MediaSession$Callback: void onPrepare()>","<android.media.session.MediaSession$Callback: void onPrepare()>"
"<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>","<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>"
"<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>","<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>"
"<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>","<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: int describeContents()>","<android.content.pm.PackageInstaller$SessionInfo: int describeContents()>"
"<android.app.ActionBar: void selectTab(android.app.ActionBar$Tab)>","<android.app.ActionBar: void selectTab(android.app.ActionBar$Tab)>"
"<android.view.WindowInsetsAnimation: float getInterpolatedFraction()>","<android.view.WindowInsetsAnimation: float getInterpolatedFraction()>"
"<android.widget.ListView: boolean areHeaderDividersEnabled()>","<android.widget.ListView: boolean areHeaderDividersEnabled()>"
"<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan$Builder setLongArgument(java.lang.String,long)>","<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan$Builder setLongArgument(java.lang.String,long)>"
"<java.nio.Buffer: boolean isReadOnly()>","<java.nio.Buffer: boolean isReadOnly()>"
"<android.util.Base64: byte[] encode(byte[],int)>","<android.util.Base64: byte[] encode(byte[],int)>"
"<android.view.View: int getMeasuredWidth()>","<android.view.View: int getMeasuredWidth()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setSubtitle(java.lang.CharSequence)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setSubtitle(java.lang.CharSequence)>"
"<java.util.AbstractCollection: void <init>()>","<java.util.AbstractCollection: void <init>()>"
"<android.view.View: boolean isTemporarilyDetached()>","<android.view.View: boolean isTemporarilyDetached()>"
"<android.webkit.WebView: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>","<android.webkit.WebView: android.net.Uri getSafeBrowsingPrivacyPolicyUrl()>"
"<java.security.cert.CertPath: java.util.List getCertificates()>","<java.security.cert.CertPath: java.util.List getCertificates()>"
"<java.lang.InternalError: void <init>(java.lang.String)>","<java.lang.InternalError: void <init>(java.lang.String)>"
"<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()>","<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()>"
"<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)>","<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)>"
"<android.icu.util.ULocale: android.icu.util.ULocale setKeywordValue(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: android.icu.util.ULocale setKeywordValue(java.lang.String,java.lang.String)>"
"<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>","<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>"
"<java.nio.FloatBuffer: java.lang.Object array()>","<java.nio.FloatBuffer: java.lang.Object array()>"
"<c0.f: boolean a(android.view.View)>","<c0.f: boolean a(android.view.View)>"
"<android.os.VibrationAttributes: boolean equals(java.lang.Object)>","<android.os.VibrationAttributes: boolean equals(java.lang.Object)>"
"<java.lang.Thread: boolean interrupted()>","<java.lang.Thread: boolean interrupted()>"
"<android.media.session.PlaybackState: long getLastPositionUpdateTime()>","<android.media.session.PlaybackState: long getLastPositionUpdateTime()>"
"<android.widget.Toolbar: void onLayout(boolean,int,int,int,int)>","<android.widget.Toolbar: void onLayout(boolean,int,int,int,int)>"
"<java.security.AccessControlContext: void checkPermission(java.security.Permission)>","<java.security.AccessControlContext: void checkPermission(java.security.Permission)>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>","<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>"
"<android.webkit.WebView: void setDataDirectorySuffix(java.lang.String)>","<android.webkit.WebView: void setDataDirectorySuffix(java.lang.String)>"
"<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>","<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>"
"<android.graphics.Matrix: void reset()>","<android.graphics.Matrix: void reset()>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)>"
"<java.nio.channels.MembershipKey: java.net.InetAddress group()>","<java.nio.channels.MembershipKey: java.net.InetAddress group()>"
"<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashResult(android.view.displayhash.DisplayHash)>","<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashResult(android.view.displayhash.DisplayHash)>"
"<android.widget.PopupWindow: void <init>(int,int)>","<android.widget.PopupWindow: void <init>(int,int)>"
"<java.nio.file.WatchKey: java.util.List pollEvents()>","<java.nio.file.WatchKey: java.util.List pollEvents()>"
"<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>"
"<java.lang.Thread: void destroy()>","<java.lang.Thread: void destroy()>"
"<android.view.View: void releasePointerCapture()>","<android.view.View: void releasePointerCapture()>"
"<android.os.Debug$InstructionCount: void <init>()>","<android.os.Debug$InstructionCount: void <init>()>"
"<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>","<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>"
"<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>","<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>"
"<android.os.BaseBundle: boolean containsKey(java.lang.String)>","<android.os.BaseBundle: boolean containsKey(java.lang.String)>"
"<android.transition.Transition: android.transition.Transition excludeChildren(android.view.View,boolean)>","<android.transition.Transition: android.transition.Transition excludeChildren(android.view.View,boolean)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>"
"<android.app.Activity: android.app.LoaderManager getLoaderManager()>","<android.app.Activity: android.app.LoaderManager getLoaderManager()>"
"<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>","<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>"
"<android.widget.TextView: void onScreenStateChanged(int)>","<android.widget.TextView: void onScreenStateChanged(int)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>"
"<android.app.Service: android.os.IBinder onBind(android.content.Intent)>","<android.app.Service: android.os.IBinder onBind(android.content.Intent)>"
"<java.security.cert.CertPath: java.lang.Object writeReplace()>","<java.security.cert.CertPath: java.lang.Object writeReplace()>"
"<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.util.Deque: java.lang.Object pollLast()>","<java.util.Deque: java.lang.Object pollLast()>"
"<java.nio.LongBuffer: java.nio.Buffer position(int)>","<java.nio.LongBuffer: java.nio.Buffer position(int)>"
"<java.text.NumberFormat: void setParseIntegerOnly(boolean)>","<java.text.NumberFormat: void setParseIntegerOnly(boolean)>"
"<java.util.List: boolean removeAll(java.util.Collection)>","<java.util.List: boolean removeAll(java.util.Collection)>"
"<android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)>","<android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)>"
"<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>","<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>"
"<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>"
"<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>","<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<android.view.ViewStructure: void setMinTextEms(int)>","<android.view.ViewStructure: void setMinTextEms(int)>"
"<android.text.Selection: boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean extendToLeftEdge(android.text.Spannable,android.text.Layout)>"
"<android.media.MediaMetadata: boolean equals(java.lang.Object)>","<android.media.MediaMetadata: boolean equals(java.lang.Object)>"
"<java.nio.ByteBuffer: java.nio.ByteOrder order()>","<java.nio.ByteBuffer: java.nio.ByteOrder order()>"
"<java.util.Set: java.util.Set of(java.lang.Object[])>","<java.util.Set: java.util.Set of(java.lang.Object[])>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)>"
"<android.os.LocaleList: java.lang.String toLanguageTags()>","<android.os.LocaleList: java.lang.String toLanguageTags()>"
"<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>","<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>"
"<java.util.Spliterator$OfLong: java.util.Spliterator$OfLong trySplit()>","<java.util.Spliterator$OfLong: java.util.Spliterator$OfLong trySplit()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>"
"<android.text.Layout: int getLineEnd(int)>","<android.text.Layout: int getLineEnd(int)>"
"<java.nio.ShortBuffer: java.lang.String toString()>","<java.nio.ShortBuffer: java.lang.String toString()>"
"<java.util.PriorityQueue: java.lang.Object[] toArray()>","<java.util.PriorityQueue: java.lang.Object[] toArray()>"
"<android.view.InputDevice: int describeContents()>","<android.view.InputDevice: int describeContents()>"
"<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>","<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>"
"<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<java.util.ConcurrentModificationException: void <init>()>","<java.util.ConcurrentModificationException: void <init>()>"
"<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>","<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>"
"<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setNumerator(long)>","<android.text.style.TtsSpan$FractionBuilder: android.text.style.TtsSpan$FractionBuilder setNumerator(long)>"
"<android.view.ActionProvider: void refreshVisibility()>","<android.view.ActionProvider: void refreshVisibility()>"
"<java.lang.Math: double log1p(double)>","<java.lang.Math: double log1p(double)>"
"<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>","<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>"
"<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>","<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>"
"<android.app.Fragment: void onAttachFragment(android.app.Fragment)>","<android.app.Fragment: void onAttachFragment(android.app.Fragment)>"
"<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)>","<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)>"
"<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<java.time.OffsetTime: java.time.OffsetTime minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.OffsetTime minus(java.time.temporal.TemporalAmount)>"
"<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>","<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>"
"<android.util.ArrayMap: boolean containsKey(java.lang.Object)>","<android.util.ArrayMap: boolean containsKey(java.lang.Object)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>"
"<java.util.Hashtable: java.lang.Object clone()>","<java.util.Hashtable: java.lang.Object clone()>"
"<android.view.View: java.lang.CharSequence getTooltipText()>","<android.view.View: java.lang.CharSequence getTooltipText()>"
"<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>"
"<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: void add(int,java.lang.Object)>"
"<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>","<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>"
"<android.text.style.LocaleSpan: int describeContents()>","<android.text.style.LocaleSpan: int describeContents()>"
"<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>","<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>"
"<android.graphics.Color: int toArgb(long)>","<android.graphics.Color: int toArgb(long)>"
"<io.flutter.plugins.webviewflutter.g1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.g1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.view.SurfaceView: int getImportantForAccessibility()>","<android.view.SurfaceView: int getImportantForAccessibility()>"
"<android.view.Display: void getRectSize(android.graphics.Rect)>","<android.view.Display: void getRectSize(android.graphics.Rect)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.widget.Toolbar: void setTitleMarginEnd(int)>","<android.widget.Toolbar: void setTitleMarginEnd(int)>"
"<android.widget.TextView: int getTopPaddingOffset()>","<android.widget.TextView: int getTopPaddingOffset()>"
"<android.graphics.Canvas: boolean clipOutPath(android.graphics.Path)>","<android.graphics.Canvas: boolean clipOutPath(android.graphics.Path)>"
"<android.graphics.drawable.ColorDrawable: void <init>()>","<android.graphics.drawable.ColorDrawable: void <init>()>"
"<java.lang.Character: int getNumericValue(int)>","<java.lang.Character: int getNumericValue(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>"
"<io.flutter.plugins.webviewflutter.k2: void <init>()>","<io.flutter.plugins.webviewflutter.k2: void <init>()>"
"<java.nio.ByteBuffer: long getLong(int)>","<java.nio.ByteBuffer: long getLong(int)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: int countSynonyms()>","<android.app.VoiceInteractor$PickOptionRequest$Option: int countSynonyms()>"
"<android.content.pm.PackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)>"
"<org.json.JSONObject: java.lang.Object remove(java.lang.String)>","<org.json.JSONObject: java.lang.Object remove(java.lang.String)>"
"<android.view.textclassifier.TextSelection$Request: void <clinit>()>","<android.view.textclassifier.TextSelection$Request: void <clinit>()>"
"<java.nio.channels.MembershipKey: boolean isValid()>","<java.nio.channels.MembershipKey: boolean isValid()>"
"<android.transition.TransitionValues: void <init>()>","<android.transition.TransitionValues: void <init>()>"
"<io.flutter.plugins.webviewflutter.c1: void <init>(io.flutter.plugins.webviewflutter.k$a0)>","<io.flutter.plugins.webviewflutter.c1: void <init>(io.flutter.plugins.webviewflutter.k$a0)>"
"<android.view.WindowInsets$Type: int displayCutout()>","<android.view.WindowInsets$Type: int displayCutout()>"
"<java.lang.Long: void <init>(long)>","<java.lang.Long: void <init>(long)>"
"<io.flutter.plugins.webviewflutter.f: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.f: void a(java.lang.Object)>"
"<java.nio.channels.Selector: int selectNow(java.util.function.Consumer)>","<java.nio.channels.Selector: int selectNow(java.util.function.Consumer)>"
"<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>","<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>"
"<android.hardware.lights.LightState: void <clinit>()>","<android.hardware.lights.LightState: void <clinit>()>"
"<android.view.Menu: android.view.MenuItem getItem(int)>","<android.view.Menu: android.view.MenuItem getItem(int)>"
"<java.math.BigInteger: void <init>(int,byte[],int,int)>","<java.math.BigInteger: void <init>(int,byte[],int,int)>"
"<android.app.PictureInPictureParams: boolean equals(java.lang.Object)>","<android.app.PictureInPictureParams: boolean equals(java.lang.Object)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(android.graphics.drawable.Icon)>","<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(android.graphics.drawable.Icon)>"
"<java.time.Duration: java.lang.String toString()>","<java.time.Duration: java.lang.String toString()>"
"<android.os.Handler: void removeCallbacks(java.lang.Runnable)>","<android.os.Handler: void removeCallbacks(java.lang.Runnable)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>"
"<android.view.ViewParent: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>","<android.view.ViewParent: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>"
"<android.util.LongSparseArray: java.lang.Object valueAt(int)>","<android.util.LongSparseArray: java.lang.Object valueAt(int)>"
"<java.net.DatagramSocketImpl: void setTimeToLive(int)>","<java.net.DatagramSocketImpl: void setTimeToLive(int)>"
"<java.util.Arrays: int hashCode(java.lang.Object[])>","<java.util.Arrays: int hashCode(java.lang.Object[])>"
"<java.time.LocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>"
"<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>","<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>"
"<android.view.accessibility.AccessibilityManager: boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)>","<android.view.accessibility.AccessibilityManager: boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)>"
"<java.io.Console: java.io.PrintWriter writer()>","<java.io.Console: java.io.PrintWriter writer()>"
"<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)>","<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)>"
"<android.app.Activity: void setFinishOnTouchOutside(boolean)>","<android.app.Activity: void setFinishOnTouchOutside(boolean)>"
"<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)>"
"<android.graphics.Canvas: boolean quickReject(float,float,float,float)>","<android.graphics.Canvas: boolean quickReject(float,float,float,float)>"
"<android.view.MotionEvent: float getOrientation(int)>","<android.view.MotionEvent: float getOrientation(int)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconBitmap(android.graphics.Bitmap)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconBitmap(android.graphics.Bitmap)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>"
"<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>","<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setSafeInsets(android.graphics.Insets)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setSafeInsets(android.graphics.Insets)>"
"<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<java.io.PrintStream: void println(long)>","<java.io.PrintStream: void println(long)>"
"<android.graphics.ColorSpace$Rgb: float[] toLinear(float[])>","<android.graphics.ColorSpace$Rgb: float[] toLinear(float[])>"
"<android.widget.AbsListView: void onAttachedToWindow()>","<android.widget.AbsListView: void onAttachedToWindow()>"
"<java.time.chrono.Chronology: java.lang.String getId()>","<java.time.chrono.Chronology: java.lang.String getId()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean isHeldByCurrentThread()>"
"<android.content.res.Configuration: boolean isScreenHdr()>","<android.content.res.Configuration: boolean isScreenHdr()>"
"<android.content.SyncInfo: void <init>()>","<android.content.SyncInfo: void <init>()>"
"<android.graphics.Paint: void setARGB(int,int,int,int)>","<android.graphics.Paint: void setARGB(int,int,int,int)>"
"<java.util.ArrayDeque: java.lang.Object pollLast()>","<java.util.ArrayDeque: java.lang.Object pollLast()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>"
"<android.content.pm.PackageInstaller$SessionCallback: void <init>()>","<android.content.pm.PackageInstaller$SessionCallback: void <init>()>"
"<java.time.chrono.ChronoLocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>"
"<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>","<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>"
"<android.media.session.MediaSession$Token: void writeToParcel(android.os.Parcel,int)>","<android.media.session.MediaSession$Token: void writeToParcel(android.os.Parcel,int)>"
"<android.content.DialogInterface$OnShowListener: void onShow(android.content.DialogInterface)>","<android.content.DialogInterface$OnShowListener: void onShow(android.content.DialogInterface)>"
"<android.app.ActionBar: void removeTabAt(int)>","<android.app.ActionBar: void removeTabAt(int)>"
"<java.util.concurrent.atomic.AtomicLong: long getPlain()>","<java.util.concurrent.atomic.AtomicLong: long getPlain()>"
"<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>","<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>"
"<java.lang.Float: int hashCode(float)>","<java.lang.Float: int hashCode(float)>"
"<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>","<android.app.Notification: android.graphics.drawable.Icon getSmallIcon()>"
"<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>"
"<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>","<java.util.concurrent.LinkedBlockingQueue: int remainingCapacity()>"
"<android.transition.Transition: java.lang.String[] getTransitionProperties()>","<android.transition.Transition: java.lang.String[] getTransitionProperties()>"
"<java.security.Provider: java.lang.Object remove(java.lang.Object)>","<java.security.Provider: java.lang.Object remove(java.lang.Object)>"
"<java.net.DatagramSocket: void <init>(int)>","<java.net.DatagramSocket: void <init>(int)>"
"<android.content.ClipData$Item: java.lang.String getHtmlText()>","<android.content.ClipData$Item: java.lang.String getHtmlText()>"
"<java.util.Calendar: java.lang.String getCalendarType()>","<java.util.Calendar: java.lang.String getCalendarType()>"
"<android.app.Notification: int getBadgeIconType()>","<android.app.Notification: int getBadgeIconType()>"
"<java.net.URLStreamHandler: void <init>()>","<java.net.URLStreamHandler: void <init>()>"
"<android.view.View: int[] getDrawableState()>","<android.view.View: int[] getDrawableState()>"
"<android.widget.TextView: void setEms(int)>","<android.widget.TextView: void setEms(int)>"
"<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>","<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>"
"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>"
"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>","<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.accessibility.AccessibilityNodeInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.accessibility.AccessibilityNodeInfo)>"
"<android.content.pm.PackageManager$ApplicationInfoFlags: void <init>()>","<android.content.pm.PackageManager$ApplicationInfoFlags: void <init>()>"
"<android.view.View: boolean performLongClick()>","<android.view.View: boolean performLongClick()>"
"<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>"
"<android.content.Intent: char getCharExtra(java.lang.String,char)>","<android.content.Intent: char getCharExtra(java.lang.String,char)>"
"<java.lang.SecurityManager: void checkSystemClipboardAccess()>","<java.lang.SecurityManager: void checkSystemClipboardAccess()>"
"<android.graphics.ImageDecoder$ImageInfo: android.util.Size getSize()>","<android.graphics.ImageDecoder$ImageInfo: android.util.Size getSize()>"
"<java.io.ObjectInput: void close()>","<java.io.ObjectInput: void close()>"
"<android.app.Fragment: android.app.LoaderManager getLoaderManager()>","<android.app.Fragment: android.app.LoaderManager getLoaderManager()>"
"<android.content.ComponentName: java.lang.String flattenToShortString()>","<android.content.ComponentName: java.lang.String flattenToShortString()>"
"<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.view.View: float getScaleY()>","<android.view.View: float getScaleY()>"
"<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>","<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>"
"<android.view.MotionEvent: void transform(android.graphics.Matrix)>","<android.view.MotionEvent: void transform(android.graphics.Matrix)>"
"<android.content.res.Resources: android.graphics.Typeface getFont(int)>","<android.content.res.Resources: android.graphics.Typeface getFont(int)>"
"<android.net.http.SslError: boolean addError(int)>","<android.net.http.SslError: boolean addError(int)>"
"<java.nio.file.LinkOption: void <init>(java.lang.String,int)>","<java.nio.file.LinkOption: void <init>(java.lang.String,int)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>","<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>"
"<java.io.PrintWriter: void println(double)>","<java.io.PrintWriter: void println(double)>"
"<android.os.BaseBundle: java.lang.Object get(java.lang.String)>","<android.os.BaseBundle: java.lang.Object get(java.lang.String)>"
"<android.text.TextDirectionHeuristic: boolean isRtl(java.lang.CharSequence,int,int)>","<android.text.TextDirectionHeuristic: boolean isRtl(java.lang.CharSequence,int,int)>"
"<android.view.autofill.AutofillManager: void requestAutofill(android.view.View)>","<android.view.autofill.AutofillManager: void requestAutofill(android.view.View)>"
"<android.content.pm.PackageManager: void clearInstantAppCookie()>","<android.content.pm.PackageManager: void clearInstantAppCookie()>"
"<java.security.cert.X509Certificate: byte[] getSignature()>","<java.security.cert.X509Certificate: byte[] getSignature()>"
"<android.content.SharedPreferences: int getInt(java.lang.String,int)>","<android.content.SharedPreferences: int getInt(java.lang.String,int)>"
"<java.lang.Class: java.lang.reflect.Field[] getFields()>","<java.lang.Class: java.lang.reflect.Field[] getFields()>"
"<android.app.Person$Builder: android.app.Person$Builder setUri(java.lang.String)>","<android.app.Person$Builder: android.app.Person$Builder setUri(java.lang.String)>"
"<android.util.SparseArray: android.util.SparseArray clone()>","<android.util.SparseArray: android.util.SparseArray clone()>"
"<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>","<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>"
"<java.util.zip.ZipEntry: long getCompressedSize()>","<java.util.zip.ZipEntry: long getCompressedSize()>"
"<java.io.FileOutputStream: java.io.FileDescriptor getFD()>","<java.io.FileOutputStream: java.io.FileDescriptor getFD()>"
"<android.widget.Scroller: void startScroll(int,int,int,int,int)>","<android.widget.Scroller: void startScroll(int,int,int,int,int)>"
"<android.app.Activity: boolean releaseInstance()>","<android.app.Activity: boolean releaseInstance()>"
"<android.content.res.AssetManager$AssetInputStream: void reset()>","<android.content.res.AssetManager$AssetInputStream: void reset()>"
"<android.graphics.Bitmap: android.graphics.Color getColor(int,int)>","<android.graphics.Bitmap: android.graphics.Color getColor(int,int)>"
"<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)>","<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: void <init>(int)>"
"<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute build()>","<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute build()>"
"<android.view.View: void setTranslationY(float)>","<android.view.View: void setTranslationY(float)>"
"<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.view.Window: void onActive()>","<android.view.Window: void onActive()>"
"<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>","<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>"
"<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>","<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>"
"<java.security.Provider: java.lang.Object get(java.lang.Object)>","<java.security.Provider: java.lang.Object get(java.lang.Object)>"
"<android.view.textclassifier.TextLinks$Request: android.os.LocaleList getDefaultLocales()>","<android.view.textclassifier.TextLinks$Request: android.os.LocaleList getDefaultLocales()>"
"<java.nio.charset.CoderResult: void <clinit>()>","<java.nio.charset.CoderResult: void <clinit>()>"
"<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)>","<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)>"
"<android.webkit.WebView: boolean canGoForward()>","<android.webkit.WebView: boolean canGoForward()>"
"<java.util.Date: void setMinutes(int)>","<java.util.Date: void setMinutes(int)>"
"<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.text.ClipboardManager: boolean hasText()>","<android.text.ClipboardManager: boolean hasText()>"
"<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.translation.ViewTranslationResponse: java.util.Set getKeys()>","<android.view.translation.ViewTranslationResponse: java.util.Set getKeys()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.view.ViewParent: void bringChildToFront(android.view.View)>","<android.view.ViewParent: void bringChildToFront(android.view.View)>"
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>","<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>"
"<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>","<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>"
"<java.time.OffsetTime: java.time.OffsetTime of(int,int,int,int,java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime of(int,int,int,int,java.time.ZoneOffset)>"
"<java.lang.NoSuchMethodException: void <init>()>","<java.lang.NoSuchMethodException: void <init>()>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>"
"<java.util.Deque: boolean removeFirstOccurrence(java.lang.Object)>","<java.util.Deque: boolean removeFirstOccurrence(java.lang.Object)>"
"<java.net.ServerSocket: void <init>(int)>","<java.net.ServerSocket: void <init>(int)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>","<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>"
"<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>","<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>"
"<java.net.ServerSocket: java.lang.Object getOption(java.net.SocketOption)>","<java.net.ServerSocket: java.lang.Object getOption(java.net.SocketOption)>"
"<android.widget.RemoteViews: void setViewLayoutWidthAttr(int,int)>","<android.widget.RemoteViews: void setViewLayoutWidthAttr(int,int)>"
"<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>","<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>"
"<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSet(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: boolean weakCompareAndSet(java.lang.Object,java.lang.Object)>"
"<android.graphics.drawable.ColorDrawable: int getAlpha()>","<android.graphics.drawable.ColorDrawable: int getAlpha()>"
"<android.view.Surface: void <init>(android.view.SurfaceControl)>","<android.view.Surface: void <init>(android.view.SurfaceControl)>"
"<android.app.Activity: void <init>()>","<android.app.Activity: void <init>()>"
"<android.view.textclassifier.TextLanguage: java.lang.String toString()>","<android.view.textclassifier.TextLanguage: java.lang.String toString()>"
"<java.util.stream.BaseStream: java.util.Spliterator spliterator()>","<java.util.stream.BaseStream: java.util.Spliterator spliterator()>"
"<android.view.LayoutInflater: void <init>(android.content.Context)>","<android.view.LayoutInflater: void <init>(android.content.Context)>"
"<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)>","<java.util.AbstractSequentialList: java.lang.Object set(int,java.lang.Object)>"
"<android.view.Menu: android.view.SubMenu addSubMenu(int)>","<android.view.Menu: android.view.SubMenu addSubMenu(int)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.view.ViewGroup: void clearChildFocus(android.view.View)>","<android.view.ViewGroup: void clearChildFocus(android.view.View)>"
"<android.transition.Transition: android.graphics.Rect getEpicenter()>","<android.transition.Transition: android.graphics.Rect getEpicenter()>"
"<java.util.concurrent.ThreadLocalRandom: double nextDouble()>","<java.util.concurrent.ThreadLocalRandom: double nextDouble()>"
"<android.view.Window: void setUiOptions(int,int)>","<android.view.Window: void setUiOptions(int,int)>"
"<android.content.IntentFilter: int countDataPaths()>","<android.content.IntentFilter: int countDataPaths()>"
"<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>","<java.util.concurrent.ThreadPoolExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>"
"<java.util.Locale$Builder: java.util.Locale$Builder setLanguage(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setLanguage(java.lang.String)>"
"<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>","<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>"
"<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.os.Message)>","<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.os.Message)>"
"<java.util.regex.Matcher: java.lang.String group()>","<java.util.regex.Matcher: java.lang.String group()>"
"<java.util.concurrent.ThreadLocalRandom: int nextInt()>","<java.util.concurrent.ThreadLocalRandom: int nextInt()>"
"<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)>"
"<android.view.View: void setLabelFor(int)>","<android.view.View: void setLabelFor(int)>"
"<android.widget.TextView: java.lang.String getPrivateImeOptions()>","<android.widget.TextView: java.lang.String getPrivateImeOptions()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock writeLock()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock writeLock()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)>"
"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>","<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>"
"<android.view.Choreographer$FrameTimeline: long getDeadlineNanos()>","<android.view.Choreographer$FrameTimeline: long getDeadlineNanos()>"
"<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)>","<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)>"
"<java.lang.Number: int intValue()>","<java.lang.Number: int intValue()>"
"<android.webkit.WebMessagePort$WebMessageCallback: void <init>()>","<android.webkit.WebMessagePort$WebMessageCallback: void <init>()>"
"<android.widget.TextView: void setHorizontallyScrolling(boolean)>","<android.widget.TextView: void setHorizontallyScrolling(boolean)>"
"<java.util.WeakHashMap: java.util.Set entrySet()>","<java.util.WeakHashMap: java.util.Set entrySet()>"
"<java.lang.StackTraceElement: java.lang.String getMethodName()>","<java.lang.StackTraceElement: java.lang.String getMethodName()>"
"<java.time.temporal.ValueRange: boolean isValidValue(long)>","<java.time.temporal.ValueRange: boolean isValidValue(long)>"
"<io.flutter.plugins.webviewflutter.z0: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.z0: void a(java.lang.Object)>"
"<java.util.Arrays: int[] copyOfRange(int[],int,int)>","<java.util.Arrays: int[] copyOfRange(int[],int,int)>"
"<android.text.Layout: int getOffsetToRightOf(int)>","<android.text.Layout: int getOffsetToRightOf(int)>"
"<android.widget.FrameLayout: void onMeasure(int,int)>","<android.widget.FrameLayout: void onMeasure(int,int)>"
"<java.security.Permission: java.lang.String getName()>","<java.security.Permission: java.lang.String getName()>"
"<android.media.session.MediaSession$Token: int hashCode()>","<android.media.session.MediaSession$Token: int hashCode()>"
"<java.security.Key: java.lang.String getFormat()>","<java.security.Key: java.lang.String getFormat()>"
"<android.view.Display: void <init>()>","<android.view.Display: void <init>()>"
"<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)>","<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)>"
"<android.graphics.Path$FillType: android.graphics.Path$FillType[] values()>","<android.graphics.Path$FillType: android.graphics.Path$FillType[] values()>"
"<java.util.Set: boolean retainAll(java.util.Collection)>","<java.util.Set: boolean retainAll(java.util.Collection)>"
"<android.print.PrintDocumentInfo: void writeToParcel(android.os.Parcel,int)>","<android.print.PrintDocumentInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.ShortBuffer: java.nio.Buffer limit(int)>","<java.nio.ShortBuffer: java.nio.Buffer limit(int)>"
"<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>","<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>"
"<android.view.WindowInsetsAnimationControlListener: void onFinished(android.view.WindowInsetsAnimationController)>","<android.view.WindowInsetsAnimationControlListener: void onFinished(android.view.WindowInsetsAnimationController)>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: void <init>(int)>"
"<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>","<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>"
"<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>","<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>"
"<java.io.FileOutputStream: void write(byte[],int,int)>","<java.io.FileOutputStream: void write(byte[],int,int)>"
"<android.util.ArrayMap: int indexOfKey(java.lang.Object)>","<android.util.ArrayMap: int indexOfKey(java.lang.Object)>"
"<android.app.Notification$CarExtender: android.app.Notification$CarExtender setColor(int)>","<android.app.Notification$CarExtender: android.app.Notification$CarExtender setColor(int)>"
"<android.webkit.WebView: java.lang.ClassLoader getWebViewClassLoader()>","<android.webkit.WebView: java.lang.ClassLoader getWebViewClassLoader()>"
"<android.content.Intent$ShortcutIconResource: void <clinit>()>","<android.content.Intent$ShortcutIconResource: void <clinit>()>"
"<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<java.util.concurrent.atomic.AtomicLong: long getOpaque()>","<java.util.concurrent.atomic.AtomicLong: long getOpaque()>"
"<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>","<java.util.WeakHashMap: boolean containsKey(java.lang.Object)>"
"<android.widget.AbsListView$LayoutParams: void <init>(int,int)>","<android.widget.AbsListView$LayoutParams: void <init>(int,int)>"
"<android.media.Session2Token: int getType()>","<android.media.Session2Token: int getType()>"
"<android.view.ViewManager: void removeView(android.view.View)>","<android.view.ViewManager: void removeView(android.view.View)>"
"<android.widget.Adapter: boolean hasStableIds()>","<android.widget.Adapter: boolean hasStableIds()>"
"<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()>","<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()>"
"<java.text.NumberFormat: void setGroupingUsed(boolean)>","<java.text.NumberFormat: void setGroupingUsed(boolean)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long accumulateAndGet(java.lang.Object,long,java.util.function.LongBinaryOperator)>"
"<java.io.File: java.io.File[] listRoots()>","<java.io.File: java.io.File[] listRoots()>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>"
"<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>","<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>"
"<android.view.InputEvent: android.view.InputDevice getDevice()>","<android.view.InputEvent: android.view.InputDevice getDevice()>"
"<android.view.accessibility.AccessibilityEvent: void setSpeechStateChangeTypes(int)>","<android.view.accessibility.AccessibilityEvent: void setSpeechStateChangeTypes(int)>"
"<android.content.Intent: int fillIn(android.content.Intent,int)>","<android.content.Intent: int fillIn(android.content.Intent,int)>"
"<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>","<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>"
"<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setArgumentsFromDouble(double,int,int)>","<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setArgumentsFromDouble(double,int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTextSelectable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setTextSelectable(boolean)>"
"<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()>","<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()>"
"<java.time.zone.ZoneOffsetTransition: long toEpochSecond()>","<java.time.zone.ZoneOffsetTransition: long toEpochSecond()>"
"<android.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)>","<android.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)>"
"<android.content.IntentFilter: boolean hasCategory(java.lang.String)>","<android.content.IntentFilter: boolean hasCategory(java.lang.String)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(int)>"
"<android.view.WindowInsets: void <init>(android.view.WindowInsets)>","<android.view.WindowInsets: void <init>(android.view.WindowInsets)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusWeeks(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusWeeks(long)>"
"<android.app.PictureInPictureParams: void <init>()>","<android.app.PictureInPictureParams: void <init>()>"
"<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>","<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>"
"<android.os.SystemClock: long uptimeMillis()>","<android.os.SystemClock: long uptimeMillis()>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setSelectionRange(int,int)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setSelectionRange(int,int)>"
"<java.util.function.DoubleFunction: java.lang.Object apply(double)>","<java.util.function.DoubleFunction: java.lang.Object apply(double)>"
"<android.graphics.fonts.Font: java.io.File getFile()>","<android.graphics.fonts.Font: java.io.File getFile()>"
"<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>","<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>"
"<android.widget.AdapterView: void removeAllViews()>","<android.widget.AdapterView: void removeAllViews()>"
"<java.lang.System: java.lang.String getProperty(java.lang.String)>","<java.lang.System: java.lang.String getProperty(java.lang.String)>"
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>","<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>"
"<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel[] values()>","<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel[] values()>"
"<java.nio.channels.SocketChannel: boolean isConnectionPending()>","<java.nio.channels.SocketChannel: boolean isConnectionPending()>"
"<android.app.Activity: int getVolumeControlStream()>","<android.app.Activity: int getVolumeControlStream()>"
"<android.view.accessibility.AccessibilityEvent: int getSpeechStateChangeTypes()>","<android.view.accessibility.AccessibilityEvent: int getSpeechStateChangeTypes()>"
"<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getRangeUnit()>","<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getRangeUnit()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>"
"<java.io.BufferedReader: void close()>","<java.io.BufferedReader: void close()>"
"<android.webkit.SslErrorHandler: void cancel()>","<android.webkit.SslErrorHandler: void cancel()>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean removeIf(java.util.function.Predicate)>","<java.util.concurrent.CopyOnWriteArraySet: boolean removeIf(java.util.function.Predicate)>"
"<android.content.ClipData: void <init>(android.content.ClipData)>","<android.content.ClipData: void <init>(android.content.ClipData)>"
"<android.view.textclassifier.TextSelection$Request: int describeContents()>","<android.view.textclassifier.TextSelection$Request: int describeContents()>"
"<android.view.View: void setRight(int)>","<android.view.View: void setRight(int)>"
"<java.util.List: java.util.List of()>","<java.util.List: java.util.List of()>"
"<java.net.URL: java.lang.String toExternalForm()>","<java.net.URL: java.lang.String toExternalForm()>"
"<java.util.jar.Attributes: void putAll(java.util.Map)>","<java.util.jar.Attributes: void putAll(java.util.Map)>"
"<java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()>","<java.util.concurrent.CopyOnWriteArraySet: java.lang.Object[] toArray()>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setIncludePad(boolean)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder setIncludePad(boolean)>"
"<java.time.LocalDateTime: int getNano()>","<java.time.LocalDateTime: int getNano()>"
"<java.io.ObjectInputStream: void <init>(java.io.InputStream)>","<java.io.ObjectInputStream: void <init>(java.io.InputStream)>"
"<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>"
"<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>","<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>"
"<java.lang.Character: boolean isDefined(char)>","<java.lang.Character: boolean isDefined(char)>"
"<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicBoolean: java.lang.String toString()>"
"<android.view.ViewGroup: void setLayoutMode(int)>","<android.view.ViewGroup: void setLayoutMode(int)>"
"<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>","<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>"
"<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()>","<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()>"
"<android.app.ActivityManager$AppTask: void moveToFront()>","<android.app.ActivityManager$AppTask: void moveToFront()>"
"<android.widget.AbsListView: boolean isTextFilterEnabled()>","<android.widget.AbsListView: boolean isTextFilterEnabled()>"
"<java.util.TimeZone: int getOffset(int,int,int,int,int,int)>","<java.util.TimeZone: int getOffset(int,int,int,int,int,int)>"
"<java.lang.ref.Reference: void <init>()>","<java.lang.ref.Reference: void <init>()>"
"<android.view.KeyEvent: char getDisplayLabel()>","<android.view.KeyEvent: char getDisplayLabel()>"
"<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>"
"<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>","<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>"
"<android.graphics.Path: void <init>(android.graphics.Path)>","<android.graphics.Path: void <init>(android.graphics.Path)>"
"<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>","<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>"
"<io.flutter.plugins.webviewflutter.s: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.s: void a(java.lang.Object,y.a$e)>"
"<java.lang.ThreadGroup: void resume()>","<java.lang.ThreadGroup: void resume()>"
"<android.view.View: boolean isInTouchMode()>","<android.view.View: boolean isInTouchMode()>"
"<androidx.window.embedding.g: void run()>","<androidx.window.embedding.g: void run()>"
"<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>"
"<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named valueOf(java.lang.String)>","<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named valueOf(java.lang.String)>"
"<android.webkit.WebResourceRequest: boolean hasGesture()>","<android.webkit.WebResourceRequest: boolean hasGesture()>"
"<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>","<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>"
"<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>"
"<android.widget.PopupWindow: boolean isSplitTouchEnabled()>","<android.widget.PopupWindow: boolean isSplitTouchEnabled()>"
"<android.view.textservice.SpellCheckerSubtype: boolean equals(java.lang.Object)>","<android.view.textservice.SpellCheckerSubtype: boolean equals(java.lang.Object)>"
"<java.io.ObjectOutputStream: void writeChars(java.lang.String)>","<java.io.ObjectOutputStream: void writeChars(java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: int getFromIndex()>","<android.view.accessibility.AccessibilityRecord: int getFromIndex()>"
"<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>","<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>"
"<android.view.accessibility.AccessibilityRecord: java.util.List getText()>","<android.view.accessibility.AccessibilityRecord: java.util.List getText()>"
"<java.time.temporal.TemporalUnit: java.time.Duration getDuration()>","<java.time.temporal.TemporalUnit: java.time.Duration getDuration()>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>"
"<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>","<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>"
"<java.io.FileInputStream: java.io.FileDescriptor getFD()>","<java.io.FileInputStream: java.io.FileDescriptor getFD()>"
"<android.app.Person$Builder: android.app.Person$Builder setKey(java.lang.String)>","<android.app.Person$Builder: android.app.Person$Builder setKey(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>","<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>"
"<java.net.Socket: java.nio.channels.SocketChannel getChannel()>","<java.net.Socket: java.nio.channels.SocketChannel getChannel()>"
"<android.view.inputmethod.BaseInputConnection: boolean beginBatchEdit()>","<android.view.inputmethod.BaseInputConnection: boolean beginBatchEdit()>"
"<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>","<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>"
"<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)>","<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)>"
"<android.net.Uri: java.lang.String getEncodedUserInfo()>","<android.net.Uri: java.lang.String getEncodedUserInfo()>"
"<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>","<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>"
"<java.lang.Thread: void setPriority(int)>","<java.lang.Thread: void setPriority(int)>"
"<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>","<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>"
"<java.util.stream.DoubleStream: double[] toArray()>","<java.util.stream.DoubleStream: double[] toArray()>"
"<java.util.ArrayDeque: java.lang.Object peekFirst()>","<java.util.ArrayDeque: java.lang.Object peekFirst()>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: void <init>(android.content.ComponentName,int,int)>","<android.content.pm.PackageManager$ComponentEnabledSetting: void <init>(android.content.ComponentName,int,int)>"
"<android.view.textclassifier.TextLinks$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLinks$Request: android.os.Bundle getExtras()>"
"<android.view.MotionEvent: float getHistoricalTouchMinor(int)>","<android.view.MotionEvent: float getHistoricalTouchMinor(int)>"
"<java.security.Provider: java.util.Collection values()>","<java.security.Provider: java.util.Collection values()>"
"<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>","<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>"
"<android.graphics.Paint: long getColorLong()>","<android.graphics.Paint: long getColorLong()>"
"<android.app.Notification$Extender: android.app.Notification$Builder extend(android.app.Notification$Builder)>","<android.app.Notification$Extender: android.app.Notification$Builder extend(android.app.Notification$Builder)>"
"<android.util.SparseBooleanArray: java.lang.String toString()>","<android.util.SparseBooleanArray: java.lang.String toString()>"
"<java.lang.String: java.lang.String valueOf(float)>","<java.lang.String: java.lang.String valueOf(float)>"
"<android.app.Activity: int getTaskId()>","<android.app.Activity: int getTaskId()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double)>","<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double)>"
"<java.nio.Buffer: int remaining()>","<java.nio.Buffer: int remaining()>"
"<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String)>","<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel valueOf(java.lang.String)>"
"<java.util.Spliterator: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator: boolean tryAdvance(java.util.function.Consumer)>"
"<android.view.PointerIcon: int describeContents()>","<android.view.PointerIcon: int describeContents()>"
"<java.util.Iterator: void remove()>","<java.util.Iterator: void remove()>"
"<android.view.textservice.SpellCheckerInfo: int describeContents()>","<android.view.textservice.SpellCheckerInfo: int describeContents()>"
"<android.view.Window: android.view.View peekDecorView()>","<android.view.Window: android.view.View peekDecorView()>"
"<java.time.OffsetTime: void <clinit>()>","<java.time.OffsetTime: void <clinit>()>"
"<java.util.Date: int compareTo(java.util.Date)>","<java.util.Date: int compareTo(java.util.Date)>"
"<java.net.URL: int getPort()>","<java.net.URL: int getPort()>"
"<java.lang.String: java.lang.String valueOf(double)>","<java.lang.String: java.lang.String valueOf(double)>"
"<android.view.View: void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>"
"<android.view.View: void postInvalidateDelayed(long)>","<android.view.View: void postInvalidateDelayed(long)>"
"<java.util.stream.Collector: java.util.Set characteristics()>","<java.util.stream.Collector: java.util.Set characteristics()>"
"<android.view.textservice.SpellCheckerSession: void finalize()>","<android.view.textservice.SpellCheckerSession: void finalize()>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>"
"<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>","<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>"
"<android.view.WindowInsets: boolean hasInsets()>","<android.view.WindowInsets: boolean hasInsets()>"
"<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>","<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>"
"<android.content.pm.ConfigurationInfo: void <init>()>","<android.content.pm.ConfigurationInfo: void <init>()>"
"<android.database.Cursor: int getCount()>","<android.database.Cursor: int getCount()>"
"<android.view.ViewStructure: void setChildCount(int)>","<android.view.ViewStructure: void setChildCount(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot(int)>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot(int)>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean containsAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArraySet: boolean containsAll(java.util.Collection)>"
"<java.time.LocalTime: java.time.OffsetTime atOffset(java.time.ZoneOffset)>","<java.time.LocalTime: java.time.OffsetTime atOffset(java.time.ZoneOffset)>"
"<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>","<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>"
"<java.nio.ByteBuffer: double getDouble()>","<java.nio.ByteBuffer: double getDouble()>"
"<io.flutter.plugins.webviewflutter.m: void <init>(io.flutter.plugins.webviewflutter.k$b)>","<io.flutter.plugins.webviewflutter.m: void <init>(io.flutter.plugins.webviewflutter.k$b)>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean retainAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArraySet: boolean retainAll(java.util.Collection)>"
"<java.time.OffsetDateTime: java.lang.String toString()>","<java.time.OffsetDateTime: java.lang.String toString()>"
"<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>","<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>"
"<java.text.FieldPosition: void <init>(int)>","<java.text.FieldPosition: void <init>(int)>"
"<java.net.Socket: java.lang.Object getOption(java.net.SocketOption)>","<java.net.Socket: java.lang.Object getOption(java.net.SocketOption)>"
"<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>","<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setExtras(android.os.Bundle)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setExtras(android.os.Bundle)>"
"<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.time.LocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>"
"<android.widget.ListView: void onFinishInflate()>","<android.widget.ListView: void onFinishInflate()>"
"<android.view.View: void setWillNotDraw(boolean)>","<android.view.View: void setWillNotDraw(boolean)>"
"<android.view.Window: boolean getSharedElementsUseOverlay()>","<android.view.Window: boolean getSharedElementsUseOverlay()>"
"<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>","<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>","<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>"
"<android.content.res.loader.ResourcesProvider: void <init>()>","<android.content.res.loader.ResourcesProvider: void <init>()>"
"<java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>","<java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>"
"<android.app.ActionBar: int getNavigationItemCount()>","<android.app.ActionBar: int getNavigationItemCount()>"
"<java.util.NavigableMap: java.lang.Object higherKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object higherKey(java.lang.Object)>"
"<android.view.inputmethod.BaseInputConnection: int getComposingSpanStart(android.text.Spannable)>","<android.view.inputmethod.BaseInputConnection: int getComposingSpanStart(android.text.Spannable)>"
"<android.view.View: void setPreferKeepClearRects(java.util.List)>","<android.view.View: void setPreferKeepClearRects(java.util.List)>"
"<java.io.PrintStream: void println(char[])>","<java.io.PrintStream: void println(char[])>"
"<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>"
"<android.view.ViewPropertyAnimator: long getDuration()>","<android.view.ViewPropertyAnimator: long getDuration()>"
"<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastModifiedTime(java.nio.file.attribute.FileTime)>","<java.util.zip.ZipEntry: java.util.zip.ZipEntry setLastModifiedTime(java.nio.file.attribute.FileTime)>"
"<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>","<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>"
"<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>","<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>"
"<android.widget.TextView: android.view.autofill.AutofillValue getAutofillValue()>","<android.widget.TextView: android.view.autofill.AutofillValue getAutofillValue()>"
"<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>","<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>"
"<android.content.Intent$ShortcutIconResource: int describeContents()>","<android.content.Intent$ShortcutIconResource: int describeContents()>"
"<android.graphics.SurfaceTexture: void finalize()>","<android.graphics.SurfaceTexture: void finalize()>"
"<java.util.PriorityQueue: void <init>(int)>","<java.util.PriorityQueue: void <init>(int)>"
"<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>","<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>"
"<android.app.PictureInPictureUiState: boolean equals(java.lang.Object)>","<android.app.PictureInPictureUiState: boolean equals(java.lang.Object)>"
"<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>","<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(double,double)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(double,double)>"
"<android.app.AlertDialog: void onCreate(android.os.Bundle)>","<android.app.AlertDialog: void onCreate(android.os.Bundle)>"
"<java.util.concurrent.LinkedBlockingQueue: int size()>","<java.util.concurrent.LinkedBlockingQueue: int size()>"
"<android.content.pm.PackageManager: boolean setAutoRevokeWhitelisted(java.lang.String,boolean)>","<android.content.pm.PackageManager: boolean setAutoRevokeWhitelisted(java.lang.String,boolean)>"
"<android.view.Window$Callback: boolean onSearchRequested(android.view.SearchEvent)>","<android.view.Window$Callback: boolean onSearchRequested(android.view.SearchEvent)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
"<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.app.Fragment: void onPause()>","<android.app.Fragment: void onPause()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetAcquire(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetAcquire(int,java.lang.Object,java.lang.Object)>"
"<android.os.Vibrator: void <init>()>","<android.os.Vibrator: void <init>()>"
"<android.view.ViewGroup: boolean getClipChildren()>","<android.view.ViewGroup: boolean getClipChildren()>"
"<android.view.ViewGroup: void debug(int)>","<android.view.ViewGroup: void debug(int)>"
"<android.text.SpannableStringBuilder: int hashCode()>","<android.text.SpannableStringBuilder: int hashCode()>"
"<android.widget.PopupWindow: void setElevation(float)>","<android.widget.PopupWindow: void setElevation(float)>"
"<android.widget.AbsListView: int getLeftPaddingOffset()>","<android.widget.AbsListView: int getLeftPaddingOffset()>"
"<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[])>"
"<android.graphics.BitmapFactory$Options: void requestCancelDecode()>","<android.graphics.BitmapFactory$Options: void requestCancelDecode()>"
"<android.view.View: void requestFitSystemWindows()>","<android.view.View: void requestFitSystemWindows()>"
"<android.view.MenuItem: android.view.MenuItem setTitle(int)>","<android.view.MenuItem: android.view.MenuItem setTitle(int)>"
"<java.nio.channels.SelectionKey: int interestOpsAnd(int)>","<java.nio.channels.SelectionKey: int interestOpsAnd(int)>"
"<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>","<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>"
"<java.util.Locale$LanguageRange: void <init>(java.lang.String)>","<java.util.Locale$LanguageRange: void <init>(java.lang.String)>"
"<java.lang.AutoCloseable: void close()>","<java.lang.AutoCloseable: void close()>"
"<java.lang.Character: int toCodePoint(char,char)>","<java.lang.Character: int toCodePoint(char,char)>"
"<java.time.LocalDateTime: int getMonthValue()>","<java.time.LocalDateTime: int getMonthValue()>"
"<io.flutter.plugins.webviewflutter.l2: void run()>","<io.flutter.plugins.webviewflutter.l2: void run()>"
"<android.view.View: float getElevation()>","<android.view.View: float getElevation()>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setText(java.lang.CharSequence)>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setText(java.lang.CharSequence)>"
"<java.net.DatagramSocket: int getReceiveBufferSize()>","<java.net.DatagramSocket: int getReceiveBufferSize()>"
"<android.content.AttributionSource: android.content.AttributionSource getNext()>","<android.content.AttributionSource: android.content.AttributionSource getNext()>"
"<java.io.FileInputStream: int read(byte[])>","<java.io.FileInputStream: int read(byte[])>"
"<android.database.ContentObserver: void dispatchChange(boolean)>","<android.database.ContentObserver: void dispatchChange(boolean)>"
"<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>"
"<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)>","<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)>"
"<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>","<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>"
"<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>","<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>"
"<android.graphics.Paint: void getFontMetricsInt(java.lang.CharSequence,int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>","<android.graphics.Paint: void getFontMetricsInt(java.lang.CharSequence,int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>"
"<java.time.chrono.Chronology: int compareTo(java.time.chrono.Chronology)>","<java.time.chrono.Chronology: int compareTo(java.time.chrono.Chronology)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(double)>","<java.lang.StringBuilder: java.lang.StringBuilder append(double)>"
"<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>","<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>"
"<java.util.Calendar: int getWeeksInWeekYear()>","<java.util.Calendar: int getWeeksInWeekYear()>"
"<java.util.ArrayDeque: java.lang.Object getLast()>","<java.util.ArrayDeque: java.lang.Object getLast()>"
"<android.media.AudioAttributes: boolean equals(java.lang.Object)>","<android.media.AudioAttributes: boolean equals(java.lang.Object)>"
"<java.util.Collections: java.util.ListIterator emptyListIterator()>","<java.util.Collections: java.util.ListIterator emptyListIterator()>"
"<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>","<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>"
"<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>","<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>"
"<android.transition.TransitionManager: void go(android.transition.Scene)>","<android.transition.TransitionManager: void go(android.transition.Scene)>"
"<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>","<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>"
"<java.io.Reader: boolean ready()>","<java.io.Reader: boolean ready()>"
"<android.os.Build: java.lang.String getRadioVersion()>","<android.os.Build: java.lang.String getRadioVersion()>"
"<android.widget.TextView: int getOffsetForPosition(float,float)>","<android.widget.TextView: int getOffsetForPosition(float,float)>"
"<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>","<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>"
"<android.view.InputDevice: int getId()>","<android.view.InputDevice: int getId()>"
"<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()>","<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue build()>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue build()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>","<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>"
"<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>","<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>"
"<android.view.animation.Animation: void setStartOffset(long)>","<android.view.animation.Animation: void setStartOffset(long)>"
"<android.content.Context: java.lang.String getOpPackageName()>","<android.content.Context: java.lang.String getOpPackageName()>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int,int)>"
"<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>","<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>"
"<java.io.Reader: int read()>","<java.io.Reader: int read()>"
"<android.view.textclassifier.TextLanguage$Request: void <clinit>()>","<android.view.textclassifier.TextLanguage$Request: void <clinit>()>"
"<android.graphics.ColorSpace$Rgb: float[] getInverseTransform(float[])>","<android.graphics.ColorSpace$Rgb: float[] getInverseTransform(float[])>"
"<java.io.ByteArrayOutputStream: void <init>(int)>","<java.io.ByteArrayOutputStream: void <init>(int)>"
"<android.widget.TextView: void onDraw(android.graphics.Canvas)>","<android.widget.TextView: void onDraw(android.graphics.Canvas)>"
"<java.nio.ByteBuffer: int compareTo(java.lang.Object)>","<java.nio.ByteBuffer: int compareTo(java.lang.Object)>"
"<android.graphics.RectF: void set(android.graphics.Rect)>","<android.graphics.RectF: void set(android.graphics.Rect)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View,int)>"
"<java.util.stream.LongStream$Builder: java.util.stream.LongStream$Builder add(long)>","<java.util.stream.LongStream$Builder: java.util.stream.LongStream$Builder add(long)>"
"<java.time.OffsetDateTime: int getMinute()>","<java.time.OffsetDateTime: int getMinute()>"
"<android.app.Presentation: void <init>(android.content.Context,android.view.Display,int)>","<android.app.Presentation: void <init>(android.content.Context,android.view.Display,int)>"
"<android.window.SplashScreenView: java.time.Instant getIconAnimationStart()>","<android.window.SplashScreenView: java.time.Instant getIconAnimationStart()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)>"
"<android.webkit.CookieManager: void removeSessionCookie()>","<android.webkit.CookieManager: void removeSessionCookie()>"
"<java.util.LinkedList: java.lang.Object removeLast()>","<java.util.LinkedList: java.lang.Object removeLast()>"
"<android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>","<android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>"
"<android.media.session.PlaybackState: android.os.Bundle getExtras()>","<android.media.session.PlaybackState: android.os.Bundle getExtras()>"
"<android.print.PrintDocumentInfo: int getPageCount()>","<android.print.PrintDocumentInfo: int getPageCount()>"
"<android.widget.AbsoluteLayout: void onMeasure(int,int)>","<android.widget.AbsoluteLayout: void onMeasure(int,int)>"
"<android.widget.ImageView: void setImageTintBlendMode(android.graphics.BlendMode)>","<android.widget.ImageView: void setImageTintBlendMode(android.graphics.BlendMode)>"
"<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>","<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>"
"<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>","<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>"
"<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>","<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>","<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>"
"<android.view.textservice.TextInfo: void <clinit>()>","<android.view.textservice.TextInfo: void <clinit>()>"
"<android.view.View: java.lang.Object getTag(int)>","<android.view.View: java.lang.Object getTag(int)>"
"<android.app.ActivityManager$TaskDescription: int describeContents()>","<android.app.ActivityManager$TaskDescription: int describeContents()>"
"<android.app.ActivityManager: int getLargeMemoryClass()>","<android.app.ActivityManager: int getLargeMemoryClass()>"
"<android.util.SparseIntArray: int get(int)>","<android.util.SparseIntArray: int get(int)>"
"<android.app.Dialog: android.app.ActionBar getActionBar()>","<android.app.Dialog: android.app.ActionBar getActionBar()>"
"<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named[] values()>","<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named[] values()>"
"<android.media.VolumeProvider: int getCurrentVolume()>","<android.media.VolumeProvider: int getCurrentVolume()>"
"<android.os.Bundle: void putSize(java.lang.String,android.util.Size)>","<android.os.Bundle: void putSize(java.lang.String,android.util.Size)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action build()>","<android.app.Notification$Action$Builder: android.app.Notification$Action build()>"
"<android.content.ClipDescription: long getTimestamp()>","<android.content.ClipDescription: long getTimestamp()>"
"<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>","<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>"
"<java.util.Hashtable: void replaceAll(java.util.function.BiFunction)>","<java.util.Hashtable: void replaceAll(java.util.function.BiFunction)>"
"<java.lang.Math: long abs(long)>","<java.lang.Math: long abs(long)>"
"<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>"
"<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>"
"<android.media.ImageReader: android.view.Surface getSurface()>","<android.media.ImageReader: android.view.Surface getSurface()>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()>"
"<java.time.chrono.Era: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.chrono.Era: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>"
"<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>","<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[])>"
"<android.view.MotionEvent: int getPointerCount()>","<android.view.MotionEvent: int getPointerCount()>"
"<java.util.IdentityHashMap: java.util.Set keySet()>","<java.util.IdentityHashMap: java.util.Set keySet()>"
"<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>","<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>"
"<java.util.Collections: java.util.List nCopies(int,java.lang.Object)>","<java.util.Collections: java.util.List nCopies(int,java.lang.Object)>"
"<java.lang.Float: void <init>(java.lang.String)>","<java.lang.Float: void <init>(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()>"
"<android.view.DragAndDropPermissions: void release()>","<android.view.DragAndDropPermissions: void release()>"
"<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<java.util.stream.LongStream: java.util.stream.LongStream concat(java.util.stream.LongStream,java.util.stream.LongStream)>","<java.util.stream.LongStream: java.util.stream.LongStream concat(java.util.stream.LongStream,java.util.stream.LongStream)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>"
"<android.content.ContentResolver: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>"
"<android.view.ViewTreeObserver$OnTouchModeChangeListener: void onTouchModeChanged(boolean)>","<android.view.ViewTreeObserver$OnTouchModeChangeListener: void onTouchModeChanged(boolean)>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(android.view.autofill.AutofillId)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(android.view.autofill.AutofillId)>"
"<android.os.Parcel: void writeSize(android.util.Size)>","<android.os.Parcel: void writeSize(android.util.Size)>"
"<java.util.Arrays: void parallelSort(double[],int,int)>","<java.util.Arrays: void parallelSort(double[],int,int)>"
"<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>","<java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>"
"<android.media.Image$Plane: int getRowStride()>","<android.media.Image$Plane: int getRowStride()>"
"<android.icu.util.ULocale: android.icu.util.ULocale forLanguageTag(java.lang.String)>","<android.icu.util.ULocale: android.icu.util.ULocale forLanguageTag(java.lang.String)>"
"<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>","<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long decrementAndGet(java.lang.Object)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long decrementAndGet(java.lang.Object)>"
"<android.app.ActionBar$LayoutParams: void <init>(int,int)>","<android.app.ActionBar$LayoutParams: void <init>(int,int)>"
"<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>","<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>"
"<android.view.autofill.AutofillManager: void unregisterCallback(android.view.autofill.AutofillManager$AutofillCallback)>","<android.view.autofill.AutofillManager: void unregisterCallback(android.view.autofill.AutofillManager$AutofillCallback)>"
"<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setPlayerId(int)>","<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setPlayerId(int)>"
"<java.nio.IntBuffer: java.nio.Buffer limit(int)>","<java.nio.IntBuffer: java.nio.Buffer limit(int)>"
"<java.io.File: void <init>(java.io.File,java.lang.String)>","<java.io.File: void <init>(java.io.File,java.lang.String)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setHapticChannelsMuted(boolean)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setHapticChannelsMuted(boolean)>"
"<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>","<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>"
"<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: void <clinit>()>"
"<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>","<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>"
"<android.animation.LayoutTransition: void disableTransitionType(int)>","<android.animation.LayoutTransition: void disableTransitionType(int)>"
"<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>","<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>"
"<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>","<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>"
"<android.graphics.NinePatch: void finalize()>","<android.graphics.NinePatch: void finalize()>"
"<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>","<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>"
"<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>","<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>"
"<android.util.Rational: void <clinit>()>","<android.util.Rational: void <clinit>()>"
"<java.nio.charset.Charset: int compareTo(java.lang.Object)>","<java.nio.charset.Charset: int compareTo(java.lang.Object)>"
"<android.widget.TextView: void onEditorAction(int)>","<android.widget.TextView: void onEditorAction(int)>"
"<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>","<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>"
"<java.net.Socket: boolean getReuseAddress()>","<java.net.Socket: boolean getReuseAddress()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>"
"<java.net.ServerSocket: boolean isBound()>","<java.net.ServerSocket: boolean isBound()>"
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>","<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>"
"<android.util.Base64: byte[] encode(byte[],int,int,int)>","<android.util.Base64: byte[] encode(byte[],int,int,int)>"
"<java.util.concurrent.locks.LockSupport: void parkUntil(long)>","<java.util.concurrent.locks.LockSupport: void parkUntil(long)>"
"<android.app.Person: java.lang.String getKey()>","<android.app.Person: java.lang.String getKey()>"
"<java.security.Provider: java.lang.String getInfo()>","<java.security.Provider: java.lang.String getInfo()>"
"<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>","<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>"
"<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>","<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>"
"<android.graphics.Picture: void <init>(android.graphics.Picture)>","<android.graphics.Picture: void <init>(android.graphics.Picture)>"
"<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>","<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>"
"<java.lang.Math: long multiplyExact(long,long)>","<java.lang.Math: long multiplyExact(long,long)>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>"
"<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>","<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>"
"<android.os.Handler: void removeMessages(int,java.lang.Object)>","<android.os.Handler: void removeMessages(int,java.lang.Object)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>"
"<java.net.URI: java.lang.String getQuery()>","<java.net.URI: java.lang.String getQuery()>"
"<java.net.ServerSocket: void setReceiveBufferSize(int)>","<java.net.ServerSocket: void setReceiveBufferSize(int)>"
"<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>","<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>"
"<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>","<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>"
"<java.util.stream.DoubleStream: java.util.stream.Stream mapToObj(java.util.function.DoubleFunction)>","<java.util.stream.DoubleStream: java.util.stream.Stream mapToObj(java.util.function.DoubleFunction)>"
"<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>","<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>"
"<android.view.Window: android.transition.Scene getContentScene()>","<android.view.Window: android.transition.Scene getContentScene()>"
"<android.widget.AbsListView$OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>","<android.widget.AbsListView$OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>"
"<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>","<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>"
"<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>","<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>"
"<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>"
"<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.os.VibrationAttributes)>","<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.os.VibrationAttributes)>"
"<android.media.AudioAttributes: void <clinit>()>","<android.media.AudioAttributes: void <clinit>()>"
"<android.view.View: android.os.Handler getHandler()>","<android.view.View: android.os.Handler getHandler()>"
"<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>"
"<java.util.concurrent.atomic.AtomicInteger: int getOpaque()>","<java.util.concurrent.atomic.AtomicInteger: int getOpaque()>"
"<android.graphics.Canvas: void drawColor(int)>","<android.graphics.Canvas: void drawColor(int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>","<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>"
"<android.app.Dialog: void onStop()>","<android.app.Dialog: void onStop()>"
"<java.io.FileDescriptor: void <clinit>()>","<java.io.FileDescriptor: void <clinit>()>"
"<java.time.LocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>"
"<java.util.Map: java.lang.Object remove(java.lang.Object)>","<java.util.Map: java.lang.Object remove(java.lang.Object)>"
"<java.time.LocalTime: long toNanoOfDay()>","<java.time.LocalTime: long toNanoOfDay()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>","<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>"
"<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])>"
"<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>"
"<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>","<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>"
"<java.io.PrintWriter: void print(boolean)>","<java.io.PrintWriter: void print(boolean)>"
"<android.view.inputmethod.EditorInfo: void setInitialSurroundingText(java.lang.CharSequence)>","<android.view.inputmethod.EditorInfo: void setInitialSurroundingText(java.lang.CharSequence)>"
"<android.view.contentcapture.ContentCaptureSession: android.view.autofill.AutofillId newAutofillId(android.view.autofill.AutofillId,long)>","<android.view.contentcapture.ContentCaptureSession: android.view.autofill.AutofillId newAutofillId(android.view.autofill.AutofillId,long)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAccumulate(java.lang.Object,int,java.util.function.IntBinaryOperator)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndAccumulate(java.lang.Object,int,java.util.function.IntBinaryOperator)>"
"<android.content.pm.ModuleInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ModuleInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>"
"<java.text.NumberFormat: boolean equals(java.lang.Object)>","<java.text.NumberFormat: boolean equals(java.lang.Object)>"
"<java.time.LocalTime: java.time.LocalTime now(java.time.ZoneId)>","<java.time.LocalTime: java.time.LocalTime now(java.time.ZoneId)>"
"<android.webkit.WebView: void autofill(android.util.SparseArray)>","<android.webkit.WebView: void autofill(android.util.SparseArray)>"
"<android.view.Window: long getTransitionBackgroundFadeDuration()>","<android.view.Window: long getTransitionBackgroundFadeDuration()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addPages(java.util.List)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addPages(java.util.List)>"
"<java.time.format.FormatStyle: void <clinit>()>","<java.time.format.FormatStyle: void <clinit>()>"
"<java.util.LinkedList: int indexOf(java.lang.Object)>","<java.util.LinkedList: int indexOf(java.lang.Object)>"
"<android.os.Debug: void resetGlobalFreedSize()>","<android.os.Debug: void resetGlobalFreedSize()>"
"<java.net.DatagramSocket: java.util.Set supportedOptions()>","<java.net.DatagramSocket: java.util.Set supportedOptions()>"
"<android.app.ActivityManager$RunningServiceInfo: void <init>()>","<android.app.ActivityManager$RunningServiceInfo: void <init>()>"
"<android.database.Cursor: short getShort(int)>","<android.database.Cursor: short getShort(int)>"
"<android.text.SpannableString: int getSpanEnd(java.lang.Object)>","<android.text.SpannableString: int getSpanEnd(java.lang.Object)>"
"<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()>","<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()>"
"<android.webkit.WebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.webkit.WebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostSaveInstanceState(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostSaveInstanceState(android.app.Activity,android.os.Bundle)>"
"<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>","<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>"
"<java.util.AbstractList: void <init>()>","<java.util.AbstractList: void <init>()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndAccumulate(java.lang.Object,java.util.function.BinaryOperator)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndAccumulate(java.lang.Object,java.util.function.BinaryOperator)>"
"<java.time.Duration: java.time.Duration minusSeconds(long)>","<java.time.Duration: java.time.Duration minusSeconds(long)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>"
"<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>","<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>"
"<android.widget.TextView: void setImeOptions(int)>","<android.widget.TextView: void setImeOptions(int)>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>"
"<java.util.stream.Collector: java.util.function.Function finisher()>","<java.util.stream.Collector: java.util.function.Function finisher()>"
"<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.widget.RemoteViews: void setViewLayoutMarginAttr(int,int,int)>","<android.widget.RemoteViews: void setViewLayoutMarginAttr(int,int,int)>"
"<java.util.TimeZone: int getRawOffset()>","<java.util.TimeZone: int getRawOffset()>"
"<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>","<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>"
"<android.util.ArrayMap: void <init>(int)>","<android.util.ArrayMap: void <init>(int)>"
"<android.view.Window: void setFeatureDrawableResource(int,int)>","<android.view.Window: void setFeatureDrawableResource(int,int)>"
"<java.lang.String: boolean isBlank()>","<java.lang.String: boolean isBlank()>"
"<android.content.ContextParams$Builder: android.content.ContextParams$Builder setAttributionTag(java.lang.String)>","<android.content.ContextParams$Builder: android.content.ContextParams$Builder setAttributionTag(java.lang.String)>"
"<android.content.IntentFilter: int countDataSchemes()>","<android.content.IntentFilter: int countDataSchemes()>"
"<java.io.PrintWriter: java.io.PrintWriter append(char)>","<java.io.PrintWriter: java.io.PrintWriter append(char)>"
"<java.security.Timestamp: boolean equals(java.lang.Object)>","<java.security.Timestamp: boolean equals(java.lang.Object)>"
"<android.app.PictureInPictureParams: android.util.Rational getExpandedAspectRatio()>","<android.app.PictureInPictureParams: android.util.Rational getExpandedAspectRatio()>"
"<android.view.View$DragShadowBuilder: android.view.View getView()>","<android.view.View$DragShadowBuilder: android.view.View getView()>"
"<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>","<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>"
"<android.view.View: void setTranslationZ(float)>","<android.view.View: void setTranslationZ(float)>"
"<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()>","<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()>"
"<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>","<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>"
"<android.graphics.Matrix: java.lang.String toString()>","<android.graphics.Matrix: java.lang.String toString()>"
"<java.lang.System: long nanoTime()>","<java.lang.System: long nanoTime()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>"
"<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>","<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>"
"<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>","<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>"
"<android.graphics.fonts.Font: int hashCode()>","<android.graphics.fonts.Font: int hashCode()>"
"<android.graphics.BitmapShader: int getFilterMode()>","<android.graphics.BitmapShader: int getFilterMode()>"
"<java.nio.file.Path: java.nio.file.Path normalize()>","<java.nio.file.Path: java.nio.file.Path normalize()>"
"<io.flutter.plugins.webviewflutter.x0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.x0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>","<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>"
"<android.app.VoiceInteractor$Request: void onCancel()>","<android.app.VoiceInteractor$Request: void onCancel()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(java.lang.String)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setNumber(java.lang.String)>"
"<java.util.AbstractCollection: int size()>","<java.util.AbstractCollection: int size()>"
"<android.app.PictureInPictureParams: java.lang.String toString()>","<android.app.PictureInPictureParams: java.lang.String toString()>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowFreeFormInput(boolean)>","<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowFreeFormInput(boolean)>"
"<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.webkit.WebView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>","<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>"
"<android.view.Gravity: boolean isHorizontal(int)>","<android.view.Gravity: boolean isHorizontal(int)>"
"<android.view.inputmethod.EditorBoundsInfo: int describeContents()>","<android.view.inputmethod.EditorBoundsInfo: int describeContents()>"
"<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>","<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>"
"<android.net.Uri: android.net.Uri fromFile(java.io.File)>","<android.net.Uri: android.net.Uri fromFile(java.io.File)>"
"<java.nio.channels.MembershipKey: void <init>()>","<java.nio.channels.MembershipKey: void <init>()>"
"<android.os.Parcel: int[] createIntArray()>","<android.os.Parcel: int[] createIntArray()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>"
"<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>","<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>"
"<android.transition.TransitionPropagation: void captureValues(android.transition.TransitionValues)>","<android.transition.TransitionPropagation: void captureValues(android.transition.TransitionValues)>"
"<java.time.Month: int length(boolean)>","<java.time.Month: int length(boolean)>"
"<org.json.JSONArray: java.lang.String join(java.lang.String)>","<org.json.JSONArray: java.lang.String join(java.lang.String)>"
"<android.view.View: void setTextDirection(int)>","<android.view.View: void setTextDirection(int)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean weakCompareAndSet(java.lang.Object,long,long)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: boolean weakCompareAndSet(java.lang.Object,long,long)>"
"<java.text.NumberFormat: java.lang.String format(double)>","<java.text.NumberFormat: java.lang.String format(double)>"
"<java.lang.Package: int hashCode()>","<java.lang.Package: int hashCode()>"
"<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>","<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>"
"<android.view.WindowInsets: int hashCode()>","<android.view.WindowInsets: int hashCode()>"
"<android.view.View: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>","<android.view.View: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureImageRequest(android.view.ScrollCaptureSession,android.os.CancellationSignal,android.graphics.Rect,java.util.function.Consumer)>","<android.view.ScrollCaptureCallback: void onScrollCaptureImageRequest(android.view.ScrollCaptureSession,android.os.CancellationSignal,android.graphics.Rect,java.util.function.Consumer)>"
"<java.util.concurrent.TimeUnit: long toMillis(long)>","<java.util.concurrent.TimeUnit: long toMillis(long)>"
"<android.graphics.drawable.Drawable: int getMinimumHeight()>","<android.graphics.drawable.Drawable: int getMinimumHeight()>"
"<android.view.WindowInsets$Type: int ime()>","<android.view.WindowInsets$Type: int ime()>"
"<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>","<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>"
"<android.print.PrintAttributes: android.print.PrintAttributes$Margins getMinMargins()>","<android.print.PrintAttributes: android.print.PrintAttributes$Margins getMinMargins()>"
"<android.os.Looper: void quit()>","<android.os.Looper: void quit()>"
"<android.hardware.Sensor: int getMaxDelay()>","<android.hardware.Sensor: int getMaxDelay()>"
"<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>","<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>"
"<android.view.inputmethod.EditorInfo: void setInitialSurroundingSubText(java.lang.CharSequence,int)>","<android.view.inputmethod.EditorInfo: void setInitialSurroundingSubText(java.lang.CharSequence,int)>"
"<android.media.ImageReader: int getImageFormat()>","<android.media.ImageReader: int getImageFormat()>"
"<java.nio.file.FileStore: long getUsableSpace()>","<java.nio.file.FileStore: long getUsableSpace()>"
"<android.webkit.WebView: boolean overlayHorizontalScrollbar()>","<android.webkit.WebView: boolean overlayHorizontalScrollbar()>"
"<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedAction)>","<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedAction)>"
"<android.app.Notification: void <init>()>","<android.app.Notification: void <init>()>"
"<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>","<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>"
"<java.util.regex.Pattern: java.lang.String toString()>","<java.util.regex.Pattern: java.lang.String toString()>"
"<android.util.Pair: java.lang.String toString()>","<android.util.Pair: java.lang.String toString()>"
"<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>","<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>"
"<java.util.ListIterator: java.lang.Object previous()>","<java.util.ListIterator: java.lang.Object previous()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)>","<android.app.Notification$Builder: android.app.Notification$Builder setContentInfo(java.lang.CharSequence)>"
"<android.content.pm.VersionedPackage: boolean equals(java.lang.Object)>","<android.content.pm.VersionedPackage: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>","<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>"
"<android.content.Loader: boolean isAbandoned()>","<android.content.Loader: boolean isAbandoned()>"
"<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>","<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.Instant toInstant(java.time.ZoneOffset)>","<java.time.chrono.ChronoLocalDateTime: java.time.Instant toInstant(java.time.ZoneOffset)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.Lock readLock()>"
"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>","<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>"
"<android.os.ParcelFileDescriptor: long getStatSize()>","<android.os.ParcelFileDescriptor: long getStatSize()>"
"<android.view.animation.Transformation: void setTransformationType(int)>","<android.view.animation.Transformation: void setTransformationType(int)>"
"<java.lang.Double: long doubleToRawLongBits(double)>","<java.lang.Double: long doubleToRawLongBits(double)>"
"<java.nio.CharBuffer: java.nio.Buffer reset()>","<java.nio.CharBuffer: java.nio.Buffer reset()>"
"<java.time.LocalTime: java.time.LocalTime withMinute(int)>","<java.time.LocalTime: java.time.LocalTime withMinute(int)>"
"<java.lang.reflect.Modifier: boolean isPublic(int)>","<java.lang.reflect.Modifier: boolean isPublic(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)>"
"<java.net.SocketAddress: void <init>()>","<java.net.SocketAddress: void <init>()>"
"<java.util.Locale: java.lang.String getCountry()>","<java.util.Locale: java.lang.String getCountry()>"
"<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>","<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,android.webkit.WebResourceRequest,android.webkit.WebResourceError)>"
"<android.app.Activity: void onProvideAssistData(android.os.Bundle)>","<android.app.Activity: void onProvideAssistData(android.os.Bundle)>"
"<android.graphics.RectF: java.lang.String toString()>","<android.graphics.RectF: java.lang.String toString()>"
"<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>","<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>"
"<android.media.session.MediaController$TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)>"
"<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)>","<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)>"
"<java.lang.Integer: int parseUnsignedInt(java.lang.String,int)>","<java.lang.Integer: int parseUnsignedInt(java.lang.String,int)>"
"<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebView: void setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)>","<android.webkit.WebView: void setWebViewRenderProcessClient(java.util.concurrent.Executor,android.webkit.WebViewRenderProcessClient)>"
"<android.widget.RemoteViews: void setAccessibilityTraversalBefore(int,int)>","<android.widget.RemoteViews: void setAccessibilityTraversalBefore(int,int)>"
"<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>","<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>"
"<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLocale(android.icu.util.ULocale)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLocale(android.icu.util.ULocale)>"
"<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>"
"<java.util.regex.MatchResult: java.lang.String group(int)>","<java.util.regex.MatchResult: java.lang.String group(int)>"
"<android.webkit.WebSettings: void setAllowFileAccess(boolean)>","<android.webkit.WebSettings: void setAllowFileAccess(boolean)>"
"<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>","<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>"
"<java.lang.Thread: void sleep(long,int)>","<java.lang.Thread: void sleep(long,int)>"
"<android.view.autofill.AutofillValue: long getDateValue()>","<android.view.autofill.AutofillValue: long getDateValue()>"
"<android.view.ViewGroup: void setDescendantFocusability(int)>","<android.view.ViewGroup: void setDescendantFocusability(int)>"
"<java.nio.channels.spi.AbstractSelector: void end()>","<java.nio.channels.spi.AbstractSelector: void end()>"
"<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>","<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>","<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setBubbleMetadata(android.app.Notification$BubbleMetadata)>","<android.app.Notification$Builder: android.app.Notification$Builder setBubbleMetadata(android.app.Notification$BubbleMetadata)>"
"<android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>","<android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>"
"<android.widget.Toolbar: void setNavigationIcon(int)>","<android.widget.Toolbar: void setNavigationIcon(int)>"
"<android.graphics.RectF: boolean contains(android.graphics.RectF)>","<android.graphics.RectF: boolean contains(android.graphics.RectF)>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int)>","<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int)>"
"<android.content.Intent: android.graphics.Rect getSourceBounds()>","<android.content.Intent: android.graphics.Rect getSourceBounds()>"
"<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>","<java.util.TimeZone: java.lang.String getDisplayName(java.util.Locale)>"
"<java.nio.Buffer: java.nio.Buffer clear()>","<java.nio.Buffer: java.nio.Buffer clear()>"
"<android.widget.TextView: void setMaxHeight(int)>","<android.widget.TextView: void setMaxHeight(int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)>"
"<java.util.Map: void clear()>","<java.util.Map: void clear()>"
"<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>","<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>"
"<android.app.Fragment: boolean isDetached()>","<android.app.Fragment: boolean isDetached()>"
"<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)>","<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSourceRectHint(android.graphics.Rect)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSourceRectHint(android.graphics.Rect)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void <clinit>()>","<android.app.ActivityManager$RunningAppProcessInfo: void <clinit>()>"
"<android.app.Activity: void setEnterSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Activity: void setEnterSharedElementCallback(android.app.SharedElementCallback)>"
"<android.content.ContextWrapper: java.lang.String[] fileList()>","<android.content.ContextWrapper: java.lang.String[] fileList()>"
"<android.graphics.Path: void rLineTo(float,float)>","<android.graphics.Path: void rLineTo(float,float)>"
"<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>","<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>"
"<android.graphics.Paint$Join: void <clinit>()>","<android.graphics.Paint$Join: void <clinit>()>"
"<java.net.Proxy$Type: void <init>(java.lang.String,int)>","<java.net.Proxy$Type: void <init>(java.lang.String,int)>"
"<android.text.PrecomputedText$Params: android.graphics.text.LineBreakConfig getLineBreakConfig()>","<android.text.PrecomputedText$Params: android.graphics.text.LineBreakConfig getLineBreakConfig()>"
"<android.view.Display$Mode: void writeToParcel(android.os.Parcel,int)>","<android.view.Display$Mode: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Math: float nextUp(float)>","<java.lang.Math: float nextUp(float)>"
"<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>","<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>"
"<java.util.Arrays: int compare(boolean[],int,int,boolean[],int,int)>","<java.util.Arrays: int compare(boolean[],int,int,boolean[],int,int)>"
"<java.io.FileInputStream: int available()>","<java.io.FileInputStream: int available()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>"
"<android.util.AttributeSet: int getStyleAttribute()>","<android.util.AttributeSet: int getStyleAttribute()>"
"<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>","<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>"
"<android.print.PrintAttributes$Builder: void <init>()>","<android.print.PrintAttributes$Builder: void <init>()>"
"<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>","<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setSynchronousMode(java.lang.String)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setSynchronousMode(java.lang.String)>"
"<java.util.Arrays: long[] copyOfRange(long[],int,int)>","<java.util.Arrays: long[] copyOfRange(long[],int,int)>"
"<java.net.NetworkInterface: boolean isPointToPoint()>","<java.net.NetworkInterface: boolean isPointToPoint()>"
"<java.util.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)>","<java.util.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)>"
"<java.time.chrono.AbstractChronology: void <init>()>","<java.time.chrono.AbstractChronology: void <init>()>"
"<java.time.format.DecimalStyle: boolean equals(java.lang.Object)>","<java.time.format.DecimalStyle: boolean equals(java.lang.Object)>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>"
"<io.flutter.plugins.webviewflutter.a: void <init>(io.flutter.plugins.webviewflutter.k$n)>","<io.flutter.plugins.webviewflutter.a: void <init>(io.flutter.plugins.webviewflutter.k$n)>"
"<android.graphics.RenderEffect: void <init>()>","<android.graphics.RenderEffect: void <init>()>"
"<android.view.ViewGroup: boolean canAnimate()>","<android.view.ViewGroup: boolean canAnimate()>"
"<java.util.stream.LongStream: java.util.OptionalLong findAny()>","<java.util.stream.LongStream: java.util.OptionalLong findAny()>"
"<android.os.MemoryFile: boolean allowPurging(boolean)>","<android.os.MemoryFile: boolean allowPurging(boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>"
"<android.app.Fragment: void setAllowEnterTransitionOverlap(boolean)>","<android.app.Fragment: void setAllowEnterTransitionOverlap(boolean)>"
"<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>","<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>"
"<android.view.View: void setScrollBarStyle(int)>","<android.view.View: void setScrollBarStyle(int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>"
"<io.flutter.plugins.webviewflutter.c1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.c1: void a(java.lang.Object,y.a$e)>"
"<java.lang.ClassNotFoundException: void <init>(java.lang.String)>","<java.lang.ClassNotFoundException: void <init>(java.lang.String)>"
"<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>"
"<android.view.MotionEvent: int getSource()>","<android.view.MotionEvent: int getSource()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>"
"<android.text.SpannableString: void <init>(java.lang.CharSequence)>","<android.text.SpannableString: void <init>(java.lang.CharSequence)>"
"<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.widget.RemoteViews: void setCharSequenceAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setCharSequenceAttr(int,java.lang.String,int)>"
"<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace$Connector)>","<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace$Connector)>"
"<android.content.ContentProviderClient: void <init>()>","<android.content.ContentProviderClient: void <init>()>"
"<org.json.JSONObject: java.lang.Object wrap(java.lang.Object)>","<org.json.JSONObject: java.lang.Object wrap(java.lang.Object)>"
"<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>","<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>"
"<android.media.session.MediaController$TransportControls: void skipToQueueItem(long)>","<android.media.session.MediaController$TransportControls: void skipToQueueItem(long)>"
"<android.media.Image: int getFormat()>","<android.media.Image: int getFormat()>"
"<android.database.Cursor: int getType(int)>","<android.database.Cursor: int getType(int)>"
"<android.widget.TextView: int computeHorizontalScrollRange()>","<android.widget.TextView: int computeHorizontalScrollRange()>"
"<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>","<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>"
"<android.os.BaseBundle: int size()>","<android.os.BaseBundle: int size()>"
"<java.util.Locale: void <init>(java.lang.String,java.lang.String)>","<java.util.Locale: void <init>(java.lang.String,java.lang.String)>"
"<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>","<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>"
"<java.lang.Error: void <init>()>","<java.lang.Error: void <init>()>"
"<io.flutter.plugins.webviewflutter.c3: void <init>()>","<io.flutter.plugins.webviewflutter.c3: void <init>()>"
"<java.net.NetworkInterface: int getIndex()>","<java.net.NetworkInterface: int getIndex()>"
"<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>","<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>"
"<android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>","<android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>"
"<java.util.stream.Collector: java.util.function.Supplier supplier()>","<java.util.stream.Collector: java.util.function.Supplier supplier()>"
"<android.widget.TextView: void setScroller(android.widget.Scroller)>","<android.widget.TextView: void setScroller(android.widget.Scroller)>"
"<java.lang.NoSuchFieldError: void <init>()>","<java.lang.NoSuchFieldError: void <init>()>"
"<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>","<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.animation.Transformation: java.lang.String toString()>","<android.view.animation.Transformation: java.lang.String toString()>"
"<java.lang.Integer: int sum(int,int)>","<java.lang.Integer: int sum(int,int)>"
"<java.lang.String: int compareTo(java.lang.String)>","<java.lang.String: int compareTo(java.lang.String)>"
"<android.graphics.Rect: void offset(int,int)>","<android.graphics.Rect: void offset(int,int)>"
"<android.view.ViewGroup: void dispatchSetPressed(boolean)>","<android.view.ViewGroup: void dispatchSetPressed(boolean)>"
"<android.widget.PopupWindow: android.transition.Transition getEnterTransition()>","<android.widget.PopupWindow: android.transition.Transition getEnterTransition()>"
"<java.util.List: java.lang.Object get(int)>","<java.util.List: java.lang.Object get(int)>"
"<android.view.InputEvent: int getDeviceId()>","<android.view.InputEvent: int getDeviceId()>"
"<java.util.Date: long getTime()>","<java.util.Date: long getTime()>"
"<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>","<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncPeriodic(long,long)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncPeriodic(long,long)>"
"<android.content.Context: java.lang.String getPackageResourcePath()>","<android.content.Context: java.lang.String getPackageResourcePath()>"
"<androidx.window.layout.d: void <init>()>","<androidx.window.layout.d: void <init>()>"
"<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>","<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>"
"<java.time.Instant: java.time.Instant now()>","<java.time.Instant: java.time.Instant now()>"
"<java.time.OffsetDateTime: int getMonthValue()>","<java.time.OffsetDateTime: int getMonthValue()>"
"<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.lang.String: void <init>(byte[],int,int)>","<java.lang.String: void <init>(byte[],int,int)>"
"<android.content.ServiceConnection: void onNullBinding(android.content.ComponentName)>","<android.content.ServiceConnection: void onNullBinding(android.content.ComponentName)>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)>"
"<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>","<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder addCharacterBounds(int,float,float,float,float,int)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder addCharacterBounds(int,float,float,float,float,int)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setLabel(java.lang.String)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setLabel(java.lang.String)>"
"<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>","<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>"
"<android.webkit.DownloadListener: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>","<android.webkit.DownloadListener: void onDownloadStart(java.lang.String,java.lang.String,java.lang.String,java.lang.String,long)>"
"<android.view.KeyEvent: boolean isSystem()>","<android.view.KeyEvent: boolean isSystem()>"
"<android.widget.TextView: void setText(int)>","<android.widget.TextView: void setText(int)>"
"<java.nio.ByteBuffer: java.nio.Buffer rewind()>","<java.nio.ByteBuffer: java.nio.Buffer rewind()>"
"<android.graphics.Rect: int width()>","<android.graphics.Rect: int width()>"
"<android.media.MediaMetadata: java.util.Set keySet()>","<android.media.MediaMetadata: java.util.Set keySet()>"
"<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>","<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>"
"<android.net.Uri: boolean isAbsolute()>","<android.net.Uri: boolean isAbsolute()>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.view.KeyEvent: boolean isFunctionPressed()>","<android.view.KeyEvent: boolean isFunctionPressed()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)>"
"<android.graphics.Region: boolean isEmpty()>","<android.graphics.Region: boolean isEmpty()>"
"<android.widget.ImageView: void setColorFilter(int)>","<android.widget.ImageView: void setColorFilter(int)>"
"<java.lang.Throwable: java.lang.String toString()>","<java.lang.Throwable: java.lang.String toString()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setRegion(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setRegion(java.lang.String)>"
"<android.webkit.WebMessagePort: void postMessage(android.webkit.WebMessage)>","<android.webkit.WebMessagePort: void postMessage(android.webkit.WebMessage)>"
"<android.content.Intent: void removeFlags(int)>","<android.content.Intent: void removeFlags(int)>"
"<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>","<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>"
"<java.nio.file.FileSystem: java.lang.String getSeparator()>","<java.nio.file.FileSystem: java.lang.String getSeparator()>"
"<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)>","<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)>"
"<android.view.View: void setScrollBarSize(int)>","<android.view.View: void setScrollBarSize(int)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>"
"<java.util.stream.LongStream: java.util.Spliterator$OfLong spliterator()>","<java.util.stream.LongStream: java.util.Spliterator$OfLong spliterator()>"
"<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.webkit.CookieManager: void removeSessionCookies(android.webkit.ValueCallback)>","<android.webkit.CookieManager: void removeSessionCookies(android.webkit.ValueCallback)>"
"<android.view.AttachedSurfaceControl: void addOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>","<android.view.AttachedSurfaceControl: void addOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>"
"<android.view.Display: float getRefreshRate()>","<android.view.Display: float getRefreshRate()>"
"<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>","<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>"
"<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>","<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>"
"<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>","<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>"
"<android.view.MotionEvent: float getYPrecision()>","<android.view.MotionEvent: float getYPrecision()>"
"<java.lang.Double: int intValue()>","<java.lang.Double: int intValue()>"
"<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.ref.Reference: boolean isEnqueued()>","<java.lang.ref.Reference: boolean isEnqueued()>"
"<java.lang.Character: int digit(int,int)>","<java.lang.Character: int digit(int,int)>"
"<android.widget.Toolbar: void setTitleMarginStart(int)>","<android.widget.Toolbar: void setTitleMarginStart(int)>"
"<java.lang.Thread$State: void <init>(java.lang.String,int)>","<java.lang.Thread$State: void <init>(java.lang.String,int)>"
"<java.time.ZoneId: java.time.ZoneId normalized()>","<java.time.ZoneId: java.time.ZoneId normalized()>"
"<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>"
"<java.util.List: java.util.Iterator iterator()>","<java.util.List: java.util.Iterator iterator()>"
"<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.view.textclassifier.TextClassification$Request$Builder: void <init>(java.lang.CharSequence,int,int)>","<android.view.textclassifier.TextClassification$Request$Builder: void <init>(java.lang.CharSequence,int,int)>"
"<java.util.zip.ZipFile: void finalize()>","<java.util.zip.ZipFile: void finalize()>"
"<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,java.lang.CharSequence)>","<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,java.lang.CharSequence)>"
"<android.hardware.display.DeviceProductInfo: int describeContents()>","<android.hardware.display.DeviceProductInfo: int describeContents()>"
"<java.io.Writer: java.lang.Appendable append(char)>","<java.io.Writer: java.lang.Appendable append(char)>"
"<java.net.ServerSocket: int getReceiveBufferSize()>","<java.net.ServerSocket: int getReceiveBufferSize()>"
"<android.hardware.Sensor: boolean isAdditionalInfoSupported()>","<android.hardware.Sensor: boolean isAdditionalInfoSupported()>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: boolean equals(java.lang.Object)>","<android.graphics.ColorSpace$Rgb$TransferParameters: boolean equals(java.lang.Object)>"
"<java.util.zip.ZipEntry: java.lang.String getName()>","<java.util.zip.ZipEntry: java.lang.String getName()>"
"<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>","<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>"
"<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setAnimacy(java.lang.String)>","<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setAnimacy(java.lang.String)>"
"<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>","<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>"
"<android.widget.Toolbar: int getContentInsetStartWithNavigation()>","<android.widget.Toolbar: int getContentInsetStartWithNavigation()>"
"<java.text.NumberFormat: java.math.RoundingMode getRoundingMode()>","<java.text.NumberFormat: java.math.RoundingMode getRoundingMode()>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>"
"<android.app.Fragment$SavedState: void <init>()>","<android.app.Fragment$SavedState: void <init>()>"
"<android.view.ViewConfiguration: void <init>()>","<android.view.ViewConfiguration: void <init>()>"
"<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setLocalOnly(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setLocalOnly(boolean)>"
"<android.view.View: boolean isClickable()>","<android.view.View: boolean isClickable()>"
"<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.util.stream.LongStream: java.util.stream.Stream boxed()>","<java.util.stream.LongStream: java.util.stream.Stream boxed()>"
"<java.lang.StringBuilder: java.lang.StringBuilder reverse()>","<java.lang.StringBuilder: java.lang.StringBuilder reverse()>"
"<android.widget.Toolbar: int getTitleMarginStart()>","<android.widget.Toolbar: int getTitleMarginStart()>"
"<java.nio.file.FileStore: boolean isReadOnly()>","<java.nio.file.FileStore: boolean isReadOnly()>"
"<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>","<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>"
"<android.graphics.RectF: void set(float,float,float,float)>","<android.graphics.RectF: void set(float,float,float,float)>"
"<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>","<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>"
"<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>"
"<android.media.session.PlaybackState$CustomAction: void writeToParcel(android.os.Parcel,int)>","<android.media.session.PlaybackState$CustomAction: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.webkit.WebView: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>"
"<android.view.AttachedSurfaceControl: void removeOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>","<android.view.AttachedSurfaceControl: void removeOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>"
"<java.time.Period: java.time.Period withYears(int)>","<java.time.Period: java.time.Period withYears(int)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(java.lang.Object,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void lazySet(java.lang.Object,int)>"
"<java.time.OffsetTime: java.time.OffsetDateTime atDate(java.time.LocalDate)>","<java.time.OffsetTime: java.time.OffsetDateTime atDate(java.time.LocalDate)>"
"<android.hardware.Sensor: java.lang.String getName()>","<android.hardware.Sensor: java.lang.String getName()>"
"<android.content.pm.ModuleInfo: int describeContents()>","<android.content.pm.ModuleInfo: int describeContents()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setShouldReferToSpellCheckerLanguageSettings(boolean)>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder: android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams$Builder setShouldReferToSpellCheckerLanguageSettings(boolean)>"
"<android.media.session.MediaController$TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)>"
"<java.util.Calendar: boolean isSet(int)>","<java.util.Calendar: boolean isSet(int)>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(int,double)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(int,double)>"
"<android.icu.util.ULocale: java.lang.String getExtension(char)>","<android.icu.util.ULocale: java.lang.String getExtension(char)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lockInterruptibly()>","<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lockInterruptibly()>"
"<java.util.Currency: java.util.Set getAvailableCurrencies()>","<java.util.Currency: java.util.Set getAvailableCurrencies()>"
"<android.graphics.Path: void quadTo(float,float,float,float)>","<android.graphics.Path: void quadTo(float,float,float,float)>"
"<android.animation.Animator: boolean isRunning()>","<android.animation.Animator: boolean isRunning()>"
"<android.graphics.Point: void set(int,int)>","<android.graphics.Point: void set(int,int)>"
"<java.lang.Runtime: void runFinalization()>","<java.lang.Runtime: void runFinalization()>"
"<android.os.Debug: void resetThreadExternalAllocCount()>","<android.os.Debug: void resetThreadExternalAllocCount()>"
"<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>","<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>"
"<java.time.temporal.ValueRange: boolean isIntValue()>","<java.time.temporal.ValueRange: boolean isIntValue()>"
"<java.util.Locale$Builder: java.util.Locale$Builder setRegion(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder setRegion(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.m1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.m1: void a(java.lang.Object,y.a$e)>"
"<android.view.inputmethod.InputMethodManager: boolean isInputMethodSuppressingSpellChecker()>","<android.view.inputmethod.InputMethodManager: boolean isInputMethodSuppressingSpellChecker()>"
"<java.time.zone.ZoneRules: void <init>()>","<java.time.zone.ZoneRules: void <init>()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setExpandedAspectRatio(android.util.Rational)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setExpandedAspectRatio(android.util.Rational)>"
"<android.view.View$MeasureSpec: java.lang.String toString(int)>","<android.view.View$MeasureSpec: java.lang.String toString(int)>"
"<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>"
"<java.time.ZonedDateTime: int getNano()>","<java.time.ZonedDateTime: int getNano()>"
"<java.util.Date: boolean equals(java.lang.Object)>","<java.util.Date: boolean equals(java.lang.Object)>"
"<android.widget.PopupWindow: boolean isClippingEnabled()>","<android.widget.PopupWindow: boolean isClippingEnabled()>"
"<java.time.Duration: java.time.Duration plus(java.time.Duration)>","<java.time.Duration: java.time.Duration plus(java.time.Duration)>"
"<android.view.inputmethod.CursorAnchorInfo: boolean equals(java.lang.Object)>","<android.view.inputmethod.CursorAnchorInfo: boolean equals(java.lang.Object)>"
"<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.NumberFormat: java.lang.StringBuffer format(double,java.lang.StringBuffer,java.text.FieldPosition)>"
"<java.nio.channels.SelectableChannel: boolean isRegistered()>","<java.nio.channels.SelectableChannel: boolean isRegistered()>"
"<io.flutter.plugins.webviewflutter.q: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.q: void a(java.lang.Object,y.a$e)>"
"<android.app.AlertDialog: void setCustomTitle(android.view.View)>","<android.app.AlertDialog: void setCustomTitle(android.view.View)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float,android.graphics.RenderEffect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float,android.graphics.RenderEffect)>"
"<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>","<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>"
"<android.graphics.Outline: void setOval(android.graphics.Rect)>","<android.graphics.Outline: void setOval(android.graphics.Rect)>"
"<android.graphics.drawable.Icon: int getResId()>","<android.graphics.drawable.Icon: int getResId()>"
"<android.view.ActionMode: java.lang.CharSequence getTitle()>","<android.view.ActionMode: java.lang.CharSequence getTitle()>"
"<java.util.HashMap: java.lang.Object clone()>","<java.util.HashMap: java.lang.Object clone()>"
"<android.graphics.Picture: void draw(android.graphics.Canvas)>","<android.graphics.Picture: void draw(android.graphics.Canvas)>"
"<android.view.inputmethod.InputConnection: boolean performEditorAction(int)>","<android.view.inputmethod.InputConnection: boolean performEditorAction(int)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.chrono.Era,int,int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.chrono.Era,int,int,int)>"
"<android.view.ViewGroup: void removeViews(int,int)>","<android.view.ViewGroup: void removeViews(int,int)>"
"<java.lang.Math: long min(long,long)>","<java.lang.Math: long min(long,long)>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>"
"<java.util.stream.IntStream: java.util.stream.BaseStream parallel()>","<java.util.stream.IntStream: java.util.stream.BaseStream parallel()>"
"<java.util.Set: int hashCode()>","<java.util.Set: int hashCode()>"
"<java.lang.Short: java.lang.String toString()>","<java.lang.Short: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>"
"<android.util.Property: java.lang.Class getType()>","<android.util.Property: java.lang.Class getType()>"
"<android.os.Parcel: void writeSerializable(java.io.Serializable)>","<android.os.Parcel: void writeSerializable(java.io.Serializable)>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[],int,int)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(byte[],int,int)>"
"<android.view.InputDevice: android.os.VibratorManager getVibratorManager()>","<android.view.InputDevice: android.os.VibratorManager getVibratorManager()>"
"<java.lang.Character: boolean isIdentifierIgnorable(char)>","<java.lang.Character: boolean isIdentifierIgnorable(char)>"
"<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>","<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>"
"<android.view.KeyEvent: long getEventTime()>","<android.view.KeyEvent: long getEventTime()>"
"<android.webkit.HttpAuthHandler: void cancel()>","<android.webkit.HttpAuthHandler: void cancel()>"
"<java.util.Calendar: void clear()>","<java.util.Calendar: void clear()>"
"<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)>","<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)>"
"<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: void <init>()>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: void <init>()>"
"<java.time.Duration: java.time.Duration minus(long,java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration minus(long,java.time.temporal.TemporalUnit)>"
"<android.media.Session2Token: boolean equals(java.lang.Object)>","<android.media.Session2Token: boolean equals(java.lang.Object)>"
"<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>","<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>"
"<android.view.View: boolean canResolveLayoutDirection()>","<android.view.View: boolean canResolveLayoutDirection()>"
"<java.io.InputStream: void mark(int)>","<java.io.InputStream: void mark(int)>"
"<android.view.accessibility.AccessibilityManager: void <init>()>","<android.view.accessibility.AccessibilityManager: void <init>()>"
"<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>","<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>"
"<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.view.textservice.SuggestionsInfo[],int[],int[])>","<android.view.textservice.SentenceSuggestionsInfo: void <init>(android.view.textservice.SuggestionsInfo[],int[],int[])>"
"<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)>","<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)>"
"<java.io.PrintWriter: void <init>(java.io.File)>","<java.io.PrintWriter: void <init>(java.io.File)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>"
"<java.util.Arrays: void parallelSort(short[],int,int)>","<java.util.Arrays: void parallelSort(short[],int,int)>"
"<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>","<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>"
"<android.hardware.SensorManager: float getAltitude(float,float)>","<android.hardware.SensorManager: float getAltitude(float,float)>"
"<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>","<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>"
"<android.widget.RemoteViews$RemoteCollectionItems: boolean hasStableIds()>","<android.widget.RemoteViews$RemoteCollectionItems: boolean hasStableIds()>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setReferenceTime(java.time.ZonedDateTime)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setReferenceTime(java.time.ZonedDateTime)>"
"<android.content.pm.ModuleInfo: void <clinit>()>","<android.content.pm.ModuleInfo: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>"
"<android.content.pm.ResolveInfo: int getIconResource()>","<android.content.pm.ResolveInfo: int getIconResource()>"
"<android.app.Activity: void onContentChanged()>","<android.app.Activity: void onContentChanged()>"
"<android.view.View: void setScaleY(float)>","<android.view.View: void setScaleY(float)>"
"<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getSourceSpec()>","<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getSourceSpec()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>"
"<org.json.JSONArray: java.lang.Object opt(int)>","<org.json.JSONArray: java.lang.Object opt(int)>"
"<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>","<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>"
"<io.flutter.plugins.webviewflutter.c2: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.c2: void a(java.lang.Object,y.a$e)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()>","<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()>"
"<android.animation.Animator: void pause()>","<android.animation.Animator: void pause()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)>"
"<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>","<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>"
"<java.io.ObjectStreamClass: void <init>()>","<java.io.ObjectStreamClass: void <init>()>"
"<java.time.Instant: void <clinit>()>","<java.time.Instant: void <clinit>()>"
"<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>","<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>"
"<android.os.Parcel: void readInterfaceArray(android.os.IInterface[],java.util.function.Function)>","<android.os.Parcel: void readInterfaceArray(android.os.IInterface[],java.util.function.Function)>"
"<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>","<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>"
"<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>","<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>"
"<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)>","<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)>"
"<java.util.Locale: java.lang.String toLanguageTag()>","<java.util.Locale: java.lang.String toLanguageTag()>"
"<java.util.Arrays: void fill(long[],int,int,long)>","<java.util.Arrays: void fill(long[],int,int,long)>"
"<java.nio.charset.CharsetEncoder: boolean canEncode(char)>","<java.nio.charset.CharsetEncoder: boolean canEncode(char)>"
"<java.time.Instant: java.lang.String toString()>","<java.time.Instant: java.lang.String toString()>"
"<java.nio.channels.DatagramChannel: java.net.SocketAddress getRemoteAddress()>","<java.nio.channels.DatagramChannel: java.net.SocketAddress getRemoteAddress()>"
"<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>","<java.util.LinkedHashMap: void forEach(java.util.function.BiConsumer)>"
"<java.text.Format$Field: void <init>(java.lang.String)>","<java.text.Format$Field: void <init>(java.lang.String)>"
"<android.webkit.WebView: void setNetworkAvailable(boolean)>","<android.webkit.WebView: void setNetworkAvailable(boolean)>"
"<android.graphics.Color: long pack(float,float,float,float)>","<android.graphics.Color: long pack(float,float,float,float)>"
"<java.util.concurrent.LinkedBlockingQueue: boolean removeIf(java.util.function.Predicate)>","<java.util.concurrent.LinkedBlockingQueue: boolean removeIf(java.util.function.Predicate)>"
"<android.widget.AbsListView: boolean isStackFromBottom()>","<android.widget.AbsListView: boolean isStackFromBottom()>"
"<android.view.animation.Animation: void setRepeatCount(int)>","<android.view.animation.Animation: void setRepeatCount(int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>"
"<android.widget.AbsListView: void <init>(android.content.Context)>","<android.widget.AbsListView: void <init>(android.content.Context)>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()>"
"<android.text.style.TtsSpan$TimeBuilder: void <init>()>","<android.text.style.TtsSpan$TimeBuilder: void <init>()>"
"<java.util.Random: java.util.stream.DoubleStream doubles(double,double)>","<java.util.Random: java.util.stream.DoubleStream doubles(double,double)>"
"<android.util.Log: boolean isLoggable(java.lang.String,int)>","<android.util.Log: boolean isLoggable(java.lang.String,int)>"
"<java.lang.Character: boolean isUnicodeIdentifierStart(char)>","<java.lang.Character: boolean isUnicodeIdentifierStart(char)>"
"<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.util.ConcurrentModificationException: void <init>(java.lang.String,java.lang.Throwable)>","<java.util.ConcurrentModificationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.widget.TextView: void setPadding(int,int,int,int)>","<android.widget.TextView: void setPadding(int,int,int,int)>"
"<java.text.NumberFormat: void setMinimumFractionDigits(int)>","<java.text.NumberFormat: void setMinimumFractionDigits(int)>"
"<java.nio.channels.Selector: boolean isOpen()>","<java.nio.channels.Selector: boolean isOpen()>"
"<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>","<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>"
"<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>","<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>"
"<android.webkit.WebSettings: boolean getSavePassword()>","<android.webkit.WebSettings: boolean getSavePassword()>"
"<android.view.View: boolean isForceDarkAllowed()>","<android.view.View: boolean isForceDarkAllowed()>"
"<android.database.sqlite.SQLiteStatement: void execute()>","<android.database.sqlite.SQLiteStatement: void execute()>"
"<android.view.View: boolean isTextDirectionResolved()>","<android.view.View: boolean isTextDirectionResolved()>"
"<android.app.Dialog: void show()>","<android.app.Dialog: void show()>"
"<java.io.DataOutput: void writeByte(int)>","<java.io.DataOutput: void writeByte(int)>"
"<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>","<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.widget.ListPopupWindow: void setContentWidth(int)>","<android.widget.ListPopupWindow: void setContentWidth(int)>"
"<java.io.File: boolean canExecute()>","<java.io.File: boolean canExecute()>"
"<java.time.Duration: int compareTo(java.lang.Object)>","<java.time.Duration: int compareTo(java.lang.Object)>"
"<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>"
"<android.view.View: int getImportantForAccessibility()>","<android.view.View: int getImportantForAccessibility()>"
"<java.lang.reflect.Parameter: boolean isNamePresent()>","<java.lang.reflect.Parameter: boolean isNamePresent()>"
"<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>","<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>"
"<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>","<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>"
"<android.webkit.WebSettings: boolean enableSmoothTransition()>","<android.webkit.WebSettings: boolean enableSmoothTransition()>"
"<java.nio.charset.CoderResult: void <init>()>","<java.nio.charset.CoderResult: void <init>()>"
"<android.graphics.Region: boolean set(android.graphics.Rect)>","<android.graphics.Region: boolean set(android.graphics.Rect)>"
"<java.lang.Exception: void <init>()>","<java.lang.Exception: void <init>()>"
"<java.lang.String: int indexOf(java.lang.String,int)>","<java.lang.String: int indexOf(java.lang.String,int)>"
"<android.view.inputmethod.BaseInputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>","<android.view.inputmethod.BaseInputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>"
"<android.widget.TextView: void onScrollChanged(int,int,int,int)>","<android.widget.TextView: void onScrollChanged(int,int,int,int)>"
"<android.app.Activity: void overridePendingTransition(int,int,int)>","<android.app.Activity: void overridePendingTransition(int,int,int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>","<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>"
"<android.view.ViewConfiguration: int getJumpTapTimeout()>","<android.view.ViewConfiguration: int getJumpTapTimeout()>"
"<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>","<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>"
"<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>","<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>"
"<android.hardware.display.VirtualDisplay: java.lang.String toString()>","<android.hardware.display.VirtualDisplay: java.lang.String toString()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getPlain(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getPlain(int)>"
"<io.flutter.plugins.webviewflutter.u2: void <init>()>","<io.flutter.plugins.webviewflutter.u2: void <init>()>"
"<android.media.MediaMetadata: int hashCode()>","<android.media.MediaMetadata: int hashCode()>"
"<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>"
"<java.util.concurrent.ThreadPoolExecutor: boolean isTerminating()>","<java.util.concurrent.ThreadPoolExecutor: boolean isTerminating()>"
"<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>","<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>"
"<java.nio.FloatBuffer: int arrayOffset()>","<java.nio.FloatBuffer: int arrayOffset()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: long getIdleConnectionTimeout()>","<android.database.sqlite.SQLiteDatabase$OpenParams: long getIdleConnectionTimeout()>"
"<android.os.Parcel: float readFloat()>","<android.os.Parcel: float readFloat()>"
"<android.opengl.Matrix: void scaleM(float[],int,float[],int,float,float,float)>","<android.opengl.Matrix: void scaleM(float[],int,float[],int,float,float,float)>"
"<java.time.chrono.ChronoLocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>","<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>"
"<java.util.concurrent.locks.ReentrantLock: void lock()>","<java.util.concurrent.locks.ReentrantLock: void lock()>"
"<java.lang.Character: boolean isSpace(char)>","<java.lang.Character: boolean isSpace(char)>"
"<java.util.function.ObjIntConsumer: void accept(java.lang.Object,int)>","<java.util.function.ObjIntConsumer: void accept(java.lang.Object,int)>"
"<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>","<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>"
"<java.util.Date: void <init>()>","<java.util.Date: void <init>()>"
"<android.app.Notification$MessagingStyle$Message: android.net.Uri getDataUri()>","<android.app.Notification$MessagingStyle$Message: android.net.Uri getDataUri()>"
"<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>","<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>"
"<android.graphics.RenderNode: boolean setScaleY(float)>","<android.graphics.RenderNode: boolean setScaleY(float)>"
"<java.lang.reflect.AccessibleObject: void <init>()>","<java.lang.reflect.AccessibleObject: void <init>()>"
"<java.time.Month: int getValue()>","<java.time.Month: int getValue()>"
"<java.util.Arrays: int mismatch(byte[],byte[])>","<java.util.Arrays: int mismatch(byte[],byte[])>"
"<android.view.View: int getOverScrollMode()>","<android.view.View: int getOverScrollMode()>"
"<android.graphics.Matrix: void <init>(android.graphics.Matrix)>","<android.graphics.Matrix: void <init>(android.graphics.Matrix)>"
"<android.view.SurfaceView: void onAttachedToWindow()>","<android.view.SurfaceView: void onAttachedToWindow()>"
"<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>","<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>"
"<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.app.ActionBar: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)>","<android.app.ActionBar: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)>"
"<android.graphics.Matrix: void dump(java.io.PrintWriter)>","<android.graphics.Matrix: void dump(java.io.PrintWriter)>"
"<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>"
"<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>","<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>"
"<android.view.MotionEvent: int getActionIndex()>","<android.view.MotionEvent: int getActionIndex()>"
"<android.view.Surface$OutOfResourcesException: void <init>()>","<android.view.Surface$OutOfResourcesException: void <init>()>"
"<android.webkit.CookieManager: void removeExpiredCookie()>","<android.webkit.CookieManager: void removeExpiredCookie()>"
"<android.graphics.Region: boolean set(android.graphics.Region)>","<android.graphics.Region: boolean set(android.graphics.Region)>"
"<java.io.File: boolean setLastModified(long)>","<java.io.File: boolean setLastModified(long)>"
"<java.nio.channels.Selector: int select()>","<java.nio.channels.Selector: int select()>"
"<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>","<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>"
"<java.util.Collection: java.lang.Object[] toArray()>","<java.util.Collection: java.lang.Object[] toArray()>"
"<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>","<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>"
"<java.util.HashSet: java.util.Spliterator spliterator()>","<java.util.HashSet: java.util.Spliterator spliterator()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>"
"<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)>","<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)>"
"<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>","<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>","<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>"
"<java.util.zip.ZipEntry: long getTime()>","<java.util.zip.ZipEntry: long getTime()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>","<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>"
"<java.nio.file.FileStore: java.lang.Object getAttribute(java.lang.String)>","<java.nio.file.FileStore: java.lang.Object getAttribute(java.lang.String)>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>"
"<java.lang.InstantiationError: void <init>()>","<java.lang.InstantiationError: void <init>()>"
"<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>","<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)>"
"<android.os.Parcel: void writeLongArray(long[])>","<android.os.Parcel: void writeLongArray(long[])>"
"<android.view.View: boolean callOnClick()>","<android.view.View: boolean callOnClick()>"
"<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>","<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>"
"<android.view.View: void setImportantForContentCapture(int)>","<android.view.View: void setImportantForContentCapture(int)>"
"<java.time.chrono.Chronology: java.lang.String getCalendarType()>","<java.time.chrono.Chronology: java.lang.String getCalendarType()>"
"<java.util.function.LongConsumer: java.util.function.LongConsumer andThen(java.util.function.LongConsumer)>","<java.util.function.LongConsumer: java.util.function.LongConsumer andThen(java.util.function.LongConsumer)>"
"<android.content.pm.FeatureInfo: void <clinit>()>","<android.content.pm.FeatureInfo: void <clinit>()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()>","<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()>"
"<java.util.concurrent.locks.Condition: void signal()>","<java.util.concurrent.locks.Condition: void signal()>"
"<android.view.ViewGroup: void removeAllViews()>","<android.view.ViewGroup: void removeAllViews()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)>"
"<android.os.Debug: int getLoadedClassCount()>","<android.os.Debug: int getLoadedClassCount()>"
"<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>","<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>"
"<java.nio.channels.spi.AbstractSelector: void close()>","<java.nio.channels.spi.AbstractSelector: void close()>"
"<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<java.lang.Byte: int hashCode()>","<java.lang.Byte: int hashCode()>"
"<android.view.animation.LayoutAnimationController: int getOrder()>","<android.view.animation.LayoutAnimationController: int getOrder()>"
"<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>","<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>"
"<android.app.SharedElementCallback: void onRejectSharedElements(java.util.List)>","<android.app.SharedElementCallback: void onRejectSharedElements(java.util.List)>"
"<java.nio.channels.FileLock: java.lang.String toString()>","<java.nio.channels.FileLock: java.lang.String toString()>"
"<java.lang.ExceptionInInitializerError: void <init>()>","<java.lang.ExceptionInInitializerError: void <init>()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>","<java.lang.StringBuilder: java.lang.StringBuilder append(long)>"
"<android.view.textclassifier.TextLinks$TextLink: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLinks$TextLink: void writeToParcel(android.os.Parcel,int)>"
"<android.transition.Transition: java.util.List getTargetIds()>","<android.transition.Transition: java.util.List getTargetIds()>"
"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>","<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>"
"<android.view.View: boolean isPaddingRelative()>","<android.view.View: boolean isPaddingRelative()>"
"<java.util.List: boolean contains(java.lang.Object)>","<java.util.List: boolean contains(java.lang.Object)>"
"<android.app.RemoteInput: int getResultsSource(android.content.Intent)>","<android.app.RemoteInput: int getResultsSource(android.content.Intent)>"
"<android.content.res.Configuration: java.lang.String toString()>","<android.content.res.Configuration: java.lang.String toString()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>"
"<java.time.chrono.Chronology: java.util.Set getAvailableChronologies()>","<java.time.chrono.Chronology: java.util.Set getAvailableChronologies()>"
"<android.text.style.TtsSpan$OrdinalBuilder: void <init>()>","<android.text.style.TtsSpan$OrdinalBuilder: void <init>()>"
"<android.view.SubMenu: android.view.MenuItem getItem()>","<android.view.SubMenu: android.view.MenuItem getItem()>"
"<android.os.Parcel: void readException(int,java.lang.String)>","<android.os.Parcel: void readException(int,java.lang.String)>"
"<android.graphics.Canvas: void drawRenderNode(android.graphics.RenderNode)>","<android.graphics.Canvas: void drawRenderNode(android.graphics.RenderNode)>"
"<android.text.style.TtsSpan: int describeContents()>","<android.text.style.TtsSpan: int describeContents()>"
"<android.graphics.ColorSpace: boolean isSrgb()>","<android.graphics.ColorSpace: boolean isSrgb()>"
"<java.lang.Object: void notify()>","<java.lang.Object: void notify()>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setExtras(android.os.Bundle)>"
"<java.security.Permission: java.lang.String getActions()>","<java.security.Permission: java.lang.String getActions()>"
"<java.util.concurrent.locks.Condition: void signalAll()>","<java.util.concurrent.locks.Condition: void signalAll()>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofHours(int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofHours(int)>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>"
"<java.util.function.Supplier: java.lang.Object get()>","<java.util.function.Supplier: java.lang.Object get()>"
"<io.flutter.plugins.webviewflutter.e2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.e2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)>"
"<java.time.ZoneId: java.lang.String toString()>","<java.time.ZoneId: java.lang.String toString()>"
"<android.widget.PopupWindow: void update()>","<android.widget.PopupWindow: void update()>"
"<java.lang.reflect.Constructor: int hashCode()>","<java.lang.reflect.Constructor: int hashCode()>"
"<java.nio.channels.Pipe: java.nio.channels.Pipe$SourceChannel source()>","<java.nio.channels.Pipe: java.nio.channels.Pipe$SourceChannel source()>"
"<java.util.Collections: int indexOfSubList(java.util.List,java.util.List)>","<java.util.Collections: int indexOfSubList(java.util.List,java.util.List)>"
"<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>","<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>"
"<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>","<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int,boolean)>"
"<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)>","<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)>"
"<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>","<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>"
"<java.lang.reflect.Method: int getParameterCount()>","<java.lang.reflect.Method: int getParameterCount()>"
"<android.content.pm.PackageInstaller$Session: boolean isStaged()>","<android.content.pm.PackageInstaller$Session: boolean isStaged()>"
"<android.icu.util.ULocale: java.lang.String getBaseName()>","<android.icu.util.ULocale: java.lang.String getBaseName()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction disallowAddToBackStack()>","<android.app.FragmentTransaction: android.app.FragmentTransaction disallowAddToBackStack()>"
"<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>","<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>"
"<android.app.PendingIntent: boolean isImmutable()>","<android.app.PendingIntent: boolean isImmutable()>"
"<android.app.Presentation: void onStart()>","<android.app.Presentation: void onStart()>"
"<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>","<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>"
"<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>"
"<java.time.Duration: void <init>()>","<java.time.Duration: void <init>()>"
"<java.util.NavigableMap: java.util.SortedMap headMap(java.lang.Object)>","<java.util.NavigableMap: java.util.SortedMap headMap(java.lang.Object)>"
"<java.nio.IntBuffer: boolean hasArray()>","<java.nio.IntBuffer: boolean hasArray()>"
"<java.lang.Math: int min(int,int)>","<java.lang.Math: int min(int,int)>"
"<android.view.textservice.TextInfo: void <init>(java.lang.String)>","<android.view.textservice.TextInfo: void <init>(java.lang.String)>"
"<android.app.Activity: void setContentTransitionManager(android.transition.TransitionManager)>","<android.app.Activity: void setContentTransitionManager(android.transition.TransitionManager)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future read(java.nio.ByteBuffer,long)>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future read(java.nio.ByteBuffer,long)>"
"<java.util.stream.LongStream: boolean anyMatch(java.util.function.LongPredicate)>","<java.util.stream.LongStream: boolean anyMatch(java.util.function.LongPredicate)>"
"<android.content.ContextWrapper: int[] checkCallingUriPermissions(java.util.List,int)>","<android.content.ContextWrapper: int[] checkCallingUriPermissions(java.util.List,int)>"
"<java.lang.Short: short shortValue()>","<java.lang.Short: short shortValue()>"
"<android.app.Notification$Action: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>","<android.app.Notification$Action: void <init>(int,java.lang.CharSequence,android.app.PendingIntent)>"
"<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>","<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>"
"<android.view.accessibility.AccessibilityManager: void addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>","<android.view.accessibility.AccessibilityManager: void addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>"
"<android.view.ViewDebug$FlagToString: java.lang.String name()>","<android.view.ViewDebug$FlagToString: java.lang.String name()>"
"<android.view.Window: void setBackgroundDrawableResource(int)>","<android.view.Window: void setBackgroundDrawableResource(int)>"
"<android.content.ClipData$Item: java.lang.CharSequence getText()>","<android.content.ClipData$Item: java.lang.CharSequence getText()>"
"<android.view.textservice.TextServicesManager: java.util.List getEnabledSpellCheckerInfos()>","<android.view.textservice.TextServicesManager: java.util.List getEnabledSpellCheckerInfos()>"
"<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>","<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>"
"<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>","<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>"
"<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>","<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>"
"<java.util.LinkedList: java.lang.Object[] toArray()>","<java.util.LinkedList: java.lang.Object[] toArray()>"
"<android.app.Notification$MediaStyle: android.app.Notification$MediaStyle setMediaSession(android.media.session.MediaSession$Token)>","<android.app.Notification$MediaStyle: android.app.Notification$MediaStyle setMediaSession(android.media.session.MediaSession$Token)>"
"<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator()>","<java.util.concurrent.CopyOnWriteArrayList: java.util.ListIterator listIterator()>"
"<java.lang.Class: boolean isAnnotation()>","<java.lang.Class: boolean isAnnotation()>"
"<android.text.style.TtsSpan$TelephoneBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$TelephoneBuilder: void <init>(java.lang.String)>"
"<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>"
"<java.lang.Byte: long toUnsignedLong(byte)>","<java.lang.Byte: long toUnsignedLong(byte)>"
"<android.webkit.WebSettings$PluginState: void <init>(java.lang.String,int)>","<android.webkit.WebSettings$PluginState: void <init>(java.lang.String,int)>"
"<androidx.window.embedding.b: boolean test(java.lang.Object)>","<androidx.window.embedding.b: boolean test(java.lang.Object)>"
"<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>","<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void setRemoveOnCancelPolicy(boolean)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void setRemoveOnCancelPolicy(boolean)>"
"<android.view.View: void onProvideStructure(android.view.ViewStructure)>","<android.view.View: void onProvideStructure(android.view.ViewStructure)>"
"<android.view.textclassifier.TextLanguage: java.lang.String getId()>","<android.view.textclassifier.TextLanguage: java.lang.String getId()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.List shutdownNow()>"
"<android.app.Person$Builder: android.app.Person build()>","<android.app.Person$Builder: android.app.Person build()>"
"<android.view.Window: void setMediaController(android.media.session.MediaController)>","<android.view.Window: void setMediaController(android.media.session.MediaController)>"
"<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>","<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>"
"<android.text.Layout: android.text.TextPaint getPaint()>","<android.text.Layout: android.text.TextPaint getPaint()>"
"<android.webkit.WebView: void clearView()>","<android.webkit.WebView: void clearView()>"
"<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<io.flutter.plugins.webviewflutter.n3: void <clinit>()>","<io.flutter.plugins.webviewflutter.n3: void <clinit>()>"
"<java.lang.reflect.Field: boolean isSynthetic()>","<java.lang.reflect.Field: boolean isSynthetic()>"
"<java.util.HashMap: boolean containsKey(java.lang.Object)>","<java.util.HashMap: boolean containsKey(java.lang.Object)>"
"<java.math.BigInteger: java.math.BigInteger abs()>","<java.math.BigInteger: java.math.BigInteger abs()>"
"<java.util.stream.Stream$Builder: java.util.stream.Stream build()>","<java.util.stream.Stream$Builder: java.util.stream.Stream build()>"
"<java.util.Locale$Category: void <clinit>()>","<java.util.Locale$Category: void <clinit>()>"
"<javax.security.auth.Subject: void <init>()>","<javax.security.auth.Subject: void <init>()>"
"<android.content.ContentResolver: void <init>(android.content.Context)>","<android.content.ContentResolver: void <init>(android.content.Context)>"
"<android.view.View: void requestPointerCapture()>","<android.view.View: void requestPointerCapture()>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream unordered()>","<java.util.stream.BaseStream: java.util.stream.BaseStream unordered()>"
"<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>","<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>"
"<java.lang.StringBuilder: void setCharAt(int,char)>","<java.lang.StringBuilder: void setCharAt(int,char)>"
"<android.view.textclassifier.ConversationActions$Request: void <init>()>","<android.view.textclassifier.ConversationActions$Request: void <init>()>"
"<java.io.IOException: void <init>(java.lang.String)>","<java.io.IOException: void <init>(java.lang.String)>"
"<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<java.time.temporal.TemporalUnit: boolean isSupportedBy(java.time.temporal.Temporal)>","<java.time.temporal.TemporalUnit: boolean isSupportedBy(java.time.temporal.Temporal)>"
"<android.view.View: void setAllowClickWhenDisabled(boolean)>","<android.view.View: void setAllowClickWhenDisabled(boolean)>"
"<java.lang.Boolean: boolean booleanValue()>","<java.lang.Boolean: boolean booleanValue()>"
"<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: void <clinit>()>","<android.content.pm.PackageInstaller$SessionInfo: void <clinit>()>"
"<java.io.PrintStream: boolean checkError()>","<java.io.PrintStream: boolean checkError()>"
"<java.util.Calendar: void setTimeInMillis(long)>","<java.util.Calendar: void setTimeInMillis(long)>"
"<android.view.Display: boolean isWideColorGamut()>","<android.view.Display: boolean isWideColorGamut()>"
"<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)>","<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler)>","<android.os.Message: android.os.Message obtain(android.os.Handler)>"
"<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>","<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>"
"<java.nio.channels.Pipe$SinkChannel: int validOps()>","<java.nio.channels.Pipe$SinkChannel: int validOps()>"
"<android.os.Debug: void changeDebugPort(int)>","<android.os.Debug: void changeDebugPort(int)>"
"<android.widget.Scroller: void abortAnimation()>","<android.widget.Scroller: void abortAnimation()>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean getOpaque()>","<java.util.concurrent.atomic.AtomicBoolean: boolean getOpaque()>"
"<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>"
"<java.util.OptionalInt: java.util.OptionalInt empty()>","<java.util.OptionalInt: java.util.OptionalInt empty()>"
"<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>","<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>"
"<java.util.Deque: java.lang.Object removeFirst()>","<java.util.Deque: java.lang.Object removeFirst()>"
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>","<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>"
"<android.webkit.WebView: boolean zoomOut()>","<android.webkit.WebView: boolean zoomOut()>"
"<org.xmlpull.v1.XmlPullParser: boolean isWhitespace()>","<org.xmlpull.v1.XmlPullParser: boolean isWhitespace()>"
"<android.app.Activity: android.app.Dialog onCreateDialog(int)>","<android.app.Activity: android.app.Dialog onCreateDialog(int)>"
"<java.net.Socket: void connect(java.net.SocketAddress,int)>","<java.net.Socket: void connect(java.net.SocketAddress,int)>"
"<android.content.ClipDescription: android.os.PersistableBundle getExtras()>","<android.content.ClipDescription: android.os.PersistableBundle getExtras()>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setNext(android.content.AttributionSource)>","<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setNext(android.content.AttributionSource)>"
"<android.view.ViewGroup: void removeViewInLayout(android.view.View)>","<android.view.ViewGroup: void removeViewInLayout(android.view.View)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>"
"<java.util.ArrayDeque: void addLast(java.lang.Object)>","<java.util.ArrayDeque: void addLast(java.lang.Object)>"
"<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface)>","<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface)>"
"<android.widget.AbsListView: int getSolidColor()>","<android.widget.AbsListView: int getSolidColor()>"
"<android.content.ContextWrapper: java.lang.String getOpPackageName()>","<android.content.ContextWrapper: java.lang.String getOpPackageName()>"
"<java.time.OffsetTime: java.time.ZoneOffset getOffset()>","<java.time.OffsetTime: java.time.ZoneOffset getOffset()>"
"<android.os.Debug: int getThreadExternalAllocCount()>","<android.os.Debug: int getThreadExternalAllocCount()>"
"<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>","<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>"
"<android.view.Display: boolean isHdr()>","<android.view.Display: boolean isHdr()>"
"<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>","<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>"
"<java.io.ObjectInputStream$GetField: short get(java.lang.String,short)>","<java.io.ObjectInputStream$GetField: short get(java.lang.String,short)>"
"<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextAfterCursor(int,int)>","<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextAfterCursor(int,int)>"
"<java.io.PrintWriter: void print(float)>","<java.io.PrintWriter: void print(float)>"
"<android.widget.Toolbar: void setTitle(java.lang.CharSequence)>","<android.widget.Toolbar: void setTitle(java.lang.CharSequence)>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forList(int)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forList(int)>"
"<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>","<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>"
"<java.util.OptionalDouble: boolean isPresent()>","<java.util.OptionalDouble: boolean isPresent()>"
"<android.view.WindowInsetsAnimation: android.view.animation.Interpolator getInterpolator()>","<android.view.WindowInsetsAnimation: android.view.animation.Interpolator getInterpolator()>"
"<java.util.stream.IntStream: java.util.stream.LongStream asLongStream()>","<java.util.stream.IntStream: java.util.stream.LongStream asLongStream()>"
"<android.os.Parcel: void readBooleanArray(boolean[])>","<android.os.Parcel: void readBooleanArray(boolean[])>"
"<java.time.Month: int maxLength()>","<java.time.Month: int maxLength()>"
"<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>","<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>"
"<android.app.AlertDialog$Builder: void <init>(android.content.Context)>","<android.app.AlertDialog$Builder: void <init>(android.content.Context)>"
"<java.nio.IntBuffer: int[] array()>","<java.nio.IntBuffer: int[] array()>"
"<android.widget.PopupWindow: boolean isClippedToScreen()>","<android.widget.PopupWindow: boolean isClippedToScreen()>"
"<android.graphics.RenderNode: boolean setPosition(int,int,int,int)>","<android.graphics.RenderNode: boolean setPosition(int,int,int,int)>"
"<android.view.View: void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>"
"<android.view.MenuItem: char getNumericShortcut()>","<android.view.MenuItem: char getNumericShortcut()>"
"<java.lang.Double: boolean isInfinite()>","<java.lang.Double: boolean isInfinite()>"
"<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>","<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock()>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock()>"
"<android.view.WindowInsetsAnimation: void setFraction(float)>","<android.view.WindowInsetsAnimation: void setFraction(float)>"
"<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>","<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>"
"<android.view.Display$Mode: int getModeId()>","<android.view.Display$Mode: int getModeId()>"
"<java.util.Arrays: int compareUnsigned(short[],short[])>","<java.util.Arrays: int compareUnsigned(short[],short[])>"
"<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()>","<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()>"
"<java.lang.Long: long rotateLeft(long,int)>","<java.lang.Long: long rotateLeft(long,int)>"
"<java.time.OffsetTime: int get(java.time.temporal.TemporalField)>","<java.time.OffsetTime: int get(java.time.temporal.TemporalField)>"
"<io.flutter.embedding.engine.d: void <init>(long)>","<io.flutter.embedding.engine.d: void <init>(long)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
"<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder setFieldClassificationAlgorithmForCategory(java.lang.String,java.lang.String,android.os.Bundle)>","<android.service.autofill.UserData$Builder: android.service.autofill.UserData$Builder setFieldClassificationAlgorithmForCategory(java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.widget.PopupWindow: void setOverlapAnchor(boolean)>","<android.widget.PopupWindow: void setOverlapAnchor(boolean)>"
"<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetPlain(long,long)>","<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetPlain(long,long)>"
"<android.view.ViewStructure: void asyncCommit()>","<android.view.ViewStructure: void asyncCommit()>"
"<android.os.Vibrator: void vibrate(android.os.VibrationEffect)>","<android.os.Vibrator: void vibrate(android.os.VibrationEffect)>"
"<android.view.TextureView: void draw(android.graphics.Canvas)>","<android.view.TextureView: void draw(android.graphics.Canvas)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setText(java.lang.String)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setText(java.lang.String)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder valueOf(java.lang.CharSequence)>"
"<java.lang.reflect.Array: long getLong(java.lang.Object,int)>","<java.lang.reflect.Array: long getLong(java.lang.Object,int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>","<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>"
"<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setColorMode(int)>","<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setColorMode(int)>"
"<java.lang.Thread: void dumpStack()>","<java.lang.Thread: void dumpStack()>"
"<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>","<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>"
"<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>","<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getSelectionMode()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getSelectionMode()>"
"<java.nio.file.FileStore: void <init>()>","<java.nio.file.FileStore: void <init>()>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setExtras(android.os.Bundle)>"
"<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>","<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>"
"<java.util.stream.LongStream: java.util.stream.LongStream sorted()>","<java.util.stream.LongStream: java.util.stream.LongStream sorted()>"
"<android.os.ParcelFileDescriptor: void <clinit>()>","<android.os.ParcelFileDescriptor: void <clinit>()>"
"<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setCase(java.lang.String)>","<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setCase(java.lang.String)>"
"<android.opengl.Matrix: void scaleM(float[],int,float,float,float)>","<android.opengl.Matrix: void scaleM(float[],int,float,float,float)>"
"<android.service.autofill.UserData: int getMaxUserDataSize()>","<android.service.autofill.UserData: int getMaxUserDataSize()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>","<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>"
"<android.view.textclassifier.TextClassifier: void onSelectionEvent(android.view.textclassifier.SelectionEvent)>","<android.view.textclassifier.TextClassifier: void onSelectionEvent(android.view.textclassifier.SelectionEvent)>"
"<java.io.BufferedReader: void reset()>","<java.io.BufferedReader: void reset()>"
"<android.view.Display$HdrCapabilities: void <clinit>()>","<android.view.Display$HdrCapabilities: void <clinit>()>"
"<android.app.Activity: void setVisible(boolean)>","<android.app.Activity: void setVisible(boolean)>"
"<android.view.View: void buildLayer()>","<android.view.View: void buildLayer()>"
"<android.app.VoiceInteractor$AbortVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>","<android.app.VoiceInteractor$AbortVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
"<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>","<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>"
"<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>","<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>"
"<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>","<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>"
"<java.time.LocalDate: int get(java.time.temporal.TemporalField)>","<java.time.LocalDate: int get(java.time.temporal.TemporalField)>"
"<android.os.Parcel: java.io.Serializable readSerializable()>","<android.os.Parcel: java.io.Serializable readSerializable()>"
"<java.nio.LongBuffer: long get(int)>","<java.nio.LongBuffer: long get(int)>"
"<java.io.File: long lastModified()>","<java.io.File: long lastModified()>"
"<android.graphics.RecordingCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>"
"<android.media.session.MediaSession$Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>","<android.media.session.MediaSession$Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
"<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>","<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>"
"<java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>","<java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
"<java.time.Duration: java.time.Duration ofMillis(long)>","<java.time.Duration: java.time.Duration ofMillis(long)>"
"<android.net.Uri: android.net.Uri normalizeScheme()>","<android.net.Uri: android.net.Uri normalizeScheme()>"
"<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>","<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>"
"<java.time.LocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.text.style.TtsSpan$TimeBuilder: android.text.style.TtsSpan$TimeBuilder setHours(int)>","<android.text.style.TtsSpan$TimeBuilder: android.text.style.TtsSpan$TimeBuilder setHours(int)>"
"<android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map)>","<android.app.RemoteInput: void addDataResultToIntent(android.app.RemoteInput,android.content.Intent,java.util.Map)>"
"<java.time.Duration: int toSecondsPart()>","<java.time.Duration: int toSecondsPart()>"
"<android.view.textclassifier.TextClassifierEvent: float[] getScores()>","<android.view.textclassifier.TextClassifierEvent: float[] getScores()>"
"<android.widget.Toolbar: void setContentInsetStartWithNavigation(int)>","<android.widget.Toolbar: void setContentInsetStartWithNavigation(int)>"
"<java.lang.Double: float floatValue()>","<java.lang.Double: float floatValue()>"
"<java.time.LocalTime: java.time.LocalTime of(int,int)>","<java.time.LocalTime: java.time.LocalTime of(int,int)>"
"<java.lang.reflect.Parameter: boolean equals(java.lang.Object)>","<java.lang.reflect.Parameter: boolean equals(java.lang.Object)>"
"<android.os.Parcel: java.util.ArrayList createBinderArrayList()>","<android.os.Parcel: java.util.ArrayList createBinderArrayList()>"
"<java.io.ObjectOutputStream: void writeFields()>","<java.io.ObjectOutputStream: void writeFields()>"
"<android.view.View: boolean onCheckIsTextEditor()>","<android.view.View: boolean onCheckIsTextEditor()>"
"<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>","<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>"
"<android.view.View: void setAutofillId(android.view.autofill.AutofillId)>","<android.view.View: void setAutofillId(android.view.autofill.AutofillId)>"
"<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>","<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>"
"<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.util.jar.Attributes: void clear()>","<java.util.jar.Attributes: void clear()>"
"<android.service.autofill.UserData: int getMinValueLength()>","<android.service.autofill.UserData: int getMinValueLength()>"
"<java.nio.ByteBuffer: short getShort(int)>","<java.nio.ByteBuffer: short getShort(int)>"
"<android.view.WindowInsets$Type: int navigationBars()>","<android.view.WindowInsets$Type: int navigationBars()>"
"<java.nio.ShortBuffer: int hashCode()>","<java.nio.ShortBuffer: int hashCode()>"
"<android.graphics.SurfaceTexture: void updateTexImage()>","<android.graphics.SurfaceTexture: void updateTexImage()>"
"<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>","<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>"
"<android.view.textclassifier.TextClassificationSessionId: int hashCode()>","<android.view.textclassifier.TextClassificationSessionId: int hashCode()>"
"<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>","<java.util.concurrent.BlockingQueue: int drainTo(java.util.Collection)>"
"<android.app.Service: void onTrimMemory(int)>","<android.app.Service: void onTrimMemory(int)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>","<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>"
"<android.app.Notification$WearableExtender: java.lang.Object clone()>","<android.app.Notification$WearableExtender: java.lang.Object clone()>"
"<android.net.http.SslError: int getPrimaryError()>","<android.net.http.SslError: int getPrimaryError()>"
"<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>"
"<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>"
"<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setQuantity(java.lang.String)>","<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setQuantity(java.lang.String)>"
"<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>","<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>"
"<java.time.temporal.ChronoUnit: void <clinit>()>","<java.time.temporal.ChronoUnit: void <clinit>()>"
"<android.widget.ListPopupWindow: void setVerticalOffset(int)>","<android.widget.ListPopupWindow: void setVerticalOffset(int)>"
"<java.util.zip.ZipEntry: byte[] getExtra()>","<java.util.zip.ZipEntry: byte[] getExtra()>"
"<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>","<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>"
"<android.os.Debug: void startMethodTracing(java.lang.String)>","<android.os.Debug: void startMethodTracing(java.lang.String)>"
"<android.view.ContentInfo: android.net.Uri getLinkUri()>","<android.view.ContentInfo: android.net.Uri getLinkUri()>"
"<io.flutter.plugins.webviewflutter.o0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.o0: void a(java.lang.Object,y.a$e)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>"
"<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>","<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence)>","<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence)>"
"<java.util.regex.Matcher: boolean matches()>","<java.util.regex.Matcher: boolean matches()>"
"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>","<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>"
"<java.util.Spliterator$OfDouble: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfDouble: java.util.Spliterator trySplit()>"
"<android.content.ContextWrapper: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>","<android.content.ContextWrapper: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>"
"<java.util.Hashtable: void clear()>","<java.util.Hashtable: void clear()>"
"<android.database.sqlite.SQLiteProgram: void bindNull(int)>","<android.database.sqlite.SQLiteProgram: void bindNull(int)>"
"<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>","<android.webkit.WebView: void setMapTrackballToArrowKeys(boolean)>"
"<android.widget.AdapterView: void setEmptyView(android.view.View)>","<android.widget.AdapterView: void setEmptyView(android.view.View)>"
"<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>","<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>"
"<java.security.Provider: void forEach(java.util.function.BiConsumer)>","<java.security.Provider: void forEach(java.util.function.BiConsumer)>"
"<android.app.Notification$BigTextStyle: void <init>()>","<android.app.Notification$BigTextStyle: void <init>()>"
"<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>","<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>"
"<android.view.accessibility.AccessibilityNodeProvider: void <init>()>","<android.view.accessibility.AccessibilityNodeProvider: void <init>()>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>","<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>"
"<android.media.session.MediaController$TransportControls: void prepare()>","<android.media.session.MediaController$TransportControls: void prepare()>"
"<io.flutter.plugins.webviewflutter.k1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.k1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.app.ActionBar: void setDisplayOptions(int)>","<android.app.ActionBar: void setDisplayOptions(int)>"
"<android.net.Uri: java.lang.String getFragment()>","<android.net.Uri: java.lang.String getFragment()>"
"<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>","<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>"
"<java.math.BigInteger: java.math.BigInteger shiftRight(int)>","<java.math.BigInteger: java.math.BigInteger shiftRight(int)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
"<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>","<android.webkit.WebView: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setIncludeTextClassification(boolean)>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setIncludeTextClassification(boolean)>"
"<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>","<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>"
"<java.net.DatagramPacket: byte[] getData()>","<java.net.DatagramPacket: byte[] getData()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.ZoneId)>"
"<android.widget.Filter: void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)>","<android.widget.Filter: void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)>"
"<org.xmlpull.v1.XmlPullParser: int getDepth()>","<org.xmlpull.v1.XmlPullParser: int getDepth()>"
"<android.net.Uri: java.lang.String getPath()>","<android.net.Uri: java.lang.String getPath()>"
"<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(java.lang.String)>","<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(java.lang.String)>"
"<java.util.Date: void <init>(java.lang.String)>","<java.util.Date: void <init>(java.lang.String)>"
"<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>","<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>"
"<android.text.style.TtsSpan$DecimalBuilder: void <init>()>","<android.text.style.TtsSpan$DecimalBuilder: void <init>()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean weakCompareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean weakCompareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.textclassifier.TextLinks$Request: void <clinit>()>","<android.view.textclassifier.TextLinks$Request: void <clinit>()>"
"<io.flutter.plugin.platform.l: void <init>(io.flutter.plugin.platform.q,int)>","<io.flutter.plugin.platform.l: void <init>(io.flutter.plugin.platform.q,int)>"
"<java.lang.reflect.Field: void setInt(java.lang.Object,int)>","<java.lang.reflect.Field: void setInt(java.lang.Object,int)>"
"<android.os.VibrationAttributes: void <clinit>()>","<android.os.VibrationAttributes: void <clinit>()>"
"<java.io.File: int hashCode()>","<java.io.File: int hashCode()>"
"<androidx.window.sidecar.SidecarInterface: androidx.window.sidecar.SidecarDeviceState getDeviceState()>","<androidx.window.sidecar.SidecarInterface: androidx.window.sidecar.SidecarDeviceState getDeviceState()>"
"<android.view.textclassifier.ConversationActions$Message: int describeContents()>","<android.view.textclassifier.ConversationActions$Message: int describeContents()>"
"<android.view.accessibility.AccessibilityEvent: int getAction()>","<android.view.accessibility.AccessibilityEvent: int getAction()>"
"<android.graphics.Bitmap: boolean hasAlpha()>","<android.graphics.Bitmap: boolean hasAlpha()>"
"<android.content.ContextWrapper: void startActivity(android.content.Intent)>","<android.content.ContextWrapper: void startActivity(android.content.Intent)>"
"<java.lang.String: void <init>(char[])>","<java.lang.String: void <init>(char[])>"
"<android.graphics.RectF: float centerX()>","<android.graphics.RectF: float centerX()>"
"<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setGender(java.lang.String)>","<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setGender(java.lang.String)>"
"<java.util.concurrent.ThreadLocalRandom: boolean nextBoolean()>","<java.util.concurrent.ThreadLocalRandom: boolean nextBoolean()>"
"<android.widget.Toolbar: boolean isOverflowMenuShowing()>","<android.widget.Toolbar: boolean isOverflowMenuShowing()>"
"<android.webkit.TracingConfig: int getPredefinedCategories()>","<android.webkit.TracingConfig: int getPredefinedCategories()>"
"<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getHandwritingBounds()>","<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getHandwritingBounds()>"
"<android.widget.ListAdapter: boolean isEnabled(int)>","<android.widget.ListAdapter: boolean isEnabled(int)>"
"<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>","<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>"
"<android.app.FragmentManager: void popBackStack(java.lang.String,int)>","<android.app.FragmentManager: void popBackStack(java.lang.String,int)>"
"<java.io.File: int compareTo(java.lang.Object)>","<java.io.File: int compareTo(java.lang.Object)>"
"<android.widget.AbsListView: void setSelectedChildViewEnabled(boolean)>","<android.widget.AbsListView: void setSelectedChildViewEnabled(boolean)>"
"<android.os.Parcel: byte[] readBlob()>","<android.os.Parcel: byte[] readBlob()>"
"<android.hardware.SensorManager: float[] getOrientation(float[],float[])>","<android.hardware.SensorManager: float[] getOrientation(float[],float[])>"
"<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<org.json.JSONObject: org.json.JSONArray names()>","<org.json.JSONObject: org.json.JSONArray names()>"
"<android.view.ViewStructure$HtmlInfo$Builder: void <init>()>","<android.view.ViewStructure$HtmlInfo$Builder: void <init>()>"
"<java.math.BigInteger: byte byteValueExact()>","<java.math.BigInteger: byte byteValueExact()>"
"<android.app.Activity: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Activity: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<java.lang.Enum: java.lang.String toString()>","<java.lang.Enum: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDateTime: long toEpochSecond(java.time.ZoneOffset)>","<java.time.chrono.ChronoLocalDateTime: long toEpochSecond(java.time.ZoneOffset)>"
"<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>","<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>"
"<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>","<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>"
"<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>","<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>"
"<java.util.Map: boolean isEmpty()>","<java.util.Map: boolean isEmpty()>"
"<android.view.View: void createContextMenu(android.view.ContextMenu)>","<android.view.View: void createContextMenu(android.view.ContextMenu)>"
"<android.view.Window$OnRestrictedCaptionAreaChangedListener: void onRestrictedCaptionAreaChanged(android.graphics.Rect)>","<android.view.Window$OnRestrictedCaptionAreaChangedListener: void onRestrictedCaptionAreaChanged(android.graphics.Rect)>"
"<android.os.ParcelFileDescriptor: void close()>","<android.os.ParcelFileDescriptor: void close()>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput build()>","<android.app.RemoteInput$Builder: android.app.RemoteInput build()>"
"<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>"
"<android.view.View: java.lang.String[] getAutofillHints()>","<android.view.View: java.lang.String[] getAutofillHints()>"
"<java.util.regex.Pattern: java.lang.String pattern()>","<java.util.regex.Pattern: java.lang.String pattern()>"
"<javax.security.auth.Destroyable: void destroy()>","<javax.security.auth.Destroyable: void destroy()>"
"<android.net.Uri: java.lang.String encode(java.lang.String)>","<android.net.Uri: java.lang.String encode(java.lang.String)>"
"<org.json.JSONException: void <init>(java.lang.Throwable)>","<org.json.JSONException: void <init>(java.lang.Throwable)>"
"<java.util.Set: java.util.Set of()>","<java.util.Set: java.util.Set of()>"
"<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>","<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>"
"<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.view.Window: void setClipToOutline(boolean)>","<android.view.Window: void setClipToOutline(boolean)>"
"<java.time.temporal.ChronoField: java.time.temporal.ChronoField valueOf(java.lang.String)>","<java.time.temporal.ChronoField: java.time.temporal.ChronoField valueOf(java.lang.String)>"
"<java.util.Currency: java.lang.String getSymbol()>","<java.util.Currency: java.lang.String getSymbol()>"
"<android.view.View: void setTransitionName(java.lang.String)>","<android.view.View: void setTransitionName(java.lang.String)>"
"<java.nio.IntBuffer: int get(int)>","<java.nio.IntBuffer: int get(int)>"
"<android.view.Window$OnFrameMetricsAvailableListener: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>","<android.view.Window$OnFrameMetricsAvailableListener: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>"
"<android.os.Bundle: float[] getFloatArray(java.lang.String)>","<android.os.Bundle: float[] getFloatArray(java.lang.String)>"
"<android.app.Notification$DecoratedMediaCustomViewStyle: void <init>()>","<android.app.Notification$DecoratedMediaCustomViewStyle: void <init>()>"
"<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>","<java.util.concurrent.AbstractExecutorService: java.util.List invokeAll(java.util.Collection)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.text.InputFilter$AllCaps: void <init>(java.util.Locale)>","<android.text.InputFilter$AllCaps: void <init>(java.util.Locale)>"
"<android.view.View: android.view.View findFocus()>","<android.view.View: android.view.View findFocus()>"
"<java.io.FilterOutputStream: void write(byte[],int,int)>","<java.io.FilterOutputStream: void write(byte[],int,int)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>"
"<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String)>"
"<java.lang.Character: char forDigit(int,int)>","<java.lang.Character: char forDigit(int,int)>"
"<android.util.ArrayMap: java.lang.String toString()>","<android.util.ArrayMap: java.lang.String toString()>"
"<android.webkit.WebView: void reload()>","<android.webkit.WebView: void reload()>"
"<java.nio.charset.CodingErrorAction: void <init>()>","<java.nio.charset.CodingErrorAction: void <init>()>"
"<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>","<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>"
"<java.io.ObjectInput: int read(byte[],int,int)>","<java.io.ObjectInput: int read(byte[],int,int)>"
"<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()>","<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()>"
"<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>","<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>"
"<java.time.chrono.Era: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.chrono.Era: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.view.View: void setFocusable(boolean)>","<android.view.View: void setFocusable(boolean)>"
"<android.view.ViewParent: void onStopNestedScroll(android.view.View)>","<android.view.ViewParent: void onStopNestedScroll(android.view.View)>"
"<android.view.animation.Animation: boolean hasEnded()>","<android.view.animation.Animation: boolean hasEnded()>"
"<android.os.LocaleList: void <clinit>()>","<android.os.LocaleList: void <clinit>()>"
"<android.view.View: boolean isPreferKeepClear()>","<android.view.View: boolean isPreferKeepClear()>"
"<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>","<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>"
"<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>","<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>"
"<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>"
"<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>","<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>"
"<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>","<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>"
"<android.view.inputmethod.CorrectionInfo: void <clinit>()>","<android.view.inputmethod.CorrectionInfo: void <clinit>()>"
"<java.io.InputStream: byte[] readAllBytes()>","<java.io.InputStream: byte[] readAllBytes()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.LocalTime toLocalTime()>","<java.time.chrono.ChronoZonedDateTime: java.time.LocalTime toLocalTime()>"
"<android.app.Dialog: android.app.Activity getOwnerActivity()>","<android.app.Dialog: android.app.Activity getOwnerActivity()>"
"<java.lang.Math: int round(float)>","<java.lang.Math: int round(float)>"
"<java.text.ParsePosition: void <init>(int)>","<java.text.ParsePosition: void <init>(int)>"
"<android.print.PrintDocumentInfo: void <clinit>()>","<android.print.PrintDocumentInfo: void <clinit>()>"
"<java.io.File: boolean setWritable(boolean)>","<java.io.File: boolean setWritable(boolean)>"
"<androidx.window.extensions.layout.WindowLayoutComponent: void removeWindowLayoutInfoListener(java.util.function.Consumer)>","<androidx.window.extensions.layout.WindowLayoutComponent: void removeWindowLayoutInfoListener(java.util.function.Consumer)>"
"<android.content.pm.PackageManager: java.util.List queryActivityProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryActivityProperty(java.lang.String)>"
"<android.app.VoiceInteractor$Request: android.app.Activity getActivity()>","<android.app.VoiceInteractor$Request: android.app.Activity getActivity()>"
"<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>","<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>"
"<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>","<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>"
"<java.util.regex.MatchResult: java.lang.String group()>","<java.util.regex.MatchResult: java.lang.String group()>"
"<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>","<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>"
"<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.DateFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>"
"<java.nio.IntBuffer: boolean equals(java.lang.Object)>","<java.nio.IntBuffer: boolean equals(java.lang.Object)>"
"<java.lang.ReflectiveOperationException: void <init>()>","<java.lang.ReflectiveOperationException: void <init>()>"
"<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()>"
"<android.media.session.MediaController$PlaybackInfo: void <init>()>","<android.media.session.MediaController$PlaybackInfo: void <init>()>"
"<java.util.Arrays: int hashCode(boolean[])>","<java.util.Arrays: int hashCode(boolean[])>"
"<android.net.http.SslCertificate$DName: java.lang.String getUName()>","<android.net.http.SslCertificate$DName: java.lang.String getUName()>"
"<android.widget.AbsListView: void clearTextFilter()>","<android.widget.AbsListView: void clearTextFilter()>"
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>","<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,android.icu.util.ULocale)>"
"<java.time.LocalTime: int getMinute()>","<java.time.LocalTime: int getMinute()>"
"<java.lang.InterruptedException: void <init>()>","<java.lang.InterruptedException: void <init>()>"
"<java.util.OptionalDouble: java.util.stream.DoubleStream stream()>","<java.util.OptionalDouble: java.util.stream.DoubleStream stream()>"
"<java.time.DayOfWeek: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.nio.channels.Pipe$SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.Pipe$SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.graphics.RenderNode: boolean setRotationZ(float)>","<android.graphics.RenderNode: boolean setRotationZ(float)>"
"<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>","<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>"
"<android.view.textclassifier.TextClassifierEvent: int getEventCategory()>","<android.view.textclassifier.TextClassifierEvent: int getEventCategory()>"
"<android.content.ComponentName: java.lang.Object clone()>","<android.content.ComponentName: java.lang.Object clone()>"
"<java.util.IntSummaryStatistics: void <init>(long,int,int,long)>","<java.util.IntSummaryStatistics: void <init>(long,int,int,long)>"
"<android.graphics.Canvas: int save()>","<android.graphics.Canvas: int save()>"
"<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.webkit.WebView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.content.IntentFilter$AuthorityEntry: boolean equals(java.lang.Object)>","<android.content.IntentFilter$AuthorityEntry: boolean equals(java.lang.Object)>"
"<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>","<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>"
"<android.hardware.SyncFence: void close()>","<android.hardware.SyncFence: void close()>"
"<android.view.SurfaceControl$Transaction: void <clinit>()>","<android.view.SurfaceControl$Transaction: void <clinit>()>"
"<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int,android.view.inputmethod.TextAttribute)>","<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int,android.view.inputmethod.TextAttribute)>"
"<android.text.PrecomputedText: int length()>","<android.text.PrecomputedText: int length()>"
"<android.net.Uri: int hashCode()>","<android.net.Uri: int hashCode()>"
"<android.hardware.BatteryState: void <init>()>","<android.hardware.BatteryState: void <init>()>"
"<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category[] values()>","<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category[] values()>"
"<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: void <init>()>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: void <init>()>"
"<android.net.Uri: java.lang.String getEncodedQuery()>","<android.net.Uri: java.lang.String getEncodedQuery()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>"
"<android.service.autofill.UserData$Builder: android.service.autofill.UserData build()>","<android.service.autofill.UserData$Builder: android.service.autofill.UserData build()>"
"<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>","<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>"
"<java.time.DayOfWeek: java.time.DayOfWeek of(int)>","<java.time.DayOfWeek: java.time.DayOfWeek of(int)>"
"<android.content.res.Resources$Theme: boolean equals(java.lang.Object)>","<android.content.res.Resources$Theme: boolean equals(java.lang.Object)>"
"<android.hardware.display.DisplayManager$DisplayListener: void onDisplayAdded(int)>","<android.hardware.display.DisplayManager$DisplayListener: void onDisplayAdded(int)>"
"<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>","<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>"
"<android.content.pm.FeatureGroupInfo: void <init>(android.content.pm.FeatureGroupInfo)>","<android.content.pm.FeatureGroupInfo: void <init>(android.content.pm.FeatureGroupInfo)>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.util.Spliterator spliterator()>","<java.util.concurrent.ConcurrentLinkedQueue: java.util.Spliterator spliterator()>"
"<android.content.AttributionSource: void writeToParcel(android.os.Parcel,int)>","<android.content.AttributionSource: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>"
"<java.util.Arrays: int binarySearch(byte[],int,int,byte)>","<java.util.Arrays: int binarySearch(byte[],int,int,byte)>"
"<android.view.accessibility.AccessibilityManager: void interrupt()>","<android.view.accessibility.AccessibilityManager: void interrupt()>"
"<android.content.IntentFilter$MalformedMimeTypeException: void <init>()>","<android.content.IntentFilter$MalformedMimeTypeException: void <init>()>"
"<java.net.Proxy: int hashCode()>","<java.net.Proxy: int hashCode()>"
"<java.util.Collections: java.util.List emptyList()>","<java.util.Collections: java.util.List emptyList()>"
"<android.webkit.WebSettings: int getMinimumFontSize()>","<android.webkit.WebSettings: int getMinimumFontSize()>"
"<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>","<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>"
"<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>","<java.util.jar.Attributes: java.lang.String putValue(java.lang.String,java.lang.String)>"
"<android.view.View$AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.View$AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<java.util.Arrays: void sort(float[])>","<java.util.Arrays: void sort(float[])>"
"<java.io.File: boolean isFile()>","<java.io.File: boolean isFile()>"
"<java.util.Map: void putAll(java.util.Map)>","<java.util.Map: void putAll(java.util.Map)>"
"<android.webkit.WebView: void findAllAsync(java.lang.String)>","<android.webkit.WebView: void findAllAsync(java.lang.String)>"
"<java.text.ParsePosition: java.lang.String toString()>","<java.text.ParsePosition: java.lang.String toString()>"
"<java.util.Hashtable: java.util.Set entrySet()>","<java.util.Hashtable: java.util.Set entrySet()>"
"<android.view.View: float getY()>","<android.view.View: float getY()>"
"<android.text.DynamicLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>","<android.text.DynamicLayout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float,boolean)>"
"<android.graphics.RectF: boolean intersect(android.graphics.RectF)>","<android.graphics.RectF: boolean intersect(android.graphics.RectF)>"
"<java.text.NumberFormat: void setMaximumFractionDigits(int)>","<java.text.NumberFormat: void setMaximumFractionDigits(int)>"
"<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>","<android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>"
"<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>","<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>"
"<android.content.pm.SigningInfo: void <init>()>","<android.content.pm.SigningInfo: void <init>()>"
"<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>","<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>"
"<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>","<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>"
"<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>","<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>"
"<android.view.Window: void setUiOptions(int)>","<android.view.Window: void setUiOptions(int)>"
"<android.util.Base64: byte[] decode(byte[],int,int,int)>","<android.util.Base64: byte[] decode(byte[],int,int,int)>"
"<android.view.autofill.AutofillManager: void requestAutofill(android.view.View,int,android.graphics.Rect)>","<android.view.autofill.AutofillManager: void requestAutofill(android.view.View,int,android.graphics.Rect)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>"
"<java.time.LocalTime: java.time.LocalTime now()>","<java.time.LocalTime: java.time.LocalTime now()>"
"<android.hardware.lights.LightsRequest: void <init>()>","<android.hardware.lights.LightsRequest: void <init>()>"
"<android.graphics.Paint: void setColor(int)>","<android.graphics.Paint: void setColor(int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>"
"<java.time.chrono.Chronology: java.time.chrono.Chronology 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.Chronology 'from'(java.time.temporal.TemporalAccessor)>"
"<android.view.View: int getForegroundGravity()>","<android.view.View: int getForegroundGravity()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setPrivacyIndicatorBounds(android.graphics.Rect)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setPrivacyIndicatorBounds(android.graphics.Rect)>"
"<android.view.View: boolean isNestedScrollingEnabled()>","<android.view.View: boolean isNestedScrollingEnabled()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>"
"<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>","<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>"
"<android.webkit.PermissionRequest: void deny()>","<android.webkit.PermissionRequest: void deny()>"
"<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>","<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>"
"<android.content.pm.ChangedPackages: int getSequenceNumber()>","<android.content.pm.ChangedPackages: int getSequenceNumber()>"
"<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>","<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>"
"<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>","<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>"
"<android.app.Application: void onTerminate()>","<android.app.Application: void onTerminate()>"
"<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>","<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>"
"<java.util.TimeZone: java.lang.String[] getAvailableIDs()>","<java.util.TimeZone: java.lang.String[] getAvailableIDs()>"
"<java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>","<java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSeamlessResizeEnabled(boolean)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSeamlessResizeEnabled(boolean)>"
"<android.widget.PopupWindow: void setClippingEnabled(boolean)>","<android.widget.PopupWindow: void setClippingEnabled(boolean)>"
"<java.text.DateFormat: java.util.Date parse(java.lang.String)>","<java.text.DateFormat: java.util.Date parse(java.lang.String)>"
"<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>","<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"
"<android.graphics.RenderNode: void discardDisplayList()>","<android.graphics.RenderNode: void discardDisplayList()>"
"<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>","<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>"
"<android.view.View: float getRotation()>","<android.view.View: float getRotation()>"
"<java.security.cert.CertPath: java.util.Iterator getEncodings()>","<java.security.cert.CertPath: java.util.Iterator getEncodings()>"
"<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>","<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>"
"<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>","<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>"
"<android.widget.AbsListView: boolean isDrawSelectorOnTop()>","<android.widget.AbsListView: boolean isDrawSelectorOnTop()>"
"<android.media.session.MediaController$Callback: void onExtrasChanged(android.os.Bundle)>","<android.media.session.MediaController$Callback: void onExtrasChanged(android.os.Bundle)>"
"<android.view.accessibility.AccessibilityWindowInfo: void recycle()>","<android.view.accessibility.AccessibilityWindowInfo: void recycle()>"
"<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)>","<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)>"
"<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>","<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>"
"<java.time.Month: long getLong(java.time.temporal.TemporalField)>","<java.time.Month: long getLong(java.time.temporal.TemporalField)>"
"<android.animation.Animator: void removePauseListener(android.animation.Animator$AnimatorPauseListener)>","<android.animation.Animator: void removePauseListener(android.animation.Animator$AnimatorPauseListener)>"
"<android.view.WindowManager$LayoutParams: int getFitInsetsTypes()>","<android.view.WindowManager$LayoutParams: int getFitInsetsTypes()>"
"<java.util.concurrent.ThreadLocalRandom: void setSeed(long)>","<java.util.concurrent.ThreadLocalRandom: void setSeed(long)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>"
"<android.util.Rational: double doubleValue()>","<android.util.Rational: double doubleValue()>"
"<java.io.SerializablePermission: void <init>(java.lang.String,java.lang.String)>","<java.io.SerializablePermission: void <init>(java.lang.String,java.lang.String)>"
"<java.io.PrintStream: void println(int)>","<java.io.PrintStream: void println(int)>"
"<android.app.Activity: void onGetDirectActions(android.os.CancellationSignal,java.util.function.Consumer)>","<android.app.Activity: void onGetDirectActions(android.os.CancellationSignal,java.util.function.Consumer)>"
"<android.database.sqlite.SQLiteDatabase: boolean isOpen()>","<android.database.sqlite.SQLiteDatabase: boolean isOpen()>"
"<io.flutter.plugins.webviewflutter.e0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.e0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <clinit>()>"
"<java.time.chrono.ChronoPeriod: boolean isNegative()>","<java.time.chrono.ChronoPeriod: boolean isNegative()>"
"<android.os.VibrationEffect: void <clinit>()>","<android.os.VibrationEffect: void <clinit>()>"
"<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setPageCount(int)>","<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo$Builder setPageCount(int)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(long)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.IntStream ints(long)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getOriginatingUid()>","<android.content.pm.PackageInstaller$SessionInfo: int getOriginatingUid()>"
"<android.graphics.RenderNode: boolean setRenderEffect(android.graphics.RenderEffect)>","<android.graphics.RenderNode: boolean setRenderEffect(android.graphics.RenderEffect)>"
"<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>","<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>"
"<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>","<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>"
"<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()>","<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()>"
"<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>","<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>"
"<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.app.FragmentManager: boolean popBackStackImmediate(int,int)>","<android.app.FragmentManager: boolean popBackStackImmediate(int,int)>"
"<java.lang.UnknownError: void <init>()>","<java.lang.UnknownError: void <init>()>"
"<java.util.TimeZone: java.lang.String getDisplayName()>","<java.util.TimeZone: java.lang.String getDisplayName()>"
"<java.io.ObjectOutput: void close()>","<java.io.ObjectOutput: void close()>"
"<android.view.KeyCharacterMap: boolean isPrintingKey(int)>","<android.view.KeyCharacterMap: boolean isPrintingKey(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream skip(long)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream skip(long)>"
"<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger[] divideAndRemainder(java.math.BigInteger)>"
"<java.lang.Package: void <init>()>","<java.lang.Package: void <init>()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setImageFormat(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setImageFormat(int)>"
"<java.time.LocalDateTime: int getYear()>","<java.time.LocalDateTime: int getYear()>"
"<android.app.Activity: void setTitle(int)>","<android.app.Activity: void setTitle(int)>"
"<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>","<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,java.lang.String)>"
"<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>","<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>"
"<android.view.textservice.SpellCheckerSession: void close()>","<android.view.textservice.SpellCheckerSession: void close()>"
"<io.flutter.plugins.webviewflutter.j3: void <clinit>()>","<io.flutter.plugins.webviewflutter.j3: void <clinit>()>"
"<java.lang.reflect.Constructor: int getModifiers()>","<java.lang.reflect.Constructor: int getModifiers()>"
"<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)>"
"<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)>","<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)>"
"<android.media.VolumeProvider: void <init>(int,int,int)>","<android.media.VolumeProvider: void <init>(int,int,int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>"
"<android.view.View: java.lang.CharSequence getStateDescription()>","<android.view.View: java.lang.CharSequence getStateDescription()>"
"<android.view.autofill.AutofillManager: boolean isAutofillSupported()>","<android.view.autofill.AutofillManager: boolean isAutofillSupported()>"
"<java.net.URLConnection: java.io.OutputStream getOutputStream()>","<java.net.URLConnection: java.io.OutputStream getOutputStream()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setMandatorySystemGestureInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setMandatorySystemGestureInsets(android.graphics.Insets)>"
"<java.util.stream.DoubleStream: java.util.DoubleSummaryStatistics summaryStatistics()>","<java.util.stream.DoubleStream: java.util.DoubleSummaryStatistics summaryStatistics()>"
"<android.view.View: android.graphics.Matrix getMatrix()>","<android.view.View: android.graphics.Matrix getMatrix()>"
"<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)>"
"<android.view.translation.ViewTranslationResponse: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.ViewTranslationResponse: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>"
"<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>","<java.lang.Runtime: java.lang.Process exec(java.lang.String[],java.lang.String[],java.io.File)>"
"<android.view.View: boolean isSelected()>","<android.view.View: boolean isSelected()>"
"<android.graphics.Matrix: void mapVectors(float[])>","<android.graphics.Matrix: void mapVectors(float[])>"
"<java.util.Locale: java.lang.String getExtension(char)>","<java.util.Locale: java.lang.String getExtension(char)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>"
"<android.content.pm.Attribution: int getLabel()>","<android.content.pm.Attribution: int getLabel()>"
"<android.content.ContentProvider: java.lang.String getWritePermission()>","<android.content.ContentProvider: java.lang.String getWritePermission()>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)>"
"<android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>","<android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>"
"<android.app.Fragment: void onHiddenChanged(boolean)>","<android.app.Fragment: void onHiddenChanged(boolean)>"
"<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>","<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>"
"<android.widget.TextView: void setHint(int)>","<android.widget.TextView: void setHint(int)>"
"<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()>","<java.util.jar.JarEntry: java.util.jar.Attributes getAttributes()>"
"<android.widget.TextView: void setMinHeight(int)>","<android.widget.TextView: void setMinHeight(int)>"
"<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>","<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>"
"<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>","<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>"
"<java.nio.charset.CoderResult: boolean isOverflow()>","<java.nio.charset.CoderResult: boolean isOverflow()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>"
"<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>","<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>"
"<java.util.ArrayList: java.util.ListIterator listIterator()>","<java.util.ArrayList: java.util.ListIterator listIterator()>"
"<java.nio.channels.Selector: java.util.Set keys()>","<java.nio.channels.Selector: java.util.Set keys()>"
"<android.view.textclassifier.TextLinks$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLinks$Request: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator)>","<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>","<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews)>"
"<android.view.ViewGroup: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>","<android.view.ViewGroup: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>"
"<android.app.Dialog: void onBackPressed()>","<android.app.Dialog: void onBackPressed()>"
"<java.util.Arrays: int compare(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: int compare(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>"
"<android.widget.TextView: boolean isPaddingOffsetRequired()>","<android.widget.TextView: boolean isPaddingOffsetRequired()>"
"<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>","<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,java.lang.String)>"
"<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>","<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>"
"<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)>","<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)>"
"<android.view.KeyCharacterMap: void <init>()>","<android.view.KeyCharacterMap: void <init>()>"
"<android.content.ComponentName: java.lang.String getClassName()>","<android.content.ComponentName: java.lang.String getClassName()>"
"<java.util.TimeZone: java.lang.String getID()>","<java.util.TimeZone: java.lang.String getID()>"
"<android.media.session.PlaybackState$CustomAction: int describeContents()>","<android.media.session.PlaybackState$CustomAction: int describeContents()>"
"<android.transition.TransitionValues: java.lang.String toString()>","<android.transition.TransitionValues: java.lang.String toString()>"
"<java.util.Properties: void list(java.io.PrintWriter)>","<java.util.Properties: void list(java.io.PrintWriter)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.view.textclassifier.TextLinks$Request$Builder: void <init>(java.lang.CharSequence)>","<android.view.textclassifier.TextLinks$Request$Builder: void <init>(java.lang.CharSequence)>"
"<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)>","<java.util.TimeZone: java.lang.String[] getAvailableIDs(int)>"
"<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>","<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>"
"<java.time.Clock: java.time.Clock tickMinutes(java.time.ZoneId)>","<java.time.Clock: java.time.Clock tickMinutes(java.time.ZoneId)>"
"<java.time.Duration: boolean isNegative()>","<java.time.Duration: boolean isNegative()>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>","<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>"
"<java.time.format.DecimalStyle: char getDecimalSeparator()>","<java.time.format.DecimalStyle: char getDecimalSeparator()>"
"<android.app.ActionBar: void setHomeAsUpIndicator(int)>","<android.app.ActionBar: void setHomeAsUpIndicator(int)>"
"<java.lang.reflect.Parameter: boolean isImplicit()>","<java.lang.reflect.Parameter: boolean isImplicit()>"
"<java.time.format.TextStyle: java.time.format.TextStyle asNormal()>","<java.time.format.TextStyle: java.time.format.TextStyle asNormal()>"
"<android.app.Fragment: void onDetach()>","<android.app.Fragment: void onDetach()>"
"<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)>","<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)>"
"<android.text.style.TtsSpan: int getSpanTypeId()>","<android.text.style.TtsSpan: int getSpanTypeId()>"
"<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>"
"<android.widget.RemoteViews: void addStableView(int,android.widget.RemoteViews,int)>","<android.widget.RemoteViews: void addStableView(int,android.widget.RemoteViews,int)>"
"<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.time.OffsetTime: int getMinute()>","<java.time.OffsetTime: int getMinute()>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>"
"<android.media.MediaMetadata: void <clinit>()>","<android.media.MediaMetadata: void <clinit>()>"
"<android.widget.AbsListView: void smoothScrollToPosition(int,int)>","<android.widget.AbsListView: void smoothScrollToPosition(int,int)>"
"<java.time.Month: void <init>(java.lang.String,int)>","<java.time.Month: void <init>(java.lang.String,int)>"
"<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.graphics.Color: int toArgb()>","<android.graphics.Color: int toArgb()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>"
"<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)>"
"<java.util.PrimitiveIterator$OfInt: int nextInt()>","<java.util.PrimitiveIterator$OfInt: int nextInt()>"
"<java.util.Collection: boolean removeAll(java.util.Collection)>","<java.util.Collection: boolean removeAll(java.util.Collection)>"
"<android.media.session.PlaybackState$Builder: void <init>(android.media.session.PlaybackState)>","<android.media.session.PlaybackState$Builder: void <init>(android.media.session.PlaybackState)>"
"<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>","<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>"
"<android.view.View: android.view.animation.Animation getAnimation()>","<android.view.View: android.view.animation.Animation getAnimation()>"
"<java.util.stream.LongStream: java.util.stream.BaseStream parallel()>","<java.util.stream.LongStream: java.util.stream.BaseStream parallel()>"
"<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)>"
"<android.view.textservice.SpellCheckerInfo: void <init>()>","<android.view.textservice.SpellCheckerInfo: void <init>()>"
"<android.widget.ListPopupWindow: android.view.View getAnchorView()>","<android.widget.ListPopupWindow: android.view.View getAnchorView()>"
"<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()>","<android.webkit.WebView$WebViewTransport: android.webkit.WebView getWebView()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer slice()>","<java.nio.ShortBuffer: java.nio.ShortBuffer slice()>"
"<android.os.Parcel: byte[] marshall()>","<android.os.Parcel: byte[] marshall()>"
"<android.view.InputDevice: java.lang.String getDescriptor()>","<android.view.InputDevice: java.lang.String getDescriptor()>"
"<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>","<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.ZoneId)>"
"<java.lang.'annotation'.Annotation: int hashCode()>","<java.lang.'annotation'.Annotation: int hashCode()>"
"<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>","<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>"
"<java.nio.channels.SocketChannel: int validOps()>","<java.nio.channels.SocketChannel: int validOps()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object compareAndExchange(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object compareAndExchange(int,java.lang.Object,java.lang.Object)>"
"<java.util.Arrays: int mismatch(char[],char[])>","<java.util.Arrays: int mismatch(char[],char[])>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofArgb(int[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofArgb(int[])>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>"
"<android.widget.TextView: java.util.Locale getTextLocale()>","<android.widget.TextView: java.util.Locale getTextLocale()>"
"<android.view.translation.ViewTranslationCallback: boolean onShowTranslation(android.view.View)>","<android.view.translation.ViewTranslationCallback: boolean onShowTranslation(android.view.View)>"
"<android.animation.ValueAnimator: boolean areAnimatorsEnabled()>","<android.animation.ValueAnimator: boolean areAnimatorsEnabled()>"
"<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>","<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>"
"<android.app.Notification$Builder: void <init>(android.content.Context)>","<android.app.Notification$Builder: void <init>(android.content.Context)>"
"<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>","<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>"
"<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>","<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>"
"<android.app.Dialog: android.content.Context getContext()>","<android.app.Dialog: android.content.Context getContext()>"
"<android.graphics.Paint: boolean isFilterBitmap()>","<android.graphics.Paint: boolean isFilterBitmap()>"
"<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>","<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>"
"<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>","<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>"
"<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()>","<java.security.cert.X509Certificate: java.util.List getExtendedKeyUsage()>"
"<android.view.View: boolean isSaveEnabled()>","<android.view.View: boolean isSaveEnabled()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>","<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>"
"<java.math.BigInteger: void <init>(java.lang.String,int)>","<java.math.BigInteger: void <init>(java.lang.String,int)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>","<java.util.concurrent.locks.ReentrantReadWriteLock: int getReadHoldCount()>"
"<android.view.View: void setFitsSystemWindows(boolean)>","<android.view.View: void setFitsSystemWindows(boolean)>"
"<android.view.Window: void takeInputQueue(android.view.InputQueue$Callback)>","<android.view.Window: void takeInputQueue(android.view.InputQueue$Callback)>"
"<android.text.TextUtils: void <clinit>()>","<android.text.TextUtils: void <clinit>()>"
"<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority valueOf(java.lang.String)>","<android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority valueOf(java.lang.String)>"
"<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>","<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>"
"<android.graphics.Canvas: boolean clipOutRect(int,int,int,int)>","<android.graphics.Canvas: boolean clipOutRect(int,int,int,int)>"
"<android.os.Handler: android.os.Message obtainMessage()>","<android.os.Handler: android.os.Message obtainMessage()>"
"<java.util.Map$Entry: int hashCode()>","<java.util.Map$Entry: int hashCode()>"
"<java.io.File: java.net.URL toURL()>","<java.io.File: java.net.URL toURL()>"
"<java.util.stream.IntStream: java.util.stream.Stream boxed()>","<java.util.stream.IntStream: java.util.stream.Stream boxed()>"
"<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>","<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>"
"<android.app.ActivityManager$RunningTaskInfo: void <init>()>","<android.app.ActivityManager$RunningTaskInfo: void <init>()>"
"<java.util.LinkedList: void addLast(java.lang.Object)>","<java.util.LinkedList: void addLast(java.lang.Object)>"
"<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>","<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>"
"<android.graphics.Paint: int getFlags()>","<android.graphics.Paint: int getFlags()>"
"<java.util.Spliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>"
"<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>","<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>"
"<java.lang.Math: float nextDown(float)>","<java.lang.Math: float nextDown(float)>"
"<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>","<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>"
"<java.time.temporal.ChronoField: void <init>(java.lang.String,int)>","<java.time.temporal.ChronoField: void <init>(java.lang.String,int)>"
"<android.content.ContentProvider: void setReadPermission(java.lang.String)>","<android.content.ContentProvider: void setReadPermission(java.lang.String)>"
"<java.nio.ShortBuffer: boolean isDirect()>","<java.nio.ShortBuffer: boolean isDirect()>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)>"
"<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>"
"<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>","<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>"
"<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>","<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>"
"<android.view.WindowInsets: int getSystemWindowInsetRight()>","<android.view.WindowInsets: int getSystemWindowInsetRight()>"
"<android.graphics.text.LineBreakConfig: int hashCode()>","<android.graphics.text.LineBreakConfig: int hashCode()>"
"<android.view.View: int getScrollBarDefaultDelayBeforeFade()>","<android.view.View: int getScrollBarDefaultDelayBeforeFade()>"
"<java.util.regex.MatchResult: int end()>","<java.util.regex.MatchResult: int end()>"
"<android.widget.TextView: void onConfigurationChanged(android.content.res.Configuration)>","<android.widget.TextView: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>","<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.util.Comparator: java.util.Comparator reversed()>","<java.util.Comparator: java.util.Comparator reversed()>"
"<android.view.Display: android.view.Display$Mode getMode()>","<android.view.Display: android.view.Display$Mode getMode()>"
"<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>","<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>"
"<java.util.LinkedList: boolean remove(java.lang.Object)>","<java.util.LinkedList: boolean remove(java.lang.Object)>"
"<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>","<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>"
"<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>"
"<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()>","<android.app.Notification: android.graphics.drawable.Icon getLargeIcon()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>"
"<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>","<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>"
"<android.app.assist.AssistContent: void setWebUri(android.net.Uri)>","<android.app.assist.AssistContent: void setWebUri(android.net.Uri)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime now()>","<java.time.ZonedDateTime: java.time.ZonedDateTime now()>"
"<android.hardware.HardwareBuffer: int getHeight()>","<android.hardware.HardwareBuffer: int getHeight()>"
"<android.graphics.RenderNode: void <init>(java.lang.String)>","<android.graphics.RenderNode: void <init>(java.lang.String)>"
"<android.widget.Button: void <init>(android.content.Context)>","<android.widget.Button: void <init>(android.content.Context)>"
"<android.graphics.MaskFilter: void <init>()>","<android.graphics.MaskFilter: void <init>()>"
"<java.io.Console: java.io.Reader reader()>","<java.io.Console: java.io.Reader reader()>"
"<java.lang.IllegalAccessException: void <init>(java.lang.String)>","<java.lang.IllegalAccessException: void <init>(java.lang.String)>"
"<android.widget.TextView: boolean moveCursorToVisibleOffset()>","<android.widget.TextView: boolean moveCursorToVisibleOffset()>"
"<org.json.JSONTokener: java.lang.String next(int)>","<org.json.JSONTokener: java.lang.String next(int)>"
"<android.content.pm.FeatureInfo: int describeContents()>","<android.content.pm.FeatureInfo: int describeContents()>"
"<android.view.Window: void setTitleColor(int)>","<android.view.Window: void setTitleColor(int)>"
"<java.util.Collections: void shuffle(java.util.List,java.util.Random)>","<java.util.Collections: void shuffle(java.util.List,java.util.Random)>"
"<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model valueOf(java.lang.String)>","<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model valueOf(java.lang.String)>"
"<android.graphics.drawable.Drawable: boolean setLevel(int)>","<android.graphics.drawable.Drawable: boolean setLevel(int)>"
"<android.widget.ListView: void layoutChildren()>","<android.widget.ListView: void layoutChildren()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>"
"<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>","<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(int)>"
"<android.os.Debug: void resetGlobalExternalAllocCount()>","<android.os.Debug: void resetGlobalExternalAllocCount()>"
"<java.lang.Integer: long toUnsignedLong(int)>","<java.lang.Integer: long toUnsignedLong(int)>"
"<java.time.ZonedDateTime: int getDayOfYear()>","<java.time.ZonedDateTime: int getDayOfYear()>"
"<java.util.stream.IntStream: java.util.stream.IntStream generate(java.util.function.IntSupplier)>","<java.util.stream.IntStream: java.util.stream.IntStream generate(java.util.function.IntSupplier)>"
"<android.app.Notification$WearableExtender: java.lang.String getDismissalId()>","<android.app.Notification$WearableExtender: java.lang.String getDismissalId()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>"
"<android.app.RemoteInput: void writeToParcel(android.os.Parcel,int)>","<android.app.RemoteInput: void writeToParcel(android.os.Parcel,int)>"
"<android.app.LoaderManager: android.content.Loader getLoader(int)>","<android.app.LoaderManager: android.content.Loader getLoader(int)>"
"<android.view.inputmethod.InputMethodSubtype: int getNameResId()>","<android.view.inputmethod.InputMethodSubtype: int getNameResId()>"
"<java.io.PrintStream: java.lang.Appendable append(char)>","<java.io.PrintStream: java.lang.Appendable append(char)>"
"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>","<java.util.Collections: java.util.List unmodifiableList(java.util.List)>"
"<android.os.Parcel: void writeBlob(byte[],int,int)>","<android.os.Parcel: void writeBlob(byte[],int,int)>"
"<java.util.Arrays: void sort(int[],int,int)>","<java.util.Arrays: void sort(int[],int,int)>"
"<android.content.BroadcastReceiver: void clearAbortBroadcast()>","<android.content.BroadcastReceiver: void clearAbortBroadcast()>"
"<android.window.SplashScreen: void setOnExitAnimationListener(android.window.SplashScreen$OnExitAnimationListener)>","<android.window.SplashScreen: void setOnExitAnimationListener(android.window.SplashScreen$OnExitAnimationListener)>"
"<java.util.concurrent.Future: boolean isDone()>","<java.util.concurrent.Future: boolean isDone()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassifier$EntityConfig: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Loader: void forceLoad()>","<android.content.Loader: void forceLoad()>"
"<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>","<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>"
"<android.view.View: android.view.ViewParent getParentForAccessibility()>","<android.view.View: android.view.ViewParent getParentForAccessibility()>"
"<java.util.Date: long parse(java.lang.String)>","<java.util.Date: long parse(java.lang.String)>"
"<java.util.Collections: java.util.SortedMap emptySortedMap()>","<java.util.Collections: java.util.SortedMap emptySortedMap()>"
"<android.graphics.Canvas: void restore()>","<android.graphics.Canvas: void restore()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.MotionEvent: int getHistorySize()>","<android.view.MotionEvent: int getHistorySize()>"
"<android.graphics.RectF: void offsetTo(float,float)>","<android.graphics.RectF: void offsetTo(float,float)>"
"<java.util.jar.JarEntry: void <init>(java.util.jar.JarEntry)>","<java.util.jar.JarEntry: void <init>(java.util.jar.JarEntry)>"
"<java.util.Arrays: void parallelSort(char[],int,int)>","<java.util.Arrays: void parallelSort(char[],int,int)>"
"<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>","<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>"
"<android.app.Dialog: void invalidateOptionsMenu()>","<android.app.Dialog: void invalidateOptionsMenu()>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutesSeconds(int,int,int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutesSeconds(int,int,int)>"
"<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.database.Cursor: void deactivate()>","<android.database.Cursor: void deactivate()>"
"<android.graphics.Canvas: void setDensity(int)>","<android.graphics.Canvas: void setDensity(int)>"
"<java.nio.charset.CoderResult: boolean isMalformed()>","<java.nio.charset.CoderResult: boolean isMalformed()>"
"<java.text.AttributedCharacterIterator: int getRunStart(java.util.Set)>","<java.text.AttributedCharacterIterator: int getRunStart(java.util.Set)>"
"<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean moveRight(android.text.Spannable,android.text.Layout)>"
"<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>","<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>"
"<android.view.MenuItem: boolean isCheckable()>","<android.view.MenuItem: boolean isCheckable()>"
"<java.nio.DoubleBuffer: int arrayOffset()>","<java.nio.DoubleBuffer: int arrayOffset()>"
"<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>","<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>"
"<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>","<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>"
"<android.os.BaseBundle: void putDouble(java.lang.String,double)>","<android.os.BaseBundle: void putDouble(java.lang.String,double)>"
"<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>","<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>"
"<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>","<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>"
"<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>","<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>"
"<java.util.Hashtable: void <init>(java.util.Map)>","<java.util.Hashtable: void <init>(java.util.Map)>"
"<java.math.BigInteger: int getLowestSetBit()>","<java.math.BigInteger: int getLowestSetBit()>"
"<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>","<java.io.ObjectInputStream: java.lang.Object readObjectOverride()>"
"<java.net.URLConnection: java.io.InputStream getInputStream()>","<java.net.URLConnection: java.io.InputStream getInputStream()>"
"<android.content.pm.PackageManager$PackageInfoFlags: android.content.pm.PackageManager$PackageInfoFlags of(long)>","<android.content.pm.PackageManager$PackageInfoFlags: android.content.pm.PackageManager$PackageInfoFlags of(long)>"
"<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>","<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>"
"<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>","<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>"
"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>","<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>"
"<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>","<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>"
"<android.app.Activity: void openOptionsMenu()>","<android.app.Activity: void openOptionsMenu()>"
"<android.graphics.Paint: float getTextScaleX()>","<android.graphics.Paint: float getTextScaleX()>"
"<java.util.Enumeration: boolean hasMoreElements()>","<java.util.Enumeration: boolean hasMoreElements()>"
"<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)>","<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)>"
"<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>","<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>"
"<java.lang.Class: java.lang.String getName()>","<java.lang.Class: java.lang.String getName()>"
"<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>","<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>"
"<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>","<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>"
"<java.time.Period: boolean equals(java.lang.Object)>","<java.time.Period: boolean equals(java.lang.Object)>"
"<android.content.res.Resources: int[] getIntArray(int)>","<android.content.res.Resources: int[] getIntArray(int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>","<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>"
"<java.util.LinkedHashMap: java.util.Set keySet()>","<java.util.LinkedHashMap: java.util.Set keySet()>"
"<android.app.Notification$Action: android.os.Bundle getExtras()>","<android.app.Notification$Action: android.os.Bundle getExtras()>"
"<io.flutter.plugins.webviewflutter.o0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.o0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.media.session.MediaSession$QueueItem: boolean equals(java.lang.Object)>","<android.media.session.MediaSession$QueueItem: boolean equals(java.lang.Object)>"
"<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.os.Bundle: void readFromParcel(android.os.Parcel)>","<android.os.Bundle: void readFromParcel(android.os.Parcel)>"
"<android.view.InflateException: void <init>(java.lang.Throwable)>","<android.view.InflateException: void <init>(java.lang.Throwable)>"
"<java.time.chrono.AbstractChronology: int compareTo(java.time.chrono.Chronology)>","<java.time.chrono.AbstractChronology: int compareTo(java.time.chrono.Chronology)>"
"<android.webkit.WebView: int computeVerticalScrollOffset()>","<android.webkit.WebView: int computeVerticalScrollOffset()>"
"<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.app.ActivityManager$RecentTaskInfo: int describeContents()>","<android.app.ActivityManager$RecentTaskInfo: int describeContents()>"
"<java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>","<java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>"
"<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.Intent: android.content.Intent addCategory(java.lang.String)>","<android.content.Intent: android.content.Intent addCategory(java.lang.String)>"
"<android.view.textservice.SentenceSuggestionsInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.textservice.SentenceSuggestionsInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContextWrapper: void revokeSelfPermissionsOnKill(java.util.Collection)>","<android.content.ContextWrapper: void revokeSelfPermissionsOnKill(java.util.Collection)>"
"<java.lang.String: void <init>(byte[],int,int,int)>","<java.lang.String: void <init>(byte[],int,int,int)>"
"<java.util.AbstractList: boolean equals(java.lang.Object)>","<java.util.AbstractList: boolean equals(java.lang.Object)>"
"<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>"
"<android.view.autofill.AutofillManager: boolean hasEnabledAutofillServices()>","<android.view.autofill.AutofillManager: boolean hasEnabledAutofillServices()>"
"<io.flutter.plugins.webviewflutter.l1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.l1: void a(java.lang.Object,y.a$e)>"
"<java.time.LocalTime: java.time.LocalTime withNano(int)>","<java.time.LocalTime: java.time.LocalTime withNano(int)>"
"<java.util.ArrayDeque: java.lang.Object pollFirst()>","<java.util.ArrayDeque: java.lang.Object pollFirst()>"
"<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>","<android.webkit.WebView: android.webkit.WebBackForwardList restoreState(android.os.Bundle)>"
"<java.net.DatagramSocket: boolean getReuseAddress()>","<java.net.DatagramSocket: boolean getReuseAddress()>"
"<android.content.BroadcastReceiver: void setResultCode(int)>","<android.content.BroadcastReceiver: void setResultCode(int)>"
"<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>","<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>"
"<java.io.PrintStream: void print(int)>","<java.io.PrintStream: void print(int)>"
"<android.content.pm.PackageManager: java.util.List queryApplicationProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryApplicationProperty(java.lang.String)>"
"<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)>","<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)>"
"<android.widget.TextView: void setLinkTextColor(int)>","<android.widget.TextView: void setLinkTextColor(int)>"
"<android.app.VoiceInteractor$Request: void onAttached(android.app.Activity)>","<android.app.VoiceInteractor$Request: void onAttached(android.app.Activity)>"
"<android.view.Window: void setElevation(float)>","<android.view.Window: void setElevation(float)>"
"<java.io.DataOutput: void writeLong(long)>","<java.io.DataOutput: void writeLong(long)>"
"<android.text.style.TtsSpan$CardinalBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$CardinalBuilder: void <init>(java.lang.String)>"
"<android.os.Parcel: void writeString(java.lang.String)>","<android.os.Parcel: void writeString(java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>","<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>"
"<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>","<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>"
"<java.util.DoubleSummaryStatistics: double getSum()>","<java.util.DoubleSummaryStatistics: double getSum()>"
"<android.graphics.Bitmap: void eraseColor(int)>","<android.graphics.Bitmap: void eraseColor(int)>"
"<android.os.Vibrator: int getId()>","<android.os.Vibrator: int getId()>"
"<android.widget.AbsListView: void setFastScrollStyle(int)>","<android.widget.AbsListView: void setFastScrollStyle(int)>"
"<android.widget.TextView: android.os.LocaleList getTextLocales()>","<android.widget.TextView: android.os.LocaleList getTextLocales()>"
"<java.util.LongSummaryStatistics: long getSum()>","<java.util.LongSummaryStatistics: long getSum()>"
"<android.os.BaseBundle: void putLong(java.lang.String,long)>","<android.os.BaseBundle: void putLong(java.lang.String,long)>"
"<java.io.DataInput: void readFully(byte[])>","<java.io.DataInput: void readFully(byte[])>"
"<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>","<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>"
"<java.util.List: void clear()>","<java.util.List: void clear()>"
"<java.time.OffsetTime: int getHour()>","<java.time.OffsetTime: int getHour()>"
"<android.view.RoundedCorner: void writeToParcel(android.os.Parcel,int)>","<android.view.RoundedCorner: void writeToParcel(android.os.Parcel,int)>"
"<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>","<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>"
"<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>","<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>"
"<android.view.Display$Mode: float[] getAlternativeRefreshRates()>","<android.view.Display$Mode: float[] getAlternativeRefreshRates()>"
"<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>","<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>"
"<android.webkit.WebHistoryItem: java.lang.String getTitle()>","<android.webkit.WebHistoryItem: java.lang.String getTitle()>"
"<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>","<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.Thread getOwner()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.lang.Thread getOwner()>"
"<java.time.Clock: java.time.ZoneId getZone()>","<java.time.Clock: java.time.ZoneId getZone()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<java.time.LocalDate: int getDayOfYear()>","<java.time.LocalDate: int getDayOfYear()>"
"<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>","<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>"
"<java.security.cert.Certificate: byte[] getEncoded()>","<java.security.cert.Certificate: byte[] getEncoded()>"
"<java.time.zone.ZoneOffsetTransition: boolean isValidOffset(java.time.ZoneOffset)>","<java.time.zone.ZoneOffsetTransition: boolean isValidOffset(java.time.ZoneOffset)>"
"<java.util.Arrays: boolean equals(byte[],int,int,byte[],int,int)>","<java.util.Arrays: boolean equals(byte[],int,int,byte[],int,int)>"
"<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.util.Collection)>","<android.webkit.TracingConfig$Builder: android.webkit.TracingConfig$Builder addCategories(java.util.Collection)>"
"<java.lang.Character$Subset: boolean equals(java.lang.Object)>","<java.lang.Character$Subset: boolean equals(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.b0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.b0: void a(java.lang.Object,y.a$e)>"
"<android.database.Cursor: boolean moveToPosition(int)>","<android.database.Cursor: boolean moveToPosition(int)>"
"<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>","<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>"
"<java.util.WeakHashMap: void <init>(int)>","<java.util.WeakHashMap: void <init>(int)>"
"<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String,java.lang.String)>"
"<android.view.WindowInsetsAnimationController: boolean isFinished()>","<android.view.WindowInsetsAnimationController: boolean isFinished()>"
"<java.util.Arrays: boolean equals(char[],int,int,char[],int,int)>","<java.util.Arrays: boolean equals(char[],int,int,char[],int,int)>"
"<java.nio.ShortBuffer: boolean hasArray()>","<java.nio.ShortBuffer: boolean hasArray()>"
"<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>","<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>"
"<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>","<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>"
"<java.nio.channels.DatagramChannel: int validOps()>","<java.nio.channels.DatagramChannel: int validOps()>"
"<java.time.format.ResolverStyle: void <clinit>()>","<java.time.format.ResolverStyle: void <clinit>()>"
"<android.widget.TextView: void setSelected(boolean)>","<android.widget.TextView: void setSelected(boolean)>"
"<android.content.pm.PackageManager: int getPackageUid(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: int getPackageUid(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>","<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>"
"<android.widget.AbsListView: float getBottomFadingEdgeStrength()>","<android.widget.AbsListView: float getBottomFadingEdgeStrength()>"
"<java.io.ObjectInputStream: void readStreamHeader()>","<java.io.ObjectInputStream: void readStreamHeader()>"
"<android.widget.RemoteViews: void <clinit>()>","<android.widget.RemoteViews: void <clinit>()>"
"<android.view.View: void setSaveFromParentEnabled(boolean)>","<android.view.View: void setSaveFromParentEnabled(boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()>"
"<android.view.textservice.SpellCheckerSubtype: boolean containsExtraValueKey(java.lang.String)>","<android.view.textservice.SpellCheckerSubtype: boolean containsExtraValueKey(java.lang.String)>"
"<android.animation.Keyframe: boolean hasValue()>","<android.animation.Keyframe: boolean hasValue()>"
"<java.io.ObjectOutputStream: void writeByte(int)>","<java.io.ObjectOutputStream: void writeByte(int)>"
"<android.view.inputmethod.BaseInputConnection: android.os.Handler getHandler()>","<android.view.inputmethod.BaseInputConnection: android.os.Handler getHandler()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"
"<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)>","<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)>"
"<android.icu.util.ULocale: java.util.Set getUnicodeLocaleAttributes()>","<android.icu.util.ULocale: java.util.Set getUnicodeLocaleAttributes()>"
"<java.util.List: boolean addAll(java.util.Collection)>","<java.util.List: boolean addAll(java.util.Collection)>"
"<android.hardware.SensorManager: boolean flush(android.hardware.SensorEventListener)>","<android.hardware.SensorManager: boolean flush(android.hardware.SensorEventListener)>"
"<java.lang.String: boolean contains(java.lang.CharSequence)>","<java.lang.String: boolean contains(java.lang.CharSequence)>"
"<java.util.AbstractList: java.util.Iterator iterator()>","<java.util.AbstractList: java.util.Iterator iterator()>"
"<android.webkit.WebResourceResponse: int getStatusCode()>","<android.webkit.WebResourceResponse: int getStatusCode()>"
"<java.util.stream.IntStream: java.util.stream.IntStream skip(long)>","<java.util.stream.IntStream: java.util.stream.IntStream skip(long)>"
"<java.io.InputStreamReader: boolean ready()>","<java.io.InputStreamReader: boolean ready()>"
"<java.time.OffsetTime: java.time.LocalTime toLocalTime()>","<java.time.OffsetTime: java.time.LocalTime toLocalTime()>"
"<java.time.chrono.ChronoLocalDate: int lengthOfMonth()>","<java.time.chrono.ChronoLocalDate: int lengthOfMonth()>"
"<android.content.IntentSender: void <clinit>()>","<android.content.IntentSender: void <clinit>()>"
"<android.view.ViewParent: boolean canResolveTextDirection()>","<android.view.ViewParent: boolean canResolveTextDirection()>"
"<android.content.pm.PackageInstaller: void uninstall(java.lang.String,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void uninstall(java.lang.String,android.content.IntentSender)>"
"<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>","<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>"
"<android.os.VibratorManager: void cancel()>","<android.os.VibratorManager: void cancel()>"
"<java.util.stream.LongStream: java.util.Iterator iterator()>","<java.util.stream.LongStream: java.util.Iterator iterator()>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>"
"<android.widget.TextView: void setAllCaps(boolean)>","<android.widget.TextView: void setAllCaps(boolean)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int,android.view.textclassifier.TextClassification)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int,android.view.textclassifier.TextClassification)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>"
"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>","<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>"
"<java.util.OptionalLong: long orElseThrow()>","<java.util.OptionalLong: long orElseThrow()>"
"<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setDuplexMode(int)>","<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setDuplexMode(int)>"
"<android.os.Bundle: short getShort(java.lang.String)>","<android.os.Bundle: short getShort(java.lang.String)>"
"<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)>","<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)>"
"<java.time.Duration: long toDaysPart()>","<java.time.Duration: long toDaysPart()>"
"<java.util.concurrent.Callable: java.lang.Object call()>","<java.util.concurrent.Callable: java.lang.Object call()>"
"<android.content.Intent: float getFloatExtra(java.lang.String,float)>","<android.content.Intent: float getFloatExtra(java.lang.String,float)>"
"<android.app.Fragment: void onAttach(android.content.Context)>","<android.app.Fragment: void onAttach(android.content.Context)>"
"<android.view.Menu: void clear()>","<android.view.Menu: void clear()>"
"<android.view.ContextThemeWrapper: void setTheme(int)>","<android.view.ContextThemeWrapper: void setTheme(int)>"
"<android.view.View: int getLabelFor()>","<android.view.View: int getLabelFor()>"
"<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>","<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>"
"<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>","<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>"
"<java.util.Arrays: int compare(java.lang.Comparable[],int,int,java.lang.Comparable[],int,int)>","<java.util.Arrays: int compare(java.lang.Comparable[],int,int,java.lang.Comparable[],int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>"
"<java.time.format.DecimalStyle: char getNegativeSign()>","<java.time.format.DecimalStyle: char getNegativeSign()>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>"
"<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>","<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>"
"<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>","<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>"
"<java.lang.Object: void wait(long)>","<java.lang.Object: void wait(long)>"
"<java.util.concurrent.Executors: void <init>()>","<java.util.concurrent.Executors: void <init>()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>","<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>"
"<android.app.Service: void stopSelf()>","<android.app.Service: void stopSelf()>"
"<android.view.KeyEvent: void startTracking()>","<android.view.KeyEvent: void startTracking()>"
"<android.widget.AbsListView: boolean hasTextFilter()>","<android.widget.AbsListView: boolean hasTextFilter()>"
"<android.util.Rational: int hashCode()>","<android.util.Rational: int hashCode()>"
"<java.util.AbstractList: java.util.List subList(int,int)>","<java.util.AbstractList: java.util.List subList(int,int)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder setBitmapDimensionLimit(int)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder setBitmapDimensionLimit(int)>"
"<java.util.Collections: java.util.Set emptySet()>","<java.util.Collections: java.util.Set emptySet()>"
"<android.view.ViewGroup: void removeAllViewsInLayout()>","<android.view.ViewGroup: void removeAllViewsInLayout()>"
"<io.flutter.plugins.webviewflutter.x: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.x: void a(java.lang.Object,y.a$e)>"
"<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>","<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>"
"<java.net.URLConnection: void setAllowUserInteraction(boolean)>","<java.net.URLConnection: void setAllowUserInteraction(boolean)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void writeToParcel(android.os.Parcel,int)>","<android.app.VoiceInteractor$PickOptionRequest$Option: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Parcel: void readBinderArray(android.os.IBinder[])>","<android.os.Parcel: void readBinderArray(android.os.IBinder[])>"
"<android.view.textclassifier.TextSelection: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextSelection: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Runtime: void load(java.lang.String)>","<java.lang.Runtime: void load(java.lang.String)>"
"<android.content.ComponentName: java.lang.String toString()>","<android.content.ComponentName: java.lang.String toString()>"
"<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.content.IntentFilter: boolean hasAction(java.lang.String)>","<android.content.IntentFilter: boolean hasAction(java.lang.String)>"
"<android.app.Notification$WearableExtender: boolean getHintShowBackgroundOnly()>","<android.app.Notification$WearableExtender: boolean getHintShowBackgroundOnly()>"
"<java.time.temporal.ValueRange: int hashCode()>","<java.time.temporal.ValueRange: int hashCode()>"
"<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>","<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>"
"<android.text.style.TtsSpan$DigitsBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$DigitsBuilder: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>","<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>"
"<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType valueOf(java.lang.String)>","<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType valueOf(java.lang.String)>"
"<java.util.Iterator: boolean hasNext()>","<java.util.Iterator: boolean hasNext()>"
"<java.lang.Character: char reverseBytes(char)>","<java.lang.Character: char reverseBytes(char)>"
"<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetPlain(int,int)>","<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetPlain(int,int)>"
"<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>","<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>"
"<java.net.ContentHandler: void <init>()>","<java.net.ContentHandler: void <init>()>"
"<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>","<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>"
"<android.database.ContentObserver: boolean deliverSelfNotifications()>","<android.database.ContentObserver: boolean deliverSelfNotifications()>"
"<android.webkit.ConsoleMessage: void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)>","<android.webkit.ConsoleMessage: void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)>"
"<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>","<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.ThreadFactory getThreadFactory()>"
"<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>","<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>"
"<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String,android.webkit.ValueCallback)>","<android.webkit.CookieManager: void setCookie(java.lang.String,java.lang.String,android.webkit.ValueCallback)>"
"<java.util.function.DoubleConsumer: void accept(double)>","<java.util.function.DoubleConsumer: void accept(double)>"
"<android.app.VoiceInteractor$PickOptionRequest: void onPickOptionResult(boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>","<android.app.VoiceInteractor$PickOptionRequest: void onPickOptionResult(boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
"<android.widget.ListView: void setCacheColorHint(int)>","<android.widget.ListView: void setCacheColorHint(int)>"
"<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>","<java.util.concurrent.CopyOnWriteArrayList: int hashCode()>"
"<java.nio.FloatBuffer: boolean hasArray()>","<java.nio.FloatBuffer: boolean hasArray()>"
"<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>","<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>"
"<java.time.temporal.ChronoField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.ChronoField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
"<android.webkit.WebSettings: boolean getOffscreenPreRaster()>","<android.webkit.WebSettings: boolean getOffscreenPreRaster()>"
"<android.app.Fragment: android.transition.Transition getEnterTransition()>","<android.app.Fragment: android.transition.Transition getEnterTransition()>"
"<android.app.PendingIntent: boolean isActivity()>","<android.app.PendingIntent: boolean isActivity()>"
"<android.widget.ImageView: void setImageLevel(int)>","<android.widget.ImageView: void setImageLevel(int)>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>"
"<java.lang.System: void load(java.lang.String)>","<java.lang.System: void load(java.lang.String)>"
"<android.util.Rational: int intValue()>","<android.util.Rational: int intValue()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
"<java.nio.CharBuffer: java.nio.Buffer flip()>","<java.nio.CharBuffer: java.nio.Buffer flip()>"
"<android.content.pm.ApplicationInfo: int getGwpAsanMode()>","<android.content.pm.ApplicationInfo: int getGwpAsanMode()>"
"<org.xmlpull.v1.XmlSerializer: int getDepth()>","<org.xmlpull.v1.XmlSerializer: int getDepth()>"
"<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>","<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>"
"<java.util.AbstractList: java.lang.Object remove(int)>","<java.util.AbstractList: java.lang.Object remove(int)>"
"<android.view.Window: boolean hasFeature(int)>","<android.view.Window: boolean hasFeature(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: void <clinit>()>","<android.view.accessibility.AccessibilityWindowInfo: void <clinit>()>"
"<java.util.concurrent.atomic.AtomicLong: double doubleValue()>","<java.util.concurrent.atomic.AtomicLong: double doubleValue()>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setWaterfallInsets(android.graphics.Insets)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setWaterfallInsets(android.graphics.Insets)>"
"<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.transition.Transition$TransitionListener: void onTransitionResume(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionResume(android.transition.Transition)>"
"<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)>","<android.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)>"
"<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>","<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>"
"<java.lang.Character: boolean isSurrogatePair(char,char)>","<java.lang.Character: boolean isSurrogatePair(char,char)>"
"<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse$Builder setValue(java.lang.String,android.view.translation.TranslationResponseValue)>","<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse$Builder setValue(java.lang.String,android.view.translation.TranslationResponseValue)>"
"<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>","<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>"
"<android.widget.TextView: int getLineHeight()>","<android.widget.TextView: int getLineHeight()>"
"<android.graphics.Matrix: boolean postTranslate(float,float)>","<android.graphics.Matrix: boolean postTranslate(float,float)>"
"<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>","<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>"
"<java.io.ObjectInputStream: void close()>","<java.io.ObjectInputStream: void close()>"
"<android.content.pm.PackageInstaller$SessionParams: void setRequireUserAction(int)>","<android.content.pm.PackageInstaller$SessionParams: void setRequireUserAction(int)>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata build()>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata build()>"
"<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setTextConversionSuggestions(java.util.List)>","<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setTextConversionSuggestions(java.util.List)>"
"<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>"
"<android.webkit.WebView: boolean shouldDelayChildPressedState()>","<android.webkit.WebView: boolean shouldDelayChildPressedState()>"
"<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()>","<android.widget.ListPopupWindow: java.lang.Object getSelectedItem()>"
"<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()>","<android.webkit.WebResourceResponse: java.util.Map getResponseHeaders()>"
"<java.io.ObjectOutputStream: void writeLong(long)>","<java.io.ObjectOutputStream: void writeLong(long)>"
"<android.print.PrintAttributes$MediaSize: java.lang.String toString()>","<android.print.PrintAttributes$MediaSize: java.lang.String toString()>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void <init>()>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void <init>()>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>","<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>"
"<java.lang.Object: void wait()>","<java.lang.Object: void wait()>"
"<android.graphics.Color: boolean equals(java.lang.Object)>","<android.graphics.Color: boolean equals(java.lang.Object)>"
"<java.util.Arrays: void fill(short[],short)>","<java.util.Arrays: void fill(short[],short)>"
"<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>","<java.util.TimeZone: java.lang.String getDisplayName(boolean,int,java.util.Locale)>"
"<java.time.Duration: boolean equals(java.lang.Object)>","<java.time.Duration: boolean equals(java.lang.Object)>"
"<java.lang.LinkageError: void <init>(java.lang.String)>","<java.lang.LinkageError: void <init>(java.lang.String)>"
"<android.view.PointerIcon: void <clinit>()>","<android.view.PointerIcon: void <clinit>()>"
"<android.view.ViewGroup: void onDetachedFromWindow()>","<android.view.ViewGroup: void onDetachedFromWindow()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>"
"<android.media.MediaDescription: boolean equals(java.lang.Object)>","<android.media.MediaDescription: boolean equals(java.lang.Object)>"
"<android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>","<android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>"
"<java.nio.DoubleBuffer: java.lang.String toString()>","<java.nio.DoubleBuffer: java.lang.String toString()>"
"<android.content.pm.SigningInfo: int describeContents()>","<android.content.pm.SigningInfo: int describeContents()>"
"<android.view.ViewTreeObserver: void removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>","<android.view.ViewTreeObserver: void removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>"
"<android.view.KeyEvent: int getMaxKeyCode()>","<android.view.KeyEvent: int getMaxKeyCode()>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.text.style.TtsSpan$VerbatimBuilder: android.text.style.TtsSpan$VerbatimBuilder setVerbatim(java.lang.String)>","<android.text.style.TtsSpan$VerbatimBuilder: android.text.style.TtsSpan$VerbatimBuilder setVerbatim(java.lang.String)>"
"<android.view.ActionMode: void <init>()>","<android.view.ActionMode: void <init>()>"
"<java.util.NavigableMap: java.util.Map$Entry lastEntry()>","<java.util.NavigableMap: java.util.Map$Entry lastEntry()>"
"<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>","<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Locale: void <clinit>()>","<java.util.Locale: void <clinit>()>"
"<android.view.textclassifier.TextClassifier: void onTextClassifierEvent(android.view.textclassifier.TextClassifierEvent)>","<android.view.textclassifier.TextClassifier: void onTextClassifierEvent(android.view.textclassifier.TextClassifierEvent)>"
"<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putRating(java.lang.String,android.media.Rating)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putRating(java.lang.String,android.media.Rating)>"
"<java.security.cert.Certificate: int hashCode()>","<java.security.cert.Certificate: int hashCode()>"
"<android.graphics.Bitmap: void setPixel(int,int,int)>","<android.graphics.Bitmap: void setPixel(int,int,int)>"
"<android.widget.TextView: boolean getShowSoftInputOnFocus()>","<android.widget.TextView: boolean getShowSoftInputOnFocus()>"
"<io.flutter.plugins.webviewflutter.o: void <init>(io.flutter.plugins.webviewflutter.k$d$a)>","<io.flutter.plugins.webviewflutter.o: void <init>(io.flutter.plugins.webviewflutter.k$d$a)>"
"<android.content.IntentFilter: int countActions()>","<android.content.IntentFilter: int countActions()>"
"<java.util.Spliterator$OfLong: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfLong: void forEachRemaining(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.p3: void <init>(io.flutter.plugins.webviewflutter.k$n)>","<io.flutter.plugins.webviewflutter.p3: void <init>(io.flutter.plugins.webviewflutter.k$n)>"
"<android.content.res.Resources$Theme: void rebase()>","<android.content.res.Resources$Theme: void rebase()>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setBreakStrategy(int)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setBreakStrategy(int)>"
"<android.os.Parcel: void <init>()>","<android.os.Parcel: void <init>()>"
"<java.time.OffsetDateTime: java.time.Instant toInstant()>","<java.time.OffsetDateTime: java.time.Instant toInstant()>"
"<java.util.Random: java.util.stream.LongStream longs(long)>","<java.util.Random: java.util.stream.LongStream longs(long)>"
"<android.view.animation.Animation: boolean willChangeBounds()>","<android.view.animation.Animation: boolean willChangeBounds()>"
"<java.util.ServiceLoader: void <init>()>","<java.util.ServiceLoader: void <init>()>"
"<android.util.SparseIntArray: void <init>(int)>","<android.util.SparseIntArray: void <init>(int)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float)>"
"<java.util.LinkedList: java.lang.Object peekLast()>","<java.util.LinkedList: java.lang.Object peekLast()>"
"<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>","<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>"
"<java.util.Calendar: void add(int,int)>","<java.util.Calendar: void add(int,int)>"
"<android.content.pm.Signature: java.lang.String toCharsString()>","<android.content.pm.Signature: java.lang.String toCharsString()>"
"<android.webkit.WebSettings: void setAllowUniversalAccessFromFileURLs(boolean)>","<android.webkit.WebSettings: void setAllowUniversalAccessFromFileURLs(boolean)>"
"<android.graphics.Typeface: boolean isBold()>","<android.graphics.Typeface: boolean isBold()>"
"<android.view.textservice.SpellCheckerSubtype: java.lang.String getLanguageTag()>","<android.view.textservice.SpellCheckerSubtype: java.lang.String getLanguageTag()>"
"<android.graphics.Matrix: boolean postSkew(float,float,float,float)>","<android.graphics.Matrix: boolean postSkew(float,float,float,float)>"
"<android.app.Activity: boolean isChangingConfigurations()>","<android.app.Activity: boolean isChangingConfigurations()>"
"<android.widget.ListView: void addFooterView(android.view.View)>","<android.widget.ListView: void addFooterView(android.view.View)>"
"<java.util.Collections: java.lang.Object max(java.util.Collection)>","<java.util.Collections: java.lang.Object max(java.util.Collection)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()>"
"<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>","<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>"
"<android.content.pm.PathPermission: java.lang.String getReadPermission()>","<android.content.pm.PathPermission: java.lang.String getReadPermission()>"
"<android.graphics.RecordingCanvas: int getWidth()>","<android.graphics.RecordingCanvas: int getWidth()>"
"<android.util.SparseBooleanArray: boolean get(int,boolean)>","<android.util.SparseBooleanArray: boolean get(int,boolean)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>"
"<android.view.View: void forceLayout()>","<android.view.View: void forceLayout()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndSet(java.lang.Object,java.lang.Object)>"
"<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>","<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>"
"<java.io.PrintWriter: void setError()>","<java.io.PrintWriter: void setError()>"
"<android.hardware.display.DeviceProductInfo: java.lang.String toString()>","<android.hardware.display.DeviceProductInfo: java.lang.String toString()>"
"<android.app.assist.AssistContent: java.lang.String getStructuredData()>","<android.app.assist.AssistContent: java.lang.String getStructuredData()>"
"<java.net.InetAddress: boolean isMCLinkLocal()>","<java.net.InetAddress: boolean isMCLinkLocal()>"
"<android.graphics.Canvas: boolean clipRect(float,float,float,float)>","<android.graphics.Canvas: boolean clipRect(float,float,float,float)>"
"<java.lang.StringBuilder: int codePointCount(int,int)>","<java.lang.StringBuilder: int codePointCount(int,int)>"
"<java.io.ObjectStreamField: void setOffset(int)>","<java.io.ObjectStreamField: void setOffset(int)>"
"<java.lang.StringBuffer: void <init>(java.lang.CharSequence)>","<java.lang.StringBuffer: void <init>(java.lang.CharSequence)>"
"<android.media.AudioAttributes: int getAllowedCapturePolicy()>","<android.media.AudioAttributes: int getAllowedCapturePolicy()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setScript(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setScript(java.lang.String)>"
"<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>","<java.util.jar.Attributes: java.lang.String getValue(java.lang.String)>"
"<java.lang.Character: int toTitleCase(int)>","<java.lang.Character: int toTitleCase(int)>"
"<java.time.chrono.Era: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.Era: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.app.PictureInPictureParams: void writeToParcel(android.os.Parcel,int)>","<android.app.PictureInPictureParams: void writeToParcel(android.os.Parcel,int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>"
"<android.text.method.KeyListener: int getInputType()>","<android.text.method.KeyListener: int getInputType()>"
"<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>","<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>"
"<io.flutter.plugins.webviewflutter.n3: void <init>()>","<io.flutter.plugins.webviewflutter.n3: void <init>()>"
"<java.util.concurrent.ThreadPoolExecutor: boolean prestartCoreThread()>","<java.util.concurrent.ThreadPoolExecutor: boolean prestartCoreThread()>"
"<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>","<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>"
"<android.view.Window: void setExitTransition(android.transition.Transition)>","<android.view.Window: void setExitTransition(android.transition.Transition)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble findFirst()>","<java.util.stream.DoubleStream: java.util.OptionalDouble findFirst()>"
"<io.flutter.plugins.webviewflutter.v1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.v1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>"
"<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>","<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>"
"<java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>","<java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>"
"<android.webkit.WebView: void disableWebView()>","<android.webkit.WebView: void disableWebView()>"
"<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>","<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.View: void computeScroll()>","<android.view.View: void computeScroll()>"
"<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)>","<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)>"
"<android.graphics.RenderNode: long getUniqueId()>","<android.graphics.RenderNode: long getUniqueId()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>","<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>"
"<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>","<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>"
"<android.graphics.Paint: int getEndHyphenEdit()>","<android.graphics.Paint: int getEndHyphenEdit()>"
"<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>","<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>"
"<android.view.KeyCharacterMap: char getMatch(int,char[],int)>","<android.view.KeyCharacterMap: char getMatch(int,char[],int)>"
"<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>","<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>"
"<android.app.Notification$CarExtender: void <init>()>","<android.app.Notification$CarExtender: void <init>()>"
"<android.view.AbsSavedState: void <clinit>()>","<android.view.AbsSavedState: void <clinit>()>"
"<java.util.DoubleSummaryStatistics: java.lang.String toString()>","<java.util.DoubleSummaryStatistics: java.lang.String toString()>"
"<android.transition.TransitionPropagation: java.lang.String[] getPropagationProperties()>","<android.transition.TransitionPropagation: java.lang.String[] getPropagationProperties()>"
"<android.content.pm.ModuleInfo: boolean isHidden()>","<android.content.pm.ModuleInfo: boolean isHidden()>"
"<android.widget.TextView: int getMinEms()>","<android.widget.TextView: int getMinEms()>"
"<android.widget.TextView: boolean setFontVariationSettings(java.lang.String)>","<android.widget.TextView: boolean setFontVariationSettings(java.lang.String)>"
"<java.time.Instant: int get(java.time.temporal.TemporalField)>","<java.time.Instant: int get(java.time.temporal.TemporalField)>"
"<android.view.Display$HdrCapabilities: java.lang.String toString()>","<android.view.Display$HdrCapabilities: java.lang.String toString()>"
"<android.content.IntentSender: java.lang.String getTargetPackage()>","<android.content.IntentSender: java.lang.String getTargetPackage()>"
"<java.lang.reflect.Constructor: boolean isVarArgs()>","<java.lang.reflect.Constructor: boolean isVarArgs()>"
"<android.graphics.Bitmap: void eraseColor(long)>","<android.graphics.Bitmap: void eraseColor(long)>"
"<android.os.Bundle: void <init>(java.lang.ClassLoader)>","<android.os.Bundle: void <init>(java.lang.ClassLoader)>"
"<io.flutter.plugins.webviewflutter.w: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.w: void a(java.lang.Object)>"
"<java.net.URL: java.lang.String getHost()>","<java.net.URL: java.lang.String getHost()>"
"<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: android.os.Bundle getExtras()>","<android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams: android.os.Bundle getExtras()>"
"<java.lang.Short: java.lang.String toString(short)>","<java.lang.Short: java.lang.String toString(short)>"
"<android.app.Activity: void onStart()>","<android.app.Activity: void onStart()>"
"<java.security.Permission: void checkGuard(java.lang.Object)>","<java.security.Permission: void checkGuard(java.lang.Object)>"
"<java.io.File: boolean isDirectory()>","<java.io.File: boolean isDirectory()>"
"<java.util.stream.IntStream: java.util.Spliterator$OfInt spliterator()>","<java.util.stream.IntStream: java.util.Spliterator$OfInt spliterator()>"
"<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>","<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>"
"<java.time.zone.ZoneOffsetTransition: int hashCode()>","<java.time.zone.ZoneOffsetTransition: int hashCode()>"
"<android.util.Rational: boolean isNaN()>","<android.util.Rational: boolean isNaN()>"
"<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>","<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>"
"<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>","<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>"
"<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>","<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>"
"<android.hardware.display.VirtualDisplay$Callback: void onPaused()>","<android.hardware.display.VirtualDisplay$Callback: void onPaused()>"
"<java.net.URI: java.lang.String getRawFragment()>","<java.net.URI: java.lang.String getRawFragment()>"
"<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>"
"<java.util.Locale$FilteringMode: void <init>(java.lang.String,int)>","<java.util.Locale$FilteringMode: void <init>(java.lang.String,int)>"
"<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>","<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>"
"<org.json.JSONArray: java.lang.String toString()>","<org.json.JSONArray: java.lang.String toString()>"
"<java.nio.ByteBuffer: java.nio.Buffer clear()>","<java.nio.ByteBuffer: java.nio.Buffer clear()>"
"<java.util.Random: java.util.stream.LongStream longs(long,long)>","<java.util.Random: java.util.stream.LongStream longs(long,long)>"
"<java.lang.Float: int floatToRawIntBits(float)>","<java.lang.Float: int floatToRawIntBits(float)>"
"<io.flutter.plugins.webviewflutter.h0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.h0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<java.lang.Short: boolean equals(java.lang.Object)>","<java.lang.Short: boolean equals(java.lang.Object)>"
"<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>","<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>"
"<java.io.ObjectInputStream: void readFully(byte[],int,int)>","<java.io.ObjectInputStream: void readFully(byte[],int,int)>"
"<java.lang.reflect.Executable: boolean isSynthetic()>","<java.lang.reflect.Executable: boolean isSynthetic()>"
"<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>","<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>"
"<android.graphics.ColorSpace$RenderIntent: void <clinit>()>","<android.graphics.ColorSpace$RenderIntent: void <clinit>()>"
"<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)>","<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)>"
"<android.view.textclassifier.SelectionEvent: int describeContents()>","<android.view.textclassifier.SelectionEvent: int describeContents()>"
"<android.content.ContextWrapper: android.view.Display getDisplay()>","<android.content.ContextWrapper: android.view.Display getDisplay()>"
"<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)>","<java.util.concurrent.LinkedBlockingQueue: int drainTo(java.util.Collection,int)>"
"<android.widget.TextView: android.content.res.ColorStateList getTextColors()>","<android.widget.TextView: android.content.res.ColorStateList getTextColors()>"
"<android.webkit.WebSettings: boolean getLightTouchEnabled()>","<android.webkit.WebSettings: boolean getLightTouchEnabled()>"
"<android.view.translation.TranslationSpec: int getDataFormat()>","<android.view.translation.TranslationSpec: int getDataFormat()>"
"<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>","<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>"
"<android.app.ActivityManager$RunningTaskInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RunningTaskInfo: void readFromParcel(android.os.Parcel)>"
"<android.view.View: int getVerticalScrollbarWidth()>","<android.view.View: int getVerticalScrollbarWidth()>"
"<android.view.View: void dispatchWindowVisibilityChanged(int)>","<android.view.View: void dispatchWindowVisibilityChanged(int)>"
"<android.graphics.ImageDecoder: boolean isMutableRequired()>","<android.graphics.ImageDecoder: boolean isMutableRequired()>"
"<java.io.ObjectStreamException: void <init>()>","<java.io.ObjectStreamException: void <init>()>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowDataType(java.lang.String,boolean)>","<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setAllowDataType(java.lang.String,boolean)>"
"<android.text.SpannableStringBuilder: boolean equals(java.lang.Object)>","<android.text.SpannableStringBuilder: boolean equals(java.lang.Object)>"
"<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>","<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>"
"<android.app.Fragment: boolean isResumed()>","<android.app.Fragment: boolean isResumed()>"
"<android.view.View: void jumpDrawablesToCurrentState()>","<android.view.View: void jumpDrawablesToCurrentState()>"
"<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>","<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>"
"<java.lang.String: void <init>(java.lang.String)>","<java.lang.String: void <init>(java.lang.String)>"
"<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<android.hardware.HardwareBuffer: int getLayers()>","<android.hardware.HardwareBuffer: int getLayers()>"
"<android.graphics.NinePatch: int getWidth()>","<android.graphics.NinePatch: int getWidth()>"
"<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>","<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>"
"<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>","<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: int getOpenFlags()>","<android.database.sqlite.SQLiteDatabase$OpenParams: int getOpenFlags()>"
"<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.view.ActionMode: void setTitle(java.lang.CharSequence)>","<android.view.ActionMode: void setTitle(java.lang.CharSequence)>"
"<android.text.Layout: float getSpacingAdd()>","<android.text.Layout: float getSpacingAdd()>"
"<android.view.View: boolean isLayoutRequested()>","<android.view.View: boolean isLayoutRequested()>"
"<android.app.Fragment: void setMenuVisibility(boolean)>","<android.app.Fragment: void setMenuVisibility(boolean)>"
"<android.view.textclassifier.SelectionEvent: int getInvocationMethod()>","<android.view.textclassifier.SelectionEvent: int getInvocationMethod()>"
"<android.media.ImageReader: void finalize()>","<android.media.ImageReader: void finalize()>"
"<java.util.AbstractSequentialList: java.lang.Object remove(int)>","<java.util.AbstractSequentialList: java.lang.Object remove(int)>"
"<android.content.Intent: void <init>(android.content.Intent)>","<android.content.Intent: void <init>(android.content.Intent)>"
"<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>","<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>"
"<android.graphics.RecordingCanvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>","<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>"
"<java.lang.Long: int compareUnsigned(long,long)>","<java.lang.Long: int compareUnsigned(long,long)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)>"
"<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>(java.lang.String)>"
"<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.animation.LayoutTransition: void setDuration(int,long)>","<android.animation.LayoutTransition: void setDuration(int,long)>"
"<android.view.View: void requestUnbufferedDispatch(android.view.MotionEvent)>","<android.view.View: void requestUnbufferedDispatch(android.view.MotionEvent)>"
"<io.flutter.plugins.webviewflutter.e0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.e0: void a(java.lang.Object,y.a$e)>"
"<io.flutter.plugins.webviewflutter.h1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.h1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.widget.PopupWindow: void update(android.view.View,int,int)>","<android.widget.PopupWindow: void update(android.view.View,int,int)>"
"<android.content.pm.PackageManager$Property: boolean isResourceId()>","<android.content.pm.PackageManager$Property: boolean isResourceId()>"
"<android.transition.Transition: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>","<android.transition.Transition: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)>"
"<java.text.NumberFormat: java.text.NumberFormat getInstance()>","<java.text.NumberFormat: java.text.NumberFormat getInstance()>"
"<android.util.SparseIntArray: int keyAt(int)>","<android.util.SparseIntArray: int keyAt(int)>"
"<io.flutter.plugins.webviewflutter.j3: void <init>()>","<io.flutter.plugins.webviewflutter.j3: void <init>()>"
"<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>","<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>"
"<android.app.assist.AssistContent: android.content.ClipData getClipData()>","<android.app.assist.AssistContent: android.content.ClipData getClipData()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()>"
"<android.icu.util.ULocale: java.lang.String getUnicodeLocaleType(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getUnicodeLocaleType(java.lang.String)>"
"<java.time.ZoneOffset: int get(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: int get(java.time.temporal.TemporalField)>"
"<android.widget.AbsListView: boolean isFastScrollEnabled()>","<android.widget.AbsListView: boolean isFastScrollEnabled()>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>","<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>"
"<android.graphics.Region: void <init>(android.graphics.Region)>","<android.graphics.Region: void <init>(android.graphics.Region)>"
"<java.lang.Thread: java.lang.Thread$State getState()>","<java.lang.Thread: java.lang.Thread$State getState()>"
"<android.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>","<android.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>"
"<android.graphics.RectF: void union(android.graphics.RectF)>","<android.graphics.RectF: void union(android.graphics.RectF)>"
"<java.util.Locale: void setDefault(java.util.Locale)>","<java.util.Locale: void setDefault(java.util.Locale)>"
"<android.os.Message: android.os.Message obtain(android.os.Message)>","<android.os.Message: android.os.Message obtain(android.os.Message)>"
"<android.service.autofill.UserData: void <init>()>","<android.service.autofill.UserData: void <init>()>"
"<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>","<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.channels.ServerSocketChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.ServerSocketChannel: java.net.SocketAddress getLocalAddress()>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo build()>","<android.view.ContentInfo$Builder: android.view.ContentInfo build()>"
"<android.graphics.Path$FillType: void <init>(java.lang.String,int)>","<android.graphics.Path$FillType: void <init>(java.lang.String,int)>"
"<android.webkit.WebView: void onMeasure(int,int)>","<android.webkit.WebView: void onMeasure(int,int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>"
"<android.graphics.Outline: void setAlpha(float)>","<android.graphics.Outline: void setAlpha(float)>"
"<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)>","<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>"
"<android.graphics.ImageDecoder: android.graphics.Rect getCrop()>","<android.graphics.ImageDecoder: android.graphics.Rect getCrop()>"
"<java.lang.Byte: java.lang.Byte decode(java.lang.String)>","<java.lang.Byte: java.lang.Byte decode(java.lang.String)>"
"<android.widget.FrameLayout: void setForegroundGravity(int)>","<android.widget.FrameLayout: void setForegroundGravity(int)>"
"<android.content.ContextWrapper: void revokeUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.ContextWrapper: void revokeUriPermission(java.lang.String,android.net.Uri,int)>"
"<java.util.ArrayList: java.util.Spliterator spliterator()>","<java.util.ArrayList: java.util.Spliterator spliterator()>"
"<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)>"
"<java.net.Socket: java.io.OutputStream getOutputStream()>","<java.net.Socket: java.io.OutputStream getOutputStream()>"
"<java.util.concurrent.CopyOnWriteArrayList: void replaceAll(java.util.function.UnaryOperator)>","<java.util.concurrent.CopyOnWriteArrayList: void replaceAll(java.util.function.UnaryOperator)>"
"<android.content.res.Resources: android.content.res.Resources getSystem()>","<android.content.res.Resources: android.content.res.Resources getSystem()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.app.FragmentManager,android.app.Fragment)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>"
"<java.io.DataInput: boolean readBoolean()>","<java.io.DataInput: boolean readBoolean()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer compact()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer compact()>"
"<android.os.Debug: void resetThreadGcInvocationCount()>","<android.os.Debug: void resetThreadGcInvocationCount()>"
"<android.os.Parcel: android.os.Bundle readBundle()>","<android.os.Parcel: android.os.Bundle readBundle()>"
"<android.widget.TextView: void setHintTextColor(int)>","<android.widget.TextView: void setHintTextColor(int)>"
"<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>","<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>"
"<java.util.stream.BaseStream: java.util.Iterator iterator()>","<java.util.stream.BaseStream: java.util.Iterator iterator()>"
"<android.view.View: int getScrollBarFadeDuration()>","<android.view.View: int getScrollBarFadeDuration()>"
"<android.graphics.RecordingCanvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>"
"<java.util.Collections: void rotate(java.util.List,int)>","<java.util.Collections: void rotate(java.util.List,int)>"
"<android.content.Context: boolean isRestricted()>","<android.content.Context: boolean isRestricted()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>"
"<android.graphics.ColorFilter: void <init>()>","<android.graphics.ColorFilter: void <init>()>"
"<android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>","<android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>"
"<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>","<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>"
"<android.view.View: boolean isImportantForContentCapture()>","<android.view.View: boolean isImportantForContentCapture()>"
"<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.View: void setPadding(int,int,int,int)>","<android.view.View: void setPadding(int,int,int,int)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>"
"<java.net.SocketImpl: java.net.InetAddress getInetAddress()>","<java.net.SocketImpl: java.net.InetAddress getInetAddress()>"
"<java.util.regex.Matcher: int end(java.lang.String)>","<java.util.regex.Matcher: int end(java.lang.String)>"
"<java.nio.charset.CoderResult: java.lang.String toString()>","<java.nio.charset.CoderResult: java.lang.String toString()>"
"<android.app.RemoteAction: java.lang.Object clone()>","<android.app.RemoteAction: java.lang.Object clone()>"
"<android.content.Context: java.io.File getDir(java.lang.String,int)>","<android.content.Context: java.io.File getDir(java.lang.String,int)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence,java.text.ParsePosition)>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence,java.text.ParsePosition)>"
"<java.lang.Character: boolean isJavaLetter(char)>","<java.lang.Character: boolean isJavaLetter(char)>"
"<android.view.SurfaceControl: java.lang.String toString()>","<android.view.SurfaceControl: java.lang.String toString()>"
"<java.util.Date: java.util.Date 'from'(java.time.Instant)>","<java.util.Date: java.util.Date 'from'(java.time.Instant)>"
"<android.view.ViewGroup: void drawableStateChanged()>","<android.view.ViewGroup: void drawableStateChanged()>"
"<android.view.textservice.TextInfo: void <init>(java.lang.CharSequence,int,int,int,int)>","<android.view.textservice.TextInfo: void <init>(java.lang.CharSequence,int,int,int,int)>"
"<java.util.jar.Attributes: void <init>(int)>","<java.util.jar.Attributes: void <init>(int)>"
"<android.app.Activity: void setImmersive(boolean)>","<android.app.Activity: void setImmersive(boolean)>"
"<android.widget.ListPopupWindow: void setSoftInputMode(int)>","<android.widget.ListPopupWindow: void setSoftInputMode(int)>"
"<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>","<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,android.icu.util.ULocale)>"
"<java.io.Reader: void <init>()>","<java.io.Reader: void <init>()>"
"<android.app.RemoteAction: java.lang.CharSequence getContentDescription()>","<android.app.RemoteAction: java.lang.CharSequence getContentDescription()>"
"<java.util.stream.DoubleStream: void forEachOrdered(java.util.function.DoubleConsumer)>","<java.util.stream.DoubleStream: void forEachOrdered(java.util.function.DoubleConsumer)>"
"<android.widget.TextView: void setFirstBaselineToTopHeight(int)>","<android.widget.TextView: void setFirstBaselineToTopHeight(int)>"
"<java.lang.reflect.Modifier: boolean isStatic(int)>","<java.lang.reflect.Modifier: boolean isStatic(int)>"
"<android.view.View: void clearAnimation()>","<android.view.View: void clearAnimation()>"
"<android.os.Debug: int getGlobalExternalFreedCount()>","<android.os.Debug: int getGlobalExternalFreedCount()>"
"<android.os.BaseBundle: void clear()>","<android.os.BaseBundle: void clear()>"
"<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>","<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>"
"<java.net.URI: java.lang.String getHost()>","<java.net.URI: java.lang.String getHost()>"
"<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>"
"<android.graphics.drawable.Drawable: void setHotspot(float,float)>","<android.graphics.drawable.Drawable: void setHotspot(float,float)>"
"<java.io.BufferedReader: long skip(long)>","<java.io.BufferedReader: long skip(long)>"
"<android.database.sqlite.SQLiteStatement: java.lang.String toString()>","<android.database.sqlite.SQLiteStatement: java.lang.String toString()>"
"<android.app.Activity: void setActionBar(android.widget.Toolbar)>","<android.app.Activity: void setActionBar(android.widget.Toolbar)>"
"<android.graphics.Canvas: void rotate(float)>","<android.graphics.Canvas: void rotate(float)>"
"<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>"
"<android.service.autofill.UserData: void writeToParcel(android.os.Parcel,int)>","<android.service.autofill.UserData: void writeToParcel(android.os.Parcel,int)>"
"<java.util.NavigableSet: java.util.Iterator iterator()>","<java.util.NavigableSet: java.util.Iterator iterator()>"
"<android.view.ViewGroupOverlay: void remove(android.view.View)>","<android.view.ViewGroupOverlay: void remove(android.view.View)>"
"<java.time.chrono.Chronology: java.time.chrono.Chronology ofLocale(java.util.Locale)>","<java.time.chrono.Chronology: java.time.chrono.Chronology ofLocale(java.util.Locale)>"
"<android.view.accessibility.AccessibilityManager: void removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>","<android.view.accessibility.AccessibilityManager: void removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)>"
"<android.content.pm.PackageInstaller$Session: void setChecksums(java.lang.String,java.util.List,byte[])>","<android.content.pm.PackageInstaller$Session: void setChecksums(java.lang.String,java.util.List,byte[])>"
"<android.view.View: void setClipToOutline(boolean)>","<android.view.View: void setClipToOutline(boolean)>"
"<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()>","<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()>"
"<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>","<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>"
"<android.os.Parcel: void readDoubleArray(double[])>","<android.os.Parcel: void readDoubleArray(double[])>"
"<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>","<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>"
"<java.util.LinkedList: java.lang.Object getLast()>","<java.util.LinkedList: java.lang.Object getLast()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>"
"<java.nio.channels.SelectionKey: boolean isValid()>","<java.nio.channels.SelectionKey: boolean isValid()>"
"<android.service.autofill.UserData: java.lang.String toString()>","<android.service.autofill.UserData: java.lang.String toString()>"
"<io.flutter.plugins.webviewflutter.f3: void <clinit>()>","<io.flutter.plugins.webviewflutter.f3: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean)>"
"<java.nio.ByteBuffer: int getInt(int)>","<java.nio.ByteBuffer: int getInt(int)>"
"<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)>","<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)>"
"<android.content.ContextWrapper: android.content.Context getApplicationContext()>","<android.content.ContextWrapper: android.content.Context getApplicationContext()>"
"<android.app.Activity: void onPictureInPictureModeChanged(boolean)>","<android.app.Activity: void onPictureInPictureModeChanged(boolean)>"
"<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>","<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.TextView: void onMeasure(int,int)>","<android.widget.TextView: void onMeasure(int,int)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setErrorMessage(java.lang.CharSequence)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setErrorMessage(java.lang.CharSequence)>"
"<java.nio.charset.Charset: java.util.Set aliases()>","<java.nio.charset.Charset: java.util.Set aliases()>"
"<android.os.Debug: java.util.Map getRuntimeStats()>","<android.os.Debug: java.util.Map getRuntimeStats()>"
"<android.app.ActionBar$Tab: void select()>","<android.app.ActionBar$Tab: void select()>"
"<java.net.URLConnection: boolean getDoOutput()>","<java.net.URLConnection: boolean getDoOutput()>"
"<android.database.sqlite.SQLiteTransactionListener: void onRollback()>","<android.database.sqlite.SQLiteTransactionListener: void onRollback()>"
"<java.time.format.DecimalStyle: java.util.Set getAvailableLocales()>","<java.time.format.DecimalStyle: java.util.Set getAvailableLocales()>"
"<android.os.Trace: void endAsyncSection(java.lang.String,int)>","<android.os.Trace: void endAsyncSection(java.lang.String,int)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>","<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>"
"<java.util.Calendar: java.lang.Object clone()>","<java.util.Calendar: java.lang.Object clone()>"
"<java.util.Deque: boolean offer(java.lang.Object)>","<java.util.Deque: boolean offer(java.lang.Object)>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[])>","<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setChoices(java.lang.CharSequence[])>"
"<java.util.Dictionary: java.lang.Object remove(java.lang.Object)>","<java.util.Dictionary: java.lang.Object remove(java.lang.Object)>"
"<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>"
"<java.util.ArrayDeque: java.lang.Object removeFirst()>","<java.util.ArrayDeque: java.lang.Object removeFirst()>"
"<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()>","<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel truncate(long)>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel truncate(long)>"
"<android.view.ViewDebug$ExportedProperty: java.lang.String category()>","<android.view.ViewDebug$ExportedProperty: java.lang.String category()>"
"<android.animation.Animator: java.util.ArrayList getListeners()>","<android.animation.Animator: java.util.ArrayList getListeners()>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: void <init>(java.lang.String,int,int)>","<android.media.session.MediaSessionManager$RemoteUserInfo: void <init>(java.lang.String,int,int)>"
"<android.view.MotionEvent: float getTouchMajor()>","<android.view.MotionEvent: float getTouchMajor()>"
"<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()>","<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()>"
"<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<java.util.ArrayList: java.lang.Object remove(int)>","<java.util.ArrayList: java.lang.Object remove(int)>"
"<android.view.SurfaceHolder: android.view.Surface getSurface()>","<android.view.SurfaceHolder: android.view.Surface getSurface()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<android.view.View: boolean hasNestedScrollingParent()>","<android.view.View: boolean hasNestedScrollingParent()>"
"<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>","<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>"
"<android.transition.Scene: android.view.ViewGroup getSceneRoot()>","<android.transition.Scene: android.view.ViewGroup getSceneRoot()>"
"<android.hardware.Sensor: boolean isDynamicSensor()>","<android.hardware.Sensor: boolean isDynamicSensor()>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript[] values()>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript[] values()>"
"<android.app.ActivityManager$ProcessErrorStateInfo: int describeContents()>","<android.app.ActivityManager$ProcessErrorStateInfo: int describeContents()>"
"<android.app.Fragment: boolean equals(java.lang.Object)>","<android.app.Fragment: boolean equals(java.lang.Object)>"
"<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.app.Notification: void writeToParcel(android.os.Parcel,int)>","<android.app.Notification: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.charset.CoderResult: void throwException()>","<java.nio.charset.CoderResult: void throwException()>"
"<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>","<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>"
"<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>","<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>"
"<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>","<java.io.ObjectOutputStream$PutField: void put(java.lang.String,byte)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>"
"<java.lang.Long: java.lang.String toString()>","<java.lang.Long: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDateTime: int compareTo(java.lang.Object)>","<java.time.chrono.ChronoLocalDateTime: int compareTo(java.lang.Object)>"
"<android.text.style.TtsSpan$SemioticClassBuilder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$SemioticClassBuilder: void <init>(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.l0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.l0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.content.ClipData$Item: android.view.textclassifier.TextLinks getTextLinks()>","<android.content.ClipData$Item: android.view.textclassifier.TextLinks getTextLinks()>"
"<android.content.pm.PackageManager: void removePermission(java.lang.String)>","<android.content.pm.PackageManager: void removePermission(java.lang.String)>"
"<android.hardware.Sensor: int getReportingMode()>","<android.hardware.Sensor: int getReportingMode()>"
"<android.app.ActivityManager: void <init>()>","<android.app.ActivityManager: void <init>()>"
"<io.flutter.plugins.webviewflutter.o1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.o1: void a(java.lang.Object,y.a$e)>"
"<android.view.inputmethod.InputConnection: boolean setImeConsumesInput(boolean)>","<android.view.inputmethod.InputConnection: boolean setImeConsumesInput(boolean)>"
"<java.lang.Character: boolean isLetter(int)>","<java.lang.Character: boolean isLetter(int)>"
"<android.animation.ValueAnimator: float getDurationScale()>","<android.animation.ValueAnimator: float getDurationScale()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>"
"<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>"
"<java.lang.Float: int hashCode()>","<java.lang.Float: int hashCode()>"
"<android.view.MotionEvent$PointerProperties: boolean equals(java.lang.Object)>","<android.view.MotionEvent$PointerProperties: boolean equals(java.lang.Object)>"
"<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>","<android.view.TextureView$SurfaceTextureListener: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>"
"<org.xmlpull.v1.XmlPullParser: int next()>","<org.xmlpull.v1.XmlPullParser: int next()>"
"<android.util.TypedValue: float complexToFloat(int)>","<android.util.TypedValue: float complexToFloat(int)>"
"<android.content.pm.SigningInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.SigningInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.ReflectiveOperationException: void <init>(java.lang.Throwable)>","<java.lang.ReflectiveOperationException: void <init>(java.lang.Throwable)>"
"<android.view.translation.TranslationResponseValue: void <clinit>()>","<android.view.translation.TranslationResponseValue: void <clinit>()>"
"<android.widget.ImageView: void onDetachedFromWindow()>","<android.widget.ImageView: void onDetachedFromWindow()>"
"<android.app.Fragment: void requestPermissions(java.lang.String[],int)>","<android.app.Fragment: void requestPermissions(java.lang.String[],int)>"
"<android.widget.AdapterView: int getSelectedItemPosition()>","<android.widget.AdapterView: int getSelectedItemPosition()>"
"<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[])>","<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[])>"
"<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<java.util.Currency: void <init>()>","<java.util.Currency: void <init>()>"
"<android.graphics.Movie: boolean setTime(int)>","<android.graphics.Movie: boolean setTime(int)>"
"<android.app.Notification$Style: void setBuilder(android.app.Notification$Builder)>","<android.app.Notification$Style: void setBuilder(android.app.Notification$Builder)>"
"<javax.security.auth.Subject: javax.security.auth.Subject getSubject(java.security.AccessControlContext)>","<javax.security.auth.Subject: javax.security.auth.Subject getSubject(java.security.AccessControlContext)>"
"<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()>","<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()>"
"<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()>","<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()>"
"<android.app.Fragment: java.lang.String getTag()>","<android.app.Fragment: java.lang.String getTag()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>"
"<android.content.IntentSender: int describeContents()>","<android.content.IntentSender: int describeContents()>"
"<android.content.SyncAdapterType: java.lang.String toString()>","<android.content.SyncAdapterType: java.lang.String toString()>"
"<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>","<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>"
"<android.view.accessibility.AccessibilityEvent: void <init>()>","<android.view.accessibility.AccessibilityEvent: void <init>()>"
"<java.nio.Buffer: int capacity()>","<java.nio.Buffer: int capacity()>"
"<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>"
"<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme)>"
"<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>","<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>"
"<android.provider.Settings: void <init>()>","<android.provider.Settings: void <init>()>"
"<android.view.View: boolean getClipBounds(android.graphics.Rect)>","<android.view.View: boolean getClipBounds(android.graphics.Rect)>"
"<android.content.AttributionSource: java.lang.String getPackageName()>","<android.content.AttributionSource: java.lang.String getPackageName()>"
"<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>","<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>"
"<java.lang.Class: java.lang.String getPackageName()>","<java.lang.Class: java.lang.String getPackageName()>"
"<android.view.RoundedCorner: void <clinit>()>","<android.view.RoundedCorner: void <clinit>()>"
"<java.util.stream.IntStream: java.util.stream.DoubleStream asDoubleStream()>","<java.util.stream.IntStream: java.util.stream.DoubleStream asDoubleStream()>"
"<android.view.animation.Animation: int getRepeatCount()>","<android.view.animation.Animation: int getRepeatCount()>"
"<android.view.View: void setVisibility(int)>","<android.view.View: void setVisibility(int)>"
"<java.lang.VirtualMachineError: void <init>(java.lang.Throwable)>","<java.lang.VirtualMachineError: void <init>(java.lang.Throwable)>"
"<android.view.KeyEvent$Callback: boolean onKeyUp(int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.io.SerializablePermission: void <init>(java.lang.String)>","<java.io.SerializablePermission: void <init>(java.lang.String)>"
"<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>","<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>"
"<android.widget.AbsListView: void smoothScrollToPosition(int)>","<android.widget.AbsListView: void smoothScrollToPosition(int)>"
"<java.lang.StringBuffer: void <init>(java.lang.String)>","<java.lang.StringBuffer: void <init>(java.lang.String)>"
"<android.database.Cursor: boolean moveToLast()>","<android.database.Cursor: boolean moveToLast()>"
"<android.os.Parcel: void readFixedArray(java.lang.Object,java.util.function.Function)>","<android.os.Parcel: void readFixedArray(java.lang.Object,java.util.function.Function)>"
"<java.security.GeneralSecurityException: void <init>(java.lang.String)>","<java.security.GeneralSecurityException: void <init>(java.lang.String)>"
"<java.util.stream.IntStream: java.util.Iterator iterator()>","<java.util.stream.IntStream: java.util.Iterator iterator()>"
"<android.content.ContextWrapper: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.ContextWrapper: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<android.view.View: void offsetTopAndBottom(int)>","<android.view.View: void offsetTopAndBottom(int)>"
"<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>","<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>"
"<android.widget.ListView: void smoothScrollToPosition(int)>","<android.widget.ListView: void smoothScrollToPosition(int)>"
"<java.lang.InstantiationException: void <init>()>","<java.lang.InstantiationException: void <init>()>"
"<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setIntegerPart(java.lang.String)>","<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setIntegerPart(java.lang.String)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>"
"<android.widget.AdapterView: boolean canAnimate()>","<android.widget.AdapterView: boolean canAnimate()>"
"<android.database.Cursor: void setExtras(android.os.Bundle)>","<android.database.Cursor: void setExtras(android.os.Bundle)>"
"<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>","<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>"
"<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>","<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>"
"<android.os.Debug$MemoryInfo: int getTotalSwappablePss()>","<android.os.Debug$MemoryInfo: int getTotalSwappablePss()>"
"<java.nio.Buffer: int arrayOffset()>","<java.nio.Buffer: int arrayOffset()>"
"<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>","<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>"
"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(int)>"
"<android.graphics.Color: long pack(float,float,float)>","<android.graphics.Color: long pack(float,float,float)>"
"<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>"
"<java.util.Arrays: void parallelPrefix(double[],java.util.function.DoubleBinaryOperator)>","<java.util.Arrays: void parallelPrefix(double[],java.util.function.DoubleBinaryOperator)>"
"<android.view.LayoutInflater: android.content.Context getContext()>","<android.view.LayoutInflater: android.content.Context getContext()>"
"<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>","<java.util.concurrent.atomic.AtomicLong: long incrementAndGet()>"
"<java.util.Arrays: void parallelPrefix(int[],java.util.function.IntBinaryOperator)>","<java.util.Arrays: void parallelPrefix(int[],java.util.function.IntBinaryOperator)>"
"<android.content.res.loader.ResourcesProvider: void close()>","<android.content.res.loader.ResourcesProvider: void close()>"
"<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()>","<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)>"
"<android.icu.util.ULocale: java.util.Set getUnicodeLocaleKeys()>","<android.icu.util.ULocale: java.util.Set getUnicodeLocaleKeys()>"
"<android.graphics.ImageDecoder: int getAllocator()>","<android.graphics.ImageDecoder: int getAllocator()>"
"<android.view.accessibility.AccessibilityEvent: int describeContents()>","<android.view.accessibility.AccessibilityEvent: int describeContents()>"
"<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>","<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>"
"<java.lang.Double: void <init>(double)>","<java.lang.Double: void <init>(double)>"
"<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()>","<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>"
"<java.net.Socket: void setSoLinger(boolean,int)>","<java.net.Socket: void setSoLinger(boolean,int)>"
"<android.view.ActionMode: void invalidateContentRect()>","<android.view.ActionMode: void invalidateContentRect()>"
"<android.content.res.Configuration: void setToDefaults()>","<android.content.res.Configuration: void setToDefaults()>"
"<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)>","<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.RejectedExecutionHandler)>"
"<java.nio.charset.CodingErrorAction: void <clinit>()>","<java.nio.charset.CodingErrorAction: void <clinit>()>"
"<android.view.View: int getLayoutDirection()>","<android.view.View: int getLayoutDirection()>"
"<java.io.FileInputStream: void finalize()>","<java.io.FileInputStream: void finalize()>"
"<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()>","<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()>"
"<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[],int,int)>","<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[],int,int)>"
"<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>"
"<android.app.Activity: boolean moveTaskToBack(boolean)>","<android.app.Activity: boolean moveTaskToBack(boolean)>"
"<java.lang.Math: int incrementExact(int)>","<java.lang.Math: int incrementExact(int)>"
"<java.text.DateFormat: void setNumberFormat(java.text.NumberFormat)>","<java.text.DateFormat: void setNumberFormat(java.text.NumberFormat)>"
"<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetRelease(long,long)>","<java.util.concurrent.atomic.AtomicLong: boolean weakCompareAndSetRelease(long,long)>"
"<android.view.View: float getTranslationY()>","<android.view.View: float getTranslationY()>"
"<android.transition.TransitionValues: void <init>(android.view.View)>","<android.transition.TransitionValues: void <init>(android.view.View)>"
"<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>"
"<java.text.DateFormat: java.util.Calendar getCalendar()>","<java.text.DateFormat: java.util.Calendar getCalendar()>"
"<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)>","<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
"<android.view.autofill.AutofillId: void <init>()>","<android.view.autofill.AutofillId: void <init>()>"
"<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>","<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>"
"<android.view.inputmethod.TextAttribute: android.os.PersistableBundle getExtras()>","<android.view.inputmethod.TextAttribute: android.os.PersistableBundle getExtras()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream generate(java.util.function.DoubleSupplier)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream generate(java.util.function.DoubleSupplier)>"
"<android.content.pm.PackageManager: boolean isDeviceUpgrading()>","<android.content.pm.PackageManager: boolean isDeviceUpgrading()>"
"<android.text.style.LocaleSpan: java.util.Locale getLocale()>","<android.text.style.LocaleSpan: java.util.Locale getLocale()>"
"<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>","<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>"
"<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()>","<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()>"
"<android.view.View: int getMeasuredHeightAndState()>","<android.view.View: int getMeasuredHeightAndState()>"
"<java.time.LocalTime: boolean equals(java.lang.Object)>","<java.time.LocalTime: boolean equals(java.lang.Object)>"
"<android.media.Image: void setDataSpace(int)>","<android.media.Image: void setDataSpace(int)>"
"<android.util.DisplayMetrics: void <clinit>()>","<android.util.DisplayMetrics: void <clinit>()>"
"<android.text.style.TtsSpan: java.lang.String getType()>","<android.text.style.TtsSpan: java.lang.String getType()>"
"<android.os.Handler: java.lang.String getMessageName(android.os.Message)>","<android.os.Handler: java.lang.String getMessageName(android.os.Message)>"
"<android.view.inputmethod.BaseInputConnection: int getComposingSpanEnd(android.text.Spannable)>","<android.view.inputmethod.BaseInputConnection: int getComposingSpanEnd(android.text.Spannable)>"
"<android.webkit.TracingController: void <init>()>","<android.webkit.TracingController: void <init>()>"
"<java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()>","<java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>"
"<android.content.IntentFilter: int getPriority()>","<android.content.IntentFilter: int getPriority()>"
"<java.lang.Character: boolean isDigit(char)>","<java.lang.Character: boolean isDigit(char)>"
"<android.view.inputmethod.InputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>","<android.view.inputmethod.InputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAcquire(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getAcquire(int)>"
"<android.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.view.inputmethod.EditorInfo: int describeContents()>","<android.view.inputmethod.EditorInfo: int describeContents()>"
"<android.widget.AbsListView: int getBottomEdgeEffectColor()>","<android.widget.AbsListView: int getBottomEdgeEffectColor()>"
"<java.security.cert.CertPath: int hashCode()>","<java.security.cert.CertPath: int hashCode()>"
"<android.app.ActionBar: void setSubtitle(java.lang.CharSequence)>","<android.app.ActionBar: void setSubtitle(java.lang.CharSequence)>"
"<android.webkit.WebSettings: void setDisabledActionModeMenuItems(int)>","<android.webkit.WebSettings: void setDisabledActionModeMenuItems(int)>"
"<java.io.InputStreamReader: java.lang.String getEncoding()>","<java.io.InputStreamReader: java.lang.String getEncoding()>"
"<android.view.ViewGroup: boolean restoreDefaultFocus()>","<android.view.ViewGroup: boolean restoreDefaultFocus()>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forToggle(boolean)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forToggle(boolean)>"
"<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: android.text.Editable insert(int,java.lang.CharSequence,int,int)>"
"<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.hardware.lights.Light: int describeContents()>","<android.hardware.lights.Light: int describeContents()>"
"<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>","<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>"
"<android.widget.TextView: void setCustomInsertionActionModeCallback(android.view.ActionMode$Callback)>","<android.widget.TextView: void setCustomInsertionActionModeCallback(android.view.ActionMode$Callback)>"
"<java.net.URL: void <init>(java.net.URL,java.lang.String)>","<java.net.URL: void <init>(java.net.URL,java.lang.String)>"
"<java.io.ObjectInputStream$GetField: java.io.ObjectStreamClass getObjectStreamClass()>","<java.io.ObjectInputStream$GetField: java.io.ObjectStreamClass getObjectStreamClass()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>"
"<android.view.MenuItem: char getAlphabeticShortcut()>","<android.view.MenuItem: char getAlphabeticShortcut()>"
"<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.webkit.WebView: boolean onDragEvent(android.view.DragEvent)>","<android.webkit.WebView: boolean onDragEvent(android.view.DragEvent)>"
"<android.view.translation.TranslationResponseValue: android.os.Bundle getExtras()>","<android.view.translation.TranslationResponseValue: android.os.Bundle getExtras()>"
"<android.hardware.lights.Light: boolean hasRgbControl()>","<android.hardware.lights.Light: boolean hasRgbControl()>"
"<java.lang.Character: java.lang.Character valueOf(char)>","<java.lang.Character: java.lang.Character valueOf(char)>"
"<io.flutter.plugins.webviewflutter.b2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.b2: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.widget.PopupWindow: void setIgnoreCheekPress()>","<android.widget.PopupWindow: void setIgnoreCheekPress()>"
"<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>","<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>"
"<java.util.Random: int nextInt()>","<java.util.Random: int nextInt()>"
"<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>","<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>"
"<java.net.URLConnection: boolean getDefaultUseCaches()>","<java.net.URLConnection: boolean getDefaultUseCaches()>"
"<android.os.Bundle: char getChar(java.lang.String)>","<android.os.Bundle: char getChar(java.lang.String)>"
"<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>","<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>"
"<android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>","<android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>"
"<android.content.res.loader.ResourcesProvider: void finalize()>","<android.content.res.loader.ResourcesProvider: void finalize()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object getOpaque()>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object getOpaque()>"
"<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>","<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>"
"<android.net.Uri: java.util.Set getQueryParameterNames()>","<android.net.Uri: java.util.Set getQueryParameterNames()>"
"<android.text.DynamicLayout: int getParagraphDirection(int)>","<android.text.DynamicLayout: int getParagraphDirection(int)>"
"<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>","<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>"
"<java.util.AbstractCollection: boolean add(java.lang.Object)>","<java.util.AbstractCollection: boolean add(java.lang.Object)>"
"<java.util.TimeZone: int getOffset(long)>","<java.util.TimeZone: int getOffset(long)>"
"<android.view.translation.TranslationSpec: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.TranslationSpec: void writeToParcel(android.os.Parcel,int)>"
"<java.io.DataInput: short readShort()>","<java.io.DataInput: short readShort()>"
"<android.content.res.TypedArray: boolean hasValue(int)>","<android.content.res.TypedArray: boolean hasValue(int)>"
"<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>","<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>"
"<android.service.autofill.UserData: int getMaxCategoryCount()>","<android.service.autofill.UserData: int getMaxCategoryCount()>"
"<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>","<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>"
"<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>","<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>"
"<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.util.LinkedList: java.util.Spliterator spliterator()>","<java.util.LinkedList: java.util.Spliterator spliterator()>"
"<android.util.Base64: byte[] decode(byte[],int)>","<android.util.Base64: byte[] decode(byte[],int)>"
"<java.lang.Long: long parseUnsignedLong(java.lang.String,int)>","<java.lang.Long: long parseUnsignedLong(java.lang.String,int)>"
"<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>","<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>"
"<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()>","<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()>"
"<android.icu.util.ULocale$AvailableType: void <clinit>()>","<android.icu.util.ULocale$AvailableType: void <clinit>()>"
"<android.content.Context: java.io.File getFilesDir()>","<android.content.Context: java.io.File getFilesDir()>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndUpdate(java.util.function.UnaryOperator)>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object getAndUpdate(java.util.function.UnaryOperator)>"
"<java.time.ZoneId: java.time.ZoneId ofOffset(java.lang.String,java.time.ZoneOffset)>","<java.time.ZoneId: java.time.ZoneId ofOffset(java.lang.String,java.time.ZoneOffset)>"
"<io.flutter.embedding.android.l: void a(boolean)>","<io.flutter.embedding.android.l: void a(boolean)>"
"<java.lang.Short: long toUnsignedLong(short)>","<java.lang.Short: long toUnsignedLong(short)>"
"<android.view.View: int getSourceLayoutResId()>","<android.view.View: int getSourceLayoutResId()>"
"<java.time.temporal.TemporalUnit: java.lang.String toString()>","<java.time.temporal.TemporalUnit: java.lang.String toString()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setColorized(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setColorized(boolean)>"
"<java.text.CharacterIterator: char first()>","<java.text.CharacterIterator: char first()>"
"<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>","<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)>"
"<android.content.AttributionSource: boolean checkCallingUid()>","<android.content.AttributionSource: boolean checkCallingUid()>"
"<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>"
"<java.util.Hashtable: int size()>","<java.util.Hashtable: int size()>"
"<android.graphics.Paint: float measureText(java.lang.String,int,int)>","<android.graphics.Paint: float measureText(java.lang.String,int,int)>"
"<android.media.session.MediaSession: void setFlags(int)>","<android.media.session.MediaSession: void setFlags(int)>"
"<android.view.Window: void setTransitionBackgroundFadeDuration(long)>","<android.view.Window: void setTransitionBackgroundFadeDuration(long)>"
"<android.graphics.Canvas: void drawColor(int,android.graphics.BlendMode)>","<android.graphics.Canvas: void drawColor(int,android.graphics.BlendMode)>"
"<android.hardware.SyncFence: boolean isValid()>","<android.hardware.SyncFence: boolean isValid()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>"
"<java.nio.channels.Selector: int select(long)>","<java.nio.channels.Selector: int select(long)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaUri(android.net.Uri)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaUri(android.net.Uri)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconUri(android.net.Uri)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconUri(android.net.Uri)>"
"<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>","<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>"
"<android.util.SparseBooleanArray: void setValueAt(int,boolean)>","<android.util.SparseBooleanArray: void setValueAt(int,boolean)>"
"<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>","<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>"
"<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>","<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>"
"<java.util.function.ObjDoubleConsumer: void accept(java.lang.Object,double)>","<java.util.function.ObjDoubleConsumer: void accept(java.lang.Object,double)>"
"<android.webkit.WebSettings: java.lang.String getUserAgentString()>","<android.webkit.WebSettings: java.lang.String getUserAgentString()>"
"<android.view.Window: boolean isStatusBarContrastEnforced()>","<android.view.Window: boolean isStatusBarContrastEnforced()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.lang.Thread: void join(long,int)>","<java.lang.Thread: void join(long,int)>"
"<java.lang.Runnable: void run()>","<java.lang.Runnable: void run()>"
"<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>","<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>"
"<java.util.Collections: java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet)>","<java.util.Collections: java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setUsesChronometer(boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setUsesChronometer(boolean)>"
"<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan$Builder setStringArgument(java.lang.String,java.lang.String)>","<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan$Builder setStringArgument(java.lang.String,java.lang.String)>"
"<java.util.NavigableSet: java.lang.Object floor(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object floor(java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>"
"<java.util.Set: java.util.Set of(java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object)>"
"<java.util.OptionalLong: java.util.stream.LongStream stream()>","<java.util.OptionalLong: java.util.stream.LongStream stream()>"
"<android.view.WindowInsetsAnimation: void setAlpha(float)>","<android.view.WindowInsetsAnimation: void setAlpha(float)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.Character: boolean equals(java.lang.Object)>","<java.lang.Character: boolean equals(java.lang.Object)>"
"<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>"
"<org.json.JSONObject: long getLong(java.lang.String)>","<org.json.JSONObject: long getLong(java.lang.String)>"
"<io.flutter.view.a: boolean test(java.lang.Object)>","<io.flutter.view.a: boolean test(java.lang.Object)>"
"<android.os.Parcel: void writeByte(byte)>","<android.os.Parcel: void writeByte(byte)>"
"<java.nio.charset.CharacterCodingException: void <init>()>","<java.nio.charset.CharacterCodingException: void <init>()>"
"<android.view.textclassifier.TextSelection: void <init>()>","<android.view.textclassifier.TextSelection: void <init>()>"
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.view.MotionEvent: void <init>()>","<android.view.MotionEvent: void <init>()>"
"<android.widget.AbsListView: void setScrollBarStyle(int)>","<android.widget.AbsListView: void setScrollBarStyle(int)>"
"<java.io.PrintStream: void <init>(java.io.File)>","<java.io.PrintStream: void <init>(java.io.File)>"
"<android.widget.TextView: void setPaintFlags(int)>","<android.widget.TextView: void setPaintFlags(int)>"
"<android.graphics.drawable.Drawable$ConstantState: void <init>()>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>"
"<android.view.inputmethod.InputContentInfo: void releasePermission()>","<android.view.inputmethod.InputContentInfo: void releasePermission()>"
"<java.security.cert.CertificateNotYetValidException: void <init>()>","<java.security.cert.CertificateNotYetValidException: void <init>()>"
"<java.util.Locale$Builder: java.util.Locale$Builder clear()>","<java.util.Locale$Builder: java.util.Locale$Builder clear()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>"
"<android.webkit.WebView: void dispatchDraw(android.graphics.Canvas)>","<android.webkit.WebView: void dispatchDraw(android.graphics.Canvas)>"
"<android.view.Window: int getVolumeControlStream()>","<android.view.Window: int getVolumeControlStream()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter,android.graphics.RenderEffect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter,android.graphics.RenderEffect)>"
"<java.time.ZoneOffset: int getTotalSeconds()>","<java.time.ZoneOffset: int getTotalSeconds()>"
"<android.view.Display: void getSize(android.graphics.Point)>","<android.view.Display: void getSize(android.graphics.Point)>"
"<java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>","<java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>"
"<android.widget.RemoteViews: void setViewLayoutWidth(int,float,int)>","<android.widget.RemoteViews: void setViewLayoutWidth(int,float,int)>"
"<io.flutter.plugins.webviewflutter.s1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.s1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>","<java.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>"
"<java.time.chrono.Era: long getLong(java.time.temporal.TemporalField)>","<java.time.chrono.Era: long getLong(java.time.temporal.TemporalField)>"
"<android.webkit.WebView: android.content.pm.PackageInfo getCurrentWebViewPackage()>","<android.webkit.WebView: android.content.pm.PackageInfo getCurrentWebViewPackage()>"
"<android.media.session.PlaybackState: boolean isActive()>","<android.media.session.PlaybackState: boolean isActive()>"
"<java.util.HashSet: void clear()>","<java.util.HashSet: void clear()>"
"<java.util.Map: java.lang.Object get(java.lang.Object)>","<java.util.Map: java.lang.Object get(java.lang.Object)>"
"<android.view.SurfaceHolder: void setFormat(int)>","<android.view.SurfaceHolder: void setFormat(int)>"
"<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>","<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>"
"<android.webkit.WebChromeClient$FileChooserParams: void <init>()>","<android.webkit.WebChromeClient$FileChooserParams: void <init>()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>"
"<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>","<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>"
"<java.lang.reflect.Field: java.lang.String getName()>","<java.lang.reflect.Field: java.lang.String getName()>"
"<android.view.ViewGroup: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>","<android.view.ViewGroup: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>"
"<android.os.LocaleList: android.os.LocaleList getDefault()>","<android.os.LocaleList: android.os.LocaleList getDefault()>"
"<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setIntegerPart(long)>","<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setIntegerPart(long)>"
"<android.text.TextPaint: float getUnderlineThickness()>","<android.text.TextPaint: float getUnderlineThickness()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithHints(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithHints(java.util.Collection)>"
"<android.content.pm.Signature: int describeContents()>","<android.content.pm.Signature: int describeContents()>"
"<android.app.Activity: void onPanelClosed(int,android.view.Menu)>","<android.app.Activity: void onPanelClosed(int,android.view.Menu)>"
"<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>","<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>"
"<android.webkit.WebSettings: void setUseWideViewPort(boolean)>","<android.webkit.WebSettings: void setUseWideViewPort(boolean)>"
"<java.lang.Number: float floatValue()>","<java.lang.Number: float floatValue()>"
"<java.time.zone.ZoneOffsetTransition: boolean isOverlap()>","<java.time.zone.ZoneOffsetTransition: boolean isOverlap()>"
"<android.view.inputmethod.InputMethodManager: boolean isActive()>","<android.view.inputmethod.InputMethodManager: boolean isActive()>"
"<java.util.Spliterator$OfDouble: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfDouble: java.util.Spliterator$OfPrimitive trySplit()>"
"<android.os.Handler: android.os.Message obtainMessage(int,int,int)>","<android.os.Handler: android.os.Message obtainMessage(int,int,int)>"
"<android.app.Activity: void onLocalVoiceInteractionStarted()>","<android.app.Activity: void onLocalVoiceInteractionStarted()>"
"<android.transition.Transition: void <init>()>","<android.transition.Transition: void <init>()>"
"<android.view.inputmethod.InputMethodInfo: int describeContents()>","<android.view.inputmethod.InputMethodInfo: int describeContents()>"
"<android.app.ActivityManager: int getLauncherLargeIconSize()>","<android.app.ActivityManager: int getLauncherLargeIconSize()>"
"<java.text.NumberFormat: void setMinimumIntegerDigits(int)>","<java.text.NumberFormat: void setMinimumIntegerDigits(int)>"
"<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>"
"<android.content.pm.PackageManager: java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags)>","<android.content.pm.PackageManager: java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags)>"
"<android.provider.Settings$Panel: void <init>()>","<android.provider.Settings$Panel: void <init>()>"
"<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>","<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>"
"<android.media.session.MediaController: void setVolumeTo(int,int)>","<android.media.session.MediaController: void setVolumeTo(int,int)>"
"<android.content.Intent: android.content.Intent getSelector()>","<android.content.Intent: android.content.Intent getSelector()>"
"<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)>","<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)>"
"<android.app.Activity: void startActivity(android.content.Intent)>","<android.app.Activity: void startActivity(android.content.Intent)>"
"<android.content.IntentFilter: void addAction(java.lang.String)>","<android.content.IntentFilter: void addAction(java.lang.String)>"
"<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.content.res.AssetManager$AssetInputStream: void finalize()>","<android.content.res.AssetManager$AssetInputStream: void finalize()>"
"<java.util.concurrent.TimeUnit: long toMinutes(long)>","<java.util.concurrent.TimeUnit: long toMinutes(long)>"
"<android.view.View: void onScrollChanged(int,int,int,int)>","<android.view.View: void onScrollChanged(int,int,int,int)>"
"<android.graphics.ImageDecoder: int getMemorySizePolicy()>","<android.graphics.ImageDecoder: int getMemorySizePolicy()>"
"<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>","<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>"
"<android.view.textclassifier.SelectionEvent: boolean equals(java.lang.Object)>","<android.view.textclassifier.SelectionEvent: boolean equals(java.lang.Object)>"
"<android.text.TextPaint: void <init>(android.graphics.Paint)>","<android.text.TextPaint: void <init>(android.graphics.Paint)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setBackground(android.graphics.Bitmap)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setBackground(android.graphics.Bitmap)>"
"<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType valueOf(java.lang.String)>","<android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType valueOf(java.lang.String)>"
"<java.util.ArrayList: java.util.ListIterator listIterator(int)>","<java.util.ArrayList: java.util.ListIterator listIterator(int)>"
"<android.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.media.session.MediaController$PlaybackInfo: int describeContents()>","<android.media.session.MediaController$PlaybackInfo: int describeContents()>"
"<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>","<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>"
"<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>","<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>"
"<java.lang.StringBuilder: java.lang.String substring(int)>","<java.lang.StringBuilder: java.lang.String substring(int)>"
"<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>","<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>"
"<android.app.Notification$Builder: android.app.Notification$Builder addPerson(android.app.Person)>","<android.app.Notification$Builder: android.app.Notification$Builder addPerson(android.app.Person)>"
"<java.util.IdentityHashMap: int size()>","<java.util.IdentityHashMap: int size()>"
"<java.util.Locale: java.lang.String getVariant()>","<java.util.Locale: java.lang.String getVariant()>"
"<android.webkit.WebSettings: boolean getJavaScriptEnabled()>","<android.webkit.WebSettings: boolean getJavaScriptEnabled()>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSet(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSet(boolean,boolean)>"
"<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>","<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>"
"<java.net.URISyntaxException: int getIndex()>","<java.net.URISyntaxException: int getIndex()>"
"<android.webkit.WebView: void onResume()>","<android.webkit.WebView: void onResume()>"
"<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)>","<java.util.concurrent.LinkedBlockingQueue: void <init>(java.util.Collection)>"
"<android.util.LongSparseArray: int indexOfKey(long)>","<android.util.LongSparseArray: int indexOfKey(long)>"
"<java.util.AbstractList: int hashCode()>","<java.util.AbstractList: int hashCode()>"
"<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>","<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>"
"<android.os.BaseBundle: java.util.Set keySet()>","<android.os.BaseBundle: java.util.Set keySet()>"
"<java.lang.reflect.Executable: void <init>()>","<java.lang.reflect.Executable: void <init>()>"
"<java.util.Arrays: void sort(byte[])>","<java.util.Arrays: void sort(byte[])>"
"<java.util.HashSet: void <init>(int,float)>","<java.util.HashSet: void <init>(int,float)>"
"<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>"
"<android.view.View: int resolveSizeAndState(int,int,int)>","<android.view.View: int resolveSizeAndState(int,int,int)>"
"<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>","<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>"
"<android.content.LocusId: int hashCode()>","<android.content.LocusId: int hashCode()>"
"<android.content.SyncAdapterType: boolean isAlwaysSyncable()>","<android.content.SyncAdapterType: boolean isAlwaysSyncable()>"
"<java.nio.ShortBuffer: short get()>","<java.nio.ShortBuffer: short get()>"
"<android.os.Debug: int getGlobalAllocCount()>","<android.os.Debug: int getGlobalAllocCount()>"
"<android.content.ContentProviderResult: int describeContents()>","<android.content.ContentProviderResult: int describeContents()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)>"
"<android.graphics.ColorSpace$Connector: float[] transform(float[])>","<android.graphics.ColorSpace$Connector: float[] transform(float[])>"
"<java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>","<java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>"
"<java.time.OffsetDateTime: void <clinit>()>","<java.time.OffsetDateTime: void <clinit>()>"
"<java.lang.ThreadLocal: void <init>()>","<java.lang.ThreadLocal: void <init>()>"
"<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>"
"<android.widget.ImageView: void setImageTintMode(android.graphics.PorterDuff$Mode)>","<android.widget.ImageView: void setImageTintMode(android.graphics.PorterDuff$Mode)>"
"<android.widget.TextView: float getLetterSpacing()>","<android.widget.TextView: float getLetterSpacing()>"
"<android.view.Window$Callback: void onPointerCaptureChanged(boolean)>","<android.view.Window$Callback: void onPointerCaptureChanged(boolean)>"
"<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>","<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>"
"<java.text.CharacterIterator: java.lang.Object clone()>","<java.text.CharacterIterator: java.lang.Object clone()>"
"<java.util.HashSet: int size()>","<java.util.HashSet: int size()>"
"<java.lang.Thread: java.lang.Thread currentThread()>","<java.lang.Thread: java.lang.Thread currentThread()>"
"<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()>","<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()>"
"<android.view.ViewGroup: void detachAllViewsFromParent()>","<android.view.ViewGroup: void detachAllViewsFromParent()>"
"<java.util.ConcurrentModificationException: void <init>(java.lang.Throwable)>","<java.util.ConcurrentModificationException: void <init>(java.lang.Throwable)>"
"<android.view.textclassifier.TextSelection$Request$Builder: void <init>(java.lang.CharSequence,int,int)>","<android.view.textclassifier.TextSelection$Request$Builder: void <init>(java.lang.CharSequence,int,int)>"
"<io.flutter.plugins.webviewflutter.w0: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.w0: void a(java.lang.Object)>"
"<java.time.Period: java.time.chrono.ChronoPeriod negated()>","<java.time.Period: java.time.chrono.ChronoPeriod negated()>"
"<java.util.Arrays: int mismatch(boolean[],int,int,boolean[],int,int)>","<java.util.Arrays: int mismatch(boolean[],int,int,boolean[],int,int)>"
"<android.graphics.ImageDecoder: void setPostProcessor(android.graphics.PostProcessor)>","<android.graphics.ImageDecoder: void setPostProcessor(android.graphics.PostProcessor)>"
"<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)>","<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)>"
"<android.app.ActivityManager$MemoryInfo: void <init>()>","<android.app.ActivityManager$MemoryInfo: void <init>()>"
"<android.view.MotionEvent: float getRawX(int)>","<android.view.MotionEvent: float getRawX(int)>"
"<java.util.Calendar: int getLeastMaximum(int)>","<java.util.Calendar: int getLeastMaximum(int)>"
"<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>","<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
"<java.lang.Integer: int intValue()>","<java.lang.Integer: int intValue()>"
"<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int)>","<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int)>"
"<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle addLine(java.lang.CharSequence)>","<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle addLine(java.lang.CharSequence)>"
"<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>","<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>"
"<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>","<java.util.concurrent.ThreadPoolExecutor: void setCorePoolSize(int)>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndAccumulate(java.lang.Object,long,java.util.function.LongBinaryOperator)>"
"<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.util.zip.ZipException: void <init>()>","<java.util.zip.ZipException: void <init>()>"
"<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>","<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>"
"<android.view.Surface: void writeToParcel(android.os.Parcel,int)>","<android.view.Surface: void writeToParcel(android.os.Parcel,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)>"
"<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>","<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>"
"<java.time.OffsetDateTime: int compareTo(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: int compareTo(java.time.OffsetDateTime)>"
"<java.lang.System: void setProperties(java.util.Properties)>","<java.lang.System: void setProperties(java.util.Properties)>"
"<java.util.Map: boolean containsValue(java.lang.Object)>","<java.util.Map: boolean containsValue(java.lang.Object)>"
"<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request$Builder setExtras(android.os.Bundle)>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo,android.content.res.Configuration)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo,android.content.res.Configuration)>"
"<android.view.ViewConfiguration: float getScaledAmbiguousGestureMultiplier()>","<android.view.ViewConfiguration: float getScaledAmbiguousGestureMultiplier()>"
"<android.text.style.TtsSpan$DecimalBuilder: void <init>(java.lang.String,java.lang.String)>","<android.text.style.TtsSpan$DecimalBuilder: void <init>(java.lang.String,java.lang.String)>"
"<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>","<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>"
"<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View)>","<android.view.autofill.AutofillManager: boolean showAutofillDialog(android.view.View)>"
"<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>","<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>"
"<android.widget.ImageView: void setCropToPadding(boolean)>","<android.widget.ImageView: void setCropToPadding(boolean)>"
"<java.util.concurrent.atomic.AtomicInteger: int updateAndGet(java.util.function.IntUnaryOperator)>","<java.util.concurrent.atomic.AtomicInteger: int updateAndGet(java.util.function.IntUnaryOperator)>"
"<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>","<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
"<android.content.res.Resources: void removeLoaders(android.content.res.loader.ResourcesLoader[])>","<android.content.res.Resources: void removeLoaders(android.content.res.loader.ResourcesLoader[])>"
"<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)>","<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)>"
"<java.net.DatagramPacket: void <init>(byte[],int)>","<java.net.DatagramPacket: void <init>(byte[],int)>"
"<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>","<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>"
"<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>","<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>"
"<android.view.inputmethod.BaseInputConnection: boolean setComposingText(java.lang.CharSequence,int)>","<android.view.inputmethod.BaseInputConnection: boolean setComposingText(java.lang.CharSequence,int)>"
"<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)>","<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)>"
"<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence)>","<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>"
"<android.widget.TextView: void setTextAppearance(int)>","<android.widget.TextView: void setTextAppearance(int)>"
"<android.app.RemoteInput: void <clinit>()>","<android.app.RemoteInput: void <clinit>()>"
"<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>","<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>"
"<java.util.regex.Matcher: int groupCount()>","<java.util.regex.Matcher: int groupCount()>"
"<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>"
"<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()>","<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()>"
"<io.flutter.plugins.webviewflutter.i0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.i0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<java.lang.reflect.Field: void setShort(java.lang.Object,short)>","<java.lang.reflect.Field: void setShort(java.lang.Object,short)>"
"<android.widget.Toolbar: void setTitleMargin(int,int,int,int)>","<android.widget.Toolbar: void setTitleMargin(int,int,int,int)>"
"<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>","<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>"
"<android.widget.TextView: float getRightFadingEdgeStrength()>","<android.widget.TextView: float getRightFadingEdgeStrength()>"
"<java.io.PrintWriter: void print(java.lang.Object)>","<java.io.PrintWriter: void print(java.lang.Object)>"
"<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>","<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()>"
"<android.view.View: float getX()>","<android.view.View: float getX()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int)>"
"<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)>","<android.service.autofill.UserData: java.lang.String getFieldClassificationAlgorithmForCategory(java.lang.String)>"
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>"
"<io.flutter.plugins.webviewflutter.k0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.k0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean extendLeft(android.text.Spannable,android.text.Layout)>"
"<android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>","<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>"
"<android.service.autofill.UserData: int getMaxFieldClassificationIdsSize()>","<android.service.autofill.UserData: int getMaxFieldClassificationIdsSize()>"
"<java.lang.reflect.Field: int hashCode()>","<java.lang.reflect.Field: int hashCode()>"
"<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>","<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>"
"<android.webkit.ClientCertRequest: int getPort()>","<android.webkit.ClientCertRequest: int getPort()>"
"<java.lang.Throwable: java.lang.Throwable getCause()>","<java.lang.Throwable: java.lang.Throwable getCause()>"
"<android.text.style.TtsSpan$DateBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)>","<android.text.style.TtsSpan$DateBuilder: void <init>(java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)>"
"<android.content.Context: java.io.File getCacheDir()>","<android.content.Context: java.io.File getCacheDir()>"
"<android.view.View: void setAnimationMatrix(android.graphics.Matrix)>","<android.view.View: void setAnimationMatrix(android.graphics.Matrix)>"
"<android.graphics.Paint: float getStrokeMiter()>","<android.graphics.Paint: float getStrokeMiter()>"
"<java.lang.System: java.lang.String clearProperty(java.lang.String)>","<java.lang.System: java.lang.String clearProperty(java.lang.String)>"
"<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>"
"<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>"
"<android.os.Parcel: void writeList(java.util.List)>","<android.os.Parcel: void writeList(java.util.List)>"
"<android.widget.TextView: void setBreakStrategy(int)>","<android.widget.TextView: void setBreakStrategy(int)>"
"<android.view.Window: android.transition.Transition getSharedElementReenterTransition()>","<android.view.Window: android.transition.Transition getSharedElementReenterTransition()>"
"<java.util.concurrent.locks.ReentrantLock: boolean isFair()>","<java.util.concurrent.locks.ReentrantLock: boolean isFair()>"
"<android.view.inputmethod.CompletionInfo: java.lang.String toString()>","<android.view.inputmethod.CompletionInfo: java.lang.String toString()>"
"<android.graphics.RecordingCanvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>"
"<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<java.util.Date: int getMinutes()>","<java.util.Date: int getMinutes()>"
"<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[],int,int)>","<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[],int,int)>"
"<android.content.Loader$OnLoadCompleteListener: void onLoadComplete(android.content.Loader,java.lang.Object)>","<android.content.Loader$OnLoadCompleteListener: void onLoadComplete(android.content.Loader,java.lang.Object)>"
"<android.graphics.Rect: float exactCenterY()>","<android.graphics.Rect: float exactCenterY()>"
"<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>","<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>"
"<java.util.regex.Pattern: java.util.stream.Stream splitAsStream(java.lang.CharSequence)>","<java.util.regex.Pattern: java.util.stream.Stream splitAsStream(java.lang.CharSequence)>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,java.lang.String)>"
"<java.util.Arrays: long[] copyOf(long[],int)>","<java.util.Arrays: long[] copyOf(long[],int)>"
"<java.lang.Float: java.lang.String toString(float)>","<java.lang.Float: java.lang.String toString(float)>"
"<android.os.Parcel: void writeInt(int)>","<android.os.Parcel: void writeInt(int)>"
"<android.widget.TextView: void onCreateContextMenu(android.view.ContextMenu)>","<android.widget.TextView: void onCreateContextMenu(android.view.ContextMenu)>"
"<android.text.PrecomputedText: int getSpanStart(java.lang.Object)>","<android.text.PrecomputedText: int getSpanStart(java.lang.Object)>"
"<android.widget.Scroller: int getCurrY()>","<android.widget.Scroller: int getCurrY()>"
"<android.net.http.SslError: boolean hasError(int)>","<android.net.http.SslError: boolean hasError(int)>"
"<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)>","<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)>"
"<android.content.pm.Signature: boolean equals(java.lang.Object)>","<android.content.pm.Signature: boolean equals(java.lang.Object)>"
"<android.util.Base64: void <init>()>","<android.util.Base64: void <init>()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: void lazySet(java.lang.Object,java.lang.Object)>"
"<java.util.List: int hashCode()>","<java.util.List: int hashCode()>"
"<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>","<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>"
"<java.time.chrono.Chronology: int hashCode()>","<java.time.chrono.Chronology: int hashCode()>"
"<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>","<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>"
"<android.view.WindowInsetsController: void hide(int)>","<android.view.WindowInsetsController: void hide(int)>"
"<android.graphics.Paint: float getShadowLayerRadius()>","<android.graphics.Paint: float getShadowLayerRadius()>"
"<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>"
"<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType[] values()>","<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType[] values()>"
"<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>","<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>"
"<android.hardware.HardwareBuffer: boolean isClosed()>","<android.hardware.HardwareBuffer: boolean isClosed()>"
"<android.widget.AbsListView: void draw(android.graphics.Canvas)>","<android.widget.AbsListView: void draw(android.graphics.Canvas)>"
"<android.webkit.WebView$WebViewTransport: void <init>(android.webkit.WebView)>","<android.webkit.WebView$WebViewTransport: void <init>(android.webkit.WebView)>"
"<android.view.animation.Animation: int getBackgroundColor()>","<android.view.animation.Animation: int getBackgroundColor()>"
"<android.view.View: int getNextFocusDownId()>","<android.view.View: int getNextFocusDownId()>"
"<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>","<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>"
"<java.util.Locale: java.util.Locale[] getAvailableLocales()>","<java.util.Locale: java.util.Locale[] getAvailableLocales()>"
"<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)>"
"<java.time.OffsetTime: java.time.OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.OffsetTime: java.time.OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<java.lang.reflect.Modifier: java.lang.String toString(int)>","<java.lang.reflect.Modifier: java.lang.String toString(int)>"
"<android.os.Debug: int getBinderProxyObjectCount()>","<android.os.Debug: int getBinderProxyObjectCount()>"
"<android.hardware.BatteryState: int getStatus()>","<android.hardware.BatteryState: int getStatus()>"
"<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs()>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs()>"
"<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>","<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>"
"<android.webkit.WebChromeClient$FileChooserParams: android.net.Uri[] parseResult(int,android.content.Intent)>","<android.webkit.WebChromeClient$FileChooserParams: android.net.Uri[] parseResult(int,android.content.Intent)>"
"<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()>","<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()>"
"<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguage(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguage(java.lang.String)>"
"<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>","<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>"
"<java.io.FileInputStream: int read()>","<java.io.FileInputStream: int read()>"
"<android.view.View: android.view.Display getDisplay()>","<android.view.View: android.view.Display getDisplay()>"
"<java.util.LinkedHashSet: void <init>(int,float)>","<java.util.LinkedHashSet: void <init>(int,float)>"
"<android.view.ViewConfiguration: int getScaledTouchSlop()>","<android.view.ViewConfiguration: int getScaledTouchSlop()>"
"<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>","<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>"
"<android.content.DialogInterface$OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>","<android.content.DialogInterface$OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>"
"<android.view.ViewDebug$FlagToString: int mask()>","<android.view.ViewDebug$FlagToString: int mask()>"
"<java.io.ObjectStreamField: java.lang.String getTypeString()>","<java.io.ObjectStreamField: java.lang.String getTypeString()>"
"<android.graphics.RectF: void readFromParcel(android.os.Parcel)>","<android.graphics.RectF: void readFromParcel(android.os.Parcel)>"
"<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>","<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>"
"<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>","<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>"
"<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>","<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>"
"<java.net.ServerSocket: java.net.InetAddress getInetAddress()>","<java.net.ServerSocket: java.net.InetAddress getInetAddress()>"
"<android.app.Fragment: void onDestroyOptionsMenu()>","<android.app.Fragment: void onDestroyOptionsMenu()>"
"<org.json.JSONArray: int optInt(int,int)>","<org.json.JSONArray: int optInt(int,int)>"
"<java.time.Duration: java.time.Duration ofNanos(long)>","<java.time.Duration: java.time.Duration ofNanos(long)>"
"<android.graphics.Picture: int getHeight()>","<android.graphics.Picture: int getHeight()>"
"<android.view.View: int getSystemUiVisibility()>","<android.view.View: int getSystemUiVisibility()>"
"<android.util.TypedValue: float getFraction(float,float)>","<android.util.TypedValue: float getFraction(float,float)>"
"<android.util.LongSparseArray: android.util.LongSparseArray clone()>","<android.util.LongSparseArray: android.util.LongSparseArray clone()>"
"<java.util.Locale: java.lang.String[] getISOLanguages()>","<java.util.Locale: java.lang.String[] getISOLanguages()>"
"<android.view.animation.Animation: boolean isFillEnabled()>","<android.view.animation.Animation: boolean isFillEnabled()>"
"<android.view.Window: void setNavigationBarColor(int)>","<android.view.Window: void setNavigationBarColor(int)>"
"<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>","<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>"
"<android.view.SearchEvent: void <init>(android.view.InputDevice)>","<android.view.SearchEvent: void <init>(android.view.InputDevice)>"
"<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>","<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(short)>"
"<android.os.BaseBundle: long getLong(java.lang.String,long)>","<android.os.BaseBundle: long getLong(java.lang.String,long)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>"
"<androidx.lifecycle.LiveData$LifecycleBoundObserver: boolean i()>","<androidx.lifecycle.LiveData$LifecycleBoundObserver: boolean i()>"
"<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>","<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>"
"<java.lang.Math: long multiplyExact(long,int)>","<java.lang.Math: long multiplyExact(long,int)>"
"<android.os.Parcel: boolean hasFileDescriptors()>","<android.os.Parcel: boolean hasFileDescriptors()>"
"<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>","<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>"
"<android.view.View: android.view.ContentInfo performReceiveContent(android.view.ContentInfo)>","<android.view.View: android.view.ContentInfo performReceiveContent(android.view.ContentInfo)>"
"<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>"
"<android.media.session.MediaSession$Callback: void onSetRating(android.media.Rating)>","<android.media.session.MediaSession$Callback: void onSetRating(android.media.Rating)>"
"<java.io.PrintWriter: void write(java.lang.String,int,int)>","<java.io.PrintWriter: void write(java.lang.String,int,int)>"
"<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>","<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>"
"<java.util.Collection: boolean contains(java.lang.Object)>","<java.util.Collection: boolean contains(java.lang.Object)>"
"<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setMonth(int)>","<android.text.style.TtsSpan$DateBuilder: android.text.style.TtsSpan$DateBuilder setMonth(int)>"
"<android.graphics.Paint: void setStrokeMiter(float)>","<android.graphics.Paint: void setStrokeMiter(float)>"
"<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>","<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>"
"<java.util.Arrays: void parallelPrefix(long[],java.util.function.LongBinaryOperator)>","<java.util.Arrays: void parallelPrefix(long[],java.util.function.LongBinaryOperator)>"
"<android.view.animation.Transformation: java.lang.String toShortString()>","<android.view.animation.Transformation: java.lang.String toShortString()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
"<java.util.Date: java.lang.String toGMTString()>","<java.util.Date: java.lang.String toGMTString()>"
"<java.time.LocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.LocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>","<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>"
"<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>","<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>"
"<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>","<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>"
"<java.time.LocalDate: void <init>()>","<java.time.LocalDate: void <init>()>"
"<android.view.textclassifier.TextLinks$Builder: void <init>(java.lang.String)>","<android.view.textclassifier.TextLinks$Builder: void <init>(java.lang.String)>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>"
"<java.net.DatagramSocket: boolean isBound()>","<java.net.DatagramSocket: boolean isBound()>"
"<android.view.KeyEvent: java.lang.String getCharacters()>","<android.view.KeyEvent: java.lang.String getCharacters()>"
"<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>","<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>","<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>"
"<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setFractionalPart(java.lang.String)>","<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setFractionalPart(java.lang.String)>"
"<x.c: void a(java.lang.Object)>","<x.c: void a(java.lang.Object)>"
"<java.io.PrintWriter: void write(char[],int,int)>","<java.io.PrintWriter: void write(char[],int,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,int[][])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,int[][])>"
"<java.lang.Integer: int reverse(int)>","<java.lang.Integer: int reverse(int)>"
"<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)>","<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)>"
"<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>","<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>"
"<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>","<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>"
"<android.content.Context: android.content.res.Resources$Theme getTheme()>","<android.content.Context: android.content.res.Resources$Theme getTheme()>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.ArrayList: boolean contains(java.lang.Object)>","<java.util.ArrayList: boolean contains(java.lang.Object)>"
"<android.content.pm.PackageManager$ComponentInfoFlags: android.content.pm.PackageManager$ComponentInfoFlags of(long)>","<android.content.pm.PackageManager$ComponentInfoFlags: android.content.pm.PackageManager$ComponentInfoFlags of(long)>"
"<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>","<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>"
"<java.lang.Enum: int compareTo(java.lang.Object)>","<java.lang.Enum: int compareTo(java.lang.Object)>"
"<android.animation.Animator: boolean isPaused()>","<android.animation.Animator: boolean isPaused()>"
"<android.webkit.WebSettings: boolean getSafeBrowsingEnabled()>","<android.webkit.WebSettings: boolean getSafeBrowsingEnabled()>"
"<android.os.Debug: int getGlobalExternalAllocSize()>","<android.os.Debug: int getGlobalExternalAllocSize()>"
"<java.util.Arrays: int[] copyOf(int[],int)>","<java.util.Arrays: int[] copyOf(int[],int)>"
"<android.icu.util.ULocale: android.icu.util.ULocale getDefault()>","<android.icu.util.ULocale: android.icu.util.ULocale getDefault()>"
"<android.app.Activity: void onDetachedFromWindow()>","<android.app.Activity: void onDetachedFromWindow()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>"
"<android.view.Window$Callback: void onWindowFocusChanged(boolean)>","<android.view.Window$Callback: void onWindowFocusChanged(boolean)>"
"<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>","<java.util.IdentityHashMap: java.lang.Object get(java.lang.Object)>"
"<android.app.Activity: android.view.MenuInflater getMenuInflater()>","<android.app.Activity: android.view.MenuInflater getMenuInflater()>"
"<android.content.ContextWrapper: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>","<android.content.ContextWrapper: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>"
"<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>","<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>"
"<android.view.View: void invalidate(int,int,int,int)>","<android.view.View: void invalidate(int,int,int,int)>"
"<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>","<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>"
"<java.io.File: boolean canWrite()>","<java.io.File: boolean canWrite()>"
"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>","<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>"
"<android.media.Rating: float getPercentRating()>","<android.media.Rating: float getPercentRating()>"
"<java.net.DatagramSocket: java.net.DatagramSocket setOption(java.net.SocketOption,java.lang.Object)>","<java.net.DatagramSocket: java.net.DatagramSocket setOption(java.net.SocketOption,java.lang.Object)>"
"<java.nio.file.FileSystem: boolean isOpen()>","<java.nio.file.FileSystem: boolean isOpen()>"
"<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>","<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>"
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>","<java.util.jar.Manifest: java.util.jar.Attributes getAttributes(java.lang.String)>"
"<android.content.pm.Signature: char[] toChars(char[],int[])>","<android.content.pm.Signature: char[] toChars(char[],int[])>"
"<java.util.stream.IntStream: java.util.stream.IntStream empty()>","<java.util.stream.IntStream: java.util.stream.IntStream empty()>"
"<android.os.Build$Partition: java.lang.String getName()>","<android.os.Build$Partition: java.lang.String getName()>"
"<java.nio.Buffer: int position()>","<java.nio.Buffer: int position()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>","<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>"
"<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>","<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>"
"<android.view.View: boolean isHardwareAccelerated()>","<android.view.View: boolean isHardwareAccelerated()>"
"<java.nio.IntBuffer: java.nio.Buffer mark()>","<java.nio.IntBuffer: java.nio.Buffer mark()>"
"<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>","<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>"
"<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>","<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>"
"<android.animation.ValueAnimator: void start()>","<android.animation.ValueAnimator: void start()>"
"<android.content.pm.Signature: void <clinit>()>","<android.content.pm.Signature: void <clinit>()>"
"<android.content.pm.PackageInstaller$SessionParams: void setInstallReason(int)>","<android.content.pm.PackageInstaller$SessionParams: void setInstallReason(int)>"
"<java.time.OffsetDateTime: boolean isEqual(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: boolean isEqual(java.time.OffsetDateTime)>"
"<android.view.View: void setForeground(android.graphics.drawable.Drawable)>","<android.view.View: void setForeground(android.graphics.drawable.Drawable)>"
"<android.transition.Transition$TransitionListener: void onTransitionCancel(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionCancel(android.transition.Transition)>"
"<java.net.URLConnection: java.lang.String toString()>","<java.net.URLConnection: java.lang.String toString()>"
"<java.nio.CharBuffer: void <init>()>","<java.nio.CharBuffer: void <init>()>"
"<android.view.ActionMode$Callback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>","<android.view.ActionMode$Callback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>"
"<java.time.LocalTime: java.time.LocalTime withSecond(int)>","<java.time.LocalTime: java.time.LocalTime withSecond(int)>"
"<java.net.SocketImpl: void shutdownOutput()>","<java.net.SocketImpl: void shutdownOutput()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int,int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int,int)>"
"<java.lang.UnknownError: void <init>(java.lang.String)>","<java.lang.UnknownError: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>","<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>"
"<android.view.MotionEvent: int getEdgeFlags()>","<android.view.MotionEvent: int getEdgeFlags()>"
"<android.content.LocusId: java.lang.String getId()>","<android.content.LocusId: java.lang.String getId()>"
"<android.app.VoiceInteractor$Request: java.lang.String toString()>","<android.app.VoiceInteractor$Request: java.lang.String toString()>"
"<android.view.View: void setClickable(boolean)>","<android.view.View: void setClickable(boolean)>"
"<android.content.pm.SigningInfo: void <init>(android.content.pm.SigningInfo)>","<android.content.pm.SigningInfo: void <init>(android.content.pm.SigningInfo)>"
"<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>","<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>"
"<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()>","<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>"
"<android.graphics.drawable.Drawable: boolean isStateful()>","<android.graphics.drawable.Drawable: boolean isStateful()>"
"<java.util.jar.Attributes: int size()>","<java.util.jar.Attributes: int size()>"
"<java.util.List: boolean isEmpty()>","<java.util.List: boolean isEmpty()>"
"<java.lang.Thread: java.util.Map getAllStackTraces()>","<java.lang.Thread: java.util.Map getAllStackTraces()>"
"<android.content.pm.PackageInstaller$SessionParams: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageInstaller$SessionParams: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.content.res.AssetManager$AssetInputStream: void close()>","<android.content.res.AssetManager$AssetInputStream: void close()>"
"<android.app.Fragment: boolean isAdded()>","<android.app.Fragment: boolean isAdded()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>"
"<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>","<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>"
"<android.content.pm.PackageInstaller$Session: void <init>()>","<android.content.pm.PackageInstaller$Session: void <init>()>"
"<android.content.Loader: void onForceLoad()>","<android.content.Loader: void onForceLoad()>"
"<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>","<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>"
"<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)>","<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)>"
"<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>"
"<java.math.RoundingMode: java.math.RoundingMode[] values()>","<java.math.RoundingMode: java.math.RoundingMode[] values()>"
"<android.view.inputmethod.TextAttribute$Builder: void <init>()>","<android.view.inputmethod.TextAttribute$Builder: void <init>()>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>"
"<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>","<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>"
"<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>","<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>"
"<java.net.InetAddress: boolean isMCGlobal()>","<java.net.InetAddress: boolean isMCGlobal()>"
"<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>","<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>"
"<android.view.View: int getImportantForAutofill()>","<android.view.View: int getImportantForAutofill()>"
"<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>","<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>"
"<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.view.View: boolean willNotDraw()>","<android.view.View: boolean willNotDraw()>"
"<android.content.pm.PackageInstaller$SessionInfo: int getMode()>","<android.content.pm.PackageInstaller$SessionInfo: int getMode()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>"
"<java.lang.Void: void <clinit>()>","<java.lang.Void: void <clinit>()>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: int describeContents()>","<android.content.pm.PackageManager$ComponentEnabledSetting: int describeContents()>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setContextual(boolean)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder setContextual(boolean)>"
"<android.app.PictureInPictureParams: boolean isAutoEnterEnabled()>","<android.app.PictureInPictureParams: boolean isAutoEnterEnabled()>"
"<android.widget.PopupWindow: void setIsLaidOutInScreen(boolean)>","<android.widget.PopupWindow: void setIsLaidOutInScreen(boolean)>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureStart(android.view.ScrollCaptureSession,android.os.CancellationSignal,java.lang.Runnable)>","<android.view.ScrollCaptureCallback: void onScrollCaptureStart(android.view.ScrollCaptureSession,android.os.CancellationSignal,java.lang.Runnable)>"
"<java.nio.ByteBuffer: java.lang.String toString()>","<java.nio.ByteBuffer: java.lang.String toString()>"
"<java.lang.ThreadGroup: void stop()>","<java.lang.ThreadGroup: void stop()>"
"<java.math.RoundingMode: void <init>(java.lang.String,int)>","<java.math.RoundingMode: void <init>(java.lang.String,int)>"
"<java.io.ObjectInputStream: int available()>","<java.io.ObjectInputStream: int available()>"
"<android.text.Layout: float getSpacingMultiplier()>","<android.text.Layout: float getSpacingMultiplier()>"
"<android.content.pm.PackageManager: java.util.List queryServiceProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryServiceProperty(java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder addUnicodeLocaleAttribute(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder addUnicodeLocaleAttribute(java.lang.String)>"
"<android.media.Session2Token: java.lang.String getPackageName()>","<android.media.Session2Token: java.lang.String getPackageName()>"
"<android.app.Activity: java.lang.String getLocalClassName()>","<android.app.Activity: java.lang.String getLocalClassName()>"
"<java.lang.Class: java.lang.Class getDeclaringClass()>","<java.lang.Class: java.lang.Class getDeclaringClass()>"
"<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>","<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>"
"<java.lang.reflect.Method: boolean isVarArgs()>","<java.lang.reflect.Method: boolean isVarArgs()>"
"<android.view.Window: android.os.Bundle saveHierarchyState()>","<android.view.Window: android.os.Bundle saveHierarchyState()>"
"<android.net.http.SslError: java.lang.String getUrl()>","<android.net.http.SslError: java.lang.String getUrl()>"
"<android.app.PendingIntent$OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>","<android.app.PendingIntent$OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>"
"<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>","<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>"
"<java.util.regex.Matcher: java.lang.String group(java.lang.String)>","<java.util.regex.Matcher: java.lang.String group(java.lang.String)>"
"<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>","<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)>"
"<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>"
"<android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)>","<android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)>"
"<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>","<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>"
"<java.time.LocalTime: java.lang.String toString()>","<java.time.LocalTime: java.lang.String toString()>"
"<android.webkit.WebView: boolean isVisibleToUserForAutofill(int)>","<android.webkit.WebView: boolean isVisibleToUserForAutofill(int)>"
"<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>","<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>"
"<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>","<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>"
"<java.nio.file.attribute.FileTime: long toMillis()>","<java.nio.file.attribute.FileTime: long toMillis()>"
"<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>","<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>"
"<java.nio.MappedByteBuffer: boolean isLoaded()>","<java.nio.MappedByteBuffer: boolean isLoaded()>"
"<android.widget.AbsListView: int getCheckedItemPosition()>","<android.widget.AbsListView: int getCheckedItemPosition()>"
"<android.graphics.Path: boolean isConvex()>","<android.graphics.Path: boolean isConvex()>"
"<java.lang.String: byte[] getBytes()>","<java.lang.String: byte[] getBytes()>"
"<java.net.Socket: int getTrafficClass()>","<java.net.Socket: int getTrafficClass()>"
"<java.util.Deque: boolean addAll(java.util.Collection)>","<java.util.Deque: boolean addAll(java.util.Collection)>"
"<java.util.Calendar: void clear(int)>","<java.util.Calendar: void clear(int)>"
"<android.widget.ListPopupWindow: void setWidth(int)>","<android.widget.ListPopupWindow: void setWidth(int)>"
"<java.lang.Integer: int hashCode()>","<java.lang.Integer: int hashCode()>"
"<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)>","<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)>"
"<java.nio.file.FileSystem: void <init>()>","<java.nio.file.FileSystem: void <init>()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndUpdate(java.lang.Object,java.util.function.LongUnaryOperator)>"
"<android.app.Fragment: void setHasOptionsMenu(boolean)>","<android.app.Fragment: void setHasOptionsMenu(boolean)>"
"<android.app.AlertDialog: boolean onKeyDown(int,android.view.KeyEvent)>","<android.app.AlertDialog: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>"
"<android.view.View: boolean isScrollContainer()>","<android.view.View: boolean isScrollContainer()>"
"<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>","<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getScript()>","<android.icu.util.ULocale: java.lang.String getScript()>"
"<android.widget.AbsListView: int getTopPaddingOffset()>","<android.widget.AbsListView: int getTopPaddingOffset()>"
"<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>","<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>"
"<android.widget.RemoteViews: void setScrollPosition(int,int)>","<android.widget.RemoteViews: void setScrollPosition(int,int)>"
"<android.webkit.WebView: void clearFormData()>","<android.webkit.WebView: void clearFormData()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.ViewGroup: boolean hasTransientState()>","<android.view.ViewGroup: boolean hasTransientState()>"
"<android.view.ViewStructure: void setCheckable(boolean)>","<android.view.ViewStructure: void setCheckable(boolean)>"
"<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>","<java.util.concurrent.atomic.AtomicLong: long decrementAndGet()>"
"<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>","<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>"
"<android.view.MotionEvent: float getY(int)>","<android.view.MotionEvent: float getY(int)>"
"<java.nio.LongBuffer: void <init>()>","<java.nio.LongBuffer: void <init>()>"
"<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>","<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle setBigContentTitle(java.lang.CharSequence)>"
"<android.graphics.Canvas: void skew(float,float)>","<android.graphics.Canvas: void skew(float,float)>"
"<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>"
"<java.nio.channels.Selector: java.nio.channels.Selector open()>","<java.nio.channels.Selector: java.nio.channels.Selector open()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>"
"<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.LinkedBlockingQueue: boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit)>"
"<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>","<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>"
"<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ThreadPoolExecutor: void setKeepAliveTime(long,java.util.concurrent.TimeUnit)>"
"<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<android.view.ViewGroup: void startLayoutAnimation()>","<android.view.ViewGroup: void startLayoutAnimation()>"
"<java.util.Locale$FilteringMode: void <clinit>()>","<java.util.Locale$FilteringMode: void <clinit>()>"
"<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.os.MemoryFile: int readBytes(byte[],int,int,int)>","<android.os.MemoryFile: int readBytes(byte[],int,int,int)>"
"<android.content.res.TypedArray: int getLayoutDimension(int,int)>","<android.content.res.TypedArray: int getLayoutDimension(int,int)>"
"<java.util.Map: void replaceAll(java.util.function.BiFunction)>","<java.util.Map: void replaceAll(java.util.function.BiFunction)>"
"<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastAccessTime()>","<java.util.zip.ZipEntry: java.nio.file.attribute.FileTime getLastAccessTime()>"
"<android.graphics.Region: boolean equals(java.lang.Object)>","<android.graphics.Region: boolean equals(java.lang.Object)>"
"<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>","<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>"
"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>","<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>"
"<java.util.ArrayList: boolean addAll(int,java.util.Collection)>","<java.util.ArrayList: boolean addAll(int,java.util.Collection)>"
"<java.io.FileOutputStream: void close()>","<java.io.FileOutputStream: void close()>"
"<android.text.style.TtsSpan$FractionBuilder: void <init>()>","<android.text.style.TtsSpan$FractionBuilder: void <init>()>"
"<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>"
"<android.content.res.Resources: android.graphics.Movie getMovie(int)>","<android.content.res.Resources: android.graphics.Movie getMovie(int)>"
"<java.math.BigInteger: void <clinit>()>","<java.math.BigInteger: void <clinit>()>"
"<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName)>","<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName)>"
"<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View,int,android.view.autofill.AutofillValue)>","<android.view.autofill.AutofillManager: void notifyValueChanged(android.view.View,int,android.view.autofill.AutofillValue)>"
"<java.lang.Double: java.lang.Double valueOf(double)>","<java.lang.Double: java.lang.Double valueOf(double)>"
"<android.provider.Settings$Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>"
"<android.webkit.WebSettings: boolean getBuiltInZoomControls()>","<android.webkit.WebSettings: boolean getBuiltInZoomControls()>"
"<java.lang.SecurityManager: void checkWrite(java.lang.String)>","<java.lang.SecurityManager: void checkWrite(java.lang.String)>"
"<android.app.ActionBar: android.app.ActionBar$Tab newTab()>","<android.app.ActionBar: android.app.ActionBar$Tab newTab()>"
"<java.util.jar.Manifest: void <init>(java.io.InputStream)>","<java.util.jar.Manifest: void <init>(java.io.InputStream)>"
"<java.time.LocalTime: boolean isBefore(java.time.LocalTime)>","<java.time.LocalTime: boolean isBefore(java.time.LocalTime)>"
"<io.flutter.plugins.webviewflutter.a3: void <init>()>","<io.flutter.plugins.webviewflutter.a3: void <init>()>"
"<android.view.inputmethod.CompletionInfo: void <clinit>()>","<android.view.inputmethod.CompletionInfo: void <clinit>()>"
"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>","<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>"
"<android.view.textservice.SuggestionsInfo: void <clinit>()>","<android.view.textservice.SuggestionsInfo: void <clinit>()>"
"<java.util.Calendar: int getMinimalDaysInFirstWeek()>","<java.util.Calendar: int getMinimalDaysInFirstWeek()>"
"<android.view.Window: void setBackgroundBlurRadius(int)>","<android.view.Window: void setBackgroundBlurRadius(int)>"
"<android.app.Activity: android.view.View getCurrentFocus()>","<android.app.Activity: android.view.View getCurrentFocus()>"
"<android.view.View: void setBackgroundColor(int)>","<android.view.View: void setBackgroundColor(int)>"
"<java.util.Spliterator$OfLong: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfLong: boolean tryAdvance(java.lang.Object)>"
"<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>","<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>"
"<android.view.View$MeasureSpec: int getMode(int)>","<android.view.View$MeasureSpec: int getMode(int)>"
"<android.app.Dialog: boolean isShowing()>","<android.app.Dialog: boolean isShowing()>"
"<android.content.IntentFilter: java.util.Iterator actionsIterator()>","<android.content.IntentFilter: java.util.Iterator actionsIterator()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>"
"<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>","<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>"
"<java.text.DateFormat: void setLenient(boolean)>","<java.text.DateFormat: void setLenient(boolean)>"
"<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>","<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>"
"<android.content.pm.PackageManager: java.util.List queryProviderProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryProviderProperty(java.lang.String)>"
"<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>","<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>"
"<android.hardware.SensorManager$DynamicSensorCallback: void <init>()>","<android.hardware.SensorManager$DynamicSensorCallback: void <init>()>"
"<android.view.Window: boolean getAllowReturnTransitionOverlap()>","<android.view.Window: boolean getAllowReturnTransitionOverlap()>"
"<android.widget.AbsListView: void layoutChildren()>","<android.widget.AbsListView: void layoutChildren()>"
"<java.lang.Byte: int toUnsignedInt(byte)>","<java.lang.Byte: int toUnsignedInt(byte)>"
"<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)>"
"<android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean extendRight(android.text.Spannable,android.text.Layout)>"
"<android.view.View: void setNestedScrollingEnabled(boolean)>","<android.view.View: void setNestedScrollingEnabled(boolean)>"
"<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>","<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>"
"<java.nio.IntBuffer: java.nio.IntBuffer compact()>","<java.nio.IntBuffer: java.nio.IntBuffer compact()>"
"<android.app.Activity: void setContentView(int)>","<android.app.Activity: void setContentView(int)>"
"<android.widget.TextView: int getHighlightColor()>","<android.widget.TextView: int getHighlightColor()>"
"<java.util.OptionalInt: int orElseThrow()>","<java.util.OptionalInt: int orElseThrow()>"
"<java.nio.LongBuffer: java.nio.Buffer mark()>","<java.nio.LongBuffer: java.nio.Buffer mark()>"
"<java.util.Arrays: int binarySearch(long[],long)>","<java.util.Arrays: int binarySearch(long[],long)>"
"<java.net.MalformedURLException: void <init>(java.lang.String)>","<java.net.MalformedURLException: void <init>(java.lang.String)>"
"<java.net.DatagramSocketImpl: void create()>","<java.net.DatagramSocketImpl: void create()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>"
"<android.view.WindowManager$LayoutParams: int describeContents()>","<android.view.WindowManager$LayoutParams: int describeContents()>"
"<android.graphics.Rect: boolean contains(android.graphics.Rect)>","<android.graphics.Rect: boolean contains(android.graphics.Rect)>"
"<android.os.Parcelable$ClassLoaderCreator: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>","<android.os.Parcelable$ClassLoaderCreator: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>"
"<android.view.textclassifier.TextClassificationContext: int describeContents()>","<android.view.textclassifier.TextClassificationContext: int describeContents()>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>","<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.time.OffsetTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.view.View: void postInvalidate()>","<android.view.View: void postInvalidate()>"
"<java.nio.file.WatchKey: boolean isValid()>","<java.nio.file.WatchKey: boolean isValid()>"
"<java.lang.'annotation'.RetentionPolicy: void <clinit>()>","<java.lang.'annotation'.RetentionPolicy: void <clinit>()>"
"<android.view.textclassifier.TextLanguage: void <init>()>","<android.view.textclassifier.TextLanguage: void <init>()>"
"<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>","<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>"
"<java.lang.String: java.util.stream.Stream lines()>","<java.lang.String: java.util.stream.Stream lines()>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setProtocol(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setProtocol(java.lang.String)>"
"<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace$Adaptation)>","<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace$Adaptation)>"
"<android.app.FragmentManager: android.app.Fragment getPrimaryNavigationFragment()>","<android.app.FragmentManager: android.app.Fragment getPrimaryNavigationFragment()>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles()>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles()>"
"<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>","<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>"
"<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)>"
"<android.graphics.RenderNode: int getLeft()>","<android.graphics.RenderNode: int getLeft()>"
"<android.graphics.Paint: void setHinting(int)>","<android.graphics.Paint: void setHinting(int)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>"
"<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>","<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>"
"<androidx.window.embedding.c: boolean test(java.lang.Object)>","<androidx.window.embedding.c: boolean test(java.lang.Object)>"
"<android.view.View: void setDrawingCacheEnabled(boolean)>","<android.view.View: void setDrawingCacheEnabled(boolean)>"
"<android.view.TextureView: void setTransform(android.graphics.Matrix)>","<android.view.TextureView: void setTransform(android.graphics.Matrix)>"
"<java.util.Arrays: void parallelSort(java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: void parallelSort(java.lang.Object[],int,int,java.util.Comparator)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>"
"<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>","<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>"
"<android.app.Notification$BubbleMetadata: void <init>()>","<android.app.Notification$BubbleMetadata: void <init>()>"
"<java.lang.SecurityManager: void checkListen(int)>","<java.lang.SecurityManager: void checkListen(int)>"
"<java.text.AttributedCharacterIterator$Attribute: void <clinit>()>","<java.text.AttributedCharacterIterator$Attribute: void <clinit>()>"
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<java.time.chrono.IsoChronology: java.time.Period period(int,int,int)>","<java.time.chrono.IsoChronology: java.time.Period period(int,int,int)>"
"<java.security.NoSuchAlgorithmException: void <init>()>","<java.security.NoSuchAlgorithmException: void <init>()>"
"<androidx.window.sidecar.SidecarDisplayFeature: int getType()>","<androidx.window.sidecar.SidecarDisplayFeature: int getType()>"
"<java.io.Closeable: void close()>","<java.io.Closeable: void close()>"
"<android.print.PrintAttributes$MediaSize: int hashCode()>","<android.print.PrintAttributes$MediaSize: int hashCode()>"
"<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>","<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>"
"<android.content.Context: void sendStickyBroadcast(android.content.Intent)>","<android.content.Context: void sendStickyBroadcast(android.content.Intent)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addAction(android.app.Notification$Action)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender addAction(android.app.Notification$Action)>"
"<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>","<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)>"
"<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>","<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndIncrement(java.lang.Object)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int getAndIncrement(java.lang.Object)>"
"<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,float,int)>","<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,float,int)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
"<android.text.style.LocaleSpan: void <init>(android.os.Parcel)>","<android.text.style.LocaleSpan: void <init>(android.os.Parcel)>"
"<java.util.Arrays: int compare(double[],int,int,double[],int,int)>","<java.util.Arrays: int compare(double[],int,int,double[],int,int)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>","<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>"
"<java.util.ArrayList: boolean removeAll(java.util.Collection)>","<java.util.ArrayList: boolean removeAll(java.util.Collection)>"
"<android.widget.Toolbar: void setOnMenuItemClickListener(android.widget.Toolbar$OnMenuItemClickListener)>","<android.widget.Toolbar: void setOnMenuItemClickListener(android.widget.Toolbar$OnMenuItemClickListener)>"
"<java.io.InputStream: int read()>","<java.io.InputStream: int read()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long incrementAndGet(java.lang.Object)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>"
"<java.lang.Math: double floor(double)>","<java.lang.Math: double floor(double)>"
"<java.io.ObjectOutputStream: void reset()>","<java.io.ObjectOutputStream: void reset()>"
"<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()>","<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()>"
"<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,int)>","<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,int)>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()>","<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()>"
"<android.view.animation.Animation: android.view.animation.Animation clone()>","<android.view.animation.Animation: android.view.animation.Animation clone()>"
"<android.graphics.drawable.Icon: java.lang.String getResPackage()>","<android.graphics.drawable.Icon: java.lang.String getResPackage()>"
"<android.graphics.Insets: android.graphics.Insets add(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets add(android.graphics.Insets,android.graphics.Insets)>"
"<androidx.window.embedding.d: boolean test(java.lang.Object)>","<androidx.window.embedding.d: boolean test(java.lang.Object)>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setMaxImages(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setMaxImages(int)>"
"<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>","<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>"
"<android.os.Debug: int getGlobalFreedSize()>","<android.os.Debug: int getGlobalFreedSize()>"
"<android.util.SizeF: void <init>(float,float)>","<android.util.SizeF: void <init>(float,float)>"
"<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>","<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void detachViewFromParent(int)>","<android.view.ViewGroup: void detachViewFromParent(int)>"
"<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)>","<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.PriorityQueue: java.util.Comparator comparator()>","<java.util.PriorityQueue: java.util.Comparator comparator()>"
"<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>","<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>"
"<java.time.LocalTime: java.time.LocalTime ofSecondOfDay(long)>","<java.time.LocalTime: java.time.LocalTime ofSecondOfDay(long)>"
"<java.lang.Math: float max(float,float)>","<java.lang.Math: float max(float,float)>"
"<java.math.BigInteger: short shortValueExact()>","<java.math.BigInteger: short shortValueExact()>"
"<android.widget.Toolbar: void setContentInsetsRelative(int,int)>","<android.widget.Toolbar: void setContentInsetsRelative(int,int)>"
"<c0.f: void <init>(java.lang.Class[])>","<c0.f: void <init>(java.lang.Class[])>"
"<android.view.View: int getScrollBarStyle()>","<android.view.View: int getScrollBarStyle()>"
"<java.util.Arrays: int mismatch(char[],int,int,char[],int,int)>","<java.util.Arrays: int mismatch(char[],int,int,char[],int,int)>"
"<java.lang.Class: java.lang.Object newInstance()>","<java.lang.Class: java.lang.Object newInstance()>"
"<android.app.Activity: void onStateNotSaved()>","<android.app.Activity: void onStateNotSaved()>"
"<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>","<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>"
"<io.flutter.plugin.platform.o: void <init>(io.flutter.plugin.platform.q$a,x.k$d)>","<io.flutter.plugin.platform.o: void <init>(io.flutter.plugin.platform.q$a,x.k$d)>"
"<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.net.NetworkInterface: java.lang.String getDisplayName()>","<java.net.NetworkInterface: java.lang.String getDisplayName()>"
"<android.app.PendingIntent: boolean isBroadcast()>","<android.app.PendingIntent: boolean isBroadcast()>"
"<java.lang.StringBuilder: void <init>(java.lang.String)>","<java.lang.StringBuilder: void <init>(java.lang.String)>"
"<android.widget.TextView: int getLineBreakWordStyle()>","<android.widget.TextView: int getLineBreakWordStyle()>"
"<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>","<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>"
"<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>","<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>"
"<java.lang.Object: int hashCode()>","<java.lang.Object: int hashCode()>"
"<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>","<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>"
"<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>","<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>"
"<android.view.ViewStructure: void setMaxTextEms(int)>","<android.view.ViewStructure: void setMaxTextEms(int)>"
"<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)>","<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)>"
"<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<java.lang.String: int codePointAt(int)>","<java.lang.String: int codePointAt(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <clinit>()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <clinit>()>"
"<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>","<java.io.ObjectInputStream: java.lang.Object resolveObject(java.lang.Object)>"
"<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addRemoteInput(android.app.RemoteInput)>","<android.app.Notification$Action$Builder: android.app.Notification$Action$Builder addRemoteInput(android.app.RemoteInput)>"
"<android.media.session.PlaybackState$Builder: void <init>()>","<android.media.session.PlaybackState$Builder: void <init>()>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean get()>","<java.util.concurrent.atomic.AtomicBoolean: boolean get()>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>"
"<android.os.Parcel: void readIntArray(int[])>","<android.os.Parcel: void readIntArray(int[])>"
"<android.widget.Scroller: int timePassed()>","<android.widget.Scroller: int timePassed()>"
"<android.os.VibrationAttributes$Builder: void <init>(android.os.VibrationAttributes)>","<android.os.VibrationAttributes$Builder: void <init>(android.os.VibrationAttributes)>"
"<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>","<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>"
"<javax.security.auth.x500.X500Principal: void <init>(java.io.InputStream)>","<javax.security.auth.x500.X500Principal: void <init>(java.io.InputStream)>"
"<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>","<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>"
"<java.lang.Integer: int max(int,int)>","<java.lang.Integer: int max(int,int)>"
"<io.flutter.plugin.platform.p: void <init>(io.flutter.plugin.platform.q$a,io.flutter.plugin.platform.r,float,x.k$b)>","<io.flutter.plugin.platform.p: void <init>(io.flutter.plugin.platform.q$a,io.flutter.plugin.platform.r,float,x.k$b)>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.graphics.RectF: void roundOut(android.graphics.Rect)>","<android.graphics.RectF: void roundOut(android.graphics.Rect)>"
"<java.io.DataInput: char readChar()>","<java.io.DataInput: char readChar()>"
"<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>","<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>"
"<android.os.MessageQueue: boolean isIdle()>","<android.os.MessageQueue: boolean isIdle()>"
"<android.view.View: boolean post(java.lang.Runnable)>","<android.view.View: boolean post(java.lang.Runnable)>"
"<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()>","<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setTypeConfig(android.view.textclassifier.TextClassifier$EntityConfig)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setTypeConfig(android.view.textclassifier.TextClassifier$EntityConfig)>"
"<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>","<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>"
"<java.util.concurrent.atomic.AtomicLong: long getAndUpdate(java.util.function.LongUnaryOperator)>","<java.util.concurrent.atomic.AtomicLong: long getAndUpdate(java.util.function.LongUnaryOperator)>"
"<android.content.ContentValues: void <init>(int)>","<android.content.ContentValues: void <init>(int)>"
"<java.lang.Byte: short shortValue()>","<java.lang.Byte: short shortValue()>"
"<android.view.textclassifier.TextSelection$Request: boolean shouldIncludeTextClassification()>","<android.view.textclassifier.TextSelection$Request: boolean shouldIncludeTextClassification()>"
"<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.view.View: float getTransitionAlpha()>","<android.view.View: float getTransitionAlpha()>"
"<java.nio.Buffer: void <init>()>","<java.nio.Buffer: void <init>()>"
"<android.view.WindowInsetsAnimationController: void finish(boolean)>","<android.view.WindowInsetsAnimationController: void finish(boolean)>"
"<android.app.Fragment: void onActivityCreated(android.os.Bundle)>","<android.app.Fragment: void onActivityCreated(android.os.Bundle)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>"
"<android.view.WindowInsets: void <clinit>()>","<android.view.WindowInsets: void <clinit>()>"
"<android.view.View: java.util.List getPreferKeepClearRects()>","<android.view.View: java.util.List getPreferKeepClearRects()>"
"<io.flutter.plugins.webviewflutter.y0: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.y0: void a(java.lang.Object)>"
"<java.nio.ShortBuffer: boolean equals(java.lang.Object)>","<java.nio.ShortBuffer: boolean equals(java.lang.Object)>"
"<java.lang.Enum: void <init>(java.lang.String,int)>","<java.lang.Enum: void <init>(java.lang.String,int)>"
"<android.view.InputDevice: void <init>()>","<android.view.InputDevice: void <init>()>"
"<java.util.stream.Stream: java.util.stream.Stream sorted()>","<java.util.stream.Stream: java.util.stream.Stream sorted()>"
"<android.database.DataSetObserver: void onInvalidated()>","<android.database.DataSetObserver: void onInvalidated()>"
"<android.app.Person: void writeToParcel(android.os.Parcel,int)>","<android.app.Person: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ActionMode: void invalidate()>","<android.view.ActionMode: void invalidate()>"
"<io.flutter.plugins.webviewflutter.y1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.y1: void a(java.lang.Object,y.a$e)>"
"<android.text.SpannableString: int getSpanStart(java.lang.Object)>","<android.text.SpannableString: int getSpanStart(java.lang.Object)>"
"<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>","<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>","<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>"
"<java.text.CharacterIterator: int getIndex()>","<java.text.CharacterIterator: int getIndex()>"
"<android.widget.RemoteViews$RemoteCollectionItems: void writeToParcel(android.os.Parcel,int)>","<android.widget.RemoteViews$RemoteCollectionItems: void writeToParcel(android.os.Parcel,int)>"
"<android.view.textservice.SpellCheckerInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.view.textservice.SpellCheckerInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<java.util.Calendar: void setFirstDayOfWeek(int)>","<java.util.Calendar: void setFirstDayOfWeek(int)>"
"<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>","<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>"
"<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()>","<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()>"
"<android.view.ViewDebug$ExportedProperty: boolean resolveId()>","<android.view.ViewDebug$ExportedProperty: boolean resolveId()>"
"<android.view.Window: android.view.View getDecorView()>","<android.view.Window: android.view.View getDecorView()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>"
"<java.lang.Integer: int signum(int)>","<java.lang.Integer: int signum(int)>"
"<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>","<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>"
"<android.os.VibratorManager: android.os.Vibrator getDefaultVibrator()>","<android.os.VibratorManager: android.os.Vibrator getDefaultVibrator()>"
"<android.hardware.Sensor: java.lang.String getStringType()>","<android.hardware.Sensor: java.lang.String getStringType()>"
"<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()>","<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()>"
"<android.app.FragmentManager: void invalidateOptionsMenu()>","<android.app.FragmentManager: void invalidateOptionsMenu()>"
"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>","<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>"
"<java.lang.ThreadGroup: int activeGroupCount()>","<java.lang.ThreadGroup: int activeGroupCount()>"
"<android.widget.TextView$BufferType: android.widget.TextView$BufferType valueOf(java.lang.String)>","<android.widget.TextView$BufferType: android.widget.TextView$BufferType valueOf(java.lang.String)>"
"<android.os.Bundle: byte[] getByteArray(java.lang.String)>","<android.os.Bundle: byte[] getByteArray(java.lang.String)>"
"<android.os.Looper: void prepareMainLooper()>","<android.os.Looper: void prepareMainLooper()>"
"<android.view.TextureView: void setLayerPaint(android.graphics.Paint)>","<android.view.TextureView: void setLayerPaint(android.graphics.Paint)>"
"<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>","<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>"
"<android.content.Context: java.io.File[] getObbDirs()>","<android.content.Context: java.io.File[] getObbDirs()>"
"<android.content.IntentSender$OnFinished: void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)>","<android.content.IntentSender$OnFinished: void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)>"
"<java.nio.DoubleBuffer: java.nio.ByteOrder order()>","<java.nio.DoubleBuffer: java.nio.ByteOrder order()>"
"<java.util.Hashtable: boolean contains(java.lang.Object)>","<java.util.Hashtable: boolean contains(java.lang.Object)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>"
"<java.time.Duration: long toSeconds()>","<java.time.Duration: long toSeconds()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.app.FragmentManager,android.app.Fragment)>"
"<java.net.URLStreamHandler: int hashCode(java.net.URL)>","<java.net.URLStreamHandler: int hashCode(java.net.URL)>"
"<android.widget.AdapterView: android.view.View getSelectedView()>","<android.widget.AdapterView: android.view.View getSelectedView()>"
"<java.net.Proxy$Type: java.net.Proxy$Type valueOf(java.lang.String)>","<java.net.Proxy$Type: java.net.Proxy$Type valueOf(java.lang.String)>"
"<android.animation.LayoutTransition: boolean isRunning()>","<android.animation.LayoutTransition: boolean isRunning()>"
"<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>","<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>"
"<android.graphics.text.LineBreakConfig$Builder: void <init>()>","<android.graphics.text.LineBreakConfig$Builder: void <init>()>"
"<android.graphics.Outline: float getRadius()>","<android.graphics.Outline: float getRadius()>"
"<java.net.ServerSocket: void bind(java.net.SocketAddress)>","<java.net.ServerSocket: void bind(java.net.SocketAddress)>"
"<java.time.DayOfWeek: java.time.DayOfWeek[] values()>","<java.time.DayOfWeek: java.time.DayOfWeek[] values()>"
"<java.util.Properties: void list(java.io.PrintStream)>","<java.util.Properties: void list(java.io.PrintStream)>"
"<android.graphics.ColorSpace$Rgb: float[] getWhitePoint()>","<android.graphics.ColorSpace$Rgb: float[] getWhitePoint()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification build()>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification build()>"
"<android.view.textclassifier.TextClassification$Builder: void <init>()>","<android.view.textclassifier.TextClassification$Builder: void <init>()>"
"<java.time.chrono.IsoChronology: java.time.chrono.Era eraOf(int)>","<java.time.chrono.IsoChronology: java.time.chrono.Era eraOf(int)>"
"<java.util.Optional: java.util.stream.Stream stream()>","<java.util.Optional: java.util.stream.Stream stream()>"
"<io.flutter.plugins.webviewflutter.f0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.f0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.view.Window: void makeActive()>","<android.view.Window: void makeActive()>"
"<java.lang.Integer: float floatValue()>","<java.lang.Integer: float floatValue()>"
"<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>"
"<android.os.ParcelFileDescriptor: int getFd()>","<android.os.ParcelFileDescriptor: int getFd()>"
"<android.widget.PopupWindow: void setAnimationStyle(int)>","<android.widget.PopupWindow: void setAnimationStyle(int)>"
"<org.json.JSONArray: boolean optBoolean(int)>","<org.json.JSONArray: boolean optBoolean(int)>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript of(int)>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript of(int)>"
"<java.util.AbstractList: void add(int,java.lang.Object)>","<java.util.AbstractList: void add(int,java.lang.Object)>"
"<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,java.lang.String)>"
"<android.view.InputDevice$MotionRange: int getAxis()>","<android.view.InputDevice$MotionRange: int getAxis()>"
"<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<java.lang.Float: long longValue()>","<java.lang.Float: long longValue()>"
"<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>","<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>"
"<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>","<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>"
"<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>","<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setSortKey(java.lang.String)>","<android.app.Notification$Builder: android.app.Notification$Builder setSortKey(java.lang.String)>"
"<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>","<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>"
"<android.view.animation.Animation: int getRepeatMode()>","<android.view.animation.Animation: int getRepeatMode()>"
"<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>","<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>"
"<android.os.PersistableBundle: java.lang.String toString()>","<android.os.PersistableBundle: java.lang.String toString()>"
"<java.net.InetAddress: boolean isMCOrgLocal()>","<java.net.InetAddress: boolean isMCOrgLocal()>"
"<android.text.format.DateFormat: void <init>()>","<android.text.format.DateFormat: void <init>()>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>"
"<java.lang.Long: int hashCode(long)>","<java.lang.Long: int hashCode(long)>"
"<android.view.textclassifier.SelectionEvent: void <init>()>","<android.view.textclassifier.SelectionEvent: void <init>()>"
"<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)>","<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>"
"<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>","<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>"
"<android.view.textclassifier.TextClassification: int getEntityCount()>","<android.view.textclassifier.TextClassification: int getEntityCount()>"
"<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.view.View: int getAccessibilityLiveRegion()>","<android.view.View: int getAccessibilityLiveRegion()>"
"<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>","<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>"
"<java.util.OptionalInt: int getAsInt()>","<java.util.OptionalInt: int getAsInt()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>"
"<java.lang.String: void <init>(java.lang.StringBuffer)>","<java.lang.String: void <init>(java.lang.StringBuffer)>"
"<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>","<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>"
"<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>"
"<android.view.WindowId$FocusObserver: void <init>()>","<android.view.WindowId$FocusObserver: void <init>()>"
"<android.content.IntentFilter: void addDataType(java.lang.String)>","<android.content.IntentFilter: void addDataType(java.lang.String)>"
"<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>","<android.widget.PopupWindow: int getMaxAvailableHeight(android.view.View,int)>"
"<android.view.ViewGroup: void endViewTransition(android.view.View)>","<android.view.ViewGroup: void endViewTransition(android.view.View)>"
"<android.app.Activity: android.content.Intent getParentActivityIntent()>","<android.app.Activity: android.content.Intent getParentActivityIntent()>"
"<java.lang.Thread: java.lang.String toString()>","<java.lang.Thread: java.lang.String toString()>"
"<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>"
"<android.content.ContextWrapper: int[] checkUriPermissions(java.util.List,int,int,int)>","<android.content.ContextWrapper: int[] checkUriPermissions(java.util.List,int,int,int)>"
"<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>","<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>"
"<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>","<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>"
"<android.app.ActionBar: void removeTab(android.app.ActionBar$Tab)>","<android.app.ActionBar: void removeTab(android.app.ActionBar$Tab)>"
"<android.os.MemoryFile: java.io.OutputStream getOutputStream()>","<android.os.MemoryFile: java.io.OutputStream getOutputStream()>"
"<io.flutter.plugins.webviewflutter.g3: void <init>()>","<io.flutter.plugins.webviewflutter.g3: void <init>()>"
"<java.time.temporal.Temporal: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<java.util.Arrays: byte[] copyOfRange(byte[],int,int)>","<java.util.Arrays: byte[] copyOfRange(byte[],int,int)>"
"<android.widget.AbsListView: void setTranscriptMode(int)>","<android.widget.AbsListView: void setTranscriptMode(int)>"
"<java.io.ObjectStreamField: int compareTo(java.lang.Object)>","<java.io.ObjectStreamField: int compareTo(java.lang.Object)>"
"<java.time.Month: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.Month: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<io.flutter.embedding.android.j: void <init>()>","<io.flutter.embedding.android.j: void <init>()>"
"<android.util.Rational: boolean equals(java.lang.Object)>","<android.util.Rational: boolean equals(java.lang.Object)>"
"<java.util.stream.Stream: java.util.stream.LongStream flatMapToLong(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.LongStream flatMapToLong(java.util.function.Function)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>"
"<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()>","<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()>"
"<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>","<java.util.concurrent.ThreadPoolExecutor: boolean remove(java.lang.Runnable)>"
"<android.app.Dialog: boolean onSearchRequested()>","<android.app.Dialog: boolean onSearchRequested()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>"
"<android.widget.ListPopupWindow: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.ListPopupWindow: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.util.IntSummaryStatistics: void accept(int)>","<java.util.IntSummaryStatistics: void accept(int)>"
"<java.lang.Runtime: void traceMethodCalls(boolean)>","<java.lang.Runtime: void traceMethodCalls(boolean)>"
"<android.graphics.Paint: float descent()>","<android.graphics.Paint: float descent()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>"
"<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setDenominator(java.lang.String)>","<android.text.style.TtsSpan$MeasureBuilder: android.text.style.TtsSpan$MeasureBuilder setDenominator(java.lang.String)>"
"<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[])>","<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[])>"
"<android.view.View: void postInvalidate(int,int,int,int)>","<android.view.View: void postInvalidate(int,int,int,int)>"
"<android.view.WindowInsets: boolean hasSystemWindowInsets()>","<android.view.WindowInsets: boolean hasSystemWindowInsets()>"
"<android.widget.TextView: void append(java.lang.CharSequence,int,int)>","<android.widget.TextView: void append(java.lang.CharSequence,int,int)>"
"<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>","<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.util.AndroidException: void <init>()>","<android.util.AndroidException: void <init>()>"
"<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>","<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>"
"<androidx.window.embedding.c: void <init>(androidx.window.embedding.EmbeddingAdapter,java.util.Set)>","<androidx.window.embedding.c: void <init>(androidx.window.embedding.EmbeddingAdapter,java.util.Set)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.RecordingCanvas: void drawPoints(float[],int,int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPoints(float[],int,int,android.graphics.Paint)>"
"<android.widget.TextView: void setCompoundDrawableTintBlendMode(android.graphics.BlendMode)>","<android.widget.TextView: void setCompoundDrawableTintBlendMode(android.graphics.BlendMode)>"
"<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>","<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>"
"<java.time.Duration: long toHours()>","<java.time.Duration: long toHours()>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>"
"<java.io.ObjectInput: int available()>","<java.io.ObjectInput: int available()>"
"<java.net.SocketException: void <init>()>","<java.net.SocketException: void <init>()>"
"<android.content.pm.InstallSourceInfo: void <clinit>()>","<android.content.pm.InstallSourceInfo: void <clinit>()>"
"<android.app.Presentation: android.content.res.Resources getResources()>","<android.app.Presentation: android.content.res.Resources getResources()>"
"<android.view.ViewParent: boolean isLayoutDirectionResolved()>","<android.view.ViewParent: boolean isLayoutDirectionResolved()>"
"<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>","<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>"
"<android.text.ClipboardManager: void <init>()>","<android.text.ClipboardManager: void <init>()>"
"<android.animation.Keyframe: java.lang.Object clone()>","<android.animation.Keyframe: java.lang.Object clone()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>"
"<android.os.Debug: void resetGlobalClassInitCount()>","<android.os.Debug: void resetGlobalClassInitCount()>"
"<java.lang.ClassLoader: boolean registerAsParallelCapable()>","<java.lang.ClassLoader: boolean registerAsParallelCapable()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>"
"<android.view.WindowManager: android.view.Display getDefaultDisplay()>","<android.view.WindowManager: android.view.Display getDefaultDisplay()>"
"<java.util.Optional: java.util.Optional of(java.lang.Object)>","<java.util.Optional: java.util.Optional of(java.lang.Object)>"
"<android.app.ActivityManager: boolean isRunningInUserTestHarness()>","<android.app.ActivityManager: boolean isRunningInUserTestHarness()>"
"<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>","<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>"
"<java.lang.reflect.Array: int getInt(java.lang.Object,int)>","<java.lang.reflect.Array: int getInt(java.lang.Object,int)>"
"<android.print.PrintAttributes$MediaSize: void <clinit>()>","<android.print.PrintAttributes$MediaSize: void <clinit>()>"
"<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>","<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>"
"<java.nio.LongBuffer: java.nio.LongBuffer asReadOnlyBuffer()>","<java.nio.LongBuffer: java.nio.LongBuffer asReadOnlyBuffer()>"
"<android.net.Uri: java.lang.String getEncodedAuthority()>","<android.net.Uri: java.lang.String getEncodedAuthority()>"
"<android.os.Bundle: android.util.Size getSize(java.lang.String)>","<android.os.Bundle: android.util.Size getSize(java.lang.String)>"
"<java.util.Date: boolean after(java.util.Date)>","<java.util.Date: boolean after(java.util.Date)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>"
"<android.print.PageRange: int hashCode()>","<android.print.PageRange: int hashCode()>"
"<android.content.ContextWrapper: android.content.Context getBaseContext()>","<android.content.ContextWrapper: android.content.Context getBaseContext()>"
"<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>","<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>"
"<android.view.ActionProvider: boolean isVisible()>","<android.view.ActionProvider: boolean isVisible()>"
"<android.webkit.WebView: java.lang.String getUrl()>","<android.webkit.WebView: java.lang.String getUrl()>"
"<android.app.Dialog: android.view.View requireViewById(int)>","<android.app.Dialog: android.view.View requireViewById(int)>"
"<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>","<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>"
"<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>"
"<android.graphics.Insets: int hashCode()>","<android.graphics.Insets: int hashCode()>"
"<android.graphics.Bitmap: int getWidth()>","<android.graphics.Bitmap: int getWidth()>"
"<android.content.IntentFilter: int countDataTypes()>","<android.content.IntentFilter: int countDataTypes()>"
"<java.time.zone.ZoneOffsetTransition: boolean isGap()>","<java.time.zone.ZoneOffsetTransition: boolean isGap()>"
"<java.time.LocalTime: int getNano()>","<java.time.LocalTime: int getNano()>"
"<java.util.UUID: java.lang.String toString()>","<java.util.UUID: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>"
"<java.util.OptionalInt: java.util.OptionalInt of(int)>","<java.util.OptionalInt: java.util.OptionalInt of(int)>"
"<java.util.Arrays: int mismatch(byte[],int,int,byte[],int,int)>","<java.util.Arrays: int mismatch(byte[],int,int,byte[],int,int)>"
"<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)>","<android.webkit.WebView: boolean showFindDialog(java.lang.String,boolean)>"
"<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>","<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>"
"<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>","<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>"
"<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>","<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>"
"<java.time.chrono.Chronology: java.util.List eras()>","<java.time.chrono.Chronology: java.util.List eras()>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void <clinit>()>","<android.app.ActivityManager$ProcessErrorStateInfo: void <clinit>()>"
"<java.time.ZonedDateTime: int getMinute()>","<java.time.ZonedDateTime: int getMinute()>"
"<java.util.Spliterator$OfLong: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfLong: java.util.Spliterator trySplit()>"
"<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)>","<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)>"
"<android.content.ContextWrapper: android.os.Looper getMainLooper()>","<android.content.ContextWrapper: android.os.Looper getMainLooper()>"
"<java.util.concurrent.atomic.AtomicLong: void setOpaque(long)>","<java.util.concurrent.atomic.AtomicLong: void setOpaque(long)>"
"<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>","<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>"
"<android.util.SparseArray: void delete(int)>","<android.util.SparseArray: void delete(int)>"
"<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>","<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>"
"<android.content.IntentSender: java.lang.String getCreatorPackage()>","<android.content.IntentSender: java.lang.String getCreatorPackage()>"
"<java.util.Collection: boolean isEmpty()>","<java.util.Collection: boolean isEmpty()>"
"<io.flutter.plugins.webviewflutter.v: void <init>(io.flutter.plugins.webviewflutter.k$j$a)>","<io.flutter.plugins.webviewflutter.v: void <init>(io.flutter.plugins.webviewflutter.k$j$a)>"
"<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>","<java.security.cert.CertificateParsingException: void <init>(java.lang.String)>"
"<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>"
"<java.util.PrimitiveIterator$OfInt: java.lang.Object next()>","<java.util.PrimitiveIterator$OfInt: java.lang.Object next()>"
"<java.lang.ref.Reference: void clear()>","<java.lang.ref.Reference: void clear()>"
"<java.lang.CharSequence: java.lang.String toString()>","<java.lang.CharSequence: java.lang.String toString()>"
"<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>","<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>"
"<java.nio.channels.SocketChannel: java.net.SocketAddress getRemoteAddress()>","<java.nio.channels.SocketChannel: java.net.SocketAddress getRemoteAddress()>"
"<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>","<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>"
"<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>","<android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)>"
"<android.util.LongSparseArray: long keyAt(int)>","<android.util.LongSparseArray: long keyAt(int)>"
"<android.content.Context: int checkSelfPermission(java.lang.String)>","<android.content.Context: int checkSelfPermission(java.lang.String)>"
"<android.app.FragmentTransaction: boolean isAddToBackStackAllowed()>","<android.app.FragmentTransaction: boolean isAddToBackStackAllowed()>"
"<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>","<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>"
"<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)>"
"<android.view.WindowInsetsAnimation: long getDurationMillis()>","<android.view.WindowInsetsAnimation: long getDurationMillis()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setSuppressableBubble(boolean)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setSuppressableBubble(boolean)>"
"<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>","<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>","<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int)>"
"<android.view.textclassifier.ConversationActions$Request: int describeContents()>","<android.view.textclassifier.ConversationActions$Request: int describeContents()>"
"<android.view.View: int getHeight()>","<android.view.View: int getHeight()>"
"<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>","<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>"
"<android.app.Fragment: int getTargetRequestCode()>","<android.app.Fragment: int getTargetRequestCode()>"
"<android.view.WindowInsetsAnimation$Callback: void <init>(int)>","<android.view.WindowInsetsAnimation$Callback: void <init>(int)>"
"<android.view.View: android.content.Context getContext()>","<android.view.View: android.content.Context getContext()>"
"<java.lang.Short: void <init>(java.lang.String)>","<java.lang.Short: void <init>(java.lang.String)>"
"<android.app.Notification: int describeContents()>","<android.app.Notification: int describeContents()>"
"<android.view.inputmethod.EditorBoundsInfo: boolean equals(java.lang.Object)>","<android.view.inputmethod.EditorBoundsInfo: boolean equals(java.lang.Object)>"
"<android.view.View: int getPaddingLeft()>","<android.view.View: int getPaddingLeft()>"
"<android.widget.AbsListView: boolean isSelectedChildViewEnabled()>","<android.widget.AbsListView: boolean isSelectedChildViewEnabled()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>"
"<android.view.KeyEvent: char getMatch(char[])>","<android.view.KeyEvent: char getMatch(char[])>"
"<java.nio.CharBuffer: int compareTo(java.lang.Object)>","<java.nio.CharBuffer: int compareTo(java.lang.Object)>"
"<java.lang.Byte: int compare(byte,byte)>","<java.lang.Byte: int compare(byte,byte)>"
"<java.util.Set: boolean isEmpty()>","<java.util.Set: boolean isEmpty()>"
"<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>","<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>"
"<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.lang.Boolean: int hashCode()>","<java.lang.Boolean: int hashCode()>"
"<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>","<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>"
"<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<java.lang.StackTraceElement: int getLineNumber()>","<java.lang.StackTraceElement: int getLineNumber()>"
"<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>","<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>"
"<java.security.Provider: void clear()>","<java.security.Provider: void clear()>"
"<android.graphics.Paint: void <init>(int)>","<android.graphics.Paint: void <init>(int)>"
"<android.view.Window: boolean isNavigationBarContrastEnforced()>","<android.view.Window: boolean isNavigationBarContrastEnforced()>"
"<java.time.Clock: java.time.Clock withZone(java.time.ZoneId)>","<java.time.Clock: java.time.Clock withZone(java.time.ZoneId)>"
"<android.media.Rating: void writeToParcel(android.os.Parcel,int)>","<android.media.Rating: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>","<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>"
"<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline[] getFrameTimelines()>","<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline[] getFrameTimelines()>"
"<android.view.ViewGroup: void <init>(android.content.Context)>","<android.view.ViewGroup: void <init>(android.content.Context)>"
"<android.app.ActivityManager: void setVrThread(int)>","<android.app.ActivityManager: void setVrThread(int)>"
"<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>","<android.widget.PopupWindow: void showAsDropDown(android.view.View,int,int)>"
"<java.math.BigInteger: float floatValue()>","<java.math.BigInteger: float floatValue()>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int)>"
"<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>","<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>"
"<java.net.URI: java.net.URI relativize(java.net.URI)>","<java.net.URI: java.net.URI relativize(java.net.URI)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>"
"<u0.t: void run()>","<u0.t: void run()>"
"<java.nio.Buffer: java.nio.Buffer position(int)>","<java.nio.Buffer: java.nio.Buffer position(int)>"
"<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>"
"<java.nio.FloatBuffer: java.nio.Buffer clear()>","<java.nio.FloatBuffer: java.nio.Buffer clear()>"
"<android.text.SpannableStringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.view.inputmethod.InputMethodInfo: boolean suppressesSpellChecker()>","<android.view.inputmethod.InputMethodInfo: boolean suppressesSpellChecker()>"
"<android.view.DragEvent: int describeContents()>","<android.view.DragEvent: int describeContents()>"
"<java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>","<java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>"
"<java.util.ConcurrentModificationException: void <init>(java.lang.String)>","<java.util.ConcurrentModificationException: void <init>(java.lang.String)>"
"<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>","<java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>"
"<android.content.pm.PackageInstaller$SessionParams: void setMultiPackage()>","<android.content.pm.PackageInstaller$SessionParams: void setMultiPackage()>"
"<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>","<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>"
"<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>","<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>"
"<java.util.ArrayList: void <init>()>","<java.util.ArrayList: void <init>()>"
"<java.util.Arrays: void setAll(double[],java.util.function.IntToDoubleFunction)>","<java.util.Arrays: void setAll(double[],java.util.function.IntToDoubleFunction)>"
"<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>"
"<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()>","<android.view.autofill.AutofillManager: android.content.ComponentName getAutofillServiceComponentName()>"
"<android.view.View: void dispatchSetPressed(boolean)>","<android.view.View: void dispatchSetPressed(boolean)>"
"<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>","<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>"
"<android.view.inputmethod.SurroundingText: int getOffset()>","<android.view.inputmethod.SurroundingText: int getOffset()>"
"<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.res.Configuration: void <init>(android.content.res.Configuration)>","<android.content.res.Configuration: void <init>(android.content.res.Configuration)>"
"<android.app.Activity: int getTitleColor()>","<android.app.Activity: int getTitleColor()>"
"<java.util.TimeZone: boolean hasSameRules(java.util.TimeZone)>","<java.util.TimeZone: boolean hasSameRules(java.util.TimeZone)>"
"<androidx.window.embedding.g: void <init>(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)>","<androidx.window.embedding.g: void <init>(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)>"
"<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>","<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>"
"<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>","<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>"
"<android.content.pm.PackageInstaller$Session: void commit(android.content.IntentSender)>","<android.content.pm.PackageInstaller$Session: void commit(android.content.IntentSender)>"
"<android.view.View: void getLocationOnScreen(int[])>","<android.view.View: void getLocationOnScreen(int[])>"
"<android.widget.TextView: int getImeActionId()>","<android.widget.TextView: int getImeActionId()>"
"<android.graphics.Paint: boolean isAntiAlias()>","<android.graphics.Paint: boolean isAntiAlias()>"
"<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.webkit.WebView$VisualStateCallback: void <init>()>","<android.webkit.WebView$VisualStateCallback: void <init>()>"
"<java.lang.Integer: java.lang.String toHexString(int)>","<java.lang.Integer: java.lang.String toHexString(int)>"
"<android.graphics.Rect: void inset(int,int,int,int)>","<android.graphics.Rect: void inset(int,int,int,int)>"
"<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>","<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>"
"<android.view.Choreographer: void postVsyncCallback(android.view.Choreographer$VsyncCallback)>","<android.view.Choreographer: void postVsyncCallback(android.view.Choreographer$VsyncCallback)>"
"<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>","<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>"
"<java.util.concurrent.atomic.AtomicLong: long get()>","<java.util.concurrent.atomic.AtomicLong: long get()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()>","<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()>"
"<java.text.NumberFormat: int getMinimumIntegerDigits()>","<java.text.NumberFormat: int getMinimumIntegerDigits()>"
"<java.util.Random: void <init>(long)>","<java.util.Random: void <init>(long)>"
"<java.util.stream.LongStream: long reduce(long,java.util.function.LongBinaryOperator)>","<java.util.stream.LongStream: long reduce(long,java.util.function.LongBinaryOperator)>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndAccumulate(java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object getAndAccumulate(java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>"
"<java.text.ParseException: void <init>(java.lang.String,int)>","<java.text.ParseException: void <init>(java.lang.String,int)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setActionIndices(int[])>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setActionIndices(int[])>"
"<android.media.session.MediaSession: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>","<android.media.session.MediaSession: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>"
"<android.view.Window: void setRestrictedCaptionAreaListener(android.view.Window$OnRestrictedCaptionAreaChangedListener)>","<android.view.Window: void setRestrictedCaptionAreaListener(android.view.Window$OnRestrictedCaptionAreaChangedListener)>"
"<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>","<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>"
"<android.view.WindowInsets$Type: int tappableElement()>","<android.view.WindowInsets$Type: int tappableElement()>"
"<android.os.Bundle: void putChar(java.lang.String,char)>","<android.os.Bundle: void putChar(java.lang.String,char)>"
"<android.view.animation.Animation: void setShowBackdrop(boolean)>","<android.view.animation.Animation: void setShowBackdrop(boolean)>"
"<android.view.View: android.view.TouchDelegate getTouchDelegate()>","<android.view.View: android.view.TouchDelegate getTouchDelegate()>"
"<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo$Builder addAttribute(java.lang.String,java.lang.String)>","<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo$Builder addAttribute(java.lang.String,java.lang.String)>"
"<java.net.URI: java.lang.String getRawUserInfo()>","<java.net.URI: java.lang.String getRawUserInfo()>"
"<android.view.animation.Transformation: void setAlpha(float)>","<android.view.animation.Transformation: void setAlpha(float)>"
"<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>","<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>"
"<java.util.Locale: boolean hasExtensions()>","<java.util.Locale: boolean hasExtensions()>"
"<java.util.concurrent.CopyOnWriteArraySet: void clear()>","<java.util.concurrent.CopyOnWriteArraySet: void clear()>"
"<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>","<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>"
"<android.graphics.RecordingCanvas: void drawARGB(int,int,int,int)>","<android.graphics.RecordingCanvas: void drawARGB(int,int,int,int)>"
"<java.time.zone.ZoneOffsetTransition: java.time.Instant getInstant()>","<java.time.zone.ZoneOffsetTransition: java.time.Instant getInstant()>"
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>","<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>","<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>"
"<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>","<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>"
"<android.util.SparseIntArray: android.util.SparseIntArray clone()>","<android.util.SparseIntArray: android.util.SparseIntArray clone()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale build()>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale build()>"
"<android.content.ClipData: void addItem(android.content.ClipData$Item)>","<android.content.ClipData: void addItem(android.content.ClipData$Item)>"
"<java.util.Random: java.util.stream.LongStream longs(long,long,long)>","<java.util.Random: java.util.stream.LongStream longs(long,long,long)>"
"<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>","<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>"
"<android.content.Intent: java.lang.String toUri(int)>","<android.content.Intent: java.lang.String toUri(int)>"
"<android.content.pm.ApplicationInfo: boolean areAttributionsUserVisible()>","<android.content.pm.ApplicationInfo: boolean areAttributionsUserVisible()>"
"<java.time.chrono.IsoChronology: java.lang.String getId()>","<java.time.chrono.IsoChronology: java.lang.String getId()>"
"<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>","<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>"
"<java.time.format.ResolverStyle: java.time.format.ResolverStyle valueOf(java.lang.String)>","<java.time.format.ResolverStyle: java.time.format.ResolverStyle valueOf(java.lang.String)>"
"<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)>"
"<android.view.View$AccessibilityDelegate: void <init>()>","<android.view.View$AccessibilityDelegate: void <init>()>"
"<android.print.PrintDocumentInfo: void <init>()>","<android.print.PrintDocumentInfo: void <init>()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>","<android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>"
"<android.os.CancellationSignal$OnCancelListener: void onCancel()>","<android.os.CancellationSignal$OnCancelListener: void onCancel()>"
"<android.view.DisplayCutout: java.util.List getBoundingRects()>","<android.view.DisplayCutout: java.util.List getBoundingRects()>"
"<android.graphics.Outline: void setRect(int,int,int,int)>","<android.graphics.Outline: void setRect(int,int,int,int)>"
"<android.view.View: int getTop()>","<android.view.View: int getTop()>"
"<android.app.Notification: boolean getAllowSystemGeneratedContextualActions()>","<android.app.Notification: boolean getAllowSystemGeneratedContextualActions()>"
"<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>","<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>"
"<java.util.ListIterator: int previousIndex()>","<java.util.ListIterator: int previousIndex()>"
"<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>","<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>"
"<java.util.Calendar: void roll(int,boolean)>","<java.util.Calendar: void roll(int,boolean)>"
"<java.nio.channels.AsynchronousChannel: void close()>","<java.nio.channels.AsynchronousChannel: void close()>"
"<android.view.autofill.AutofillManager: boolean isFieldClassificationEnabled()>","<android.view.autofill.AutofillManager: boolean isFieldClassificationEnabled()>"
"<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>","<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>"
"<java.time.chrono.IsoEra: void <init>(java.lang.String,int)>","<java.time.chrono.IsoEra: void <init>(java.lang.String,int)>"
"<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>","<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>"
"<java.net.InetAddress: boolean isMCNodeLocal()>","<java.net.InetAddress: boolean isMCNodeLocal()>"
"<android.view.animation.Animation: void restrictDuration(long)>","<android.view.animation.Animation: void restrictDuration(long)>"
"<android.view.translation.ViewTranslationResponse: void <clinit>()>","<android.view.translation.ViewTranslationResponse: void <clinit>()>"
"<android.widget.AbsListView: boolean isInFilterMode()>","<android.widget.AbsListView: boolean isInFilterMode()>"
"<java.util.Currency: java.lang.String getCurrencyCode()>","<java.util.Currency: java.lang.String getCurrencyCode()>"
"<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>","<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>"
"<android.os.VibrationEffect: android.os.VibrationEffect createPredefined(int)>","<android.os.VibrationEffect: android.os.VibrationEffect createPredefined(int)>"
"<io.flutter.view.b: boolean test(java.lang.Object)>","<io.flutter.view.b: boolean test(java.lang.Object)>"
"<android.widget.AbsListView: void onWindowFocusChanged(boolean)>","<android.widget.AbsListView: void onWindowFocusChanged(boolean)>"
"<android.content.AttributionSource: java.lang.String toString()>","<android.content.AttributionSource: java.lang.String toString()>"
"<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>"
"<java.util.concurrent.atomic.AtomicReference: void setPlain(java.lang.Object)>","<java.util.concurrent.atomic.AtomicReference: void setPlain(java.lang.Object)>"
"<android.graphics.drawable.Drawable: int getOpacity()>","<android.graphics.drawable.Drawable: int getOpacity()>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedThreads()>","<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.Collection getQueuedThreads()>"
"<java.time.OffsetTime: java.time.OffsetTime now(java.time.ZoneId)>","<java.time.OffsetTime: java.time.OffsetTime now(java.time.ZoneId)>"
"<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>","<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>"
"<java.util.jar.Attributes: java.util.Collection values()>","<java.util.jar.Attributes: java.util.Collection values()>"
"<java.util.Arrays: java.util.stream.IntStream stream(int[])>","<java.util.Arrays: java.util.stream.IntStream stream(int[])>"
"<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>","<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>"
"<android.os.LocaleList: boolean matchesLanguageAndScript(java.util.Locale,java.util.Locale)>","<android.os.LocaleList: boolean matchesLanguageAndScript(java.util.Locale,java.util.Locale)>"
"<android.view.View: void clearViewTranslationCallback()>","<android.view.View: void clearViewTranslationCallback()>"
"<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>","<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>"
"<android.view.View: int computeHorizontalScrollOffset()>","<android.view.View: int computeHorizontalScrollOffset()>"
"<android.graphics.Color: int blue(int)>","<android.graphics.Color: int blue(int)>"
"<android.view.textclassifier.TextLinks$TextLink: java.lang.String toString()>","<android.view.textclassifier.TextLinks$TextLink: java.lang.String toString()>"
"<android.os.Looper: java.lang.String toString()>","<android.os.Looper: java.lang.String toString()>"
"<java.lang.Byte: boolean equals(java.lang.Object)>","<java.lang.Byte: boolean equals(java.lang.Object)>"
"<android.view.ViewDebug$IntToString: int 'from'()>","<android.view.ViewDebug$IntToString: int 'from'()>"
"<org.json.JSONArray: org.json.JSONArray put(int,long)>","<org.json.JSONArray: org.json.JSONArray put(int,long)>"
"<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>","<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>"
"<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>","<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>"
"<android.view.Window: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>","<android.view.Window: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View,int,android.graphics.Rect)>","<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View,int,android.graphics.Rect)>"
"<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>","<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>"
"<java.time.ZoneId: java.lang.String getId()>","<java.time.ZoneId: java.lang.String getId()>"
"<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>","<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>"
"<android.widget.RemoteViews: android.widget.RemoteViews clone()>","<android.widget.RemoteViews: android.widget.RemoteViews clone()>"
"<java.nio.channels.Selector: int select(java.util.function.Consumer)>","<java.nio.channels.Selector: int select(java.util.function.Consumer)>"
"<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setResolution(android.print.PrintAttributes$Resolution)>","<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setResolution(android.print.PrintAttributes$Resolution)>"
"<java.lang.AssertionError: void <init>(double)>","<java.lang.AssertionError: void <init>(double)>"
"<java.nio.file.Path: int getNameCount()>","<java.nio.file.Path: int getNameCount()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(java.lang.Object)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndDecrement(java.lang.Object)>"
"<android.view.Gravity: int getAbsoluteGravity(int,int)>","<android.view.Gravity: int getAbsoluteGravity(int,int)>"
"<android.widget.ImageView: boolean getBaselineAlignBottom()>","<android.widget.ImageView: boolean getBaselineAlignBottom()>"
"<java.lang.Long: long sum(long,long)>","<java.lang.Long: long sum(long,long)>"
"<android.app.Activity: void setFeatureDrawableResource(int,int)>","<android.app.Activity: void setFeatureDrawableResource(int,int)>"
"<java.lang.Class: boolean isPrimitive()>","<java.lang.Class: boolean isPrimitive()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<java.io.FileOutputStream: void finalize()>","<java.io.FileOutputStream: void finalize()>"
"<java.net.SocketImpl: int getPort()>","<java.net.SocketImpl: int getPort()>"
"<android.view.Menu: android.view.MenuItem add(int)>","<android.view.Menu: android.view.MenuItem add(int)>"
"<android.view.View: boolean isFocusable()>","<android.view.View: boolean isFocusable()>"
"<android.app.Activity: android.net.Uri onProvideReferrer()>","<android.app.Activity: android.net.Uri onProvideReferrer()>"
"<android.content.ContentProvider: android.content.ContentProvider$CallingIdentity clearCallingIdentity()>","<android.content.ContentProvider: android.content.ContentProvider$CallingIdentity clearCallingIdentity()>"
"<android.content.pm.VersionedPackage: long getLongVersionCode()>","<android.content.pm.VersionedPackage: long getLongVersionCode()>"
"<android.view.textservice.TextInfo: int getCookie()>","<android.view.textservice.TextInfo: int getCookie()>"
"<android.view.MenuItem: boolean expandActionView()>","<android.view.MenuItem: boolean expandActionView()>"
"<android.graphics.Matrix: void setSinCos(float,float)>","<android.graphics.Matrix: void setSinCos(float,float)>"
"<java.io.ObjectInputValidation: void validateObject()>","<java.io.ObjectInputValidation: void validateObject()>"
"<java.util.Spliterator: boolean hasCharacteristics(int)>","<java.util.Spliterator: boolean hasCharacteristics(int)>"
"<java.util.concurrent.locks.LockSupport: void parkUntil(java.lang.Object,long)>","<java.util.concurrent.locks.LockSupport: void parkUntil(java.lang.Object,long)>"
"<android.content.res.loader.ResourcesLoader: void setProviders(java.util.List)>","<android.content.res.loader.ResourcesLoader: void setProviders(java.util.List)>"
"<android.content.SharedPreferences: java.util.Map getAll()>","<android.content.SharedPreferences: java.util.Map getAll()>"
"<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()>","<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()>"
"<android.view.View: int getScrollBarSize()>","<android.view.View: int getScrollBarSize()>"
"<java.util.function.BiConsumer: java.util.function.BiConsumer andThen(java.util.function.BiConsumer)>","<java.util.function.BiConsumer: java.util.function.BiConsumer andThen(java.util.function.BiConsumer)>"
"<android.widget.AbsListView: int getRightPaddingOffset()>","<android.widget.AbsListView: int getRightPaddingOffset()>"
"<java.util.concurrent.locks.ReentrantLock: void <init>()>","<java.util.concurrent.locks.ReentrantLock: void <init>()>"
"<java.lang.'annotation'.ElementType: void <init>(java.lang.String,int)>","<java.lang.'annotation'.ElementType: void <init>(java.lang.String,int)>"
"<java.lang.Math: double rint(double)>","<java.lang.Math: double rint(double)>"
"<java.security.Provider: java.lang.String toString()>","<java.security.Provider: java.lang.String toString()>"
"<android.app.Notification$CarExtender: android.app.Notification$CarExtender setLargeIcon(android.graphics.Bitmap)>","<android.app.Notification$CarExtender: android.app.Notification$CarExtender setLargeIcon(android.graphics.Bitmap)>"
"<android.graphics.drawable.Icon: java.lang.String toString()>","<android.graphics.drawable.Icon: java.lang.String toString()>"
"<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>","<android.webkit.WebView: android.net.http.SslCertificate getCertificate()>"
"<java.lang.Class: java.lang.String getCanonicalName()>","<java.lang.Class: java.lang.String getCanonicalName()>"
"<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader,java.lang.Class,java.lang.Class)>","<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader,java.lang.Class,java.lang.Class)>"
"<java.security.BasicPermission: boolean implies(java.security.Permission)>","<java.security.BasicPermission: boolean implies(java.security.Permission)>"
"<java.security.Provider: java.util.Enumeration keys()>","<java.security.Provider: java.util.Enumeration keys()>"
"<java.util.Arrays: int compare(long[],long[])>","<java.util.Arrays: int compare(long[],long[])>"
"<java.lang.Math: int subtractExact(int,int)>","<java.lang.Math: int subtractExact(int,int)>"
"<android.text.DynamicLayout: int getEllipsizedWidth()>","<android.text.DynamicLayout: int getEllipsizedWidth()>"
"<java.nio.file.AccessMode: void <init>(java.lang.String,int)>","<java.nio.file.AccessMode: void <init>(java.lang.String,int)>"
"<java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.text.DynamicLayout: int getLineCount()>","<android.text.DynamicLayout: int getLineCount()>"
"<android.view.View: void setContextClickable(boolean)>","<android.view.View: void setContextClickable(boolean)>"
"<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>","<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>"
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Dialog: android.view.Window getWindow()>","<android.app.Dialog: android.view.Window getWindow()>"
"<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>","<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerAttributionTag()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerAttributionTag()>"
"<android.graphics.Color: float green(long)>","<android.graphics.Color: float green(long)>"
"<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>","<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>"
"<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)>","<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)>"
"<java.nio.channels.SeekableByteChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.SeekableByteChannel: int write(java.nio.ByteBuffer)>"
"<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.String toString()>","<java.util.concurrent.LinkedBlockingQueue: java.lang.String toString()>"
"<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>","<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>"
"<android.content.ContentValues: java.util.Set keySet()>","<android.content.ContentValues: java.util.Set keySet()>"
"<java.lang.reflect.Parameter: java.lang.String getName()>","<java.lang.reflect.Parameter: java.lang.String getName()>"
"<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>","<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>"
"<java.util.NavigableSet: java.lang.Object higher(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object higher(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int,float,float,float)>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int,float,float,float)>"
"<android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>","<android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>"
"<android.content.LocusId: void writeToParcel(android.os.Parcel,int)>","<android.content.LocusId: void writeToParcel(android.os.Parcel,int)>"
"<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>","<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>"
"<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,int)>","<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,int)>"
"<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>","<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>"
"<android.widget.ListView: boolean canAnimate()>","<android.widget.ListView: boolean canAnimate()>"
"<android.graphics.Typeface: boolean equals(java.lang.Object)>","<android.graphics.Typeface: boolean equals(java.lang.Object)>"
"<java.lang.ThreadLocal: java.lang.Object initialValue()>","<java.lang.ThreadLocal: java.lang.Object initialValue()>"
"<android.view.ViewTreeObserver$OnWindowFocusChangeListener: void onWindowFocusChanged(boolean)>","<android.view.ViewTreeObserver$OnWindowFocusChangeListener: void onWindowFocusChanged(boolean)>"
"<android.view.ViewStructure: void setMaxTextLength(int)>","<android.view.ViewStructure: void setMaxTextLength(int)>"
"<android.widget.ListView: void setSelectionAfterHeaderView()>","<android.widget.ListView: void setSelectionAfterHeaderView()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)>"
"<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ThreadPoolExecutor: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>"
"<android.view.View: android.view.ViewOverlay getOverlay()>","<android.view.View: android.view.ViewOverlay getOverlay()>"
"<java.util.concurrent.ThreadPoolExecutor: void terminated()>","<java.util.concurrent.ThreadPoolExecutor: void terminated()>"
"<android.os.Debug: boolean isDebuggerConnected()>","<android.os.Debug: boolean isDebuggerConnected()>"
"<android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>","<android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>"
"<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>","<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>"
"<java.util.WeakHashMap: boolean isEmpty()>","<java.util.WeakHashMap: boolean isEmpty()>"
"<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)>","<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)>"
"<java.util.regex.Matcher: boolean find(int)>","<java.util.regex.Matcher: boolean find(int)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintHideIcon(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintHideIcon(boolean)>"
"<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>","<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>"
"<android.text.Layout: int getParagraphLeft(int)>","<android.text.Layout: int getParagraphLeft(int)>"
"<android.view.MotionEvent: float getHistoricalY(int,int)>","<android.view.MotionEvent: float getHistoricalY(int,int)>"
"<android.view.View: void setOutlineSpotShadowColor(int)>","<android.view.View: void setOutlineSpotShadowColor(int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>"
"<android.net.Uri: java.lang.String getEncodedFragment()>","<android.net.Uri: java.lang.String getEncodedFragment()>"
"<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>","<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>"
"<android.os.Trace: void setCounter(java.lang.String,long)>","<android.os.Trace: void setCounter(java.lang.String,long)>"
"<android.os.Handler: boolean sendMessage(android.os.Message)>","<android.os.Handler: boolean sendMessage(android.os.Message)>"
"<java.net.NetworkInterface: boolean equals(java.lang.Object)>","<java.net.NetworkInterface: boolean equals(java.lang.Object)>"
"<io.flutter.plugins.webviewflutter.a1: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.a1: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<io.flutter.plugins.webviewflutter.y0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.y0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>","<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
"<java.lang.Short: int hashCode()>","<java.lang.Short: int hashCode()>"
"<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>","<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>"
"<java.lang.Long: short shortValue()>","<java.lang.Long: short shortValue()>"
"<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getEotf()>","<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getEotf()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>"
"<android.view.Window: void invalidatePanelMenu(int)>","<android.view.Window: void invalidatePanelMenu(int)>"
"<android.content.res.loader.ResourcesLoader: void removeProvider(android.content.res.loader.ResourcesProvider)>","<android.content.res.loader.ResourcesLoader: void removeProvider(android.content.res.loader.ResourcesProvider)>"
"<java.util.Calendar: java.util.Set getAvailableCalendarTypes()>","<java.util.Calendar: java.util.Set getAvailableCalendarTypes()>"
"<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"
"<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.util.ArrayDeque: java.util.Spliterator spliterator()>","<java.util.ArrayDeque: java.util.Spliterator spliterator()>"
"<java.util.OptionalDouble: double getAsDouble()>","<java.util.OptionalDouble: double getAsDouble()>"
"<java.lang.Byte: void <init>(byte)>","<java.lang.Byte: void <init>(byte)>"
"<java.time.Duration: int hashCode()>","<java.time.Duration: int hashCode()>"
"<android.widget.AbsListView: boolean isItemChecked(int)>","<android.widget.AbsListView: boolean isItemChecked(int)>"
"<android.view.View: int getTopPaddingOffset()>","<android.view.View: int getTopPaddingOffset()>"
"<android.view.Window: void setPreferMinimalPostProcessing(boolean)>","<android.view.Window: void setPreferMinimalPostProcessing(boolean)>"
"<android.view.ActionMode: java.lang.CharSequence getSubtitle()>","<android.view.ActionMode: java.lang.CharSequence getSubtitle()>"
"<android.view.WindowInsets: android.graphics.Insets getInsets(int)>","<android.view.WindowInsets: android.graphics.Insets getInsets(int)>"
"<android.media.session.MediaSession$Callback: void onPrepareFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPrepareFromSearch(java.lang.String,android.os.Bundle)>"
"<android.app.Notification$WearableExtender: void <init>()>","<android.app.Notification$WearableExtender: void <init>()>"
"<android.graphics.Paint: android.graphics.Paint$Style getStyle()>","<android.graphics.Paint: android.graphics.Paint$Style getStyle()>"
"<android.view.MotionEvent: float getHistoricalPressure(int,int)>","<android.view.MotionEvent: float getHistoricalPressure(int,int)>"
"<android.database.Cursor: boolean requery()>","<android.database.Cursor: boolean requery()>"
"<android.graphics.Region: void translate(int,int,android.graphics.Region)>","<android.graphics.Region: void translate(int,int,android.graphics.Region)>"
"<android.content.ContextWrapper: java.io.File getExternalCacheDir()>","<android.content.ContextWrapper: java.io.File getExternalCacheDir()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>"
"<java.io.IOException: void <init>()>","<java.io.IOException: void <init>()>"
"<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger min(java.math.BigInteger)>"
"<java.util.Arrays: void sort(long[])>","<java.util.Arrays: void sort(long[])>"
"<android.view.View: void getLocationInWindow(int[])>","<android.view.View: void getLocationInWindow(int[])>"
"<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>"
"<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>","<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>"
"<java.util.NavigableSet: java.lang.Object lower(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object lower(java.lang.Object)>"
"<java.time.OffsetDateTime: java.time.Month getMonth()>","<java.time.OffsetDateTime: java.time.Month getMonth()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setDisplayIntent(android.app.PendingIntent)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setDisplayIntent(android.app.PendingIntent)>"
"<android.view.View: int getDefaultSize(int,int)>","<android.view.View: int getDefaultSize(int,int)>"
"<android.view.textclassifier.SelectionEvent: java.lang.String toString()>","<android.view.textclassifier.SelectionEvent: java.lang.String toString()>"
"<android.widget.AbsListView: void setSelector(int)>","<android.widget.AbsListView: void setSelector(int)>"
"<java.util.ServiceLoader: java.lang.String toString()>","<java.util.ServiceLoader: java.lang.String toString()>"
"<android.view.textclassifier.TextLanguage$Request$Builder: void <init>(java.lang.CharSequence)>","<android.view.textclassifier.TextLanguage$Request$Builder: void <init>(java.lang.CharSequence)>"
"<android.widget.TextView: boolean onCheckIsTextEditor()>","<android.widget.TextView: boolean onCheckIsTextEditor()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.view.View: void setKeepScreenOn(boolean)>","<android.view.View: void setKeepScreenOn(boolean)>"
"<java.lang.String: java.lang.String strip()>","<java.lang.String: java.lang.String strip()>"
"<android.view.View: boolean getDefaultFocusHighlightEnabled()>","<android.view.View: boolean getDefaultFocusHighlightEnabled()>"
"<android.widget.AdapterView: java.lang.Object getSelectedItem()>","<android.widget.AdapterView: java.lang.Object getSelectedItem()>"
"<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>","<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>"
"<android.app.Notification: android.util.Pair findRemoteInputActionPair(boolean)>","<android.app.Notification: android.util.Pair findRemoteInputActionPair(boolean)>"
"<java.util.Random: float nextFloat()>","<java.util.Random: float nextFloat()>"
"<java.util.regex.MatchResult: int end(int)>","<java.util.regex.MatchResult: int end(int)>"
"<android.view.View: void setMinimumWidth(int)>","<android.view.View: void setMinimumWidth(int)>"
"<io.flutter.plugin.platform.o: void onFocusChange(android.view.View,boolean)>","<io.flutter.plugin.platform.o: void onFocusChange(android.view.View,boolean)>"
"<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>","<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>"
"<android.view.Window: android.view.WindowManager getWindowManager()>","<android.view.Window: android.view.WindowManager getWindowManager()>"
"<java.util.OptionalDouble: java.util.OptionalDouble empty()>","<java.util.OptionalDouble: java.util.OptionalDouble empty()>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromTable(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromTable(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>"
"<android.view.WindowInsetsAnimationController: android.graphics.Insets getHiddenStateInsets()>","<android.view.WindowInsetsAnimationController: android.graphics.Insets getHiddenStateInsets()>"
"<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>","<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>"
"<java.net.URL: int getDefaultPort()>","<java.net.URL: int getDefaultPort()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setOpenFlags(int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setOpenFlags(int)>"
"<java.lang.reflect.Member: int getModifiers()>","<java.lang.reflect.Member: int getModifiers()>"
"<java.nio.FloatBuffer: java.nio.Buffer mark()>","<java.nio.FloatBuffer: java.nio.Buffer mark()>"
"<android.view.inputmethod.InputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>","<android.view.inputmethod.InputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>"
"<android.view.WindowInsetsAnimation$Bounds: void <init>(android.graphics.Insets,android.graphics.Insets)>","<android.view.WindowInsetsAnimation$Bounds: void <init>(android.graphics.Insets,android.graphics.Insets)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>","<java.util.concurrent.locks.ReentrantReadWriteLock: int getWriteHoldCount()>"
"<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()>"
"<android.view.animation.Animation: void setFillBefore(boolean)>","<android.view.animation.Animation: void setFillBefore(boolean)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderView(android.view.View)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderView(android.view.View)>"
"<android.database.sqlite.SQLiteDatabase: void endTransaction()>","<android.database.sqlite.SQLiteDatabase: void endTransaction()>"
"<java.lang.reflect.Constructor: int getParameterCount()>","<java.lang.reflect.Constructor: int getParameterCount()>"
"<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>","<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>"
"<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.content.res.loader.ResourcesLoader: java.util.List getProviders()>","<android.content.res.loader.ResourcesLoader: java.util.List getProviders()>"
"<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>","<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>"
"<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>","<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>"
"<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFailed(java.lang.CharSequence)>","<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteFailed(java.lang.CharSequence)>"
"<android.text.PrecomputedText: int getParagraphStart(int)>","<android.text.PrecomputedText: int getParagraphStart(int)>"
"<java.util.OptionalDouble: void ifPresentOrElse(java.util.function.DoubleConsumer,java.lang.Runnable)>","<java.util.OptionalDouble: void ifPresentOrElse(java.util.function.DoubleConsumer,java.lang.Runnable)>"
"<java.nio.CharBuffer: java.lang.CharSequence subSequence(int,int)>","<java.nio.CharBuffer: java.lang.CharSequence subSequence(int,int)>"
"<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>","<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>"
"<java.nio.ByteBuffer: byte[] array()>","<java.nio.ByteBuffer: byte[] array()>"
"<javax.security.auth.DestroyFailedException: void <init>(java.lang.String)>","<javax.security.auth.DestroyFailedException: void <init>(java.lang.String)>"
"<android.app.ActionBar$LayoutParams: void <init>(int)>","<android.app.ActionBar$LayoutParams: void <init>(int)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>"
"<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>","<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>"
"<java.time.temporal.TemporalField: java.time.temporal.ValueRange range()>","<java.time.temporal.TemporalField: java.time.temporal.ValueRange range()>"
"<android.util.SparseArray: java.lang.Object clone()>","<android.util.SparseArray: java.lang.Object clone()>"
"<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<io.flutter.plugins.webviewflutter.n3: void a(long)>","<io.flutter.plugins.webviewflutter.n3: void a(long)>"
"<java.text.ParsePosition: void setErrorIndex(int)>","<java.text.ParsePosition: void setErrorIndex(int)>"
"<android.media.session.MediaController$TransportControls: void stop()>","<android.media.session.MediaController$TransportControls: void stop()>"
"<android.app.Activity: void setTheme(int)>","<android.app.Activity: void setTheme(int)>"
"<android.os.VibrationAttributes: int getUsageClass()>","<android.os.VibrationAttributes: int getUsageClass()>"
"<java.time.temporal.ChronoUnit: boolean isDateBased()>","<java.time.temporal.ChronoUnit: boolean isDateBased()>"
"<android.hardware.lights.LightState: int describeContents()>","<android.hardware.lights.LightState: int describeContents()>"
"<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>","<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>"
"<android.hardware.BatteryState: float getCapacity()>","<android.hardware.BatteryState: float getCapacity()>"
"<android.widget.TextView: void setLines(int)>","<android.widget.TextView: void setLines(int)>"
"<android.widget.PopupWindow: void setTouchable(boolean)>","<android.widget.PopupWindow: void setTouchable(boolean)>"
"<java.lang.Long: java.lang.Long getLong(java.lang.String)>","<java.lang.Long: java.lang.Long getLong(java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
"<android.webkit.WebBackForwardList: void <init>()>","<android.webkit.WebBackForwardList: void <init>()>"
"<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteCancelled()>","<android.print.PrintDocumentAdapter$WriteResultCallback: void onWriteCancelled()>"
"<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>","<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>"
"<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence,int,int)>","<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence,int,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setIncludedTypes(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setIncludedTypes(java.util.Collection)>"
"<android.graphics.drawable.Drawable: boolean onLevelChange(int)>","<android.graphics.drawable.Drawable: boolean onLevelChange(int)>"
"<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)>","<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)>"
"<android.content.Context: java.lang.String getString(int)>","<android.content.Context: java.lang.String getString(int)>"
"<android.media.session.MediaController$TransportControls: void pause()>","<android.media.session.MediaController$TransportControls: void pause()>"
"<android.view.RoundedCorner: android.graphics.Point getCenter()>","<android.view.RoundedCorner: android.graphics.Point getCenter()>"
"<java.net.DatagramPacket: int getPort()>","<java.net.DatagramPacket: int getPort()>"
"<java.math.BigInteger: void <init>(byte[])>","<java.math.BigInteger: void <init>(byte[])>"
"<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>","<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>"
"<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>","<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double,double,double)>","<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double,double,double)>"
"<java.nio.file.WatchService: void close()>","<java.nio.file.WatchService: void close()>"
"<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>","<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>"
"<java.lang.Character: boolean isUnicodeIdentifierPart(char)>","<java.lang.Character: boolean isUnicodeIdentifierPart(char)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>","<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.String toString()>"
"<java.lang.Class: java.lang.String getSimpleName()>","<java.lang.Class: java.lang.String getSimpleName()>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>"
"<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.Consumer)>","<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.Consumer)>"
"<android.net.Uri$Builder: android.net.Uri build()>","<android.net.Uri$Builder: android.net.Uri build()>"
"<android.widget.TextView: void onBeginBatchEdit()>","<android.widget.TextView: void onBeginBatchEdit()>"
"<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>","<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>"
"<android.view.KeyEvent: int getScanCode()>","<android.view.KeyEvent: int getScanCode()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog show()>","<android.app.AlertDialog$Builder: android.app.AlertDialog show()>"
"<android.view.Window: int getColorMode()>","<android.view.Window: int getColorMode()>"
"<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>","<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>"
"<android.view.View: boolean canResolveTextAlignment()>","<android.view.View: boolean canResolveTextAlignment()>"
"<android.view.InputEvent: void <clinit>()>","<android.view.InputEvent: void <clinit>()>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setEntityType(java.lang.String,float)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setEntityType(java.lang.String,float)>"
"<java.util.stream.IntStream: java.util.OptionalDouble average()>","<java.util.stream.IntStream: java.util.OptionalDouble average()>"
"<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>","<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>"
"<java.util.Collections: void reverse(java.util.List)>","<java.util.Collections: void reverse(java.util.List)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>"
"<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(java.lang.Object,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: void set(java.lang.Object,int)>"
"<java.util.concurrent.ConcurrentLinkedQueue: void clear()>","<java.util.concurrent.ConcurrentLinkedQueue: void clear()>"
"<android.view.WindowInsetsAnimationController: boolean isCancelled()>","<android.view.WindowInsetsAnimationController: boolean isCancelled()>"
"<android.util.Rational: float floatValue()>","<android.util.Rational: float floatValue()>"
"<android.os.Parcel: void writeFloatArray(float[])>","<android.os.Parcel: void writeFloatArray(float[])>"
"<java.lang.Integer: int min(int,int)>","<java.lang.Integer: int min(int,int)>"
"<android.content.pm.PackageManager$ResolveInfoFlags: void <init>()>","<android.content.pm.PackageManager$ResolveInfoFlags: void <init>()>"
"<android.media.MediaDescription: android.net.Uri getIconUri()>","<android.media.MediaDescription: android.net.Uri getIconUri()>"
"<android.graphics.Point: void readFromParcel(android.os.Parcel)>","<android.graphics.Point: void readFromParcel(android.os.Parcel)>"
"<android.view.inputmethod.TextAttribute: void <clinit>()>","<android.view.inputmethod.TextAttribute: void <clinit>()>"
"<java.math.BigInteger: void <init>(int,java.util.Random)>","<java.math.BigInteger: void <init>(int,java.util.Random)>"
"<java.lang.Math: double cbrt(double)>","<java.lang.Math: double cbrt(double)>"
"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>","<android.database.sqlite.SQLiteDatabase: void beginTransaction()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getActions()>","<android.view.accessibility.AccessibilityNodeInfo: int getActions()>"
"<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>","<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>"
"<android.print.PrintAttributes$Margins: int getTopMils()>","<android.print.PrintAttributes$Margins: int getTopMils()>"
"<android.view.SurfaceView: void onWindowVisibilityChanged(int)>","<android.view.SurfaceView: void onWindowVisibilityChanged(int)>"
"<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>","<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>"
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>"
"<java.lang.Character: boolean isWhitespace(char)>","<java.lang.Character: boolean isWhitespace(char)>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],android.graphics.ColorSpace$Rgb$TransferParameters)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],android.graphics.ColorSpace$Rgb$TransferParameters)>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo build()>","<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo build()>"
"<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>","<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>"
"<android.view.translation.TranslationSpec: java.lang.String toString()>","<android.view.translation.TranslationSpec: java.lang.String toString()>"
"<android.view.MenuInflater: void <init>(android.content.Context)>","<android.view.MenuInflater: void <init>(android.content.Context)>"
"<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>","<java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>"
"<androidx.window.sidecar.SidecarInterface: void onWindowLayoutChangeListenerAdded(android.os.IBinder)>","<androidx.window.sidecar.SidecarInterface: void onWindowLayoutChangeListenerAdded(android.os.IBinder)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectBottom(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectBottom(android.graphics.Rect)>"
"<android.view.MotionEvent: void <clinit>()>","<android.view.MotionEvent: void <clinit>()>"
"<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()>","<java.util.concurrent.ScheduledThreadPoolExecutor: boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()>"
"<java.util.function.IntPredicate: java.util.function.IntPredicate and(java.util.function.IntPredicate)>","<java.util.function.IntPredicate: java.util.function.IntPredicate and(java.util.function.IntPredicate)>"
"<android.text.Layout: boolean isRtlCharAt(int)>","<android.text.Layout: boolean isRtlCharAt(int)>"
"<java.time.OffsetDateTime: boolean equals(java.lang.Object)>","<java.time.OffsetDateTime: boolean equals(java.lang.Object)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream peek(java.util.function.DoubleConsumer)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream peek(java.util.function.DoubleConsumer)>"
"<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>","<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>"
"<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>","<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>"
"<java.time.temporal.ValueRange: long getMaximum()>","<java.time.temporal.ValueRange: long getMaximum()>"
"<java.time.LocalTime: java.time.LocalTime minusHours(long)>","<java.time.LocalTime: java.time.LocalTime minusHours(long)>"
"<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setExtras(android.os.PersistableBundle)>","<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setExtras(android.os.PersistableBundle)>"
"<java.nio.channels.FileLock: boolean overlaps(long,long)>","<java.nio.channels.FileLock: boolean overlaps(long,long)>"
"<android.os.Vibrator: boolean hasVibrator()>","<android.os.Vibrator: boolean hasVibrator()>"
"<android.text.PrecomputedText$Params$Builder: void <init>(android.text.TextPaint)>","<android.text.PrecomputedText$Params$Builder: void <init>(android.text.TextPaint)>"
"<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>","<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>"
"<android.view.ViewConfiguration: int getKeyRepeatDelay()>","<android.view.ViewConfiguration: int getKeyRepeatDelay()>"
"<java.io.ByteArrayOutputStream: void close()>","<java.io.ByteArrayOutputStream: void close()>"
"<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>"
"<android.view.View: void setHovered(boolean)>","<android.view.View: void setHovered(boolean)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>"
"<android.hardware.lights.Light: void writeToParcel(android.os.Parcel,int)>","<android.hardware.lights.Light: void writeToParcel(android.os.Parcel,int)>"
"<android.media.ImageReader: long getUsage()>","<android.media.ImageReader: long getUsage()>"
"<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>","<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>"
"<android.view.MotionEvent: float getTouchMajor(int)>","<android.view.MotionEvent: float getTouchMajor(int)>"
"<io.flutter.plugins.webviewflutter.u2: void <clinit>()>","<io.flutter.plugins.webviewflutter.u2: void <clinit>()>"
"<java.lang.Boolean: boolean equals(java.lang.Object)>","<java.lang.Boolean: boolean equals(java.lang.Object)>"
"<android.widget.TextView: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>","<android.widget.TextView: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>"
"<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)>"
"<java.lang.ClassLoader: java.lang.Package[] getPackages()>","<java.lang.ClassLoader: java.lang.Package[] getPackages()>"
"<java.util.concurrent.LinkedBlockingQueue: void <init>()>","<java.util.concurrent.LinkedBlockingQueue: void <init>()>"
"<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()>","<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()>"
"<java.time.LocalTime: java.time.LocalTime minusSeconds(long)>","<java.time.LocalTime: java.time.LocalTime minusSeconds(long)>"
"<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>","<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>"
"<java.util.NavigableMap: java.util.Map$Entry pollFirstEntry()>","<java.util.NavigableMap: java.util.Map$Entry pollFirstEntry()>"
"<java.net.SocketImpl: boolean supportsUrgentData()>","<java.net.SocketImpl: boolean supportsUrgentData()>"
"<android.graphics.Point: int hashCode()>","<android.graphics.Point: int hashCode()>"
"<java.time.Period: int hashCode()>","<java.time.Period: int hashCode()>"
"<java.nio.channels.SelectionKey: void <init>()>","<java.nio.channels.SelectionKey: void <init>()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setBridgeTag(java.lang.String)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setBridgeTag(java.lang.String)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions$Request)>"
"<android.app.Notification$BubbleMetadata$Builder: void <init>()>","<android.app.Notification$BubbleMetadata$Builder: void <init>()>"
"<android.util.ArrayMap: void clear()>","<android.util.ArrayMap: void clear()>"
"<android.content.BroadcastReceiver: void setResultData(java.lang.String)>","<android.content.BroadcastReceiver: void setResultData(java.lang.String)>"
"<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>","<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>"
"<java.net.URLConnection: void setDoOutput(boolean)>","<java.net.URLConnection: void setDoOutput(boolean)>"
"<android.view.WindowInsets: int getStableInsetLeft()>","<android.view.WindowInsets: int getStableInsetLeft()>"
"<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVoicePromptAt(int)>","<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVoicePromptAt(int)>"
"<android.view.View: boolean hasOnClickListeners()>","<android.view.View: boolean hasOnClickListeners()>"
"<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()>","<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()>"
"<java.time.OffsetDateTime: boolean isBefore(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: boolean isBefore(java.time.OffsetDateTime)>"
"<java.io.DataOutput: void write(int)>","<java.io.DataOutput: void write(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>"
"<android.app.Presentation: void onDisplayRemoved()>","<android.app.Presentation: void onDisplayRemoved()>"
"<android.content.LocusId: boolean equals(java.lang.Object)>","<android.content.LocusId: boolean equals(java.lang.Object)>"
"<android.icu.util.ULocale: java.lang.String getISO3Country(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getISO3Country(java.lang.String)>"
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<io.flutter.plugins.webviewflutter.b2: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.b2: void a(java.lang.Object,y.a$e)>"
"<io.flutter.plugin.platform.d: void run()>","<io.flutter.plugin.platform.d: void run()>"
"<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>","<android.app.RemoteInput: java.util.Map getDataResultsFromIntent(android.content.Intent,java.lang.String)>"
"<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>","<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>"
"<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setNumberParts(java.lang.String)>","<android.text.style.TtsSpan$TelephoneBuilder: android.text.style.TtsSpan$TelephoneBuilder setNumberParts(java.lang.String)>"
"<android.view.InputQueue: void <init>()>","<android.view.InputQueue: void <init>()>"
"<java.lang.Double: void <clinit>()>","<java.lang.Double: void <clinit>()>"
"<android.webkit.WebResourceError: void <init>()>","<android.webkit.WebResourceError: void <init>()>"
"<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>","<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>"
"<android.app.Dialog: void closeOptionsMenu()>","<android.app.Dialog: void closeOptionsMenu()>"
"<android.graphics.Paint: void setStrokeWidth(float)>","<android.graphics.Paint: void setStrokeWidth(float)>"
"<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: int getToIndex()>","<android.view.accessibility.AccessibilityRecord: int getToIndex()>"
"<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.hardware.display.DeviceProductInfo: int getManufactureYear()>","<android.hardware.display.DeviceProductInfo: int getManufactureYear()>"
"<java.lang.System: void runFinalizersOnExit(boolean)>","<java.lang.System: void runFinalizersOnExit(boolean)>"
"<java.net.Proxy: boolean equals(java.lang.Object)>","<java.net.Proxy: boolean equals(java.lang.Object)>"
"<android.webkit.WebChromeClient: void <init>()>","<android.webkit.WebChromeClient: void <init>()>"
"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>","<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>"
"<java.time.chrono.ChronoPeriod: java.lang.String toString()>","<java.time.chrono.ChronoPeriod: java.lang.String toString()>"
"<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()>","<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()>"
"<android.view.textclassifier.ConversationActions$Message: android.os.Bundle getExtras()>","<android.view.textclassifier.ConversationActions$Message: android.os.Bundle getExtras()>"
"<java.time.DayOfWeek: java.time.DayOfWeek minus(long)>","<java.time.DayOfWeek: java.time.DayOfWeek minus(long)>"
"<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>","<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>"
"<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetRelease(boolean,boolean)>","<java.util.concurrent.atomic.AtomicBoolean: boolean weakCompareAndSetRelease(boolean,boolean)>"
"<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)>","<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)>"
"<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>","<android.view.textservice.SpellCheckerSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>"
"<android.widget.AdapterView: android.widget.Adapter getAdapter()>","<android.widget.AdapterView: android.widget.Adapter getAdapter()>"
"<android.app.RemoteAction: boolean isEnabled()>","<android.app.RemoteAction: boolean isEnabled()>"
"<java.util.HashMap: void replaceAll(java.util.function.BiFunction)>","<java.util.HashMap: void replaceAll(java.util.function.BiFunction)>"
"<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>","<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>"
"<android.webkit.TracingController: android.webkit.TracingController getInstance()>","<android.webkit.TracingController: android.webkit.TracingController getInstance()>"
"<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>","<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>"
"<android.graphics.ImageDecoder$DecodeException: int getError()>","<android.graphics.ImageDecoder$DecodeException: int getError()>"
"<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>","<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
"<android.net.Uri: java.lang.String toString()>","<android.net.Uri: java.lang.String toString()>"
"<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>","<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>"
"<android.hardware.lights.LightsManager: void <init>()>","<android.hardware.lights.LightsManager: void <init>()>"
"<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>","<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>"
"<java.nio.DoubleBuffer: double get()>","<java.nio.DoubleBuffer: double get()>"
"<java.util.LinkedHashMap: void <init>(java.util.Map)>","<java.util.LinkedHashMap: void <init>(java.util.Map)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordStartIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordStartIndex()>"
"<java.util.concurrent.AbstractExecutorService: void <init>()>","<java.util.concurrent.AbstractExecutorService: void <init>()>"
"<android.os.Message: long getWhen()>","<android.os.Message: long getWhen()>"
"<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>","<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>"
"<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>","<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>"
"<android.view.View: void setId(int)>","<android.view.View: void setId(int)>"
"<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,android.app.Person)>","<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(java.lang.CharSequence,long,android.app.Person)>"
"<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()>","<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()>"
"<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>","<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>"
"<android.print.PrintDocumentAdapter$LayoutResultCallback: void <init>()>","<android.print.PrintDocumentAdapter$LayoutResultCallback: void <init>()>"
"<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)>","<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)>"
"<java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)>","<java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)>"
"<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetVolatile(int,java.lang.Object,java.lang.Object)>","<java.util.concurrent.atomic.AtomicReferenceArray: boolean weakCompareAndSetVolatile(int,java.lang.Object,java.lang.Object)>"
"<android.print.PrintAttributes$Margins: void <clinit>()>","<android.print.PrintAttributes$Margins: void <clinit>()>"
"<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>","<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>"
"<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>","<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>"
"<android.view.View: void setTooltipText(java.lang.CharSequence)>","<android.view.View: void setTooltipText(java.lang.CharSequence)>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)>"
"<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>","<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>"
"<android.view.View: android.view.View getRootView()>","<android.view.View: android.view.View getRootView()>"
"<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)>","<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.view.ViewGroup: void clearDisappearingChildren()>","<android.view.ViewGroup: void clearDisappearingChildren()>"
"<java.util.stream.IntStream: java.util.stream.IntStream rangeClosed(int,int)>","<java.util.stream.IntStream: java.util.stream.IntStream rangeClosed(int,int)>"
"<java.lang.ThreadLocal: void remove()>","<java.lang.ThreadLocal: void remove()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()>","<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()>"
"<java.text.DateFormat: java.lang.Object clone()>","<java.text.DateFormat: java.lang.Object clone()>"
"<android.util.ArrayMap: boolean retainAll(java.util.Collection)>","<android.util.ArrayMap: boolean retainAll(java.util.Collection)>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>"
"<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>","<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>"
"<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>","<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>"
"<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>","<org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)>"
"<android.app.Activity: void setDefaultKeyMode(int)>","<android.app.Activity: void setDefaultKeyMode(int)>"
"<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>","<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>"
"<java.lang.StringBuffer: int codePointAt(int)>","<java.lang.StringBuffer: int codePointAt(int)>"
"<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>","<android.text.style.MetricAffectingSpan: void updateMeasureState(android.text.TextPaint)>"
"<java.util.Calendar: int get(int)>","<java.util.Calendar: int get(int)>"
"<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.NumberFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>"
"<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()>","<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()>"
"<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()>"
"<android.app.Activity: void onAttachFragment(android.app.Fragment)>","<android.app.Activity: void onAttachFragment(android.app.Fragment)>"
"<java.io.File: boolean isHidden()>","<java.io.File: boolean isHidden()>"
"<android.graphics.Rect: void setEmpty()>","<android.graphics.Rect: void setEmpty()>"
"<java.lang.Package: java.lang.Package getPackage(java.lang.String)>","<java.lang.Package: java.lang.Package getPackage(java.lang.String)>"
"<android.view.View: int getNextFocusLeftId()>","<android.view.View: int getNextFocusLeftId()>"
"<java.time.Duration: long toMinutes()>","<java.time.Duration: long toMinutes()>"
"<android.content.pm.PermissionGroupInfo: void <init>()>","<android.content.pm.PermissionGroupInfo: void <init>()>"
"<android.view.InputDevice$MotionRange: float getMax()>","<android.view.InputDevice$MotionRange: float getMax()>"
"<android.view.ActionMode: boolean getTitleOptionalHint()>","<android.view.ActionMode: boolean getTitleOptionalHint()>"
"<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>","<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>"
"<android.view.ViewGroup: boolean isAnimationCacheEnabled()>","<android.view.ViewGroup: boolean isAnimationCacheEnabled()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.ZoneId getZone()>","<java.time.chrono.ChronoZonedDateTime: java.time.ZoneId getZone()>"
"<android.view.Window: android.transition.Transition getEnterTransition()>","<android.view.Window: android.transition.Transition getEnterTransition()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>"
"<android.widget.AbsListView: boolean onNestedFling(android.view.View,float,float,boolean)>","<android.widget.AbsListView: boolean onNestedFling(android.view.View,float,float,boolean)>"
"<android.widget.TextView: float getLineSpacingMultiplier()>","<android.widget.TextView: float getLineSpacingMultiplier()>"
"<java.util.concurrent.ConcurrentLinkedQueue: void forEach(java.util.function.Consumer)>","<java.util.concurrent.ConcurrentLinkedQueue: void forEach(java.util.function.Consumer)>"
"<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>"
"<android.os.LocaleList: void <init>(java.util.Locale[])>","<android.os.LocaleList: void <init>(java.util.Locale[])>"
"<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>","<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>"
"<android.widget.ListAdapter: boolean areAllItemsEnabled()>","<android.widget.ListAdapter: boolean areAllItemsEnabled()>"
"<java.nio.LongBuffer: java.nio.Buffer rewind()>","<java.nio.LongBuffer: java.nio.Buffer rewind()>"
"<android.graphics.drawable.Drawable: int getLayoutDirection()>","<android.graphics.drawable.Drawable: int getLayoutDirection()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>","<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>"
"<android.widget.RemoteViews: void setViewLayoutMargin(int,int,float,int)>","<android.widget.RemoteViews: void setViewLayoutMargin(int,int,float,int)>"
"<android.graphics.RectF: void <init>(android.graphics.RectF)>","<android.graphics.RectF: void <init>(android.graphics.RectF)>"
"<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request,java.lang.String)>","<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.webkit.ClientCertRequest: java.lang.String getHost()>","<android.webkit.ClientCertRequest: java.lang.String getHost()>"
"<android.widget.Toolbar: int getPopupTheme()>","<android.widget.Toolbar: int getPopupTheme()>"
"<java.time.ZoneId: java.time.zone.ZoneRules getRules()>","<java.time.ZoneId: java.time.zone.ZoneRules getRules()>"
"<io.flutter.plugins.webviewflutter.i0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.i0: void a(java.lang.Object,y.a$e)>"
"<java.util.stream.Collector$Characteristics: void <clinit>()>","<java.util.stream.Collector$Characteristics: void <clinit>()>"
"<android.os.VibratorManager: void vibrate(android.os.CombinedVibration,android.os.VibrationAttributes)>","<android.os.VibratorManager: void vibrate(android.os.CombinedVibration,android.os.VibrationAttributes)>"
"<java.util.Arrays: int compare(java.lang.Object[],java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: int compare(java.lang.Object[],java.lang.Object[],java.util.Comparator)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)>","<android.app.Notification$Builder: android.app.Notification$Builder setLights(int,int,int)>"
"<java.util.function.IntConsumer: java.util.function.IntConsumer andThen(java.util.function.IntConsumer)>","<java.util.function.IntConsumer: java.util.function.IntConsumer andThen(java.util.function.IntConsumer)>"
"<java.net.DatagramSocket: int getLocalPort()>","<java.net.DatagramSocket: int getLocalPort()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>"
"<java.io.File: java.io.File getAbsoluteFile()>","<java.io.File: java.io.File getAbsoluteFile()>"
"<android.view.displayhash.DisplayHash: void writeToParcel(android.os.Parcel,int)>","<android.view.displayhash.DisplayHash: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>","<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>"
"<android.app.Person: int describeContents()>","<android.app.Person: int describeContents()>"
"<java.io.PrintWriter: void <init>(java.io.OutputStream)>","<java.io.PrintWriter: void <init>(java.io.OutputStream)>"
"<java.time.chrono.IsoChronology: boolean isLeapYear(long)>","<java.time.chrono.IsoChronology: boolean isLeapYear(long)>"
"<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>","<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>"
"<java.net.URL: java.lang.String getRef()>","<java.net.URL: java.lang.String getRef()>"
"<android.text.SpannableStringBuilder: android.text.Editable delete(int,int)>","<android.text.SpannableStringBuilder: android.text.Editable delete(int,int)>"
"<java.util.AbstractSet: int hashCode()>","<java.util.AbstractSet: int hashCode()>"
"<java.lang.StringBuilder: java.lang.Appendable append(char)>","<java.lang.StringBuilder: java.lang.Appendable append(char)>"
"<android.os.BaseBundle: long[] getLongArray(java.lang.String)>","<android.os.BaseBundle: long[] getLongArray(java.lang.String)>"
"<android.content.res.Resources: java.lang.String getResourceTypeName(int)>","<android.content.res.Resources: java.lang.String getResourceTypeName(int)>"
"<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>","<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>"
"<android.view.View: void setScrollCaptureCallback(android.view.ScrollCaptureCallback)>","<android.view.View: void setScrollCaptureCallback(android.view.ScrollCaptureCallback)>"
"<android.graphics.RenderNode: void endRecording()>","<android.graphics.RenderNode: void endRecording()>"
"<io.flutter.plugins.webviewflutter.i1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.i1: void a(java.lang.Object,y.a$e)>"
"<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>","<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>"
"<android.app.Activity: void takeKeyEvents(boolean)>","<android.app.Activity: void takeKeyEvents(boolean)>"
"<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>","<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>"
"<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>","<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>"
"<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan$Builder setIntArgument(java.lang.String,int)>","<android.text.style.TtsSpan$Builder: android.text.style.TtsSpan$Builder setIntArgument(java.lang.String,int)>"
"<android.view.View: boolean willNotCacheDrawing()>","<android.view.View: boolean willNotCacheDrawing()>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>"
"<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>","<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>"
"<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>","<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>"
"<java.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)>","<java.text.NumberFormat: void setRoundingMode(java.math.RoundingMode)>"
"<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>","<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>"
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>","<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>"
"<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>","<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>"
"<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>","<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>"
"<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes)>","<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes)>"
"<java.io.PrintStream: void write(byte[],int,int)>","<java.io.PrintStream: void write(byte[],int,int)>"
"<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>","<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>"
"<android.view.inputmethod.TextAttribute: int describeContents()>","<android.view.inputmethod.TextAttribute: int describeContents()>"
"<android.media.session.PlaybackState: long getBufferedPosition()>","<android.media.session.PlaybackState: long getBufferedPosition()>"
"<android.view.ViewStructure: void setWebDomain(java.lang.String)>","<android.view.ViewStructure: void setWebDomain(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.s: void <init>(io.flutter.plugins.webviewflutter.k$h)>","<io.flutter.plugins.webviewflutter.s: void <init>(io.flutter.plugins.webviewflutter.k$h)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider empty(android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider empty(android.content.res.loader.AssetsProvider)>"
"<android.webkit.WebResourceResponse: java.lang.String getMimeType()>","<android.webkit.WebResourceResponse: java.lang.String getMimeType()>"
"<java.time.LocalTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>","<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>"
"<java.util.OptionalLong: long orElse(long)>","<java.util.OptionalLong: long orElse(long)>"
"<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>","<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>"
"<android.widget.ListPopupWindow: void setEpicenterBounds(android.graphics.Rect)>","<android.widget.ListPopupWindow: void setEpicenterBounds(android.graphics.Rect)>"
"<android.webkit.WebBackForwardList: int getCurrentIndex()>","<android.webkit.WebBackForwardList: int getCurrentIndex()>"
"<java.util.WeakHashMap: void clear()>","<java.util.WeakHashMap: void clear()>"
"<java.util.PriorityQueue: int size()>","<java.util.PriorityQueue: int size()>"
"<android.app.Activity: boolean isVoiceInteraction()>","<android.app.Activity: boolean isVoiceInteraction()>"
"<android.view.FrameMetrics: void <init>(android.view.FrameMetrics)>","<android.view.FrameMetrics: void <init>(android.view.FrameMetrics)>"
"<android.view.Display$HdrCapabilities: int hashCode()>","<android.view.Display$HdrCapabilities: int hashCode()>"
"<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>","<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>"
"<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()>","<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()>"
"<java.time.Period: java.lang.String toString()>","<java.time.Period: java.lang.String toString()>"
"<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.util.LinkedList: void <init>()>","<java.util.LinkedList: void <init>()>"
"<java.time.OffsetTime: java.time.OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)>"
"<android.view.textclassifier.TextSelection: int describeContents()>","<android.view.textclassifier.TextSelection: int describeContents()>"
"<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>"
"<java.lang.String: void getBytes(int,int,byte[],int)>","<java.lang.String: void getBytes(int,int,byte[],int)>"
"<java.io.DataOutput: void writeBytes(java.lang.String)>","<java.io.DataOutput: void writeBytes(java.lang.String)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIntentAvailableOffline(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentIntentAvailableOffline(boolean)>"
"<android.graphics.ImageDecoder$DecodeException: void <init>()>","<android.graphics.ImageDecoder$DecodeException: void <init>()>"
"<java.time.Month: java.time.Month valueOf(java.lang.String)>","<java.time.Month: java.time.Month valueOf(java.lang.String)>"
"<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)>","<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: float getTextSizeInPx()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: float getTextSizeInPx()>"
"<java.util.zip.ZipFile: void <init>(java.lang.String)>","<java.util.zip.ZipFile: void <init>(java.lang.String)>"
"<java.io.File: boolean renameTo(java.io.File)>","<java.io.File: boolean renameTo(java.io.File)>"
"<android.view.ViewConfiguration: int getEdgeSlop()>","<android.view.ViewConfiguration: int getEdgeSlop()>"
"<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>","<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void <clinit>()>","<android.view.SurfaceControlViewHost$SurfacePackage: void <clinit>()>"
"<android.content.ClipboardManager: boolean hasText()>","<android.content.ClipboardManager: boolean hasText()>"
"<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>","<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>"
"<android.transition.Transition: long getDuration()>","<android.transition.Transition: long getDuration()>"
"<android.widget.TextView: boolean getIncludeFontPadding()>","<android.widget.TextView: boolean getIncludeFontPadding()>"
"<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>","<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)>"
"<java.io.Writer: java.io.Writer append(char)>","<java.io.Writer: java.io.Writer append(char)>"
"<android.os.Handler: void <init>()>","<android.os.Handler: void <init>()>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.view.autofill.AutofillValue: int getListValue()>","<android.view.autofill.AutofillValue: int getListValue()>"
"<android.view.ViewStructure: void setSelected(boolean)>","<android.view.ViewStructure: void setSelected(boolean)>"
"<java.lang.ThreadGroup: void setMaxPriority(int)>","<java.lang.ThreadGroup: void setMaxPriority(int)>"
"<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>","<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>"
"<android.widget.ImageView: int getMaxWidth()>","<android.widget.ImageView: int getMaxWidth()>"
"<android.view.Window: void takeKeyEvents(boolean)>","<android.view.Window: void takeKeyEvents(boolean)>"
"<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>","<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>"
"<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>","<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>"
"<android.view.Surface: boolean isValid()>","<android.view.Surface: boolean isValid()>"
"<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)>","<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)>"
"<android.content.pm.VersionedPackage: int describeContents()>","<android.content.pm.VersionedPackage: int describeContents()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setTransitionStyle(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setTransitionStyle(int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>"
"<java.util.OptionalDouble: void <init>()>","<java.util.OptionalDouble: void <init>()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>","<java.time.LocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream sequential()>","<java.util.stream.BaseStream: java.util.stream.BaseStream sequential()>"
"<android.view.accessibility.AccessibilityNodeInfo: void <clinit>()>","<android.view.accessibility.AccessibilityNodeInfo: void <clinit>()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>"
"<android.content.Loader: android.content.Context getContext()>","<android.content.Loader: android.content.Context getContext()>"
"<android.os.BaseBundle: void putAll(android.os.PersistableBundle)>","<android.os.BaseBundle: void putAll(android.os.PersistableBundle)>"
"<android.view.DisplayCutout: int getSafeInsetLeft()>","<android.view.DisplayCutout: int getSafeInsetLeft()>"
"<android.widget.RemoteViews: void setColorStateListAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColorStateListAttr(int,java.lang.String,int)>"
"<android.view.SurfaceHolder: void setType(int)>","<android.view.SurfaceHolder: void setType(int)>"
"<android.print.PrintDocumentInfo: int hashCode()>","<android.print.PrintDocumentInfo: int hashCode()>"
"<android.content.Loader: void rollbackContentChanged()>","<android.content.Loader: void rollbackContentChanged()>"
"<android.view.MotionEvent: int getClassification()>","<android.view.MotionEvent: int getClassification()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage()>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage()>"
"<android.view.MotionEvent: void finalize()>","<android.view.MotionEvent: void finalize()>"
"<io.flutter.embedding.android.p: void <init>(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,android.view.KeyEvent)>","<io.flutter.embedding.android.p: void <init>(io.flutter.embedding.android.r,io.flutter.embedding.android.t$c,android.view.KeyEvent)>"
"<android.media.session.MediaSessionManager$OnSession2TokensChangedListener: void onSession2TokensChanged(java.util.List)>","<android.media.session.MediaSessionManager$OnSession2TokensChangedListener: void onSession2TokensChanged(java.util.List)>"
"<java.util.PriorityQueue: void <init>(java.util.SortedSet)>","<java.util.PriorityQueue: void <init>(java.util.SortedSet)>"
"<android.view.Window: android.view.AttachedSurfaceControl getRootSurfaceControl()>","<android.view.Window: android.view.AttachedSurfaceControl getRootSurfaceControl()>"
"<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>","<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>"
"<java.time.Clock: java.time.Clock systemUTC()>","<java.time.Clock: java.time.Clock systemUTC()>"
"<android.view.AbsSavedState: int describeContents()>","<android.view.AbsSavedState: int describeContents()>"
"<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>","<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>"
"<android.widget.AbsListView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.widget.AbsListView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<android.view.Display: android.view.RoundedCorner getRoundedCorner(int)>","<android.view.Display: android.view.RoundedCorner getRoundedCorner(int)>"
"<java.nio.FloatBuffer: java.nio.Buffer rewind()>","<java.nio.FloatBuffer: java.nio.Buffer rewind()>"
"<android.view.View: void generateDisplayHash(java.lang.String,android.graphics.Rect,java.util.concurrent.Executor,android.view.displayhash.DisplayHashResultCallback)>","<android.view.View: void generateDisplayHash(java.lang.String,android.graphics.Rect,java.util.concurrent.Executor,android.view.displayhash.DisplayHashResultCallback)>"
"<android.os.UserHandle: boolean equals(java.lang.Object)>","<android.os.UserHandle: boolean equals(java.lang.Object)>"
"<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getConfirmLabel()>","<android.app.Notification$Action$WearableExtender: java.lang.CharSequence getConfirmLabel()>"
"<java.nio.DoubleBuffer: java.nio.Buffer flip()>","<java.nio.DoubleBuffer: java.nio.Buffer flip()>"
"<android.widget.Filter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>","<android.widget.Filter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>"
"<java.lang.Math: float ulp(float)>","<java.lang.Math: float ulp(float)>"
"<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>"
"<android.widget.TextView: void setTextSelectHandle(int)>","<android.widget.TextView: void setTextSelectHandle(int)>"
"<java.lang.String: void <init>(int[],int,int)>","<java.lang.String: void <init>(int[],int,int)>"
"<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>","<java.util.concurrent.ThreadPoolExecutor: long getTaskCount()>"
"<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>","<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>"
"<android.widget.AbsListView: void onDisplayHint(int)>","<android.widget.AbsListView: void onDisplayHint(int)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow()>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow()>"
"<android.app.Fragment: void onResume()>","<android.app.Fragment: void onResume()>"
"<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>","<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>"
"<java.net.NetworkInterface: boolean isUp()>","<java.net.NetworkInterface: boolean isUp()>"
"<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>","<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>"
"<java.nio.channels.SelectableChannel: boolean isBlocking()>","<java.nio.channels.SelectableChannel: boolean isBlocking()>"
"<java.lang.reflect.Modifier: boolean isPrivate(int)>","<java.lang.reflect.Modifier: boolean isPrivate(int)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>","<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>"
"<java.io.DataOutput: void write(byte[],int,int)>","<java.io.DataOutput: void write(byte[],int,int)>"
"<java.util.Arrays: int hashCode(byte[])>","<java.util.Arrays: int hashCode(byte[])>"
"<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>","<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>"
"<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>","<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>"
"<android.app.Notification$Action$WearableExtender: void <init>(android.app.Notification$Action)>","<android.app.Notification$Action$WearableExtender: void <init>(android.app.Notification$Action)>"
"<android.transition.TransitionValues: boolean equals(java.lang.Object)>","<android.transition.TransitionValues: boolean equals(java.lang.Object)>"
"<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>","<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>"
"<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>","<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>"
"<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>","<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setUniqueId(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: void setUniqueId(java.lang.String)>"
"<android.view.View: void playSoundEffect(int)>","<android.view.View: void playSoundEffect(int)>"
"<android.view.KeyCharacterMap: void <clinit>()>","<android.view.KeyCharacterMap: void <clinit>()>"
"<java.util.Arrays: void parallelSort(long[])>","<java.util.Arrays: void parallelSort(long[])>"
"<java.io.InputStreamReader: void close()>","<java.io.InputStreamReader: void close()>"
"<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>","<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>"
"<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.content.pm.PackageInstaller$Session: void removeChildSessionId(int)>","<android.content.pm.PackageInstaller$Session: void removeChildSessionId(int)>"
"<java.io.PrintStream: void print(long)>","<java.io.PrintStream: void print(long)>"
"<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>","<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>"
"<java.util.WeakHashMap: void <init>()>","<java.util.WeakHashMap: void <init>()>"
"<android.media.VolumeProvider: java.lang.String getVolumeControlId()>","<android.media.VolumeProvider: java.lang.String getVolumeControlId()>"
"<android.hardware.lights.LightState: int getColor()>","<android.hardware.lights.LightState: int getColor()>"
"<android.view.ViewStructure: void <init>()>","<android.view.ViewStructure: void <init>()>"
"<android.view.Gravity: void <init>()>","<android.view.Gravity: void <init>()>"
"<android.os.Bundle: short getShort(java.lang.String,short)>","<android.os.Bundle: short getShort(java.lang.String,short)>"
"<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)>","<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)>"
"<android.view.View: void restoreHierarchyState(android.util.SparseArray)>","<android.view.View: void restoreHierarchyState(android.util.SparseArray)>"
"<android.content.SyncRequest: int describeContents()>","<android.content.SyncRequest: int describeContents()>"
"<java.net.Proxy: java.net.SocketAddress address()>","<java.net.Proxy: java.net.SocketAddress address()>"
"<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setSpatializationBehavior(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setSpatializationBehavior(int)>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: int hashCode()>","<android.graphics.ColorSpace$Rgb$TransferParameters: int hashCode()>"
"<java.io.PrintStream: void setError()>","<java.io.PrintStream: void setError()>"
"<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>","<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>"
"<java.nio.IntBuffer: java.nio.IntBuffer duplicate()>","<java.nio.IntBuffer: java.nio.IntBuffer duplicate()>"
"<android.content.pm.PermissionInfo: java.lang.String toString()>","<android.content.pm.PermissionInfo: java.lang.String toString()>"
"<java.util.IdentityHashMap: void putAll(java.util.Map)>","<java.util.IdentityHashMap: void putAll(java.util.Map)>"
"<java.util.Arrays: void parallelSort(byte[])>","<java.util.Arrays: void parallelSort(byte[])>"
"<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>","<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>"
"<android.app.assist.AssistContent: android.content.Intent getIntent()>","<android.app.assist.AssistContent: android.content.Intent getIntent()>"
"<android.view.WindowInsets: int getSystemWindowInsetBottom()>","<android.view.WindowInsets: int getSystemWindowInsetBottom()>"
"<android.widget.AbsListView: long pointToRowId(int,int)>","<android.widget.AbsListView: long pointToRowId(int,int)>"
"<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>","<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>"
"<java.time.LocalDateTime: int getHour()>","<java.time.LocalDateTime: int getHour()>"
"<java.io.PrintWriter: void print(double)>","<java.io.PrintWriter: void print(double)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventIndex(int)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventIndex(int)>"
"<java.lang.Float: java.lang.Float valueOf(java.lang.String)>","<java.lang.Float: java.lang.Float valueOf(java.lang.String)>"
"<android.view.ViewConfiguration: int getFadingEdgeLength()>","<android.view.ViewConfiguration: int getFadingEdgeLength()>"
"<android.widget.Adapter: long getItemId(int)>","<android.widget.Adapter: long getItemId(int)>"
"<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.view.Window: void setNavigationBarDividerColor(int)>","<android.view.Window: void setNavigationBarDividerColor(int)>"
"<android.widget.AdapterView$OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>","<android.widget.AdapterView$OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>"
"<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>","<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>"
"<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>"
"<java.util.concurrent.TimeUnit: void sleep(long)>","<java.util.concurrent.TimeUnit: void sleep(long)>"
"<android.graphics.Matrix: boolean isAffine()>","<android.graphics.Matrix: boolean isAffine()>"
"<android.app.Notification$MessagingStyle$Message: java.lang.String getDataMimeType()>","<android.app.Notification$MessagingStyle$Message: java.lang.String getDataMimeType()>"
"<java.util.Arrays: int mismatch(double[],int,int,double[],int,int)>","<java.util.Arrays: int mismatch(double[],int,int,double[],int,int)>"
"<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>","<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>"
"<android.graphics.ImageDecoder: void setCrop(android.graphics.Rect)>","<android.graphics.ImageDecoder: void setCrop(android.graphics.Rect)>"
"<java.io.ObjectInputStream: short readShort()>","<java.io.ObjectInputStream: short readShort()>"
"<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()>","<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setLabel(java.lang.String)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setLabel(java.lang.String)>"
"<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>","<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>"
"<android.view.MotionEvent: boolean isButtonPressed(int)>","<android.view.MotionEvent: boolean isButtonPressed(int)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>"
"<java.nio.channels.Pipe: void <init>()>","<java.nio.channels.Pipe: void <init>()>"
"<android.graphics.Outline: void offset(int,int)>","<android.graphics.Outline: void offset(int,int)>"
"<android.webkit.WebSettings: void setSupportZoom(boolean)>","<android.webkit.WebSettings: void setSupportZoom(boolean)>"
"<java.io.File: void deleteOnExit()>","<java.io.File: void deleteOnExit()>"
"<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>"
"<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>","<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>"
"<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>","<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>"
"<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>","<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>"
"<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>"
"<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>","<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>"
"<android.app.LoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>","<android.app.LoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>"
"<java.time.chrono.ChronoLocalDateTime: java.util.Comparator timeLineOrder()>","<java.time.chrono.ChronoLocalDateTime: java.util.Comparator timeLineOrder()>"
"<java.nio.file.Path: boolean equals(java.lang.Object)>","<java.nio.file.Path: boolean equals(java.lang.Object)>"
"<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>","<java.util.concurrent.ThreadPoolExecutor: void setMaximumPoolSize(int)>"
"<android.content.IntentFilter: int countDataAuthorities()>","<android.content.IntentFilter: int countDataAuthorities()>"
"<java.util.NavigableMap: java.util.NavigableMap descendingMap()>","<java.util.NavigableMap: java.util.NavigableMap descendingMap()>"
"<java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>","<java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedLeapSecond()>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedLeapSecond()>"
"<android.view.autofill.AutofillManager$AutofillCallback: void onAutofillEvent(android.view.View,int,int)>","<android.view.autofill.AutofillManager$AutofillCallback: void onAutofillEvent(android.view.View,int,int)>"
"<android.graphics.RecordingCanvas: void setDensity(int)>","<android.graphics.RecordingCanvas: void setDensity(int)>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>"
"<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>","<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>"
"<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)>","<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)>"
"<java.time.Clock: java.time.Instant instant()>","<java.time.Clock: java.time.Instant instant()>"
"<android.view.Window: void setSystemGestureExclusionRects(java.util.List)>","<android.view.Window: void setSystemGestureExclusionRects(java.util.List)>"
"<android.widget.Scroller: boolean computeScrollOffset()>","<android.widget.Scroller: boolean computeScrollOffset()>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()>"
"<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.print.PrintAttributes$Margins: java.lang.String toString()>","<android.print.PrintAttributes$Margins: java.lang.String toString()>"
"<android.view.View: boolean postDelayed(java.lang.Runnable,long)>","<android.view.View: boolean postDelayed(java.lang.Runnable,long)>"
"<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>","<java.util.concurrent.ThreadPoolExecutor: long getCompletedTaskCount()>"
"<android.widget.Toolbar: void inflateMenu(int)>","<android.widget.Toolbar: void inflateMenu(int)>"
"<org.json.JSONObject: int length()>","<org.json.JSONObject: int length()>"
"<android.view.TextureView$SurfaceTextureListener: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>","<android.view.TextureView$SurfaceTextureListener: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>"
"<android.view.TextureView: void setOpaque(boolean)>","<android.view.TextureView: void setOpaque(boolean)>"
"<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>","<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)>"
"<android.text.TextUtils$TruncateAt: void <clinit>()>","<android.text.TextUtils$TruncateAt: void <clinit>()>"
"<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>","<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>"
"<android.view.Window: void <init>(android.content.Context)>","<android.view.Window: void <init>(android.content.Context)>"
"<android.util.TypedValue: int getComplexUnit()>","<android.util.TypedValue: int getComplexUnit()>"
"<java.util.ArrayDeque: java.util.ArrayDeque clone()>","<java.util.ArrayDeque: java.util.ArrayDeque clone()>"
"<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>","<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>"
"<android.os.MessageQueue: void <init>()>","<android.os.MessageQueue: void <init>()>"
"<android.app.Activity: void finishAffinity()>","<android.app.Activity: void finishAffinity()>"
"<java.util.Arrays: void fill(double[],double)>","<java.util.Arrays: void fill(double[],double)>"
"<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setMultiplicity(java.lang.String)>","<android.text.style.TtsSpan$SemioticClassBuilder: android.text.style.TtsSpan$SemioticClassBuilder setMultiplicity(java.lang.String)>"
"<java.util.NavigableSet: java.util.SortedSet tailSet(java.lang.Object)>","<java.util.NavigableSet: java.util.SortedSet tailSet(java.lang.Object)>"
"<java.util.Arrays: void parallelSetAll(int[],java.util.function.IntUnaryOperator)>","<java.util.Arrays: void parallelSetAll(int[],java.util.function.IntUnaryOperator)>"
"<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>","<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>"
"<java.util.stream.LongStream: java.util.stream.LongStream map(java.util.function.LongUnaryOperator)>","<java.util.stream.LongStream: java.util.stream.LongStream map(java.util.function.LongUnaryOperator)>"
"<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>","<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>"
"<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>","<android.view.textservice.SentenceSuggestionsInfo: int getSuggestionsCount()>"
"<android.graphics.RecordingCanvas: void drawColor(int)>","<android.graphics.RecordingCanvas: void drawColor(int)>"
"<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>","<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>"
"<android.app.FragmentTransaction: void commitNow()>","<android.app.FragmentTransaction: void commitNow()>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <clinit>()>"
"<android.accounts.Account: java.lang.String toString()>","<android.accounts.Account: java.lang.String toString()>"
"<android.webkit.WebViewRenderProcessClient: void onRenderProcessResponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>","<android.webkit.WebViewRenderProcessClient: void onRenderProcessResponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>"
"<android.content.pm.PackageManager: byte[] getInstantAppCookie()>","<android.content.pm.PackageManager: byte[] getInstantAppCookie()>"
"<android.media.AudioAttributes: int getVolumeControlStream()>","<android.media.AudioAttributes: int getVolumeControlStream()>"
"<android.text.style.TtsSpan$MoneyBuilder: void <init>()>","<android.text.style.TtsSpan$MoneyBuilder: void <init>()>"
"<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>","<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>"
"<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>","<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>"
"<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>","<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>"
"<java.util.IdentityHashMap: int hashCode()>","<java.util.IdentityHashMap: int hashCode()>"
"<java.util.Hashtable: void putAll(java.util.Map)>","<java.util.Hashtable: void putAll(java.util.Map)>"
"<android.content.Context: void <init>()>","<android.content.Context: void <init>()>"
"<android.media.session.PlaybackState$CustomAction$Builder: void <init>(java.lang.String,java.lang.CharSequence,int)>","<android.media.session.PlaybackState$CustomAction$Builder: void <init>(java.lang.String,java.lang.CharSequence,int)>"
"<java.util.regex.Matcher: boolean requireEnd()>","<java.util.regex.Matcher: boolean requireEnd()>"
"<android.app.Dialog: void onDetachedFromWindow()>","<android.app.Dialog: void onDetachedFromWindow()>"
"<java.util.Arrays: char[] copyOf(char[],int)>","<java.util.Arrays: char[] copyOf(char[],int)>"
"<java.util.OptionalInt: int orElseGet(java.util.function.IntSupplier)>","<java.util.OptionalInt: int orElseGet(java.util.function.IntSupplier)>"
"<android.widget.ImageView: android.content.res.ColorStateList getImageTintList()>","<android.widget.ImageView: android.content.res.ColorStateList getImageTintList()>"
"<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>","<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>"
"<java.io.File: java.lang.String getAbsolutePath()>","<java.io.File: java.lang.String getAbsolutePath()>"
"<android.app.Notification$BubbleMetadata$Builder: void <init>(android.app.PendingIntent,android.graphics.drawable.Icon)>","<android.app.Notification$BubbleMetadata$Builder: void <init>(android.app.PendingIntent,android.graphics.drawable.Icon)>"
"<android.content.ContentValues: void clear()>","<android.content.ContentValues: void clear()>"
"<android.app.VoiceInteractor: boolean isDestroyed()>","<android.app.VoiceInteractor: boolean isDestroyed()>"
"<android.animation.TimeInterpolator: float getInterpolation(float)>","<android.animation.TimeInterpolator: float getInterpolation(float)>"
"<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>","<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>"
"<java.security.Provider: java.util.Set getServices()>","<java.security.Provider: java.util.Set getServices()>"
"<android.app.Fragment: android.transition.Transition getReenterTransition()>","<android.app.Fragment: android.transition.Transition getReenterTransition()>"
"<android.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>","<android.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>"
"<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>","<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>"
"<android.app.Activity: android.content.SharedPreferences getPreferences(int)>","<android.app.Activity: android.content.SharedPreferences getPreferences(int)>"
"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>","<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>"
"<java.lang.AssertionError: void <init>(float)>","<java.lang.AssertionError: void <init>(float)>"
"<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>","<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>"
"<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>","<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>"
"<android.graphics.RectF: float centerY()>","<android.graphics.RectF: float centerY()>"
"<java.net.Socket: int getPort()>","<java.net.Socket: int getPort()>"
"<android.view.Surface: int describeContents()>","<android.view.Surface: int describeContents()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: int describeContents()>","<android.view.textclassifier.TextClassifier$EntityConfig: int describeContents()>"
"<java.time.LocalDateTime: java.time.Month getMonth()>","<java.time.LocalDateTime: java.time.Month getMonth()>"
"<android.view.View: float getZ()>","<android.view.View: float getZ()>"
"<java.nio.Buffer: java.nio.Buffer flip()>","<java.nio.Buffer: java.nio.Buffer flip()>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>"
"<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>","<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>"
"<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String,java.lang.Throwable)>","<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.security.KeyException: void <init>(java.lang.String)>","<java.security.KeyException: void <init>(java.lang.String)>"
"<android.util.Rational: short shortValue()>","<android.util.Rational: short shortValue()>"
"<android.view.translation.TranslationCapability: void <init>()>","<android.view.translation.TranslationCapability: void <init>()>"
"<android.'annotation'.TargetApi: int value()>","<android.'annotation'.TargetApi: int value()>"
"<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>"
"<android.graphics.drawable.ColorDrawable: boolean isStateful()>","<android.graphics.drawable.ColorDrawable: boolean isStateful()>"
"<android.widget.ImageView: int[] onCreateDrawableState(int)>","<android.widget.ImageView: int[] onCreateDrawableState(int)>"
"<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>","<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>"
"<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>","<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>"
"<android.os.Looper: void <init>()>","<android.os.Looper: void <init>()>"
"<java.util.Arrays: double[] copyOf(double[],int)>","<java.util.Arrays: double[] copyOf(double[],int)>"
"<java.util.function.IntPredicate: java.util.function.IntPredicate or(java.util.function.IntPredicate)>","<java.util.function.IntPredicate: java.util.function.IntPredicate or(java.util.function.IntPredicate)>"
"<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>"
"<java.util.Arrays: void fill(int[],int)>","<java.util.Arrays: void fill(int[],int)>"
"<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)>","<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)>"
"<io.flutter.plugins.webviewflutter.l0: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.l0: void a(java.lang.Object,y.a$e)>"
"<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>","<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo()>"
"<java.util.Arrays: boolean equals(byte[],byte[])>","<java.util.Arrays: boolean equals(byte[],byte[])>"
"<android.text.TextPaint: void set(android.text.TextPaint)>","<android.text.TextPaint: void set(android.text.TextPaint)>"
"<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>"
"<android.util.AttributeSet: int getIdAttributeResourceValue(int)>","<android.util.AttributeSet: int getIdAttributeResourceValue(int)>"
"<android.widget.RemoteViews: void showNext(int)>","<android.widget.RemoteViews: void showNext(int)>"
"<org.xmlpull.v1.XmlPullParser: int nextTag()>","<org.xmlpull.v1.XmlPullParser: int nextTag()>"
"<java.lang.Double: int compareTo(java.lang.Double)>","<java.lang.Double: int compareTo(java.lang.Double)>"
"<android.app.Activity: void stopManagingCursor(android.database.Cursor)>","<android.app.Activity: void stopManagingCursor(android.database.Cursor)>"
"<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>","<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>"
"<android.view.View$DragShadowBuilder: void <init>(android.view.View)>","<android.view.View$DragShadowBuilder: void <init>(android.view.View)>"
"<android.view.SurfaceView: void setZOrderOnTop(boolean)>","<android.view.SurfaceView: void setZOrderOnTop(boolean)>"
"<android.content.res.Configuration: boolean isScreenRound()>","<android.content.res.Configuration: boolean isScreenRound()>"
"<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction build()>","<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction build()>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)>"
"<android.graphics.Bitmap: android.graphics.Bitmap asShared()>","<android.graphics.Bitmap: android.graphics.Bitmap asShared()>"
"<java.lang.Short: void <clinit>()>","<java.lang.Short: void <clinit>()>"
"<android.os.Build$Partition: boolean equals(java.lang.Object)>","<android.os.Build$Partition: boolean equals(java.lang.Object)>"
"<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>","<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>"
"<android.view.View: void setDuplicateParentStateEnabled(boolean)>","<android.view.View: void setDuplicateParentStateEnabled(boolean)>"
"<java.util.function.DoubleToLongFunction: long applyAsLong(double)>","<java.util.function.DoubleToLongFunction: long applyAsLong(double)>"
"<android.widget.TextView: void setIncludeFontPadding(boolean)>","<android.widget.TextView: void setIncludeFontPadding(boolean)>"
"<android.content.Context: android.view.Display getDisplay()>","<android.content.Context: android.view.Display getDisplay()>"
"<android.view.Display$Mode: int getPhysicalHeight()>","<android.view.Display$Mode: int getPhysicalHeight()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>"
"<android.app.Notification$WearableExtender: int getCustomContentHeight()>","<android.app.Notification$WearableExtender: int getCustomContentHeight()>"
"<java.io.ByteArrayOutputStream: void writeBytes(byte[])>","<java.io.ByteArrayOutputStream: void writeBytes(byte[])>"
"<java.util.ArrayList: boolean addAll(java.util.Collection)>","<java.util.ArrayList: boolean addAll(java.util.Collection)>"
"<android.opengl.Matrix: void setIdentityM(float[],int)>","<android.opengl.Matrix: void setIdentityM(float[],int)>"
"<android.graphics.Matrix: void getValues(float[])>","<android.graphics.Matrix: void getValues(float[])>"
"<android.app.RemoteInput: void <init>()>","<android.app.RemoteInput: void <init>()>"
"<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>","<java.util.LinkedList: java.lang.Object set(int,java.lang.Object)>"
"<android.graphics.Color: int getComponentCount()>","<android.graphics.Color: int getComponentCount()>"
"<android.view.ContextThemeWrapper: void <init>()>","<android.view.ContextThemeWrapper: void <init>()>"
"<java.util.Arrays: void parallelSort(java.lang.Comparable[])>","<java.util.Arrays: void parallelSort(java.lang.Comparable[])>"
"<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>","<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActionBar$TabListener: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>","<android.app.ActionBar$TabListener: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.os.SystemClock: java.time.Clock currentNetworkTimeClock()>","<android.os.SystemClock: java.time.Clock currentNetworkTimeClock()>"
"<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>","<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>"
"<io.flutter.embedding.android.p: void run()>","<io.flutter.embedding.android.p: void run()>"
"<android.webkit.WebView: void findNext(boolean)>","<android.webkit.WebView: void findNext(boolean)>"
"<java.net.URISyntaxException: java.lang.String getReason()>","<java.net.URISyntaxException: java.lang.String getReason()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader,java.lang.Class)>"
"<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>","<android.app.Notification$Builder: android.app.Notification$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)>"
"<java.lang.Character: boolean isLetterOrDigit(int)>","<java.lang.Character: boolean isLetterOrDigit(int)>"
"<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>","<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>"
"<android.graphics.Paint: boolean isDither()>","<android.graphics.Paint: boolean isDither()>"
"<android.app.AlertDialog: void setIcon(int)>","<android.app.AlertDialog: void setIcon(int)>"
"<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>","<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>"
"<android.app.Activity: boolean isLaunchedFromBubble()>","<android.app.Activity: boolean isLaunchedFromBubble()>"
"<java.util.List: boolean equals(java.lang.Object)>","<java.util.List: boolean equals(java.lang.Object)>"
"<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetRelease(int,int)>","<java.util.concurrent.atomic.AtomicInteger: boolean weakCompareAndSetRelease(int,int)>"
"<java.util.PrimitiveIterator$OfDouble: double nextDouble()>","<java.util.PrimitiveIterator$OfDouble: double nextDouble()>"
"<java.util.Map: java.util.Map of()>","<java.util.Map: java.util.Map of()>"
"<java.time.Duration: java.time.Duration plusDays(long)>","<java.time.Duration: java.time.Duration plusDays(long)>"
"<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>","<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>"
"<android.graphics.Canvas: boolean clipRect(int,int,int,int)>","<android.graphics.Canvas: boolean clipRect(int,int,int,int)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>"
"<android.os.Debug: void stopAllocCounting()>","<android.os.Debug: void stopAllocCounting()>"
"<android.widget.TextView: void setSingleLine(boolean)>","<android.widget.TextView: void setSingleLine(boolean)>"
"<android.app.Person: java.lang.CharSequence getName()>","<android.app.Person: java.lang.CharSequence getName()>"
"<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>","<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>"
"<java.util.Arrays: void sort(java.lang.Object[],int,int)>","<java.util.Arrays: void sort(java.lang.Object[],int,int)>"
"<android.widget.TextView: int getInputType()>","<android.widget.TextView: int getInputType()>"
"<android.content.res.TypedArray: float getFloat(int,float)>","<android.content.res.TypedArray: float getFloat(int,float)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)>","<android.app.Notification$Builder: android.app.Notification$Builder setProgress(int,int,boolean)>"
"<java.util.stream.DoubleStream: void forEach(java.util.function.DoubleConsumer)>","<java.util.stream.DoubleStream: void forEach(java.util.function.DoubleConsumer)>"
"<android.view.ViewParent: int getLayoutDirection()>","<android.view.ViewParent: int getLayoutDirection()>"
"<android.media.MediaMetadata: boolean containsKey(java.lang.String)>","<android.media.MediaMetadata: boolean containsKey(java.lang.String)>"
"<android.transition.Transition: android.transition.PathMotion getPathMotion()>","<android.transition.Transition: android.transition.PathMotion getPathMotion()>"
"<android.view.View: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.View: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>","<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>"
"<android.app.Service: void stopSelf(int)>","<android.app.Service: void stopSelf(int)>"
"<java.time.LocalTime: int toSecondOfDay()>","<java.time.LocalTime: int toSecondOfDay()>"
"<android.widget.FrameLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.FrameLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewsDisappeared(android.view.autofill.AutofillId,long[])>","<android.view.contentcapture.ContentCaptureSession: void notifyViewsDisappeared(android.view.autofill.AutofillId,long[])>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>"
"<android.view.Window: int getForcedWindowFlags()>","<android.view.Window: int getForcedWindowFlags()>"
"<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>"
"<java.net.Proxy$Type: java.net.Proxy$Type[] values()>","<java.net.Proxy$Type: java.net.Proxy$Type[] values()>"
"<android.util.SparseIntArray: int indexOfKey(int)>","<android.util.SparseIntArray: int indexOfKey(int)>"
"<java.util.concurrent.atomic.AtomicLong: void set(long)>","<java.util.concurrent.atomic.AtomicLong: void set(long)>"
"<android.widget.TextView: void setTextColor(int)>","<android.widget.TextView: void setTextColor(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowTitle(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowTitle(java.lang.String)>"
"<io.flutter.plugins.webviewflutter.s1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.s1: void a(java.lang.Object,y.a$e)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clear()>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clear()>"
"<android.view.View: void dispatchDraw(android.graphics.Canvas)>","<android.view.View: void dispatchDraw(android.graphics.Canvas)>"
"<android.view.autofill.AutofillManager$AutofillCallback: void <init>()>","<android.view.autofill.AutofillManager$AutofillCallback: void <init>()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>"
"<android.content.pm.PackageInstaller: void <init>()>","<android.content.pm.PackageInstaller: void <init>()>"
"<java.util.SortedMap: java.lang.Object lastKey()>","<java.util.SortedMap: java.lang.Object lastKey()>"
"<java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>"
"<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>","<android.text.format.DateFormat: char[] getDateFormatOrder(android.content.Context)>"
"<java.nio.channels.MembershipKey: java.nio.channels.MulticastChannel channel()>","<java.nio.channels.MembershipKey: java.nio.channels.MulticastChannel channel()>"
"<android.view.textclassifier.TextClassifierEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent: void <init>()>"
"<android.app.Notification: java.lang.String getGroup()>","<android.app.Notification: java.lang.String getGroup()>"
"<java.util.Locale: java.lang.String getDisplayName()>","<java.util.Locale: java.lang.String getDisplayName()>"
"<android.widget.TextView: int getMinLines()>","<android.widget.TextView: int getMinLines()>"
"<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>","<android.text.SpannableString: void setSpan(java.lang.Object,int,int,int)>"
"<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript valueOf(java.lang.String)>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript valueOf(java.lang.String)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.util.AndroidRuntimeException: void <init>(java.lang.String)>","<android.util.AndroidRuntimeException: void <init>(java.lang.String)>"
"<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>","<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>"
"<java.util.AbstractCollection: boolean addAll(java.util.Collection)>","<java.util.AbstractCollection: boolean addAll(java.util.Collection)>"
"<android.view.WindowInsets: int getStableInsetBottom()>","<android.view.WindowInsets: int getStableInsetBottom()>"
"<android.media.ImageReader: void discardFreeBuffers()>","<android.media.ImageReader: void discardFreeBuffers()>"
"<android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff$Mode)>","<android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff$Mode)>"
"<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.time.Duration: long getSeconds()>","<java.time.Duration: long getSeconds()>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,int)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(android.content.res.Resources,int)>"
"<java.util.Collection: java.util.Iterator iterator()>","<java.util.Collection: java.util.Iterator iterator()>"
"<android.content.ContextWrapper: void updateServiceGroup(android.content.ServiceConnection,int,int)>","<android.content.ContextWrapper: void updateServiceGroup(android.content.ServiceConnection,int,int)>"
"<android.app.Activity: void setResult(int,android.content.Intent)>","<android.app.Activity: void setResult(int,android.content.Intent)>"
"<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.content.Context: void revokeUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.Context: void revokeUriPermission(java.lang.String,android.net.Uri,int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>"
"<android.app.LoaderManager: void destroyLoader(int)>","<android.app.LoaderManager: void destroyLoader(int)>"
"<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)>"
"<java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>","<java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>"
"<java.time.ZonedDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.widget.TextView: void setFilters(android.text.InputFilter[])>","<android.widget.TextView: void setFilters(android.text.InputFilter[])>"
"<android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>","<android.app.AppComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)>"
"<java.util.concurrent.ExecutorService: void shutdown()>","<java.util.concurrent.ExecutorService: void shutdown()>"
"<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<java.util.jar.Manifest: void <init>()>","<java.util.jar.Manifest: void <init>()>"
"<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,boolean)>","<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,boolean)>"
"<java.nio.CharBuffer: java.nio.Buffer clear()>","<java.nio.CharBuffer: java.nio.Buffer clear()>"
"<org.json.JSONArray: org.json.JSONArray put(long)>","<org.json.JSONArray: org.json.JSONArray put(long)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)>"
"<android.view.accessibility.AccessibilityRequestPreparer: void <init>(android.view.View,int)>","<android.view.accessibility.AccessibilityRequestPreparer: void <init>(android.view.View,int)>"
"<android.widget.TextView: void setHeight(int)>","<android.widget.TextView: void setHeight(int)>"
"<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.graphics.drawable.Icon$OnDrawableLoadedListener,android.os.Handler)>","<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.graphics.drawable.Icon$OnDrawableLoadedListener,android.os.Handler)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>"
"<android.window.SplashScreenView: void setAlpha(float)>","<android.window.SplashScreenView: void setAlpha(float)>"
"<java.util.AbstractMap: boolean containsValue(java.lang.Object)>","<java.util.AbstractMap: boolean containsValue(java.lang.Object)>"
"<android.webkit.WebView: void clearSslPreferences()>","<android.webkit.WebView: void clearSslPreferences()>"
"<java.lang.Error: void <init>(java.lang.Throwable)>","<java.lang.Error: void <init>(java.lang.Throwable)>"
"<android.view.ViewDebug$FlagToString: int equals()>","<android.view.ViewDebug$FlagToString: int equals()>"
"<java.util.stream.LongStream: java.util.stream.LongStream range(long,long)>","<java.util.stream.LongStream: java.util.stream.LongStream range(long,long)>"
"<android.provider.Settings$Secure: void <clinit>()>","<android.provider.Settings$Secure: void <clinit>()>"
"<android.widget.FrameLayout: void <init>(android.content.Context)>","<android.widget.FrameLayout: void <init>(android.content.Context)>"
"<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>","<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>"
"<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>","<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>"
"<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.app.RemoteInput: boolean getAllowFreeFormInput()>","<android.app.RemoteInput: boolean getAllowFreeFormInput()>"
"<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>","<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>"
"<android.view.View: void invalidate()>","<android.view.View: void invalidate()>"
"<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>","<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>"
"<android.view.inputmethod.InputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>","<android.view.inputmethod.InputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>"
"<android.app.Activity: android.view.WindowManager getWindowManager()>","<android.app.Activity: android.view.WindowManager getWindowManager()>"
"<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>","<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>"
"<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>","<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>"
"<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>","<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>"
"<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>","<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>"
"<android.widget.ImageView: boolean hasOverlappingRendering()>","<android.widget.ImageView: boolean hasOverlappingRendering()>"
"<android.app.Dialog: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>","<android.app.Dialog: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>"
"<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>","<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>"
"<android.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)>","<android.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)>"
"<java.lang.Math: double random()>","<java.lang.Math: double random()>"
"<android.widget.PopupWindow: void setIsClippedToScreen(boolean)>","<android.widget.PopupWindow: void setIsClippedToScreen(boolean)>"
"<java.lang.Integer: int rotateLeft(int,int)>","<java.lang.Integer: int rotateLeft(int,int)>"
"<android.app.assist.AssistContent: void <clinit>()>","<android.app.assist.AssistContent: void <clinit>()>"
"<android.graphics.text.LineBreakConfig: void <init>()>","<android.graphics.text.LineBreakConfig: void <init>()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>"
"<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>","<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>","<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>"
"<android.content.Loader: void commitContentChanged()>","<android.content.Loader: void commitContentChanged()>"
"<android.os.SystemClock: boolean setCurrentTimeMillis(long)>","<android.os.SystemClock: boolean setCurrentTimeMillis(long)>"
"<android.widget.AdapterView: void addView(android.view.View,int)>","<android.widget.AdapterView: void addView(android.view.View,int)>"
"<android.content.Intent: java.lang.String getAction()>","<android.content.Intent: java.lang.String getAction()>"
"<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)>","<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)>"
"<android.widget.TextView: void setFreezesText(boolean)>","<android.widget.TextView: void setFreezesText(boolean)>"
"<android.os.ParcelFileDescriptor: java.lang.String toString()>","<android.os.ParcelFileDescriptor: java.lang.String toString()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,android.graphics.text.LineBreakConfig,int,boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,android.graphics.text.LineBreakConfig,int,boolean)>"
"<android.animation.ValueAnimator: void cancel()>","<android.animation.ValueAnimator: void cancel()>"
"<android.os.Parcel: int readInt()>","<android.os.Parcel: int readInt()>"
"<android.view.accessibility.AccessibilityRecord: boolean isPassword()>","<android.view.accessibility.AccessibilityRecord: boolean isPassword()>"
"<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>","<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>"
"<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>","<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>"
"<java.lang.Character$Subset: int hashCode()>","<java.lang.Character$Subset: int hashCode()>"
"<java.lang.Process: boolean waitFor(long,java.util.concurrent.TimeUnit)>","<java.lang.Process: boolean waitFor(long,java.util.concurrent.TimeUnit)>"
"<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<java.lang.Package: java.lang.String getSpecificationTitle()>","<java.lang.Package: java.lang.String getSpecificationTitle()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()>","<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()>"
"<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.io.File)>","<android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.io.File)>"
"<android.app.ActionBar: void setHomeButtonEnabled(boolean)>","<android.app.ActionBar: void setHomeButtonEnabled(boolean)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>"
"<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>","<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>"
"<android.widget.ListPopupWindow: void setAnimationStyle(int)>","<android.widget.ListPopupWindow: void setAnimationStyle(int)>"
"<android.view.ScrollCaptureSession: void <init>(android.view.Surface,android.graphics.Rect,android.graphics.Point)>","<android.view.ScrollCaptureSession: void <init>(android.view.Surface,android.graphics.Rect,android.graphics.Point)>"
"<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator)>"
"<java.lang.StackTraceElement: boolean isNativeMethod()>","<java.lang.StackTraceElement: boolean isNativeMethod()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>"
"<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>","<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>"
"<io.flutter.plugins.webviewflutter.d0: void <init>(io.flutter.plugins.webviewflutter.k$u)>","<io.flutter.plugins.webviewflutter.d0: void <init>(io.flutter.plugins.webviewflutter.k$u)>"
"<android.widget.TextView: boolean showContextMenu()>","<android.widget.TextView: boolean showContextMenu()>"
"<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit valueOf(java.lang.String)>","<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit valueOf(java.lang.String)>"
"<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)>","<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)>"
"<android.os.Debug: boolean waitingForDebugger()>","<android.os.Debug: boolean waitingForDebugger()>"
"<java.nio.DoubleBuffer: int hashCode()>","<java.nio.DoubleBuffer: int hashCode()>"
"<java.time.LocalDate: java.time.LocalDate minusMonths(long)>","<java.time.LocalDate: java.time.LocalDate minusMonths(long)>"
"<android.view.LayoutInflater$Factory2: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.view.LayoutInflater$Factory2: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<java.text.FieldPosition: int getBeginIndex()>","<java.text.FieldPosition: int getBeginIndex()>"
"<android.widget.AbsListView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.AbsListView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withEarlierOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.ZonedDateTime withEarlierOffsetAtOverlap()>"
"<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>","<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>"
"<android.os.Handler: void dump(android.util.Printer,java.lang.String)>","<android.os.Handler: void dump(android.util.Printer,java.lang.String)>"
"<java.util.stream.LongStream: java.util.stream.LongStream generate(java.util.function.LongSupplier)>","<java.util.stream.LongStream: java.util.stream.LongStream generate(java.util.function.LongSupplier)>"
"<java.nio.ShortBuffer: int compareTo(java.lang.Object)>","<java.nio.ShortBuffer: int compareTo(java.lang.Object)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>"
"<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>","<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>"
"<android.graphics.Point: void offset(int,int)>","<android.graphics.Point: void offset(int,int)>"
"<android.widget.Scroller: void extendDuration(int)>","<android.widget.Scroller: void extendDuration(int)>"
"<android.app.Application$OnProvideAssistDataListener: void onProvideAssistData(android.app.Activity,android.os.Bundle)>","<android.app.Application$OnProvideAssistDataListener: void onProvideAssistData(android.app.Activity,android.os.Bundle)>"
"<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>","<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>"
"<android.view.accessibility.AccessibilityRecord: int getWindowId()>","<android.view.accessibility.AccessibilityRecord: int getWindowId()>"
"<java.time.temporal.TemporalUnit: boolean isTimeBased()>","<java.time.temporal.TemporalUnit: boolean isTimeBased()>"
"<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>","<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>"
"<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>","<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>"
"<java.lang.SecurityManager: void checkDelete(java.lang.String)>","<java.lang.SecurityManager: void checkDelete(java.lang.String)>"
"<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream empty()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream empty()>"
"<android.graphics.drawable.Drawable: int getChangingConfigurations()>","<android.graphics.drawable.Drawable: int getChangingConfigurations()>"
"<android.webkit.WebView: boolean zoomIn()>","<android.webkit.WebView: boolean zoomIn()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction runOnCommit(java.lang.Runnable)>","<android.app.FragmentTransaction: android.app.FragmentTransaction runOnCommit(java.lang.Runnable)>"
"<java.net.URI: java.lang.String toASCIIString()>","<java.net.URI: java.lang.String toASCIIString()>"
"<android.view.textclassifier.TextClassification: java.util.List getActions()>","<android.view.textclassifier.TextClassification: java.util.List getActions()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusMonths(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusMonths(long)>"
"<java.util.IdentityHashMap: boolean equals(java.lang.Object)>","<java.util.IdentityHashMap: boolean equals(java.lang.Object)>"
"<android.media.session.MediaSession$Callback: void onPrepareFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPrepareFromUri(android.net.Uri,android.os.Bundle)>"
"<java.io.ObjectInputStream: java.lang.Object readObject()>","<java.io.ObjectInputStream: java.lang.Object readObject()>"
"<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()>","<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()>"
"<android.view.Window: android.media.session.MediaController getMediaController()>","<android.view.Window: android.media.session.MediaController getMediaController()>"
"<android.graphics.text.MeasuredText: float getWidth(int,int)>","<android.graphics.text.MeasuredText: float getWidth(int,int)>"
"<java.nio.Buffer: java.nio.Buffer reset()>","<java.nio.Buffer: java.nio.Buffer reset()>"
"<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()>","<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>"
"<android.content.pm.PackageManager: boolean isInstantApp()>","<android.content.pm.PackageManager: boolean isInstantApp()>"
"<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams,java.util.concurrent.Executor,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener)>","<android.view.textservice.TextServicesManager: android.view.textservice.SpellCheckerSession newSpellCheckerSession(android.view.textservice.SpellCheckerSession$SpellCheckerSessionParams,java.util.concurrent.Executor,android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener)>"
"<java.lang.Math: long decrementExact(long)>","<java.lang.Math: long decrementExact(long)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean removeIf(java.util.function.Predicate)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean removeIf(java.util.function.Predicate)>"
"<android.os.VibratorManager: void vibrate(android.os.CombinedVibration)>","<android.os.VibratorManager: void vibrate(android.os.CombinedVibration)>"
"<android.text.PrecomputedText$Params: java.lang.String toString()>","<android.text.PrecomputedText$Params: java.lang.String toString()>"
"<android.transition.Scene: void setExitAction(java.lang.Runnable)>","<android.transition.Scene: void setExitAction(java.lang.Runnable)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>"
"<android.content.res.Resources$Theme: int getExplicitStyle(android.util.AttributeSet)>","<android.content.res.Resources$Theme: int getExplicitStyle(android.util.AttributeSet)>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message build()>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message build()>"
"<java.util.List: java.lang.Object set(int,java.lang.Object)>","<java.util.List: java.lang.Object set(int,java.lang.Object)>"
"<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>","<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>"
"<android.view.View: void setMeasuredDimension(int,int)>","<android.view.View: void setMeasuredDimension(int,int)>"
"<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>","<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>"
"<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>","<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>"
"<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.time.format.TextStyle: java.time.format.TextStyle[] values()>","<java.time.format.TextStyle: java.time.format.TextStyle[] values()>"
"<android.view.View: android.view.WindowInsets getRootWindowInsets()>","<android.view.View: android.view.WindowInsets getRootWindowInsets()>"
"<android.net.http.SslCertificate$DName: java.lang.String getCName()>","<android.net.http.SslCertificate$DName: java.lang.String getCName()>"
"<java.util.Locale$Builder: java.util.Locale$Builder removeUnicodeLocaleAttribute(java.lang.String)>","<java.util.Locale$Builder: java.util.Locale$Builder removeUnicodeLocaleAttribute(java.lang.String)>"
"<java.util.stream.IntStream: java.util.OptionalInt max()>","<java.util.stream.IntStream: java.util.OptionalInt max()>"
"<android.view.Window: boolean isFloating()>","<android.view.Window: boolean isFloating()>"
"<android.media.MediaDescription: void <clinit>()>","<android.media.MediaDescription: void <clinit>()>"
"<android.view.textclassifier.TextClassificationContext: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassificationContext: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>"
"<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>","<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>"
"<android.media.MediaMetadata: long getLong(java.lang.String)>","<android.media.MediaMetadata: long getLong(java.lang.String)>"
"<android.view.ViewGroup: void dispatchSetSelected(boolean)>","<android.view.ViewGroup: void dispatchSetSelected(boolean)>"
"<android.content.res.TypedArray: boolean getBoolean(int,boolean)>","<android.content.res.TypedArray: boolean getBoolean(int,boolean)>"
"<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()>","<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()>"
"<java.lang.reflect.Field: int getModifiers()>","<java.lang.reflect.Field: int getModifiers()>"
"<android.view.KeyEvent: int getUnicodeChar(int)>","<android.view.KeyEvent: int getUnicodeChar(int)>"
"<java.nio.ByteBuffer: java.lang.Object array()>","<java.nio.ByteBuffer: java.lang.Object array()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.text.method.MovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>","<android.text.method.MovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>"
"<java.util.concurrent.CopyOnWriteArrayList: int size()>","<java.util.concurrent.CopyOnWriteArrayList: int size()>"
"<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>","<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>"
"<android.view.Window: void setTitle(java.lang.CharSequence)>","<android.view.Window: void setTitle(java.lang.CharSequence)>"
"<java.lang.Runtime: long totalMemory()>","<java.lang.Runtime: long totalMemory()>"
"<java.util.jar.Attributes: java.util.Set keySet()>","<java.util.jar.Attributes: java.util.Set keySet()>"
"<java.time.zone.ZoneOffsetTransition: int compareTo(java.time.zone.ZoneOffsetTransition)>","<java.time.zone.ZoneOffsetTransition: int compareTo(java.time.zone.ZoneOffsetTransition)>"
"<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>","<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>"
"<android.app.Activity: int getRequestedOrientation()>","<android.app.Activity: int getRequestedOrientation()>"
"<android.view.SurfaceHolder: void setSizeFromLayout()>","<android.view.SurfaceHolder: void setSizeFromLayout()>"
"<android.app.Notification$MessagingStyle$Message: android.app.Person getSenderPerson()>","<android.app.Notification$MessagingStyle$Message: android.app.Person getSenderPerson()>"
"<java.nio.CharBuffer: java.lang.String toString()>","<java.nio.CharBuffer: java.lang.String toString()>"
"<android.app.Activity: boolean isImmersive()>","<android.app.Activity: boolean isImmersive()>"
"<android.widget.RemoteViews$RemoteCollectionItems: android.widget.RemoteViews getItemView(int)>","<android.widget.RemoteViews$RemoteCollectionItems: android.widget.RemoteViews getItemView(int)>"
"<android.view.InputDevice$MotionRange: void <init>()>","<android.view.InputDevice$MotionRange: void <init>()>"
"<java.time.Period: java.time.Period negated()>","<java.time.Period: java.time.Period negated()>"
"<java.lang.String: java.lang.String intern()>","<java.lang.String: java.lang.String intern()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)>"
"<android.hardware.SensorDirectChannel: void <init>()>","<android.hardware.SensorDirectChannel: void <init>()>"
"<android.view.MotionEvent: float getToolMinor(int)>","<android.view.MotionEvent: float getToolMinor(int)>"
"<android.app.VoiceInteractor$PickOptionRequest: void <init>(android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>","<android.app.VoiceInteractor$PickOptionRequest: void <init>(android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
"<java.lang.Process: java.lang.Process destroyForcibly()>","<java.lang.Process: java.lang.Process destroyForcibly()>"
"<java.io.OutputStream: void flush()>","<java.io.OutputStream: void flush()>"
"<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>","<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>"
"<java.net.SocketImpl: void listen(int)>","<java.net.SocketImpl: void listen(int)>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setUsername(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setUsername(java.lang.String)>"
"<java.time.LocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.LocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.time.LocalDate: java.time.LocalDate 'from'(java.time.temporal.TemporalAccessor)>","<java.time.LocalDate: java.time.LocalDate 'from'(java.time.temporal.TemporalAccessor)>"
"<android.content.Context: int[] checkCallingUriPermissions(java.util.List,int)>","<android.content.Context: int[] checkCallingUriPermissions(java.util.List,int)>"
"<android.view.animation.LayoutAnimationController: float getDelay()>","<android.view.animation.LayoutAnimationController: float getDelay()>"
"<android.widget.AbsListView: void jumpDrawablesToCurrentState()>","<android.widget.AbsListView: void jumpDrawablesToCurrentState()>"
"<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>"
"<android.transition.TransitionPropagation: void <init>()>","<android.transition.TransitionPropagation: void <init>()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>"
"<io.flutter.plugins.webviewflutter.d3: void <init>()>","<io.flutter.plugins.webviewflutter.d3: void <init>()>"
"<android.app.Activity: android.window.SplashScreen getSplashScreen()>","<android.app.Activity: android.window.SplashScreen getSplashScreen()>"
"<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>","<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(android.media.session.PlaybackState$CustomAction)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(android.media.session.PlaybackState$CustomAction)>"
"<android.view.MotionEvent: int getAction()>","<android.view.MotionEvent: int getAction()>"
"<io.flutter.plugin.platform.p: void run()>","<io.flutter.plugin.platform.p: void run()>"
"<java.time.temporal.ValueRange: java.lang.String toString()>","<java.time.temporal.ValueRange: java.lang.String toString()>"
"<android.view.textclassifier.TextLinks: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLinks: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionActive()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionActive()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>"
"<android.view.KeyEvent: boolean hasNoModifiers()>","<android.view.KeyEvent: boolean hasNoModifiers()>"
"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.lang.Long: boolean equals(java.lang.Object)>","<java.lang.Long: boolean equals(java.lang.Object)>"
"<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>","<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>"
"<java.time.Duration: boolean isZero()>","<java.time.Duration: boolean isZero()>"
"<android.view.textclassifier.TextLinks$Request: void <init>()>","<android.view.textclassifier.TextLinks$Request: void <init>()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.text.SpannableString: java.lang.String toString()>","<android.text.SpannableString: java.lang.String toString()>"
"<android.content.ContentValues: int describeContents()>","<android.content.ContentValues: int describeContents()>"
"<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>","<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>"
"<android.text.PrecomputedText$Params: int getHyphenationFrequency()>","<android.text.PrecomputedText$Params: int getHyphenationFrequency()>"
"<java.time.Duration: java.time.Duration truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()>","<android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()>"
"<android.graphics.Path$Op: android.graphics.Path$Op valueOf(java.lang.String)>","<android.graphics.Path$Op: android.graphics.Path$Op valueOf(java.lang.String)>"
"<java.security.cert.CertificateException: void <init>(java.lang.String)>","<java.security.cert.CertificateException: void <init>(java.lang.String)>"
"<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>","<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>"
"<android.content.ContentProvider: boolean onCreate()>","<android.content.ContentProvider: boolean onCreate()>"
"<android.app.ActionBar: void setHideOffset(int)>","<android.app.ActionBar: void setHideOffset(int)>"
"<java.io.PrintStream: void println(java.lang.String)>","<java.io.PrintStream: void println(java.lang.String)>"
"<android.graphics.SurfaceTexture: void release()>","<android.graphics.SurfaceTexture: void release()>"
"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.os.Debug: void startMethodTracing(java.lang.String,int)>","<android.os.Debug: void startMethodTracing(java.lang.String,int)>"
"<java.time.LocalTime: java.time.LocalDateTime atDate(java.time.LocalDate)>","<java.time.LocalTime: java.time.LocalDateTime atDate(java.time.LocalDate)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems build()>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems build()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,java.lang.String)>"
"<android.view.InputDevice: void <clinit>()>","<android.view.InputDevice: void <clinit>()>"
"<android.widget.TextView: int getTotalPaddingStart()>","<android.widget.TextView: int getTotalPaddingStart()>"
"<java.util.Collections: java.util.NavigableMap emptyNavigableMap()>","<java.util.Collections: java.util.NavigableMap emptyNavigableMap()>"
"<android.widget.TextView: void setMinEms(int)>","<android.widget.TextView: void setMinEms(int)>"
"<android.view.textservice.SpellCheckerSubtype: void <init>(int,java.lang.String,java.lang.String)>","<android.view.textservice.SpellCheckerSubtype: void <init>(int,java.lang.String,java.lang.String)>"
"<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>","<org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)>"
"<android.graphics.Path$Direction: void <clinit>()>","<android.graphics.Path$Direction: void <clinit>()>"
"<android.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)>","<android.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)>"
"<android.media.MediaDescription: java.lang.CharSequence getTitle()>","<android.media.MediaDescription: java.lang.CharSequence getTitle()>"
"<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>","<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>"
"<android.content.pm.PackageManager$ResolveInfoFlags: android.content.pm.PackageManager$ResolveInfoFlags of(long)>","<android.content.pm.PackageManager$ResolveInfoFlags: android.content.pm.PackageManager$ResolveInfoFlags of(long)>"
"<java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>","<java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(double)>","<java.lang.StringBuffer: java.lang.StringBuffer append(double)>"
"<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>","<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>"
"<android.view.MenuItem: boolean collapseActionView()>","<android.view.MenuItem: boolean collapseActionView()>"
"<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<java.security.Provider: void putAll(java.util.Map)>","<java.security.Provider: void putAll(java.util.Map)>"
"<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>","<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>"
"<java.util.Calendar: int compareTo(java.util.Calendar)>","<java.util.Calendar: int compareTo(java.util.Calendar)>"
"<android.view.KeyEvent: int getDeviceId()>","<android.view.KeyEvent: int getDeviceId()>"
"<android.opengl.Matrix: void <init>()>","<android.opengl.Matrix: void <init>()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage(android.icu.util.ULocale)>"
"<java.util.ArrayDeque: java.lang.Object pop()>","<java.util.ArrayDeque: java.lang.Object pop()>"
"<android.icu.util.ULocale: java.lang.Object clone()>","<android.icu.util.ULocale: java.lang.Object clone()>"
"<java.util.jar.Attributes: int hashCode()>","<java.util.jar.Attributes: int hashCode()>"
"<android.content.SyncRequest$Builder: void <init>()>","<android.content.SyncRequest$Builder: void <init>()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>"
"<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>","<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>"
"<android.content.Context: void setTheme(int)>","<android.content.Context: void setTheme(int)>"
"<android.view.Window$Callback: void onAttachedToWindow()>","<android.view.Window$Callback: void onAttachedToWindow()>"
"<android.graphics.ImageDecoder$DecodeException: android.graphics.ImageDecoder$Source getSource()>","<android.graphics.ImageDecoder$DecodeException: android.graphics.ImageDecoder$Source getSource()>"
"<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>","<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>"
"<java.lang.NullPointerException: void <init>(java.lang.String)>","<java.lang.NullPointerException: void <init>(java.lang.String)>"
"<java.lang.Character: int compare(char,char)>","<java.lang.Character: int compare(char,char)>"
"<android.database.CharArrayBuffer: void <init>(int)>","<android.database.CharArrayBuffer: void <init>(int)>"
"<java.lang.Class: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.Class: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)>","<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int)>"
"<android.view.InputDevice: android.os.Vibrator getVibrator()>","<android.view.InputDevice: android.os.Vibrator getVibrator()>"
"<android.webkit.WebViewClient: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)>","<android.webkit.WebViewClient: void onSafeBrowsingHit(android.webkit.WebView,android.webkit.WebResourceRequest,int,android.webkit.SafeBrowsingResponse)>"
"<java.lang.Byte: int compareTo(java.lang.Byte)>","<java.lang.Byte: int compareTo(java.lang.Byte)>"
"<java.lang.System: java.io.Console console()>","<java.lang.System: java.io.Console console()>"
"<android.app.ActivityManager$AppTask: void <init>()>","<android.app.ActivityManager$AppTask: void <init>()>"
"<android.view.KeyEvent: void <init>(android.view.KeyEvent)>","<android.view.KeyEvent: void <init>(android.view.KeyEvent)>"
"<java.nio.Buffer: int limit()>","<java.nio.Buffer: int limit()>"
"<android.app.Activity: android.app.FragmentManager getFragmentManager()>","<android.app.Activity: android.app.FragmentManager getFragmentManager()>"
"<java.util.Locale$LanguageRange: java.lang.String getRange()>","<java.util.Locale$LanguageRange: java.lang.String getRange()>"
"<android.content.Intent: void removeExtra(java.lang.String)>","<android.content.Intent: void removeExtra(java.lang.String)>"
"<android.util.Size: java.lang.String toString()>","<android.util.Size: java.lang.String toString()>"
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.view.accessibility.AccessibilityEvent: void <init>(int)>","<android.view.accessibility.AccessibilityEvent: void <init>(int)>"
"<java.text.NumberFormat: boolean isGroupingUsed()>","<java.text.NumberFormat: boolean isGroupingUsed()>"
"<android.view.View: void addTouchables(java.util.ArrayList)>","<android.view.View: void addTouchables(java.util.ArrayList)>"
"<android.view.MotionEvent: float getSize(int)>","<android.view.MotionEvent: float getSize(int)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder clearTextLinks()>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder clearTextLinks()>"
"<android.os.Parcel: float[] createFloatArray()>","<android.os.Parcel: float[] createFloatArray()>"
"<java.security.Provider: void putService(java.security.Provider$Service)>","<java.security.Provider: void putService(java.security.Provider$Service)>"
"<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>"
"<android.util.ArrayMap: void putAll(android.util.ArrayMap)>","<android.util.ArrayMap: void putAll(android.util.ArrayMap)>"
"<java.nio.CharBuffer: java.nio.Buffer limit(int)>","<java.nio.CharBuffer: java.nio.Buffer limit(int)>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()>"
"<android.view.WindowInsetsAnimationController: android.graphics.Insets getCurrentInsets()>","<android.view.WindowInsetsAnimationController: android.graphics.Insets getCurrentInsets()>"
"<android.content.pm.PackageManager$Property: int getInteger()>","<android.content.pm.PackageManager$Property: int getInteger()>"
"<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>","<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>"
"<android.os.Build: void <clinit>()>","<android.os.Build: void <clinit>()>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean removeIf(java.util.function.Predicate)>","<java.util.concurrent.CopyOnWriteArrayList: boolean removeIf(java.util.function.Predicate)>"
"<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>","<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(android.view.View)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(android.view.View)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeIconResId(int)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeIconResId(int)>"
"<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.os.PatternMatcher: java.lang.String toString()>","<android.os.PatternMatcher: java.lang.String toString()>"
"<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()>","<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()>"
"<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle$Message)>","<android.app.Notification$MessagingStyle: android.app.Notification$MessagingStyle addMessage(android.app.Notification$MessagingStyle$Message)>"
"<org.json.JSONArray: long optLong(int)>","<org.json.JSONArray: long optLong(int)>"
"<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>","<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>"
"<java.nio.CharBuffer: java.nio.CharBuffer slice()>","<java.nio.CharBuffer: java.nio.CharBuffer slice()>"
"<java.util.Calendar: void set(int,int)>","<java.util.Calendar: void set(int,int)>"
"<java.text.NumberFormat: int getMaximumIntegerDigits()>","<java.text.NumberFormat: int getMaximumIntegerDigits()>"
"<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>","<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>"
"<java.lang.Math: long floorDiv(long,long)>","<java.lang.Math: long floorDiv(long,long)>"
"<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>","<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>"
"<android.graphics.RenderNode: boolean setClipToOutline(boolean)>","<android.graphics.RenderNode: boolean setClipToOutline(boolean)>"
"<java.lang.Math: int floorMod(long,int)>","<java.lang.Math: int floorMod(long,int)>"
"<java.time.chrono.Chronology: java.lang.String toString()>","<java.time.chrono.Chronology: java.lang.String toString()>"
"<android.view.animation.Transformation: void clear()>","<android.view.animation.Transformation: void clear()>"
"<android.os.Bundle: void <init>(android.os.PersistableBundle)>","<android.os.Bundle: void <init>(android.os.PersistableBundle)>"
"<android.app.FragmentManager: void unregisterFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks)>","<android.app.FragmentManager: void unregisterFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks)>"
"<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>","<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>"
"<android.webkit.WebResourceResponse: void setResponseHeaders(java.util.Map)>","<android.webkit.WebResourceResponse: void setResponseHeaders(java.util.Map)>"
"<android.hardware.display.VirtualDisplay$Callback: void onStopped()>","<android.hardware.display.VirtualDisplay$Callback: void onStopped()>"
"<java.net.NetworkInterface: boolean supportsMulticast()>","<java.net.NetworkInterface: boolean supportsMulticast()>"
"<android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText$Params)>","<android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText$Params)>"
"<android.graphics.RecordingCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>"
"<android.app.FragmentManager: void registerFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks,boolean)>","<android.app.FragmentManager: void registerFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks,boolean)>"
"<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>","<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object)>"
"<java.io.OutputStream: void write(byte[],int,int)>","<java.io.OutputStream: void write(byte[],int,int)>"
"<android.widget.Toolbar: void setLogoDescription(int)>","<android.widget.Toolbar: void setLogoDescription(int)>"
"<android.widget.TextView: int getGravity()>","<android.widget.TextView: int getGravity()>"
"<java.time.LocalDateTime: void <init>()>","<java.time.LocalDateTime: void <init>()>"
"<java.util.ArrayList: void <init>(java.util.Collection)>","<java.util.ArrayList: void <init>(java.util.Collection)>"
"<java.net.URI: java.net.URI resolve(java.net.URI)>","<java.net.URI: java.net.URI resolve(java.net.URI)>"
"<java.text.FieldPosition: int hashCode()>","<java.text.FieldPosition: int hashCode()>"
"<android.view.MenuItem: boolean isVisible()>","<android.view.MenuItem: boolean isVisible()>"
"<android.text.Layout: float getSecondaryHorizontal(int)>","<android.text.Layout: float getSecondaryHorizontal(int)>"
"<android.app.Notification$WearableExtender: java.util.List getActions()>","<android.app.Notification$WearableExtender: java.util.List getActions()>"
"<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>","<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>"
"<android.util.SparseBooleanArray: void <init>(int)>","<android.util.SparseBooleanArray: void <init>(int)>"
"<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>","<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>"
"<java.io.OutputStream: void write(int)>","<java.io.OutputStream: void write(int)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentAction(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setContentAction(int)>"
"<android.app.Activity: boolean onSearchRequested(android.view.SearchEvent)>","<android.app.Activity: boolean onSearchRequested(android.view.SearchEvent)>"
"<java.time.Duration: java.time.Duration dividedBy(long)>","<java.time.Duration: java.time.Duration dividedBy(long)>"
"<java.nio.ShortBuffer: java.nio.Buffer mark()>","<java.nio.ShortBuffer: java.nio.Buffer mark()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setHints(java.util.List)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setHints(java.util.List)>"
"<java.lang.StringBuffer: java.lang.String substring(int)>","<java.lang.StringBuffer: java.lang.String substring(int)>"
"<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>","<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>"
"<android.icu.util.ULocale: android.icu.util.ULocale getFallback()>","<android.icu.util.ULocale: android.icu.util.ULocale getFallback()>"
"<android.content.pm.SigningInfo: void <clinit>()>","<android.content.pm.SigningInfo: void <clinit>()>"
"<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>"
"<android.content.pm.PackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>","<android.content.pm.PackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>"
"<android.view.accessibility.AccessibilityRecord: int getDisplayId()>","<android.view.accessibility.AccessibilityRecord: int getDisplayId()>"
"<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[],int,int)>","<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[],int,int)>"
"<android.content.res.TypedArray: java.lang.String getPositionDescription()>","<android.content.res.TypedArray: java.lang.String getPositionDescription()>"
"<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>","<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>"
"<java.lang.reflect.Modifier: int interfaceModifiers()>","<java.lang.reflect.Modifier: int interfaceModifiers()>"
"<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>","<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>"
"<java.util.Locale: java.lang.String getDisplayVariant()>","<java.util.Locale: java.lang.String getDisplayVariant()>"
"<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>","<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>"
"<java.util.Arrays: int hashCode(long[])>","<java.util.Arrays: int hashCode(long[])>"
"<java.lang.Throwable: java.lang.String getMessage()>","<java.lang.Throwable: java.lang.String getMessage()>"
"<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)>","<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)>"
"<java.io.InputStreamReader: int read(char[],int,int)>","<java.io.InputStreamReader: int read(char[],int,int)>"
"<android.content.pm.ChangedPackages: java.util.List getPackageNames()>","<android.content.pm.ChangedPackages: java.util.List getPackageNames()>"
"<android.os.Parcel: java.util.ArrayList createInterfaceArrayList(java.util.function.Function)>","<android.os.Parcel: java.util.ArrayList createInterfaceArrayList(java.util.function.Function)>"
"<java.io.ObjectInputStream: int readUnsignedByte()>","<java.io.ObjectInputStream: int readUnsignedByte()>"
"<java.time.LocalDate: java.time.Month getMonth()>","<java.time.LocalDate: java.time.Month getMonth()>"
"<java.util.UUID: int compareTo(java.util.UUID)>","<java.util.UUID: int compareTo(java.util.UUID)>"
"<java.time.Clock: java.time.Clock fixed(java.time.Instant,java.time.ZoneId)>","<java.time.Clock: java.time.Clock fixed(java.time.Instant,java.time.ZoneId)>"
"<android.view.Window: android.view.View requireViewById(int)>","<android.view.Window: android.view.View requireViewById(int)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThread(java.lang.Thread)>","<java.util.concurrent.locks.ReentrantReadWriteLock: boolean hasQueuedThread(java.lang.Thread)>"
"<android.media.session.MediaController$Callback: void <init>()>","<android.media.session.MediaController$Callback: void <init>()>"
"<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>","<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>"
"<java.lang.String: java.lang.String valueOf(boolean)>","<java.lang.String: java.lang.String valueOf(boolean)>"
"<java.lang.Class: java.lang.String toString()>","<java.lang.Class: java.lang.String toString()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>","<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>"
"<android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>"
"<android.webkit.WebViewRenderProcessClient: void onRenderProcessUnresponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>","<android.webkit.WebViewRenderProcessClient: void onRenderProcessUnresponsive(android.webkit.WebView,android.webkit.WebViewRenderProcess)>"
"<java.io.File: void <init>(java.lang.String)>","<java.io.File: void <init>(java.lang.String)>"
"<android.app.Notification$Builder: android.app.Notification$Builder setCategory(java.lang.String)>","<android.app.Notification$Builder: android.app.Notification$Builder setCategory(java.lang.String)>"
"<android.view.View: void setPointerIcon(android.view.PointerIcon)>","<android.view.View: void setPointerIcon(android.view.PointerIcon)>"
"<android.view.InputDevice$MotionRange: float getResolution()>","<android.view.InputDevice$MotionRange: float getResolution()>"
"<android.content.Context: void startActivities(android.content.Intent[])>","<android.content.Context: void startActivities(android.content.Intent[])>"
"<android.graphics.ImageDecoder: void setTargetSampleSize(int)>","<android.graphics.ImageDecoder: void setTargetSampleSize(int)>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>"
"<java.lang.Float: int compareTo(java.lang.Float)>","<java.lang.Float: int compareTo(java.lang.Float)>"
"<java.lang.String: java.lang.CharSequence subSequence(int,int)>","<java.lang.String: java.lang.CharSequence subSequence(int,int)>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(int,char)>","<java.nio.CharBuffer: java.nio.CharBuffer put(int,char)>"
"<android.webkit.WebStorage: void deleteAllData()>","<android.webkit.WebStorage: void deleteAllData()>"
"<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()>","<java.security.cert.X509Certificate: java.util.Collection getIssuerAlternativeNames()>"
"<android.media.ImageReader: int getWidth()>","<android.media.ImageReader: int getWidth()>"
"<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>","<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>"
"<java.text.NumberFormat: void <init>()>","<java.text.NumberFormat: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean,boolean)>"
"<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>","<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>"
"<java.lang.Character: boolean isDigit(int)>","<java.lang.Character: boolean isDigit(int)>"
"<java.security.Provider: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.security.Provider: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<java.lang.Class: java.lang.ClassLoader getClassLoader()>","<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
"<android.media.MediaDescription: java.lang.CharSequence getDescription()>","<android.media.MediaDescription: java.lang.CharSequence getDescription()>"
"<android.content.pm.PackageInstaller$SessionParams: void setReferrerUri(android.net.Uri)>","<android.content.pm.PackageInstaller$SessionParams: void setReferrerUri(android.net.Uri)>"
"<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>"
"<android.widget.PopupWindow: void setContentView(android.view.View)>","<android.widget.PopupWindow: void setContentView(android.view.View)>"
"<java.lang.Number: byte byteValue()>","<java.lang.Number: byte byteValue()>"
"<android.content.Intent: void <clinit>()>","<android.content.Intent: void <clinit>()>"
"<android.text.Selection: int getSelectionStart(java.lang.CharSequence)>","<android.text.Selection: int getSelectionStart(java.lang.CharSequence)>"
"<android.view.Window: void setType(int)>","<android.view.Window: void setType(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withHour(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withHour(int)>"
"<java.text.Format: java.lang.String format(java.lang.Object)>","<java.text.Format: java.lang.String format(java.lang.Object)>"
"<java.util.stream.Stream: java.util.Optional findAny()>","<java.util.stream.Stream: java.util.Optional findAny()>"
"<android.webkit.WebChromeClient: void onPermissionRequest(android.webkit.PermissionRequest)>","<android.webkit.WebChromeClient: void onPermissionRequest(android.webkit.PermissionRequest)>"
"<android.widget.TextView: void setTextLocale(java.util.Locale)>","<android.widget.TextView: void setTextLocale(java.util.Locale)>"
"<android.widget.Toolbar: java.lang.CharSequence getTitle()>","<android.widget.Toolbar: java.lang.CharSequence getTitle()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>","<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>"
"<java.util.OptionalInt: void <init>()>","<java.util.OptionalInt: void <init>()>"
"<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>","<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>"
"<android.view.accessibility.AccessibilityWindowInfo: int getId()>","<android.view.accessibility.AccessibilityWindowInfo: int getId()>"
"<android.view.textclassifier.TextClassifierEvent: int describeContents()>","<android.view.textclassifier.TextClassifierEvent: int describeContents()>"
"<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>","<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setMediaSize(android.print.PrintAttributes$MediaSize)>","<android.print.PrintAttributes$Builder: android.print.PrintAttributes$Builder setMediaSize(android.print.PrintAttributes$MediaSize)>"
"<android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)>"
"<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()>","<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()>"
"<java.lang.Enum: java.lang.Class getDeclaringClass()>","<java.lang.Enum: java.lang.Class getDeclaringClass()>"
"<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>"
"<java.io.File: boolean setReadable(boolean,boolean)>","<java.io.File: boolean setReadable(boolean,boolean)>"
"<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.app.Notification$MessagingStyle: java.util.List getHistoricMessages()>","<android.app.Notification$MessagingStyle: java.util.List getHistoricMessages()>"
"<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>","<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>"
"<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>","<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>"
"<android.view.ViewGroup: boolean onNestedFling(android.view.View,float,float,boolean)>","<android.view.ViewGroup: boolean onNestedFling(android.view.View,float,float,boolean)>"
"<org.json.JSONObject: java.lang.Object opt(java.lang.String)>","<org.json.JSONObject: java.lang.Object opt(java.lang.String)>"
"<android.graphics.RenderNode: int getTop()>","<android.graphics.RenderNode: int getTop()>"
"<android.graphics.NinePatch: java.lang.String getName()>","<android.graphics.NinePatch: java.lang.String getName()>"
"<android.app.Notification$BubbleMetadata: void writeToParcel(android.os.Parcel,int)>","<android.app.Notification$BubbleMetadata: void writeToParcel(android.os.Parcel,int)>"
"<java.time.chrono.ChronoLocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>"
"<android.widget.ImageView: void onDraw(android.graphics.Canvas)>","<android.widget.ImageView: void onDraw(android.graphics.Canvas)>"
"<java.io.FileNotFoundException: void <init>(java.lang.String)>","<java.io.FileNotFoundException: void <init>(java.lang.String)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>","<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>"
"<android.view.textclassifier.TextLinks$TextLink: java.lang.String getEntity(int)>","<android.view.textclassifier.TextLinks$TextLink: java.lang.String getEntity(int)>"
"<android.app.Activity: void finishAndRemoveTask()>","<android.app.Activity: void finishAndRemoveTask()>"
"<android.view.View: void destroyDrawingCache()>","<android.view.View: void destroyDrawingCache()>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setNavigationBarColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setNavigationBarColor(int)>"
"<android.view.KeyCharacterMap: boolean deviceHasKey(int)>","<android.view.KeyCharacterMap: boolean deviceHasKey(int)>"
"<android.view.textservice.SpellCheckerSubtype: void <clinit>()>","<android.view.textservice.SpellCheckerSubtype: void <clinit>()>"
"<android.widget.AbsListView: void setItemChecked(int,boolean)>","<android.widget.AbsListView: void setItemChecked(int,boolean)>"
"<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])>","<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])>"
"<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>"
"<android.os.Trace: void endSection()>","<android.os.Trace: void endSection()>"
"<android.graphics.fonts.FontStyle: int getWeight()>","<android.graphics.fonts.FontStyle: int getWeight()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>","<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>"
"<android.app.PictureInPictureUiState: int hashCode()>","<android.app.PictureInPictureUiState: int hashCode()>"
"<java.time.temporal.ChronoField: java.lang.String toString()>","<java.time.temporal.ChronoField: java.lang.String toString()>"
"<java.io.FileOutputStream: void write(byte[])>","<java.io.FileOutputStream: void write(byte[])>"
"<android.hardware.lights.Light: int getType()>","<android.hardware.lights.Light: int getType()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setExtension(char,java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setExtension(char,java.lang.String)>"
"<java.lang.Character: int hashCode()>","<java.lang.Character: int hashCode()>"
"<android.graphics.Canvas: android.graphics.Rect getClipBounds()>","<android.graphics.Canvas: android.graphics.Rect getClipBounds()>"
"<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>","<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>"
"<java.lang.AssertionError: void <init>(java.lang.Object)>","<java.lang.AssertionError: void <init>(java.lang.Object)>"
"<java.util.Set: java.lang.Object[] toArray()>","<java.util.Set: java.lang.Object[] toArray()>"
"<android.media.Session2Token: int describeContents()>","<android.media.Session2Token: int describeContents()>"
"<java.security.CodeSigner: java.security.Timestamp getTimestamp()>","<java.security.CodeSigner: java.security.Timestamp getTimestamp()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>","<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>"
"<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>","<android.graphics.ImageDecoder: android.graphics.drawable.Drawable decodeDrawable(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>"
"<android.app.Fragment: boolean isVisible()>","<android.app.Fragment: boolean isVisible()>"
"<java.util.jar.Attributes: java.util.Set entrySet()>","<java.util.jar.Attributes: java.util.Set entrySet()>"
"<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)>","<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)>"
"<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setIntegerPart(java.lang.String)>","<android.text.style.TtsSpan$DecimalBuilder: android.text.style.TtsSpan$DecimalBuilder setIntegerPart(java.lang.String)>"
"<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setFractionalPart(java.lang.String)>","<android.text.style.TtsSpan$MoneyBuilder: android.text.style.TtsSpan$MoneyBuilder setFractionalPart(java.lang.String)>"
"<android.view.View: boolean getRevealOnFocusHint()>","<android.view.View: boolean getRevealOnFocusHint()>"
"<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>","<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>"
"<android.widget.ListPopupWindow: boolean isShowing()>","<android.widget.ListPopupWindow: boolean isShowing()>"
"<java.security.cert.CertPath: byte[] getEncoded()>","<java.security.cert.CertPath: byte[] getEncoded()>"
"<android.widget.TextView: boolean isInputMethodTarget()>","<android.widget.TextView: boolean isInputMethodTarget()>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>","<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>"
"<android.util.SparseBooleanArray: int keyAt(int)>","<android.util.SparseBooleanArray: int keyAt(int)>"
"<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setAutoExpandBubble(boolean)>","<android.app.Notification$BubbleMetadata$Builder: android.app.Notification$BubbleMetadata$Builder setAutoExpandBubble(boolean)>"
"<java.util.concurrent.ThreadLocalRandom: float nextFloat()>","<java.util.concurrent.ThreadLocalRandom: float nextFloat()>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long,long,long)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.LongStream longs(long,long,long)>"
"<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>","<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>"
"<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setEditChoicesBeforeSending(int)>","<android.app.RemoteInput$Builder: android.app.RemoteInput$Builder setEditChoicesBeforeSending(int)>"
"<android.graphics.Paint$Align: android.graphics.Paint$Align[] values()>","<android.graphics.Paint$Align: android.graphics.Paint$Align[] values()>"
"<android.app.ActionBar: void <init>()>","<android.app.ActionBar: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>"
"<android.widget.AdapterView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.AdapterView: java.lang.CharSequence getAccessibilityClassName()>"
"<java.math.BigInteger: long longValueExact()>","<java.math.BigInteger: long longValueExact()>"
"<java.lang.Short: void <init>(short)>","<java.lang.Short: void <init>(short)>"
"<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo build()>","<android.print.PrintDocumentInfo$Builder: android.print.PrintDocumentInfo build()>"
"<android.content.pm.PackageManager: java.util.List getInstalledModules(int)>","<android.content.pm.PackageManager: java.util.List getInstalledModules(int)>"
"<android.view.Display: java.lang.String toString()>","<android.view.Display: java.lang.String toString()>"
"<java.nio.file.WatchEvent$Kind: java.lang.String name()>","<java.nio.file.WatchEvent$Kind: java.lang.String name()>"
"<android.graphics.Color: android.graphics.Color valueOf(int)>","<android.graphics.Color: android.graphics.Color valueOf(int)>"
"<android.app.ActionBar$Tab: void <init>()>","<android.app.ActionBar$Tab: void <init>()>"
"<android.view.autofill.AutofillManager: android.view.autofill.AutofillId getNextAutofillId()>","<android.view.autofill.AutofillManager: android.view.autofill.AutofillId getNextAutofillId()>"
"<java.lang.System: void <clinit>()>","<java.lang.System: void <clinit>()>"
"<android.view.ContentInfo: int describeContents()>","<android.view.ContentInfo: int describeContents()>"
"<android.view.View: void onFinishInflate()>","<android.view.View: void onFinishInflate()>"
"<android.view.WindowManager$BadTokenException: void <init>()>","<android.view.WindowManager$BadTokenException: void <init>()>"
"<java.lang.Short: int hashCode(short)>","<java.lang.Short: int hashCode(short)>"
"<android.widget.ListView: int getHeaderViewsCount()>","<android.widget.ListView: int getHeaderViewsCount()>"
"<android.text.Selection: void <clinit>()>","<android.text.Selection: void <clinit>()>"
"<android.content.res.Resources: int getDimensionPixelOffset(int)>","<android.content.res.Resources: int getDimensionPixelOffset(int)>"
"<java.util.Random: double nextGaussian()>","<java.util.Random: double nextGaussian()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable,long,java.util.concurrent.TimeUnit)>"
"<android.opengl.Matrix: boolean invertM(float[],int,float[],int)>","<android.opengl.Matrix: boolean invertM(float[],int,float[],int)>"
"<android.app.FragmentManager$BackStackEntry: int getBreadCrumbShortTitleRes()>","<android.app.FragmentManager$BackStackEntry: int getBreadCrumbShortTitleRes()>"
"<android.widget.RemoteViews$RemoteCollectionItems: int describeContents()>","<android.widget.RemoteViews$RemoteCollectionItems: int describeContents()>"
"<java.nio.LongBuffer: java.nio.Buffer limit(int)>","<java.nio.LongBuffer: java.nio.Buffer limit(int)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>"
"<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>","<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>"
"<android.content.IntentFilter: void addDataScheme(java.lang.String)>","<android.content.IntentFilter: void addDataScheme(java.lang.String)>"
"<android.view.KeyEvent: boolean isNumLockOn()>","<android.view.KeyEvent: boolean isNumLockOn()>"
"<android.text.Selection: void selectAll(android.text.Spannable)>","<android.text.Selection: void selectAll(android.text.Spannable)>"
"<android.view.View: int combineMeasuredStates(int,int)>","<android.view.View: int combineMeasuredStates(int,int)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setIsContentSpatialized(boolean)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setIsContentSpatialized(boolean)>"
"<java.lang.Character: boolean isMirrored(int)>","<java.lang.Character: boolean isMirrored(int)>"
"<java.util.concurrent.atomic.AtomicReference: java.lang.Object getPlain()>","<java.util.concurrent.atomic.AtomicReference: java.lang.Object getPlain()>"
"<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>","<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>"
"<android.webkit.WebView: void setWebContentsDebuggingEnabled(boolean)>","<android.webkit.WebView: void setWebContentsDebuggingEnabled(boolean)>"
"<java.util.Arrays: void parallelSort(java.lang.Comparable[],int,int)>","<java.util.Arrays: void parallelSort(java.lang.Comparable[],int,int)>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int,boolean)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int,boolean)>"
"<android.content.res.AssetManager$AssetInputStream: long skip(long)>","<android.content.res.AssetManager$AssetInputStream: long skip(long)>"
"<android.app.Activity: void setTitleColor(int)>","<android.app.Activity: void setTitleColor(int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfMonth(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfMonth(int)>"
"<org.json.JSONTokener: java.lang.String nextTo(char)>","<org.json.JSONTokener: java.lang.String nextTo(char)>"
"<java.text.DateFormat: java.text.DateFormat getTimeInstance(int)>","<java.text.DateFormat: java.text.DateFormat getTimeInstance(int)>"
"<android.app.Activity: void onPostCreate(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onPostCreate(android.os.Bundle,android.os.PersistableBundle)>"
"<android.app.Notification: java.lang.String getChannelId()>","<android.app.Notification: java.lang.String getChannelId()>"
"<java.util.stream.IntStream$Builder: void accept(int)>","<java.util.stream.IntStream$Builder: void accept(int)>"
"<android.webkit.WebView: void onConfigurationChanged(android.content.res.Configuration)>","<android.webkit.WebView: void onConfigurationChanged(android.content.res.Configuration)>"
"<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.LinkedBlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>"
"<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>","<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>"
"<java.lang.Integer: short shortValue()>","<java.lang.Integer: short shortValue()>"
"<android.graphics.ColorSpace: void <clinit>()>","<android.graphics.ColorSpace: void <clinit>()>"
"<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>","<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>"
"<android.media.session.MediaController$TransportControls: void skipToNext()>","<android.media.session.MediaController$TransportControls: void skipToNext()>"
"<android.app.Dialog: void onAttachedToWindow()>","<android.app.Dialog: void onAttachedToWindow()>"
"<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence)>","<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.view.View: float getCameraDistance()>","<android.view.View: float getCameraDistance()>"
"<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>","<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>"
"<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>","<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>"
"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>","<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>"
"<java.util.ArrayDeque: java.lang.Object removeLast()>","<java.util.ArrayDeque: java.lang.Object removeLast()>"
"<android.view.View: void setNextClusterForwardId(int)>","<android.view.View: void setNextClusterForwardId(int)>"
"<android.app.Person: boolean equals(java.lang.Object)>","<android.app.Person: boolean equals(java.lang.Object)>"
"<android.widget.Adapter: int getCount()>","<android.widget.Adapter: int getCount()>"
"<java.net.Socket: void setPerformancePreferences(int,int,int)>","<java.net.Socket: void setPerformancePreferences(int,int,int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript()>","<android.icu.util.ULocale: java.lang.String getDisplayScript()>"
"<android.content.ContentProvider$PipeDataWriter: void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object)>","<android.content.ContentProvider$PipeDataWriter: void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object)>"
"<java.util.Dictionary: void <init>()>","<java.util.Dictionary: void <init>()>"
"<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>","<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>"
"<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>","<android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>"
"<android.webkit.WebSettings: void setCacheMode(int)>","<android.webkit.WebSettings: void setCacheMode(int)>"
"<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(long,double,double)>","<java.util.concurrent.ThreadLocalRandom: java.util.stream.DoubleStream doubles(long,double,double)>"
"<android.util.Property: java.lang.Object get(java.lang.Object)>","<android.util.Property: java.lang.Object get(java.lang.Object)>"
"<android.app.Notification$CallStyle: android.app.Notification$CallStyle forOngoingCall(android.app.Person,android.app.PendingIntent)>","<android.app.Notification$CallStyle: android.app.Notification$CallStyle forOngoingCall(android.app.Person,android.app.PendingIntent)>"
"<java.time.format.DecimalStyle: void <init>()>","<java.time.format.DecimalStyle: void <init>()>"
"<java.net.ServerSocket: java.net.ServerSocket setOption(java.net.SocketOption,java.lang.Object)>","<java.net.ServerSocket: java.net.ServerSocket setOption(java.net.SocketOption,java.lang.Object)>"
"<android.webkit.WebView: void setTextClassifier(android.view.textclassifier.TextClassifier)>","<android.webkit.WebView: void setTextClassifier(android.view.textclassifier.TextClassifier)>"
"<android.view.View: void onScreenStateChanged(int)>","<android.view.View: void onScreenStateChanged(int)>"
"<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>","<java.util.concurrent.ThreadPoolExecutor: boolean isTerminated()>"
"<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>","<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(int,int)>"
"<android.view.View: void setAutoHandwritingEnabled(boolean)>","<android.view.View: void setAutoHandwritingEnabled(boolean)>"
"<java.io.OutputStream: java.io.OutputStream nullOutputStream()>","<java.io.OutputStream: java.io.OutputStream nullOutputStream()>"
"<java.util.AbstractSet: boolean equals(java.lang.Object)>","<java.util.AbstractSet: boolean equals(java.lang.Object)>"
"<android.content.res.TypedArray: void close()>","<android.content.res.TypedArray: void close()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>"
"<java.util.function.LongSupplier: long getAsLong()>","<java.util.function.LongSupplier: long getAsLong()>"
"<android.view.DisplayCutout: android.graphics.Path getCutoutPath()>","<android.view.DisplayCutout: android.graphics.Path getCutoutPath()>"
"<android.widget.TextView: float getLineSpacingExtra()>","<android.widget.TextView: float getLineSpacingExtra()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>"
"<java.util.Arrays: int compareUnsigned(short[],int,int,short[],int,int)>","<java.util.Arrays: int compareUnsigned(short[],int,int,short[],int,int)>"
"<android.view.Window: void setContentView(int)>","<android.view.Window: void setContentView(int)>"
"<android.graphics.drawable.Drawable: void setAlpha(int)>","<android.graphics.drawable.Drawable: void setAlpha(int)>"
"<android.view.inputmethod.TextSnapshot: int getCursorCapsMode()>","<android.view.inputmethod.TextSnapshot: int getCursorCapsMode()>"
"<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>"
"<android.view.ViewTreeObserver: void dispatchOnDraw()>","<android.view.ViewTreeObserver: void dispatchOnDraw()>"
"<android.app.ActionBar: android.app.ActionBar$Tab getTabAt(int)>","<android.app.ActionBar: android.app.ActionBar$Tab getTabAt(int)>"
"<java.util.LinkedList: void <init>(java.util.Collection)>","<java.util.LinkedList: void <init>(java.util.Collection)>"
"<android.widget.AbsoluteLayout$LayoutParams: java.lang.String debug(java.lang.String)>","<android.widget.AbsoluteLayout$LayoutParams: java.lang.String debug(java.lang.String)>"
"<android.os.RemoteException: void <init>(java.lang.String)>","<android.os.RemoteException: void <init>(java.lang.String)>"
"<android.media.Rating: boolean isRated()>","<android.media.Rating: boolean isRated()>"
"<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>","<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>"
"<android.app.Notification$Action: int describeContents()>","<android.app.Notification$Action: int describeContents()>"
"<android.content.res.Resources: java.lang.CharSequence getText(int)>","<android.content.res.Resources: java.lang.CharSequence getText(int)>"
"<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>","<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>"
"<android.view.WindowInsetsController: int getSystemBarsAppearance()>","<android.view.WindowInsetsController: int getSystemBarsAppearance()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)>"
"<io.flutter.plugins.webviewflutter.y1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>","<io.flutter.plugins.webviewflutter.y1: void <init>(io.flutter.plugins.webviewflutter.k$c0)>"
"<android.app.PendingIntent: boolean equals(java.lang.Object)>","<android.app.PendingIntent: boolean equals(java.lang.Object)>"
"<android.view.textservice.SuggestionsInfo: int getSequence()>","<android.view.textservice.SuggestionsInfo: int getSequence()>"
"<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>","<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>"
"<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()>","<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()>"
"<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>","<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>"
"<android.media.session.MediaController$TransportControls: void skipToPrevious()>","<android.media.session.MediaController$TransportControls: void skipToPrevious()>"
"<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>","<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>"
"<android.graphics.ColorSpace$Connector: void <init>()>","<android.graphics.ColorSpace$Connector: void <init>()>"
"<android.view.ViewGroup: void detachViewsFromParent(int,int)>","<android.view.ViewGroup: void detachViewsFromParent(int,int)>"
"<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>","<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>"
"<java.lang.Object: void notifyAll()>","<java.lang.Object: void notifyAll()>"
"<android.content.Intent: java.lang.Object clone()>","<android.content.Intent: java.lang.Object clone()>"
"<org.xmlpull.v1.XmlPullParser: int nextToken()>","<org.xmlpull.v1.XmlPullParser: int nextToken()>"
"<java.util.Arrays: void sort(float[],int,int)>","<java.util.Arrays: void sort(float[],int,int)>"
"<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int)>","<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int)>"
"<java.lang.Short: double doubleValue()>","<java.lang.Short: double doubleValue()>"
"<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>","<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>"
"<android.view.animation.Animation: void setStartTime(long)>","<android.view.animation.Animation: void setStartTime(long)>"
"<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>","<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>"
"<android.icu.util.ULocale: java.lang.String getVariant(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getVariant(java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>","<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>"
"<android.util.SparseIntArray: void clear()>","<android.util.SparseIntArray: void clear()>"
"<android.content.pm.ApplicationInfo: int getRequestRawExternalStorageAccess()>","<android.content.pm.ApplicationInfo: int getRequestRawExternalStorageAccess()>"
"<io.flutter.plugins.webviewflutter.v1: void a(java.lang.Object,y.a$e)>","<io.flutter.plugins.webviewflutter.v1: void a(java.lang.Object,y.a$e)>"
"<android.util.Base64: byte[] decode(java.lang.String,int)>","<android.util.Base64: byte[] decode(java.lang.String,int)>"
"<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>","<java.util.concurrent.CopyOnWriteArrayList: void forEach(java.util.function.Consumer)>"
"<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>","<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>"
"<java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>","<java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>"
"<java.time.ZoneOffset: java.time.ZoneOffset of(java.lang.String)>","<java.time.ZoneOffset: java.time.ZoneOffset of(java.lang.String)>"
"<android.widget.ListView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>","<android.widget.ListView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>"
"<java.time.Instant: int compareTo(java.time.Instant)>","<java.time.Instant: int compareTo(java.time.Instant)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLocked()>","<java.util.concurrent.locks.ReentrantReadWriteLock: boolean isWriteLocked()>"
"<java.security.cert.X509Extension: java.util.Set getNonCriticalExtensionOIDs()>","<java.security.cert.X509Extension: java.util.Set getNonCriticalExtensionOIDs()>"
"<android.view.KeyEvent: int getAction()>","<android.view.KeyEvent: int getAction()>"
"<java.lang.Package: java.lang.String getImplementationTitle()>","<java.lang.Package: java.lang.String getImplementationTitle()>"
"<android.os.SystemClock: java.time.Clock currentGnssTimeClock()>","<android.os.SystemClock: java.time.Clock currentGnssTimeClock()>"
"<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>","<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int,int)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int,int)>"
"<android.webkit.WebResourceResponse: java.lang.String getEncoding()>","<android.webkit.WebResourceResponse: java.lang.String getEncoding()>"
"<android.graphics.Paint: float getStrikeThruThickness()>","<android.graphics.Paint: float getStrikeThruThickness()>"
"<android.graphics.Paint: boolean isStrikeThruText()>","<android.graphics.Paint: boolean isStrikeThruText()>"
"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"
"<java.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>","<java.text.NumberFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>"
"<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder obtain(java.lang.CharSequence,android.text.TextPaint,int)>","<android.text.DynamicLayout$Builder: android.text.DynamicLayout$Builder obtain(java.lang.CharSequence,android.text.TextPaint,int)>"
"<java.util.Properties: void store(java.io.Writer,java.lang.String)>","<java.util.Properties: void store(java.io.Writer,java.lang.String)>"
"<java.io.FilterOutputStream: void flush()>","<java.io.FilterOutputStream: void flush()>"
"<android.view.MotionEvent: float getToolMinor()>","<android.view.MotionEvent: float getToolMinor()>"
"<java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)>","<java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)>"
"<java.net.DatagramPacket: int getLength()>","<java.net.DatagramPacket: int getLength()>"
"<java.lang.Math: int max(int,int)>","<java.lang.Math: int max(int,int)>"
"<android.view.autofill.AutofillId: boolean equals(java.lang.Object)>","<android.view.autofill.AutofillId: boolean equals(java.lang.Object)>"
"<android.view.View: void setVerticalScrollBarEnabled(boolean)>","<android.view.View: void setVerticalScrollBarEnabled(boolean)>"
"<java.lang.Math: double log(double)>","<java.lang.Math: double log(double)>"
"<java.time.ZoneOffset: boolean equals(java.lang.Object)>","<java.time.ZoneOffset: boolean equals(java.lang.Object)>"
"<android.text.style.TtsSpan$Builder: void <init>(java.lang.String)>","<android.text.style.TtsSpan$Builder: void <init>(java.lang.String)>"
"<android.view.Window: void setSharedElementsUseOverlay(boolean)>","<android.view.Window: void setSharedElementsUseOverlay(boolean)>"
"<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>","<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>"
"<android.view.View: int computeHorizontalScrollRange()>","<android.view.View: int computeHorizontalScrollRange()>"
"<java.text.DateFormat: int hashCode()>","<java.text.DateFormat: int hashCode()>"
"<java.time.LocalTime: boolean isAfter(java.time.LocalTime)>","<java.time.LocalTime: boolean isAfter(java.time.LocalTime)>"
"<android.content.Context: boolean deleteSharedPreferences(java.lang.String)>","<android.content.Context: boolean deleteSharedPreferences(java.lang.String)>"
"<java.io.Console: void flush()>","<java.io.Console: void flush()>"
"<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>","<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>"
"<android.hardware.lights.Light: java.lang.String toString()>","<android.hardware.lights.Light: java.lang.String toString()>"
"<java.time.OffsetTime: boolean isAfter(java.time.OffsetTime)>","<java.time.OffsetTime: boolean isAfter(java.time.OffsetTime)>"
"<android.app.Activity: android.app.ActionBar getActionBar()>","<android.app.Activity: android.app.ActionBar getActionBar()>"
"<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>","<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>"
"<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()>","<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()>"
"<java.lang.Character: boolean isBmpCodePoint(int)>","<java.lang.Character: boolean isBmpCodePoint(int)>"
"<android.webkit.WebView: void startSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>","<android.webkit.WebView: void startSafeBrowsing(android.content.Context,android.webkit.ValueCallback)>"
"<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>","<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>"
"<java.util.stream.LongStream: long count()>","<java.util.stream.LongStream: long count()>"
"<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>"
"<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>","<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>"
"<android.view.Window$Callback: void onContentChanged()>","<android.view.Window$Callback: void onContentChanged()>"
"<android.view.textservice.TextInfo: java.lang.CharSequence getCharSequence()>","<android.view.textservice.TextInfo: java.lang.CharSequence getCharSequence()>"
"<android.view.View: int getNextFocusUpId()>","<android.view.View: int getNextFocusUpId()>"
"<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>","<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>"
"<android.view.PointerIcon: boolean equals(java.lang.Object)>","<android.view.PointerIcon: boolean equals(java.lang.Object)>"
"<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>","<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>"
"<android.view.textclassifier.TextLinks$Request: java.time.ZonedDateTime getReferenceTime()>","<android.view.textclassifier.TextLinks$Request: java.time.ZonedDateTime getReferenceTime()>"
"<android.app.VoiceInteractor$Request: java.lang.String getName()>","<android.app.VoiceInteractor$Request: java.lang.String getName()>"
"<java.util.PriorityQueue: java.util.Iterator iterator()>","<java.util.PriorityQueue: java.util.Iterator iterator()>"
"<android.graphics.RenderNode: boolean resetPivot()>","<android.graphics.RenderNode: boolean resetPivot()>"
"<android.content.pm.PackageInstaller$SessionParams: void setAppLabel(java.lang.CharSequence)>","<android.content.pm.PackageInstaller$SessionParams: void setAppLabel(java.lang.CharSequence)>"
"<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>","<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean remove(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean remove(java.lang.Object)>"
"<java.nio.DoubleBuffer: java.nio.Buffer position(int)>","<java.nio.DoubleBuffer: java.nio.Buffer position(int)>"
"<android.widget.ImageView: android.graphics.BlendMode getImageTintBlendMode()>","<android.widget.ImageView: android.graphics.BlendMode getImageTintBlendMode()>"
"<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>","<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>"
"<android.graphics.ColorSpace$RenderIntent: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$RenderIntent: void <init>(java.lang.String,int)>"
"<java.io.PrintWriter: void <init>(java.io.Writer)>","<java.io.PrintWriter: void <init>(java.io.Writer)>"
"<java.util.jar.Attributes$Name: void <clinit>()>","<java.util.jar.Attributes$Name: void <clinit>()>"
"<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>","<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>"
"<android.content.pm.PackageManager: boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable)>","<android.content.pm.PackageManager: boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable)>"
"<android.webkit.WebView: boolean getRendererPriorityWaivedWhenNotVisible()>","<android.webkit.WebView: boolean getRendererPriorityWaivedWhenNotVisible()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>","<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>"
"<android.view.ViewGroup: boolean shouldDelayChildPressedState()>","<android.view.ViewGroup: boolean shouldDelayChildPressedState()>"
"<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPath(java.lang.String)>","<android.text.style.TtsSpan$ElectronicBuilder: android.text.style.TtsSpan$ElectronicBuilder setPath(java.lang.String)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setTtcIndex(int)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setTtcIndex(int)>"
"<java.time.format.ResolverStyle: java.time.format.ResolverStyle[] values()>","<java.time.format.ResolverStyle: java.time.format.ResolverStyle[] values()>"
"<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>","<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>"
"<java.net.DatagramSocket: boolean isConnected()>","<java.net.DatagramSocket: boolean isConnected()>"
"<android.widget.TextView: int getMaxLines()>","<android.widget.TextView: int getMaxLines()>"
"<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,int)>","<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,int)>"
"<java.security.Principal: java.lang.String getName()>","<java.security.Principal: java.lang.String getName()>"
"<android.graphics.drawable.Icon: void <clinit>()>","<android.graphics.drawable.Icon: void <clinit>()>"
"<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>","<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>"
"<android.view.WindowInsetsController: void setSystemBarsAppearance(int,int)>","<android.view.WindowInsetsController: void setSystemBarsAppearance(int,int)>"
"<android.content.IntentFilter: void <init>(android.content.IntentFilter)>","<android.content.IntentFilter: void <init>(android.content.IntentFilter)>"
"<android.graphics.RenderNode: boolean setClipToBounds(boolean)>","<android.graphics.RenderNode: boolean setClipToBounds(boolean)>"
"<java.lang.Short: int compareTo(java.lang.Object)>","<java.lang.Short: int compareTo(java.lang.Object)>"
"<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View)>","<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View)>"
"<android.os.IBinder: boolean pingBinder()>","<android.os.IBinder: boolean pingBinder()>"
"<android.view.Display$HdrCapabilities: void <init>()>","<android.view.Display$HdrCapabilities: void <init>()>"
"<io.flutter.plugins.webviewflutter.v0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>","<io.flutter.plugins.webviewflutter.v0: void <init>(io.flutter.plugins.webviewflutter.k$y$a)>"
"<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>","<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>"
"<android.os.Debug: int getBinderLocalObjectCount()>","<android.os.Debug: int getBinderLocalObjectCount()>"
"<java.net.NetworkInterface: java.net.NetworkInterface getParent()>","<java.net.NetworkInterface: java.net.NetworkInterface getParent()>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)>"
"<android.widget.TextView: void clearComposingText()>","<android.widget.TextView: void clearComposingText()>"
"<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<android.view.View: boolean onDragEvent(android.view.DragEvent)>","<android.view.View: boolean onDragEvent(android.view.DragEvent)>"
"<android.icu.util.ULocale: java.lang.String[] getISOCountries()>","<android.icu.util.ULocale: java.lang.String[] getISOCountries()>"
"<java.util.LongSummaryStatistics: long getCount()>","<java.util.LongSummaryStatistics: long getCount()>"
"<java.net.Socket: boolean isInputShutdown()>","<java.net.Socket: boolean isInputShutdown()>"
"<java.lang.Math: int getExponent(float)>","<java.lang.Math: int getExponent(float)>"
"<java.security.cert.CertificateException: void <init>()>","<java.security.cert.CertificateException: void <init>()>"
"<java.lang.ThreadGroup: void destroy()>","<java.lang.ThreadGroup: void destroy()>"
"<android.view.View: int getNextFocusRightId()>","<android.view.View: int getNextFocusRightId()>"
"<java.net.DatagramSocketImpl: byte getTTL()>","<java.net.DatagramSocketImpl: byte getTTL()>"
"<java.lang.Process: void <init>()>","<java.lang.Process: void <init>()>"
"<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>"
"<android.app.Notification$Action: void <clinit>()>","<android.app.Notification$Action: void <clinit>()>"
"<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>","<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>"
"<io.flutter.plugins.webviewflutter.z: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.z: void a(java.lang.Object)>"
"<java.util.List: boolean add(java.lang.Object)>","<java.util.List: boolean add(java.lang.Object)>"
"<android.content.pm.InstallSourceInfo: int getPackageSource()>","<android.content.pm.InstallSourceInfo: int getPackageSource()>"
"<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)>","<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)>"
"<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()>","<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()>"
"<java.lang.reflect.Method: boolean isDefault()>","<java.lang.reflect.Method: boolean isDefault()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String)>"
"<android.view.View: android.view.ViewParent getParent()>","<android.view.View: android.view.ViewParent getParent()>"
"<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager)>","<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager)>"
"<java.io.Writer: void write(char[])>","<java.io.Writer: void write(char[])>"
"<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>","<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>"
"<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>","<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>"
"<android.provider.Settings$Global: void <init>()>","<android.provider.Settings$Global: void <init>()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>","<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>"
"<android.net.Uri: java.lang.String getEncodedPath()>","<android.net.Uri: java.lang.String getEncodedPath()>"
"<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>","<java.util.concurrent.atomic.AtomicReferenceArray: void <init>(int)>"
"<java.lang.Math: double acos(double)>","<java.lang.Math: double acos(double)>"
"<java.math.BigInteger: java.math.BigInteger clearBit(int)>","<java.math.BigInteger: java.math.BigInteger clearBit(int)>"
"<java.io.File: long getUsableSpace()>","<java.io.File: long getUsableSpace()>"
"<java.lang.SecurityManager: void checkPermission(java.security.Permission)>","<java.lang.SecurityManager: void checkPermission(java.security.Permission)>"
"<android.view.ViewParent: boolean isLayoutRequested()>","<android.view.ViewParent: boolean isLayoutRequested()>"
"<android.webkit.WebSettings: boolean getAllowFileAccess()>","<android.webkit.WebSettings: boolean getAllowFileAccess()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.widget.ImageView: android.graphics.PorterDuff$Mode getImageTintMode()>","<android.widget.ImageView: android.graphics.PorterDuff$Mode getImageTintMode()>"
"<java.lang.String: java.lang.String copyValueOf(char[],int,int)>","<java.lang.String: java.lang.String copyValueOf(char[],int,int)>"
"<java.security.cert.CertPath: java.lang.String toString()>","<java.security.cert.CertPath: java.lang.String toString()>"
"<android.graphics.ColorSpace$Rgb: float[] getWhitePoint(float[])>","<android.graphics.ColorSpace$Rgb: float[] getWhitePoint(float[])>"
"<android.os.Debug: int getBinderSentTransactions()>","<android.os.Debug: int getBinderSentTransactions()>"
"<java.time.DayOfWeek: void <init>(java.lang.String,int)>","<java.time.DayOfWeek: void <init>(java.lang.String,int)>"
"<java.io.File: boolean setReadOnly()>","<java.io.File: boolean setReadOnly()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>","<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>"
"<java.lang.Byte: long longValue()>","<java.lang.Byte: long longValue()>"
"<android.app.Application: void onCreate()>","<android.app.Application: void onCreate()>"
"<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)>","<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)>"
"<android.content.IntentFilter: int countCategories()>","<android.content.IntentFilter: int countCategories()>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.concurrent.Future: boolean isCancelled()>","<java.util.concurrent.Future: boolean isCancelled()>"
"<android.graphics.Region: boolean contains(int,int)>","<android.graphics.Region: boolean contains(int,int)>"
"<java.util.Arrays: short[] copyOf(short[],int)>","<java.util.Arrays: short[] copyOf(short[],int)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDamageRegion(android.view.SurfaceControl,android.graphics.Region)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDamageRegion(android.view.SurfaceControl,android.graphics.Region)>"
"<android.app.Activity: void setContentView(android.view.View)>","<android.app.Activity: void setContentView(android.view.View)>"
"<java.lang.Class: java.lang.Class getSuperclass()>","<java.lang.Class: java.lang.Class getSuperclass()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>"
"<android.view.textclassifier.TextClassificationSessionId: void <clinit>()>","<android.view.textclassifier.TextClassificationSessionId: void <clinit>()>"
"<android.view.textservice.SpellCheckerSubtype: int hashCode()>","<android.view.textservice.SpellCheckerSubtype: int hashCode()>"
"<android.view.Display: int getHeight()>","<android.view.Display: int getHeight()>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setHandwritingBounds(android.graphics.RectF)>","<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setHandwritingBounds(android.graphics.RectF)>"
"<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>","<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>"
"<android.content.IntentSender: void <init>()>","<android.content.IntentSender: void <init>()>"
"<android.os.Parcel: android.os.Parcel obtain()>","<android.os.Parcel: android.os.Parcel obtain()>"
"<android.view.InputDevice$MotionRange: float getFuzz()>","<android.view.InputDevice$MotionRange: float getFuzz()>"
"<android.hardware.lights.LightState: int getPlayerId()>","<android.hardware.lights.LightState: int getPlayerId()>"
"<java.time.ZoneOffset: void <clinit>()>","<java.time.ZoneOffset: void <clinit>()>"
"<java.util.stream.Stream: java.util.stream.Stream$Builder builder()>","<java.util.stream.Stream: java.util.stream.Stream$Builder builder()>"
"<java.util.AbstractMap: java.lang.String toString()>","<java.util.AbstractMap: java.lang.String toString()>"
"<android.graphics.RenderNode: boolean setAmbientShadowColor(int)>","<android.graphics.RenderNode: boolean setAmbientShadowColor(int)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<android.graphics.Canvas: android.graphics.Matrix getMatrix()>","<android.graphics.Canvas: android.graphics.Matrix getMatrix()>"
"<android.graphics.Color: float luminance()>","<android.graphics.Color: float luminance()>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromDirectory(java.lang.String,android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromDirectory(java.lang.String,android.content.res.loader.AssetsProvider)>"
"<android.database.Cursor: boolean isLast()>","<android.database.Cursor: boolean isLast()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>"
"<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>","<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>"
"<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>","<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>"
"<java.util.Enumeration: java.util.Iterator asIterator()>","<java.util.Enumeration: java.util.Iterator asIterator()>"
"<java.io.ObjectOutputStream: void write(byte[])>","<java.io.ObjectOutputStream: void write(byte[])>"
"<android.view.textclassifier.TextClassification$Request: void <init>()>","<android.view.textclassifier.TextClassification$Request: void <init>()>"
"<java.net.DatagramSocket: int getSoTimeout()>","<java.net.DatagramSocket: int getSoTimeout()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>"
"<android.app.PictureInPictureParams: java.util.List getActions()>","<android.app.PictureInPictureParams: java.util.List getActions()>"
"<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getParticipants()>","<android.app.Notification$CarExtender$UnreadConversation: java.lang.String[] getParticipants()>"
"<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>","<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>"
"<android.view.Window: void setEnterTransition(android.transition.Transition)>","<android.view.Window: void setEnterTransition(android.transition.Transition)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>","<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>"
"<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>","<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>"
"<java.nio.channels.CompletionHandler: void completed(java.lang.Object,java.lang.Object)>","<java.nio.channels.CompletionHandler: void completed(java.lang.Object,java.lang.Object)>"
"<java.time.Duration: java.time.Duration plusMillis(long)>","<java.time.Duration: java.time.Duration plusMillis(long)>"
"<android.graphics.Point: void <init>(int,int)>","<android.graphics.Point: void <init>(int,int)>"
"<android.net.Uri: java.util.List getPathSegments()>","<android.net.Uri: java.util.List getPathSegments()>"
"<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>","<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>"
"<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setCrop(android.view.SurfaceControl,android.graphics.Rect)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setCrop(android.view.SurfaceControl,android.graphics.Rect)>"
"<android.view.View: boolean isLongClickable()>","<android.view.View: boolean isLongClickable()>"
"<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupAny(java.lang.Class)>","<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookupAny(java.lang.Class)>"
"<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.TextureView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)>","<android.text.Selection: boolean extendDown(android.text.Spannable,android.text.Layout)>"
"<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>","<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>"
"<java.util.Arrays: void setAll(long[],java.util.function.IntToLongFunction)>","<java.util.Arrays: void setAll(long[],java.util.function.IntToLongFunction)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()>","<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()>"
"<java.time.Period: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
"<android.widget.FrameLayout: boolean shouldDelayChildPressedState()>","<android.widget.FrameLayout: boolean shouldDelayChildPressedState()>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>"
"<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>"
"<java.util.ArrayList: void add(int,java.lang.Object)>","<java.util.ArrayList: void add(int,java.lang.Object)>"
"<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock()>","<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: boolean tryLock()>"
"<java.security.CodeSigner: boolean equals(java.lang.Object)>","<java.security.CodeSigner: boolean equals(java.lang.Object)>"
"<android.os.LocaleList: boolean isEmpty()>","<android.os.LocaleList: boolean isEmpty()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>"
"<android.webkit.SafeBrowsingResponse: void <init>()>","<android.webkit.SafeBrowsingResponse: void <init>()>"
"<android.content.ComponentCallbacks2: void onTrimMemory(int)>","<android.content.ComponentCallbacks2: void onTrimMemory(int)>"
"<android.os.UserHandle: void <clinit>()>","<android.os.UserHandle: void <clinit>()>"
"<android.util.Log: int d(java.lang.String,java.lang.String)>","<android.util.Log: int d(java.lang.String,java.lang.String)>"
"<android.widget.PopupWindow: void update(int,int,int,int)>","<android.widget.PopupWindow: void update(int,int,int,int)>"
"<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>","<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>"
"<java.lang.SecurityManager: boolean getInCheck()>","<java.lang.SecurityManager: boolean getInCheck()>"
"<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>"
"<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>","<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>"
"<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>","<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>"
"<java.util.Hashtable: boolean isEmpty()>","<java.util.Hashtable: boolean isEmpty()>"
"<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>","<java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>"
"<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()>"
"<java.util.Locale$Builder: java.util.Locale$Builder clearExtensions()>","<java.util.Locale$Builder: java.util.Locale$Builder clearExtensions()>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>"
"<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>","<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>"
"<android.widget.AbsListView: void setFastScrollEnabled(boolean)>","<android.widget.AbsListView: void setFastScrollEnabled(boolean)>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>"
"<java.net.NetworkInterface: java.lang.String getName()>","<java.net.NetworkInterface: java.lang.String getName()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>"
"<android.widget.Scroller: void setFinalX(int)>","<android.widget.Scroller: void setFinalX(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.LocalDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.view.Choreographer$FrameCallback: void doFrame(long)>","<android.view.Choreographer$FrameCallback: void doFrame(long)>"
"<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>","<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>"
"<java.lang.Integer: int parseInt(java.lang.CharSequence,int,int,int)>","<java.lang.Integer: int parseInt(java.lang.CharSequence,int,int,int)>"
"<java.util.OptionalLong: long orElseGet(java.util.function.LongSupplier)>","<java.util.OptionalLong: long orElseGet(java.util.function.LongSupplier)>"
"<java.util.jar.Manifest: java.lang.Object clone()>","<java.util.jar.Manifest: java.lang.Object clone()>"
"<java.nio.ByteBuffer: char getChar()>","<java.nio.ByteBuffer: char getChar()>"
"<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>","<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>"
"<android.graphics.Matrix: java.lang.String toShortString()>","<android.graphics.Matrix: java.lang.String toShortString()>"
"<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>","<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>"
"<android.view.View$BaseSavedState: void <init>(android.os.Parcel)>","<android.view.View$BaseSavedState: void <init>(android.os.Parcel)>"
"<java.util.Currency: java.lang.String getDisplayName()>","<java.util.Currency: java.lang.String getDisplayName()>"
"<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>","<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>"
"<android.hardware.lights.Light: java.lang.String getName()>","<android.hardware.lights.Light: java.lang.String getName()>"
"<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>","<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>"
"<android.view.MotionEvent: float getHistoricalOrientation(int)>","<android.view.MotionEvent: float getHistoricalOrientation(int)>"
"<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()>","<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()>"
"<android.os.Bundle: java.lang.Object getParcelable(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.lang.Object getParcelable(java.lang.String,java.lang.Class)>"
"<android.content.res.Resources$NotFoundException: void <init>()>","<android.content.res.Resources$NotFoundException: void <init>()>"
"<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>"
"<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>","<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>"
"<java.util.ArrayList: void replaceAll(java.util.function.UnaryOperator)>","<java.util.ArrayList: void replaceAll(java.util.function.UnaryOperator)>"
"<android.provider.Settings$System: boolean canWrite(android.content.Context)>","<android.provider.Settings$System: boolean canWrite(android.content.Context)>"
"<java.net.URLConnection: long getLastModified()>","<java.net.URLConnection: long getLastModified()>"
"<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>"
"<android.media.session.MediaSession$Token: int describeContents()>","<android.media.session.MediaSession$Token: int describeContents()>"
"<android.content.Context: int getColor(int)>","<android.content.Context: int getColor(int)>"
"<android.app.Activity: boolean isChild()>","<android.app.Activity: boolean isChild()>"
"<android.os.Parcel: java.lang.Object[] readParcelableArray(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object[] readParcelableArray(java.lang.ClassLoader,java.lang.Class)>"
"<android.graphics.Bitmap$CompressFormat: void <clinit>()>","<android.graphics.Bitmap$CompressFormat: void <clinit>()>"
"<android.graphics.RectF: void <clinit>()>","<android.graphics.RectF: void <clinit>()>"
"<android.widget.ImageView: void setMaxWidth(int)>","<android.widget.ImageView: void setMaxWidth(int)>"
"<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()>","<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()>"
"<java.lang.Character: boolean isValidCodePoint(int)>","<java.lang.Character: boolean isValidCodePoint(int)>"
"<android.widget.TextView: void setTextIsSelectable(boolean)>","<android.widget.TextView: void setTextIsSelectable(boolean)>"
"<android.widget.ListView: boolean removeHeaderView(android.view.View)>","<android.widget.ListView: boolean removeHeaderView(android.view.View)>"
"<android.view.View: boolean dispatchNestedFling(float,float,boolean)>","<android.view.View: boolean dispatchNestedFling(float,float,boolean)>"
"<android.widget.ListPopupWindow: int getHeight()>","<android.widget.ListPopupWindow: int getHeight()>"
"<java.lang.String: boolean isEmpty()>","<java.lang.String: boolean isEmpty()>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int)>"
"<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>","<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>"
"<android.view.Menu: void setGroupDividerEnabled(boolean)>","<android.view.Menu: void setGroupDividerEnabled(boolean)>"
"<android.hardware.display.DisplayManager$DisplayListener: void onDisplayChanged(int)>","<android.hardware.display.DisplayManager$DisplayListener: void onDisplayChanged(int)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putString(java.lang.String,java.lang.String)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putString(java.lang.String,java.lang.String)>"
"<android.view.MotionEvent: float getRawY(int)>","<android.view.MotionEvent: float getRawY(int)>"
"<io.flutter.plugins.webviewflutter.x0: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.x0: void a(java.lang.Object)>"
"<android.webkit.WebSettings: boolean supportZoom()>","<android.webkit.WebSettings: boolean supportZoom()>"
"<android.util.LongSparseArray: int indexOfValue(java.lang.Object)>","<android.util.LongSparseArray: int indexOfValue(java.lang.Object)>"
"<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>","<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>"
"<android.webkit.WebView: void onWindowVisibilityChanged(int)>","<android.webkit.WebView: void onWindowVisibilityChanged(int)>"
"<java.nio.LongBuffer: long get()>","<java.nio.LongBuffer: long get()>"
"<android.widget.Toolbar: android.os.Parcelable onSaveInstanceState()>","<android.widget.Toolbar: android.os.Parcelable onSaveInstanceState()>"
"<android.view.DisplayCutout: boolean equals(java.lang.Object)>","<android.view.DisplayCutout: boolean equals(java.lang.Object)>"
"<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class,java.lang.String)>"
"<java.lang.Thread: boolean isAlive()>","<java.lang.Thread: boolean isAlive()>"
"<java.nio.channels.Selector: int selectNow()>","<java.nio.channels.Selector: int selectNow()>"
"<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>","<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>"
"<java.lang.reflect.Constructor: java.lang.String toGenericString()>","<java.lang.reflect.Constructor: java.lang.String toGenericString()>"
"<android.view.SurfaceView: void onMeasure(int,int)>","<android.view.SurfaceView: void onMeasure(int,int)>"
"<java.time.chrono.ChronoLocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,android.icu.util.ULocale)>"
"<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIntent(android.content.Intent)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIntent(android.content.Intent)>"
"<android.app.Fragment$SavedState: void <clinit>()>","<android.app.Fragment$SavedState: void <clinit>()>"
"<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>","<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int incrementAndGet(java.lang.Object)>"
"<android.app.Notification$WearableExtender: int getContentAction()>","<android.app.Notification$WearableExtender: int getContentAction()>"
"<android.view.View: android.animation.StateListAnimator getStateListAnimator()>","<android.view.View: android.animation.StateListAnimator getStateListAnimator()>"
"<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()>","<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()>"
"<android.widget.ListPopupWindow: android.view.View getSelectedView()>","<android.widget.ListPopupWindow: android.view.View getSelectedView()>"
"<android.view.View: android.view.translation.ViewTranslationResponse getViewTranslationResponse()>","<android.view.View: android.view.translation.ViewTranslationResponse getViewTranslationResponse()>"
"<android.os.Looper: boolean isCurrentThread()>","<android.os.Looper: boolean isCurrentThread()>"
"<java.io.FileDescriptor: void sync()>","<java.io.FileDescriptor: void sync()>"
"<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object accumulateAndGet(java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>","<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object accumulateAndGet(java.lang.Object,java.lang.Object,java.util.function.BinaryOperator)>"
"<android.app.Notification$WearableExtender: android.graphics.Bitmap getBackground()>","<android.app.Notification$WearableExtender: android.graphics.Bitmap getBackground()>"
"<android.view.View: boolean isLayoutDirectionResolved()>","<android.view.View: boolean isLayoutDirectionResolved()>"
"<android.widget.AbsoluteLayout$LayoutParams: void <init>(int,int,int,int)>","<android.widget.AbsoluteLayout$LayoutParams: void <init>(int,int,int,int)>"
"<android.graphics.text.MeasuredText: void <init>()>","<android.graphics.text.MeasuredText: void <init>()>"
"<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)>","<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)>"
"<java.nio.IntBuffer: boolean isDirect()>","<java.nio.IntBuffer: boolean isDirect()>"
"<android.view.ViewPropertyAnimator: void start()>","<android.view.ViewPropertyAnimator: void start()>"
"<java.lang.StringBuffer: int codePointBefore(int)>","<java.lang.StringBuffer: int codePointBefore(int)>"
"<android.widget.AbsListView: void onRemoteAdapterDisconnected()>","<android.widget.AbsListView: void onRemoteAdapterDisconnected()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod multipliedBy(int)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod multipliedBy(int)>"
"<android.content.pm.PathPermission: void <clinit>()>","<android.content.pm.PathPermission: void <clinit>()>"
"<java.io.File: java.lang.String toString()>","<java.io.File: java.lang.String toString()>"
"<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm[] values()>","<android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm[] values()>"
"<android.view.autofill.AutofillValue: boolean getToggleValue()>","<android.view.autofill.AutofillValue: boolean getToggleValue()>"
"<android.graphics.Rect: boolean contains(int,int,int,int)>","<android.graphics.Rect: boolean contains(int,int,int,int)>"
"<android.os.Build$Partition: int hashCode()>","<android.os.Build$Partition: int hashCode()>"
"<android.media.session.MediaSession$Token: boolean equals(java.lang.Object)>","<android.media.session.MediaSession$Token: boolean equals(java.lang.Object)>"
"<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>","<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>"
"<android.view.WindowInsetsAnimation: float getAlpha()>","<android.view.WindowInsetsAnimation: float getAlpha()>"
"<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>","<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>"
"<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()>"
"<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>","<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>"
"<android.graphics.Point: void <init>(android.graphics.Point)>","<android.graphics.Point: void <init>(android.graphics.Point)>"
"<java.lang.reflect.Parameter: boolean isVarArgs()>","<java.lang.reflect.Parameter: boolean isVarArgs()>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>","<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>"
"<java.util.HashMap: java.util.Collection values()>","<java.util.HashMap: java.util.Collection values()>"
"<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>","<java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>"
"<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>","<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>"
"<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>","<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>"
"<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)>","<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)>"
"<android.widget.PopupWindow: android.graphics.Rect getEpicenterBounds()>","<android.widget.PopupWindow: android.graphics.Rect getEpicenterBounds()>"
"<java.util.concurrent.CopyOnWriteArraySet: void <init>()>","<java.util.concurrent.CopyOnWriteArraySet: void <init>()>"
"<java.lang.SecurityManager: void checkCreateClassLoader()>","<java.lang.SecurityManager: void checkCreateClassLoader()>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,boolean)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,boolean)>"
"<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>","<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>"
"<android.graphics.ColorSpace: float[] fromXyz(float[])>","<android.graphics.ColorSpace: float[] fromXyz(float[])>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String)>"
"<io.flutter.plugin.platform.m: void run()>","<io.flutter.plugin.platform.m: void run()>"
"<android.widget.Toolbar: int getCurrentContentInsetStart()>","<android.widget.Toolbar: int getCurrentContentInsetStart()>"
"<java.lang.Throwable: void <init>()>","<java.lang.Throwable: void <init>()>"
"<java.io.PrintWriter: void println(long)>","<java.io.PrintWriter: void println(long)>"
"<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap$Config)>"
"<android.view.Display$Mode: int getPhysicalWidth()>","<android.view.Display$Mode: int getPhysicalWidth()>"
"<android.app.Notification$BubbleMetadata: android.app.PendingIntent getIntent()>","<android.app.Notification$BubbleMetadata: android.app.PendingIntent getIntent()>"
"<android.graphics.Rect: void inset(int,int)>","<android.graphics.Rect: void inset(int,int)>"
"<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>","<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>"
"<android.view.View: float getTranslationX()>","<android.view.View: float getTranslationX()>"
"<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>","<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>"
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"
"<android.graphics.Matrix$ScaleToFit: void <clinit>()>","<android.graphics.Matrix$ScaleToFit: void <clinit>()>"
"<android.graphics.Matrix: boolean preScale(float,float,float,float)>","<android.graphics.Matrix: boolean preScale(float,float,float,float)>"
"<android.os.Debug: void resetThreadAllocCount()>","<android.os.Debug: void resetThreadAllocCount()>"
"<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>","<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>"
"<android.widget.ListPopupWindow: void setInputMethodMode(int)>","<android.widget.ListPopupWindow: void setInputMethodMode(int)>"
"<android.view.View: boolean isEnabled()>","<android.view.View: boolean isEnabled()>"
"<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>","<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>"
"<android.graphics.RectF: boolean contains(float,float,float,float)>","<android.graphics.RectF: boolean contains(float,float,float,float)>"
"<android.webkit.WebView: int getProgress()>","<android.webkit.WebView: int getProgress()>"
"<android.view.SubMenu: void clearHeader()>","<android.view.SubMenu: void clearHeader()>"
"<android.widget.TextView: void setElegantTextHeight(boolean)>","<android.widget.TextView: void setElegantTextHeight(boolean)>"
"<java.nio.CharBuffer: char get(int)>","<java.nio.CharBuffer: char get(int)>"
"<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<android.app.Activity: void setTaskDescription(android.app.ActivityManager$TaskDescription)>","<android.app.Activity: void setTaskDescription(android.app.ActivityManager$TaskDescription)>"
"<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>","<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>"
"<android.view.ContentInfo$Builder: void <init>(android.content.ClipData,int)>","<android.view.ContentInfo$Builder: void <init>(android.content.ClipData,int)>"
"<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>","<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>"
"<android.content.ContentProvider: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProvider: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>"
"<android.view.inputmethod.SurroundingText: void <init>(java.lang.CharSequence,int,int,int)>","<android.view.inputmethod.SurroundingText: void <init>(java.lang.CharSequence,int,int,int)>"
"<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>","<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>"
"<java.util.Arrays: void parallelPrefix(java.lang.Object[],java.util.function.BinaryOperator)>","<java.util.Arrays: void parallelPrefix(java.lang.Object[],java.util.function.BinaryOperator)>"
"<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>","<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)>"
"<android.view.TextureView: void buildLayer()>","<android.view.TextureView: void buildLayer()>"
"<java.util.concurrent.ThreadPoolExecutor: void shutdown()>","<java.util.concurrent.ThreadPoolExecutor: void shutdown()>"
"<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>","<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>"
"<java.net.URL: java.lang.Object getContent()>","<java.net.URL: java.lang.Object getContent()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)>"
"<android.app.Person: boolean isBot()>","<android.app.Person: boolean isBot()>"
"<android.util.Rational: int compareTo(java.lang.Object)>","<android.util.Rational: int compareTo(java.lang.Object)>"
"<java.time.format.FormatStyle: java.time.format.FormatStyle[] values()>","<java.time.format.FormatStyle: java.time.format.FormatStyle[] values()>"
"<android.net.http.SslCertificate$DName: void <init>(android.net.http.SslCertificate,java.lang.String)>","<android.net.http.SslCertificate$DName: void <init>(android.net.http.SslCertificate,java.lang.String)>"
"<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()>","<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>","<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>"
"<android.graphics.RenderNode: float getScaleY()>","<android.graphics.RenderNode: float getScaleY()>"
"<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>","<java.util.concurrent.atomic.AtomicLongFieldUpdater: long getAndIncrement(java.lang.Object)>"
"<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<android.view.View: void sendAccessibilityEvent(int)>","<android.view.View: void sendAccessibilityEvent(int)>"
"<android.os.SystemClock: long elapsedRealtime()>","<android.os.SystemClock: long elapsedRealtime()>"
"<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>","<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>"
"<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)>","<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)>"
"<java.lang.reflect.Method: boolean equals(java.lang.Object)>","<java.lang.reflect.Method: boolean equals(java.lang.Object)>"
"<android.content.Loader: boolean onCancelLoad()>","<android.content.Loader: boolean onCancelLoad()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()>"
"<android.util.ArrayMap: boolean removeAll(java.util.Collection)>","<android.util.ArrayMap: boolean removeAll(java.util.Collection)>"
"<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>","<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>"
"<java.util.stream.DoubleStream: java.util.stream.LongStream mapToLong(java.util.function.DoubleToLongFunction)>","<java.util.stream.DoubleStream: java.util.stream.LongStream mapToLong(java.util.function.DoubleToLongFunction)>"
"<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>"
"<java.nio.IntBuffer: java.nio.Buffer clear()>","<java.nio.IntBuffer: java.nio.Buffer clear()>"
"<android.print.PrintAttributes$Margins: int getLeftMils()>","<android.print.PrintAttributes$Margins: int getLeftMils()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.Era getEra()>","<java.time.chrono.ChronoLocalDate: java.time.chrono.Era getEra()>"
"<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext build()>","<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext build()>"
"<android.graphics.fonts.Font$Builder: void <init>(java.io.File)>","<android.graphics.fonts.Font$Builder: void <init>(java.io.File)>"
"<java.util.Arrays: java.util.stream.LongStream stream(long[],int,int)>","<java.util.Arrays: java.util.stream.LongStream stream(long[],int,int)>"
"<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.animation.PropertyValuesHolder: java.lang.Object clone()>","<android.animation.PropertyValuesHolder: java.lang.Object clone()>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map,android.os.Bundle)>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map,android.os.Bundle)>"
"<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>","<android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>"
"<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>","<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>"
"<android.view.ViewStructure: void setHintIdEntry(java.lang.String)>","<android.view.ViewStructure: void setHintIdEntry(java.lang.String)>"
"<android.text.Editable$Factory: void <init>()>","<android.text.Editable$Factory: void <init>()>"
"<java.lang.Math: float abs(float)>","<java.lang.Math: float abs(float)>"
"<android.view.ViewOutlineProvider: void <clinit>()>","<android.view.ViewOutlineProvider: void <clinit>()>"
"<android.view.WindowId: boolean isFocused()>","<android.view.WindowId: boolean isFocused()>"
"<android.util.Log: int i(java.lang.String,java.lang.String)>","<android.util.Log: int i(java.lang.String,java.lang.String)>"
"<java.net.Socket: void sendUrgentData(int)>","<java.net.Socket: void sendUrgentData(int)>"
"<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)>","<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)>"
"<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()>"
"<android.graphics.RecordingCanvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>"
"<java.util.Currency: java.util.Currency getInstance(java.lang.String)>","<java.util.Currency: java.util.Currency getInstance(java.lang.String)>"
"<java.math.BigInteger: int intValueExact()>","<java.math.BigInteger: int intValueExact()>"
"<android.view.autofill.AutofillValue: boolean equals(java.lang.Object)>","<android.view.autofill.AutofillValue: boolean equals(java.lang.Object)>"
"<java.lang.Long: int intValue()>","<java.lang.Long: int intValue()>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request build()>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request build()>"
"<java.util.Random: java.util.stream.IntStream ints()>","<java.util.Random: java.util.stream.IntStream ints()>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.util.Size getLayoutSize()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.util.Size getLayoutSize()>"
"<java.time.zone.ZoneRules: java.util.List getTransitions()>","<java.time.zone.ZoneRules: java.util.List getTransitions()>"
"<android.content.Intent: double getDoubleExtra(java.lang.String,double)>","<android.content.Intent: double getDoubleExtra(java.lang.String,double)>"
"<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>","<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>"
"<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>","<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>"
"<android.content.res.Configuration: int describeContents()>","<android.content.res.Configuration: int describeContents()>"
"<android.app.ActivityManager: boolean isUserAMonkey()>","<android.app.ActivityManager: boolean isUserAMonkey()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>"
"<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)>"
"<android.os.Messenger: int describeContents()>","<android.os.Messenger: int describeContents()>"
"<java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>","<java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>"
"<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintContentIntentLaunchesActivity(boolean)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setHintContentIntentLaunchesActivity(boolean)>"
"<java.nio.file.WatchKey: java.nio.file.Watchable watchable()>","<java.nio.file.WatchKey: java.nio.file.Watchable watchable()>"
"<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>","<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>"
"<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>","<java.util.concurrent.ThreadPoolExecutor: boolean isShutdown()>"
"<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>","<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>"
"<android.view.animation.LayoutAnimationController: boolean isDone()>","<android.view.animation.LayoutAnimationController: boolean isDone()>"
"<android.view.autofill.AutofillId: void <clinit>()>","<android.view.autofill.AutofillId: void <clinit>()>"
"<java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>","<java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>"
"<android.content.pm.InstrumentationInfo: void <clinit>()>","<android.content.pm.InstrumentationInfo: void <clinit>()>"
"<android.graphics.Bitmap: int getGenerationId()>","<android.graphics.Bitmap: int getGenerationId()>"
"<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>","<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress)>"
"<android.app.Notification$CarExtender$UnreadConversation: void <init>()>","<android.app.Notification$CarExtender$UnreadConversation: void <init>()>"
"<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>","<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>"
"<android.view.ViewGroup: void dispatchWindowSystemUiVisiblityChanged(int)>","<android.view.ViewGroup: void dispatchWindowSystemUiVisiblityChanged(int)>"
"<android.icu.util.ULocale: android.icu.util.ULocale forLocale(java.util.Locale)>","<android.icu.util.ULocale: android.icu.util.ULocale forLocale(java.util.Locale)>"
"<android.view.View: void setContentDescription(java.lang.CharSequence)>","<android.view.View: void setContentDescription(java.lang.CharSequence)>"
"<java.util.stream.LongStream: void forEachOrdered(java.util.function.LongConsumer)>","<java.util.stream.LongStream: void forEachOrdered(java.util.function.LongConsumer)>"
"<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.media.Image$Plane: int getPixelStride()>","<android.media.Image$Plane: int getPixelStride()>"
"<android.graphics.Color: void <init>()>","<android.graphics.Color: void <init>()>"
"<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>","<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>"
"<java.nio.ByteBuffer: java.nio.Buffer limit(int)>","<java.nio.ByteBuffer: java.nio.Buffer limit(int)>"
"<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>","<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>"
"<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setCustomSizePreset(int)>","<android.app.Notification$WearableExtender: android.app.Notification$WearableExtender setCustomSizePreset(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>"
"<java.util.LinkedList: java.lang.Object removeFirst()>","<java.util.LinkedList: java.lang.Object removeFirst()>"
"<android.view.ViewGroup: void startViewTransition(android.view.View)>","<android.view.ViewGroup: void startViewTransition(android.view.View)>"
"<android.media.Session2Token: int getUid()>","<android.media.Session2Token: int getUid()>"
"<android.widget.AbsListView: int getListPaddingLeft()>","<android.widget.AbsListView: int getListPaddingLeft()>"
"<java.nio.channels.FileChannel: void force(boolean)>","<java.nio.channels.FileChannel: void force(boolean)>"
"<android.print.PrintDocumentInfo: boolean equals(java.lang.Object)>","<android.print.PrintDocumentInfo: boolean equals(java.lang.Object)>"
"<java.util.IntSummaryStatistics: int getMax()>","<java.util.IntSummaryStatistics: int getMax()>"
"<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>","<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>"
"<android.os.CombinedVibration: void <clinit>()>","<android.os.CombinedVibration: void <clinit>()>"
"<java.lang.AbstractMethodError: void <init>(java.lang.String)>","<java.lang.AbstractMethodError: void <init>(java.lang.String)>"
"<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setHintDisplayActionInline(boolean)>","<android.app.Notification$Action$WearableExtender: android.app.Notification$Action$WearableExtender setHintDisplayActionInline(boolean)>"
"<java.time.DayOfWeek: java.time.DayOfWeek 'from'(java.time.temporal.TemporalAccessor)>","<java.time.DayOfWeek: java.time.DayOfWeek 'from'(java.time.temporal.TemporalAccessor)>"
"<java.time.zone.ZoneRules: int hashCode()>","<java.time.zone.ZoneRules: int hashCode()>"
"<android.view.InflateException: void <init>(java.lang.String)>","<android.view.InflateException: void <init>(java.lang.String)>"
"<java.lang.CharSequence: java.util.stream.IntStream codePoints()>","<java.lang.CharSequence: java.util.stream.IntStream codePoints()>"
"<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>","<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>"
"<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>","<android.app.Notification$InboxStyle: android.app.Notification$InboxStyle setBigContentTitle(java.lang.CharSequence)>"
"<java.time.ZonedDateTime: java.time.Month getMonth()>","<java.time.ZonedDateTime: java.time.Month getMonth()>"
"<android.widget.PopupWindow: void setFocusable(boolean)>","<android.widget.PopupWindow: void setFocusable(boolean)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>"
"<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>","<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>"
"<android.view.ViewStructure: void setImportantForAutofill(int)>","<android.view.ViewStructure: void setImportantForAutofill(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,android.icu.util.ULocale)>"
"<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>","<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>"
"<java.io.File: long length()>","<java.io.File: long length()>"
"<android.content.Intent: int describeContents()>","<android.content.Intent: int describeContents()>"
"<android.icu.util.ULocale: java.lang.String getLanguage()>","<android.icu.util.ULocale: java.lang.String getLanguage()>"
"<android.content.ClipDescription: java.lang.String getMimeType(int)>","<android.content.ClipDescription: java.lang.String getMimeType(int)>"
"<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>","<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>"
"<java.util.Objects: int checkFromToIndex(int,int,int)>","<java.util.Objects: int checkFromToIndex(int,int,int)>"
"<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>","<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>"
"<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>","<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>"
"<android.app.VoiceInteractor: void notifyDirectActionsChanged()>","<android.app.VoiceInteractor: void notifyDirectActionsChanged()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()>","<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()>"
"<android.icu.util.ULocale: java.lang.String getLineOrientation()>","<android.icu.util.ULocale: java.lang.String getLineOrientation()>"
"<android.os.UserHandle: java.lang.String toString()>","<android.os.UserHandle: java.lang.String toString()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>","<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>"
"<java.math.BigInteger: java.lang.String toString()>","<java.math.BigInteger: java.lang.String toString()>"
"<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>","<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>"
"<android.widget.ListPopupWindow: int getHorizontalOffset()>","<android.widget.ListPopupWindow: int getHorizontalOffset()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)>"
"<java.security.cert.Certificate: java.lang.Object writeReplace()>","<java.security.cert.Certificate: java.lang.Object writeReplace()>"
"<android.app.Fragment: void setAllowReturnTransitionOverlap(boolean)>","<android.app.Fragment: void setAllowReturnTransitionOverlap(boolean)>"
"<android.os.Parcel: void writeParcelableCreator(android.os.Parcelable)>","<android.os.Parcel: void writeParcelableCreator(android.os.Parcelable)>"
"<android.graphics.SurfaceTexture: void <init>(int,boolean)>","<android.graphics.SurfaceTexture: void <init>(int,boolean)>"
"<java.time.Instant: java.time.Instant now(java.time.Clock)>","<java.time.Instant: java.time.Instant now(java.time.Clock)>"
"<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback)>","<android.webkit.WebMessagePort: void setWebMessageCallback(android.webkit.WebMessagePort$WebMessageCallback)>"
"<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>"
"<android.view.Display: void getMetrics(android.util.DisplayMetrics)>","<android.view.Display: void getMetrics(android.util.DisplayMetrics)>"
"<java.lang.SecurityManager: java.lang.Class[] getClassContext()>","<java.lang.SecurityManager: java.lang.Class[] getClassContext()>"
"<android.app.Notification: java.util.List getContextualActions()>","<android.app.Notification: java.util.List getContextualActions()>"
"<java.util.ArrayDeque: java.lang.Object remove()>","<java.util.ArrayDeque: java.lang.Object remove()>"
"<java.lang.reflect.Member: boolean isSynthetic()>","<java.lang.reflect.Member: boolean isSynthetic()>"
"<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>"
"<android.widget.TextView: boolean isTextSelectable()>","<android.widget.TextView: boolean isTextSelectable()>"
"<java.util.TimeZone: java.lang.Object clone()>","<java.util.TimeZone: java.lang.Object clone()>"
"<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.widget.TextView: boolean isCursorVisible()>","<android.widget.TextView: boolean isCursorVisible()>"
"<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>"
"<android.view.textclassifier.TextLanguage$Request: void <init>()>","<android.view.textclassifier.TextLanguage$Request: void <init>()>"
"<java.nio.channels.FileChannel: long size()>","<java.nio.channels.FileChannel: long size()>"
"<java.io.ObjectInputStream: java.lang.Object readUnshared()>","<java.io.ObjectInputStream: java.lang.Object readUnshared()>"
"<android.view.View: void setPressed(boolean)>","<android.view.View: void setPressed(boolean)>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>"
"<java.util.Arrays: java.util.stream.LongStream stream(long[])>","<java.util.Arrays: java.util.stream.LongStream stream(long[])>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>"
"<android.media.session.MediaController$PlaybackInfo: int getMaxVolume()>","<android.media.session.MediaController$PlaybackInfo: int getMaxVolume()>"
"<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$UnreadConversation build()>","<android.app.Notification$CarExtender$Builder: android.app.Notification$CarExtender$UnreadConversation build()>"
"<android.view.DisplayCutout: int getSafeInsetTop()>","<android.view.DisplayCutout: int getSafeInsetTop()>"
"<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>","<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>"
"<android.os.PersistableBundle: void <init>()>","<android.os.PersistableBundle: void <init>()>"
"<java.util.stream.LongStream: java.util.OptionalDouble average()>","<java.util.stream.LongStream: java.util.OptionalDouble average()>"
"<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>","<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>"
"<java.net.Proxy$Type: void <clinit>()>","<java.net.Proxy$Type: void <clinit>()>"
"<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function)>","<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function)>"
"<android.app.Notification$MessagingStyle$Message: long getTimestamp()>","<android.app.Notification$MessagingStyle$Message: long getTimestamp()>"
"<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)>"
"<android.graphics.Color: int HSVToColor(int,float[])>","<android.graphics.Color: int HSVToColor(int,float[])>"
"<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>","<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setBackgroundColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setBackgroundColor(int)>"
"<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>","<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)>","<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)>"
"<android.app.ActivityManager: boolean isBackgroundRestricted()>","<android.app.ActivityManager: boolean isBackgroundRestricted()>"
"<java.time.chrono.ChronoLocalDate: java.util.Comparator timeLineOrder()>","<java.time.chrono.ChronoLocalDate: java.util.Comparator timeLineOrder()>"
"<android.graphics.RenderNode: boolean setSpotShadowColor(int)>","<android.graphics.RenderNode: boolean setSpotShadowColor(int)>"
"<java.lang.StringBuilder: int indexOf(java.lang.String,int)>","<java.lang.StringBuilder: int indexOf(java.lang.String,int)>"
"<android.view.View: void setPreferKeepClear(boolean)>","<android.view.View: void setPreferKeepClear(boolean)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble findAny()>","<java.util.stream.DoubleStream: java.util.OptionalDouble findAny()>"
"<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>"
"<android.webkit.WebView: android.webkit.WebSettings getSettings()>","<android.webkit.WebView: android.webkit.WebSettings getSettings()>"
"<java.util.stream.IntStream: java.util.stream.BaseStream sequential()>","<java.util.stream.IntStream: java.util.stream.BaseStream sequential()>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newWorkStealingPool(int)>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newWorkStealingPool(int)>"
"<android.text.InputFilter$LengthFilter: int getMax()>","<android.text.InputFilter$LengthFilter: int getMax()>"
"<io.flutter.plugins.webviewflutter.g3: void a(java.lang.Object)>","<io.flutter.plugins.webviewflutter.g3: void a(java.lang.Object)>"
"<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>","<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(int)>"
"<java.io.Writer: void write(int)>","<java.io.Writer: void write(int)>"
"<java.util.Date: int getDay()>","<java.util.Date: int getDay()>"
"<java.util.Deque: java.lang.Object peekLast()>","<java.util.Deque: java.lang.Object peekLast()>"
"<org.json.JSONArray: java.lang.String optString(int,java.lang.String)>","<org.json.JSONArray: java.lang.String optString(int,java.lang.String)>"
"<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()>","<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()>"
"<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.graphics.drawable.ColorDrawable: boolean onStateChange(int[])>","<android.graphics.drawable.ColorDrawable: boolean onStateChange(int[])>"
"<java.nio.file.DirectoryStream$Filter: boolean accept(java.lang.Object)>","<java.nio.file.DirectoryStream$Filter: boolean accept(java.lang.Object)>"
"<android.content.pm.ApplicationInfo: int describeContents()>","<android.content.pm.ApplicationInfo: int describeContents()>"
"<java.net.URLConnection: void setReadTimeout(int)>","<java.net.URLConnection: void setReadTimeout(int)>"
"<android.view.animation.Animation: void setZAdjustment(int)>","<android.view.animation.Animation: void setZAdjustment(int)>"
"<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>","<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>","<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>"
"<java.lang.Long: float floatValue()>","<java.lang.Long: float floatValue()>"
"<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()>","<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()>"
"<android.content.res.Configuration: void setTo(android.content.res.Configuration)>","<android.content.res.Configuration: void setTo(android.content.res.Configuration)>"
"<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams)>","<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams)>"
"<java.util.IdentityHashMap: java.lang.Object clone()>","<java.util.IdentityHashMap: java.lang.Object clone()>"
"<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>","<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>"
"<android.content.res.loader.ResourcesLoader: void addProvider(android.content.res.loader.ResourcesProvider)>","<android.content.res.loader.ResourcesLoader: void addProvider(android.content.res.loader.ResourcesProvider)>"
"<java.time.LocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>","<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>"
"<android.graphics.Paint$Align: void <init>(java.lang.String,int)>","<android.graphics.Paint$Align: void <init>(java.lang.String,int)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)>"
"<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<java.util.concurrent.ThreadPoolExecutor: void purge()>","<java.util.concurrent.ThreadPoolExecutor: void purge()>"
"<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.ActionMode: void setTag(java.lang.Object)>","<android.view.ActionMode: void setTag(java.lang.Object)>"
"<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>"
"<java.util.Arrays: int compare(char[],char[])>","<java.util.Arrays: int compare(char[],char[])>"
"<android.util.Log: int w(java.lang.String,java.lang.Throwable)>","<android.util.Log: int w(java.lang.String,java.lang.Throwable)>"
"<android.webkit.WebView: android.graphics.Picture capturePicture()>","<android.webkit.WebView: android.graphics.Picture capturePicture()>"
"<android.graphics.Picture: boolean requiresHardwareAcceleration()>","<android.graphics.Picture: boolean requiresHardwareAcceleration()>"
"<java.net.Socket: void setKeepAlive(boolean)>","<java.net.Socket: void setKeepAlive(boolean)>"
"<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>","<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>"
"<java.util.UUID: int version()>","<java.util.UUID: int version()>"
"<android.view.inputmethod.SurroundingText: int getSelectionStart()>","<android.view.inputmethod.SurroundingText: int getSelectionStart()>"
"<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>"
"<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()>","<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()>"
"<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>","<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>"
"<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>","<java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>"
"<android.webkit.WebView: void setOverScrollMode(int)>","<android.webkit.WebView: void setOverScrollMode(int)>"
"<java.lang.Package: boolean isSealed(java.net.URL)>","<java.lang.Package: boolean isSealed(java.net.URL)>"
"<java.util.jar.JarFile: java.util.Enumeration entries()>","<java.util.jar.JarFile: java.util.Enumeration entries()>"
"<android.webkit.GeolocationPermissions: void <init>()>","<android.webkit.GeolocationPermissions: void <init>()>"
"<android.graphics.Paint: void setShadowLayer(float,float,float,int)>","<android.graphics.Paint: void setShadowLayer(float,float,float,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.View: void setAccessibilityLiveRegion(int)>","<android.view.View: void setAccessibilityLiveRegion(int)>"
"<java.time.OffsetTime: boolean equals(java.lang.Object)>","<java.time.OffsetTime: boolean equals(java.lang.Object)>"
"<java.util.Locale: void setDefault(java.util.Locale$Category,java.util.Locale)>","<java.util.Locale: void setDefault(java.util.Locale$Category,java.util.Locale)>"
"<java.util.ArrayList: void trimToSize()>","<java.util.ArrayList: void trimToSize()>"
"<android.app.Activity: void setPictureInPictureParams(android.app.PictureInPictureParams)>","<android.app.Activity: void setPictureInPictureParams(android.app.PictureInPictureParams)>"
"<android.view.InputDevice: android.hardware.BatteryState getBatteryState()>","<android.view.InputDevice: android.hardware.BatteryState getBatteryState()>"
"<android.content.ContentProvider: void setWritePermission(java.lang.String)>","<android.content.ContentProvider: void setWritePermission(java.lang.String)>"
"<java.util.UUID: int clockSequence()>","<java.util.UUID: int clockSequence()>"
"<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder addLight(android.hardware.lights.Light,android.hardware.lights.LightState)>","<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder addLight(android.hardware.lights.Light,android.hardware.lights.LightState)>"
"<android.view.contentcapture.ContentCaptureSessionId: void <init>()>","<android.view.contentcapture.ContentCaptureSessionId: void <init>()>"
"<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>","<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<java.util.concurrent.TimeUnit: void <clinit>()>","<java.util.concurrent.TimeUnit: void <clinit>()>"
"<android.net.http.SslCertificate$DName: java.lang.String getOName()>","<android.net.http.SslCertificate$DName: java.lang.String getOName()>"
"<android.os.VibrationAttributes: void <init>()>","<android.os.VibrationAttributes: void <init>()>"
"<android.view.View: int getPaddingStart()>","<android.view.View: int getPaddingStart()>"
"<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>","<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>"
"<java.util.WeakHashMap: void forEach(java.util.function.BiConsumer)>","<java.util.WeakHashMap: void forEach(java.util.function.BiConsumer)>"
"<java.time.Month: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.Month: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>"
