"descriptor","code"
"<com.unity3d.player.ReflectionHelper: void a(com.unity3d.player.ReflectionHelper$a,java.lang.reflect.Member)>","void a(long j, boolean z);"
"<com.unity3d.player.ReflectionHelper: void nativeProxyLogJNIInvokeException(long)>","/* JADX INFO: Access modifiers changed from: private */
public static native void nativeProxyLogJNIInvokeException(long j);"
"<com.unity3d.player.ReflectionHelper: float a(java.lang.Class,java.lang.Class)>","private static float a(Class cls, Class cls2) {
    if (cls.equals(cls2)) {
        return 1.0f;
    }
    if (cls.isPrimitive() || cls2.isPrimitive()) {
        return 0.0f;
    }
    try {
        if (cls.asSubclass(cls2) != null) {
            return 0.5f;
        }
    } catch (ClassCastException unused) {
    }
    try {
        return cls2.asSubclass(cls) != null ? 0.1f : 0.0f;
    } catch (ClassCastException unused2) {
        return 0.0f;
    }
}"
"<com.unity3d.player.ReflectionHelper: void endUnityLaunch()>","protected static void endUnityLaunch() {
    b++;
}"
"<com.unity3d.player.ReflectionHelper: boolean a(com.unity3d.player.ReflectionHelper$a)>","private static synchronized boolean a(a aVar) {
    synchronized (ReflectionHelper.class) {
        a aVar2 = a[aVar.hashCode() & (a.length - 1)];
        if (!aVar.equals(aVar2)) {
            return false;
        }
        aVar.a = aVar2.a;
        return true;
    }
}"
"<com.unity3d.player.ReflectionHelper: void nativeProxyFinalize(long)>","/* JADX INFO: Access modifiers changed from: private */
public static native void nativeProxyFinalize(long j);"
"<com.unity3d.player.ReflectionHelper: float a(java.lang.Class,java.lang.Class[],java.lang.Class[])>","private static float a(Class cls, Class cls2) {
    if (cls.equals(cls2)) {
        return 1.0f;
    }
    if (cls.isPrimitive() || cls2.isPrimitive()) {
        return 0.0f;
    }
    try {
        if (cls.asSubclass(cls2) != null) {
            return 0.5f;
        }
    } catch (ClassCastException unused) {
    }
    try {
        return cls2.asSubclass(cls) != null ? 0.1f : 0.0f;
    } catch (ClassCastException unused2) {
        return 0.0f;
    }
}"
"<com.unity3d.player.ReflectionHelper: void a(long)>","void a(long j, boolean z);"
"<com.unity3d.player.ReflectionHelper: void setNativeExceptionOnProxy(java.lang.Object,long,boolean)>","protected static void setNativeExceptionOnProxy(Object obj, long j, boolean z) {
    ((b) Proxy.getInvocationHandler(obj)).a(j, z);
}"
"<com.unity3d.player.f: void Log(int,java.lang.String)>","/* JADX INFO: Access modifiers changed from: protected */
public static void Log(int i, String str) {
    if (a) {
        return;
    }
    if (i == 6) {
        Log.e(""Unity"", str);
    }
    if (i == 5) {
        Log.w(""Unity"", str);
    }
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void setPreferredDisplayModeId(int)>","public void setPreferredDisplayModeId(final int i) {
    this.mActivity.runOnUiThread(new // from class: com.google.androidgamesdk.SwappyDisplayManager.1
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            Window window = SwappyDisplayManager.this.mActivity.getWindow();
            WindowManager.LayoutParams attributes = window.getAttributes();
            attributes.preferredDisplayModeId = i;
            window.setAttributes(attributes);
        }
    });
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void terminate()>","public void terminate() {
    this.mLooper.a.getLooper().quit();
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void nOnRefreshPeriodChanged(long,long,long,long)>","private native void nOnRefreshPeriodChanged(long j, long j2, long j3, long j4);"
"<com.google.androidgamesdk.SwappyDisplayManager: void onDisplayRemoved(int)>","// android.hardware.display.DisplayManager.DisplayListener
@Override
public void onDisplayRemoved(int i) {
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void onDisplayAdded(int)>","// android.hardware.display.DisplayManager.DisplayListener
@Override
public void onDisplayAdded(int i) {
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void updateSupportedRefreshRates(android.view.Display)>","private void updateSupportedRefreshRates(Display display) {
    Display.Mode[] supportedModes = display.getSupportedModes();
    int i = 0;
    for (Display.Mode mode : supportedModes) {
        if (modeMatchesCurrentResolution(mode)) {
            i++;
        }
    }
    long[] jArr = new long[i];
    int[] iArr = new int[i];
    int i2 = 0;
    for (int i3 = 0; i3 < supportedModes.length; i3++) {
        if (modeMatchesCurrentResolution(supportedModes[i3])) {
            jArr[i2] = 1.0E9f / supportedModes[i3].getRefreshRate();
            iArr[i2] = supportedModes[i3].getModeId();
            i2++;
        }
    }
    nSetSupportedRefreshPeriods(this.mCookie, jArr, iArr);
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void onDisplayChanged(int)>","// android.hardware.display.DisplayManager.DisplayListener
@Override
public void onDisplayChanged(int i) {
    synchronized (this) {
        Display defaultDisplay = this.mWindowManager.getDefaultDisplay();
        float refreshRate = defaultDisplay.getRefreshRate();
        Display.Mode mode = defaultDisplay.getMode();
        boolean z = true;
        boolean z2 = (mode.getPhysicalWidth() != this.mCurrentMode.getPhysicalWidth()) | (mode.getPhysicalHeight() != this.mCurrentMode.getPhysicalHeight());
        if (refreshRate == this.mCurrentMode.getRefreshRate()) {
            z = false;
        }
        this.mCurrentMode = mode;
        if (z2) {
            updateSupportedRefreshRates(defaultDisplay);
        }
        if (z) {
            long j = 1.0E9f / refreshRate;
            nOnRefreshPeriodChanged(this.mCookie, j, defaultDisplay.getAppVsyncOffsetNanos(), j - (this.mWindowManager.getDefaultDisplay().getPresentationDeadlineNanos() - 1000000));
        }
    }
}"
"<com.google.androidgamesdk.SwappyDisplayManager: void nSetSupportedRefreshPeriods(long,long[],int[])>","private native void nSetSupportedRefreshPeriods(long j, long[] jArr, int[] iArr);"
"<com.google.androidgamesdk.SwappyDisplayManager: boolean modeMatchesCurrentResolution(android.view.Display$Mode)>","private boolean modeMatchesCurrentResolution(Display.Mode mode) {
    return mode.getPhysicalHeight() == this.mCurrentMode.getPhysicalHeight() && mode.getPhysicalWidth() == this.mCurrentMode.getPhysicalWidth();
}"
"<com.unity3d.player.c: int a(android.content.Context,int)>","public static int a(Context context) {
    return c(context).length;
}"
"<com.unity3d.player.c: void g(com.unity3d.player.c)>","private void g() {
    HandlerThread handlerThread = new HandlerThread(""CameraBackground"");
    this.f = handlerThread;
    handlerThread.start();
    this.g = new Handler(this.f.getLooper());
}"
"<com.unity3d.player.c: void i()>","private void i() {
    try {
        if (!e.tryAcquire(4L, TimeUnit.SECONDS)) {
            f.Log(5, ""Camera2: Timeout waiting to lock camera for closing."");
            return;
        }
        this.d.close();
        try {
            if (!e.tryAcquire(4L, TimeUnit.SECONDS)) {
                f.Log(5, ""Camera2: Timeout waiting to close camera."");
            }
        } catch (InterruptedException e2) {
            f.Log(6, ""Camera2: Interrupted while waiting to close camera "" + e2);
        }
        this.d = null;
        e.release();
    } catch (InterruptedException e3) {
        f.Log(6, ""Camera2: Interrupted while trying to lock camera for closing "" + e3);
    }
}"
"<com.unity3d.player.c: boolean a(float,float)>","public final boolean a(float f, float f2) {
    if (this.k <= 0) {
        return false;
    }
    if (this.p) {
        f.Log(5, ""Camera2: Setting manual focus point already started."");
        return false;
    }
    this.l = f;
    this.m = f2;
    synchronized (this.v) {
        if (this.u != null && this.z != a.b) {
            k();
        }
    }
    return true;
}"
"<com.unity3d.player.c: int[] e(android.content.Context,int)>","public static int[] e(Context context, int i) {
    try {
        Size[] a2 = a(b(context).getCameraCharacteristics(c(context)[i]));
        if (a2 == null) {
            return null;
        }
        int[] iArr = new int[a2.length * 2];
        for (int i2 = 0; i2 < a2.length; i2++) {
            int i3 = i2 * 2;
            iArr[i3] = a2[i2].getWidth();
            iArr[i3 + 1] = a2[i2].getHeight();
        }
        return iArr;
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
        return null;
    }
}"
"<com.unity3d.player.c: void a(android.hardware.camera2.CameraDevice)>","/* JADX INFO: Access modifiers changed from: private */
public void a(CameraDevice cameraDevice) {
    synchronized (this.v) {
        this.u = null;
    }
    cameraDevice.close();
    this.d = null;
}"
"<com.unity3d.player.c: void a(com.unity3d.player.c,java.lang.Object)>","/* JADX INFO: Access modifiers changed from: private */
public void a(CameraDevice cameraDevice) {
    synchronized (this.v) {
        this.u = null;
    }
    cameraDevice.close();
    this.d = null;
}"
"<com.unity3d.player.c: void d()>","public final void d() {
    synchronized (this.v) {
        if (this.u != null) {
            try {
                this.u.stopRepeating();
                this.z = a.b;
            } catch (CameraAccessException e2) {
                f.Log(6, ""Camera2: CameraAccessException "" + e2);
            }
        }
    }
}"
"<com.unity3d.player.c: boolean a(android.content.Context,int,int,int,int,int)>","public final boolean a(float f, float f2) {
    if (this.k <= 0) {
        return false;
    }
    if (this.p) {
        f.Log(5, ""Camera2: Setting manual focus point already started."");
        return false;
    }
    this.l = f;
    this.m = f2;
    synchronized (this.v) {
        if (this.u != null && this.z != a.b) {
            k();
        }
    }
    return true;
}"
"<com.unity3d.player.c: int a(android.util.Range[],int)>","public static int a(Context context) {
    return c(context).length;
}"
"<com.unity3d.player.c: boolean b(android.content.Context,int)>","public static boolean b(Context context, int i) {
    try {
        return ((Integer) b(context).getCameraCharacteristics(c(context)[i]).get(CameraCharacteristics.LENS_FACING)).intValue() == 0;
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
        return false;
    }
}"
"<com.unity3d.player.c: int a(android.content.Context)>","public static int a(Context context) {
    return c(context).length;
}"
"<com.unity3d.player.c: void h()>","private void h() {
    this.f.quit();
    try {
        this.f.join(4000L);
        this.f = null;
        this.g = null;
    } catch (InterruptedException e2) {
        this.f.interrupt();
        f.Log(6, ""Camera2: Interrupted while waiting for the background thread to finish "" + e2);
    }
}"
"<com.unity3d.player.c: void b(android.hardware.camera2.CameraCharacteristics)>","private void b(CameraCharacteristics cameraCharacteristics) {
    int intValue = ((Integer) cameraCharacteristics.get(CameraCharacteristics.CONTROL_MAX_REGIONS_AF)).intValue();
    this.k = intValue;
    if (intValue > 0) {
        this.i = (Rect) cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
        float width = this.h.width() / this.h.height();
        if (width > r4.width() / this.i.height()) {
            this.n = 0;
            this.o = (int) ((this.i.height() - (this.i.width() / width)) / 2.0f);
        } else {
            this.o = 0;
            this.n = (int) ((this.i.width() - (this.i.height() * width)) / 2.0f);
        }
        this.j = Math.min(this.i.width(), this.i.height()) / 20;
    }
}"
"<com.unity3d.player.c: void b(com.unity3d.player.c,android.hardware.camera2.CameraDevice)>","private void b(CameraCharacteristics cameraCharacteristics) {
    int intValue = ((Integer) cameraCharacteristics.get(CameraCharacteristics.CONTROL_MAX_REGIONS_AF)).intValue();
    this.k = intValue;
    if (intValue > 0) {
        this.i = (Rect) cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
        float width = this.h.width() / this.h.height();
        if (width > r4.width() / this.i.height()) {
            this.n = 0;
            this.o = (int) ((this.i.height() - (this.i.width() / width)) / 2.0f);
        } else {
            this.o = 0;
            this.n = (int) ((this.i.width() - (this.i.height() * width)) / 2.0f);
        }
        this.j = Math.min(this.i.width(), this.i.height()) / 20;
    }
}"
"<com.unity3d.player.c: boolean c(android.content.Context,int)>","public static boolean c(Context context, int i) {
    try {
        return ((Integer) b(context).getCameraCharacteristics(c(context)[i]).get(CameraCharacteristics.CONTROL_MAX_REGIONS_AF)).intValue() > 0;
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
        return false;
    }
}"
"<com.unity3d.player.c: void c()>","public final void c() {
    if (this.r == null) {
        ImageReader newInstance = ImageReader.newInstance(this.h.width(), this.h.height(), 35, 2);
        this.r = newInstance;
        newInstance.setOnImageAvailableListener(this.C, this.g);
        this.s = null;
        if (this.w != 0) {
            SurfaceTexture surfaceTexture = new SurfaceTexture(this.w);
            this.x = surfaceTexture;
            surfaceTexture.setDefaultBufferSize(this.h.width(), this.h.height());
            this.x.setOnFrameAvailableListener(this.D, this.g);
            this.y = new Surface(this.x);
        }
    }
    try {
        if (this.u == null) {
            this.d.createCaptureSession(this.y != null ? Arrays.asList(this.y, this.r.getSurface()) : Arrays.asList(this.r.getSurface()), new // from class: com.unity3d.player.c.2
            CameraCaptureSession.StateCallback() {

                // android.hardware.camera2.CameraCaptureSession.StateCallback
                @Override
                public final void onConfigureFailed(CameraCaptureSession cameraCaptureSession) {
                    f.Log(6, ""Camera2: CaptureSession configuration failed."");
                }

                // android.hardware.camera2.CameraCaptureSession.StateCallback
                @Override
                public final void onConfigured(CameraCaptureSession cameraCaptureSession) {
                    String str;
                    if (c.this.d == null) {
                        return;
                    }
                    synchronized (c.this.v) {
                        c.this.u = cameraCaptureSession;
                        try {
                            c.this.t = c.this.d.createCaptureRequest(1);
                            if (c.this.y != null) {
                                c.this.t.addTarget(c.this.y);
                            }
                            c.this.t.addTarget(c.this.r.getSurface());
                            c.this.t.set(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE, c.this.q);
                            c.this.j();
                        } catch (CameraAccessException e2) {
                            str = ""Camera2: CameraAccessException "" + e2;
                            f.Log(6, str);
                        } catch (IllegalStateException e3) {
                            str = ""Camera2: IllegalStateException "" + e3;
                            f.Log(6, str);
                        }
                    }
                }
            }, this.g);
        } else if (this.z == a.b) {
            this.u.setRepeatingRequest(this.t.build(), this.A, this.g);
        }
        this.z = a.a;
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
    }
}"
"<com.unity3d.player.c: void e()>","public final void e() {
    synchronized (this.v) {
        if (this.u != null) {
            try {
                this.u.abortCaptures();
            } catch (CameraAccessException e2) {
                f.Log(6, ""Camera2: CameraAccessException "" + e2);
            }
            this.u.close();
            this.u = null;
            this.z = a.c;
        }
    }
}"
"<com.unity3d.player.c: void k()>","private void k() {
    try {
        if (this.u != null) {
            this.u.stopRepeating();
            this.t.set(CaptureRequest.CONTROL_AF_TRIGGER, 2);
            this.t.set(CaptureRequest.CONTROL_AF_MODE, 0);
            this.t.setTag(""Cancel focus"");
            this.u.capture(this.t.build(), this.A, this.g);
        }
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
    }
}"
"<com.unity3d.player.c: void g()>","private void g() {
    HandlerThread handlerThread = new HandlerThread(""CameraBackground"");
    this.f = handlerThread;
    handlerThread.start();
    this.g = new Handler(this.f.getLooper());
}"
"<com.unity3d.player.c: int d(android.content.Context,int)>","public static int d(Context context, int i) {
    try {
        CameraCharacteristics cameraCharacteristics = b(context).getCameraCharacteristics(c(context)[i]);
        float[] fArr = (float[]) cameraCharacteristics.get(CameraCharacteristics.LENS_INFO_AVAILABLE_FOCAL_LENGTHS);
        SizeF sizeF = (SizeF) cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_PHYSICAL_SIZE);
        if (fArr.length > 0) {
            return (int) ((fArr[0] * 36.0f) / sizeF.getWidth());
        }
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
    }
    return 0;
}"
"<com.unity3d.player.c: void b()>","private void b(CameraCharacteristics cameraCharacteristics) {
    int intValue = ((Integer) cameraCharacteristics.get(CameraCharacteristics.CONTROL_MAX_REGIONS_AF)).intValue();
    this.k = intValue;
    if (intValue > 0) {
        this.i = (Rect) cameraCharacteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);
        float width = this.h.width() / this.h.height();
        if (width > r4.width() / this.i.height()) {
            this.n = 0;
            this.o = (int) ((this.i.height() - (this.i.width() / width)) / 2.0f);
        } else {
            this.o = 0;
            this.n = (int) ((this.i.width() - (this.i.height() * width)) / 2.0f);
        }
        this.j = Math.min(this.i.width(), this.i.height()) / 20;
    }
}"
"<com.unity3d.player.c: void a(java.lang.Object)>","/* JADX INFO: Access modifiers changed from: private */
public void a(CameraDevice cameraDevice) {
    synchronized (this.v) {
        this.u = null;
    }
    cameraDevice.close();
    this.d = null;
}"
"<com.unity3d.player.c: void j()>","/* JADX INFO: Access modifiers changed from: private */
public void j() {
    try {
        if (this.k != 0 && this.l >= 0.0f && this.l <= 1.0f && this.m >= 0.0f && this.m <= 1.0f) {
            this.p = true;
            this.t.set(CaptureRequest.CONTROL_AF_REGIONS, new MeteringRectangle[] { new MeteringRectangle(Math.max(this.j + 1, Math.min((int) (((this.i.width() - (this.n * 2)) * this.l) + this.n), (this.i.width() - this.j) - 1)) - this.j, Math.max(this.j + 1, Math.min((int) (((this.i.height() - (this.o * 2)) * (1.0d - this.m)) + this.o), (this.i.height() - this.j) - 1)) - this.j, this.j * 2, this.j * 2, 999) });
            this.t.set(CaptureRequest.CONTROL_AF_MODE, 1);
            this.t.set(CaptureRequest.CONTROL_AF_TRIGGER, 1);
            this.t.setTag(""Focus"");
            this.u.capture(this.t.build(), this.A, this.g);
            return;
        }
        this.t.set(CaptureRequest.CONTROL_AF_MODE, 4);
        this.t.setTag(""Regular"");
        if (this.u != null) {
            this.u.setRepeatingRequest(this.t.build(), this.A, this.g);
        }
    } catch (CameraAccessException e2) {
        f.Log(6, ""Camera2: CameraAccessException "" + e2);
    }
}"
"<com.unity3d.player.o: boolean a(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.o$a)>","public final boolean a(Context context, String str, int i, int i2, int i3, boolean z, long j, long j2, a aVar) {
    this.e.lock();
    this.c = aVar;
    this.b = context;
    this.d.drainPermits();
    this.g = 2;
    runOnUiThread(new AnonymousClass1(str, i, i2, i3, z, j, j2));
    boolean z2 = false;
    try {
        this.e.unlock();
        this.d.acquire();
        this.e.lock();
        if (this.g != 2) {
            z2 = true;
        }
    } catch (InterruptedException unused) {
    }
    runOnUiThread(new // from class: com.unity3d.player.o.2
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            o.this.a.pause();
        }
    });
    runOnUiThread((!z2 || this.g == 3) ? new // from class: com.unity3d.player.o.4
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            o.this.d();
            o.this.a.resume();
        }
    } : new // from class: com.unity3d.player.o.3
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            if (o.this.f != null) {
                o.this.a.addViewToPlayer(o.this.f, true);
                o.h(o.this);
                o.this.f.requestFocus();
            }
        }
    });
    this.e.unlock();
    return z2;
}"
"<com.unity3d.player.o: void c()>","public final void c() {
    this.e.lock();
    n nVar = this.f;
    if (nVar != null) {
        nVar.updateVideoLayout();
    }
    this.e.unlock();
}"
"<com.unity3d.player.o: void a()>","// com.unity3d.player.n.a
@Override
public final void a(int i) {
    o.this.e.lock();
    o.this.g = i;
    if (i == 3 && o.this.i) {
        o.this.runOnUiThread(new // from class: com.unity3d.player.o.1.1.1
        Runnable() {

            // java.lang.Runnable
            @Override
            public final void run() {
                o.this.d();
                o.this.a.resume();
            }
        });
    }
    if (i != 0) {
        o.this.d.release();
    }
    o.this.e.unlock();
}"
"<com.unity3d.player.o: boolean h(com.unity3d.player.o)>","static /* synthetic */
boolean h(o oVar) {
    oVar.i = true;
    return true;
}"
"<com.unity3d.player.o: void b()>","public final void b() {
    this.e.lock();
    n nVar = this.f;
    if (nVar != null && this.i && !this.h) {
        nVar.start();
    }
    this.e.unlock();
}"
"<com.unity3d.player.o: void runOnUiThread(java.lang.Runnable)>","protected final void runOnUiThread(Runnable runnable) {
    Context context = this.b;
    if (context instanceof Activity) {
        ((Activity) context).runOnUiThread(runnable);
    } else {
        f.Log(5, ""Not running from an Activity; Ignoring execution request..."");
    }
}"
"<com.unity3d.player.o: void d()>","/* JADX INFO: Access modifiers changed from: private */
public void d() {
    n nVar = this.f;
    if (nVar != null) {
        this.a.removeViewFromPlayer(nVar);
        this.i = false;
        this.f.destroyPlayer();
        this.f = null;
        a aVar = this.c;
        if (aVar != null) {
            aVar.a();
        }
    }
}"
"<org.fmod.FMODAudioDevice: int startAudioRecord(int,int,int)>","public synchronized int startAudioRecord(int i2, int i3, int i4) {
    if (this.g == null) {
        this.g = new a(this, i2, i3);
        this.g.b();
    }
    return this.g.a();
}"
"<org.fmod.FMODAudioDevice: void stopAudioRecord()>","public synchronized void stopAudioRecord() {
    if (this.g != null) {
        this.g.c();
        this.g = null;
    }
}"
"<org.fmod.FMODAudioDevice: boolean isRunning()>","public boolean isRunning() {
    return this.a != null && this.a.isAlive();
}"
"<org.fmod.FMODAudioDevice: int fmodProcess(java.nio.ByteBuffer)>","private native int fmodProcess(ByteBuffer byteBuffer);"
"<org.fmod.FMODAudioDevice: void stop()>","public synchronized void stop() {
    while (this.a != null) {
        this.b = false;
        try {
            this.a.join();
            this.a = null;
        } catch (InterruptedException unused) {
        }
    }
    if (this.g != null) {
        this.g.c();
    }
}"
"<org.fmod.FMODAudioDevice: int fmodGetInfo(int)>","private native int fmodGetInfo(int i2);"
"<org.fmod.FMODAudioDevice: void run()>","// java.lang.Runnable
@Override
public void run() {
    int i2 = 3;
    while (this.b) {
        if (!this.d && i2 > 0) {
            releaseAudioTrack();
            int fmodGetInfo = fmodGetInfo(h);
            int i3 = fmodGetInfo(l) == 1 ? 4 : 12;
            int minBufferSize = AudioTrack.getMinBufferSize(fmodGetInfo, i3, 2);
            int fmodGetInfo2 = fmodGetInfo(l) * 2;
            int round = Math.round(minBufferSize * 1.1f) & (~(fmodGetInfo2 - 1));
            int fmodGetInfo3 = fmodGetInfo(i);
            int fmodGetInfo4 = fmodGetInfo(j) * fmodGetInfo3 * fmodGetInfo2;
            AudioTrack audioTrack = new AudioTrack(3, fmodGetInfo, i3, 2, fmodGetInfo4 > round ? fmodGetInfo4 : round, 1);
            this.c = audioTrack;
            boolean z = audioTrack.getState() == 1;
            this.d = z;
            if (z) {
                ByteBuffer allocateDirect = ByteBuffer.allocateDirect(fmodGetInfo3 * fmodGetInfo2);
                this.e = allocateDirect;
                this.f = new byte[allocateDirect.capacity()];
                this.c.play();
                i2 = 3;
            } else {
                Log.e(""FMOD"", ""AudioTrack failed to initialize (status "" + this.c.getState() + "")"");
                releaseAudioTrack();
                i2 += -1;
            }
        }
        if (this.d) {
            if (fmodGetInfo(k) == 1) {
                fmodProcess(this.e);
                ByteBuffer byteBuffer = this.e;
                byteBuffer.get(this.f, 0, byteBuffer.capacity());
                this.c.write(this.f, 0, this.e.capacity());
                this.e.position(0);
            } else {
                releaseAudioTrack();
            }
        }
    }
    releaseAudioTrack();
}"
"<org.fmod.FMODAudioDevice: void releaseAudioTrack()>","private void releaseAudioTrack() {
    AudioTrack audioTrack = this.c;
    if (audioTrack != null) {
        if (audioTrack.getState() == 1) {
            this.c.stop();
        }
        this.c.release();
        this.c = null;
    }
    this.e = null;
    this.f = null;
    this.d = false;
}"
"<org.fmod.FMODAudioDevice: int fmodProcessMicData(java.nio.ByteBuffer,int)>","/* JADX INFO: Access modifiers changed from: package-private */
public native int fmodProcessMicData(ByteBuffer byteBuffer, int i2);"
"<org.fmod.FMODAudioDevice: void close()>","public synchronized void close() {
    stop();
}"
"<org.fmod.FMODAudioDevice: void start()>","public synchronized void start() {
    if (this.a != null) {
        stop();
    }
    this.a = new Thread(this, ""FMODAudioDevice"");
    this.a.setPriority(10);
    this.b = true;
    this.a.start();
    if (this.g != null) {
        this.g.b();
    }
}"
"<com.unity3d.player.IAssetPackManagerDownloadStatusCallback: void onStatusUpdate(java.lang.String,int,long,long,int,int)>","void onStatusUpdate(String str, int i, long j, long j2, int i2, int i3);"
"<com.unity3d.player.GoogleARCoreApi: void resumeARCore()>","public final native void resumeARCore();"
"<com.unity3d.player.GoogleARCoreApi: void initializeARCore(android.app.Activity)>","public final native void initializeARCore(Activity activity);"
"<com.unity3d.player.GoogleARCoreApi: void pauseARCore()>","public final native void pauseARCore();"
"<com.unity3d.player.IUnityPlayerLifecycleEvents: void onUnityPlayerQuitted()>","void onUnityPlayerQuitted();"
"<com.unity3d.player.IUnityPlayerLifecycleEvents: void onUnityPlayerUnloaded()>","void onUnityPlayerUnloaded();"
"<org.fmod.a: void c()>","public final void c() {
    while (this.f != null) {
        this.g = false;
        try {
            this.f.join();
            this.f = null;
        } catch (InterruptedException unused) {
        }
    }
}"
"<org.fmod.a: void b()>","public final void b() {
    if (this.f != null) {
        c();
    }
    this.g = true;
    this.f = new Thread(this);
    this.f.start();
}"
"<org.fmod.a: void d()>","private void d() {
    AudioRecord audioRecord = this.h;
    if (audioRecord != null) {
        if (audioRecord.getState() == 1) {
            this.h.stop();
        }
        this.h.release();
        this.h = null;
    }
    this.b.position(0);
    this.i = false;
}"
"<org.fmod.a: int a()>","public final int a() {
    return this.b.capacity();
}"
"<org.fmod.a: void run()>","// java.lang.Runnable
@Override
public final void run() {
    int i = 3;
    while (this.g) {
        if (!this.i && i > 0) {
            d();
            AudioRecord audioRecord = new AudioRecord(1, this.c, this.d, this.e, this.b.capacity());
            this.h = audioRecord;
            boolean z = audioRecord.getState() == 1;
            this.i = z;
            if (z) {
                this.b.position(0);
                this.h.startRecording();
                i = 3;
            } else {
                Log.e(""FMOD"", ""AudioRecord failed to initialize (status "" + this.h.getState() + "")"");
                i += -1;
                d();
            }
        }
        if (this.i && this.h.getRecordingState() == 3) {
            AudioRecord audioRecord2 = this.h;
            ByteBuffer byteBuffer = this.b;
            this.a.fmodProcessMicData(this.b, audioRecord2.read(byteBuffer, byteBuffer.capacity()));
            this.b.position(0);
        }
    }
    d();
}"
"<com.unity3d.player.l: boolean a()>","/* JADX INFO: Access modifiers changed from: package-private */
public final synchronized boolean a() {
    boolean z;
    Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
    if (defaultUncaughtExceptionHandler == this) {
        z = false;
    } else {
        this.a = defaultUncaughtExceptionHandler;
        Thread.setDefaultUncaughtExceptionHandler(this);
        z = true;
    }
    return z;
}"
"<com.unity3d.player.l: void uncaughtException(java.lang.Thread,java.lang.Throwable)>","// java.lang.Thread.UncaughtExceptionHandler
@Override
public final synchronized void uncaughtException(Thread thread, Throwable th) {
    try {
        Error error = new Error(String.format(""FATAL EXCEPTION [%s]\n"", thread.getName()) + String.format(""Unity version     : %s\n"", ""2021.3.12f1"") + String.format(""Device model      : %s %s\n"", Build.MANUFACTURER, Build.MODEL) + String.format(""Device fingerprint: %s\n"", Build.FINGERPRINT) + String.format(""Build Type        : %s\n"", ""Release"") + String.format(""Scripting Backend : %s\n"", ""IL2CPP"") + String.format(""ABI               : %s\n"", Build.CPU_ABI) + String.format(""Strip Engine Code : %s\n"", true));
        error.setStackTrace(new StackTraceElement[0]);
        error.initCause(th);
        this.a.uncaughtException(thread, error);
    } catch (Throwable unused) {
        this.a.uncaughtException(thread, th);
    }
}"
"<com.unity3d.player.i: void onBackPressed()>","// android.app.Dialog
@Override
public final void onBackPressed() {
    a(b(), true);
}"
"<com.unity3d.player.i: void beforeTextChanged(java.lang.CharSequence,int,int,int)>","// android.text.TextWatcher
@Override
public final void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
}"
"<com.unity3d.player.i: void a(java.lang.String)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: void a(java.lang.String,boolean)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: void afterTextChanged(android.text.Editable)>","// android.text.TextWatcher
@Override
public final void afterTextChanged(Editable editable) {
    this.c.reportSoftInputStr(editable.toString(), 0, false);
    EditText editText = (EditText) findViewById(1057292289);
    int selectionStart = editText.getSelectionStart();
    this.c.reportSoftInputSelection(selectionStart, editText.getSelectionEnd() - selectionStart);
}"
"<com.unity3d.player.i: void onClick(android.view.View)>","// android.view.View.OnClickListener
@Override
public final void onClick(View view) {
    a(b(), false);
}"
"<com.unity3d.player.i: void a(android.widget.EditText,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: void a(int,int)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: void a(int)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: void a(boolean)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: void onTextChanged(java.lang.CharSequence,int,int,int)>","// android.text.TextWatcher
@Override
public final void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
}"
"<com.unity3d.player.i: boolean dispatchTouchEvent(android.view.MotionEvent)>","// android.app.Dialog, android.view.Window.Callback
@Override
public final boolean dispatchTouchEvent(MotionEvent motionEvent) {
    if (this.a || motionEvent.getAction() != 4) {
        return super.dispatchTouchEvent(motionEvent);
    }
    return true;
}"
"<com.unity3d.player.i: void a(com.unity3d.player.i,java.lang.String,boolean)>","private void a(EditText editText, String str, int i, boolean z, boolean z2, boolean z3, String str2, int i2) {
    editText.setImeOptions(6);
    editText.setText(str);
    editText.setHint(str2);
    editText.setHintTextColor(d);
    editText.setInputType(a(i, z, z2, z3));
    editText.setImeOptions(33554432);
    if (i2 > 0) {
        editText.setFilters(new InputFilter[] { new InputFilter.LengthFilter(i2) });
    }
    editText.addTextChangedListener(this);
    editText.setSelection(editText.getText().length());
    editText.setClickable(true);
}"
"<com.unity3d.player.i: int a(int,boolean,boolean,boolean)>","private static int a(int i, boolean z, boolean z2, boolean z3) {
    int i2 = (z ? 32768 : 524288) | (z2 ? 131072 : 0) | (z3 ? 128 : 0);
    if (i < 0 || i > 11) {
        return i2;
    }
    int[] iArr = { 1, 16385, 12290, 17, 2, 3, 8289, 33, 1, 16417, 17, 8194 };
    return (iArr[i] & 2) != 0 ? iArr[i] : iArr[i] | i2;
}"
"<com.unity3d.player.UnityPlayerActivity: void onNewIntent(android.content.Intent)>","// android.app.Activity
@Override
protected void onNewIntent(Intent intent) {
    setIntent(intent);
    this.mUnityPlayer.newIntent(intent);
}"
"<com.unity3d.player.UnityPlayerActivity: void onTrimMemory(int)>","// android.app.Activity, android.content.ComponentCallbacks2
@Override
public void onTrimMemory(int i) {
    super.onTrimMemory(i);
    if (i == 15) {
        this.mUnityPlayer.lowMemory();
    }
}"
"<com.unity3d.player.UnityPlayerActivity: void onConfigurationChanged(android.content.res.Configuration)>","// android.app.Activity, android.content.ComponentCallbacks
@Override
public void onConfigurationChanged(Configuration configuration) {
    super.onConfigurationChanged(configuration);
    this.mUnityPlayer.configurationChanged(configuration);
}"
"<com.unity3d.player.UnityPlayerActivity: boolean onTouchEvent(android.view.MotionEvent)>","// android.app.Activity
@Override
public boolean onTouchEvent(MotionEvent motionEvent) {
    return this.mUnityPlayer.injectEvent(motionEvent);
}"
"<com.unity3d.player.UnityPlayerActivity: void onResume()>","// android.app.Activity
@Override
protected void onResume() {
    super.onResume();
    if (!MultiWindowSupport.getAllowResizableWindow(this) || MultiWindowSupport.isMultiWindowModeChangedToTrue(this)) {
        this.mUnityPlayer.resume();
    }
}"
"<com.unity3d.player.UnityPlayerActivity: void onWindowFocusChanged(boolean)>","// android.app.Activity, android.view.Window.Callback
@Override
public void onWindowFocusChanged(boolean z) {
    super.onWindowFocusChanged(z);
    this.mUnityPlayer.windowFocusChanged(z);
}"
"<com.unity3d.player.UnityPlayerActivity: void onUnityPlayerUnloaded()>","// com.unity3d.player.IUnityPlayerLifecycleEvents
@Override
public void onUnityPlayerUnloaded() {
    moveTaskToBack(true);
}"
"<com.unity3d.player.UnityPlayerActivity: void onLowMemory()>","// android.app.Activity, android.content.ComponentCallbacks
@Override
public void onLowMemory() {
    super.onLowMemory();
    this.mUnityPlayer.lowMemory();
}"
"<com.unity3d.player.UnityPlayerActivity: void onDestroy()>","// android.app.Activity
@Override
protected void onDestroy() {
    this.mUnityPlayer.destroy();
    super.onDestroy();
}"
"<com.unity3d.player.UnityPlayerActivity: boolean onKeyUp(int,android.view.KeyEvent)>","// android.app.Activity, android.view.KeyEvent.Callback
@Override
public boolean onKeyUp(int i, KeyEvent keyEvent) {
    return this.mUnityPlayer.injectEvent(keyEvent);
}"
"<com.unity3d.player.UnityPlayerActivity: boolean onGenericMotionEvent(android.view.MotionEvent)>","// android.app.Activity
@Override
public boolean onGenericMotionEvent(MotionEvent motionEvent) {
    return this.mUnityPlayer.injectEvent(motionEvent);
}"
"<com.unity3d.player.UnityPlayerActivity: boolean onKeyDown(int,android.view.KeyEvent)>","// android.app.Activity, android.view.KeyEvent.Callback
@Override
public boolean onKeyDown(int i, KeyEvent keyEvent) {
    return this.mUnityPlayer.injectEvent(keyEvent);
}"
"<com.unity3d.player.UnityPlayerActivity: boolean dispatchKeyEvent(android.view.KeyEvent)>","// android.app.Activity, android.view.Window.Callback
@Override
public boolean dispatchKeyEvent(KeyEvent keyEvent) {
    if (keyEvent.getAction() == 2) {
        return this.mUnityPlayer.injectEvent(keyEvent);
    }
    return super.dispatchKeyEvent(keyEvent);
}"
"<com.unity3d.player.UnityPlayerActivity: void onPause()>","// android.app.Activity
@Override
protected void onPause() {
    super.onPause();
    MultiWindowSupport.saveMultiWindowMode(this);
    if (MultiWindowSupport.getAllowResizableWindow(this)) {
        return;
    }
    this.mUnityPlayer.pause();
}"
"<com.unity3d.player.UnityPlayerActivity: void onUnityPlayerQuitted()>","// com.unity3d.player.IUnityPlayerLifecycleEvents
@Override
public void onUnityPlayerQuitted() {
}"
"<com.unity3d.player.UnityPlayerActivity: void onStop()>","// android.app.Activity
@Override
protected void onStop() {
    super.onStop();
    if (MultiWindowSupport.getAllowResizableWindow(this)) {
        this.mUnityPlayer.pause();
    }
}"
"<com.unity3d.player.UnityPlayerActivity: void onCreate(android.os.Bundle)>","// android.app.Activity
@Override
protected void onCreate(Bundle bundle) {
    requestWindowFeature(1);
    super.onCreate(bundle);
    getIntent().putExtra(""unity"", updateUnityCommandLineArguments(getIntent().getStringExtra(""unity"")));
    UnityPlayer unityPlayer = new UnityPlayer(this, this);
    this.mUnityPlayer = unityPlayer;
    setContentView(unityPlayer);
    this.mUnityPlayer.requestFocus();
}"
"<com.unity3d.player.UnityPlayerActivity: void onStart()>","// android.app.Activity
@Override
protected void onStart() {
    super.onStart();
    if (MultiWindowSupport.getAllowResizableWindow(this)) {
        this.mUnityPlayer.resume();
    }
}"
"<com.unity3d.player.UnityCoreAssetPacksStatusCallbacks: void onStatusResult(long,java.lang.String[],int[],int[])>","// com.unity3d.player.IAssetPackManagerStatusQueryCallback
@Override
public void onStatusResult(long j, String[] strArr, int[] iArr, int[] iArr2) {
    for (int i = 0; i < iArr.length; i++) {
        nativeStatusQueryResult(strArr[i], iArr[i], iArr2[i]);
    }
}"
"<com.unity3d.player.UnityCoreAssetPacksStatusCallbacks: void nativeStatusQueryResult(java.lang.String,int,int)>","private final native void nativeStatusQueryResult(String str, int i, int i2);"
"<com.unity3d.player.UnityCoreAssetPacksStatusCallbacks: void onStatusUpdate(java.lang.String,int,long,long,int,int)>","// com.unity3d.player.IAssetPackManagerDownloadStatusCallback
@Override
public void onStatusUpdate(String str, int i, long j, long j2, int i2, int i3) {
    nativeStatusQueryResult(str, i, i3);
}"
"<com.unity3d.player.Camera2Wrapper: boolean isCamera2AutoFocusPointSupported(int)>","protected boolean isCamera2AutoFocusPointSupported(int i) {
    return c.c(this.a, i);
}"
"<com.unity3d.player.Camera2Wrapper: boolean initializeCamera2(int,int,int,int,int)>","protected boolean initializeCamera2(int i, int i2, int i3, int i4, int i5) {
    if (this.b != null || UnityPlayer.currentActivity == null) {
        return false;
    }
    c cVar = new c(this);
    this.b = cVar;
    return cVar.a(this.a, i, i2, i3, i4, i5);
}"
"<com.unity3d.player.Camera2Wrapper: int[] getCamera2Resolutions(int)>","protected int[] getCamera2Resolutions(int i) {
    return c.e(this.a, i);
}"
"<com.unity3d.player.Camera2Wrapper: void a(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int)>","public final void a() {
    deinitCamera2Jni();
    closeCamera2();
}"
"<com.unity3d.player.Camera2Wrapper: void startCamera2()>","protected void startCamera2() {
    c cVar = this.b;
    if (cVar != null) {
        cVar.c();
    }
}"
"<com.unity3d.player.Camera2Wrapper: int getCamera2FocalLengthEquivalent(int)>","protected int getCamera2FocalLengthEquivalent(int i) {
    return c.d(this.a, i);
}"
"<com.unity3d.player.Camera2Wrapper: void nativeSurfaceTextureReady(java.lang.Object)>","private final native void nativeSurfaceTextureReady(Object obj);"
"<com.unity3d.player.Camera2Wrapper: void a(java.lang.Object)>","public final void a() {
    deinitCamera2Jni();
    closeCamera2();
}"
"<com.unity3d.player.Camera2Wrapper: void stopCamera2()>","protected void stopCamera2() {
    c cVar = this.b;
    if (cVar != null) {
        cVar.e();
    }
}"
"<com.unity3d.player.Camera2Wrapper: void deinitCamera2Jni()>","private final native void deinitCamera2Jni();"
"<com.unity3d.player.Camera2Wrapper: void a()>","public final void a() {
    deinitCamera2Jni();
    closeCamera2();
}"
"<com.unity3d.player.Camera2Wrapper: int getCamera2SensorOrientation(int)>","protected int getCamera2SensorOrientation(int i) {
    return c.a(this.a, i);
}"
"<com.unity3d.player.Camera2Wrapper: boolean setAutoFocusPoint(float,float)>","protected boolean setAutoFocusPoint(float f, float f2) {
    c cVar = this.b;
    if (cVar != null) {
        return cVar.a(f, f2);
    }
    return false;
}"
"<com.unity3d.player.Camera2Wrapper: void pauseCamera2()>","protected void pauseCamera2() {
    c cVar = this.b;
    if (cVar != null) {
        cVar.d();
    }
}"
"<com.unity3d.player.Camera2Wrapper: boolean isCamera2FrontFacing(int)>","protected boolean isCamera2FrontFacing(int i) {
    return c.b(this.a, i);
}"
"<com.unity3d.player.Camera2Wrapper: int getCamera2Count()>","protected int getCamera2Count() {
    return c.a(this.a);
}"
"<com.unity3d.player.Camera2Wrapper: int a(float)>","private static int a(float f) {
    return (int) Math.min(Math.max((f * 2000.0f) - 1000.0f, -900.0f), 900.0f);
}"
"<com.unity3d.player.Camera2Wrapper: void nativeFrameReady(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int)>","private final native void nativeFrameReady(Object obj, Object obj2, Object obj3, int i, int i2, int i3);"
"<com.unity3d.player.Camera2Wrapper: void closeCamera2()>","protected void closeCamera2() {
    c cVar = this.b;
    if (cVar != null) {
        cVar.b();
    }
    this.b = null;
}"
"<com.unity3d.player.Camera2Wrapper: void initCamera2Jni()>","private final native void initCamera2Jni();"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void unregisterDownloadStatusListener(java.lang.Object)>","public void unregisterDownloadStatusListener(Object obj) {
    a();
    this.b.a(obj);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void requestToUseMobileData(android.app.Activity,com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback)>","public void requestToUseMobileData(Activity activity, IAssetPackManagerMobileDataConfirmationCallback iAssetPackManagerMobileDataConfirmationCallback) {
    a();
    this.b.a(activity, iAssetPackManagerMobileDataConfirmationCallback);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void a()>","private void a() {
    if (playCoreApiMissing()) {
        throw new RuntimeException(""AssetPackManager API is not available! Make sure your gradle project includes \""com.google.android.play:core\"" dependency."");
    }
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void cancelAssetPackDownload(java.lang.String)>","public void cancelAssetPackDownload(String str) {
    cancelAssetPackDownloads(new String[] { str });
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void removeAssetPack(java.lang.String)>","public void removeAssetPack(String str) {
    a();
    this.b.b(str);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void getAssetPackState(java.lang.String,com.unity3d.player.IAssetPackManagerStatusQueryCallback)>","public void getAssetPackState(String str, IAssetPackManagerStatusQueryCallback iAssetPackManagerStatusQueryCallback) {
    getAssetPackStates(new String[] { str }, iAssetPackManagerStatusQueryCallback);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void downloadAssetPack(java.lang.String,com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","public void downloadAssetPack(String str, IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    downloadAssetPacks(new String[] { str }, iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: boolean playCoreApiMissing()>","public boolean playCoreApiMissing() {
    return this.b == null;
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void cancelAssetPackDownloads(java.lang.String[])>","public void cancelAssetPackDownloads(String[] strArr) {
    a();
    this.b.a(strArr);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void getAssetPackStates(java.lang.String[],com.unity3d.player.IAssetPackManagerStatusQueryCallback)>","public void getAssetPackStates(String[] strArr, IAssetPackManagerStatusQueryCallback iAssetPackManagerStatusQueryCallback) {
    a();
    this.b.a(strArr, iAssetPackManagerStatusQueryCallback);
}"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void downloadAssetPacks(java.lang.String[],com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","public void downloadAssetPacks(String[] strArr, IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    a();
    this.b.a(strArr, iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.g: void onCreate(android.os.Bundle)>","// android.app.Fragment
@Override
public final void onCreate(Bundle bundle) {
    super.onCreate(bundle);
    requestPermissions(getArguments().getStringArray(""PermissionNames""), 96489);
}"
"<com.unity3d.player.g: void onRequestPermissionsResult(int,java.lang.String[],int[])>","// android.app.Fragment
@Override
public final void onRequestPermissionsResult(int i, String[] strArr, int[] iArr) {
    if (i != 96489) {
        return;
    }
    if (strArr.length == 0) {
        requestPermissions(getArguments().getStringArray(""PermissionNames""), 96489);
        return;
    }
    for (int i2 = 0; i2 < strArr.length && i2 < iArr.length; i2++) {
        IPermissionRequestCallbacks iPermissionRequestCallbacks = this.a;
        if (iPermissionRequestCallbacks != null && this.b != null && this.c != null) {
            if (iPermissionRequestCallbacks instanceof UnityPermissions.ModalWaitForPermissionResponse) {
                iPermissionRequestCallbacks.onPermissionGranted(strArr[i2]);
            } else {
                String str = strArr[i2] == null ? ""<null>"" : strArr[i2];
                new Handler(this.c).post(new a(this.a, str, iArr[i2], this.b.shouldShowRequestPermissionRationale(str)));
            }
        }
    }
    FragmentTransaction beginTransaction = getActivity().getFragmentManager().beginTransaction();
    beginTransaction.remove(this);
    beginTransaction.commit();
}"
"<com.unity3d.player.j: void onLayout(boolean,int,int,int,int)>","/* JADX WARN: Code restructure failed: missing block: B:41:0x006b, code lost:
    
        if (r13 < r11) goto L32;
     */
// android.view.View
@Override
public final /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
void onLayout(boolean r9, int r10, int r11, int r12, int r13) {
    /*
            Method dump skipped, instructions count: 203
            To view this dump add '--comments-level debug' option
        */
    throw new UnsupportedOperationException(""Method not decompiled: com.unity3d.player.j.onLayout(boolean, int, int, int, int):void"");
}"
"<com.unity3d.player.j: void onDetachedFromWindow()>","// android.view.View
@Override
public final void onDetachedFromWindow() {
    super.onDetachedFromWindow();
    Bitmap bitmap = this.c;
    if (bitmap != null) {
        bitmap.recycle();
        this.c = null;
    }
    Bitmap bitmap2 = this.d;
    if (bitmap2 != null) {
        bitmap2.recycle();
        this.d = null;
    }
}"
"<com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback: void onMobileDataConfirmationResult(boolean)>","void onMobileDataConfirmationResult(boolean z);"
"<com.unity3d.player.b: void a()>","public final void a() {
    if (this.c != null) {
        this.a.getContentResolver().unregisterContentObserver(this.c);
        this.c = null;
    }
}"
"<com.unity3d.player.b: void a(com.unity3d.player.b$b)>","public final void a() {
    if (this.c != null) {
        this.a.getContentResolver().unregisterContentObserver(this.c);
        this.c = null;
    }
}"
"<com.google.androidgamesdk.ChoreographerCallback: void doFrame(long)>","// android.view.Choreographer.FrameCallback
@Override
public void doFrame(long j) {
    nOnChoreographer(this.mCookie, j);
}"
"<com.google.androidgamesdk.ChoreographerCallback: void postFrameCallbackDelayed(long)>","public void postFrameCallbackDelayed(long j) {
    Choreographer.getInstance().postFrameCallbackDelayed(this, j);
}"
"<com.google.androidgamesdk.ChoreographerCallback: void nOnChoreographer(long,long)>","public native void nOnChoreographer(long j, long j2);"
"<com.google.androidgamesdk.ChoreographerCallback: void postFrameCallback()>","public void postFrameCallback() {
    this.mLooper.a.post(new // from class: com.google.androidgamesdk.ChoreographerCallback.1
    Runnable() {

        // java.lang.Runnable
        @Override
        public final void run() {
            Choreographer.getInstance().postFrameCallback(ChoreographerCallback.this);
        }
    });
}"
"<com.google.androidgamesdk.ChoreographerCallback: void terminate()>","public void terminate() {
    this.mLooper.a.getLooper().quit();
}"
"<com.unity3d.player.NetworkConnectivity: int a(com.unity3d.player.NetworkConnectivity,int)>","public final int a() {
    return this.d;
}"
"<com.unity3d.player.NetworkConnectivity: void b()>","public final void b() {
    this.e.unregisterNetworkCallback(this.f);
}"
"<com.unity3d.player.NetworkConnectivity: int a()>","public final int a() {
    return this.d;
}"
"<com.unity3d.player.m: void d(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public final void d(boolean z) {
    this.c = z;
}"
"<com.unity3d.player.m: boolean e()>","/* JADX INFO: Access modifiers changed from: package-private */
public final boolean e() {
    return this.e;
}"
"<com.unity3d.player.m: void b()>","/* JADX INFO: Access modifiers changed from: package-private */
public static void b() {
    a = false;
}"
"<com.unity3d.player.m: boolean d()>","/* JADX INFO: Access modifiers changed from: package-private */
public final boolean d() {
    return this.d;
}"
"<com.unity3d.player.m: void a(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public static void a() {
    a = true;
}"
"<com.unity3d.player.m: boolean f()>","/* JADX INFO: Access modifiers changed from: package-private */
public final boolean f() {
    return this.c;
}"
"<com.unity3d.player.m: boolean e(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public final boolean e() {
    return this.e;
}"
"<com.unity3d.player.m: void a()>","/* JADX INFO: Access modifiers changed from: package-private */
public static void a() {
    a = true;
}"
"<com.unity3d.player.m: boolean c()>","/* JADX INFO: Access modifiers changed from: package-private */
public static boolean c() {
    return a;
}"
"<com.unity3d.player.m: void c(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public final void c(boolean z) {
    this.e = z;
}"
"<com.unity3d.player.m: void b(boolean)>","/* JADX INFO: Access modifiers changed from: package-private */
public static void b() {
    a = false;
}"
"<com.unity3d.player.e: void a(java.lang.Object)>","void a(Object obj);"
"<com.unity3d.player.e: void a(java.lang.Object,java.lang.Object,java.lang.Object,int,int,int)>","void a(Object obj);"
"<com.unity3d.player.k: void a(com.unity3d.player.k$a,java.lang.String)>","public final void a() {
    if (this.b != null) {
        this.a.getContentResolver().unregisterContentObserver(this.b);
        this.b = null;
    }
}"
"<com.unity3d.player.k: void a()>","public final void a() {
    if (this.b != null) {
        this.a.getContentResolver().unregisterContentObserver(this.b);
        this.b = null;
    }
}"
"<com.unity3d.player.MultiWindowSupport: void saveMultiWindowMode(android.app.Activity)>","public static void saveMultiWindowMode(Activity activity) {
    s_LastMultiWindowMode = isInMultiWindowMode(activity);
}"
"<com.unity3d.player.MultiWindowSupport: boolean isInMultiWindowMode(android.app.Activity)>","static boolean isInMultiWindowMode(Activity activity) {
    if (PlatformSupport.NOUGAT_SUPPORT) {
        return activity.isInMultiWindowMode();
    }
    return false;
}"
"<com.unity3d.player.MultiWindowSupport: boolean isMultiWindowModeChangedToTrue(android.app.Activity)>","public static boolean isMultiWindowModeChangedToTrue(Activity activity) {
    return !s_LastMultiWindowMode && isInMultiWindowMode(activity);
}"
"<com.unity3d.player.MultiWindowSupport: boolean getAllowResizableWindow(android.app.Activity)>","public static boolean getAllowResizableWindow(Activity activity) {
    try {
        ApplicationInfo applicationInfo = activity.getPackageManager().getApplicationInfo(activity.getPackageName(), 128);
        if (isInMultiWindowMode(activity)) {
            if (applicationInfo.metaData.getBoolean(RESIZABLE_WINDOW)) {
                return true;
            }
        }
    } catch (Exception unused) {
    }
    return false;
}"
"<com.unity3d.player.n: boolean isPlaying()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final boolean isPlaying() {
    boolean z = this.t && this.s;
    MediaPlayer mediaPlayer = this.q;
    return mediaPlayer == null ? !z : mediaPlayer.isPlaying() || !z;
}"
"<com.unity3d.player.n: int getBufferPercentage()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final int getBufferPercentage() {
    if (this.h) {
        return this.u;
    }
    return 100;
}"
"<com.unity3d.player.n: void surfaceDestroyed(android.view.SurfaceHolder)>","// android.view.SurfaceHolder.Callback
@Override
public final void surfaceDestroyed(SurfaceHolder surfaceHolder) {
    if (a) {
        b(""surfaceDestroyed called"");
    }
    this.w = false;
}"
"<com.unity3d.player.n: void d()>","private void d() {
    if (isPlaying()) {
        return;
    }
    a(1);
    if (a) {
        b(""startVideoPlayback"");
    }
    updateVideoLayout();
    if (this.v) {
        return;
    }
    start();
}"
"<com.unity3d.player.n: void destroyPlayer()>","/* JADX INFO: Access modifiers changed from: protected */
public final void destroyPlayer() {
    if (a) {
        b(""destroyPlayer"");
    }
    if (!this.v) {
        pause();
    }
    doCleanUp();
}"
"<com.unity3d.player.n: boolean onKeyDown(int,android.view.KeyEvent)>","// android.view.View, android.view.KeyEvent.Callback
@Override
public final boolean onKeyDown(int i, KeyEvent keyEvent) {
    if (i != 4 && (this.f != 2 || i == 0 || keyEvent.isSystem())) {
        MediaController mediaController = this.r;
        return mediaController != null ? mediaController.onKeyDown(i, keyEvent) : super.onKeyDown(i, keyEvent);
    }
    destroyPlayer();
    a(3);
    return true;
}"
"<com.unity3d.player.n: int getCurrentPosition()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final int getCurrentPosition() {
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer == null) {
        return 0;
    }
    return mediaPlayer.getCurrentPosition();
}"
"<com.unity3d.player.n: void updateVideoLayout()>","/* JADX INFO: Access modifiers changed from: protected */
/* JADX WARN: Code restructure failed: missing block: B:17:0x004d, code lost:
    
        if (r5 <= r3) goto L19;
     */
/* JADX WARN: Code restructure failed: missing block: B:18:0x004f, code lost:
    
        r1 = (int) (r0 / r3);
     */
/* JADX WARN: Code restructure failed: missing block: B:29:0x0053, code lost:
    
        r0 = (int) (r1 * r3);
     */
/* JADX WARN: Code restructure failed: missing block: B:33:0x005d, code lost:
    
        if (r5 >= r3) goto L19;
     */
/*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct add '--show-bad-code' argument
    */
public final void updateVideoLayout() {
    /*
            r8 = this;
            boolean r0 = com.unity3d.player.n.a
            if (r0 == 0) goto L9
            java.lang.String r0 = ""updateVideoLayout""
            b(r0)
        L9:
            android.media.MediaPlayer r0 = r8.q
            if (r0 != 0) goto Le
            return
        Le:
            int r0 = r8.m
            if (r0 == 0) goto L16
            int r0 = r8.n
            if (r0 != 0) goto L34
        L16:
            android.content.Context r0 = r8.b
            java.lang.String r1 = ""window""
            java.lang.Object r0 = r0.getSystemService(r1)
            android.view.WindowManager r0 = (android.view.WindowManager) r0
            android.util.DisplayMetrics r1 = new android.util.DisplayMetrics
            r1.<init>()
            android.view.Display r0 = r0.getDefaultDisplay()
            r0.getMetrics(r1)
            int r0 = r1.widthPixels
            r8.m = r0
            int r0 = r1.heightPixels
            r8.n = r0
        L34:
            int r0 = r8.m
            int r1 = r8.n
            boolean r2 = r8.s
            if (r2 == 0) goto L65
            int r2 = r8.o
            float r3 = (float) r2
            int r4 = r8.p
            float r5 = (float) r4
            float r3 = r3 / r5
            float r5 = (float) r0
            float r6 = (float) r1
            float r5 = r5 / r6
            int r6 = r8.g
            r7 = 1
            if (r6 != r7) goto L58
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 > 0) goto L53
        L4f:
            float r1 = (float) r0
            float r1 = r1 / r3
            int r1 = (int) r1
            goto L6e
        L53:
            float r0 = (float) r1
            float r0 = r0 * r3
            int r0 = (int) r0
            goto L6e
        L58:
            r7 = 2
            if (r6 != r7) goto L60
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 < 0) goto L53
            goto L4f
        L60:
            if (r6 != 0) goto L6e
            r0 = r2
            r1 = r4
            goto L6e
        L65:
            boolean r2 = com.unity3d.player.n.a
            if (r2 == 0) goto L6e
            java.lang.String r2 = ""updateVideoLayout: Video size is not known yet""
            b(r2)
        L6e:
            int r2 = r8.m
            if (r2 != r0) goto L76
            int r2 = r8.n
            if (r2 == r1) goto La1
        L76:
            boolean r2 = com.unity3d.player.n.a
            if (r2 == 0) goto L93
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            java.lang.String r3 = ""frameWidth = ""
            r2.<init>(r3)
            r2.append(r0)
            java.lang.String r3 = ""; frameHeight = ""
            r2.append(r3)
            r2.append(r1)
            java.lang.String r2 = r2.toString()
            b(r2)
        L93:
            android.widget.FrameLayout$LayoutParams r2 = new android.widget.FrameLayout$LayoutParams
            r3 = 17
            r2.<init>(r0, r1, r3)
            android.widget.FrameLayout r0 = r8.k
            android.view.SurfaceView r1 = r8.c
            r0.updateViewLayout(r1, r2)
        La1:
            return
        */
    throw new UnsupportedOperationException(""Method not decompiled: com.unity3d.player.n.updateVideoLayout():void"");
}"
"<com.unity3d.player.n: boolean onTouchEvent(android.view.MotionEvent)>","// android.view.View
@Override
public final boolean onTouchEvent(MotionEvent motionEvent) {
    int action = motionEvent.getAction() & 255;
    if (this.f != 2 || action != 0) {
        MediaController mediaController = this.r;
        return mediaController != null ? mediaController.onTouchEvent(motionEvent) : super.onTouchEvent(motionEvent);
    }
    destroyPlayer();
    a(3);
    return true;
}"
"<com.unity3d.player.n: void CancelOnPrepare()>","public final void CancelOnPrepare() {
    a(2);
}"
"<com.unity3d.player.n: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>","// android.view.SurfaceHolder.Callback
@Override
public final void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
    if (a) {
        b(""surfaceChanged called "" + i + "" "" + i2 + ""x"" + i3);
    }
    if (this.m == i2 && this.n == i3) {
        return;
    }
    this.m = i2;
    this.n = i3;
    if (this.w) {
        updateVideoLayout();
    }
}"
"<com.unity3d.player.n: void onCompletion(android.media.MediaPlayer)>","// android.media.MediaPlayer.OnCompletionListener
@Override
public final void onCompletion(MediaPlayer mediaPlayer) {
    if (a) {
        b(""onCompletion called"");
    }
    destroyPlayer();
    a(3);
}"
"<com.unity3d.player.n: boolean canSeekBackward()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final boolean canSeekBackward() {
    return true;
}"
"<com.unity3d.player.n: int getAudioSessionId()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final int getAudioSessionId() {
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer == null) {
        return 0;
    }
    return mediaPlayer.getAudioSessionId();
}"
"<com.unity3d.player.n: boolean canPause()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final boolean canPause() {
    return true;
}"
"<com.unity3d.player.n: void a(java.lang.String)>","void a(int i);"
"<com.unity3d.player.n: void doCleanUp()>","protected final void doCleanUp() {
    b bVar = this.y;
    if (bVar != null) {
        bVar.a();
        this.y = null;
    }
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer != null) {
        mediaPlayer.release();
        this.q = null;
    }
    this.o = 0;
    this.p = 0;
    this.t = false;
    this.s = false;
}"
"<com.unity3d.player.n: void surfaceCreated(android.view.SurfaceHolder)>","// android.view.SurfaceHolder.Callback
@Override
public final void surfaceCreated(SurfaceHolder surfaceHolder) {
    if (a) {
        b(""surfaceCreated called"");
    }
    this.w = true;
    c();
}"
"<com.unity3d.player.n: int getDuration()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final int getDuration() {
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer == null) {
        return 0;
    }
    return mediaPlayer.getDuration();
}"
"<com.unity3d.player.n: void onBufferingUpdate(android.media.MediaPlayer,int)>","// android.media.MediaPlayer.OnBufferingUpdateListener
@Override
public final void onBufferingUpdate(MediaPlayer mediaPlayer, int i) {
    if (a) {
        b(""onBufferingUpdate percent:"" + i);
    }
    this.u = i;
}"
"<com.unity3d.player.n: void c()>","private void c() {
    FileInputStream fileInputStream;
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer != null) {
        mediaPlayer.setDisplay(this.d);
        if (this.v) {
            return;
        }
        if (a) {
            b(""Resuming playback"");
        }
        this.q.start();
        return;
    }
    a(0);
    doCleanUp();
    try {
        MediaPlayer mediaPlayer2 = new MediaPlayer();
        this.q = mediaPlayer2;
        if (this.h) {
            mediaPlayer2.setDataSource(this.b, Uri.parse(this.e));
        } else {
            if (this.j != 0) {
                fileInputStream = new FileInputStream(this.e);
                this.q.setDataSource(fileInputStream.getFD(), this.i, this.j);
            } else {
                try {
                    AssetFileDescriptor openFd = getResources().getAssets().openFd(this.e);
                    this.q.setDataSource(openFd.getFileDescriptor(), openFd.getStartOffset(), openFd.getLength());
                    openFd.close();
                } catch (IOException unused) {
                    fileInputStream = new FileInputStream(this.e);
                    this.q.setDataSource(fileInputStream.getFD());
                }
            }
            fileInputStream.close();
        }
        this.q.setDisplay(this.d);
        this.q.setScreenOnWhilePlaying(true);
        this.q.setOnBufferingUpdateListener(this);
        this.q.setOnCompletionListener(this);
        this.q.setOnPreparedListener(this);
        this.q.setOnVideoSizeChangedListener(this);
        this.q.setAudioStreamType(3);
        this.q.prepareAsync();
        this.y = new b(this);
        new Thread(this.y).start();
    } catch (Exception e) {
        if (a) {
            b(""error: "" + e.getMessage() + e);
        }
        a(2);
    }
}"
"<com.unity3d.player.n: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>","// android.media.MediaPlayer.OnVideoSizeChangedListener
@Override
public final void onVideoSizeChanged(MediaPlayer mediaPlayer, int i, int i2) {
    if (a) {
        b(""onVideoSizeChanged called "" + i + ""x"" + i2);
    }
    if (i != 0 && i2 != 0) {
        this.s = true;
        this.o = i;
        this.p = i2;
        if (!this.t || 1 == 0) {
            return;
        }
        d();
        return;
    }
    if (a) {
        b(""invalid video width("" + i + "") or height("" + i2 + "")"");
    }
}"
"<com.unity3d.player.n: void onPrepared(android.media.MediaPlayer)>","// android.media.MediaPlayer.OnPreparedListener
@Override
public final void onPrepared(MediaPlayer mediaPlayer) {
    if (a) {
        b(""onPrepared called"");
    }
    b bVar = this.y;
    if (bVar != null) {
        bVar.a();
        this.y = null;
    }
    int i = this.f;
    if (i == 0 || i == 1) {
        MediaController mediaController = new MediaController(this.b);
        this.r = mediaController;
        mediaController.setMediaPlayer(this);
        this.r.setAnchorView(this);
        this.r.setEnabled(true);
        Context context = this.b;
        if (context instanceof Activity) {
            this.r.setSystemUiVisibility(((Activity) context).getWindow().getDecorView().getSystemUiVisibility());
        }
        this.r.show();
    }
    this.t = true;
    if (1 == 0 || !this.s) {
        return;
    }
    d();
}"
"<com.unity3d.player.n: void pause()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final void pause() {
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer == null) {
        return;
    }
    if (this.w) {
        mediaPlayer.pause();
    }
    this.v = true;
}"
"<com.unity3d.player.n: boolean canSeekForward()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final boolean canSeekForward() {
    return true;
}"
"<com.unity3d.player.n: void seekTo(int)>","// android.widget.MediaController.MediaPlayerControl
@Override
public final void seekTo(int i) {
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer == null) {
        return;
    }
    mediaPlayer.seekTo(i);
}"
"<com.unity3d.player.n: void start()>","// android.widget.MediaController.MediaPlayerControl
@Override
public final void start() {
    if (a) {
        b(""Start"");
    }
    MediaPlayer mediaPlayer = this.q;
    if (mediaPlayer == null) {
        return;
    }
    if (this.w) {
        mediaPlayer.start();
    }
    this.v = false;
}"
"<com.unity3d.player.n: void b(java.lang.String)>","/* JADX INFO: Access modifiers changed from: private */
public static void b(String str) {
    Log.i(""Video"", ""VideoPlayer: "" + str);
}"
"<com.unity3d.player.n: void a(int)>","void a(int i);"
"<com.unity3d.player.n: boolean a()>","/* JADX INFO: Access modifiers changed from: package-private */
public final boolean a() {
    return this.v;
}"
"<com.unity3d.player.h: void onActivityCreated(android.app.Activity,android.os.Bundle)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivityCreated(Activity activity, Bundle bundle) {
}"
"<com.unity3d.player.h: void onActivityResumed(android.app.Activity)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivityResumed(Activity activity) {
    this.a = new WeakReference(activity);
}"
"<com.unity3d.player.h: void a(android.view.SurfaceView)>","public final void a(SurfaceView surfaceView) {
    Bitmap createBitmap = Bitmap.createBitmap(surfaceView.getWidth(), surfaceView.getHeight(), Bitmap.Config.ARGB_8888);
    this.a = createBitmap;
    PixelCopy.request(surfaceView, createBitmap, this, new Handler(Looper.getMainLooper()));
}"
"<com.unity3d.player.h: void b(android.view.ViewGroup)>","public final void b(ViewGroup viewGroup) {
    a aVar = this.c;
    if (aVar == null || aVar.getParent() == null) {
        return;
    }
    viewGroup.removeView(this.c);
}"
"<com.unity3d.player.h: void onActivityPaused(android.app.Activity)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivityPaused(Activity activity) {
}"
"<com.unity3d.player.h: void a(android.view.ViewGroup)>","public final void a(SurfaceView surfaceView) {
    Bitmap createBitmap = Bitmap.createBitmap(surfaceView.getWidth(), surfaceView.getHeight(), Bitmap.Config.ARGB_8888);
    this.a = createBitmap;
    PixelCopy.request(surfaceView, createBitmap, this, new Handler(Looper.getMainLooper()));
}"
"<com.unity3d.player.h: void onActivityStarted(android.app.Activity)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivityStarted(Activity activity) {
}"
"<com.unity3d.player.h: void onActivityStopped(android.app.Activity)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivityStopped(Activity activity) {
}"
"<com.unity3d.player.h: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivitySaveInstanceState(Activity activity, Bundle bundle) {
}"
"<com.unity3d.player.h: void a()>","public final void a(SurfaceView surfaceView) {
    Bitmap createBitmap = Bitmap.createBitmap(surfaceView.getWidth(), surfaceView.getHeight(), Bitmap.Config.ARGB_8888);
    this.a = createBitmap;
    PixelCopy.request(surfaceView, createBitmap, this, new Handler(Looper.getMainLooper()));
}"
"<com.unity3d.player.h: void onActivityDestroyed(android.app.Activity)>","// android.app.Application.ActivityLifecycleCallbacks
@Override
public final void onActivityDestroyed(Activity activity) {
}"
"<com.unity3d.player.AudioVolumeHandler: void a()>","public final void a() {
    this.a.a();
    this.a = null;
}"
"<com.unity3d.player.AudioVolumeHandler: void onAudioVolumeChanged(int)>","// com.unity3d.player.b.InterfaceC0003b
@Override
public final native void onAudioVolumeChanged(int i);"
"<com.unity3d.player.IAssetPackManagerStatusQueryCallback: void onStatusResult(long,java.lang.String[],int[],int[])>","void onStatusResult(long j, String[] strArr, int[] iArr, int[] iArr2);"
"<com.unity3d.player.UnityPermissions: boolean hasUserAuthorizedPermission(android.app.Activity,java.lang.String)>","public static boolean hasUserAuthorizedPermission(Activity activity, String str) {
    return activity.checkCallingOrSelfPermission(str) == 0;
}"
"<com.unity3d.player.UnityPermissions: void requestUserPermissions(android.app.Activity,java.lang.String[],com.unity3d.player.IPermissionRequestCallbacks)>","public static void requestUserPermissions(Activity activity, String[] strArr, IPermissionRequestCallbacks iPermissionRequestCallbacks) {
    if (!PlatformSupport.MARSHMALLOW_SUPPORT || activity == null || strArr == null) {
        return;
    }
    FragmentManager fragmentManager = activity.getFragmentManager();
    if (fragmentManager.findFragmentByTag(""96489"") == null) {
        g gVar = new g(activity, iPermissionRequestCallbacks);
        Bundle bundle = new Bundle();
        bundle.putStringArray(""PermissionNames"", strArr);
        gVar.setArguments(bundle);
        FragmentTransaction beginTransaction = fragmentManager.beginTransaction();
        beginTransaction.add(0, gVar, ""96489"");
        beginTransaction.commit();
    }
}"
"<com.unity3d.player.UnityPermissions: boolean skipPermissionsDialog(android.app.Activity)>","public static boolean skipPermissionsDialog(Activity activity) {
    ActivityInfo activityInfo;
    ApplicationInfo applicationInfo;
    if (!PlatformSupport.MARSHMALLOW_SUPPORT) {
        return false;
    }
    try {
        PackageManager packageManager = activity.getPackageManager();
        activityInfo = packageManager.getActivityInfo(activity.getComponentName(), 128);
        applicationInfo = packageManager.getApplicationInfo(activity.getPackageName(), 128);
    } catch (Exception unused) {
    }
    if (checkInfoForMetadata(activityInfo)) {
        return true;
    }
    return checkInfoForMetadata(applicationInfo);
}"
"<com.unity3d.player.UnityPermissions: boolean checkInfoForMetadata(android.content.pm.PackageItemInfo)>","private static boolean checkInfoForMetadata(PackageItemInfo packageItemInfo) {
    try {
        return packageItemInfo.metaData.getBoolean(SKIP_DIALOG_METADATA_NAME);
    } catch (Exception unused) {
        return false;
    }
}"
"<com.unity3d.player.HFPStatus: void a(com.unity3d.player.HFPStatus)>","public final void a() {
    clearHFPStat();
    deinitHFPStatusJni();
}"
"<com.unity3d.player.HFPStatus: void setHFPRecordingStat(boolean)>","protected void setHFPRecordingStat(boolean z) {
    this.d = z;
    if (z) {
        return;
    }
    this.e.setMode(0);
}"
"<com.unity3d.player.HFPStatus: void initHFPStatusJni()>","private final native void initHFPStatusJni();"
"<com.unity3d.player.HFPStatus: void deinitHFPStatusJni()>","private final native void deinitHFPStatusJni();"
"<com.unity3d.player.HFPStatus: boolean getHFPStat()>","protected boolean getHFPStat() {
    return this.g == a.b;
}"
"<com.unity3d.player.HFPStatus: void b()>","private void b() {
    BroadcastReceiver broadcastReceiver = this.b;
    if (broadcastReceiver != null) {
        this.a.unregisterReceiver(broadcastReceiver);
        this.b = null;
        this.c = null;
    }
    this.g = a.a;
}"
"<com.unity3d.player.HFPStatus: void a()>","public final void a() {
    clearHFPStat();
    deinitHFPStatusJni();
}"
"<com.unity3d.player.HFPStatus: void requestHFPStat()>","protected void requestHFPStat() {
    clearHFPStat();
    BroadcastReceiver broadcastReceiver = new // from class: com.unity3d.player.HFPStatus.1
    BroadcastReceiver() {

        // android.content.BroadcastReceiver
        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getIntExtra(""android.media.extra.SCO_AUDIO_STATE"", -1) != 1) {
                return;
            }
            HFPStatus.this.g = a.b;
            HFPStatus.this.c();
            if (HFPStatus.this.d) {
                HFPStatus.this.e.setMode(3);
            }
        }
    };
    this.b = broadcastReceiver;
    this.c = this.a.registerReceiver(broadcastReceiver, new IntentFilter(""android.media.ACTION_SCO_AUDIO_STATE_UPDATED""));
    try {
        this.f = true;
        this.e.startBluetoothSco();
    } catch (NullPointerException unused) {
        f.Log(5, ""startBluetoothSco() failed. no bluetooth device connected."");
    }
}"
"<com.unity3d.player.HFPStatus: void clearHFPStat()>","protected void clearHFPStat() {
    b();
    c();
}"
"<com.unity3d.player.HFPStatus: void c()>","/* JADX INFO: Access modifiers changed from: private */
public void c() {
    if (this.f) {
        this.f = false;
        this.e.stopBluetoothSco();
    }
}"
"<com.unity3d.player.d: void a(java.lang.String[],com.unity3d.player.IAssetPackManagerStatusQueryCallback)>","void a(Activity activity, IAssetPackManagerMobileDataConfirmationCallback iAssetPackManagerMobileDataConfirmationCallback);"
"<com.unity3d.player.d: void a(android.app.Activity,com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback)>","void a(Activity activity, IAssetPackManagerMobileDataConfirmationCallback iAssetPackManagerMobileDataConfirmationCallback);"
"<com.unity3d.player.d: void a(java.lang.String[],com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","void a(Activity activity, IAssetPackManagerMobileDataConfirmationCallback iAssetPackManagerMobileDataConfirmationCallback);"
"<com.unity3d.player.d: void a(java.lang.String[])>","void a(Activity activity, IAssetPackManagerMobileDataConfirmationCallback iAssetPackManagerMobileDataConfirmationCallback);"
"<com.unity3d.player.d: void a(java.lang.Object)>","void a(Activity activity, IAssetPackManagerMobileDataConfirmationCallback iAssetPackManagerMobileDataConfirmationCallback);"
"<com.unity3d.player.d: void b(java.lang.String)>","void b(String str);"
"<com.unity3d.player.OrientationLockListener: void b()>","// com.unity3d.player.k.a
@Override
public final void b() {
    nativeUpdateOrientationLockState(Settings.System.getInt(this.b.getContentResolver(), ""accelerometer_rotation"", 0));
}"
"<com.unity3d.player.OrientationLockListener: void nativeUpdateOrientationLockState(int)>","public final native void nativeUpdateOrientationLockState(int i);"
"<com.unity3d.player.OrientationLockListener: void a()>","public final void a() {
    this.a.a();
    this.a = null;
}"
"<bitter.jnibridge.JNIBridge: void disableInterfaceProxy(java.lang.Object)>","static void disableInterfaceProxy(Object obj) {
    if (obj != null) {
        ((a) Proxy.getInvocationHandler(obj)).a();
    }
}"
"<bitter.jnibridge.JNIBridge: void delete(long)>","static native void delete(long j);"
"<com.unity3d.player.IPermissionRequestCallbacks: void onPermissionDenied(java.lang.String)>","void onPermissionDenied(String str);"
"<com.unity3d.player.IPermissionRequestCallbacks: void onPermissionDeniedAndDontAskAgain(java.lang.String)>","void onPermissionDeniedAndDontAskAgain(String str);"
"<com.unity3d.player.IPermissionRequestCallbacks: void onPermissionGranted(java.lang.String)>","void onPermissionGranted(String str);"
"<com.unity3d.player.a: void a(java.lang.String[],com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.a: com.unity3d.player.d a(android.content.Context)>","public static com.unity3d.player.d a(Context context) {
    if (a == null) {
        a = new a(context);
    }
    return a;
}"
"<com.unity3d.player.a: void a(android.app.Activity,com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback)>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.a: void b(java.lang.String)>","// com.unity3d.player.d
@Override
public final void b(String str) {
    this.b.removePack(str);
}"
"<com.unity3d.player.a: void a(java.lang.String[],com.unity3d.player.IAssetPackManagerStatusQueryCallback)>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.a: void a(com.unity3d.player.a,java.lang.String,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper)>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.a: void a(java.lang.String[])>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.a: void a(java.lang.String,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper)>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.a: void a(java.lang.Object)>","public final synchronized void a(IAssetPackManagerDownloadStatusCallback iAssetPackManagerDownloadStatusCallback) {
    this.b.add(iAssetPackManagerDownloadStatusCallback);
}"
"<com.unity3d.player.NativeLoader: boolean load(java.lang.String)>","/* JADX INFO: Access modifiers changed from: package-private */
public static final native boolean load(String str);"
"<com.unity3d.player.NativeLoader: boolean unload()>","/* JADX INFO: Access modifiers changed from: package-private */
public static final native boolean unload();"
"<com.unity3d.player.UnityPlayer: void unload()>","<com.unity3d.player.UnityPlayer: void unload()>"
"<com.unity3d.player.UnityPlayer: void reportSoftInputIsVisible(boolean)>","<com.unity3d.player.UnityPlayer: void reportSoftInputIsVisible(boolean)>"
"<com.unity3d.player.ReflectionHelper: java.lang.Object newProxyInstance(long,java.lang.Class)>","<com.unity3d.player.ReflectionHelper: java.lang.Object newProxyInstance(long,java.lang.Class)>"
"<com.google.androidgamesdk.ChoreographerCallback$a: void run()>","<com.google.androidgamesdk.ChoreographerCallback$a: void run()>"
"<com.unity3d.player.NetworkConnectivity$1: void onUnavailable()>","<com.unity3d.player.NetworkConnectivity$1: void onUnavailable()>"
"<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void onPermissionDeniedAndDontAskAgain(java.lang.String)>","<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void onPermissionDeniedAndDontAskAgain(java.lang.String)>"
"<com.unity3d.player.o$1: void <init>(com.unity3d.player.o,java.lang.String,int,int,int,boolean,long,long)>","<com.unity3d.player.o$1: void <init>(com.unity3d.player.o,java.lang.String,int,int,int,boolean,long,long)>"
"<com.unity3d.player.ReflectionHelper: void <clinit>()>","<com.unity3d.player.ReflectionHelper: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: java.lang.String getProcessName()>","<com.unity3d.player.UnityPlayer: java.lang.String getProcessName()>"
"<com.unity3d.player.UnityPlayer: void access$1100(com.unity3d.player.UnityPlayer,int,android.view.Surface)>","<com.unity3d.player.UnityPlayer: void access$1100(com.unity3d.player.UnityPlayer,int,android.view.Surface)>"
"<com.unity3d.player.ReflectionHelper: void <init>()>","<com.unity3d.player.ReflectionHelper: void <init>()>"
"<com.unity3d.player.UnityPlayer: boolean getARCoreEnabled()>","<com.unity3d.player.UnityPlayer: boolean getARCoreEnabled()>"
"<com.unity3d.player.b$a: boolean deliverSelfNotifications()>","<com.unity3d.player.b$a: boolean deliverSelfNotifications()>"
"<com.unity3d.player.o$3: void run()>","<com.unity3d.player.o$3: void run()>"
"<com.unity3d.player.UnityPlayer$e: void <init>(com.unity3d.player.UnityPlayer,byte)>","<com.unity3d.player.UnityPlayer$e: void <init>(com.unity3d.player.UnityPlayer,byte)>"
"<com.unity3d.player.i: com.unity3d.player.UnityPlayer a(com.unity3d.player.i)>","<com.unity3d.player.i: com.unity3d.player.UnityPlayer a(com.unity3d.player.i)>"
"<com.unity3d.player.i$2: void <init>(com.unity3d.player.i)>","<com.unity3d.player.i$2: void <init>(com.unity3d.player.i)>"
"<com.unity3d.player.UnityPlayer$12: void a()>","<com.unity3d.player.UnityPlayer$12: void a()>"
"<com.google.androidgamesdk.ChoreographerCallback$a: void <init>(com.google.androidgamesdk.ChoreographerCallback)>","<com.google.androidgamesdk.ChoreographerCallback$a: void <init>(com.google.androidgamesdk.ChoreographerCallback)>"
"<com.unity3d.player.b$a: void onChange(boolean,android.net.Uri)>","<com.unity3d.player.b$a: void onChange(boolean,android.net.Uri)>"
"<com.unity3d.player.c: android.hardware.camera2.CameraManager b(android.content.Context)>","<com.unity3d.player.c: android.hardware.camera2.CameraManager b(android.content.Context)>"
"<com.unity3d.player.UnityPlayer: boolean startOrientationListener(int)>","<com.unity3d.player.UnityPlayer: boolean startOrientationListener(int)>"
"<com.unity3d.player.c: android.hardware.camera2.CaptureRequest$Builder a(com.unity3d.player.c,android.hardware.camera2.CaptureRequest$Builder)>","<com.unity3d.player.c: android.hardware.camera2.CaptureRequest$Builder a(com.unity3d.player.c,android.hardware.camera2.CaptureRequest$Builder)>"
"<com.unity3d.player.UnityPlayer: android.content.Context access$2300(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: android.content.Context access$2300(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: int getSplashMode()>","<com.unity3d.player.UnityPlayer: int getSplashMode()>"
"<com.google.androidgamesdk.SwappyDisplayManager: android.app.Activity access$100(com.google.androidgamesdk.SwappyDisplayManager)>","<com.google.androidgamesdk.SwappyDisplayManager: android.app.Activity access$100(com.google.androidgamesdk.SwappyDisplayManager)>"
"<com.unity3d.player.UnityPlayer: void nativeOrientationChanged(int,int)>","<com.unity3d.player.UnityPlayer: void nativeOrientationChanged(int,int)>"
"<com.unity3d.player.UnityPlayer: boolean isFinishing()>","<com.unity3d.player.UnityPlayer: boolean isFinishing()>"
"<com.unity3d.player.UnityPlayer: java.lang.String getNetworkProxySettings(java.lang.String)>","<com.unity3d.player.UnityPlayer: java.lang.String getNetworkProxySettings(java.lang.String)>"
"<com.unity3d.player.ReflectionHelper: java.lang.String getFieldSignature(java.lang.reflect.Field)>","<com.unity3d.player.ReflectionHelper: java.lang.String getFieldSignature(java.lang.reflect.Field)>"
"<com.unity3d.player.i$4: void <init>(com.unity3d.player.i)>","<com.unity3d.player.i$4: void <init>(com.unity3d.player.i)>"
"<com.unity3d.player.a: com.unity3d.player.a a()>","<com.unity3d.player.a: com.unity3d.player.a a()>"
"<org.fmod.a: void <init>(org.fmod.FMODAudioDevice,int,int)>","<org.fmod.a: void <init>(org.fmod.FMODAudioDevice,int,int)>"
"<com.unity3d.player.o: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.o: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.i$3: void <init>(com.unity3d.player.i,android.content.Context)>","<com.unity3d.player.i$3: void <init>(com.unity3d.player.i,android.content.Context)>"
"<com.unity3d.player.UnityPlayer: void lowMemory()>","<com.unity3d.player.UnityPlayer: void lowMemory()>"
"<com.unity3d.player.UnityPlayer: void reportError(java.lang.String,java.lang.String)>","<com.unity3d.player.UnityPlayer: void reportError(java.lang.String,java.lang.String)>"
"<com.unity3d.player.a$c: void <init>(com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback)>","<com.unity3d.player.a$c: void <init>(com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback)>"
"<bitter.jnibridge.JNIBridge$a: void <init>(long)>","<bitter.jnibridge.JNIBridge$a: void <init>(long)>"
"<com.unity3d.player.UnityPlayer$e: void a()>","<com.unity3d.player.UnityPlayer$e: void a()>"
"<com.unity3d.player.b$b: void onAudioVolumeChanged(int)>","<com.unity3d.player.b$b: void onAudioVolumeChanged(int)>"
"<bitter.jnibridge.JNIBridge: java.lang.Object newInterfaceProxy(long,java.lang.Class[])>","<bitter.jnibridge.JNIBridge: java.lang.Object newInterfaceProxy(long,java.lang.Class[])>"
"<com.unity3d.player.UnityPlayer: void access$800(com.unity3d.player.UnityPlayer,boolean)>","<com.unity3d.player.UnityPlayer: void access$800(com.unity3d.player.UnityPlayer,boolean)>"
"<com.unity3d.player.o$1$1$1: void run()>","<com.unity3d.player.o$1$1$1: void run()>"
"<com.unity3d.player.c$3: void onError(android.hardware.camera2.CameraDevice,int)>","<com.unity3d.player.c$3: void onError(android.hardware.camera2.CameraDevice,int)>"
"<com.sol.owheel.BuildConfig: void <init>()>","<com.sol.owheel.BuildConfig: void <init>()>"
"<com.unity3d.player.ReflectionHelper: java.lang.reflect.Constructor getConstructorID(java.lang.Class,java.lang.String)>","<com.unity3d.player.ReflectionHelper: java.lang.reflect.Constructor getConstructorID(java.lang.Class,java.lang.String)>"
"<com.unity3d.player.c$3: void onOpened(android.hardware.camera2.CameraDevice)>","<com.unity3d.player.c$3: void onOpened(android.hardware.camera2.CameraDevice)>"
"<com.unity3d.player.UnityPlayer$14: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$14: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void access$1600(com.unity3d.player.UnityPlayer,int,android.view.Surface)>","<com.unity3d.player.UnityPlayer: void access$1600(com.unity3d.player.UnityPlayer,int,android.view.Surface)>"
"<com.unity3d.player.NetworkConnectivity: void <init>(android.content.Context)>","<com.unity3d.player.NetworkConnectivity: void <init>(android.content.Context)>"
"<com.unity3d.player.UnityPlayer$13: void <init>(com.unity3d.player.UnityPlayer,boolean)>","<com.unity3d.player.UnityPlayer$13: void <init>(com.unity3d.player.UnityPlayer,boolean)>"
"<com.unity3d.player.d: java.lang.String a(java.lang.String)>","<com.unity3d.player.d: java.lang.String a(java.lang.String)>"
"<com.unity3d.player.a$a: void run()>","<com.unity3d.player.a$a: void run()>"
"<com.unity3d.player.UnityPlayer: android.content.pm.ApplicationInfo getApplicationInfo()>","<com.unity3d.player.UnityPlayer: android.content.pm.ApplicationInfo getApplicationInfo()>"
"<com.unity3d.player.UnityPlayer$16: void run()>","<com.unity3d.player.UnityPlayer$16: void run()>"
"<com.unity3d.player.c: java.lang.String[] c(android.content.Context)>","<com.unity3d.player.c: java.lang.String[] c(android.content.Context)>"
"<com.unity3d.player.a$b: void a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","<com.unity3d.player.a$b: void a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>"
"<com.unity3d.player.UnityPlayer$e$1: boolean handleMessage(android.os.Message)>","<com.unity3d.player.UnityPlayer$e$1: boolean handleMessage(android.os.Message)>"
"<com.unity3d.player.c: android.media.Image i(com.unity3d.player.c)>","<com.unity3d.player.c: android.media.Image i(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: void destroy()>","<com.unity3d.player.UnityPlayer: void destroy()>"
"<com.unity3d.player.c: void <clinit>()>","<com.unity3d.player.c: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void disableLogger()>","<com.unity3d.player.UnityPlayer: void disableLogger()>"
"<com.unity3d.player.UnityPlayer: void resume()>","<com.unity3d.player.UnityPlayer: void resume()>"
"<com.unity3d.player.UnityPlayer: void executeGLThreadJobs()>","<com.unity3d.player.UnityPlayer: void executeGLThreadJobs()>"
"<bitter.jnibridge.JNIBridge$a: void a()>","<bitter.jnibridge.JNIBridge$a: void a()>"
"<com.unity3d.player.a: java.lang.Object a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","<com.unity3d.player.a: java.lang.Object a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>"
"<com.unity3d.player.UnityPlayer$19: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>","<com.unity3d.player.UnityPlayer$19: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"
"<com.unity3d.player.UnityPlayer: void kill()>","<com.unity3d.player.UnityPlayer: void kill()>"
"<com.unity3d.player.UnityPlayer: void nativeRecreateGfxState(int,android.view.Surface)>","<com.unity3d.player.UnityPlayer: void nativeRecreateGfxState(int,android.view.Surface)>"
"<bitter.jnibridge.JNIBridge: void <init>()>","<bitter.jnibridge.JNIBridge: void <init>()>"
"<com.unity3d.player.UnityPlayer$4$1: void onCancel(android.content.DialogInterface)>","<com.unity3d.player.UnityPlayer$4$1: void onCancel(android.content.DialogInterface)>"
"<com.google.androidgamesdk.SwappyDisplayManager$1: void <init>(com.google.androidgamesdk.SwappyDisplayManager,int)>","<com.google.androidgamesdk.SwappyDisplayManager$1: void <init>(com.google.androidgamesdk.SwappyDisplayManager,int)>"
"<com.unity3d.player.c$1: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>","<com.unity3d.player.c$1: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>"
"<com.unity3d.player.UnityPlayer$e: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$e: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void setHideInputField(boolean)>","<com.unity3d.player.UnityPlayer: void setHideInputField(boolean)>"
"<com.unity3d.player.UnityPlayer$7: void run()>","<com.unity3d.player.UnityPlayer$7: void run()>"
"<com.unity3d.player.h$a: void onPixelCopyFinished(int)>","<com.unity3d.player.h$a: void onPixelCopyFinished(int)>"
"<com.unity3d.player.o$2: void <init>(com.unity3d.player.o)>","<com.unity3d.player.o$2: void <init>(com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer$23: void run()>","<com.unity3d.player.UnityPlayer$23: void run()>"
"<com.unity3d.player.UnityPlayer: void nativeRestartActivityIndicator()>","<com.unity3d.player.UnityPlayer: void nativeRestartActivityIndicator()>"
"<com.unity3d.player.UnityPlayer: void preloadJavaPlugins()>","<com.unity3d.player.UnityPlayer: void preloadJavaPlugins()>"
"<com.unity3d.player.o: int a(com.unity3d.player.o,int)>","<com.unity3d.player.o: int a(com.unity3d.player.o,int)>"
"<com.unity3d.player.UnityPlayer: boolean displayChanged(int,android.view.Surface)>","<com.unity3d.player.UnityPlayer: boolean displayChanged(int,android.view.Surface)>"
"<com.unity3d.player.UnityPlayer$17: void onOrientationChanged(int)>","<com.unity3d.player.UnityPlayer$17: void onOrientationChanged(int)>"
"<com.unity3d.player.UnityPlayer: void access$3000(com.unity3d.player.UnityPlayer,int,int)>","<com.unity3d.player.UnityPlayer: void access$3000(com.unity3d.player.UnityPlayer,int,int)>"
"<com.unity3d.player.UnityPlayer: void nativeSetKeyboardIsVisible(boolean)>","<com.unity3d.player.UnityPlayer: void nativeSetKeyboardIsVisible(boolean)>"
"<com.unity3d.player.UnityPlayer: void pauseUnity()>","<com.unity3d.player.UnityPlayer: void pauseUnity()>"
"<com.unity3d.player.OrientationLockListener: void <init>(android.content.Context)>","<com.unity3d.player.OrientationLockListener: void <init>(android.content.Context)>"
"<com.unity3d.player.f: void <clinit>()>","<com.unity3d.player.f: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void access$2900(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$2900(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.k: void <init>(android.content.Context)>","<com.unity3d.player.k: void <init>(android.content.Context)>"
"<com.unity3d.player.g: void <init>()>","<com.unity3d.player.g: void <init>()>"
"<com.unity3d.player.NetworkConnectivity$1: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>","<com.unity3d.player.NetworkConnectivity$1: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>"
"<com.unity3d.player.UnityPlayer$2: void run()>","<com.unity3d.player.UnityPlayer$2: void run()>"
"<com.unity3d.player.i: android.content.Context c(com.unity3d.player.i)>","<com.unity3d.player.i: android.content.Context c(com.unity3d.player.i)>"
"<com.unity3d.player.UnityPlayer: void addPhoneCallListener()>","<com.unity3d.player.UnityPlayer: void addPhoneCallListener()>"
"<com.unity3d.player.UnityPlayer: void pauseJavaAndCallUnloadCallback()>","<com.unity3d.player.UnityPlayer: void pauseJavaAndCallUnloadCallback()>"
"<com.unity3d.player.c$2: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>","<com.unity3d.player.c$2: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>"
"<com.unity3d.player.UnityPlayer$13: void a()>","<com.unity3d.player.UnityPlayer$13: void a()>"
"<com.google.androidgamesdk.SwappyDisplayManager$1: void run()>","<com.google.androidgamesdk.SwappyDisplayManager$1: void run()>"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: com.unity3d.player.PlayAssetDeliveryUnityWrapper init(android.content.Context)>","<com.unity3d.player.PlayAssetDeliveryUnityWrapper: com.unity3d.player.PlayAssetDeliveryUnityWrapper init(android.content.Context)>"
"<com.unity3d.player.UnityPlayer: void queueGLThreadEvent(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer: void queueGLThreadEvent(java.lang.Runnable)>"
"<com.unity3d.player.NetworkConnectivity$1: void onAvailable(android.net.Network)>","<com.unity3d.player.NetworkConnectivity$1: void onAvailable(android.net.Network)>"
"<com.unity3d.player.UnityPlayer: boolean updateDisplayInternal(int,android.view.Surface)>","<com.unity3d.player.UnityPlayer: boolean updateDisplayInternal(int,android.view.Surface)>"
"<com.unity3d.player.ReflectionHelper: java.lang.Object newProxyInstance(long,java.lang.Class[])>","<com.unity3d.player.ReflectionHelper: java.lang.Object newProxyInstance(long,java.lang.Class[])>"
"<com.unity3d.player.c: android.graphics.Rect a(android.util.Size[],double,double)>","<com.unity3d.player.c: android.graphics.Rect a(android.util.Size[],double,double)>"
"<com.unity3d.player.UnityPlayer$a: void onSensorChanged(android.hardware.SensorEvent)>","<com.unity3d.player.UnityPlayer$a: void onSensorChanged(android.hardware.SensorEvent)>"
"<org.fmod.FMODAudioDevice: void <init>()>","<org.fmod.FMODAudioDevice: void <init>()>"
"<com.unity3d.player.UnityPlayer$10: void <init>(com.unity3d.player.UnityPlayer,boolean,java.lang.String,int)>","<com.unity3d.player.UnityPlayer$10: void <init>(com.unity3d.player.UnityPlayer,boolean,java.lang.String,int)>"
"<com.unity3d.player.j$a: void <clinit>()>","<com.unity3d.player.j$a: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: boolean onGenericMotionEvent(android.view.MotionEvent)>","<com.unity3d.player.UnityPlayer: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<com.unity3d.player.UnityPlayer: java.lang.String getClipboardText()>","<com.unity3d.player.UnityPlayer: java.lang.String getClipboardText()>"
"<com.unity3d.player.UnityPlayer$12: void <init>(com.unity3d.player.UnityPlayer,android.graphics.Rect)>","<com.unity3d.player.UnityPlayer$12: void <init>(com.unity3d.player.UnityPlayer,android.graphics.Rect)>"
"<com.unity3d.player.UnityPlayer$14: void a()>","<com.unity3d.player.UnityPlayer$14: void a()>"
"<com.unity3d.player.UnityPlayer: void nativeSetInputArea(int,int,int,int)>","<com.unity3d.player.UnityPlayer: void nativeSetInputArea(int,int,int,int)>"
"<com.unity3d.player.UnityPlayer: boolean access$1900(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: boolean access$1900(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: java.lang.String logLoadLibMainError(java.lang.String,java.lang.String)>","<com.unity3d.player.UnityPlayer: java.lang.String logLoadLibMainError(java.lang.String,java.lang.String)>"
"<com.unity3d.player.UnityPlayer$2: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$2: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: com.unity3d.player.o access$3302(com.unity3d.player.UnityPlayer,com.unity3d.player.o)>","<com.unity3d.player.UnityPlayer: com.unity3d.player.o access$3302(com.unity3d.player.UnityPlayer,com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer$18: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$18: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void onUnityPlayerQuitted()>","<com.unity3d.player.UnityPlayer: void onUnityPlayerQuitted()>"
"<com.unity3d.player.UnityPlayer: void swapViews(android.view.View,android.view.View)>","<com.unity3d.player.UnityPlayer: void swapViews(android.view.View,android.view.View)>"
"<com.unity3d.player.UnityPlayer$22: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$22: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.HFPStatus: boolean b(com.unity3d.player.HFPStatus)>","<com.unity3d.player.HFPStatus: boolean b(com.unity3d.player.HFPStatus)>"
"<com.unity3d.player.UnityPlayer$6: void run()>","<com.unity3d.player.UnityPlayer$6: void run()>"
"<com.unity3d.player.UnityPlayer: boolean isUaaLUseCase()>","<com.unity3d.player.UnityPlayer: boolean isUaaLUseCase()>"
"<com.unity3d.player.c: android.media.ImageReader e(com.unity3d.player.c)>","<com.unity3d.player.c: android.media.ImageReader e(com.unity3d.player.c)>"
"<com.sol.owheel.R$id: void <init>()>","<com.sol.owheel.R$id: void <init>()>"
"<com.unity3d.player.UnityPlayer$e: void a(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer$e: void a(java.lang.Runnable)>"
"<com.unity3d.player.c$3: void onDisconnected(android.hardware.camera2.CameraDevice)>","<com.unity3d.player.c$3: void onDisconnected(android.hardware.camera2.CameraDevice)>"
"<com.unity3d.player.UnityPlayer: boolean nativeRender()>","<com.unity3d.player.UnityPlayer: boolean nativeRender()>"
"<com.unity3d.player.c: android.graphics.Rect a()>","<com.unity3d.player.c: android.graphics.Rect a()>"
"<com.sol.owheel.R$string: void <init>()>","<com.sol.owheel.R$string: void <init>()>"
"<com.unity3d.player.UnityPlayer: void nativeApplicationUnload()>","<com.unity3d.player.UnityPlayer: void nativeApplicationUnload()>"
"<com.unity3d.player.a: java.lang.Object b(com.unity3d.player.a)>","<com.unity3d.player.a: java.lang.Object b(com.unity3d.player.a)>"
"<com.unity3d.player.n$b: void <init>(com.unity3d.player.n,com.unity3d.player.n)>","<com.unity3d.player.n$b: void <init>(com.unity3d.player.n,com.unity3d.player.n)>"
"<com.unity3d.player.UnityPlayerActivity: java.lang.String updateUnityCommandLineArguments(java.lang.String)>","<com.unity3d.player.UnityPlayerActivity: java.lang.String updateUnityCommandLineArguments(java.lang.String)>"
"<com.unity3d.player.UnityPlayer: void sendSurfaceChangedEvent()>","<com.unity3d.player.UnityPlayer: void sendSurfaceChangedEvent()>"
"<com.unity3d.player.UnityPlayer$e: void c()>","<com.unity3d.player.UnityPlayer$e: void c()>"
"<com.unity3d.player.a$c$a: void run()>","<com.unity3d.player.a$c$a: void run()>"
"<com.unity3d.player.UnityPlayer$f: void run()>","<com.unity3d.player.UnityPlayer$f: void run()>"
"<com.unity3d.player.UnityCoreAssetPacksStatusCallbacks: void <init>()>","<com.unity3d.player.UnityCoreAssetPacksStatusCallbacks: void <init>()>"
"<com.unity3d.player.a$e$a: void run()>","<com.unity3d.player.a$e$a: void run()>"
"<com.unity3d.player.UnityPlayer$11: void a()>","<com.unity3d.player.UnityPlayer$11: void a()>"
"<com.unity3d.player.UnityPlayer: void DisableStaticSplashScreen()>","<com.unity3d.player.UnityPlayer: void DisableStaticSplashScreen()>"
"<com.unity3d.player.UnityPlayer: com.unity3d.player.IUnityPlayerLifecycleEvents access$3700(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: com.unity3d.player.IUnityPlayerLifecycleEvents access$3700(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.a$c: void a(java.lang.Integer)>","<com.unity3d.player.a$c: void a(java.lang.Integer)>"
"<com.unity3d.player.c$5: void onFrameAvailable(android.graphics.SurfaceTexture)>","<com.unity3d.player.c$5: void onFrameAvailable(android.graphics.SurfaceTexture)>"
"<com.unity3d.player.i$3: boolean onKeyPreIme(int,android.view.KeyEvent)>","<com.unity3d.player.i$3: boolean onKeyPreIme(int,android.view.KeyEvent)>"
"<com.unity3d.player.UnityPlayer$e: void b()>","<com.unity3d.player.UnityPlayer$e: void b()>"
"<com.unity3d.player.UnityPlayer$19: void surfaceDestroyed(android.view.SurfaceHolder)>","<com.unity3d.player.UnityPlayer$19: void surfaceDestroyed(android.view.SurfaceHolder)>"
"<com.unity3d.player.g: void <init>(android.app.Activity,com.unity3d.player.IPermissionRequestCallbacks)>","<com.unity3d.player.g: void <init>(android.app.Activity,com.unity3d.player.IPermissionRequestCallbacks)>"
"<com.unity3d.player.UnityPlayer: boolean showVideoPlayer(java.lang.String,int,int,int,boolean,int,int)>","<com.unity3d.player.UnityPlayer: boolean showVideoPlayer(java.lang.String,int,int,int,boolean,int,int)>"
"<com.unity3d.player.Camera2Wrapper: java.lang.Object getCameraFocusArea(float,float)>","<com.unity3d.player.Camera2Wrapper: java.lang.Object getCameraFocusArea(float,float)>"
"<com.unity3d.player.n: void <clinit>()>","<com.unity3d.player.n: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void setCharacterLimit(int)>","<com.unity3d.player.UnityPlayer: void setCharacterLimit(int)>"
"<com.unity3d.player.UnityPlayer$3: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$3: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void hideSoftInput()>","<com.unity3d.player.UnityPlayer: void hideSoftInput()>"
"<com.unity3d.player.HFPStatus$a: void <clinit>()>","<com.unity3d.player.HFPStatus$a: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void nativeResume()>","<com.unity3d.player.UnityPlayer: void nativeResume()>"
"<com.unity3d.player.UnityPlayer: void nativeSoftInputClosed()>","<com.unity3d.player.UnityPlayer: void nativeSoftInputClosed()>"
"<com.unity3d.player.o: com.unity3d.player.n a(com.unity3d.player.o)>","<com.unity3d.player.o: com.unity3d.player.n a(com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer: boolean access$2002(com.unity3d.player.UnityPlayer,boolean)>","<com.unity3d.player.UnityPlayer: boolean access$2002(com.unity3d.player.UnityPlayer,boolean)>"
"<com.unity3d.player.m: void <init>()>","<com.unity3d.player.m: void <init>()>"
"<com.unity3d.player.UnityPlayer$e$1: void <init>(com.unity3d.player.UnityPlayer$e)>","<com.unity3d.player.UnityPlayer$e$1: void <init>(com.unity3d.player.UnityPlayer$e)>"
"<com.unity3d.player.c$1: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>","<com.unity3d.player.c$1: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>"
"<com.unity3d.player.UnityPlayer: void showSoftInput(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean,boolean)>","<com.unity3d.player.UnityPlayer: void showSoftInput(java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean,boolean)>"
"<com.unity3d.player.c: android.util.Size[] a(android.hardware.camera2.CameraCharacteristics)>","<com.unity3d.player.c: android.util.Size[] a(android.hardware.camera2.CameraCharacteristics)>"
"<com.unity3d.player.n: boolean b()>","<com.unity3d.player.n: boolean b()>"
"<com.unity3d.player.a$d: void <init>(com.unity3d.player.IAssetPackManagerDownloadStatusCallback,java.lang.String)>","<com.unity3d.player.a$d: void <init>(com.unity3d.player.IAssetPackManagerDownloadStatusCallback,java.lang.String)>"
"<com.unity3d.player.b$a: void <init>(com.unity3d.player.b,android.os.Handler,android.media.AudioManager,int,com.unity3d.player.b$b)>","<com.unity3d.player.b$a: void <init>(com.unity3d.player.b,android.os.Handler,android.media.AudioManager,int,com.unity3d.player.b$b)>"
"<com.unity3d.player.o$2: void run()>","<com.unity3d.player.o$2: void run()>"
"<com.unity3d.player.UnityPlayer: java.lang.String loadNative(java.lang.String)>","<com.unity3d.player.UnityPlayer: java.lang.String loadNative(java.lang.String)>"
"<com.unity3d.player.ReflectionHelper$a: int hashCode()>","<com.unity3d.player.ReflectionHelper$a: int hashCode()>"
"<com.unity3d.player.UnityPlayer: void windowFocusChanged(boolean)>","<com.unity3d.player.UnityPlayer: void windowFocusChanged(boolean)>"
"<com.unity3d.player.i: void <init>(android.content.Context,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int,boolean,boolean)>","<com.unity3d.player.i: void <init>(android.content.Context,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,java.lang.String,int,boolean,boolean)>"
"<com.unity3d.player.k$b: void <init>(com.unity3d.player.k,android.os.Handler,com.unity3d.player.k$a)>","<com.unity3d.player.k$b: void <init>(com.unity3d.player.k,android.os.Handler,com.unity3d.player.k$a)>"
"<com.unity3d.player.UnityPlayer: void <init>(android.content.Context,com.unity3d.player.IUnityPlayerLifecycleEvents)>","<com.unity3d.player.UnityPlayer: void <init>(android.content.Context,com.unity3d.player.IUnityPlayerLifecycleEvents)>"
"<com.unity3d.player.ReflectionHelper: java.lang.Object a(long,java.lang.String,java.lang.Object[])>","<com.unity3d.player.ReflectionHelper: java.lang.Object a(long,java.lang.String,java.lang.Object[])>"
"<com.unity3d.player.UnityPlayerActivity: void <init>()>","<com.unity3d.player.UnityPlayerActivity: void <init>()>"
"<com.unity3d.player.UnityPlayer$6: void <init>(com.unity3d.player.UnityPlayer,java.lang.String)>","<com.unity3d.player.UnityPlayer$6: void <init>(com.unity3d.player.UnityPlayer,java.lang.String)>"
"<com.unity3d.player.UnityPlayer: boolean access$3400(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: boolean access$3400(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.NetworkConnectivity$1: void onLost(android.net.Network)>","<com.unity3d.player.NetworkConnectivity$1: void onLost(android.net.Network)>"
"<com.unity3d.player.c$a: void <clinit>()>","<com.unity3d.player.c$a: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: boolean onKeyLongPress(int,android.view.KeyEvent)>","<com.unity3d.player.UnityPlayer: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<com.unity3d.player.UnityPlayer: boolean nativePause()>","<com.unity3d.player.UnityPlayer: boolean nativePause()>"
"<com.google.androidgamesdk.SwappyDisplayManager$a: void <init>(com.google.androidgamesdk.SwappyDisplayManager)>","<com.google.androidgamesdk.SwappyDisplayManager$a: void <init>(com.google.androidgamesdk.SwappyDisplayManager)>"
"<com.unity3d.player.PlatformSupport: void <init>()>","<com.unity3d.player.PlatformSupport: void <init>()>"
"<com.unity3d.player.UnityPlayer: void access$3200(com.unity3d.player.UnityPlayer,boolean)>","<com.unity3d.player.UnityPlayer: void access$3200(com.unity3d.player.UnityPlayer,boolean)>"
"<com.unity3d.player.R$style: void <init>()>","<com.unity3d.player.R$style: void <init>()>"
"<com.unity3d.player.UnityPlayer: int getUaaLLaunchProcessType()>","<com.unity3d.player.UnityPlayer: int getUaaLLaunchProcessType()>"
"<com.unity3d.player.ReflectionHelper: java.lang.Class a(java.lang.String,int[])>","<com.unity3d.player.ReflectionHelper: java.lang.Class a(java.lang.String,int[])>"
"<com.unity3d.player.o: com.unity3d.player.UnityPlayer g(com.unity3d.player.o)>","<com.unity3d.player.o: com.unity3d.player.UnityPlayer g(com.unity3d.player.o)>"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: com.unity3d.player.PlayAssetDeliveryUnityWrapper getInstance()>","<com.unity3d.player.PlayAssetDeliveryUnityWrapper: com.unity3d.player.PlayAssetDeliveryUnityWrapper getInstance()>"
"<com.unity3d.player.o$4: void <init>(com.unity3d.player.o)>","<com.unity3d.player.o$4: void <init>(com.unity3d.player.o)>"
"<com.unity3d.player.c$3: void <init>(com.unity3d.player.c)>","<com.unity3d.player.c$3: void <init>(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: boolean loadLibrary(java.lang.String)>","<com.unity3d.player.UnityPlayer: boolean loadLibrary(java.lang.String)>"
"<com.unity3d.player.i: void <clinit>()>","<com.unity3d.player.i: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void access$3100(com.unity3d.player.UnityPlayer,int,int,int,int)>","<com.unity3d.player.UnityPlayer: void access$3100(com.unity3d.player.UnityPlayer,int,int,int,int)>"
"<com.unity3d.player.UnityPlayer: void access$2200(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$2200(com.unity3d.player.UnityPlayer)>"
"<com.sol.owheel.R$mipmap: void <init>()>","<com.sol.owheel.R$mipmap: void <init>()>"
"<com.unity3d.player.c: android.util.Range f(com.unity3d.player.c)>","<com.unity3d.player.c: android.util.Range f(com.unity3d.player.c)>"
"<com.unity3d.player.ReflectionHelper$1: void <init>(long,java.lang.Class[])>","<com.unity3d.player.ReflectionHelper$1: void <init>(long,java.lang.Class[])>"
"<com.unity3d.player.UnityPlayer$22: void run()>","<com.unity3d.player.UnityPlayer$22: void run()>"
"<com.unity3d.player.UnityPlayer$4: void run()>","<com.unity3d.player.UnityPlayer$4: void run()>"
"<com.unity3d.player.UnityPlayer: boolean skipPermissionsDialog()>","<com.unity3d.player.UnityPlayer: boolean skipPermissionsDialog()>"
"<com.unity3d.player.UnityPlayer$15: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$15: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.o: boolean e(com.unity3d.player.o)>","<com.unity3d.player.o: boolean e(com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer: void nativeSetLaunchURL(java.lang.String)>","<com.unity3d.player.UnityPlayer: void nativeSetLaunchURL(java.lang.String)>"
"<com.unity3d.player.UnityPlayer$3: void run()>","<com.unity3d.player.UnityPlayer$3: void run()>"
"<com.unity3d.player.UnityPlayer: void runOnUiThread(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer: void runOnUiThread(java.lang.Runnable)>"
"<com.unity3d.player.UnityPlayer: void access$2700(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$2700(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer$4: void <init>(com.unity3d.player.UnityPlayer,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean,boolean)>","<com.unity3d.player.UnityPlayer$4: void <init>(com.unity3d.player.UnityPlayer,com.unity3d.player.UnityPlayer,java.lang.String,int,boolean,boolean,boolean,boolean,java.lang.String,int,boolean,boolean)>"
"<com.unity3d.player.UnityPlayer: void setSelection(int,int)>","<com.unity3d.player.UnityPlayer: void setSelection(int,int)>"
"<com.unity3d.player.UnityPlayer: void access$1300(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$1300(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void removeViewFromPlayer(android.view.View)>","<com.unity3d.player.UnityPlayer: void removeViewFromPlayer(android.view.View)>"
"<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void <init>()>","<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void <init>()>"
"<com.unity3d.player.a: void <init>(android.content.Context)>","<com.unity3d.player.a: void <init>(android.content.Context)>"
"<com.unity3d.player.ReflectionHelper$a: void <init>(java.lang.Class,java.lang.String,java.lang.String)>","<com.unity3d.player.ReflectionHelper$a: void <init>(java.lang.Class,java.lang.String,java.lang.String)>"
"<com.unity3d.player.a$b: void <init>(com.unity3d.player.a,com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","<com.unity3d.player.a$b: void <init>(com.unity3d.player.a,com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>"
"<com.unity3d.player.UnityPlayer$21: void run()>","<com.unity3d.player.UnityPlayer$21: void run()>"
"<com.unity3d.player.UnityPlayer: int access$3600(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: int access$3600(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer$e: void e()>","<com.unity3d.player.UnityPlayer$e: void e()>"
"<com.unity3d.player.UnityPlayer: boolean IsWindowTranslucent()>","<com.unity3d.player.UnityPlayer: boolean IsWindowTranslucent()>"
"<com.unity3d.player.UnityPlayer: void nativeReportKeyboardConfigChanged()>","<com.unity3d.player.UnityPlayer: void nativeReportKeyboardConfigChanged()>"
"<com.unity3d.player.UnityPlayer: java.lang.String GetGlViewContentDescription(android.content.Context)>","<com.unity3d.player.UnityPlayer: java.lang.String GetGlViewContentDescription(android.content.Context)>"
"<com.sol.owheel.R: void <init>()>","<com.sol.owheel.R: void <init>()>"
"<com.unity3d.player.UnityPlayer$e: void d()>","<com.unity3d.player.UnityPlayer$e: void d()>"
"<com.unity3d.player.AudioVolumeHandler: void <init>(android.content.Context)>","<com.unity3d.player.AudioVolumeHandler: void <init>(android.content.Context)>"
"<com.unity3d.player.UnityPlayer$e: void c(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer$e: void c(java.lang.Runnable)>"
"<com.unity3d.player.UnityPlayer$15: void run()>","<com.unity3d.player.UnityPlayer$15: void run()>"
"<com.unity3d.player.UnityPlayer: void <clinit>()>","<com.unity3d.player.UnityPlayer: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void nativeFocusChanged(boolean)>","<com.unity3d.player.UnityPlayer: void nativeFocusChanged(boolean)>"
"<com.unity3d.player.a$b: void a(com.google.android.play.core.assetpacks.AssetPackState)>","<com.unity3d.player.a$b: void a(com.google.android.play.core.assetpacks.AssetPackState)>"
"<com.unity3d.player.UnityPlayer: void reportSoftInputStr(java.lang.String,int,boolean)>","<com.unity3d.player.UnityPlayer: void reportSoftInputStr(java.lang.String,int,boolean)>"
"<com.unity3d.player.UnityPlayer: void nativeMuteMasterAudio(boolean)>","<com.unity3d.player.UnityPlayer: void nativeMuteMasterAudio(boolean)>"
"<com.unity3d.player.UnityPlayer: void quit()>","<com.unity3d.player.UnityPlayer: void quit()>"
"<com.unity3d.player.o$a: void a()>","<com.unity3d.player.o$a: void a()>"
"<bitter.jnibridge.JNIBridge$a: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<bitter.jnibridge.JNIBridge$a: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<com.unity3d.player.UnityPlayer: void toggleGyroscopeSensor(boolean)>","<com.unity3d.player.UnityPlayer: void toggleGyroscopeSensor(boolean)>"
"<com.google.androidgamesdk.ChoreographerCallback$1: void run()>","<com.google.androidgamesdk.ChoreographerCallback$1: void run()>"
"<com.unity3d.player.UnityPlayer$24: void run()>","<com.unity3d.player.UnityPlayer$24: void run()>"
"<com.unity3d.player.c: android.media.Image a(com.unity3d.player.c,android.media.Image)>","<com.unity3d.player.c: android.media.Image a(com.unity3d.player.c,android.media.Image)>"
"<com.unity3d.player.ReflectionHelper$b: void a(long,boolean)>","<com.unity3d.player.ReflectionHelper$b: void a(long,boolean)>"
"<com.unity3d.player.UnityPlayer: void setClipboardText(java.lang.String)>","<com.unity3d.player.UnityPlayer: void setClipboardText(java.lang.String)>"
"<com.unity3d.player.i: android.view.View createSoftInputView()>","<com.unity3d.player.i: android.view.View createSoftInputView()>"
"<com.unity3d.player.UnityPlayer: boolean nativeDone()>","<com.unity3d.player.UnityPlayer: boolean nativeDone()>"
"<com.unity3d.player.o$1: void run()>","<com.unity3d.player.o$1: void run()>"
"<com.unity3d.player.UnityPlayer$c: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$c: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.HFPStatus: android.media.AudioManager c(com.unity3d.player.HFPStatus)>","<com.unity3d.player.HFPStatus: android.media.AudioManager c(com.unity3d.player.HFPStatus)>"
"<com.unity3d.player.UnityPlayer$5: void run()>","<com.unity3d.player.UnityPlayer$5: void run()>"
"<com.unity3d.player.UnityPlayer: boolean stopOrientationListener()>","<com.unity3d.player.UnityPlayer: boolean stopOrientationListener()>"
"<com.unity3d.player.UnityPlayer: boolean addViewToPlayer(android.view.View,boolean)>","<com.unity3d.player.UnityPlayer: boolean addViewToPlayer(android.view.View,boolean)>"
"<com.unity3d.player.ReflectionHelper: java.lang.reflect.Field getFieldID(java.lang.Class,java.lang.String,java.lang.String,boolean)>","<com.unity3d.player.ReflectionHelper: java.lang.reflect.Field getFieldID(java.lang.Class,java.lang.String,java.lang.String,boolean)>"
"<com.unity3d.player.a: java.lang.Object c(com.unity3d.player.a)>","<com.unity3d.player.a: java.lang.Object c(com.unity3d.player.a)>"
"<com.unity3d.player.a$a: void <init>(java.util.Set,java.lang.String,int,long,long,int,int)>","<com.unity3d.player.a$a: void <init>(java.util.Set,java.lang.String,int,long,long,int,int)>"
"<com.unity3d.player.o: com.unity3d.player.n a(com.unity3d.player.o,com.unity3d.player.n)>","<com.unity3d.player.o: com.unity3d.player.n a(com.unity3d.player.o,com.unity3d.player.n)>"
"<com.unity3d.player.UnityPlayer: void init(int,boolean)>","<com.unity3d.player.UnityPlayer: void init(int,boolean)>"
"<com.unity3d.player.UnityPlayer: int getNaturalOrientation(int)>","<com.unity3d.player.UnityPlayer: int getNaturalOrientation(int)>"
"<com.unity3d.player.UnityPlayer$e: void a(com.unity3d.player.UnityPlayer$d)>","<com.unity3d.player.UnityPlayer$e: void a(com.unity3d.player.UnityPlayer$d)>"
"<com.unity3d.player.UnityPlayer$19: void surfaceCreated(android.view.SurfaceHolder)>","<com.unity3d.player.UnityPlayer$19: void surfaceCreated(android.view.SurfaceHolder)>"
"<com.unity3d.player.c: android.hardware.camera2.CameraDevice a(com.unity3d.player.c)>","<com.unity3d.player.c: android.hardware.camera2.CameraDevice a(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: void access$500(com.unity3d.player.UnityPlayer,java.lang.String)>","<com.unity3d.player.UnityPlayer: void access$500(com.unity3d.player.UnityPlayer,java.lang.String)>"
"<com.unity3d.player.UnityPlayer: void nativeSetInputSelection(int,int)>","<com.unity3d.player.UnityPlayer: void nativeSetInputSelection(int,int)>"
"<com.unity3d.player.UnityPlayer$17: void <init>(com.unity3d.player.UnityPlayer,android.content.Context,int)>","<com.unity3d.player.UnityPlayer$17: void <init>(com.unity3d.player.UnityPlayer,android.content.Context,int)>"
"<com.unity3d.player.c: android.view.Surface c(com.unity3d.player.c)>","<com.unity3d.player.c: android.view.Surface c(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: void newIntent(android.content.Intent)>","<com.unity3d.player.UnityPlayer: void newIntent(android.content.Intent)>"
"<com.unity3d.player.UnityPlayer: void postOnUiThread(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer: void postOnUiThread(java.lang.Runnable)>"
"<com.unity3d.player.i$1: void onGlobalLayout()>","<com.unity3d.player.i$1: void onGlobalLayout()>"
"<com.unity3d.player.o$4: void run()>","<com.unity3d.player.o$4: void run()>"
"<com.unity3d.player.k$b: void onChange(boolean)>","<com.unity3d.player.k$b: void onChange(boolean)>"
"<com.google.androidgamesdk.SwappyDisplayManager$a: void run()>","<com.google.androidgamesdk.SwappyDisplayManager$a: void run()>"
"<com.unity3d.player.UnityPlayer: void nativeLowMemory()>","<com.unity3d.player.UnityPlayer: void nativeLowMemory()>"
"<com.unity3d.player.UnityPlayer: void hideStatusBar()>","<com.unity3d.player.UnityPlayer: void hideStatusBar()>"
"<com.google.androidgamesdk.ChoreographerCallback$1: void <init>(com.google.androidgamesdk.ChoreographerCallback)>","<com.google.androidgamesdk.ChoreographerCallback$1: void <init>(com.google.androidgamesdk.ChoreographerCallback)>"
"<com.unity3d.player.c$2: void onConfigured(android.hardware.camera2.CameraCaptureSession)>","<com.unity3d.player.c$2: void onConfigured(android.hardware.camera2.CameraCaptureSession)>"
"<com.unity3d.player.UnityPlayer$20: void run()>","<com.unity3d.player.UnityPlayer$20: void run()>"
"<com.unity3d.player.UnityPlayer$c: void <init>(com.unity3d.player.UnityPlayer,byte)>","<com.unity3d.player.UnityPlayer$c: void <init>(com.unity3d.player.UnityPlayer,byte)>"
"<com.unity3d.player.a: java.util.HashSet a(com.unity3d.player.a)>","<com.unity3d.player.a: java.util.HashSet a(com.unity3d.player.a)>"
"<com.unity3d.player.PlatformSupport: void <clinit>()>","<com.unity3d.player.PlatformSupport: void <clinit>()>"
"<bitter.jnibridge.JNIBridge: java.lang.Object invoke(long,java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>","<bitter.jnibridge.JNIBridge: java.lang.Object invoke(long,java.lang.Class,java.lang.reflect.Method,java.lang.Object[])>"
"<com.unity3d.player.ReflectionHelper: void b(long)>","<com.unity3d.player.ReflectionHelper: void b(long)>"
"<com.unity3d.player.UnityPlayer: boolean access$1700(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: boolean access$1700(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer$19: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$19: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.a$c: void onSuccess(java.lang.Object)>","<com.unity3d.player.a$c: void onSuccess(java.lang.Object)>"
"<com.unity3d.player.UnityPlayer: android.view.SurfaceView CreateGlView()>","<com.unity3d.player.UnityPlayer: android.view.SurfaceView CreateGlView()>"
"<com.unity3d.player.c$4: void <init>(com.unity3d.player.c)>","<com.unity3d.player.c$4: void <init>(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: void requestUserAuthorization(java.lang.String)>","<com.unity3d.player.UnityPlayer: void requestUserAuthorization(java.lang.String)>"
"<com.unity3d.player.UnityPlayer: boolean onTouchEvent(android.view.MotionEvent)>","<com.unity3d.player.UnityPlayer: boolean onTouchEvent(android.view.MotionEvent)>"
"<com.unity3d.player.ReflectionHelper$1: void a(long,boolean)>","<com.unity3d.player.ReflectionHelper$1: void a(long,boolean)>"
"<com.unity3d.player.UnityPlayer$d: void <clinit>()>","<com.unity3d.player.UnityPlayer$d: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void nativeSetInputString(java.lang.String)>","<com.unity3d.player.UnityPlayer: void nativeSetInputString(java.lang.String)>"
"<com.unity3d.player.UnityPlayer: void access$1800(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$1800(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void unloadNative()>","<com.unity3d.player.UnityPlayer: void unloadNative()>"
"<com.unity3d.player.i$1: void <init>(com.unity3d.player.i,android.view.View)>","<com.unity3d.player.i$1: void <init>(com.unity3d.player.i,android.view.View)>"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void <init>(android.content.Context)>","<com.unity3d.player.PlayAssetDeliveryUnityWrapper: void <init>(android.content.Context)>"
"<com.unity3d.player.o: void f(com.unity3d.player.o)>","<com.unity3d.player.o: void f(com.unity3d.player.o)>"
"<com.unity3d.player.a$b: void onStateUpdate(java.lang.Object)>","<com.unity3d.player.a$b: void onStateUpdate(java.lang.Object)>"
"<com.unity3d.player.UnityPlayer$23: void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore)>","<com.unity3d.player.UnityPlayer$23: void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore)>"
"<com.unity3d.player.a$e: void <init>(com.unity3d.player.IAssetPackManagerStatusQueryCallback,java.lang.String[])>","<com.unity3d.player.a$e: void <init>(com.unity3d.player.IAssetPackManagerStatusQueryCallback,java.lang.String[])>"
"<com.unity3d.player.UnityPlayer$e: void b(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer$e: void b(java.lang.Runnable)>"
"<com.unity3d.player.HFPStatus$1: void <init>(com.unity3d.player.HFPStatus)>","<com.unity3d.player.HFPStatus$1: void <init>(com.unity3d.player.HFPStatus)>"
"<com.unity3d.player.HFPStatus$1: void onReceive(android.content.Context,android.content.Intent)>","<com.unity3d.player.HFPStatus$1: void onReceive(android.content.Context,android.content.Intent)>"
"<com.unity3d.player.UnityPlayer: void nativeUnitySendMessage(java.lang.String,java.lang.String,byte[])>","<com.unity3d.player.UnityPlayer: void nativeUnitySendMessage(java.lang.String,java.lang.String,byte[])>"
"<com.unity3d.player.ReflectionHelper: java.lang.Class[] a(java.lang.String)>","<com.unity3d.player.ReflectionHelper: java.lang.Class[] a(java.lang.String)>"
"<com.unity3d.player.UnityPlayer: void access$1500(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$1500(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer$e: void d(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer$e: void d(java.lang.Runnable)>"
"<com.unity3d.player.UnityPlayer: java.lang.String getLaunchURL()>","<com.unity3d.player.UnityPlayer: java.lang.String getLaunchURL()>"
"<com.unity3d.player.UnityPlayer: boolean nativeInjectEvent(android.view.InputEvent)>","<com.unity3d.player.UnityPlayer: boolean nativeInjectEvent(android.view.InputEvent)>"
"<com.unity3d.player.UnityPlayer$8: void <init>(com.unity3d.player.UnityPlayer,boolean)>","<com.unity3d.player.UnityPlayer$8: void <init>(com.unity3d.player.UnityPlayer,boolean)>"
"<com.unity3d.player.i: java.lang.String a()>","<com.unity3d.player.i: java.lang.String a()>"
"<com.unity3d.player.ReflectionHelper$1: void finalize()>","<com.unity3d.player.ReflectionHelper$1: void finalize()>"
"<com.unity3d.player.o: java.util.concurrent.Semaphore b(com.unity3d.player.o)>","<com.unity3d.player.o: java.util.concurrent.Semaphore b(com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer$16: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$16: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.ReflectionHelper: java.lang.Object nativeProxyInvoke(long,java.lang.String,java.lang.Object[])>","<com.unity3d.player.ReflectionHelper: java.lang.Object nativeProxyInvoke(long,java.lang.String,java.lang.Object[])>"
"<com.unity3d.player.a$c$a: void <init>(com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback,boolean)>","<com.unity3d.player.a$c$a: void <init>(com.unity3d.player.IAssetPackManagerMobileDataConfirmationCallback,boolean)>"
"<com.unity3d.player.UnityPlayerActivity: void setResult(int,android.content.Intent)>","<com.unity3d.player.UnityPlayerActivity: void setResult(int,android.content.Intent)>"
"<com.unity3d.player.o$3: void <init>(com.unity3d.player.o)>","<com.unity3d.player.o$3: void <init>(com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer: void access$2100(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$2100(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.n$b: void a()>","<com.unity3d.player.n$b: void a()>"
"<com.unity3d.player.o: java.util.concurrent.locks.Lock d(com.unity3d.player.o)>","<com.unity3d.player.o: java.util.concurrent.locks.Lock d(com.unity3d.player.o)>"
"<com.unity3d.player.c$3: void onClosed(android.hardware.camera2.CameraDevice)>","<com.unity3d.player.c$3: void onClosed(android.hardware.camera2.CameraDevice)>"
"<com.unity3d.player.c$5: void <init>(com.unity3d.player.c)>","<com.unity3d.player.c$5: void <init>(com.unity3d.player.c)>"
"<com.unity3d.player.l: void <init>()>","<com.unity3d.player.l: void <init>()>"
"<com.unity3d.player.o$1$1$1: void <init>(com.unity3d.player.o$1$1)>","<com.unity3d.player.o$1$1$1: void <init>(com.unity3d.player.o$1$1)>"
"<com.unity3d.player.GoogleARCoreApi: void <init>()>","<com.unity3d.player.GoogleARCoreApi: void <init>()>"
"<com.unity3d.player.UnityPlayer: java.lang.String getKeyboardLayout()>","<com.unity3d.player.UnityPlayer: java.lang.String getKeyboardLayout()>"
"<com.unity3d.player.UnityPlayer$8: void run()>","<com.unity3d.player.UnityPlayer$8: void run()>"
"<com.unity3d.player.UnityPlayer: void queueGLThreadEvent(com.unity3d.player.UnityPlayer$f)>","<com.unity3d.player.UnityPlayer: void queueGLThreadEvent(com.unity3d.player.UnityPlayer$f)>"
"<com.unity3d.player.UnityPlayer: void EarlyEnableFullScreenIfEnabled()>","<com.unity3d.player.UnityPlayer: void EarlyEnableFullScreenIfEnabled()>"
"<com.unity3d.player.c$4: void onImageAvailable(android.media.ImageReader)>","<com.unity3d.player.c$4: void onImageAvailable(android.media.ImageReader)>"
"<com.unity3d.player.UnityPlayer$7: void <init>(com.unity3d.player.UnityPlayer,int)>","<com.unity3d.player.UnityPlayer$7: void <init>(com.unity3d.player.UnityPlayer,int)>"
"<com.unity3d.player.ReflectionHelper$a: boolean equals(java.lang.Object)>","<com.unity3d.player.ReflectionHelper$a: boolean equals(java.lang.Object)>"
"<com.unity3d.player.o: android.content.Context c(com.unity3d.player.o)>","<com.unity3d.player.o: android.content.Context c(com.unity3d.player.o)>"
"<com.unity3d.player.UnityPlayer: void initJni(android.content.Context)>","<com.unity3d.player.UnityPlayer: void initJni(android.content.Context)>"
"<com.unity3d.player.UnityPlayer: void setSoftInputStr(java.lang.String)>","<com.unity3d.player.UnityPlayer: void setSoftInputStr(java.lang.String)>"
"<com.unity3d.player.UnityPlayerActivity: void setIntent(android.content.Intent)>","<com.unity3d.player.UnityPlayerActivity: void setIntent(android.content.Intent)>"
"<com.unity3d.player.UnityPlayer$e$1: void a()>","<com.unity3d.player.UnityPlayer$e$1: void a()>"
"<com.google.androidgamesdk.SwappyDisplayManager$a: void start()>","<com.google.androidgamesdk.SwappyDisplayManager$a: void start()>"
"<com.unity3d.player.HFPStatus: void <init>(android.content.Context)>","<com.unity3d.player.HFPStatus: void <init>(android.content.Context)>"
"<com.unity3d.player.o$1$1: void a(int)>","<com.unity3d.player.o$1$1: void a(int)>"
"<com.unity3d.player.UnityPlayer: void checkResumePlayer()>","<com.unity3d.player.UnityPlayer: void checkResumePlayer()>"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: java.lang.Object registerDownloadStatusListener(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","<com.unity3d.player.PlayAssetDeliveryUnityWrapper: java.lang.Object registerDownloadStatusListener(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>"
"<com.unity3d.player.c: com.unity3d.player.e h(com.unity3d.player.c)>","<com.unity3d.player.c: com.unity3d.player.e h(com.unity3d.player.c)>"
"<com.unity3d.player.c$2: void <init>(com.unity3d.player.c)>","<com.unity3d.player.c$2: void <init>(com.unity3d.player.c)>"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: com.unity3d.player.d a(android.content.Context)>","<com.unity3d.player.PlayAssetDeliveryUnityWrapper: com.unity3d.player.d a(android.content.Context)>"
"<com.google.androidgamesdk.ChoreographerCallback$a: void <init>(com.google.androidgamesdk.ChoreographerCallback,byte)>","<com.google.androidgamesdk.ChoreographerCallback$a: void <init>(com.google.androidgamesdk.ChoreographerCallback,byte)>"
"<com.unity3d.player.h: void <init>(android.content.Context)>","<com.unity3d.player.h: void <init>(android.content.Context)>"
"<com.unity3d.player.UnityPlayer$d: void <init>(java.lang.String,int)>","<com.unity3d.player.UnityPlayer$d: void <init>(java.lang.String,int)>"
"<com.unity3d.player.UnityPlayer$a: void onAccuracyChanged(android.hardware.Sensor,int)>","<com.unity3d.player.UnityPlayer$a: void onAccuracyChanged(android.hardware.Sensor,int)>"
"<com.unity3d.player.UnityPlayer$c: void onCallStateChanged(int,java.lang.String)>","<com.unity3d.player.UnityPlayer$c: void onCallStateChanged(int,java.lang.String)>"
"<com.unity3d.player.UnityPlayer$e: void run()>","<com.unity3d.player.UnityPlayer$e: void run()>"
"<com.unity3d.player.c: void <init>(com.unity3d.player.e)>","<com.unity3d.player.c: void <init>(com.unity3d.player.e)>"
"<com.unity3d.player.UnityPlayer: boolean initializeGoogleAr()>","<com.unity3d.player.UnityPlayer: boolean initializeGoogleAr()>"
"<com.unity3d.player.R$string: void <init>()>","<com.unity3d.player.R$string: void <init>()>"
"<com.unity3d.player.Camera2Wrapper: android.graphics.Rect getFrameSizeCamera2()>","<com.unity3d.player.Camera2Wrapper: android.graphics.Rect getFrameSizeCamera2()>"
"<com.unity3d.player.k$b: boolean deliverSelfNotifications()>","<com.unity3d.player.k$b: boolean deliverSelfNotifications()>"
"<com.unity3d.player.Camera2Wrapper: void <init>(android.content.Context)>","<com.unity3d.player.Camera2Wrapper: void <init>(android.content.Context)>"
"<com.unity3d.player.ReflectionHelper: long a()>","<com.unity3d.player.ReflectionHelper: long a()>"
"<com.unity3d.player.UnityPlayer: void access$2800(com.unity3d.player.UnityPlayer,java.lang.String)>","<com.unity3d.player.UnityPlayer: void access$2800(com.unity3d.player.UnityPlayer,java.lang.String)>"
"<com.unity3d.player.BuildConfig: void <init>()>","<com.unity3d.player.BuildConfig: void <init>()>"
"<bitter.jnibridge.JNIBridge$a: void finalize()>","<bitter.jnibridge.JNIBridge$a: void finalize()>"
"<com.unity3d.player.UnityPlayer: void pause()>","<com.unity3d.player.UnityPlayer: void pause()>"
"<com.unity3d.player.ReflectionHelper$1: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<com.unity3d.player.ReflectionHelper$1: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<com.unity3d.player.a: java.lang.String a(java.lang.String)>","<com.unity3d.player.a: java.lang.String a(java.lang.String)>"
"<com.unity3d.player.UnityPlayer$18: void run()>","<com.unity3d.player.UnityPlayer$18: void run()>"
"<com.unity3d.player.UnityPlayer: void UnitySendMessage(java.lang.String,java.lang.String,java.lang.String)>","<com.unity3d.player.UnityPlayer: void UnitySendMessage(java.lang.String,java.lang.String,java.lang.String)>"
"<com.unity3d.player.n$b: void run()>","<com.unity3d.player.n$b: void run()>"
"<com.unity3d.player.UnityPlayer$21: void <init>(com.unity3d.player.UnityPlayer,int,android.view.Surface,java.util.concurrent.Semaphore)>","<com.unity3d.player.UnityPlayer$21: void <init>(com.unity3d.player.UnityPlayer,int,android.view.Surface,java.util.concurrent.Semaphore)>"
"<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void waitForResponse()>","<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void waitForResponse()>"
"<com.unity3d.player.UnityPlayer$5: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$5: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.HFPStatus: int a(com.unity3d.player.HFPStatus,int)>","<com.unity3d.player.HFPStatus: int a(com.unity3d.player.HFPStatus,int)>"
"<com.unity3d.player.i$2: void onFocusChange(android.view.View,boolean)>","<com.unity3d.player.i$2: void onFocusChange(android.view.View,boolean)>"
"<com.sol.owheel.R$style: void <init>()>","<com.sol.owheel.R$style: void <init>()>"
"<com.unity3d.player.UnityPlayer: void runOnAnonymousThread(java.lang.Runnable)>","<com.unity3d.player.UnityPlayer: void runOnAnonymousThread(java.lang.Runnable)>"
"<com.unity3d.player.UnityPlayer$9: void <init>(com.unity3d.player.UnityPlayer,int,int)>","<com.unity3d.player.UnityPlayer$9: void <init>(com.unity3d.player.UnityPlayer,int,int)>"
"<com.unity3d.player.a$e: void onComplete(com.google.android.play.core.tasks.Task)>","<com.unity3d.player.a$e: void onComplete(com.google.android.play.core.tasks.Task)>"
"<com.unity3d.player.UnityPlayer: com.unity3d.player.j access$1002(com.unity3d.player.UnityPlayer,com.unity3d.player.j)>","<com.unity3d.player.UnityPlayer: com.unity3d.player.j access$1002(com.unity3d.player.UnityPlayer,com.unity3d.player.j)>"
"<com.unity3d.player.UnityPlayer$9: void run()>","<com.unity3d.player.UnityPlayer$9: void run()>"
"<com.unity3d.player.n$a: void a(int)>","<com.unity3d.player.n$a: void a(int)>"
"<com.unity3d.player.ReflectionHelper: java.lang.reflect.Method getMethodID(java.lang.Class,java.lang.String,java.lang.String,boolean)>","<com.unity3d.player.ReflectionHelper: java.lang.reflect.Method getMethodID(java.lang.Class,java.lang.String,java.lang.String,boolean)>"
"<com.unity3d.player.UnityPlayer: android.view.SurfaceView access$1400(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: android.view.SurfaceView access$1400(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: android.view.View getView()>","<com.unity3d.player.UnityPlayer: android.view.View getView()>"
"<com.unity3d.player.m: void <clinit>()>","<com.unity3d.player.m: void <clinit>()>"
"<com.unity3d.player.ReflectionHelper$1: java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<com.unity3d.player.ReflectionHelper$1: java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<com.unity3d.player.R: void <init>()>","<com.unity3d.player.R: void <init>()>"
"<com.unity3d.player.UnityPlayer: void access$2500(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$2500(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.c: java.util.concurrent.Semaphore f()>","<com.unity3d.player.c: java.util.concurrent.Semaphore f()>"
"<com.unity3d.player.UnityPlayer$3$1: void run()>","<com.unity3d.player.UnityPlayer$3$1: void run()>"
"<com.unity3d.player.UnityPlayer$a: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$a: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: boolean getSplashEnabled()>","<com.unity3d.player.UnityPlayer: boolean getSplashEnabled()>"
"<com.unity3d.player.UnityPlayer: boolean access$100(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: boolean access$100(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void nativeSoftInputCanceled()>","<com.unity3d.player.UnityPlayer: void nativeSoftInputCanceled()>"
"<com.unity3d.player.UnityPlayer: void access$000(com.unity3d.player.UnityPlayer,boolean)>","<com.unity3d.player.UnityPlayer: void access$000(com.unity3d.player.UnityPlayer,boolean)>"
"<com.unity3d.player.MultiWindowSupport: void <init>()>","<com.unity3d.player.MultiWindowSupport: void <init>()>"
"<com.unity3d.player.UnityPlayer: android.app.Activity access$3500(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: android.app.Activity access$3500(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPermissions: void <init>()>","<com.unity3d.player.UnityPermissions: void <init>()>"
"<com.unity3d.player.UnityPlayer$11: void <init>(com.unity3d.player.UnityPlayer,int,int)>","<com.unity3d.player.UnityPlayer$11: void <init>(com.unity3d.player.UnityPlayer,int,int)>"
"<com.unity3d.player.UnityPlayer$20: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$20: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void onPermissionDenied(java.lang.String)>","<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void onPermissionDenied(java.lang.String)>"
"<com.unity3d.player.h$a: void a(android.view.SurfaceView)>","<com.unity3d.player.h$a: void a(android.view.SurfaceView)>"
"<com.unity3d.player.i: java.lang.String b(com.unity3d.player.i)>","<com.unity3d.player.i: java.lang.String b(com.unity3d.player.i)>"
"<com.unity3d.player.a$b: java.util.Set a(java.util.HashSet)>","<com.unity3d.player.a$b: java.util.Set a(java.util.HashSet)>"
"<com.unity3d.player.UnityPlayerActivity: android.content.Intent getIntent()>","<com.unity3d.player.UnityPlayerActivity: android.content.Intent getIntent()>"
"<com.unity3d.player.g$a: void <init>(com.unity3d.player.g,com.unity3d.player.IPermissionRequestCallbacks,java.lang.String,int,boolean)>","<com.unity3d.player.g$a: void <init>(com.unity3d.player.g,com.unity3d.player.IPermissionRequestCallbacks,java.lang.String,int,boolean)>"
"<com.unity3d.player.UnityPlayer: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<com.unity3d.player.UnityPlayer: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<com.unity3d.player.UnityPlayer: com.unity3d.player.j access$1000(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: com.unity3d.player.j access$1000(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.i$3: void onSelectionChanged(int,int)>","<com.unity3d.player.i$3: void onSelectionChanged(int,int)>"
"<com.unity3d.player.UnityPlayer: java.lang.String getUnityNativeLibraryPath(android.content.Context)>","<com.unity3d.player.UnityPlayer: java.lang.String getUnityNativeLibraryPath(android.content.Context)>"
"<com.unity3d.player.UnityPlayer$4$1: void <init>(com.unity3d.player.UnityPlayer$4)>","<com.unity3d.player.UnityPlayer$4$1: void <init>(com.unity3d.player.UnityPlayer$4)>"
"<com.unity3d.player.d: java.lang.Object a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>","<com.unity3d.player.d: java.lang.Object a(com.unity3d.player.IAssetPackManagerDownloadStatusCallback)>"
"<com.unity3d.player.UnityPlayer$24: void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore)>","<com.unity3d.player.UnityPlayer$24: void <init>(com.unity3d.player.UnityPlayer,java.util.concurrent.Semaphore)>"
"<com.unity3d.player.UnityPlayer: int getNetworkConnectivity()>","<com.unity3d.player.UnityPlayer: int getNetworkConnectivity()>"
"<com.unity3d.player.c$1: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>","<com.unity3d.player.c$1: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>"
"<com.google.androidgamesdk.ChoreographerCallback: void <init>(long)>","<com.google.androidgamesdk.ChoreographerCallback: void <init>(long)>"
"<com.unity3d.player.k$a: void b()>","<com.unity3d.player.k$a: void b()>"
"<com.unity3d.player.j$1: void <clinit>()>","<com.unity3d.player.j$1: void <clinit>()>"
"<com.unity3d.player.m: java.lang.String toString()>","<com.unity3d.player.m: java.lang.String toString()>"
"<com.unity3d.player.c$1: void <init>(com.unity3d.player.c)>","<com.unity3d.player.c$1: void <init>(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: void access$2400(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$2400(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: boolean onKeyDown(int,android.view.KeyEvent)>","<com.unity3d.player.UnityPlayer: boolean onKeyDown(int,android.view.KeyEvent)>"
"<com.unity3d.player.h$a: void <init>(com.unity3d.player.h,android.content.Context)>","<com.unity3d.player.h$a: void <init>(com.unity3d.player.h,android.content.Context)>"
"<com.unity3d.player.i: java.lang.String b()>","<com.unity3d.player.i: java.lang.String b()>"
"<com.unity3d.player.UnityPlayer: boolean nativeIsAutorotationOn()>","<com.unity3d.player.UnityPlayer: boolean nativeIsAutorotationOn()>"
"<com.unity3d.player.UnityPlayer: void onUnityPlayerUnloaded()>","<com.unity3d.player.UnityPlayer: void onUnityPlayerUnloaded()>"
"<com.unity3d.player.UnityPlayer$10: void a()>","<com.unity3d.player.UnityPlayer$10: void a()>"
"<com.unity3d.player.UnityPlayer: com.unity3d.player.h access$1200(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: com.unity3d.player.h access$1200(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: boolean onKeyUp(int,android.view.KeyEvent)>","<com.unity3d.player.UnityPlayer: boolean onKeyUp(int,android.view.KeyEvent)>"
"<com.unity3d.player.a$b: void <init>(com.unity3d.player.a,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper)>","<com.unity3d.player.a$b: void <init>(com.unity3d.player.a,com.unity3d.player.IAssetPackManagerDownloadStatusCallback,android.os.Looper)>"
"<com.unity3d.player.UnityPlayer$3$1: void <init>(com.unity3d.player.UnityPlayer$3)>","<com.unity3d.player.UnityPlayer$3$1: void <init>(com.unity3d.player.UnityPlayer$3)>"
"<com.unity3d.player.a$d: void onComplete(com.google.android.play.core.tasks.Task)>","<com.unity3d.player.a$d: void onComplete(com.google.android.play.core.tasks.Task)>"
"<com.unity3d.player.UnityPlayer: void access$400(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$400(com.unity3d.player.UnityPlayer)>"
"<com.google.androidgamesdk.SwappyDisplayManager$a: void <init>(com.google.androidgamesdk.SwappyDisplayManager,byte)>","<com.google.androidgamesdk.SwappyDisplayManager$a: void <init>(com.google.androidgamesdk.SwappyDisplayManager,byte)>"
"<com.unity3d.player.c$1: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>","<com.unity3d.player.c$1: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>"
"<com.unity3d.player.i$3: void onWindowFocusChanged(boolean)>","<com.unity3d.player.i$3: void onWindowFocusChanged(boolean)>"
"<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void onPermissionGranted(java.lang.String)>","<com.unity3d.player.UnityPermissions$ModalWaitForPermissionResponse: void onPermissionGranted(java.lang.String)>"
"<com.unity3d.player.c: android.hardware.camera2.CameraDevice a(com.unity3d.player.c,android.hardware.camera2.CameraDevice)>","<com.unity3d.player.c: android.hardware.camera2.CameraDevice a(com.unity3d.player.c,android.hardware.camera2.CameraDevice)>"
"<com.unity3d.player.UnityPlayer: boolean access$300(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: boolean access$300(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: int access$3800(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: int access$3800(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void reportSoftInputArea(android.graphics.Rect)>","<com.unity3d.player.UnityPlayer: void reportSoftInputArea(android.graphics.Rect)>"
"<com.unity3d.player.j: void <init>(android.content.Context,int)>","<com.unity3d.player.j: void <init>(android.content.Context,int)>"
"<com.unity3d.player.a$e$a: void <init>(com.unity3d.player.IAssetPackManagerStatusQueryCallback,long,java.lang.String[],int[],int[])>","<com.unity3d.player.a$e$a: void <init>(com.unity3d.player.IAssetPackManagerStatusQueryCallback,long,java.lang.String[],int[],int[])>"
"<com.unity3d.player.a$d: void a(java.lang.String,int,int,long)>","<com.unity3d.player.a$d: void a(java.lang.String,int,int,long)>"
"<bitter.jnibridge.JNIBridge$a: java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<bitter.jnibridge.JNIBridge$a: java.lang.Object a(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<com.unity3d.player.UnityPlayer: void updateGLDisplay(int,android.view.Surface)>","<com.unity3d.player.UnityPlayer: void updateGLDisplay(int,android.view.Surface)>"
"<com.unity3d.player.UnityPlayer$b: void <clinit>()>","<com.unity3d.player.UnityPlayer$b: void <clinit>()>"
"<com.unity3d.player.o$1$1: void <init>(com.unity3d.player.o$1)>","<com.unity3d.player.o$1$1: void <init>(com.unity3d.player.o$1)>"
"<com.unity3d.player.UnityPlayer$1: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$1: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void configurationChanged(android.content.res.Configuration)>","<com.unity3d.player.UnityPlayer: void configurationChanged(android.content.res.Configuration)>"
"<com.unity3d.player.UnityPlayer: void access$600(com.unity3d.player.UnityPlayer,int,int)>","<com.unity3d.player.UnityPlayer: void access$600(com.unity3d.player.UnityPlayer,int,int)>"
"<com.unity3d.player.R$id: void <init>()>","<com.unity3d.player.R$id: void <init>()>"
"<com.unity3d.player.c: android.hardware.camera2.CaptureRequest$Builder d(com.unity3d.player.c)>","<com.unity3d.player.c: android.hardware.camera2.CaptureRequest$Builder d(com.unity3d.player.c)>"
"<com.unity3d.player.j$a: int[] a()>","<com.unity3d.player.j$a: int[] a()>"
"<com.unity3d.player.NetworkConnectivity$1: void <init>(com.unity3d.player.NetworkConnectivity)>","<com.unity3d.player.NetworkConnectivity$1: void <init>(com.unity3d.player.NetworkConnectivity)>"
"<com.unity3d.player.UnityPlayer: boolean getLaunchFullscreen()>","<com.unity3d.player.UnityPlayer: boolean getLaunchFullscreen()>"
"<com.unity3d.player.c: android.hardware.camera2.CameraCaptureSession a(com.unity3d.player.c,android.hardware.camera2.CameraCaptureSession)>","<com.unity3d.player.c: android.hardware.camera2.CameraCaptureSession a(com.unity3d.player.c,android.hardware.camera2.CameraCaptureSession)>"
"<com.unity3d.player.UnityPlayer$f: void <init>(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer$f: void <init>(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.UnityPlayer: void nativeSoftInputLostFocus()>","<com.unity3d.player.UnityPlayer: void nativeSoftInputLostFocus()>"
"<com.unity3d.player.PlayAssetDeliveryUnityWrapper: java.lang.String getAssetPackPath(java.lang.String)>","<com.unity3d.player.PlayAssetDeliveryUnityWrapper: java.lang.String getAssetPackPath(java.lang.String)>"
"<com.unity3d.player.UnityPlayer: void nativeSendSurfaceChangedEvent()>","<com.unity3d.player.UnityPlayer: void nativeSendSurfaceChangedEvent()>"
"<com.unity3d.player.UnityPlayer: boolean injectEvent(android.view.InputEvent)>","<com.unity3d.player.UnityPlayer: boolean injectEvent(android.view.InputEvent)>"
"<com.unity3d.player.UnityPlayer: void finish()>","<com.unity3d.player.UnityPlayer: void finish()>"
"<com.unity3d.player.UnityPlayer$1: void onClick(android.content.DialogInterface,int)>","<com.unity3d.player.UnityPlayer$1: void onClick(android.content.DialogInterface,int)>"
"<com.unity3d.player.UnityPlayer$f: void a()>","<com.unity3d.player.UnityPlayer$f: void a()>"
"<com.unity3d.player.c: java.lang.Object b(com.unity3d.player.c)>","<com.unity3d.player.c: java.lang.Object b(com.unity3d.player.c)>"
"<com.unity3d.player.UnityPlayer: void access$200(com.unity3d.player.UnityPlayer)>","<com.unity3d.player.UnityPlayer: void access$200(com.unity3d.player.UnityPlayer)>"
"<com.unity3d.player.b: void <init>(android.content.Context)>","<com.unity3d.player.b: void <init>(android.content.Context)>"
"<com.unity3d.player.UnityPlayer: android.os.Bundle getSettings()>","<com.unity3d.player.UnityPlayer: android.os.Bundle getSettings()>"
"<org.fmod.FMODAudioDevice: void <clinit>()>","<org.fmod.FMODAudioDevice: void <clinit>()>"
"<com.unity3d.player.UnityPlayer: void reportSoftInputSelection(int,int)>","<com.unity3d.player.UnityPlayer: void reportSoftInputSelection(int,int)>"
"<com.google.androidgamesdk.SwappyDisplayManager: void <init>(long,android.app.Activity)>","<com.google.androidgamesdk.SwappyDisplayManager: void <init>(long,android.app.Activity)>"
"<com.unity3d.player.i$4: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>","<com.unity3d.player.i$4: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>"
"<com.unity3d.player.MultiWindowSupport: void <clinit>()>","<com.unity3d.player.MultiWindowSupport: void <clinit>()>"
"<com.unity3d.player.g$a: void run()>","<com.unity3d.player.g$a: void run()>"
"<com.unity3d.player.UnityPlayer: void <init>(android.content.Context)>","<com.unity3d.player.UnityPlayer: void <init>(android.content.Context)>"
"<com.unity3d.player.UnityPlayer: void shutdown()>","<com.unity3d.player.UnityPlayer: void shutdown()>"
"<com.unity3d.player.UnityPlayer$f: void <init>(com.unity3d.player.UnityPlayer,byte)>","<com.unity3d.player.UnityPlayer$f: void <init>(com.unity3d.player.UnityPlayer,byte)>"
"<com.unity3d.player.n: void <init>(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.n$a)>","<com.unity3d.player.n: void <init>(android.content.Context,java.lang.String,int,int,int,boolean,long,long,com.unity3d.player.n$a)>"
"<com.unity3d.player.UnityPlayer$e: void a(int,int)>","<com.unity3d.player.UnityPlayer$e: void a(int,int)>"
"<android.telephony.RadioAccessSpecifier: boolean equals(java.lang.Object)>","<android.telephony.RadioAccessSpecifier: boolean equals(java.lang.Object)>"
"<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>","<android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)>"
"<java.net.URLConnection: long getContentLengthLong()>","<java.net.URLConnection: long getContentLengthLong()>"
"<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>","<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String)>"
"<android.view.WindowManager: void removeViewImmediate(android.view.View)>","<android.view.WindowManager: void removeViewImmediate(android.view.View)>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.view.OnReceiveContentListener: android.view.ContentInfo onReceiveContent(android.view.View,android.view.ContentInfo)>","<android.view.OnReceiveContentListener: android.view.ContentInfo onReceiveContent(android.view.View,android.view.ContentInfo)>"
"<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>","<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>"
"<android.view.View: android.os.IBinder getApplicationWindowToken()>","<android.view.View: android.os.IBinder getApplicationWindowToken()>"
"<java.io.FileInputStream: void <init>(java.io.File)>","<java.io.FileInputStream: void <init>(java.io.File)>"
"<java.lang.reflect.Array: int getLength(java.lang.Object)>","<java.lang.reflect.Array: int getLength(java.lang.Object)>"
"<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>","<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>"
"<android.content.pm.PackageManager: void setApplicationCategoryHint(java.lang.String,int)>","<android.content.pm.PackageManager: void setApplicationCategoryHint(java.lang.String,int)>"
"<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>","<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>"
"<android.graphics.drawable.Drawable: int getMinimumWidth()>","<android.graphics.drawable.Drawable: int getMinimumWidth()>"
"<android.os.Debug$MemoryInfo: int getTotalSharedClean()>","<android.os.Debug$MemoryInfo: int getTotalSharedClean()>"
"<android.telephony.SignalStrength: boolean isGsm()>","<android.telephony.SignalStrength: boolean isGsm()>"
"<android.view.ViewStructure: void setInputType(int)>","<android.view.ViewStructure: void setInputType(int)>"
"<android.transition.Transition: boolean canRemoveViews()>","<android.transition.Transition: boolean canRemoveViews()>"
"<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>","<android.view.Window: boolean superDispatchTrackballEvent(android.view.MotionEvent)>"
"<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>","<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>"
"<android.view.MotionEvent$PointerProperties: void clear()>","<android.view.MotionEvent$PointerProperties: void clear()>"
"<java.lang.Number: double doubleValue()>","<java.lang.Number: double doubleValue()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
"<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>","<android.view.View: void setScrollBarDefaultDelayBeforeFade(int)>"
"<android.graphics.text.MeasuredText$Builder: void <init>(char[])>","<android.graphics.text.MeasuredText$Builder: void <init>(char[])>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.ContextWrapper: java.io.File[] getObbDirs()>","<android.content.ContextWrapper: java.io.File[] getObbDirs()>"
"<java.nio.IntBuffer: java.nio.Buffer reset()>","<java.nio.IntBuffer: java.nio.Buffer reset()>"
"<java.io.File: java.lang.String getName()>","<java.io.File: java.lang.String getName()>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void <init>(int,float,float,float)>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: void <init>(int,float,float,float)>"
"<java.lang.Short: java.lang.Short valueOf(short)>","<java.lang.Short: java.lang.Short valueOf(short)>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(android.icu.util.ULocale)>"
"<android.content.pm.PackageInfo: void setLongVersionCode(long)>","<android.content.pm.PackageInfo: void setLongVersionCode(long)>"
"<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>","<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>"
"<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>","<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>"
"<android.media.MediaPlayer: void setAudioSessionId(int)>","<android.media.MediaPlayer: void setAudioSessionId(int)>"
"<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)>"
"<android.widget.TextView: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>","<android.widget.TextView: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>"
"<java.text.FieldPosition: int getField()>","<java.text.FieldPosition: int getField()>"
"<java.util.Deque: java.lang.Object pop()>","<java.util.Deque: java.lang.Object pop()>"
"<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>","<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>"
"<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>","<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>"
"<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<java.lang.Boolean: void <init>(boolean)>","<java.lang.Boolean: void <init>(boolean)>"
"<javax.security.auth.Subject: java.util.Set getPrincipals()>","<javax.security.auth.Subject: java.util.Set getPrincipals()>"
"<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>","<android.content.pm.PackageManager: android.content.pm.PackageInstaller getPackageInstaller()>"
"<java.util.Deque: java.lang.Object poll()>","<java.util.Deque: java.lang.Object poll()>"
"<android.media.Spatializer: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>","<android.media.Spatializer: boolean canBeSpatialized(android.media.AudioAttributes,android.media.AudioFormat)>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied()>"
"<android.text.GetChars: void getChars(int,int,char[],int)>","<android.text.GetChars: void getChars(int,int,char[],int)>"
"<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>","<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>"
"<android.widget.FrameLayout: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.FrameLayout: java.lang.CharSequence getAccessibilityClassName()>"
"<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>","<org.xmlpull.v1.XmlPullParser: boolean getFeature(java.lang.String)>"
"<android.media.Rating: float getStarRating()>","<android.media.Rating: float getStarRating()>"
"<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)>","<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)>"
"<android.util.SparseArray: void setValueAt(int,java.lang.Object)>","<android.util.SparseArray: void setValueAt(int,java.lang.Object)>"
"<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>","<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)>"
"<android.view.ActionProvider: boolean overridesItemVisibility()>","<android.view.ActionProvider: boolean overridesItemVisibility()>"
"<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>","<java.lang.Byte: java.lang.Byte valueOf(java.lang.String)>"
"<java.time.ZonedDateTime: boolean equals(java.lang.Object)>","<java.time.ZonedDateTime: boolean equals(java.lang.Object)>"
"<java.util.Collections: java.util.NavigableSet checkedNavigableSet(java.util.NavigableSet,java.lang.Class)>","<java.util.Collections: java.util.NavigableSet checkedNavigableSet(java.util.NavigableSet,java.lang.Class)>"
"<android.view.View: void setLayoutDirection(int)>","<android.view.View: void setLayoutDirection(int)>"
"<java.nio.ByteBuffer: java.nio.Buffer mark()>","<java.nio.ByteBuffer: java.nio.Buffer mark()>"
"<android.media.session.PlaybackState: void <clinit>()>","<android.media.session.PlaybackState: void <clinit>()>"
"<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>","<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>"
"<java.util.Arrays: void fill(boolean[],int,int,boolean)>","<java.util.Arrays: void fill(boolean[],int,int,boolean)>"
"<android.view.ViewGroup: boolean getClipToPadding()>","<android.view.ViewGroup: boolean getClipToPadding()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream parallel()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream parallel()>"
"<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>","<java.util.concurrent.locks.Condition: boolean awaitUntil(java.util.Date)>"
"<android.app.Dialog: void hide()>","<android.app.Dialog: void hide()>"
"<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>","<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>"
"<java.lang.reflect.Modifier: boolean isInterface(int)>","<java.lang.reflect.Modifier: boolean isInterface(int)>"
"<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>","<android.animation.Animator: void setInterpolator(android.animation.TimeInterpolator)>"
"<android.telephony.TelephonyManager: boolean isNetworkRoaming()>","<android.telephony.TelephonyManager: boolean isNetworkRoaming()>"
"<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>","<android.hardware.camera2.CameraDevice: void createCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>"
"<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>","<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>"
"<android.view.MotionEvent: int getFlags()>","<android.view.MotionEvent: int getFlags()>"
"<android.net.ConnectivityManager$NetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>","<android.net.ConnectivityManager$NetworkCallback: void onCapabilitiesChanged(android.net.Network,android.net.NetworkCapabilities)>"
"<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>","<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>"
"<java.util.Collection: int hashCode()>","<java.util.Collection: int hashCode()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(int)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(int)>"
"<android.app.Dialog: void setTitle(int)>","<android.app.Dialog: void setTitle(int)>"
"<java.util.Map: int hashCode()>","<java.util.Map: int hashCode()>"
"<android.graphics.drawable.Drawable: void setTint(int)>","<android.graphics.drawable.Drawable: void setTint(int)>"
"<java.time.Period: java.time.chrono.ChronoPeriod multipliedBy(int)>","<java.time.Period: java.time.chrono.ChronoPeriod multipliedBy(int)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>"
"<java.time.chrono.ChronoLocalDateTime: java.time.LocalTime toLocalTime()>","<java.time.chrono.ChronoLocalDateTime: java.time.LocalTime toLocalTime()>"
"<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>","<android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)>"
"<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>","<android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalBefore()>"
"<java.util.AbstractList: java.util.ListIterator listIterator(int)>","<java.util.AbstractList: java.util.ListIterator listIterator(int)>"
"<android.view.AbsSavedState: android.os.Parcelable getSuperState()>","<android.view.AbsSavedState: android.os.Parcelable getSuperState()>"
"<android.graphics.RenderNode: float getAlpha()>","<android.graphics.RenderNode: float getAlpha()>"
"<java.nio.CharBuffer: java.nio.CharBuffer compact()>","<java.nio.CharBuffer: java.nio.CharBuffer compact()>"
"<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>","<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>"
"<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>","<android.content.Intent: float[] getFloatArrayExtra(java.lang.String)>"
"<android.view.displayhash.DisplayHash: int describeContents()>","<android.view.displayhash.DisplayHash: int describeContents()>"
"<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>","<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>"
"<java.util.Arrays: int compare(byte[],int,int,byte[],int,int)>","<java.util.Arrays: int compare(byte[],int,int,byte[],int,int)>"
"<android.view.View: boolean isInLayout()>","<android.view.View: boolean isInLayout()>"
"<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>","<java.net.DatagramSocketImpl: java.io.FileDescriptor getFileDescriptor()>"
"<android.hardware.camera2.params.SessionConfiguration: void <clinit>()>","<android.hardware.camera2.params.SessionConfiguration: void <clinit>()>"
"<android.hardware.camera2.CameraCharacteristics$Key: int hashCode()>","<android.hardware.camera2.CameraCharacteristics$Key: int hashCode()>"
"<android.view.ViewStructure$HtmlInfo: java.util.List getAttributes()>","<android.view.ViewStructure$HtmlInfo: java.util.List getAttributes()>"
"<java.time.DayOfWeek: int get(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: int get(java.time.temporal.TemporalField)>"
"<java.lang.reflect.Modifier: int classModifiers()>","<java.lang.reflect.Modifier: int classModifiers()>"
"<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>","<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>"
"<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>","<android.view.Window: boolean superDispatchKeyEvent(android.view.KeyEvent)>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
"<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>","<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>"
"<android.hardware.camera2.params.ExtensionSessionConfiguration: int getExtension()>","<android.hardware.camera2.params.ExtensionSessionConfiguration: int getExtension()>"
"<android.widget.TextView: void setLineBreakStyle(int)>","<android.widget.TextView: void setLineBreakStyle(int)>"
"<java.util.stream.Stream: java.util.stream.Stream iterate(java.lang.Object,java.util.function.UnaryOperator)>","<java.util.stream.Stream: java.util.stream.Stream iterate(java.lang.Object,java.util.function.UnaryOperator)>"
"<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>","<java.net.URLConnection: void setDefaultAllowUserInteraction(boolean)>"
"<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.view.ViewGroup: boolean isTransitionGroup()>","<android.view.ViewGroup: boolean isTransitionGroup()>"
"<java.nio.IntBuffer: java.lang.Object array()>","<java.nio.IntBuffer: java.lang.Object array()>"
"<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>","<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>"
"<java.security.cert.Certificate: boolean equals(java.lang.Object)>","<java.security.cert.Certificate: boolean equals(java.lang.Object)>"
"<android.hardware.camera2.params.OutputConfiguration: void setMirrorMode(int)>","<android.hardware.camera2.params.OutputConfiguration: void setMirrorMode(int)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate date(int,int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate date(int,int,int)>"
"<android.hardware.Sensor: boolean isWakeUpSensor()>","<android.hardware.Sensor: boolean isWakeUpSensor()>"
"<java.time.LocalDate: boolean isLeapYear()>","<java.time.LocalDate: boolean isLeapYear()>"
"<java.lang.String: int codePointBefore(int)>","<java.lang.String: int codePointBefore(int)>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(java.lang.String)>"
"<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setAuthenticatedEncryption(android.net.IpSecAlgorithm)>","<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setAuthenticatedEncryption(android.net.IpSecAlgorithm)>"
"<android.telephony.ServiceState: int getCdmaNetworkId()>","<android.telephony.ServiceState: int getCdmaNetworkId()>"
"<android.view.ViewGroup: int getNestedScrollAxes()>","<android.view.ViewGroup: int getNestedScrollAxes()>"
"<java.lang.Float: float min(float,float)>","<java.lang.Float: float min(float,float)>"
"<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>","<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>"
"<java.nio.FloatBuffer: float get(int)>","<java.nio.FloatBuffer: float get(int)>"
"<android.util.SizeF: int hashCode()>","<android.util.SizeF: int hashCode()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>"
"<android.widget.TextView: void onRtlPropertiesChanged(int)>","<android.widget.TextView: void onRtlPropertiesChanged(int)>"
"<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>","<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>"
"<android.animation.Animator: android.animation.Animator clone()>","<android.animation.Animator: android.animation.Animator clone()>"
"<android.util.Rational: boolean isFinite()>","<android.util.Rational: boolean isFinite()>"
"<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>","<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>"
"<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>","<android.view.View: android.content.res.ColorStateList getBackgroundTintList()>"
"<android.widget.AbsListView: void requestLayout()>","<android.widget.AbsListView: void requestLayout()>"
"<android.view.Window: void setWindowAnimations(int)>","<android.view.Window: void setWindowAnimations(int)>"
"<java.lang.Character: boolean isLetter(char)>","<java.lang.Character: boolean isLetter(char)>"
"<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.util.Hashtable: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.Intent: void removeCategory(java.lang.String)>","<android.content.Intent: void removeCategory(java.lang.String)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()>","<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)>"
"<android.os.MessageQueue$IdleHandler: boolean queueIdle()>","<android.os.MessageQueue$IdleHandler: boolean queueIdle()>"
"<android.media.AudioManager: void removeOnModeChangedListener(android.media.AudioManager$OnModeChangedListener)>","<android.media.AudioManager: void removeOnModeChangedListener(android.media.AudioManager$OnModeChangedListener)>"
"<android.widget.Filter: void filter(java.lang.CharSequence)>","<android.widget.Filter: void filter(java.lang.CharSequence)>"
"<android.media.SyncParams: android.media.SyncParams setTolerance(float)>","<android.media.SyncParams: android.media.SyncParams setTolerance(float)>"
"<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>","<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>"
"<java.io.FileDescriptor: boolean valid()>","<java.io.FileDescriptor: boolean valid()>"
"<android.content.res.TypedArray: float getFraction(int,int,int,float)>","<android.content.res.TypedArray: float getFraction(int,int,int,float)>"
"<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>"
"<android.app.Activity: void setVolumeControlStream(int)>","<android.app.Activity: void setVolumeControlStream(int)>"
"<android.content.IntentFilter: java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver)>","<android.content.IntentFilter: java.util.function.Predicate asPredicateWithTypeResolution(android.content.ContentResolver)>"
"<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>","<android.content.pm.PackageInstaller: java.util.List getStagedSessions()>"
"<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>","<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>"
"<android.media.MediaSyncEvent: int describeContents()>","<android.media.MediaSyncEvent: int describeContents()>"
"<android.os.CancellationSignal: boolean isCanceled()>","<android.os.CancellationSignal: boolean isCanceled()>"
"<android.graphics.Paint: boolean isElegantTextHeight()>","<android.graphics.Paint: boolean isElegantTextHeight()>"
"<java.time.LocalTime: int compareTo(java.lang.Object)>","<java.time.LocalTime: int compareTo(java.lang.Object)>"
"<android.animation.ValueAnimator: void setCurrentFraction(float)>","<android.animation.ValueAnimator: void setCurrentFraction(float)>"
"<java.util.Comparator: java.util.Comparator reverseOrder()>","<java.util.Comparator: java.util.Comparator reverseOrder()>"
"<android.view.ViewParent: void requestLayout()>","<android.view.ViewParent: void requestLayout()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)>"
"<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>","<android.view.SurfaceHolder: android.graphics.Rect getSurfaceFrame()>"
"<android.os.Parcel: void writeFloat(float)>","<android.os.Parcel: void writeFloat(float)>"
"<android.content.res.Resources: boolean getBoolean(int)>","<android.content.res.Resources: boolean getBoolean(int)>"
"<android.view.textclassifier.TextClassificationContext: void <init>()>","<android.view.textclassifier.TextClassificationContext: void <init>()>"
"<android.telephony.NetworkScanRequest: void <init>(int,android.telephony.RadioAccessSpecifier[],int,int,boolean,int,java.util.ArrayList)>","<android.telephony.NetworkScanRequest: void <init>(int,android.telephony.RadioAccessSpecifier[],int,int,boolean,int,java.util.ArrayList)>"
"<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>","<android.widget.AdapterView: java.lang.Object getItemAtPosition(int)>"
"<java.util.stream.IntStream$Builder: java.util.stream.IntStream$Builder add(int)>","<java.util.stream.IntStream$Builder: java.util.stream.IntStream$Builder add(int)>"
"<java.time.chrono.Chronology: boolean isLeapYear(long)>","<java.time.chrono.Chronology: boolean isLeapYear(long)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)>"
"<java.net.URL: boolean equals(java.lang.Object)>","<java.net.URL: boolean equals(java.lang.Object)>"
"<android.util.ArrayMap: int indexOfValue(java.lang.Object)>","<android.util.ArrayMap: int indexOfValue(java.lang.Object)>"
"<android.content.pm.PermissionGroupInfo: void <clinit>()>","<android.content.pm.PermissionGroupInfo: void <clinit>()>"
"<android.view.View: void setTranslationX(float)>","<android.view.View: void setTranslationX(float)>"
"<android.graphics.RecordingCanvas: void drawCircle(float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawCircle(float,float,float,android.graphics.Paint)>"
"<java.io.InvalidObjectException: void <init>(java.lang.String)>","<java.io.InvalidObjectException: void <init>(java.lang.String)>"
"<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>","<android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: android.content.ComponentName getComponentName()>","<android.content.pm.PackageManager$ComponentEnabledSetting: android.content.ComponentName getComponentName()>"
"<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>","<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>"
"<java.lang.StringBuffer: java.lang.String substring(int,int)>","<java.lang.StringBuffer: java.lang.String substring(int,int)>"
"<java.lang.Integer: int parseUnsignedInt(java.lang.CharSequence,int,int,int)>","<java.lang.Integer: int parseUnsignedInt(java.lang.CharSequence,int,int,int)>"
"<android.content.pm.PackageManager$PackageInfoFlags: void <init>()>","<android.content.pm.PackageManager$PackageInfoFlags: void <init>()>"
"<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>","<java.lang.StringBuffer: int lastIndexOf(java.lang.String)>"
"<android.view.WindowInsets: int getSystemWindowInsetLeft()>","<android.view.WindowInsets: int getSystemWindowInsetLeft()>"
"<android.graphics.ColorSpace$Rgb: float[] getInverseTransform()>","<android.graphics.ColorSpace$Rgb: float[] getInverseTransform()>"
"<android.media.AudioRecord: void startRecording()>","<android.media.AudioRecord: void startRecording()>"
"<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>"
"<android.app.Activity: void overridePendingTransition(int,int)>","<android.app.Activity: void overridePendingTransition(int,int)>"
"<android.widget.TextView: void setFallbackLineSpacing(boolean)>","<android.widget.TextView: void setFallbackLineSpacing(boolean)>"
"<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>","<android.content.pm.PackageManager: int getComponentEnabledSetting(android.content.ComponentName)>"
"<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)>","<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator)>"
"<android.telephony.ServiceState: int describeContents()>","<android.telephony.ServiceState: int describeContents()>"
"<android.hardware.camera2.params.InputConfiguration: boolean equals(java.lang.Object)>","<android.hardware.camera2.params.InputConfiguration: boolean equals(java.lang.Object)>"
"<android.database.Cursor: boolean isBeforeFirst()>","<android.database.Cursor: boolean isBeforeFirst()>"
"<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>","<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>"
"<java.util.Map$Entry: java.lang.Object getValue()>","<java.util.Map$Entry: java.lang.Object getValue()>"
"<android.os.Debug: void stopMethodTracing()>","<android.os.Debug: void stopMethodTracing()>"
"<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>","<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>"
"<android.content.ContextParams: java.lang.String getAttributionTag()>","<android.content.ContextParams: java.lang.String getAttributionTag()>"
"<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>","<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>"
"<android.widget.TextView: int getCurrentHintTextColor()>","<android.widget.TextView: int getCurrentHintTextColor()>"
"<android.database.Cursor: boolean moveToPrevious()>","<android.database.Cursor: boolean moveToPrevious()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>"
"<android.media.AudioManager: android.media.AudioDeviceInfo getCommunicationDevice()>","<android.media.AudioManager: android.media.AudioDeviceInfo getCommunicationDevice()>"
"<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>","<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(int)>"
"<java.net.DatagramSocket: void connect(java.net.SocketAddress)>","<java.net.DatagramSocket: void connect(java.net.SocketAddress)>"
"<android.media.session.MediaSession$Callback: void onSetPlaybackSpeed(float)>","<android.media.session.MediaSession$Callback: void onSetPlaybackSpeed(float)>"
"<android.os.Bundle: void <init>()>","<android.os.Bundle: void <init>()>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int)>"
"<java.util.HashMap: void <init>(int,float)>","<java.util.HashMap: void <init>(int,float)>"
"<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>","<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>"
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>","<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove()>"
"<android.graphics.RectF: void <init>(float,float,float,float)>","<android.graphics.RectF: void <init>(float,float,float,float)>"
"<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>","<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>"
"<java.util.Arrays: int compare(java.lang.Comparable[],java.lang.Comparable[])>","<java.util.Arrays: int compare(java.lang.Comparable[],java.lang.Comparable[])>"
"<android.widget.Toolbar: boolean hideOverflowMenu()>","<android.widget.Toolbar: boolean hideOverflowMenu()>"
"<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>","<android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)>"
"<android.animation.LayoutTransition$TransitionListener: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition$TransitionListener: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>"
"<java.util.Map$Entry: java.lang.Object getKey()>","<java.util.Map$Entry: java.lang.Object getKey()>"
"<java.util.Set: boolean containsAll(java.util.Collection)>","<java.util.Set: boolean containsAll(java.util.Collection)>"
"<java.lang.Short: short parseShort(java.lang.String)>","<java.lang.Short: short parseShort(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>","<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>"
"<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String)>","<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String)>"
"<android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setTooltipText(java.lang.CharSequence)>"
"<android.os.Parcel: void readLongArray(long[])>","<android.os.Parcel: void readLongArray(long[])>"
"<android.view.ViewGroup: void clearFocus()>","<android.view.ViewGroup: void clearFocus()>"
"<android.os.Parcel: void writeValue(java.lang.Object)>","<android.os.Parcel: void writeValue(java.lang.Object)>"
"<android.widget.TextView: int getAutoSizeMinTextSize()>","<android.widget.TextView: int getAutoSizeMinTextSize()>"
"<android.database.Cursor: int getPosition()>","<android.database.Cursor: int getPosition()>"
"<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>","<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>"
"<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>","<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>"
"<android.net.NetworkRequest$Builder: void <init>()>","<android.net.NetworkRequest$Builder: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime ofNanoOfDay(long)>","<java.time.LocalTime: java.time.LocalTime ofNanoOfDay(long)>"
"<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)>","<android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)>"
"<android.widget.AbsListView: int computeVerticalScrollExtent()>","<android.widget.AbsListView: int computeVerticalScrollExtent()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreResumed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreResumed(android.app.Activity)>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>"
"<java.time.Instant: int getNano()>","<java.time.Instant: int getNano()>"
"<java.lang.Character: java.lang.String toString()>","<java.lang.Character: java.lang.String toString()>"
"<android.view.View: android.graphics.BlendMode getBackgroundTintBlendMode()>","<android.view.View: android.graphics.BlendMode getBackgroundTintBlendMode()>"
"<android.telephony.TelephonyManager: java.lang.String getImei()>","<android.telephony.TelephonyManager: java.lang.String getImei()>"
"<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.Math: float nextAfter(float,double)>","<java.lang.Math: float nextAfter(float,double)>"
"<android.graphics.RenderNode: float getPivotX()>","<android.graphics.RenderNode: float getPivotX()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreSettings(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreSettings(boolean)>"
"<java.lang.Float: void <clinit>()>","<java.lang.Float: void <clinit>()>"
"<android.net.LinkProperties: void setDnsServers(java.util.Collection)>","<android.net.LinkProperties: void setDnsServers(java.util.Collection)>"
"<java.util.Deque: java.util.Iterator descendingIterator()>","<java.util.Deque: java.util.Iterator descendingIterator()>"
"<android.view.inputmethod.SurroundingText: java.lang.CharSequence getText()>","<android.view.inputmethod.SurroundingText: java.lang.CharSequence getText()>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int,int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int,int)>"
"<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>","<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>"
"<android.widget.TextView: android.text.TextPaint getPaint()>","<android.widget.TextView: android.text.TextPaint getPaint()>"
"<android.content.pm.PackageManager: int getTargetSdkVersion(java.lang.String)>","<android.content.pm.PackageManager: int getTargetSdkVersion(java.lang.String)>"
"<java.net.URI: java.lang.String getFragment()>","<java.net.URI: java.lang.String getFragment()>"
"<android.database.ContentObserver: void onChange(boolean,android.net.Uri,int)>","<android.database.ContentObserver: void onChange(boolean,android.net.Uri,int)>"
"<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>","<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>"
"<java.net.Socket: boolean getTcpNoDelay()>","<java.net.Socket: boolean getTcpNoDelay()>"
"<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>","<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>"
"<java.net.SocketImpl: java.util.Set supportedOptions()>","<java.net.SocketImpl: java.util.Set supportedOptions()>"
"<java.lang.Class: boolean desiredAssertionStatus()>","<java.lang.Class: boolean desiredAssertionStatus()>"
"<java.util.regex.Matcher: java.util.regex.Matcher reset()>","<java.util.regex.Matcher: java.util.regex.Matcher reset()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(float)>","<java.lang.StringBuilder: java.lang.StringBuilder append(float)>"
"<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>","<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>"
"<android.view.InputDevice: int getVendorId()>","<android.view.InputDevice: int getVendorId()>"
"<java.security.Provider$Service: java.security.Provider getProvider()>","<java.security.Provider$Service: java.security.Provider getProvider()>"
"<android.telephony.BarringInfo: void writeToParcel(android.os.Parcel,int)>","<android.telephony.BarringInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)>","<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putString(int,java.lang.String)>"
"<java.lang.Thread: void suspend()>","<java.lang.Thread: void suspend()>"
"<android.telephony.PreciseDataConnectionState: boolean equals(java.lang.Object)>","<android.telephony.PreciseDataConnectionState: boolean equals(java.lang.Object)>"
"<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>","<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>"
"<android.graphics.ColorSpace: float[] chromaticAdaptation(android.graphics.ColorSpace$Adaptation,float[],float[])>","<android.graphics.ColorSpace: float[] chromaticAdaptation(android.graphics.ColorSpace$Adaptation,float[],float[])>"
"<android.hardware.Camera: boolean enableShutterSound(boolean)>","<android.hardware.Camera: boolean enableShutterSound(boolean)>"
"<android.media.AudioPresentation: boolean hasSpokenSubtitles()>","<android.media.AudioPresentation: boolean hasSpokenSubtitles()>"
"<android.util.SizeF: float getHeight()>","<android.util.SizeF: float getHeight()>"
"<android.animation.ValueAnimator: float getAnimatedFraction()>","<android.animation.ValueAnimator: float getAnimatedFraction()>"
"<android.view.ViewParent: android.view.ViewParent getParent()>","<android.view.ViewParent: android.view.ViewParent getParent()>"
"<java.util.Comparator: java.util.Comparator comparingDouble(java.util.function.ToDoubleFunction)>","<java.util.Comparator: java.util.Comparator comparingDouble(java.util.function.ToDoubleFunction)>"
"<java.util.OptionalDouble: void ifPresent(java.util.function.DoubleConsumer)>","<java.util.OptionalDouble: void ifPresent(java.util.function.DoubleConsumer)>"
"<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>","<java.util.regex.Matcher: java.util.regex.Matcher useAnchoringBounds(boolean)>"
"<android.widget.TextView: boolean isElegantTextHeight()>","<android.widget.TextView: boolean isElegantTextHeight()>"
"<java.util.Random: double nextDouble()>","<java.util.Random: double nextDouble()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>"
"<java.util.NavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry lowerEntry(java.lang.Object)>"
"<java.util.HashMap: java.lang.Object remove(java.lang.Object)>","<java.util.HashMap: java.lang.Object remove(java.lang.Object)>"
"<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)>","<android.view.textclassifier.TextClassification: java.lang.String getEntity(int)>"
"<android.view.View: void drawableHotspotChanged(float,float)>","<android.view.View: void drawableHotspotChanged(float,float)>"
"<android.media.AudioPresentation$Builder: void <init>(int)>","<android.media.AudioPresentation$Builder: void <init>(int)>"
"<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>","<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.IntConsumer)>"
"<java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>","<java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>"
"<android.media.AudioTrack: int getAudioSessionId()>","<android.media.AudioTrack: int getAudioSessionId()>"
"<java.time.chrono.IsoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>","<java.time.chrono.IsoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
"<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel truncate(long)>","<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel truncate(long)>"
"<android.view.Display$Mode: void <clinit>()>","<android.view.Display$Mode: void <clinit>()>"
"<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(java.lang.Runnable)>","<android.view.ViewTreeObserver: boolean unregisterFrameCommitCallback(java.lang.Runnable)>"
"<android.widget.TextView: void setHyphenationFrequency(int)>","<android.widget.TextView: void setHyphenationFrequency(int)>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.widget.Toolbar$LayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.widget.Toolbar$LayoutParams)>"
"<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>"
"<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>","<java.lang.reflect.Proxy: void <init>(java.lang.reflect.InvocationHandler)>"
"<android.widget.Toolbar: int getCurrentContentInsetRight()>","<android.widget.Toolbar: int getCurrentContentInsetRight()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>"
"<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>"
"<java.util.Dictionary: java.util.Enumeration keys()>","<java.util.Dictionary: java.util.Enumeration keys()>"
"<java.lang.reflect.Parameter: int hashCode()>","<java.lang.reflect.Parameter: int hashCode()>"
"<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder create(android.content.Context)>"
"<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>","<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence)>"
"<android.widget.RemoteViews: void setImageViewResource(int,int)>","<android.widget.RemoteViews: void setImageViewResource(int,int)>"
"<android.net.NetworkRequest: void <clinit>()>","<android.net.NetworkRequest: void <clinit>()>"
"<android.transition.Scene: void exit()>","<android.transition.Scene: void exit()>"
"<java.util.concurrent.TimeUnit: long toDays(long)>","<java.util.concurrent.TimeUnit: long toDays(long)>"
"<android.widget.TextView: int getAutoSizeStepGranularity()>","<android.widget.TextView: int getAutoSizeStepGranularity()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.VarHandle byteBufferViewVarHandle(java.lang.Class,java.nio.ByteOrder)>","<java.lang.invoke.MethodHandles: java.lang.invoke.VarHandle byteBufferViewVarHandle(java.lang.Class,java.nio.ByteOrder)>"
"<java.nio.file.attribute.FileAttribute: java.lang.Object value()>","<java.nio.file.attribute.FileAttribute: java.lang.Object value()>"
"<android.content.pm.ServiceInfo: void <init>()>","<android.content.pm.ServiceInfo: void <init>()>"
"<android.util.SparseBooleanArray: boolean equals(java.lang.Object)>","<android.util.SparseBooleanArray: boolean equals(java.lang.Object)>"
"<android.view.MenuItem: int getItemId()>","<android.view.MenuItem: int getItemId()>"
"<java.nio.file.FileStore: java.lang.String name()>","<java.nio.file.FileStore: java.lang.String name()>"
"<android.hardware.camera2.CameraCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>","<android.hardware.camera2.CameraCaptureSession: int setSingleRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>"
"<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>","<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>"
"<android.hardware.camera2.CameraCaptureSession: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>","<android.hardware.camera2.CameraCaptureSession: int captureSingleRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>"
"<android.view.MotionEvent: float getHistoricalToolMinor(int)>","<android.view.MotionEvent: float getHistoricalToolMinor(int)>"
"<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>","<android.media.session.MediaController: android.media.session.PlaybackState getPlaybackState()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setId(java.lang.String)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setId(java.lang.String)>"
"<android.view.Menu: void removeGroup(int)>","<android.view.Menu: void removeGroup(int)>"
"<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>","<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>"
"<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>","<android.media.session.MediaSessionManager: void removeOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>"
"<android.graphics.ColorSpace: float[] cctToXyz(int)>","<android.graphics.ColorSpace: float[] cctToXyz(int)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()>","<android.view.textclassifier.TextClassificationContext: java.lang.String getPackageName()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
"<java.security.Provider$Service: java.lang.String getAlgorithm()>","<java.security.Provider$Service: java.lang.String getAlgorithm()>"
"<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.view.KeyCharacterMap: boolean equals(java.lang.Object)>","<android.view.KeyCharacterMap: boolean equals(java.lang.Object)>"
"<android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>","<android.graphics.Paint: void setBlendMode(android.graphics.BlendMode)>"
"<android.hardware.camera2.TotalCaptureResult: java.util.List getPartialResults()>","<android.hardware.camera2.TotalCaptureResult: java.util.List getPartialResults()>"
"<java.lang.Long: int numberOfLeadingZeros(long)>","<java.lang.Long: int numberOfLeadingZeros(long)>"
"<java.util.stream.IntStream: java.util.stream.IntStream of(int)>","<java.util.stream.IntStream: java.util.stream.IntStream of(int)>"
"<java.time.Period: boolean isNegative()>","<java.time.Period: boolean isNegative()>"
"<android.view.View: int getScrollX()>","<android.view.View: int getScrollX()>"
"<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>"
"<android.util.AttributeSet: int getAttributeCount()>","<android.util.AttributeSet: int getAttributeCount()>"
"<android.media.AudioManager: void setStreamSolo(int,boolean)>","<android.media.AudioManager: void setStreamSolo(int,boolean)>"
"<android.widget.TextView$BufferType: android.widget.TextView$BufferType[] values()>","<android.widget.TextView$BufferType: android.widget.TextView$BufferType[] values()>"
"<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>","<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setCurve(float[],float[])>"
"<android.app.ActionBar$TabListener: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>","<android.app.ActionBar$TabListener: void onTabReselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>"
"<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.hardware.camera2.params.MeteringRectangle: boolean equals(java.lang.Object)>","<android.hardware.camera2.params.MeteringRectangle: boolean equals(java.lang.Object)>"
"<android.widget.TextView: android.text.method.KeyListener getKeyListener()>","<android.widget.TextView: android.text.method.KeyListener getKeyListener()>"
"<android.widget.RemoteViews$RemoteCollectionItems: void <clinit>()>","<android.widget.RemoteViews$RemoteCollectionItems: void <clinit>()>"
"<android.media.AudioPlaybackCaptureConfiguration: android.media.projection.MediaProjection getMediaProjection()>","<android.media.AudioPlaybackCaptureConfiguration: android.media.projection.MediaProjection getMediaProjection()>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getNavigationIcon()>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: void <init>()>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: void <init>()>"
"<android.database.CharArrayBuffer: void <init>(char[])>","<android.database.CharArrayBuffer: void <init>(char[])>"
"<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(int,double)>"
"<java.lang.String: char[] toCharArray()>","<java.lang.String: char[] toCharArray()>"
"<android.os.LocaleList: int describeContents()>","<android.os.LocaleList: int describeContents()>"
"<java.net.URI: java.lang.String getScheme()>","<java.net.URI: java.lang.String getScheme()>"
"<android.graphics.ColorSpace$Rgb: float[] toLinear(float,float,float)>","<android.graphics.ColorSpace$Rgb: float[] toLinear(float,float,float)>"
"<android.view.translation.TranslationResponseValue$Builder: void <init>(int)>","<android.view.translation.TranslationResponseValue$Builder: void <init>(int)>"
"<java.util.function.LongPredicate: boolean test(long)>","<java.util.function.LongPredicate: boolean test(long)>"
"<java.lang.String: boolean contentEquals(java.lang.CharSequence)>","<java.lang.String: boolean contentEquals(java.lang.CharSequence)>"
"<java.lang.String: boolean matches(java.lang.String)>","<java.lang.String: boolean matches(java.lang.String)>"
"<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>","<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener)>"
"<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>","<android.transition.Transition: android.transition.Transition addTarget(java.lang.String)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>"
"<android.widget.AbsListView: int getListPaddingRight()>","<android.widget.AbsListView: int getListPaddingRight()>"
"<android.content.ClipboardManager: java.lang.CharSequence getText()>","<android.content.ClipboardManager: java.lang.CharSequence getText()>"
"<android.graphics.Color: int alpha(int)>","<android.graphics.Color: int alpha(int)>"
"<android.content.Intent: android.content.ClipData getClipData()>","<android.content.Intent: android.content.ClipData getClipData()>"
"<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>"
"<java.util.ArrayList: boolean retainAll(java.util.Collection)>","<java.util.ArrayList: boolean retainAll(java.util.Collection)>"
"<android.view.View: void setScrollCaptureHint(int)>","<android.view.View: void setScrollCaptureHint(int)>"
"<android.view.ViewParent: boolean canResolveTextAlignment()>","<android.view.ViewParent: boolean canResolveTextAlignment()>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putLong(java.lang.String,long)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putLong(java.lang.String,long)>"
"<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>","<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,boolean,float[],int)>"
"<android.graphics.Color: float red(long)>","<android.graphics.Color: float red(long)>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <init>()>"
"<java.util.Deque: java.lang.Object peek()>","<java.util.Deque: java.lang.Object peek()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>","<android.database.Cursor: void registerContentObserver(android.database.ContentObserver)>"
"<android.graphics.Paint$Style: void <clinit>()>","<android.graphics.Paint$Style: void <clinit>()>"
"<android.view.View: void onDisplayHint(int)>","<android.view.View: void onDisplayHint(int)>"
"<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>","<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>"
"<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>","<android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])>"
"<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext$Builder setExtras(android.os.Bundle)>","<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext$Builder setExtras(android.os.Bundle)>"
"<android.widget.TextView: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>","<android.widget.TextView: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>"
"<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()>","<android.content.pm.SigningInfo: boolean hasPastSigningCertificates()>"
"<java.text.Format: void <init>()>","<java.text.Format: void <init>()>"
"<java.util.stream.IntStream: java.util.stream.IntStream parallel()>","<java.util.stream.IntStream: java.util.stream.IntStream parallel()>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>"
"<java.util.stream.LongStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)>","<java.util.stream.LongStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjLongConsumer,java.util.function.BiConsumer)>"
"<android.hardware.camera2.CameraMetadata: java.util.List getKeys()>","<android.hardware.camera2.CameraMetadata: java.util.List getKeys()>"
"<java.util.Hashtable: java.util.Enumeration elements()>","<java.util.Hashtable: java.util.Enumeration elements()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>"
"<android.graphics.ColorSpace$Rgb: boolean equals(java.lang.Object)>","<android.graphics.ColorSpace$Rgb: boolean equals(java.lang.Object)>"
"<android.view.Window: android.transition.Transition getSharedElementReturnTransition()>","<android.view.Window: android.transition.Transition getSharedElementReturnTransition()>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.temporal.Temporal: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.ColorFilter getColorFilter()>","<android.graphics.drawable.BitmapDrawable: android.graphics.ColorFilter getColorFilter()>"
"<android.hardware.HardwareBuffer: int getFormat()>","<android.hardware.HardwareBuffer: int getFormat()>"
"<java.time.temporal.ChronoField: void <clinit>()>","<java.time.temporal.ChronoField: void <clinit>()>"
"<android.util.LongSparseArray: int size()>","<android.util.LongSparseArray: int size()>"
"<android.media.Rating: void <clinit>()>","<android.media.Rating: void <clinit>()>"
"<java.lang.CharSequence: java.util.stream.IntStream chars()>","<java.lang.CharSequence: java.util.stream.IntStream chars()>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant()>","<android.icu.util.ULocale: java.lang.String getDisplayVariant()>"
"<android.hardware.camera2.CameraExtensionSession: android.hardware.camera2.CameraDevice getDevice()>","<android.hardware.camera2.CameraExtensionSession: android.hardware.camera2.CameraDevice getDevice()>"
"<android.content.Context: android.content.Context createContextForSplit(java.lang.String)>","<android.content.Context: android.content.Context createContextForSplit(java.lang.String)>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int,int)>"
"<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>","<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>"
"<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>","<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>"
"<java.util.InvalidPropertiesFormatException: void <init>(java.lang.String)>","<java.util.InvalidPropertiesFormatException: void <init>(java.lang.String)>"
"<android.view.View$OnClickListener: void onClick(android.view.View)>","<android.view.View$OnClickListener: void onClick(android.view.View)>"
"<java.lang.StringBuilder: java.lang.String toString()>","<java.lang.StringBuilder: java.lang.String toString()>"
"<android.net.ProxyInfo: java.lang.String toString()>","<android.net.ProxyInfo: java.lang.String toString()>"
"<android.graphics.Paint$Style: void <init>(java.lang.String,int)>","<android.graphics.Paint$Style: void <init>(java.lang.String,int)>"
"<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>","<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>"
"<java.io.PrintWriter: java.io.Writer append(char)>","<java.io.PrintWriter: java.io.Writer append(char)>"
"<android.view.inputmethod.TextSnapshot: android.view.inputmethod.SurroundingText getSurroundingText()>","<android.view.inputmethod.TextSnapshot: android.view.inputmethod.SurroundingText getSurroundingText()>"
"<android.view.inputmethod.TextSnapshot: int getCompositionStart()>","<android.view.inputmethod.TextSnapshot: int getCompositionStart()>"
"<android.view.KeyEvent: boolean isShiftPressed()>","<android.view.KeyEvent: boolean isShiftPressed()>"
"<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>","<java.net.SocketImpl: void setPerformancePreferences(int,int,int)>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,boolean[])>"
"<java.lang.Short: byte byteValue()>","<java.lang.Short: byte byteValue()>"
"<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>","<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>"
"<java.nio.file.Path: boolean endsWith(java.nio.file.Path)>","<java.nio.file.Path: boolean endsWith(java.nio.file.Path)>"
"<android.os.Vibrator: int[] getPrimitiveDurations(int[])>","<android.os.Vibrator: int[] getPrimitiveDurations(int[])>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionReady()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionReady()>"
"<android.view.View: boolean isVerticalFadingEdgeEnabled()>","<android.view.View: boolean isVerticalFadingEdgeEnabled()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownOutput()>"
"<android.hardware.camera2.CameraDevice: void createExtensionSession(android.hardware.camera2.params.ExtensionSessionConfiguration)>","<android.hardware.camera2.CameraDevice: void createExtensionSession(android.hardware.camera2.params.ExtensionSessionConfiguration)>"
"<java.nio.file.Path: java.nio.file.Path getParent()>","<java.nio.file.Path: java.nio.file.Path getParent()>"
"<java.util.Date: int getMonth()>","<java.util.Date: int getMonth()>"
"<android.transition.Transition: android.transition.Transition excludeChildren(java.lang.Class,boolean)>","<android.transition.Transition: android.transition.Transition excludeChildren(java.lang.Class,boolean)>"
"<java.time.zone.ZoneRules: java.util.List getValidOffsets(java.time.LocalDateTime)>","<java.time.zone.ZoneRules: java.util.List getValidOffsets(java.time.LocalDateTime)>"
"<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>","<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>"
"<android.os.Message: void sendToTarget()>","<android.os.Message: void sendToTarget()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>","<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPrePaused(android.app.Activity)>"
"<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>","<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>"
"<java.lang.invoke.VarHandle: java.lang.Object compareAndExchange(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object compareAndExchange(java.lang.Object[])>"
"<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>","<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>"
"<android.transition.Transition: android.transition.Transition removeTarget(java.lang.String)>","<android.transition.Transition: android.transition.Transition removeTarget(java.lang.String)>"
"<android.util.TypedValue: java.lang.String toString()>","<android.util.TypedValue: java.lang.String toString()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>"
"<android.util.SparseArray: boolean contentEquals(android.util.SparseArray)>","<android.util.SparseArray: boolean contentEquals(android.util.SparseArray)>"
"<java.lang.Deprecated: boolean forRemoval()>","<java.lang.Deprecated: boolean forRemoval()>"
"<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.DatagramChannel: int write(java.nio.ByteBuffer)>"
"<android.telephony.ims.ImsReasonInfo: int describeContents()>","<android.telephony.ims.ImsReasonInfo: int describeContents()>"
"<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>","<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>"
"<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>","<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>"
"<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>","<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>"
"<android.net.ConnectivityManager: boolean isDefaultNetworkActive()>","<android.net.ConnectivityManager: boolean isDefaultNetworkActive()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>"
"<android.widget.Scroller: int getStartX()>","<android.widget.Scroller: int getStartX()>"
"<android.view.View: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcher()>","<android.view.View: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcher()>"
"<java.net.Inet4Address: boolean isMCOrgLocal()>","<java.net.Inet4Address: boolean isMCOrgLocal()>"
"<android.view.ViewGroup: void measureChild(android.view.View,int,int)>","<android.view.ViewGroup: void measureChild(android.view.View,int,int)>"
"<android.animation.TypeConverter: void <init>(java.lang.Class,java.lang.Class)>","<android.animation.TypeConverter: void <init>(java.lang.Class,java.lang.Class)>"
"<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>","<android.widget.Adapter: void unregisterDataSetObserver(android.database.DataSetObserver)>"
"<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>","<android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])>"
"<android.graphics.ColorSpace: float getMinValue(int)>","<android.graphics.ColorSpace: float getMinValue(int)>"
"<android.hardware.Sensor: boolean isDirectChannelTypeSupported(int)>","<android.hardware.Sensor: boolean isDirectChannelTypeSupported(int)>"
"<java.lang.String: java.lang.String substring(int)>","<java.lang.String: java.lang.String substring(int)>"
"<javax.security.auth.Subject: java.util.Set getPrivateCredentials()>","<javax.security.auth.Subject: java.util.Set getPrivateCredentials()>"
"<android.view.ActionMode: void setTitleOptionalHint(boolean)>","<android.view.ActionMode: void setTitleOptionalHint(boolean)>"
"<java.time.chrono.IsoChronology: void <clinit>()>","<java.time.chrono.IsoChronology: void <clinit>()>"
"<android.view.SurfaceControl: boolean isValid()>","<android.view.SurfaceControl: boolean isValid()>"
"<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>","<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>"
"<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>","<android.text.Layout: void getSelectionPath(int,int,android.graphics.Path)>"
"<android.view.View: boolean hasTransientState()>","<android.view.View: boolean hasTransientState()>"
"<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()>","<android.telephony.TelephonyManager: boolean canChangeDtmfToneLength()>"
"<android.telephony.TelephonyManager: int getSimState(int)>","<android.telephony.TelephonyManager: int getSimState(int)>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleRight()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleRight()>"
"<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()>","<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()>"
"<java.nio.ByteBuffer: boolean equals(java.lang.Object)>","<java.nio.ByteBuffer: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup: void addKeyboardNavigationClusters(java.util.Collection,int)>","<android.view.ViewGroup: void addKeyboardNavigationClusters(java.util.Collection,int)>"
"<android.view.View: void onWindowFocusChanged(boolean)>","<android.view.View: void onWindowFocusChanged(boolean)>"
"<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>","<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>"
"<android.widget.TextView: int length()>","<android.widget.TextView: int length()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)>"
"<android.window.SplashScreen: void setSplashScreenTheme(int)>","<android.window.SplashScreen: void setSplashScreenTheme(int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>","<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>"
"<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()>","<android.media.MediaPlayer: android.media.MediaPlayer$TrackInfo[] getTrackInfo()>"
"<android.view.MotionEvent: java.lang.String actionToString(int)>","<android.view.MotionEvent: java.lang.String actionToString(int)>"
"<android.app.ActivityManager$MemoryInfo: void <clinit>()>","<android.app.ActivityManager$MemoryInfo: void <clinit>()>"
"<android.os.Bundle: void putAll(android.os.Bundle)>","<android.os.Bundle: void putAll(android.os.Bundle)>"
"<android.media.AudioDeviceInfo: int[] getSampleRates()>","<android.media.AudioDeviceInfo: int[] getSampleRates()>"
"<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<java.time.temporal.TemporalQuery: java.lang.Object queryFrom(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalQuery: java.lang.Object queryFrom(java.time.temporal.TemporalAccessor)>"
"<android.content.pm.PackageManager$OnChecksumsReadyListener: void onChecksumsReady(java.util.List)>","<android.content.pm.PackageManager$OnChecksumsReadyListener: void onChecksumsReady(java.util.List)>"
"<android.app.PendingIntent: void <clinit>()>","<android.app.PendingIntent: void <clinit>()>"
"<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()>","<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()>"
"<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()>","<android.hardware.camera2.CaptureRequest$Key: java.lang.String getName()>"
"<android.hardware.camera2.MultiResolutionImageReader: android.hardware.camera2.params.MultiResolutionStreamInfo getStreamInfoForImageReader(android.media.ImageReader)>","<android.hardware.camera2.MultiResolutionImageReader: android.hardware.camera2.params.MultiResolutionStreamInfo getStreamInfoForImageReader(android.media.ImageReader)>"
"<android.os.Process: java.lang.String myProcessName()>","<android.os.Process: java.lang.String myProcessName()>"
"<android.view.MenuItem: int getGroupId()>","<android.view.MenuItem: int getGroupId()>"
"<android.view.View: void setNextFocusForwardId(int)>","<android.view.View: void setNextFocusForwardId(int)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createChainEffect(android.graphics.RenderEffect,android.graphics.RenderEffect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createChainEffect(android.graphics.RenderEffect,android.graphics.RenderEffect)>"
"<android.app.Fragment: boolean getAllowReturnTransitionOverlap()>","<android.app.Fragment: boolean getAllowReturnTransitionOverlap()>"
"<android.widget.Toolbar: void setTitleTextAppearance(android.content.Context,int)>","<android.widget.Toolbar: void setTitleTextAppearance(android.content.Context,int)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndSetAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndSetAcquire(java.lang.Object[])>"
"<android.app.Activity: void setShouldDockBigOverlays(boolean)>","<android.app.Activity: void setShouldDockBigOverlays(boolean)>"
"<java.lang.Integer: void <init>(int)>","<java.lang.Integer: void <init>(int)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,java.lang.Class[])>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,java.lang.Class[])>"
"<android.graphics.DrawFilter: void finalize()>","<android.graphics.DrawFilter: void finalize()>"
"<android.graphics.SurfaceTexture: void attachToGLContext(int)>","<android.graphics.SurfaceTexture: void attachToGLContext(int)>"
"<android.graphics.Matrix: boolean postSkew(float,float)>","<android.graphics.Matrix: boolean postSkew(float,float)>"
"<android.content.ContentResolver: void cancelSync(android.net.Uri)>","<android.content.ContentResolver: void cancelSync(android.net.Uri)>"
"<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>","<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>"
"<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>","<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>"
"<java.text.FieldPosition: java.lang.String toString()>","<java.text.FieldPosition: java.lang.String toString()>"
"<android.os.Bundle: short[] getShortArray(java.lang.String)>","<android.os.Bundle: short[] getShortArray(java.lang.String)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<java.io.Reader: void mark(int)>","<java.io.Reader: void mark(int)>"
"<java.time.LocalTime: java.time.LocalTime minusMinutes(long)>","<java.time.LocalTime: java.time.LocalTime minusMinutes(long)>"
"<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.content.SyncAdapterType: int hashCode()>","<android.content.SyncAdapterType: int hashCode()>"
"<android.widget.AbsListView: float getTopFadingEdgeStrength()>","<android.widget.AbsListView: float getTopFadingEdgeStrength()>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>"
"<android.database.sqlite.SQLiteQuery: void <init>()>","<android.database.sqlite.SQLiteQuery: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isImportantForAccessibility()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.net.URLConnection: long getDate()>","<java.net.URLConnection: long getDate()>"
"<android.view.View: boolean removeCallbacks(java.lang.Runnable)>","<android.view.View: boolean removeCallbacks(java.lang.Runnable)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo build()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo build()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean equals(java.lang.Object)>","<android.view.accessibility.AccessibilityWindowInfo: boolean equals(java.lang.Object)>"
"<android.graphics.Movie: boolean isOpaque()>","<android.graphics.Movie: boolean isOpaque()>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>"
"<android.content.Context: void unbindService(android.content.ServiceConnection)>","<android.content.Context: void unbindService(android.content.ServiceConnection)>"
"<android.widget.EditText: void setSelection(int)>","<android.widget.EditText: void setSelection(int)>"
"<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>","<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>"
"<android.net.Network: void writeToParcel(android.os.Parcel,int)>","<android.net.Network: void writeToParcel(android.os.Parcel,int)>"
"<java.time.DayOfWeek: java.time.DayOfWeek valueOf(java.lang.String)>","<java.time.DayOfWeek: java.time.DayOfWeek valueOf(java.lang.String)>"
"<java.security.Provider: java.lang.String getProperty(java.lang.String)>","<java.security.Provider: java.lang.String getProperty(java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>","<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>"
"<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)>","<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String,int)>"
"<android.animation.ValueAnimator: int getRepeatMode()>","<android.animation.ValueAnimator: int getRepeatMode()>"
"<android.app.Dialog: void unregisterForContextMenu(android.view.View)>","<android.app.Dialog: void unregisterForContextMenu(android.view.View)>"
"<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getDestination()>","<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getDestination()>"
"<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>","<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>"
"<java.util.DoubleSummaryStatistics: void accept(double)>","<java.util.DoubleSummaryStatistics: void accept(double)>"
"<android.widget.AbsListView: void onNestedScroll(android.view.View,int,int,int,int)>","<android.widget.AbsListView: void onNestedScroll(android.view.View,int,int,int,int)>"
"<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long,long)>","<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long,long)>"
"<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)>","<android.view.ViewStructure: void setLocaleList(android.os.LocaleList)>"
"<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)>","<android.widget.ListView: void dispatchDraw(android.graphics.Canvas)>"
"<android.database.Cursor: boolean getWantsAllOnMoveCalls()>","<android.database.Cursor: boolean getWantsAllOnMoveCalls()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.String toString()>","<java.lang.invoke.MethodHandles$Lookup: java.lang.String toString()>"
"<java.net.SocketImpl: int getLocalPort()>","<java.net.SocketImpl: int getLocalPort()>"
"<java.lang.Float: boolean isNaN(float)>","<java.lang.Float: boolean isNaN(float)>"
"<android.os.HandlerThread: void <init>(java.lang.String)>","<android.os.HandlerThread: void <init>(java.lang.String)>"
"<android.os.Looper: android.os.Looper myLooper()>","<android.os.Looper: android.os.Looper myLooper()>"
"<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<android.widget.RemoteViews: void setColorAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColorAttr(int,java.lang.String,int)>"
"<android.content.IntentFilter: void <init>(java.lang.String)>","<android.content.IntentFilter: void <init>(java.lang.String)>"
"<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>","<android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)>"
"<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>","<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>"
"<android.view.View: void onDraw(android.graphics.Canvas)>","<android.view.View: void onDraw(android.graphics.Canvas)>"
"<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()>","<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()>"
"<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>","<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>"
"<java.lang.Math: double nextUp(double)>","<java.lang.Math: double nextUp(double)>"
"<android.app.Activity: android.net.Uri getReferrer()>","<android.app.Activity: android.net.Uri getReferrer()>"
"<android.util.SparseArray: void removeAt(int)>","<android.util.SparseArray: void removeAt(int)>"
"<android.graphics.DrawFilter: void <init>()>","<android.graphics.DrawFilter: void <init>()>"
"<android.app.Dialog: void onStart()>","<android.app.Dialog: void onStart()>"
"<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>","<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>"
"<java.lang.Double: int compare(double,double)>","<java.lang.Double: int compare(double,double)>"
"<android.content.ContentProvider: void onLowMemory()>","<android.content.ContentProvider: void onLowMemory()>"
"<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>","<android.view.ViewGroup$MarginLayoutParams: int getMarginStart()>"
"<android.app.Activity: boolean showDialog(int,android.os.Bundle)>","<android.app.Activity: boolean showDialog(int,android.os.Bundle)>"
"<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>","<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>"
"<java.lang.invoke.MethodHandleInfo: boolean refKindIsField(int)>","<java.lang.invoke.MethodHandleInfo: boolean refKindIsField(int)>"
"<android.app.ActionBar: boolean isShowing()>","<android.app.ActionBar: boolean isShowing()>"
"<android.icu.util.ULocale: int compareTo(android.icu.util.ULocale)>","<android.icu.util.ULocale: int compareTo(android.icu.util.ULocale)>"
"<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>","<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>"
"<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>","<android.content.pm.PackageManager: void clearPackagePreferredActivities(java.lang.String)>"
"<java.time.OffsetDateTime: int getNano()>","<java.time.OffsetDateTime: int getNano()>"
"<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,java.lang.CharSequence)>","<android.content.pm.PackageInstaller: void updateSessionAppLabel(int,java.lang.CharSequence)>"
"<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.ClassLoader: java.lang.ClassLoader getParent()>","<java.lang.ClassLoader: java.lang.ClassLoader getParent()>"
"<android.provider.Settings$Secure: void <init>()>","<android.provider.Settings$Secure: void <init>()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setDisallowMetered(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setDisallowMetered(boolean)>"
"<android.media.MediaPlayer: void setAudioStreamType(int)>","<android.media.MediaPlayer: void setAudioStreamType(int)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>","<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>"
"<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>","<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>"
"<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>","<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>"
"<android.os.Parcel: int dataCapacity()>","<android.os.Parcel: int dataCapacity()>"
"<java.lang.Character: int codePointAt(char[],int,int)>","<java.lang.Character: int codePointAt(char[],int,int)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeNameResId(int)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeNameResId(int)>"
"<java.lang.invoke.VarHandle: java.lang.Object compareAndExchangeAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object compareAndExchangeAcquire(java.lang.Object[])>"
"<java.util.stream.Stream: java.lang.Object[] toArray()>","<java.util.stream.Stream: java.lang.Object[] toArray()>"
"<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>","<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>"
"<java.lang.Thread: void setDaemon(boolean)>","<java.lang.Thread: void setDaemon(boolean)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>"
"<android.content.res.Configuration: boolean isNightModeActive()>","<android.content.res.Configuration: boolean isNightModeActive()>"
"<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)>"
"<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.app.Activity: void unregisterForContextMenu(android.view.View)>","<android.app.Activity: void unregisterForContextMenu(android.view.View)>"
"<java.lang.ThreadGroup: int getMaxPriority()>","<java.lang.ThreadGroup: int getMaxPriority()>"
"<android.content.Intent: android.content.Intent setPackage(java.lang.String)>","<android.content.Intent: android.content.Intent setPackage(java.lang.String)>"
"<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>","<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>"
"<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>","<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>"
"<java.util.Arrays: int compare(int[],int[])>","<java.util.Arrays: int compare(int[],int[])>"
"<java.util.Optional: void ifPresentOrElse(java.util.function.Consumer,java.lang.Runnable)>","<java.util.Optional: void ifPresentOrElse(java.util.function.Consumer,java.lang.Runnable)>"
"<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>","<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>"
"<java.util.Optional: boolean isEmpty()>","<java.util.Optional: boolean isEmpty()>"
"<android.view.WindowInsetsAnimation$Callback: void onEnd(android.view.WindowInsetsAnimation)>","<android.view.WindowInsetsAnimation$Callback: void onEnd(android.view.WindowInsetsAnimation)>"
"<java.net.InetSocketAddress: boolean equals(java.lang.Object)>","<java.net.InetSocketAddress: boolean equals(java.lang.Object)>"
"<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>","<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>"
"<java.nio.channels.SeekableByteChannel: long size()>","<java.nio.channels.SeekableByteChannel: long size()>"
"<android.content.pm.VersionedPackage: int getVersionCode()>","<android.content.pm.VersionedPackage: int getVersionCode()>"
"<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)>","<android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setComposingText(int,java.lang.CharSequence)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setComposingText(int,java.lang.CharSequence)>"
"<android.transition.Transition: android.transition.Transition setDuration(long)>","<android.transition.Transition: android.transition.Transition setDuration(long)>"
"<android.view.accessibility.AccessibilityEvent: int getRecordCount()>","<android.view.accessibility.AccessibilityEvent: int getRecordCount()>"
"<android.telephony.TelephonyManager: java.util.List getEquivalentHomePlmns()>","<android.telephony.TelephonyManager: java.util.List getEquivalentHomePlmns()>"
"<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>","<android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()>"
"<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>","<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>"
"<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation valueOf(java.lang.String)>","<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation valueOf(java.lang.String)>"
"<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)>","<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)>"
"<java.lang.Double: double sum(double,double)>","<java.lang.Double: double sum(double,double)>"
"<android.view.MotionEvent: int findPointerIndex(int)>","<android.view.MotionEvent: int findPointerIndex(int)>"
"<java.util.Arrays: int binarySearch(byte[],byte)>","<java.util.Arrays: int binarySearch(byte[],byte)>"
"<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.content.pm.PackageInstaller$Session: void addChildSessionId(int)>","<android.content.pm.PackageInstaller$Session: void addChildSessionId(int)>"
"<android.media.MediaDescription: java.lang.String toString()>","<android.media.MediaDescription: java.lang.String toString()>"
"<android.app.Activity: android.view.View onCreatePanelView(int)>","<android.app.Activity: android.view.View onCreatePanelView(int)>"
"<java.lang.ArrayIndexOutOfBoundsException: void <init>()>","<java.lang.ArrayIndexOutOfBoundsException: void <init>()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>"
"<android.widget.RelativeLayout$LayoutParams: void addRule(int)>","<android.widget.RelativeLayout$LayoutParams: void addRule(int)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromSplit(android.content.Context,java.lang.String)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromSplit(android.content.Context,java.lang.String)>"
"<android.media.session.MediaSessionManager: java.lang.String getMediaKeyEventSessionPackageName()>","<android.media.session.MediaSessionManager: java.lang.String getMediaKeyEventSessionPackageName()>"
"<android.transition.Transition: android.transition.Transition excludeChildren(int,boolean)>","<android.transition.Transition: android.transition.Transition excludeChildren(int,boolean)>"
"<android.view.textclassifier.TextClassification: void <clinit>()>","<android.view.textclassifier.TextClassification: void <clinit>()>"
"<java.util.DoubleSummaryStatistics: double getMax()>","<java.util.DoubleSummaryStatistics: double getMax()>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>"
"<android.view.displayhash.DisplayHash: void <init>()>","<android.view.displayhash.DisplayHash: void <init>()>"
"<android.net.RouteInfo: void <clinit>()>","<android.net.RouteInfo: void <clinit>()>"
"<java.util.Arrays: int compare(char[],int,int,char[],int,int)>","<java.util.Arrays: int compare(char[],int,int,char[],int,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setReorderingAllowed(boolean)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setReorderingAllowed(boolean)>"
"<java.util.Hashtable: java.util.Enumeration keys()>","<java.util.Hashtable: java.util.Enumeration keys()>"
"<android.graphics.Paint: boolean equalsForTextMeasurement(android.graphics.Paint)>","<android.graphics.Paint: boolean equalsForTextMeasurement(android.graphics.Paint)>"
"<android.widget.TextView: void setTextCursorDrawable(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextCursorDrawable(android.graphics.drawable.Drawable)>"
"<java.io.PrintWriter: void flush()>","<java.io.PrintWriter: void flush()>"
"<java.lang.reflect.TypeVariable: java.lang.String getName()>","<java.lang.reflect.TypeVariable: java.lang.String getName()>"
"<android.app.ActivityManager: void clearWatchHeapLimit()>","<android.app.ActivityManager: void clearWatchHeapLimit()>"
"<android.content.Loader: void abandon()>","<android.content.Loader: void abandon()>"
"<android.telephony.PhoneStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>","<android.telephony.PhoneStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>"
"<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)>","<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)>"
"<java.util.Collection: java.lang.Object[] toArray(java.util.function.IntFunction)>","<java.util.Collection: java.lang.Object[] toArray(java.util.function.IntFunction)>"
"<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>","<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>"
"<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>","<android.util.AttributeSet: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>"
"<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)>","<android.telephony.TelephonyManager: java.lang.String getManufacturerCode(int)>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)>","<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageManager$ComponentEnabledSetting: void writeToParcel(android.os.Parcel,int)>"
"<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>","<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>"
"<android.app.PictureInPictureUiState: int describeContents()>","<android.app.PictureInPictureUiState: int describeContents()>"
"<android.graphics.Color: boolean isSrgb(long)>","<android.graphics.Color: boolean isSrgb(long)>"
"<android.content.pm.FeatureGroupInfo: int describeContents()>","<android.content.pm.FeatureGroupInfo: int describeContents()>"
"<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.nio.channels.FileChannel$MapMode: void <init>()>","<java.nio.channels.FileChannel$MapMode: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>"
"<android.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setNavigationIcon(android.graphics.drawable.Drawable)>"
"<java.net.Socket: void setTrafficClass(int)>","<java.net.Socket: void setTrafficClass(int)>"
"<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()>","<android.hardware.display.VirtualDisplay: android.view.Surface getSurface()>"
"<android.view.AttachedSurfaceControl: int getBufferTransformHint()>","<android.view.AttachedSurfaceControl: int getBufferTransformHint()>"
"<android.view.Window: void takeSurface(android.view.SurfaceHolder$Callback2)>","<android.view.Window: void takeSurface(android.view.SurfaceHolder$Callback2)>"
"<android.net.ProxyInfo: boolean isValid()>","<android.net.ProxyInfo: boolean isValid()>"
"<android.widget.TextView: int getTotalPaddingBottom()>","<android.widget.TextView: int getTotalPaddingBottom()>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)>"
"<android.os.Parcel: void writeBlob(byte[])>","<android.os.Parcel: void writeBlob(byte[])>"
"<android.graphics.text.MeasuredText$Builder: void <init>(android.graphics.text.MeasuredText)>","<android.graphics.text.MeasuredText$Builder: void <init>(android.graphics.text.MeasuredText)>"
"<android.app.RemoteAction: int hashCode()>","<android.app.RemoteAction: int hashCode()>"
"<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>","<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View,int)>"
"<java.text.FieldPosition: boolean equals(java.lang.Object)>","<java.text.FieldPosition: boolean equals(java.lang.Object)>"
"<android.view.ActionProvider: void <init>(android.content.Context)>","<android.view.ActionProvider: void <init>(android.content.Context)>"
"<android.media.AudioDeviceInfo: boolean isSource()>","<android.media.AudioDeviceInfo: boolean isSource()>"
"<java.lang.Long: long parseUnsignedLong(java.lang.String)>","<java.lang.Long: long parseUnsignedLong(java.lang.String)>"
"<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>","<android.os.BaseBundle: boolean[] getBooleanArray(java.lang.String)>"
"<java.util.Arrays: int compareUnsigned(long[],int,int,long[],int,int)>","<java.util.Arrays: int compareUnsigned(long[],int,int,long[],int,int)>"
"<android.app.Person: java.lang.String getUri()>","<android.app.Person: java.lang.String getUri()>"
"<java.time.Duration: int toMillisPart()>","<java.time.Duration: int toMillisPart()>"
"<android.content.BroadcastReceiver: void abortBroadcast()>","<android.content.BroadcastReceiver: void abortBroadcast()>"
"<java.net.NetworkInterface: void <init>()>","<java.net.NetworkInterface: void <init>()>"
"<android.media.session.MediaController$Callback: void onSessionDestroyed()>","<android.media.session.MediaController$Callback: void onSessionDestroyed()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setDescription(java.lang.CharSequence)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setDescription(java.lang.CharSequence)>"
"<android.content.Context: void revokeUriPermission(android.net.Uri,int)>","<android.content.Context: void revokeUriPermission(android.net.Uri,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)>"
"<java.time.ZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.ZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.nio.channels.NetworkChannel: java.util.Set supportedOptions()>","<java.nio.channels.NetworkChannel: java.util.Set supportedOptions()>"
"<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>","<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>"
"<java.time.OffsetTime: int compareTo(java.lang.Object)>","<java.time.OffsetTime: int compareTo(java.lang.Object)>"
"<android.media.AudioManager$OnAudioFocusChangeListener: void onAudioFocusChange(int)>","<android.media.AudioManager$OnAudioFocusChangeListener: void onAudioFocusChange(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>"
"<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>","<java.lang.reflect.Array: double getDouble(java.lang.Object,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>"
"<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>","<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>"
"<android.icu.util.ULocale: java.lang.String getCountry()>","<android.icu.util.ULocale: java.lang.String getCountry()>"
"<java.lang.String: int lastIndexOf(int,int)>","<java.lang.String: int lastIndexOf(int,int)>"
"<android.view.ActionProvider: boolean onPerformDefaultAction()>","<android.view.ActionProvider: boolean onPerformDefaultAction()>"
"<java.io.Writer: void write(java.lang.String)>","<java.io.Writer: void write(java.lang.String)>"
"<java.util.Arrays: int binarySearch(float[],int,int,float)>","<java.util.Arrays: int binarySearch(float[],int,int,float)>"
"<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>","<android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)>"
"<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)>","<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)>"
"<java.util.ArrayList: boolean remove(java.lang.Object)>","<java.util.ArrayList: boolean remove(java.lang.Object)>"
"<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()>","<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()>"
"<android.media.session.MediaSession$Callback: void onPrepareFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPrepareFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>","<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>"
"<android.media.MediaDrm$LogMessage: long getTimestampMillis()>","<android.media.MediaDrm$LogMessage: long getTimestampMillis()>"
"<android.graphics.drawable.ColorDrawable: void <init>(int)>","<android.graphics.drawable.ColorDrawable: void <init>(int)>"
"<java.util.stream.IntStream: java.util.stream.IntStream$Builder builder()>","<java.util.stream.IntStream: java.util.stream.IntStream$Builder builder()>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>"
"<android.content.Loader: boolean isStarted()>","<android.content.Loader: boolean isStarted()>"
"<android.transition.Transition: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)>","<android.transition.Transition: boolean isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)>"
"<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String,android.os.Bundle)>"
"<android.content.pm.PermissionInfo: void <clinit>()>","<android.content.pm.PermissionInfo: void <clinit>()>"
"<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>","<android.view.ViewGroup$MarginLayoutParams: int getLayoutDirection()>"
"<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()>","<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()>"
"<android.view.ViewGroup: void dispatchFinishTemporaryDetach()>","<android.view.ViewGroup: void dispatchFinishTemporaryDetach()>"
"<android.media.MediaDrm: int getMaxSecurityLevel()>","<android.media.MediaDrm: int getMaxSecurityLevel()>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewSizes()>"
"<java.util.Date: long UTC(int,int,int,int,int,int)>","<java.util.Date: long UTC(int,int,int,int,int,int)>"
"<android.graphics.Paint: float measureText(char[],int,int)>","<android.graphics.Paint: float measureText(char[],int,int)>"
"<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>","<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>"
"<java.util.Spliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfPrimitive: void forEachRemaining(java.lang.Object)>"
"<java.time.chrono.Era: int get(java.time.temporal.TemporalField)>","<java.time.chrono.Era: int get(java.time.temporal.TemporalField)>"
"<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>","<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>"
"<android.widget.RelativeLayout: boolean shouldDelayChildPressedState()>","<android.widget.RelativeLayout: boolean shouldDelayChildPressedState()>"
"<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)>","<android.os.ParcelFileDescriptor: void closeWithError(java.lang.String)>"
"<java.util.NavigableMap: java.lang.Object floorKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object floorKey(java.lang.Object)>"
"<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>"
"<java.time.Period: java.time.Period minus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.Period minus(java.time.temporal.TemporalAmount)>"
"<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>","<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>"
"<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>","<android.view.ViewTreeObserver: void addOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>"
"<java.io.InputStream: long skip(long)>","<java.io.InputStream: long skip(long)>"
"<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>"
"<android.net.ProxyInfo: void <clinit>()>","<android.net.ProxyInfo: void <clinit>()>"
"<android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()>","<android.widget.TextView: android.view.textclassifier.TextClassifier getTextClassifier()>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo focusSearch(int)>"
"<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()>","<android.view.SurfaceView: android.view.SurfaceControl getSurfaceControl()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(int)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndSet(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndSet(java.lang.Object[])>"
"<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>","<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)>"
"<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>","<android.app.Fragment: void onViewStateRestored(android.os.Bundle)>"
"<java.time.zone.ZoneOffsetTransition: java.time.zone.ZoneOffsetTransition of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>","<java.time.zone.ZoneOffsetTransition: java.time.zone.ZoneOffsetTransition of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata build()>"
"<android.view.accessibility.AccessibilityNodeInfo: void recycle()>","<android.view.accessibility.AccessibilityNodeInfo: void recycle()>"
"<android.graphics.Bitmap: void setColorSpace(android.graphics.ColorSpace)>","<android.graphics.Bitmap: void setColorSpace(android.graphics.ColorSpace)>"
"<java.util.regex.MatchResult: int groupCount()>","<java.util.regex.MatchResult: int groupCount()>"
"<android.view.View: void resetPivot()>","<android.view.View: void resetPivot()>"
"<java.util.concurrent.ConcurrentLinkedQueue: int size()>","<java.util.concurrent.ConcurrentLinkedQueue: int size()>"
"<android.media.VolumeProvider: int getMaxVolume()>","<android.media.VolumeProvider: int getMaxVolume()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>"
"<java.time.Period: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.Period: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<java.util.stream.DoubleStream: boolean allMatch(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: boolean allMatch(java.util.function.DoublePredicate)>"
"<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>","<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>"
"<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)>","<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)>"
"<android.os.Parcel: void writeMap(java.util.Map)>","<android.os.Parcel: void writeMap(java.util.Map)>"
"<java.nio.FloatBuffer: int hashCode()>","<java.nio.FloatBuffer: int hashCode()>"
"<java.util.List: java.util.List of(java.lang.Object[])>","<java.util.List: java.util.List of(java.lang.Object[])>"
"<android.telephony.TelephonyManager: boolean setVoiceMailNumber(java.lang.String,java.lang.String)>","<android.telephony.TelephonyManager: boolean setVoiceMailNumber(java.lang.String,java.lang.String)>"
"<android.telecom.PhoneAccountHandle: java.lang.String toString()>","<android.telecom.PhoneAccountHandle: java.lang.String toString()>"
"<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)>"
"<java.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object[])>","<java.lang.invoke.MethodHandle: java.lang.Object invoke(java.lang.Object[])>"
"<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>","<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator,boolean)>"
"<android.widget.TextView: void setInputType(int)>","<android.widget.TextView: void setInputType(int)>"
"<android.app.VoiceInteractor$Prompt: int describeContents()>","<android.app.VoiceInteractor$Prompt: int describeContents()>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.RectF)>","<android.graphics.Canvas: boolean quickReject(android.graphics.RectF)>"
"<android.widget.MediaController: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.MediaController: java.lang.CharSequence getAccessibilityClassName()>"
"<android.view.View: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>","<android.view.View: void onCreateVirtualViewTranslationRequests(long[],int[],java.util.function.Consumer)>"
"<android.media.Spatializer: int getImmersiveAudioLevel()>","<android.media.Spatializer: int getImmersiveAudioLevel()>"
"<java.time.ZonedDateTime: void <init>()>","<java.time.ZonedDateTime: void <init>()>"
"<java.lang.String: int codePointCount(int,int)>","<java.lang.String: int codePointCount(int,int)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.Math: int addExact(int,int)>","<java.lang.Math: int addExact(int,int)>"
"<android.hardware.Camera$Parameters: int getPreviewFormat()>","<android.hardware.Camera$Parameters: int getPreviewFormat()>"
"<android.hardware.camera2.CaptureResult$Key: int hashCode()>","<android.hardware.camera2.CaptureResult$Key: int hashCode()>"
"<android.widget.Toolbar: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.graphics.Insets: android.graphics.Insets min(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets min(android.graphics.Insets,android.graphics.Insets)>"
"<java.util.function.LongConsumer: void accept(long)>","<java.util.function.LongConsumer: void accept(long)>"
"<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit[] values()>","<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit[] values()>"
"<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>","<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>"
"<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>","<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>"
"<android.app.ActionBar: void setHideOnContentScrollEnabled(boolean)>","<android.app.ActionBar: void setHideOnContentScrollEnabled(boolean)>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder clearCapabilities()>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder clearCapabilities()>"
"<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.VirtualMachineError: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.AbstractMap: void clear()>","<java.util.AbstractMap: void clear()>"
"<android.content.Loader: void stopLoading()>","<android.content.Loader: void stopLoading()>"
"<java.net.SocketImpl: java.io.InputStream getInputStream()>","<java.net.SocketImpl: java.io.InputStream getInputStream()>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<java.lang.invoke.MethodHandleInfo: int getModifiers()>","<java.lang.invoke.MethodHandleInfo: int getModifiers()>"
"<java.time.LocalDate: java.time.LocalDate now(java.time.ZoneId)>","<java.time.LocalDate: java.time.LocalDate now(java.time.ZoneId)>"
"<java.time.OffsetTime: java.time.OffsetTime withHour(int)>","<java.time.OffsetTime: java.time.OffsetTime withHour(int)>"
"<android.telephony.TelephonyManager: void switchMultiSimConfig(int)>","<android.telephony.TelephonyManager: void switchMultiSimConfig(int)>"
"<android.util.SizeF: java.lang.String toString()>","<android.util.SizeF: java.lang.String toString()>"
"<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>","<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>"
"<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>","<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(java.lang.String)>"
"<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>","<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>"
"<android.os.Messenger: void <init>(android.os.IBinder)>","<android.os.Messenger: void <init>(android.os.IBinder)>"
"<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])>","<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])>"
"<android.widget.MediaController: void onFinishInflate()>","<android.widget.MediaController: void onFinishInflate()>"
"<android.content.ContentResolver$MimeTypeInfo: void <init>()>","<android.content.ContentResolver$MimeTypeInfo: void <init>()>"
"<android.graphics.fonts.FontVariationAxis: int hashCode()>","<android.graphics.fonts.FontVariationAxis: int hashCode()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.concurrent.Future: boolean cancel(boolean)>","<java.util.concurrent.Future: boolean cancel(boolean)>"
"<android.graphics.Path: void moveTo(float,float)>","<android.graphics.Path: void moveTo(float,float)>"
"<java.lang.Boolean: boolean parseBoolean(java.lang.String)>","<java.lang.Boolean: boolean parseBoolean(java.lang.String)>"
"<android.widget.TextView: int getHyphenationFrequency()>","<android.widget.TextView: int getHyphenationFrequency()>"
"<android.graphics.Path: void close()>","<android.graphics.Path: void close()>"
"<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int,int)>","<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int,int)>"
"<android.app.Activity: void onWindowFocusChanged(boolean)>","<android.app.Activity: void onWindowFocusChanged(boolean)>"
"<android.app.Activity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>","<android.app.Activity: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>"
"<android.hardware.Camera$Size: boolean equals(java.lang.Object)>","<android.hardware.Camera$Size: boolean equals(java.lang.Object)>"
"<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>","<java.nio.file.spi.FileSystemProvider: void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>"
"<java.lang.SecurityManager: java.lang.Object getSecurityContext()>","<java.lang.SecurityManager: java.lang.Object getSecurityContext()>"
"<java.time.LocalTime: int hashCode()>","<java.time.LocalTime: int hashCode()>"
"<android.media.session.PlaybackState: long getPosition()>","<android.media.session.PlaybackState: long getPosition()>"
"<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>","<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>"
"<android.content.res.ColorStateList: int getColorForState(int[],int)>","<android.content.res.ColorStateList: int getColorForState(int[],int)>"
"<android.graphics.Insets: java.lang.String toString()>","<android.graphics.Insets: java.lang.String toString()>"
"<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>","<android.content.ClipboardManager: android.content.ClipDescription getPrimaryClipDescription()>"
"<android.view.ViewGroup: void scheduleLayoutAnimation()>","<android.view.ViewGroup: void scheduleLayoutAnimation()>"
"<java.lang.ref.WeakReference: void <init>(java.lang.Object)>","<java.lang.ref.WeakReference: void <init>(java.lang.Object)>"
"<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>","<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoLocalDate: java.time.chrono.Chronology getChronology()>"
"<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: boolean isAnnotationPresent(java.lang.Class)>"
"<android.content.ClipData: java.lang.String toString()>","<android.content.ClipData: java.lang.String toString()>"
"<android.content.ContentProvider: void restoreCallingIdentity(android.content.ContentProvider$CallingIdentity)>","<android.content.ContentProvider: void restoreCallingIdentity(android.content.ContentProvider$CallingIdentity)>"
"<android.graphics.Paint: float getTextSize()>","<android.graphics.Paint: float getTextSize()>"
"<android.os.VibrationAttributes$Builder: void <init>()>","<android.os.VibrationAttributes$Builder: void <init>()>"
"<java.lang.Byte: java.lang.String toString(byte)>","<java.lang.Byte: java.lang.String toString(byte)>"
"<android.content.Intent: short getShortExtra(java.lang.String,short)>","<android.content.Intent: short getShortExtra(java.lang.String,short)>"
"<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>","<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>"
"<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>","<android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)>"
"<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>","<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>"
"<java.util.MissingResourceException: java.lang.String getClassName()>","<java.util.MissingResourceException: java.lang.String getClassName()>"
"<android.hardware.camera2.CaptureRequest$Builder: void <init>()>","<android.hardware.camera2.CaptureRequest$Builder: void <init>()>"
"<android.graphics.Path$Direction: void <init>(java.lang.String,int)>","<android.graphics.Path$Direction: void <init>(java.lang.String,int)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>"
"<android.view.translation.ViewTranslationCallback: boolean onClearTranslation(android.view.View)>","<android.view.translation.ViewTranslationCallback: boolean onClearTranslation(android.view.View)>"
"<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void uninstall(android.content.pm.VersionedPackage,android.content.IntentSender)>"
"<java.net.URLConnection: int getConnectTimeout()>","<java.net.URLConnection: int getConnectTimeout()>"
"<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>","<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>"
"<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>","<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setSystemFallback(java.lang.String)>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setSystemFallback(java.lang.String)>"
"<java.nio.CharBuffer: java.util.stream.IntStream chars()>","<java.nio.CharBuffer: java.util.stream.IntStream chars()>"
"<android.transition.Transition: android.transition.Transition clone()>","<android.transition.Transition: android.transition.Transition clone()>"
"<java.nio.CharBuffer: java.nio.CharBuffer append(char)>","<java.nio.CharBuffer: java.nio.CharBuffer append(char)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace)>"
"<java.util.stream.LongStream: boolean allMatch(java.util.function.LongPredicate)>","<java.util.stream.LongStream: boolean allMatch(java.util.function.LongPredicate)>"
"<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>","<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>"
"<android.widget.Adapter: java.lang.CharSequence[] getAutofillOptions()>","<android.widget.Adapter: java.lang.CharSequence[] getAutofillOptions()>"
"<android.widget.AbsListView: void setAdapter(android.widget.Adapter)>","<android.widget.AbsListView: void setAdapter(android.widget.Adapter)>"
"<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>","<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>"
"<java.util.Arrays: int binarySearch(char[],int,int,char)>","<java.util.Arrays: int binarySearch(char[],int,int,char)>"
"<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>","<java.util.NavigableMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>"
"<android.hardware.camera2.CameraDevice: void setCameraAudioRestriction(int)>","<android.hardware.camera2.CameraDevice: void setCameraAudioRestriction(int)>"
"<android.net.Network: java.net.URLConnection openConnection(java.net.URL)>","<android.net.Network: java.net.URLConnection openConnection(java.net.URL)>"
"<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint)>"
"<android.graphics.Color: int rgb(int,int,int)>","<android.graphics.Color: int rgb(int,int,int)>"
"<java.lang.invoke.VarHandle: boolean compareAndSet(java.lang.Object[])>","<java.lang.invoke.VarHandle: boolean compareAndSet(java.lang.Object[])>"
"<android.hardware.camera2.CaptureResult: java.util.List getKeys()>","<android.hardware.camera2.CaptureResult: java.util.List getKeys()>"
"<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.res.Resources: java.lang.String[] getStringArray(int)>","<android.content.res.Resources: java.lang.String[] getStringArray(int)>"
"<android.graphics.Canvas: void drawARGB(int,int,int,int)>","<android.graphics.Canvas: void drawARGB(int,int,int,int)>"
"<java.time.LocalDate: java.time.LocalDate minusDays(long)>","<java.time.LocalDate: java.time.LocalDate minusDays(long)>"
"<android.text.Layout: android.text.Layout$Alignment getAlignment()>","<android.text.Layout: android.text.Layout$Alignment getAlignment()>"
"<android.view.animation.Animation: void initialize(int,int,int,int)>","<android.view.animation.Animation: void initialize(int,int,int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRangesFor(android.util.Size)>"
"<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchFreezeSelfOnly(android.util.SparseArray)>"
"<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>","<android.graphics.Paint: void setFontFeatureSettings(java.lang.String)>"
"<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>","<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>"
"<android.os.VibrationAttributes: java.lang.String toString()>","<android.os.VibrationAttributes: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)>"
"<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>","<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>"
"<android.text.Spanned: int getSpanFlags(java.lang.Object)>","<android.text.Spanned: int getSpanFlags(java.lang.Object)>"
"<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>","<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>"
"<android.view.textclassifier.TextClassification: void <init>()>","<android.view.textclassifier.TextClassification: void <init>()>"
"<android.view.Choreographer$FrameData: long getFrameTimeNanos()>","<android.view.Choreographer$FrameData: long getFrameTimeNanos()>"
"<android.media.ImageReader$Builder: android.media.ImageReader build()>","<android.media.ImageReader$Builder: android.media.ImageReader build()>"
"<android.content.Context: int getWallpaperDesiredMinimumWidth()>","<android.content.Context: int getWallpaperDesiredMinimumWidth()>"
"<android.content.Context: void revokeSelfPermissionOnKill(java.lang.String)>","<android.content.Context: void revokeSelfPermissionOnKill(java.lang.String)>"
"<java.nio.FloatBuffer: java.nio.ByteOrder order()>","<java.nio.FloatBuffer: java.nio.ByteOrder order()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>"
"<java.time.Instant: java.time.Instant minusMillis(long)>","<java.time.Instant: java.time.Instant minusMillis(long)>"
"<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int)>","<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int)>"
"<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>","<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)>"
"<android.view.View: int getMeasuredHeight()>","<android.view.View: int getMeasuredHeight()>"
"<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()>","<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()>"
"<android.view.SurfaceView: void dispatchDraw(android.graphics.Canvas)>","<android.view.SurfaceView: void dispatchDraw(android.graphics.Canvas)>"
"<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>","<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>"
"<android.graphics.Canvas: void drawColor(long,android.graphics.BlendMode)>","<android.graphics.Canvas: void drawColor(long,android.graphics.BlendMode)>"
"<android.view.Window$Callback: void onDetachedFromWindow()>","<android.view.Window$Callback: void onDetachedFromWindow()>"
"<android.content.pm.ModuleInfo: void <init>()>","<android.content.pm.ModuleInfo: void <init>()>"
"<android.app.Fragment: void onDestroy()>","<android.app.Fragment: void onDestroy()>"
"<android.os.PersistableBundle: void <clinit>()>","<android.os.PersistableBundle: void <clinit>()>"
"<java.net.DatagramSocket: void <init>()>","<java.net.DatagramSocket: void <init>()>"
"<android.app.Activity: boolean isActivityTransitionRunning()>","<android.app.Activity: boolean isActivityTransitionRunning()>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.AbstractSelector openSelector()>"
"<java.lang.Float: java.lang.String toHexString(float)>","<java.lang.Float: java.lang.String toHexString(float)>"
"<java.lang.Math: long multiplyHigh(long,long)>","<java.lang.Math: long multiplyHigh(long,long)>"
"<android.widget.EditText: boolean getDefaultEditable()>","<android.widget.EditText: boolean getDefaultEditable()>"
"<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()>","<android.telephony.TelephonyManager: android.telephony.SignalStrength getSignalStrength()>"
"<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setVisible(int,boolean)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setVisible(int,boolean)>"
"<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>","<android.view.WindowInsets: android.view.DisplayCutout getDisplayCutout()>"
"<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.view.animation.Animation$Description: void <init>()>","<android.view.animation.Animation$Description: void <init>()>"
"<android.graphics.Paint: int getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)>","<android.graphics.Paint: int getOffsetForAdvance(java.lang.CharSequence,int,int,int,int,boolean,float)>"
"<android.media.AudioManager: int getMode()>","<android.media.AudioManager: int getMode()>"
"<android.os.OutcomeReceiver: void onResult(java.lang.Object)>","<android.os.OutcomeReceiver: void onResult(java.lang.Object)>"
"<java.lang.reflect.Type: java.lang.String getTypeName()>","<java.lang.reflect.Type: java.lang.String getTypeName()>"
"<android.media.AudioRecord$MetricsConstants: void <init>()>","<android.media.AudioRecord$MetricsConstants: void <init>()>"
"<android.os.Process: long getStartRequestedUptimeMillis()>","<android.os.Process: long getStartRequestedUptimeMillis()>"
"<android.media.MediaMetadata: void writeToParcel(android.os.Parcel,int)>","<android.media.MediaMetadata: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<android.view.Window: void addFlags(int)>","<android.view.Window: void addFlags(int)>"
"<android.util.ArrayMap: boolean containsAll(java.util.Collection)>","<android.util.ArrayMap: boolean containsAll(java.util.Collection)>"
"<android.view.inputmethod.EditorBoundsInfo: int hashCode()>","<android.view.inputmethod.EditorBoundsInfo: int hashCode()>"
"<java.time.Period: java.time.Period withMonths(int)>","<java.time.Period: java.time.Period withMonths(int)>"
"<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)>"
"<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>","<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>"
"<android.view.View: void setVerticalScrollbarPosition(int)>","<android.view.View: void setVerticalScrollbarPosition(int)>"
"<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[])>"
"<android.view.accessibility.AccessibilityEvent: void setEventType(int)>","<android.view.accessibility.AccessibilityEvent: void setEventType(int)>"
"<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)>","<android.media.MediaPlayer: void setDataSource(android.content.res.AssetFileDescriptor)>"
"<java.time.OffsetTime: java.time.OffsetTime withNano(int)>","<java.time.OffsetTime: java.time.OffsetTime withNano(int)>"
"<android.widget.TextView: void setTextAppearance(android.content.Context,int)>","<android.widget.TextView: void setTextAppearance(android.content.Context,int)>"
"<android.media.MediaDataSource: long getSize()>","<android.media.MediaDataSource: long getSize()>"
"<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>","<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setModelName(java.lang.String)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setModelName(java.lang.String)>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder putLocale(android.icu.util.ULocale,float)>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder putLocale(android.icu.util.ULocale,float)>"
"<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>","<android.content.ContentResolver: void takePersistableUriPermission(android.net.Uri,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)>"
"<javax.net.SocketFactory: javax.net.SocketFactory getDefault()>","<javax.net.SocketFactory: javax.net.SocketFactory getDefault()>"
"<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>","<java.nio.file.FileSystem: java.nio.file.spi.FileSystemProvider provider()>"
"<android.view.View: android.graphics.drawable.Drawable getBackground()>","<android.view.View: android.graphics.drawable.Drawable getBackground()>"
"<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.content.ContextWrapper: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.ContextWrapper: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.os.UserHandle: int hashCode()>","<android.os.UserHandle: int hashCode()>"
"<android.widget.TextView: void setTextScaleX(float)>","<android.widget.TextView: void setTextScaleX(float)>"
"<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>","<android.view.ContextThemeWrapper: android.content.res.Resources getResources()>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],double)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],double)>"
"<java.nio.file.LinkOption: java.nio.file.LinkOption valueOf(java.lang.String)>","<java.nio.file.LinkOption: java.nio.file.LinkOption valueOf(java.lang.String)>"
"<android.telephony.TelephonyDisplayInfo: boolean equals(java.lang.Object)>","<android.telephony.TelephonyDisplayInfo: boolean equals(java.lang.Object)>"
"<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)>"
"<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>","<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>"
"<android.database.sqlite.SQLiteDatabase$CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>","<android.database.sqlite.SQLiteDatabase$CursorFactory: android.database.Cursor newCursor(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)>"
"<java.util.Arrays: void fill(int[],int,int,int)>","<java.util.Arrays: void fill(int[],int,int,int)>"
"<android.hardware.display.DisplayManager: int getMatchContentFrameRateUserPreference()>","<android.hardware.display.DisplayManager: int getMatchContentFrameRateUserPreference()>"
"<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>","<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>"
"<java.time.Instant: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View: float getLeftFadingEdgeStrength()>","<android.view.View: float getLeftFadingEdgeStrength()>"
"<android.telephony.ims.ImsReasonInfo: int getExtraCode()>","<android.telephony.ims.ImsReasonInfo: int getExtraCode()>"
"<android.hardware.SyncFence: long getSignalTime()>","<android.hardware.SyncFence: long getSignalTime()>"
"<android.os.Parcel: void writeSizeF(android.util.SizeF)>","<android.os.Parcel: void writeSizeF(android.util.SizeF)>"
"<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>","<android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])>"
"<android.view.Display: int getOrientation()>","<android.view.Display: int getOrientation()>"
"<android.content.Loader: java.lang.String toString()>","<android.content.Loader: java.lang.String toString()>"
"<android.os.Process: boolean isApplicationUid(int)>","<android.os.Process: boolean isApplicationUid(int)>"
"<android.hardware.camera2.CameraAccessException: void <init>(int)>","<android.hardware.camera2.CameraAccessException: void <init>(int)>"
"<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>","<android.content.ContentResolver: android.net.Uri canonicalize(android.net.Uri)>"
"<android.os.Parcel: double readDouble()>","<android.os.Parcel: double readDouble()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordEndIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordEndIndex(int)>"
"<android.view.textclassifier.TextClassification: android.content.Intent getIntent()>","<android.view.textclassifier.TextClassification: android.content.Intent getIntent()>"
"<android.view.inputmethod.TextAttribute: java.util.List getTextConversionSuggestions()>","<android.view.inputmethod.TextAttribute: java.util.List getTextConversionSuggestions()>"
"<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)>","<android.telephony.TelephonyManager: android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)>"
"<android.graphics.RectF: void round(android.graphics.Rect)>","<android.graphics.RectF: void round(android.graphics.Rect)>"
"<android.graphics.Rect: void readFromParcel(android.os.Parcel)>","<android.graphics.Rect: void readFromParcel(android.os.Parcel)>"
"<java.util.stream.Stream: java.lang.Object collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>","<java.util.stream.Stream: java.lang.Object collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer)>"
"<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>","<android.view.accessibility.AccessibilityEvent: int getMovementGranularity()>"
"<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>","<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>"
"<java.lang.Boolean: void <init>(java.lang.String)>","<java.lang.Boolean: void <init>(java.lang.String)>"
"<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>","<java.net.URLConnection: java.lang.String getHeaderFieldKey(int)>"
"<java.lang.Character: boolean isSurrogate(char)>","<java.lang.Character: boolean isSurrogate(char)>"
"<android.telephony.ServiceState: int getState()>","<android.telephony.ServiceState: int getState()>"
"<android.app.Activity: void setMediaController(android.media.session.MediaController)>","<android.app.Activity: void setMediaController(android.media.session.MediaController)>"
"<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>","<android.view.View: android.graphics.BlendMode getForegroundTintBlendMode()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintMode(android.graphics.PorterDuff$Mode)>"
"<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.LayerDrawable: boolean setVisible(boolean,boolean)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes build()>"
"<java.lang.Double: int hashCode(double)>","<java.lang.Double: int hashCode(double)>"
"<android.telephony.TelephonyCallback$CarrierNetworkListener: void onCarrierNetworkChange(boolean)>","<android.telephony.TelephonyCallback$CarrierNetworkListener: void onCarrierNetworkChange(boolean)>"
"<java.time.zone.ZoneOffsetTransition: void <init>()>","<java.time.zone.ZoneOffsetTransition: void <init>()>"
"<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()>","<android.transition.Transition: android.animation.TimeInterpolator getInterpolator()>"
"<android.media.AudioTrack: int getMinBufferSize(int,int,int)>","<android.media.AudioTrack: int getMinBufferSize(int,int,int)>"
"<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<java.time.temporal.TemporalAmount: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.temporal.TemporalAmount: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<android.text.Layout$Alignment: void <init>(java.lang.String,int)>","<android.text.Layout$Alignment: void <init>(java.lang.String,int)>"
"<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>","<android.text.method.MovementMethod: boolean onKeyDown(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>","<android.graphics.drawable.Icon: android.graphics.drawable.Drawable loadDrawable(android.content.Context)>"
"<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>"
"<java.lang.System: void <init>()>","<java.lang.System: void <init>()>"
"<android.widget.AbsListView: void setTextFilterEnabled(boolean)>","<android.widget.AbsListView: void setTextFilterEnabled(boolean)>"
"<android.media.MediaDataSource: int readAt(long,byte[],int,int)>","<android.media.MediaDataSource: int readAt(long,byte[],int,int)>"
"<android.content.pm.ModuleInfo: int hashCode()>","<android.content.pm.ModuleInfo: int hashCode()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>"
"<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>","<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>"
"<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>","<java.nio.ByteBuffer: java.nio.ShortBuffer asShortBuffer()>"
"<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>","<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>"
"<android.database.SQLException: void <init>(java.lang.String,java.lang.Throwable)>","<android.database.SQLException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>","<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>"
"<android.graphics.Canvas: void drawColor(long)>","<android.graphics.Canvas: void drawColor(long)>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setId(java.lang.String)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setId(java.lang.String)>"
"<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>","<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.view.ViewStructure: void setClickable(boolean)>","<android.view.ViewStructure: void setClickable(boolean)>"
"<android.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>","<android.view.MenuItem$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>"
"<android.graphics.Outline: boolean canClip()>","<android.graphics.Outline: boolean canClip()>"
"<java.time.DayOfWeek: int getValue()>","<java.time.DayOfWeek: int getValue()>"
"<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>"
"<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>","<java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)>"
"<android.view.MotionEvent: float getHistoricalPressure(int)>","<android.view.MotionEvent: float getHistoricalPressure(int)>"
"<android.graphics.Paint: void set(android.graphics.Paint)>","<android.graphics.Paint: void set(android.graphics.Paint)>"
"<android.telephony.TelephonyManager: int getCallStateForSubscription()>","<android.telephony.TelephonyManager: int getCallStateForSubscription()>"
"<android.view.View: android.view.PointerIcon getPointerIcon()>","<android.view.View: android.view.PointerIcon getPointerIcon()>"
"<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>","<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>"
"<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()>","<android.content.pm.PackageInstaller$Session: java.lang.String[] getNames()>"
"<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>","<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>"
"<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.lang.Object)>"
"<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>","<android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)>"
"<android.content.pm.PackageInfo: void <init>()>","<android.content.pm.PackageInfo: void <init>()>"
"<java.util.LongSummaryStatistics: java.lang.String toString()>","<java.util.LongSummaryStatistics: java.lang.String toString()>"
"<java.time.LocalTime: java.time.LocalTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.LocalTime: java.time.LocalTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setPerformanceMode(int)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setPerformanceMode(int)>"
"<java.nio.ByteBuffer: java.nio.Buffer flip()>","<java.nio.ByteBuffer: java.nio.Buffer flip()>"
"<android.graphics.ColorSpace: int getId()>","<android.graphics.ColorSpace: int getId()>"
"<android.database.sqlite.SQLiteDatabase: void finalize()>","<android.database.sqlite.SQLiteDatabase: void finalize()>"
"<java.net.Inet4Address: boolean isMCNodeLocal()>","<java.net.Inet4Address: boolean isMCNodeLocal()>"
"<android.view.SurfaceControl: void release()>","<android.view.SurfaceControl: void release()>"
"<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>","<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>"
"<java.nio.LongBuffer: long[] array()>","<java.nio.LongBuffer: long[] array()>"
"<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>"
"<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.Throwable)>","<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.Throwable)>"
"<android.text.PrecomputedText: int getParagraphCount()>","<android.text.PrecomputedText: int getParagraphCount()>"
"<android.graphics.Paint: void clearShadowLayer()>","<android.graphics.Paint: void clearShadowLayer()>"
"<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()>","<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>","<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)>"
"<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration$ParallelCombination addVibrator(int,android.os.VibrationEffect)>","<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration$ParallelCombination addVibrator(int,android.os.VibrationEffect)>"
"<java.time.ZonedDateTime: java.lang.String toString()>","<java.time.ZonedDateTime: java.lang.String toString()>"
"<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>","<android.hardware.Camera$Size: void <init>(android.hardware.Camera,int,int)>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.widget.RemoteViews: void <init>(java.util.Map)>","<android.widget.RemoteViews: void <init>(java.util.Map)>"
"<java.io.PrintWriter: void write(int)>","<java.io.PrintWriter: void write(int)>"
"<android.text.TextUtils: void <init>()>","<android.text.TextUtils: void <init>()>"
"<android.view.textclassifier.TextSelection: java.lang.String getId()>","<android.view.textclassifier.TextSelection: java.lang.String getId()>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>","<android.text.PrecomputedText: java.lang.Object[] getSpans(int,int,java.lang.Class)>"
"<java.lang.invoke.MethodHandleInfo: java.lang.reflect.Member reflectAs(java.lang.Class,java.lang.invoke.MethodHandles$Lookup)>","<java.lang.invoke.MethodHandleInfo: java.lang.reflect.Member reflectAs(java.lang.Class,java.lang.invoke.MethodHandles$Lookup)>"
"<java.util.Date: java.lang.Object clone()>","<java.util.Date: java.lang.Object clone()>"
"<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>","<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>"
"<android.content.OperationApplicationException: void <init>(int)>","<android.content.OperationApplicationException: void <init>(int)>"
"<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>","<android.graphics.drawable.Icon: void writeToParcel(android.os.Parcel,int)>"
"<android.media.AudioManager: boolean setCommunicationDevice(android.media.AudioDeviceInfo)>","<android.media.AudioManager: boolean setCommunicationDevice(android.media.AudioDeviceInfo)>"
"<java.util.Queue: java.lang.Object peek()>","<java.util.Queue: java.lang.Object peek()>"
"<android.text.Layout: void increaseWidthTo(int)>","<android.text.Layout: void increaseWidthTo(int)>"
"<android.media.session.MediaSessionManager: void <init>()>","<android.media.session.MediaSessionManager: void <init>()>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>","<java.nio.LongBuffer: java.nio.LongBuffer put(long[],int,int)>"
"<java.util.Date: int hashCode()>","<java.util.Date: int hashCode()>"
"<android.graphics.Color: long convert(long,android.graphics.ColorSpace$Connector)>","<android.graphics.Color: long convert(long,android.graphics.ColorSpace$Connector)>"
"<android.util.AttributeSet: java.lang.String getAttributeValue(int)>","<android.util.AttributeSet: java.lang.String getAttributeValue(int)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>","<java.nio.channels.FileChannel: java.nio.channels.FileLock lock()>"
"<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)>","<android.animation.PropertyValuesHolder: void setConverter(android.animation.TypeConverter)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)>"
"<java.net.URLConnection: java.lang.String getContentType()>","<java.net.URLConnection: java.lang.String getContentType()>"
"<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>","<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int)>"
"<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>","<android.transition.Transition: android.transition.TransitionValues getTransitionValues(android.view.View,boolean)>"
"<android.os.CombinedVibration: android.os.CombinedVibration$ParallelCombination startParallel()>","<android.os.CombinedVibration: android.os.CombinedVibration$ParallelCombination startParallel()>"
"<android.content.res.AssetManager: void finalize()>","<android.content.res.AssetManager: void finalize()>"
"<android.os.Parcel: int dataPosition()>","<android.os.Parcel: int dataPosition()>"
"<android.graphics.Bitmap: void <clinit>()>","<android.graphics.Bitmap: void <clinit>()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>"
"<android.content.pm.InstrumentationInfo: java.lang.String toString()>","<android.content.pm.InstrumentationInfo: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getTraversalAfter()>"
"<android.view.OrientationEventListener: boolean canDetectOrientation()>","<android.view.OrientationEventListener: boolean canDetectOrientation()>"
"<java.lang.ClassNotFoundException: java.lang.Throwable getException()>","<java.lang.ClassNotFoundException: java.lang.Throwable getException()>"
"<android.widget.RelativeLayout$LayoutParams: void resolveLayoutDirection(int)>","<android.widget.RelativeLayout$LayoutParams: void resolveLayoutDirection(int)>"
"<android.media.MediaPlayer: void setDrmPropertyString(java.lang.String,java.lang.String)>","<android.media.MediaPlayer: void setDrmPropertyString(java.lang.String,java.lang.String)>"
"<android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>","<android.graphics.Color: android.graphics.Color valueOf(float[],android.graphics.ColorSpace)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: void reset()>","<android.view.inputmethod.CursorAnchorInfo$Builder: void reset()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>","<android.view.accessibility.AccessibilityNodeInfo: android.os.Bundle getExtras()>"
"<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)>","<android.os.MessageQueue: void addOnFileDescriptorEventListener(java.io.FileDescriptor,int,android.os.MessageQueue$OnFileDescriptorEventListener)>"
"<java.util.Arrays: void parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)>","<java.util.Arrays: void parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)>"
"<java.lang.reflect.AccessibleObject: boolean isAccessible()>","<java.lang.reflect.AccessibleObject: boolean isAccessible()>"
"<android.widget.AbsListView: boolean showContextMenu()>","<android.widget.AbsListView: boolean showContextMenu()>"
"<android.view.animation.Animation: void setRepeatMode(int)>","<android.view.animation.Animation: void setRepeatMode(int)>"
"<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener)>","<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener)>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation build()>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation build()>"
"<android.database.Cursor: boolean isClosed()>","<android.database.Cursor: boolean isClosed()>"
"<java.nio.channels.Channel: boolean isOpen()>","<java.nio.channels.Channel: boolean isOpen()>"
"<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>","<java.nio.channels.FileChannel: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)>"
"<java.net.SocketImpl: void connect(java.lang.String,int)>","<java.net.SocketImpl: void connect(java.lang.String,int)>"
"<java.time.Duration: long toDays()>","<java.time.Duration: long toDays()>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>"
"<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.media.AudioManager: void addOnCommunicationDeviceChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnCommunicationDeviceChangedListener)>","<android.media.AudioManager: void addOnCommunicationDeviceChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnCommunicationDeviceChangedListener)>"
"<java.time.LocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.app.Fragment: void onTrimMemory(int)>","<android.app.Fragment: void onTrimMemory(int)>"
"<java.net.URLStreamHandler: int getDefaultPort()>","<java.net.URLStreamHandler: int getDefaultPort()>"
"<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()>","<android.graphics.fonts.FontVariationAxis: java.lang.String getTag()>"
"<java.lang.Character$UnicodeBlock: void <init>()>","<java.lang.Character$UnicodeBlock: void <init>()>"
"<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>","<android.graphics.Paint: int getTextRunCursor(java.lang.CharSequence,int,int,boolean,int,int)>"
"<android.view.Window: void setDecorFitsSystemWindows(boolean)>","<android.view.Window: void setDecorFitsSystemWindows(boolean)>"
"<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>","<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>"
"<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>","<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>"
"<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()>","<android.view.ViewGroup$MarginLayoutParams: boolean isMarginRelative()>"
"<java.util.Random: java.util.stream.DoubleStream doubles()>","<java.util.Random: java.util.stream.DoubleStream doubles()>"
"<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()>","<android.widget.Toolbar: java.lang.CharSequence getLogoDescription()>"
"<java.util.Comparator: java.util.Comparator naturalOrder()>","<java.util.Comparator: java.util.Comparator naturalOrder()>"
"<java.util.Map: java.util.Map ofEntries(java.util.Map$Entry[])>","<java.util.Map: java.util.Map ofEntries(java.util.Map$Entry[])>"
"<android.app.ActionBar: void setTitle(java.lang.CharSequence)>","<android.app.ActionBar: void setTitle(java.lang.CharSequence)>"
"<java.lang.ThreadGroup: void checkAccess()>","<java.lang.ThreadGroup: void checkAccess()>"
"<android.app.Fragment: void setRetainInstance(boolean)>","<android.app.Fragment: void setRetainInstance(boolean)>"
"<java.lang.reflect.Modifier: int parameterModifiers()>","<java.lang.reflect.Modifier: int parameterModifiers()>"
"<java.io.Reader: boolean markSupported()>","<java.io.Reader: boolean markSupported()>"
"<java.lang.Appendable: java.lang.Appendable append(char)>","<java.lang.Appendable: java.lang.Appendable append(char)>"
"<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer get(char[],int,int)>"
"<android.widget.AbsListView: void onFilterComplete(int)>","<android.widget.AbsListView: void onFilterComplete(int)>"
"<java.util.Collection: boolean remove(java.lang.Object)>","<java.util.Collection: boolean remove(java.lang.Object)>"
"<java.lang.Math: double toRadians(double)>","<java.lang.Math: double toRadians(double)>"
"<android.telephony.TelephonyManager: java.lang.String getMeid()>","<android.telephony.TelephonyManager: java.lang.String getMeid()>"
"<android.app.Fragment: boolean getRetainInstance()>","<android.app.Fragment: boolean getRetainInstance()>"
"<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>","<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>"
"<java.lang.reflect.Field: float getFloat(java.lang.Object)>","<java.lang.reflect.Field: float getFloat(java.lang.Object)>"
"<android.media.AudioTrack: int write(float[],int,int,int)>","<android.media.AudioTrack: int write(float[],int,int,int)>"
"<android.hardware.camera2.CameraExtensionSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraExtensionSession)>","<android.hardware.camera2.CameraExtensionSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraExtensionSession)>"
"<java.time.temporal.TemporalUnit: boolean isDurationEstimated()>","<java.time.temporal.TemporalUnit: boolean isDurationEstimated()>"
"<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<java.lang.StringBuilder: void ensureCapacity(int)>","<java.lang.StringBuilder: void ensureCapacity(int)>"
"<android.widget.TextView: int getCompoundPaddingTop()>","<android.widget.TextView: int getCompoundPaddingTop()>"
"<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>","<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>"
"<java.lang.Math: int abs(int)>","<java.lang.Math: int abs(int)>"
"<android.content.pm.PermissionInfo: void <init>()>","<android.content.pm.PermissionInfo: void <init>()>"
"<java.util.Queue: java.lang.Object poll()>","<java.util.Queue: java.lang.Object poll()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getRowCount()>"
"<java.util.Arrays: int compare(short[],short[])>","<java.util.Arrays: int compare(short[],short[])>"
"<android.view.textclassifier.TextClassifierEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent: void <clinit>()>"
"<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>","<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>"
"<android.view.translation.TranslationCapability: java.lang.String toString()>","<android.view.translation.TranslationCapability: java.lang.String toString()>"
"<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>","<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>"
"<java.security.cert.Certificate: void <init>(java.lang.String)>","<java.security.cert.Certificate: void <init>(java.lang.String)>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setReferenceTime(java.time.ZonedDateTime)>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setReferenceTime(java.time.ZonedDateTime)>"
"<android.view.RoundedCorner: boolean equals(java.lang.Object)>","<android.view.RoundedCorner: boolean equals(java.lang.Object)>"
"<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>","<android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)>"
"<java.nio.channels.spi.AbstractSelectionKey: void cancel()>","<java.nio.channels.spi.AbstractSelectionKey: void cancel()>"
"<java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>","<java.util.Collections: java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap)>"
"<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>","<android.app.SharedElementCallback: void onSharedElementEnd(java.util.List,java.util.List,java.util.List)>"
"<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>","<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>"
"<android.graphics.Picture: void endRecording()>","<android.graphics.Picture: void endRecording()>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>","<android.view.inputmethod.InputMethodSubtype: java.lang.CharSequence getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)>"
"<android.view.ViewGroup: void onViewRemoved(android.view.View)>","<android.view.ViewGroup: void onViewRemoved(android.view.View)>"
"<android.media.AudioManager$AudioPlaybackCallback: void <init>()>","<android.media.AudioManager$AudioPlaybackCallback: void <init>()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.IsoChronology: java.time.LocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)>","<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)>"
"<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>","<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>"
"<android.text.Layout: float getLineRight(int)>","<android.text.Layout: float getLineRight(int)>"
"<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>","<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>"
"<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>"
"<java.time.Period: java.time.Period plus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.Period plus(java.time.temporal.TemporalAmount)>"
"<java.nio.file.FileSystem: java.lang.Iterable getRootDirectories()>","<java.nio.file.FileSystem: java.lang.Iterable getRootDirectories()>"
"<java.time.LocalDateTime: void <clinit>()>","<java.time.LocalDateTime: void <clinit>()>"
"<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>","<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>"
"<android.app.FragmentManager: void popBackStack()>","<android.app.FragmentManager: void popBackStack()>"
"<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>","<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>"
"<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.view.View: int getLeftPaddingOffset()>","<android.view.View: int getLeftPaddingOffset()>"
"<android.view.translation.ViewTranslationResponse: android.view.translation.TranslationResponseValue getValue(java.lang.String)>","<android.view.translation.ViewTranslationResponse: android.view.translation.TranslationResponseValue getValue(java.lang.String)>"
"<android.app.PendingIntent: void <init>()>","<android.app.PendingIntent: void <init>()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>"
"<java.time.chrono.ChronoZonedDateTime: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoZonedDateTime: boolean equals(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnIndex(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnIndex(int)>"
"<android.view.textclassifier.TextClassification: java.lang.String getId()>","<android.view.textclassifier.TextClassification: java.lang.String getId()>"
"<android.view.animation.Animation: void <init>()>","<android.view.animation.Animation: void <init>()>"
"<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>"
"<android.hardware.HardwareBuffer: void close()>","<android.hardware.HardwareBuffer: void close()>"
"<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>","<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<java.net.SocketImpl: void create(boolean)>","<java.net.SocketImpl: void create(boolean)>"
"<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>","<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest build()>","<android.content.SyncRequest$Builder: android.content.SyncRequest build()>"
"<android.widget.TextView: void setText(char[],int,int)>","<android.widget.TextView: void setText(char[],int,int)>"
"<android.media.metrics.LogSessionId: int hashCode()>","<android.media.metrics.LogSessionId: int hashCode()>"
"<android.graphics.Region: void <init>(android.graphics.Rect)>","<android.graphics.Region: void <init>(android.graphics.Rect)>"
"<java.util.List: boolean addAll(int,java.util.Collection)>","<java.util.List: boolean addAll(int,java.util.Collection)>"
"<android.graphics.drawable.Drawable: void invalidateSelf()>","<android.graphics.drawable.Drawable: void invalidateSelf()>"
"<java.nio.file.Path: int compareTo(java.nio.file.Path)>","<java.nio.file.Path: int compareTo(java.nio.file.Path)>"
"<android.graphics.Rect: int centerX()>","<android.graphics.Rect: int centerX()>"
"<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>"
"<android.view.ViewGroup: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>","<android.view.ViewGroup: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>"
"<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>","<android.hardware.Camera$Parameters: int getMaxNumDetectedFaces()>"
"<java.lang.invoke.MethodHandle: boolean isVarargsCollector()>","<java.lang.invoke.MethodHandle: boolean isVarargsCollector()>"
"<java.time.LocalDate: void <clinit>()>","<java.time.LocalDate: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListener(android.media.AudioManager$OnAudioFocusChangeListener)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListener(android.media.AudioManager$OnAudioFocusChangeListener)>"
"<android.view.FrameMetrics: long getMetric(int)>","<android.view.FrameMetrics: long getMetric(int)>"
"<android.content.Context: java.lang.String[] databaseList()>","<android.content.Context: java.lang.String[] databaseList()>"
"<java.lang.Object: boolean equals(java.lang.Object)>","<java.lang.Object: boolean equals(java.lang.Object)>"
"<android.app.assist.AssistContent: int describeContents()>","<android.app.assist.AssistContent: int describeContents()>"
"<android.content.ContextWrapper: android.content.ContextParams getParams()>","<android.content.ContextWrapper: android.content.ContextParams getParams()>"
"<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>","<android.provider.Settings$System: boolean putConfiguration(android.content.ContentResolver,android.content.res.Configuration)>"
"<java.lang.StringBuilder: int offsetByCodePoints(int,int)>","<java.lang.StringBuilder: int offsetByCodePoints(int,int)>"
"<android.app.ActivityManager$RunningTaskInfo: void <clinit>()>","<android.app.ActivityManager$RunningTaskInfo: void <clinit>()>"
"<android.os.Parcel: android.util.Size readSize()>","<android.os.Parcel: android.util.Size readSize()>"
"<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>","<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>"
"<android.graphics.RectF: void <init>(android.graphics.Rect)>","<android.graphics.RectF: void <init>(android.graphics.Rect)>"
"<java.lang.IllegalArgumentException: void <init>()>","<java.lang.IllegalArgumentException: void <init>()>"
"<android.net.Uri$Builder: java.lang.String toString()>","<android.net.Uri$Builder: java.lang.String toString()>"
"<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>","<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>"
"<android.view.View: void setNextFocusLeftId(int)>","<android.view.View: void setNextFocusLeftId(int)>"
"<java.time.OffsetTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.OffsetTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)>","<org.xmlpull.v1.XmlPullParser: void setProperty(java.lang.String,java.lang.Object)>"
"<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)>","<android.media.MediaMetadata: java.lang.CharSequence getText(java.lang.String)>"
"<android.media.session.MediaSession$Callback: void onCustomAction(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onCustomAction(java.lang.String,android.os.Bundle)>"
"<android.telephony.TelephonyManager: java.lang.String getSimOperator()>","<android.telephony.TelephonyManager: java.lang.String getSimOperator()>"
"<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>","<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>"
"<android.net.LinkProperties: void setHttpProxy(android.net.ProxyInfo)>","<android.net.LinkProperties: void setHttpProxy(android.net.ProxyInfo)>"
"<java.security.KeyException: void <init>(java.lang.Throwable)>","<java.security.KeyException: void <init>(java.lang.Throwable)>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>"
"<android.content.AttributionSource: java.lang.String getAttributionTag()>","<android.content.AttributionSource: java.lang.String getAttributionTag()>"
"<android.app.Activity: void stopLocalVoiceInteraction()>","<android.app.Activity: void stopLocalVoiceInteraction()>"
"<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(android.icu.util.ULocale)>","<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(android.icu.util.ULocale)>"
"<android.media.session.MediaController$TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void prepareFromUri(android.net.Uri,android.os.Bundle)>"
"<java.time.ZonedDateTime: int getMonthValue()>","<java.time.ZonedDateTime: int getMonthValue()>"
"<android.graphics.ColorSpace$Model: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$Model: void <init>(java.lang.String,int)>"
"<android.content.pm.ModuleInfo: java.lang.String getPackageName()>","<android.content.pm.ModuleInfo: java.lang.String getPackageName()>"
"<android.view.WindowInsets$Side: void <init>()>","<android.view.WindowInsets$Side: void <init>()>"
"<android.content.res.Resources: void addLoaders(android.content.res.loader.ResourcesLoader[])>","<android.content.res.Resources: void addLoaders(android.content.res.loader.ResourcesLoader[])>"
"<java.util.Map: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.HashSet: void <init>()>","<java.util.HashSet: void <init>()>"
"<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()>","<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()>"
"<android.hardware.display.DeviceProductInfo: int getModelYear()>","<android.hardware.display.DeviceProductInfo: int getModelYear()>"
"<android.net.NetworkCapabilities: int[] getEnterpriseIds()>","<android.net.NetworkCapabilities: int[] getEnterpriseIds()>"
"<android.view.View: int getTextDirection()>","<android.view.View: int getTextDirection()>"
"<android.media.Image: long getTimestamp()>","<android.media.Image: long getTimestamp()>"
"<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String)>"
"<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>","<javax.security.auth.Subject: void <init>(boolean,java.util.Set,java.util.Set,java.util.Set)>"
"<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>","<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>"
"<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>","<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>"
"<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>","<android.hardware.camera2.CaptureRequest$Builder: void addTarget(android.view.Surface)>"
"<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>","<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>"
"<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>","<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>"
"<android.content.ContentValues: boolean isEmpty()>","<android.content.ContentValues: boolean isEmpty()>"
"<java.lang.Long: int compareTo(java.lang.Object)>","<java.lang.Long: int compareTo(java.lang.Object)>"
"<android.view.ViewGroup: void setPersistentDrawingCache(int)>","<android.view.ViewGroup: void setPersistentDrawingCache(int)>"
"<java.nio.file.Path: java.nio.file.Path getName(int)>","<java.nio.file.Path: java.nio.file.Path getName(int)>"
"<java.time.LocalTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.hardware.camera2.params.MeteringRectangle: int hashCode()>","<android.hardware.camera2.params.MeteringRectangle: int hashCode()>"
"<android.view.ActionProvider$VisibilityListener: void onActionProviderVisibilityChanged(boolean)>","<android.view.ActionProvider$VisibilityListener: void onActionProviderVisibilityChanged(boolean)>"
"<android.view.View: int getPaddingTop()>","<android.view.View: int getPaddingTop()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithBitmap(android.graphics.Bitmap)>"
"<android.graphics.RenderNode: boolean setUseCompositingLayer(boolean,android.graphics.Paint)>","<android.graphics.RenderNode: boolean setUseCompositingLayer(boolean,android.graphics.Paint)>"
"<java.util.UUID: java.util.UUID randomUUID()>","<java.util.UUID: java.util.UUID randomUUID()>"
"<android.graphics.Point: boolean equals(java.lang.Object)>","<android.graphics.Point: boolean equals(java.lang.Object)>"
"<android.content.IntentFilter: boolean hasDataType(java.lang.String)>","<android.content.IntentFilter: boolean hasDataType(java.lang.String)>"
"<android.graphics.drawable.Drawable: void clearColorFilter()>","<android.graphics.drawable.Drawable: void clearColorFilter()>"
"<android.graphics.Color: boolean isSrgb()>","<android.graphics.Color: boolean isSrgb()>"
"<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: boolean isHidden(java.nio.file.Path)>"
"<java.net.InetAddress: java.net.InetAddress getLocalHost()>","<java.net.InetAddress: java.net.InetAddress getLocalHost()>"
"<android.media.MediaPlayer: void stop()>","<android.media.MediaPlayer: void stop()>"
"<java.util.Locale: java.lang.String getScript()>","<java.util.Locale: java.lang.String getScript()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.graphics.Path)>"
"<android.widget.Scroller: int getStartY()>","<android.widget.Scroller: int getStartY()>"
"<android.view.inputmethod.ExtractedText: void <clinit>()>","<android.view.inputmethod.ExtractedText: void <clinit>()>"
"<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,java.util.function.Function)>","<android.view.textclassifier.TextLinks: int apply(android.text.Spannable,int,java.util.function.Function)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeLocale(java.lang.String)>"
"<android.app.Person: boolean isImportant()>","<android.app.Person: boolean isImportant()>"
"<java.time.temporal.ValueRange: boolean isValidIntValue(long)>","<java.time.temporal.ValueRange: boolean isValidIntValue(long)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(android.content.Context,int)>"
"<android.view.textclassifier.SelectionEvent: int getEnd()>","<android.view.textclassifier.SelectionEvent: int getEnd()>"
"<android.media.MediaDrm: int getMaxHdcpLevel()>","<android.media.MediaDrm: int getMaxHdcpLevel()>"
"<android.media.MediaDrm: void close()>","<android.media.MediaDrm: void close()>"
"<android.graphics.RenderNode: int getAmbientShadowColor()>","<android.graphics.RenderNode: int getAmbientShadowColor()>"
"<android.view.animation.LayoutAnimationController: void setDelay(float)>","<android.view.animation.LayoutAnimationController: void setDelay(float)>"
"<java.time.temporal.ChronoField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.ChronoField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
"<java.lang.OutOfMemoryError: void <init>(java.lang.String)>","<java.lang.OutOfMemoryError: void <init>(java.lang.String)>"
"<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>","<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>"
"<java.lang.Byte: byte parseByte(java.lang.String)>","<java.lang.Byte: byte parseByte(java.lang.String)>"
"<android.graphics.Rect: java.lang.String toShortString()>","<android.graphics.Rect: java.lang.String toShortString()>"
"<android.graphics.Paint: int getHinting()>","<android.graphics.Paint: int getHinting()>"
"<java.util.function.IntSupplier: int getAsInt()>","<java.util.function.IntSupplier: int getAsInt()>"
"<java.text.CharacterIterator: char previous()>","<java.text.CharacterIterator: char previous()>"
"<java.util.LongSummaryStatistics: double getAverage()>","<java.util.LongSummaryStatistics: double getAverage()>"
"<android.graphics.Typeface: int hashCode()>","<android.graphics.Typeface: int hashCode()>"
"<android.net.LinkProperties: java.util.List getRoutes()>","<android.net.LinkProperties: java.util.List getRoutes()>"
"<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>"
"<java.util.concurrent.TimeoutException: void <init>()>","<java.util.concurrent.TimeoutException: void <init>()>"
"<android.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>","<android.animation.ValueAnimator$AnimatorUpdateListener: void onAnimationUpdate(android.animation.ValueAnimator)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encodeLoop(java.nio.CharBuffer,java.nio.ByteBuffer)>"
"<java.lang.Character: boolean isJavaIdentifierStart(int)>","<java.lang.Character: boolean isJavaIdentifierStart(int)>"
"<android.media.AudioManager: void setWiredHeadsetOn(boolean)>","<android.media.AudioManager: void setWiredHeadsetOn(boolean)>"
"<java.nio.channels.CompletionHandler: void failed(java.lang.Throwable,java.lang.Object)>","<java.nio.channels.CompletionHandler: void failed(java.lang.Throwable,java.lang.Object)>"
"<java.time.temporal.Temporal: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.view.InputDevice: int getKeyboardType()>","<android.view.InputDevice: int getKeyboardType()>"
"<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.nio.file.Path,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)>","<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.nio.file.Path,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)>"
"<java.lang.Double: boolean isFinite(double)>","<java.lang.Double: boolean isFinite(double)>"
"<java.lang.Enum: int ordinal()>","<java.lang.Enum: int ordinal()>"
"<java.lang.Long: long max(long,long)>","<java.lang.Long: long max(long,long)>"
"<java.net.SocketOptions: java.lang.Object getOption(int)>","<java.net.SocketOptions: java.lang.Object getOption(int)>"
"<android.app.ActivityManager$RecentTaskInfo: void <clinit>()>","<android.app.ActivityManager$RecentTaskInfo: void <clinit>()>"
"<java.lang.reflect.Field: long getLong(java.lang.Object)>","<java.lang.reflect.Field: long getLong(java.lang.Object)>"
"<java.util.Arrays: int compareUnsigned(byte[],byte[])>","<java.util.Arrays: int compareUnsigned(byte[],byte[])>"
"<android.view.KeyEvent: boolean isCanceled()>","<android.view.KeyEvent: boolean isCanceled()>"
"<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>","<android.app.ActivityManager: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>"
"<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()>","<android.view.inputmethod.CursorAnchorInfo: int getComposingTextStart()>"
"<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)>","<android.content.pm.PackageManager: boolean hasSigningCertificate(int,byte[],int)>"
"<java.lang.Long: long highestOneBit(long)>","<java.lang.Long: long highestOneBit(long)>"
"<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>","<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>"
"<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>","<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>"
"<android.view.OrientationEventListener: void enable()>","<android.view.OrientationEventListener: void enable()>"
"<android.media.AudioRecord: int setPositionNotificationPeriod(int)>","<android.media.AudioRecord: int setPositionNotificationPeriod(int)>"
"<android.widget.Toolbar: void setTitle(int)>","<android.widget.Toolbar: void setTitle(int)>"
"<android.view.textclassifier.TextClassification$Request: android.os.LocaleList getDefaultLocales()>","<android.view.textclassifier.TextClassification$Request: android.os.LocaleList getDefaultLocales()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguageTag(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguageTag(java.lang.String)>"
"<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>","<android.view.Window: void setFeatureDrawableUri(int,android.net.Uri)>"
"<android.media.AudioRecord: int read(float[],int,int,int)>","<android.media.AudioRecord: int read(float[],int,int,int)>"
"<java.time.format.TextStyle: void <init>(java.lang.String,int)>","<java.time.format.TextStyle: void <init>(java.lang.String,int)>"
"<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>","<android.text.Editable: android.text.Editable append(java.lang.CharSequence,int,int)>"
"<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.Window: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.text.Editable: void setFilters(android.text.InputFilter[])>","<android.text.Editable: void setFilters(android.text.InputFilter[])>"
"<android.view.animation.Animation: int getZAdjustment()>","<android.view.animation.Animation: int getZAdjustment()>"
"<android.widget.EditText: java.lang.CharSequence getText()>","<android.widget.EditText: java.lang.CharSequence getText()>"
"<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>"
"<android.net.IpSecManager$UdpEncapsulationSocket: int getPort()>","<android.net.IpSecManager$UdpEncapsulationSocket: int getPort()>"
"<android.app.Fragment: android.content.Context getContext()>","<android.app.Fragment: android.content.Context getContext()>"
"<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>","<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraCharacteristics getCameraCharacteristics(java.lang.String)>"
"<android.net.ProxyInfo: int getPort()>","<android.net.ProxyInfo: int getPort()>"
"<android.hardware.Camera$Parameters: void setZoom(int)>","<android.hardware.Camera$Parameters: void setZoom(int)>"
"<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>","<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
"<android.widget.AdapterView$OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>","<android.widget.AdapterView$OnItemSelectedListener: void onNothingSelected(android.widget.AdapterView)>"
"<android.view.translation.TranslationResponseValue: java.lang.CharSequence getText()>","<android.view.translation.TranslationResponseValue: java.lang.CharSequence getText()>"
"<java.lang.Thread: void interrupt()>","<java.lang.Thread: void interrupt()>"
"<java.util.function.IntBinaryOperator: int applyAsInt(int,int)>","<java.util.function.IntBinaryOperator: int applyAsInt(int,int)>"
"<java.util.stream.IntStream: java.util.stream.IntStream limit(long)>","<java.util.stream.IntStream: java.util.stream.IntStream limit(long)>"
"<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>","<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>"
"<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>","<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>"
"<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)>","<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)>"
"<java.nio.FloatBuffer: float get()>","<java.nio.FloatBuffer: float get()>"
"<java.net.URLConnection: void setIfModifiedSince(long)>","<java.net.URLConnection: void setIfModifiedSince(long)>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(java.lang.CharSequence)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(java.lang.CharSequence)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onCreated(int)>","<android.content.pm.PackageInstaller$SessionCallback: void onCreated(int)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordStartIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeWordStartIndex(int)>"
"<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>","<java.util.stream.Collector: java.util.function.BiConsumer accumulator()>"
"<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest build()>","<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest build()>"
"<android.media.session.MediaSession$Callback: void onPlayFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPlayFromUri(android.net.Uri,android.os.Bundle)>"
"<java.net.DatagramSocket: int getSendBufferSize()>","<java.net.DatagramSocket: int getSendBufferSize()>"
"<android.graphics.ColorSpace: int hashCode()>","<android.graphics.ColorSpace: int hashCode()>"
"<android.view.translation.ViewTranslationResponse: java.lang.String toString()>","<android.view.translation.ViewTranslationResponse: java.lang.String toString()>"
"<android.media.AudioManager: void playSoundEffect(int)>","<android.media.AudioManager: void playSoundEffect(int)>"
"<android.media.session.MediaController$Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)>","<android.media.session.MediaController$Callback: void onPlaybackStateChanged(android.media.session.PlaybackState)>"
"<android.graphics.Bitmap: byte[] getNinePatchChunk()>","<android.graphics.Bitmap: byte[] getNinePatchChunk()>"
"<android.media.TimedText: java.lang.String getText()>","<android.media.TimedText: java.lang.String getText()>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioSource(int)>","<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioSource(int)>"
"<java.util.ArrayList: java.lang.Object clone()>","<java.util.ArrayList: java.lang.Object clone()>"
"<android.view.textclassifier.TextLanguage$Request: int describeContents()>","<android.view.textclassifier.TextLanguage$Request: int describeContents()>"
"<android.view.ViewGroup: int getDescendantFocusability()>","<android.view.ViewGroup: int getDescendantFocusability()>"
"<android.graphics.drawable.Drawable: int getIntrinsicHeight()>","<android.graphics.drawable.Drawable: int getIntrinsicHeight()>"
"<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>","<android.content.pm.PackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>"
"<android.graphics.SurfaceTexture: void detachFromGLContext()>","<android.graphics.SurfaceTexture: void detachFromGLContext()>"
"<android.os.Build$VERSION: void <clinit>()>","<android.os.Build$VERSION: void <clinit>()>"
"<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>","<android.content.Intent: int[] getIntArrayExtra(java.lang.String)>"
"<android.graphics.Region$Op: void <clinit>()>","<android.graphics.Region$Op: void <clinit>()>"
"<java.nio.file.FileStore: long getUnallocatedSpace()>","<java.nio.file.FileStore: long getUnallocatedSpace()>"
"<android.app.FragmentManager: boolean executePendingTransactions()>","<android.app.FragmentManager: boolean executePendingTransactions()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <init>(int,java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <init>(int,java.lang.CharSequence)>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>"
"<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>","<android.util.Range: java.lang.Comparable clamp(java.lang.Comparable)>"
"<java.security.Key: byte[] getEncoded()>","<java.security.Key: byte[] getEncoded()>"
"<android.media.session.PlaybackState: long getActions()>","<android.media.session.PlaybackState: long getActions()>"
"<android.os.Parcel: void writeIntArray(int[])>","<android.os.Parcel: void writeIntArray(int[])>"
"<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>","<android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>"
"<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>","<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>"
"<java.lang.Double: double parseDouble(java.lang.String)>","<java.lang.Double: double parseDouble(java.lang.String)>"
"<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>","<java.nio.charset.Charset: int compareTo(java.nio.charset.Charset)>"
"<android.hardware.camera2.params.StreamConfigurationMap: int hashCode()>","<android.hardware.camera2.params.StreamConfigurationMap: int hashCode()>"
"<android.widget.AbsListView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.AbsListView: java.lang.CharSequence getAccessibilityClassName()>"
"<java.time.Period: java.time.Period multipliedBy(int)>","<java.time.Period: java.time.Period multipliedBy(int)>"
"<java.util.Date: java.time.Instant toInstant()>","<java.util.Date: java.time.Instant toInstant()>"
"<android.widget.RelativeLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.RelativeLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>","<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>"
"<android.content.res.Resources: void finishPreloading()>","<android.content.res.Resources: void finishPreloading()>"
"<android.widget.Toolbar: boolean hasExpandedActionView()>","<android.widget.Toolbar: boolean hasExpandedActionView()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStopped(android.app.Activity)>"
"<android.text.Layout: int getLineForVertical(int)>","<android.text.Layout: int getLineForVertical(int)>"
"<android.media.MediaDrm$SessionException: int getErrorCode()>","<android.media.MediaDrm$SessionException: int getErrorCode()>"
"<android.os.Parcel: void readStringList(java.util.List)>","<android.os.Parcel: void readStringList(java.util.List)>"
"<android.widget.MediaController$MediaPlayerControl: boolean isPlaying()>","<android.widget.MediaController$MediaPlayerControl: boolean isPlaying()>"
"<android.net.IpSecManager: void removeTransportModeTransforms(java.net.Socket)>","<android.net.IpSecManager: void removeTransportModeTransforms(java.net.Socket)>"
"<android.media.MediaFormat: float getFloat(java.lang.String,float)>","<android.media.MediaFormat: float getFloat(java.lang.String,float)>"
"<android.content.res.Configuration: int compareTo(java.lang.Object)>","<android.content.res.Configuration: int compareTo(java.lang.Object)>"
"<android.telecom.PhoneAccountHandle: android.os.UserHandle getUserHandle()>","<android.telecom.PhoneAccountHandle: android.os.UserHandle getUserHandle()>"
"<java.util.function.BiFunction: java.util.function.BiFunction andThen(java.util.function.Function)>","<java.util.function.BiFunction: java.util.function.BiFunction andThen(java.util.function.Function)>"
"<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>","<java.lang.SecurityManager: void checkSecurityAccess(java.lang.String)>"
"<android.view.View: void onSizeChanged(int,int,int,int)>","<android.view.View: void onSizeChanged(int,int,int,int)>"
"<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>","<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>"
"<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri,int)>","<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri,int)>"
"<java.util.List: boolean remove(java.lang.Object)>","<java.util.List: boolean remove(java.lang.Object)>"
"<android.view.Menu: int size()>","<android.view.Menu: int size()>"
"<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>","<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>"
"<android.content.pm.PackageInstaller$SessionParams: int describeContents()>","<android.content.pm.PackageInstaller$SessionParams: int describeContents()>"
"<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>","<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>"
"<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>","<android.view.Window: boolean performPanelIdentifierAction(int,int,int)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>"
"<android.hardware.Sensor: float getPower()>","<android.hardware.Sensor: float getPower()>"
"<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>","<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setLineBreakConfig(android.graphics.text.LineBreakConfig)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setLineBreakConfig(android.graphics.text.LineBreakConfig)>"
"<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration combine()>","<android.os.CombinedVibration$ParallelCombination: android.os.CombinedVibration combine()>"
"<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>","<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>"
"<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>","<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>"
"<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>","<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>"
"<android.widget.ListView: void smoothScrollByOffset(int)>","<android.widget.ListView: void smoothScrollByOffset(int)>"
"<java.nio.file.Path: java.nio.file.Path resolveSibling(java.lang.String)>","<java.nio.file.Path: java.nio.file.Path resolveSibling(java.lang.String)>"
"<android.os.HandlerThread: android.os.Looper getLooper()>","<android.os.HandlerThread: android.os.Looper getLooper()>"
"<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>","<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>"
"<android.database.Cursor: android.os.Bundle getExtras()>","<android.database.Cursor: android.os.Bundle getExtras()>"
"<java.util.Spliterator$OfInt: java.util.Spliterator$OfInt trySplit()>","<java.util.Spliterator$OfInt: java.util.Spliterator$OfInt trySplit()>"
"<android.view.MotionEvent: float getToolMajor(int)>","<android.view.MotionEvent: float getToolMajor(int)>"
"<android.media.MediaDrm: byte[] getPropertyByteArray(java.lang.String)>","<android.media.MediaDrm: byte[] getPropertyByteArray(java.lang.String)>"
"<java.util.Collection: boolean addAll(java.util.Collection)>","<java.util.Collection: boolean addAll(java.util.Collection)>"
"<android.media.AudioTrack: void play()>","<android.media.AudioTrack: void play()>"
"<android.graphics.drawable.LayerDrawable: int getTopPadding()>","<android.graphics.drawable.LayerDrawable: int getTopPadding()>"
"<java.nio.channels.SelectionKey: boolean isWritable()>","<java.nio.channels.SelectionKey: boolean isWritable()>"
"<android.app.PendingIntent$CanceledException: void <init>()>","<android.app.PendingIntent$CanceledException: void <init>()>"
"<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>","<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>"
"<java.nio.Buffer: java.nio.Buffer limit(int)>","<java.nio.Buffer: java.nio.Buffer limit(int)>"
"<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>","<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>"
"<android.content.DialogInterface$OnCancelListener: void onCancel(android.content.DialogInterface)>","<android.content.DialogInterface$OnCancelListener: void onCancel(android.content.DialogInterface)>"
"<java.util.ArrayList: java.lang.Object get(int)>","<java.util.ArrayList: java.lang.Object get(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayVariant(android.icu.util.ULocale)>"
"<android.hardware.camera2.CaptureRequest: java.util.List getKeys()>","<android.hardware.camera2.CaptureRequest: java.util.List getKeys()>"
"<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>","<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener)>"
"<android.graphics.Matrix: void <clinit>()>","<android.graphics.Matrix: void <clinit>()>"
"<android.animation.LayoutTransition: boolean isChangingLayout()>","<android.animation.LayoutTransition: boolean isChangingLayout()>"
"<java.net.URL: java.lang.String getProtocol()>","<java.net.URL: java.lang.String getProtocol()>"
"<java.util.Random: java.util.stream.DoubleStream doubles(long,double,double)>","<java.util.Random: java.util.stream.DoubleStream doubles(long,double,double)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>"
"<android.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>","<android.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])>"
"<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>","<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>"
"<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>","<android.graphics.drawable.Drawable$ConstantState: boolean canApplyTheme()>"
"<android.graphics.drawable.ColorDrawable: int getColor()>","<android.graphics.drawable.ColorDrawable: int getColor()>"
"<java.lang.Thread: boolean isInterrupted()>","<java.lang.Thread: boolean isInterrupted()>"
"<android.view.InputEvent: void <init>()>","<android.view.InputEvent: void <init>()>"
"<android.app.ActionBar: void setElevation(float)>","<android.app.ActionBar: void setElevation(float)>"
"<java.lang.invoke.VarHandle: java.lang.Object get(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object get(java.lang.Object[])>"
"<android.app.ActivityManager$TaskDescription: boolean equals(java.lang.Object)>","<android.app.ActivityManager$TaskDescription: boolean equals(java.lang.Object)>"
"<android.widget.AdapterView: void setAdapter(android.widget.Adapter)>","<android.widget.AdapterView: void setAdapter(android.widget.Adapter)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>"
"<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
"<android.hardware.Camera$Parameters: void setPreviewFormat(int)>","<android.hardware.Camera$Parameters: void setPreviewFormat(int)>"
"<android.hardware.Camera$Parameters: int getPictureFormat()>","<android.hardware.Camera$Parameters: int getPictureFormat()>"
"<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)>","<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int,int)>"
"<android.view.InputDevice$MotionRange: float getFlat()>","<android.view.InputDevice$MotionRange: float getFlat()>"
"<android.media.AudioFormat: int getChannelCount()>","<android.media.AudioFormat: int getChannelCount()>"
"<android.view.View: void onAnimationStart()>","<android.view.View: void onAnimationStart()>"
"<android.widget.TextView: boolean getDefaultEditable()>","<android.widget.TextView: boolean getDefaultEditable()>"
"<java.time.OffsetDateTime: int getSecond()>","<java.time.OffsetDateTime: int getSecond()>"
"<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>"
"<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>","<android.graphics.fonts.FontFamily$Builder: void <init>(android.graphics.fonts.Font)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfYear(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfYear(int)>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>","<android.graphics.Bitmap: android.graphics.ColorSpace getColorSpace()>"
"<android.os.Debug: int getThreadGcInvocationCount()>","<android.os.Debug: int getThreadGcInvocationCount()>"
"<android.view.ScrollCaptureSession: android.view.Surface getSurface()>","<android.view.ScrollCaptureSession: android.view.Surface getSurface()>"
"<android.content.Context: java.lang.String getSystemServiceName(java.lang.Class)>","<android.content.Context: java.lang.String getSystemServiceName(java.lang.Class)>"
"<android.view.WindowInsets$Type: int statusBars()>","<android.view.WindowInsets$Type: int statusBars()>"
"<android.app.Fragment: void setEnterSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Fragment: void setEnterSharedElementCallback(android.app.SharedElementCallback)>"
"<android.widget.TextView: int getAutofillType()>","<android.widget.TextView: int getAutofillType()>"
"<android.os.Parcel: int dataAvail()>","<android.os.Parcel: int dataAvail()>"
"<java.time.temporal.ChronoField: int checkValidIntValue(long)>","<java.time.temporal.ChronoField: int checkValidIntValue(long)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setContentInvalid(boolean)>"
"<android.graphics.RectF: void offset(float,float)>","<android.graphics.RectF: void offset(float,float)>"
"<android.widget.TextView: android.os.LocaleList getImeHintLocales()>","<android.widget.TextView: android.os.LocaleList getImeHintLocales()>"
"<java.time.format.DateTimeFormatter: java.util.Locale getLocale()>","<java.time.format.DateTimeFormatter: java.util.Locale getLocale()>"
"<android.view.ViewGroup: void detachViewFromParent(android.view.View)>","<android.view.ViewGroup: void detachViewFromParent(android.view.View)>"
"<java.io.InputStream: boolean markSupported()>","<java.io.InputStream: boolean markSupported()>"
"<android.media.MediaFormat: int getInteger(java.lang.String,int)>","<android.media.MediaFormat: int getInteger(java.lang.String,int)>"
"<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>","<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>"
"<android.content.Intent: void readFromParcel(android.os.Parcel)>","<android.content.Intent: void readFromParcel(android.os.Parcel)>"
"<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>","<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseAndRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseAndRelease(java.lang.Object[])>"
"<java.util.LongSummaryStatistics: void <init>()>","<java.util.LongSummaryStatistics: void <init>()>"
"<java.net.URLConnection: void setUseCaches(boolean)>","<java.net.URLConnection: void setUseCaches(boolean)>"
"<android.view.MotionEvent: float getHistoricalX(int)>","<android.view.MotionEvent: float getHistoricalX(int)>"
"<android.window.OnBackInvokedDispatcher: void unregisterOnBackInvokedCallback(android.window.OnBackInvokedCallback)>","<android.window.OnBackInvokedDispatcher: void unregisterOnBackInvokedCallback(android.window.OnBackInvokedCallback)>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasSpokenSubtitles(boolean)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasSpokenSubtitles(boolean)>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read()>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read()>"
"<android.media.session.MediaSession$Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPlayFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>","<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>"
"<android.telephony.CellIdentity: void writeToParcel(android.os.Parcel,int)>","<android.telephony.CellIdentity: void writeToParcel(android.os.Parcel,int)>"
"<android.content.SharedPreferences: long getLong(java.lang.String,long)>","<android.content.SharedPreferences: long getLong(java.lang.String,long)>"
"<android.view.textclassifier.TextLinks$TextLinkSpan: void onClick(android.view.View)>","<android.view.textclassifier.TextLinks$TextLinkSpan: void onClick(android.view.View)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.widget.TextView: void setTextCursorDrawable(int)>","<android.widget.TextView: void setTextCursorDrawable(int)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: boolean deleteIfExists(java.nio.file.Path)>"
"<android.hardware.Camera$Parameters: void getPreviewFpsRange(int[])>","<android.hardware.Camera$Parameters: void getPreviewFpsRange(int[])>"
"<java.lang.Character$UnicodeScript: void <init>(java.lang.String,int)>","<java.lang.Character$UnicodeScript: void <init>(java.lang.String,int)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>"
"<android.media.MediaPlayer$OnSeekCompleteListener: void onSeekComplete(android.media.MediaPlayer)>","<android.media.MediaPlayer$OnSeekCompleteListener: void onSeekComplete(android.media.MediaPlayer)>"
"<android.view.textclassifier.TextClassificationSessionId: void <init>()>","<android.view.textclassifier.TextClassificationSessionId: void <init>()>"
"<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>","<android.hardware.camera2.CameraManager: java.lang.String[] getCameraIdList()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
"<android.view.View: void dispatchWindowFocusChanged(boolean)>","<android.view.View: void dispatchWindowFocusChanged(boolean)>"
"<android.net.SocketKeepalive$Callback: void onStopped()>","<android.net.SocketKeepalive$Callback: void onStopped()>"
"<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>","<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.lang.String)>"
"<android.media.AudioRecord: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>","<android.media.AudioRecord: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>"
"<java.util.regex.Matcher: boolean find()>","<java.util.regex.Matcher: boolean find()>"
"<android.view.Window: void setSharedElementExitTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementExitTransition(android.transition.Transition)>"
"<java.util.Locale$Category: java.util.Locale$Category[] values()>","<java.util.Locale$Category: java.util.Locale$Category[] values()>"
"<android.app.VoiceInteractor: void <init>()>","<android.app.VoiceInteractor: void <init>()>"
"<android.media.MediaTimestamp: long getAnchorSystemNanoTime()>","<android.media.MediaTimestamp: long getAnchorSystemNanoTime()>"
"<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()>","<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()>"
"<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()>","<android.content.res.AssetFileDescriptor: android.os.Bundle getExtras()>"
"<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>","<android.net.Uri: java.lang.String getEncodedSchemeSpecificPart()>"
"<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)>","<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)>"
"<java.lang.Character: boolean isJavaIdentifierStart(char)>","<java.lang.Character: boolean isJavaIdentifierStart(char)>"
"<android.app.ActivityManager$AppTask: void setExcludeFromRecents(boolean)>","<android.app.ActivityManager$AppTask: void setExcludeFromRecents(boolean)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(int,byte)>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setWillPauseWhenDucked(boolean)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setWillPauseWhenDucked(boolean)>"
"<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.Condition: boolean await(long,java.util.concurrent.TimeUnit)>"
"<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>","<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>"
"<android.view.Choreographer$FrameData: void <init>()>","<android.view.Choreographer$FrameData: void <init>()>"
"<android.widget.AdapterView: void setFocusableInTouchMode(boolean)>","<android.widget.AdapterView: void setFocusableInTouchMode(boolean)>"
"<java.lang.Character: int toChars(int,char[],int)>","<java.lang.Character: int toChars(int,char[],int)>"
"<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>","<android.widget.TextView: int[] getAutoSizeTextAvailableSizes()>"
"<android.os.Debug: void resetGlobalExternalFreedCount()>","<android.os.Debug: void resetGlobalExternalFreedCount()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.VarHandle arrayElementVarHandle(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.VarHandle arrayElementVarHandle(java.lang.Class)>"
"<java.lang.Character: boolean isJavaIdentifierPart(int)>","<java.lang.Character: boolean isJavaIdentifierPart(int)>"
"<java.lang.Integer: java.lang.String toString()>","<java.lang.Integer: java.lang.String toString()>"
"<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>","<java.text.AttributedCharacterIterator: java.util.Set getAllAttributeKeys()>"
"<android.text.Layout: int getParagraphRight(int)>","<android.text.Layout: int getParagraphRight(int)>"
"<java.time.DayOfWeek: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.DayOfWeek: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])>"
"<android.view.accessibility.AccessibilityRecord: int getAddedCount()>","<android.view.accessibility.AccessibilityRecord: int getAddedCount()>"
"<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>","<org.xmlpull.v1.XmlPullParserException: void printStackTrace()>"
"<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()>","<android.media.AudioTrack: android.media.PlaybackParams getPlaybackParams()>"
"<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>","<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>"
"<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)>","<android.widget.AbsListView: void onLayout(boolean,int,int,int,int)>"
"<android.view.DragAndDropPermissions: void <clinit>()>","<android.view.DragAndDropPermissions: void <clinit>()>"
"<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()>","<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()>"
"<java.time.temporal.TemporalField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>","<java.time.temporal.TemporalField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
"<android.database.sqlite.SQLiteException: void <init>()>","<android.database.sqlite.SQLiteException: void <init>()>"
"<android.graphics.Outline: void <init>(android.graphics.Outline)>","<android.graphics.Outline: void <init>(android.graphics.Outline)>"
"<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>","<android.content.ComponentCallbacks: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getCollapseIcon()>"
"<android.text.Layout: float getLineWidth(int)>","<android.text.Layout: float getLineWidth(int)>"
"<android.widget.RemoteViews: void setViewLayoutMarginDimen(int,int,int)>","<android.widget.RemoteViews: void setViewLayoutMarginDimen(int,int,int)>"
"<android.view.ViewStructure: void setText(java.lang.CharSequence)>","<android.view.ViewStructure: void setText(java.lang.CharSequence)>"
"<android.content.OperationApplicationException: void <init>(java.lang.String,int)>","<android.content.OperationApplicationException: void <init>(java.lang.String,int)>"
"<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener,android.os.Handler)>","<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener,android.os.Handler)>"
"<android.app.Activity: void setProgressBarIndeterminate(boolean)>","<android.app.Activity: void setProgressBarIndeterminate(boolean)>"
"<android.os.Bundle: java.lang.Object[] getParcelableArray(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.lang.Object[] getParcelableArray(java.lang.String,java.lang.Class)>"
"<android.graphics.Paint: boolean isSubpixelText()>","<android.graphics.Paint: boolean isSubpixelText()>"
"<java.time.zone.ZoneOffsetTransition: java.lang.String toString()>","<java.time.zone.ZoneOffsetTransition: java.lang.String toString()>"
"<android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>","<android.view.MenuItem: android.view.MenuItem setIconTintList(android.content.res.ColorStateList)>"
"<android.graphics.Region: boolean quickReject(android.graphics.Region)>","<android.graphics.Region: boolean quickReject(android.graphics.Region)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble max()>","<java.util.stream.DoubleStream: java.util.OptionalDouble max()>"
"<android.os.ParcelFileDescriptor: int describeContents()>","<android.os.ParcelFileDescriptor: int describeContents()>"
"<java.time.ZoneId: int hashCode()>","<java.time.ZoneId: int hashCode()>"
"<java.time.OffsetTime: int getNano()>","<java.time.OffsetTime: int getNano()>"
"<java.net.InetAddress: boolean isAnyLocalAddress()>","<java.net.InetAddress: boolean isAnyLocalAddress()>"
"<java.net.URLConnection: java.lang.String getContentEncoding()>","<java.net.URLConnection: java.lang.String getContentEncoding()>"
"<java.nio.ByteBuffer: float getFloat(int)>","<java.nio.ByteBuffer: float getFloat(int)>"
"<android.media.projection.MediaProjection$Callback: void <init>()>","<android.media.projection.MediaProjection$Callback: void <init>()>"
"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>","<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>"
"<java.lang.Class: boolean isAnonymousClass()>","<java.lang.Class: boolean isAnonymousClass()>"
"<java.lang.Class: boolean isLocalClass()>","<java.lang.Class: boolean isLocalClass()>"
"<java.lang.StringBuffer: void setLength(int)>","<java.lang.StringBuffer: void setLength(int)>"
"<android.view.View: boolean awakenScrollBars()>","<android.view.View: boolean awakenScrollBars()>"
"<android.app.Activity: boolean shouldDockBigOverlays()>","<android.app.Activity: boolean shouldDockBigOverlays()>"
"<android.view.ViewDebug$FlagToString: boolean outputIf()>","<android.view.ViewDebug$FlagToString: boolean outputIf()>"
"<android.net.NetworkCapabilities: boolean hasTransport(int)>","<android.net.NetworkCapabilities: boolean hasTransport(int)>"
"<java.util.Deque: boolean offerLast(java.lang.Object)>","<java.util.Deque: boolean offerLast(java.lang.Object)>"
"<android.view.ViewOverlay: void <init>()>","<android.view.ViewOverlay: void <init>()>"
"<android.app.Activity: void onResume()>","<android.app.Activity: void onResume()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)>"
"<java.text.ParsePosition: void setIndex(int)>","<java.text.ParsePosition: void setIndex(int)>"
"<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>","<android.widget.TextView: void setText(int,android.widget.TextView$BufferType)>"
"<java.lang.Character: char charValue()>","<java.lang.Character: char charValue()>"
"<android.graphics.ColorSpace$Rgb: float[] fromLinear(float,float,float)>","<android.graphics.ColorSpace$Rgb: float[] fromLinear(float,float,float)>"
"<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator)>"
"<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>","<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>"
"<android.view.View: int getSuggestedMinimumHeight()>","<android.view.View: int getSuggestedMinimumHeight()>"
"<android.graphics.drawable.LayerDrawable: boolean isStateful()>","<android.graphics.drawable.LayerDrawable: boolean isStateful()>"
"<android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)>","<android.media.AudioRecord: void startRecording(android.media.MediaSyncEvent)>"
"<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>","<android.content.Context: android.content.Context createConfigurationContext(android.content.res.Configuration)>"
"<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>","<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>"
"<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>","<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>"
"<java.util.Collections: java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)>","<java.util.Collections: java.util.NavigableSet unmodifiableNavigableSet(java.util.NavigableSet)>"
"<android.app.Activity: void setSecondaryProgress(int)>","<android.app.Activity: void setSecondaryProgress(int)>"
"<android.view.View: void setNextFocusRightId(int)>","<android.view.View: void setNextFocusRightId(int)>"
"<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>","<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>"
"<java.lang.String: java.lang.String[] split(java.lang.String)>","<java.lang.String: java.lang.String[] split(java.lang.String)>"
"<android.media.MediaMetadataEditor: java.lang.Object getObject(int,java.lang.Object)>","<android.media.MediaMetadataEditor: java.lang.Object getObject(int,java.lang.Object)>"
"<java.time.OffsetTime: java.time.OffsetTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.OffsetTime: java.time.OffsetTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>","<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>"
"<android.app.Activity: boolean navigateUpTo(android.content.Intent)>","<android.app.Activity: boolean navigateUpTo(android.content.Intent)>"
"<android.graphics.Paint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>","<android.graphics.Paint: float getRunAdvance(java.lang.CharSequence,int,int,int,int,boolean,int)>"
"<android.database.sqlite.SQLiteDatabase: int releaseMemory()>","<android.database.sqlite.SQLiteDatabase: int releaseMemory()>"
"<android.view.ViewStructure: void setTextIdEntry(java.lang.String)>","<android.view.ViewStructure: void setTextIdEntry(java.lang.String)>"
"<java.lang.Math: long floorDiv(long,int)>","<java.lang.Math: long floorDiv(long,int)>"
"<android.media.MediaPlayer$OnSubtitleDataListener: void onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)>","<android.media.MediaPlayer$OnSubtitleDataListener: void onSubtitleData(android.media.MediaPlayer,android.media.SubtitleData)>"
"<android.view.inputmethod.SurroundingText: void <clinit>()>","<android.view.inputmethod.SurroundingText: void <clinit>()>"
"<java.lang.String: boolean startsWith(java.lang.String)>","<java.lang.String: boolean startsWith(java.lang.String)>"
"<android.os.Build$Partition: java.lang.String getFingerprint()>","<android.os.Build$Partition: java.lang.String getFingerprint()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>"
"<java.lang.Integer: int compareTo(java.lang.Object)>","<java.lang.Integer: int compareTo(java.lang.Object)>"
"<android.media.AudioManager: void registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)>","<android.media.AudioManager: void registerAudioDeviceCallback(android.media.AudioDeviceCallback,android.os.Handler)>"
"<android.media.AudioFocusRequest: boolean willPauseWhenDucked()>","<android.media.AudioFocusRequest: boolean willPauseWhenDucked()>"
"<java.lang.String: java.lang.String repeat(int)>","<java.lang.String: java.lang.String repeat(int)>"
"<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>","<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>"
"<java.net.URLConnection: boolean getDoInput()>","<java.net.URLConnection: boolean getDoInput()>"
"<android.media.AudioRecord: int getAudioFormat()>","<android.media.AudioRecord: int getAudioFormat()>"
"<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>","<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Range[] getHighSpeedVideoFpsRanges()>"
"<android.view.View: int getImportantForContentCapture()>","<android.view.View: int getImportantForContentCapture()>"
"<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>","<java.lang.reflect.Field: void setByte(java.lang.Object,byte)>"
"<android.os.Vibrator: void vibrate(long[],int)>","<android.os.Vibrator: void vibrate(long[],int)>"
"<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>","<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>"
"<android.os.BaseBundle: void putInt(java.lang.String,int)>","<android.os.BaseBundle: void putInt(java.lang.String,int)>"
"<java.util.AbstractMap: boolean isEmpty()>","<java.util.AbstractMap: boolean isEmpty()>"
"<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>","<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>"
"<android.telephony.TelephonyManager: boolean isVoiceCapable()>","<android.telephony.TelephonyManager: boolean isVoiceCapable()>"
"<java.util.ListIterator: void remove()>","<java.util.ListIterator: void remove()>"
"<android.content.Intent: java.lang.Object[] getParcelableArrayExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.lang.Object[] getParcelableArrayExtra(java.lang.String,java.lang.Class)>"
"<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>","<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>"
"<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()>","<android.content.pm.SigningInfo: android.content.pm.Signature[] getSigningCertificateHistory()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.app.assist.AssistContent: boolean isAppProvidedWebUri()>","<android.app.assist.AssistContent: boolean isAppProvidedWebUri()>"
"<android.hardware.camera2.CameraManager: void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback)>","<android.hardware.camera2.CameraManager: void unregisterTorchCallback(android.hardware.camera2.CameraManager$TorchCallback)>"
"<android.graphics.SurfaceTexture: int getDataSpace()>","<android.graphics.SurfaceTexture: int getDataSpace()>"
"<java.time.chrono.Chronology: int compareTo(java.lang.Object)>","<java.time.chrono.Chronology: int compareTo(java.lang.Object)>"
"<android.widget.RemoteViews: void setViewLayoutHeightAttr(int,int)>","<android.widget.RemoteViews: void setViewLayoutHeightAttr(int,int)>"
"<java.util.Spliterator$OfInt: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfInt: boolean tryAdvance(java.lang.Object)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>","<java.nio.IntBuffer: java.nio.IntBuffer put(java.nio.IntBuffer)>"
"<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<java.lang.Integer: int parseInt(java.lang.String)>","<java.lang.Integer: int parseInt(java.lang.String)>"
"<android.graphics.Canvas: int getWidth()>","<android.graphics.Canvas: int getWidth()>"
"<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>","<android.text.PrecomputedText: void setSpan(java.lang.Object,int,int,int)>"
"<android.app.PictureInPictureParams$Builder: void <init>()>","<android.app.PictureInPictureParams$Builder: void <init>()>"
"<android.view.textclassifier.TextClassification$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassification$Request: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent createDetailsIntent()>","<android.content.pm.PackageInstaller$SessionInfo: android.content.Intent createDetailsIntent()>"
"<android.content.pm.PackageManager: void <init>()>","<android.content.pm.PackageManager: void <init>()>"
"<android.app.Activity: void onLocalVoiceInteractionStopped()>","<android.app.Activity: void onLocalVoiceInteractionStopped()>"
"<android.media.AudioFormat: int getChannelMask()>","<android.media.AudioFormat: int getChannelMask()>"
"<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>","<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureContext getContentCaptureContext()>"
"<java.io.FileDescriptor: void <init>()>","<java.io.FileDescriptor: void <init>()>"
"<android.graphics.drawable.Drawable: boolean onStateChange(int[])>","<android.graphics.drawable.Drawable: boolean onStateChange(int[])>"
"<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>","<android.app.ActivityManager$TaskDescription: int getNavigationBarColor()>"
"<java.util.AbstractCollection: java.util.Iterator iterator()>","<java.util.AbstractCollection: java.util.Iterator iterator()>"
"<android.view.WindowInsets: android.view.RoundedCorner getRoundedCorner(int)>","<android.view.WindowInsets: android.view.RoundedCorner getRoundedCorner(int)>"
"<java.lang.StringBuffer: void setCharAt(int,char)>","<java.lang.StringBuffer: void setCharAt(int,char)>"
"<android.app.PictureInPictureUiState: void <clinit>()>","<android.app.PictureInPictureUiState: void <clinit>()>"
"<java.lang.StackOverflowError: void <init>(java.lang.String)>","<java.lang.StackOverflowError: void <init>(java.lang.String)>"
"<java.time.DayOfWeek: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.DayOfWeek: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()>","<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float,long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float,long)>"
"<android.view.View: boolean isScreenReaderFocusable()>","<android.view.View: boolean isScreenReaderFocusable()>"
"<android.media.AudioRecord: void setLogSessionId(android.media.metrics.LogSessionId)>","<android.media.AudioRecord: void setLogSessionId(android.media.metrics.LogSessionId)>"
"<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>","<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>"
"<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>","<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>"
"<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>"
"<java.util.Set: boolean contains(java.lang.Object)>","<java.util.Set: boolean contains(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.String toString()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.String toString()>"
"<android.os.IBinder$DeathRecipient: void binderDied()>","<android.os.IBinder$DeathRecipient: void binderDied()>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>","<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List getActionList()>"
"<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>","<android.content.BroadcastReceiver$PendingResult: void abortBroadcast()>"
"<java.time.Period: java.time.Period withDays(int)>","<java.time.Period: java.time.Period withDays(int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>"
"<android.graphics.Path: void offset(float,float,android.graphics.Path)>","<android.graphics.Path: void offset(float,float,android.graphics.Path)>"
"<android.graphics.ColorSpace: java.lang.String getName()>","<android.graphics.ColorSpace: java.lang.String getName()>"
"<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>","<android.media.AudioManager: int abandonAudioFocusRequest(android.media.AudioFocusRequest)>"
"<android.graphics.Color: float luminance(long)>","<android.graphics.Color: float luminance(long)>"
"<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String)>","<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String)>"
"<android.app.Fragment: void onMultiWindowModeChanged(boolean)>","<android.app.Fragment: void onMultiWindowModeChanged(boolean)>"
"<android.net.IpSecManager$ResourceUnavailableException: void <init>()>","<android.net.IpSecManager$ResourceUnavailableException: void <init>()>"
"<android.util.SparseBooleanArray: void append(int,boolean)>","<android.util.SparseBooleanArray: void append(int,boolean)>"
"<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelIndexMask(int)>","<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelIndexMask(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusMonths(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusMonths(long)>"
"<java.net.URLConnection: void connect()>","<java.net.URLConnection: void connect()>"
"<android.util.TypedValue: void <init>()>","<android.util.TypedValue: void <init>()>"
"<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>","<android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)>"
"<java.lang.ThreadGroup: boolean isDaemon()>","<java.lang.ThreadGroup: boolean isDaemon()>"
"<android.hardware.Camera$Parameters: java.lang.String getColorEffect()>","<android.hardware.Camera$Parameters: java.lang.String getColorEffect()>"
"<android.view.View: android.view.View focusSearch(int)>","<android.view.View: android.view.View focusSearch(int)>"
"<android.widget.RemoteViews: void setViewLayoutHeightDimen(int,int)>","<android.widget.RemoteViews: void setViewLayoutHeightDimen(int,int)>"
"<android.view.ViewStructure: void setChecked(boolean)>","<android.view.ViewStructure: void setChecked(boolean)>"
"<android.app.Activity: void recreate()>","<android.app.Activity: void recreate()>"
"<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: void delete(java.nio.file.Path)>"
"<java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle bindTo(java.lang.Object)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle bindTo(java.lang.Object)>"
"<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.function.Consumer)>","<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.function.Consumer)>"
"<android.hardware.lights.Light: boolean equals(java.lang.Object)>","<android.hardware.lights.Light: boolean equals(java.lang.Object)>"
"<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.util.NavigableSet: java.lang.Object pollFirst()>","<java.util.NavigableSet: java.lang.Object pollFirst()>"
"<android.telephony.SignalStrength: int hashCode()>","<android.telephony.SignalStrength: int hashCode()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.content.Loader: void onContentChanged()>","<android.content.Loader: void onContentChanged()>"
"<android.media.AudioRouting: boolean setPreferredDevice(android.media.AudioDeviceInfo)>","<android.media.AudioRouting: boolean setPreferredDevice(android.media.AudioDeviceInfo)>"
"<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>","<android.database.Cursor: void registerDataSetObserver(android.database.DataSetObserver)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithExplicitEntityList(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithExplicitEntityList(java.util.Collection)>"
"<android.net.Network: javax.net.SocketFactory getSocketFactory()>","<android.net.Network: javax.net.SocketFactory getSocketFactory()>"
"<android.content.pm.ServiceInfo: java.lang.String toString()>","<android.content.pm.ServiceInfo: java.lang.String toString()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream distinct()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream distinct()>"
"<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>","<android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>"
"<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>","<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.View: void onPointerCaptureChange(boolean)>","<android.view.View: void onPointerCaptureChange(boolean)>"
"<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>","<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>"
"<android.hardware.Camera: void startPreview()>","<android.hardware.Camera: void startPreview()>"
"<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>","<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>"
"<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>","<java.util.Arrays: java.lang.String deepToString(java.lang.Object[])>"
"<java.util.Arrays: void sort(byte[],int,int)>","<java.util.Arrays: void sort(byte[],int,int)>"
"<android.content.IntentFilter: java.util.Iterator schemesIterator()>","<android.content.IntentFilter: java.util.Iterator schemesIterator()>"
"<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>","<android.app.Fragment: java.lang.String getString(int,java.lang.Object[])>"
"<android.graphics.Color: float alpha()>","<android.graphics.Color: float alpha()>"
"<java.lang.Object: java.lang.Class getClass()>","<java.lang.Object: java.lang.Class getClass()>"
"<android.view.View: int getVerticalScrollbarPosition()>","<android.view.View: int getVerticalScrollbarPosition()>"
"<android.graphics.Paint: float getShadowLayerDy()>","<android.graphics.Paint: float getShadowLayerDy()>"
"<android.media.session.MediaSessionManager: void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>","<android.media.session.MediaSessionManager: void addOnMediaKeyEventSessionChangedListener(java.util.concurrent.Executor,android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>"
"<android.graphics.Insets: void <clinit>()>","<android.graphics.Insets: void <clinit>()>"
"<android.view.MotionEvent: float getHistoricalTouchMajor(int)>","<android.view.MotionEvent: float getHistoricalTouchMajor(int)>"
"<java.text.FieldPosition: void <init>(java.text.Format$Field)>","<java.text.FieldPosition: void <init>(java.text.Format$Field)>"
"<android.util.Printer: void println(java.lang.String)>","<android.util.Printer: void println(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>"
"<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>"
"<java.io.File: long getTotalSpace()>","<java.io.File: long getTotalSpace()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: int describeContents()>","<android.app.VoiceInteractor$PickOptionRequest$Option: int describeContents()>"
"<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>","<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>"
"<java.util.Collections: java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)>","<java.util.Collections: java.util.NavigableMap unmodifiableNavigableMap(java.util.NavigableMap)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()>","<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFormats()>"
"<android.util.LongSparseArray: void delete(long)>","<android.util.LongSparseArray: void delete(long)>"
"<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)>","<android.media.AudioManager: int requestAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener,int,int)>"
"<android.view.KeyCharacterMap: int describeContents()>","<android.view.KeyCharacterMap: int describeContents()>"
"<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)>","<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)>"
"<java.lang.reflect.Modifier: boolean isNative(int)>","<java.lang.reflect.Modifier: boolean isNative(int)>"
"<android.transition.Scene: void enter()>","<android.transition.Scene: void enter()>"
"<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>","<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>"
"<android.content.DialogInterface$OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>","<android.content.DialogInterface$OnKeyListener: boolean onKey(android.content.DialogInterface,int,android.view.KeyEvent)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.function.IntFunction: java.lang.Object apply(int)>","<java.util.function.IntFunction: java.lang.Object apply(int)>"
"<java.security.Provider: double getVersion()>","<java.security.Provider: double getVersion()>"
"<android.os.Debug$MemoryInfo: void <clinit>()>","<android.os.Debug$MemoryInfo: void <clinit>()>"
"<android.hardware.camera2.params.OutputConfiguration: java.util.Collection createInstancesForMultiResolutionOutput(android.hardware.camera2.MultiResolutionImageReader)>","<android.hardware.camera2.params.OutputConfiguration: java.util.Collection createInstancesForMultiResolutionOutput(android.hardware.camera2.MultiResolutionImageReader)>"
"<android.view.Window: void setNavigationBarContrastEnforced(boolean)>","<android.view.Window: void setNavigationBarContrastEnforced(boolean)>"
"<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>","<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>"
"<java.lang.Float: boolean equals(java.lang.Object)>","<java.lang.Float: boolean equals(java.lang.Object)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void release()>","<android.view.SurfaceControlViewHost$SurfacePackage: void release()>"
"<android.media.SyncParams: float getTolerance()>","<android.media.SyncParams: float getTolerance()>"
"<android.view.ViewGroup: android.view.ViewOverlay getOverlay()>","<android.view.ViewGroup: android.view.ViewOverlay getOverlay()>"
"<android.media.AudioFormat: int getFrameSizeInBytes()>","<android.media.AudioFormat: int getFrameSizeInBytes()>"
"<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>","<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>"
"<android.hardware.camera2.params.MultiResolutionStreamInfo: boolean equals(java.lang.Object)>","<android.hardware.camera2.params.MultiResolutionStreamInfo: boolean equals(java.lang.Object)>"
"<android.hardware.camera2.CameraDevice$StateCallback: void onOpened(android.hardware.camera2.CameraDevice)>","<android.hardware.camera2.CameraDevice$StateCallback: void onOpened(android.hardware.camera2.CameraDevice)>"
"<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>","<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>"
"<java.time.format.DecimalStyle: int hashCode()>","<java.time.format.DecimalStyle: int hashCode()>"
"<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>","<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>"
"<android.content.res.Resources$Theme: void <init>(android.content.res.Resources)>","<android.content.res.Resources$Theme: void <init>(android.content.res.Resources)>"
"<android.widget.AbsListView: void invalidateViews()>","<android.widget.AbsListView: void invalidateViews()>"
"<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>","<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isSelected()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isSelected()>"
"<android.graphics.RenderNode: float getScaleX()>","<android.graphics.RenderNode: float getScaleX()>"
"<android.telephony.ServiceState: java.lang.String toString()>","<android.telephony.ServiceState: java.lang.String toString()>"
"<android.content.Intent: android.content.Intent setAction(java.lang.String)>","<android.content.Intent: android.content.Intent setAction(java.lang.String)>"
"<android.animation.Animator: long getTotalDuration()>","<android.animation.Animator: long getTotalDuration()>"
"<android.app.Activity: boolean requestVisibleBehind(boolean)>","<android.app.Activity: boolean requestVisibleBehind(boolean)>"
"<android.view.textclassifier.TextClassification: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassification: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.TextView: java.lang.CharSequence getHint()>","<android.widget.TextView: java.lang.CharSequence getHint()>"
"<java.util.Arrays: int mismatch(int[],int[])>","<java.util.Arrays: int mismatch(int[],int[])>"
"<android.view.inputmethod.InputMethodManager: void invalidateInput(android.view.View)>","<android.view.inputmethod.InputMethodManager: void invalidateInput(android.view.View)>"
"<android.util.SparseArray: void put(int,java.lang.Object)>","<android.util.SparseArray: void put(int,java.lang.Object)>"
"<java.lang.Character: boolean isSpaceChar(int)>","<java.lang.Character: boolean isSpaceChar(int)>"
"<android.content.AttributionSource: void enforceCallingUid()>","<android.content.AttributionSource: void enforceCallingUid()>"
"<android.view.Window: void setFlags(int,int)>","<android.view.Window: void setFlags(int,int)>"
"<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)>","<android.content.IntentSender$SendIntentException: void <init>(java.lang.String)>"
"<android.animation.ValueAnimator: void setIntValues(int[])>","<android.animation.ValueAnimator: void setIntValues(int[])>"
"<android.media.MediaFormat: java.util.Set getKeys()>","<android.media.MediaFormat: java.util.Set getKeys()>"
"<android.app.Dialog: void <init>(android.content.Context,int)>","<android.app.Dialog: void <init>(android.content.Context,int)>"
"<android.media.AudioRecord: void <init>(int,int,int,int,int)>","<android.media.AudioRecord: void <init>(int,int,int,int,int)>"
"<android.net.ConnectivityManager$NetworkCallback: void <init>(int)>","<android.net.ConnectivityManager$NetworkCallback: void <init>(int)>"
"<javax.net.SocketFactory: void <init>()>","<javax.net.SocketFactory: void <init>()>"
"<java.net.SocketImpl: void close()>","<java.net.SocketImpl: void close()>"
"<java.nio.channels.Selector: java.util.Set selectedKeys()>","<java.nio.channels.Selector: java.util.Set selectedKeys()>"
"<android.view.MotionEvent$PointerCoords: void <init>()>","<android.view.MotionEvent$PointerCoords: void <init>()>"
"<android.media.VolumeProvider: void setCurrentVolume(int)>","<android.media.VolumeProvider: void setCurrentVolume(int)>"
"<android.database.Cursor: byte[] getBlob(int)>","<android.database.Cursor: byte[] getBlob(int)>"
"<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>","<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>"
"<java.net.Socket: int getLocalPort()>","<java.net.Socket: int getLocalPort()>"
"<java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()>","<android.telephony.RadioAccessSpecifier: int getRadioAccessNetwork()>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>"
"<java.lang.Character: boolean isJavaIdentifierPart(char)>","<java.lang.Character: boolean isJavaIdentifierPart(char)>"
"<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>","<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>"
"<android.app.AlertDialog: void setView(android.view.View)>","<android.app.AlertDialog: void setView(android.view.View)>"
"<android.media.MediaPlayer: int getSelectedTrack(int)>","<android.media.MediaPlayer: int getSelectedTrack(int)>"
"<android.view.Surface: void finalize()>","<android.view.Surface: void finalize()>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getStagedSessionErrorMessage()>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioFormat(android.media.AudioFormat)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioFormat(android.media.AudioFormat)>"
"<android.net.NetworkInfo: java.lang.String getTypeName()>","<android.net.NetworkInfo: java.lang.String getTypeName()>"
"<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>"
"<android.util.SparseBooleanArray: void clear()>","<android.util.SparseBooleanArray: void clear()>"
"<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>","<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>"
"<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>","<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>"
"<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>","<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>"
"<android.media.MediaDrm$KeyRequest: void <init>()>","<android.media.MediaDrm$KeyRequest: void <init>()>"
"<android.content.pm.VersionedPackage: java.lang.String getPackageName()>","<android.content.pm.VersionedPackage: java.lang.String getPackageName()>"
"<android.media.session.PlaybackState$CustomAction: void <init>()>","<android.media.session.PlaybackState$CustomAction: void <init>()>"
"<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>","<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>"
"<java.time.chrono.IsoEra: java.time.chrono.IsoEra valueOf(java.lang.String)>","<java.time.chrono.IsoEra: java.time.chrono.IsoEra valueOf(java.lang.String)>"
"<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>","<android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])>"
"<android.content.ClipData: android.content.ClipDescription getDescription()>","<android.content.ClipData: android.content.ClipDescription getDescription()>"
"<java.lang.StackTraceElement: java.lang.String getClassName()>","<java.lang.StackTraceElement: java.lang.String getClassName()>"
"<java.util.Properties: void load(java.io.InputStream)>","<java.util.Properties: void load(java.io.InputStream)>"
"<android.media.AudioPresentation: boolean equals(java.lang.Object)>","<android.media.AudioPresentation: boolean equals(java.lang.Object)>"
"<java.io.FileNotFoundException: void <init>()>","<java.io.FileNotFoundException: void <init>()>"
"<android.media.session.MediaSession: void release()>","<android.media.session.MediaSession: void release()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>"
"<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>","<java.util.Optional: java.util.Optional filter(java.util.function.Predicate)>"
"<java.net.InetAddress: java.lang.String getCanonicalHostName()>","<java.net.InetAddress: java.lang.String getCanonicalHostName()>"
"<android.media.MediaFormat: int getValueTypeForKey(java.lang.String)>","<android.media.MediaFormat: int getValueTypeForKey(java.lang.String)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer put(int[],int,int)>"
"<android.os.Parcel: void writeException(java.lang.Exception)>","<android.os.Parcel: void writeException(java.lang.Exception)>"
"<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>","<android.widget.TextView: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>"
"<java.lang.Boolean: int compare(boolean,boolean)>","<java.lang.Boolean: int compare(boolean,boolean)>"
"<java.io.InputStream: void reset()>","<java.io.InputStream: void reset()>"
"<android.os.Build$VERSION_CODES: void <init>()>","<android.os.Build$VERSION_CODES: void <init>()>"
"<android.view.autofill.AutofillValue: void <clinit>()>","<android.view.autofill.AutofillValue: void <clinit>()>"
"<android.widget.TextView: void beginBatchEdit()>","<android.widget.TextView: void beginBatchEdit()>"
"<java.time.Period: java.time.Period of(int,int,int)>","<java.time.Period: java.time.Period of(int,int,int)>"
"<android.view.DragEvent: android.content.ClipData getClipData()>","<android.view.DragEvent: android.content.ClipData getClipData()>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect()>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect()>"
"<android.media.MediaMetadataEditor: void removeEditableKeys()>","<android.media.MediaMetadataEditor: void removeEditableKeys()>"
"<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>","<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()>"
"<java.lang.Package: java.lang.String getSpecificationVersion()>","<java.lang.Package: java.lang.String getSpecificationVersion()>"
"<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>"
"<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>","<java.nio.file.FileSystem: java.nio.file.attribute.UserPrincipalLookupService getUserPrincipalLookupService()>"
"<android.view.autofill.AutofillId: java.lang.String toString()>","<android.view.autofill.AutofillId: java.lang.String toString()>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setExtras(android.os.Bundle)>"
"<android.transition.Transition: java.util.List getTargetTypes()>","<android.transition.Transition: java.util.List getTargetTypes()>"
"<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>","<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>"
"<org.xmlpull.v1.XmlPullParser: int getLineNumber()>","<org.xmlpull.v1.XmlPullParser: int getLineNumber()>"
"<java.lang.Thread: void checkAccess()>","<java.lang.Thread: void checkAccess()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoPeriod period(int,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoPeriod period(int,int,int)>"
"<android.os.Debug$InstructionCount: int globalTotal()>","<android.os.Debug$InstructionCount: int globalTotal()>"
"<java.util.LongSummaryStatistics: void accept(long)>","<java.util.LongSummaryStatistics: void accept(long)>"
"<android.hardware.camera2.MultiResolutionImageReader: void close()>","<android.hardware.camera2.MultiResolutionImageReader: void close()>"
"<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>","<android.app.Dialog: boolean onSearchRequested(android.view.SearchEvent)>"
"<android.view.inputmethod.InputMethodManager: void toggleSoftInputFromWindow(android.os.IBinder,int,int)>","<android.view.inputmethod.InputMethodManager: void toggleSoftInputFromWindow(android.os.IBinder,int,int)>"
"<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>"
"<android.telephony.IccOpenLogicalChannelResponse: byte[] getSelectResponse()>","<android.telephony.IccOpenLogicalChannelResponse: byte[] getSelectResponse()>"
"<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>","<android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])>"
"<java.time.chrono.ChronoLocalDate: int hashCode()>","<java.time.chrono.ChronoLocalDate: int hashCode()>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>","<android.content.ContentResolver: java.lang.String getType(android.net.Uri)>"
"<android.animation.Animator$AnimatorPauseListener: void onAnimationPause(android.animation.Animator)>","<android.animation.Animator$AnimatorPauseListener: void onAnimationPause(android.animation.Animator)>"
"<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>","<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>"
"<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>","<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>"
"<android.view.ViewGroup: void dispatchStartTemporaryDetach()>","<android.view.ViewGroup: void dispatchStartTemporaryDetach()>"
"<android.content.pm.PackageManager: int checkSignatures(int,int)>","<android.content.pm.PackageManager: int checkSignatures(int,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setReferenceTime(java.time.ZonedDateTime)>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setReferenceTime(java.time.ZonedDateTime)>"
"<android.graphics.Paint: float getStrokeWidth()>","<android.graphics.Paint: float getStrokeWidth()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int,int)>"
"<android.view.textclassifier.TextLinks$TextLink: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLinks$TextLink: android.os.Bundle getExtras()>"
"<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>","<java.util.Properties: void save(java.io.OutputStream,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>"
"<android.app.FragmentManager: void popBackStack(int,int)>","<android.app.FragmentManager: void popBackStack(int,int)>"
"<android.view.Menu: void close()>","<android.view.Menu: void close()>"
"<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>","<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>"
"<java.lang.Character: boolean isUnicodeIdentifierStart(int)>","<java.lang.Character: boolean isUnicodeIdentifierStart(int)>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab)>"
"<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>","<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>"
"<android.graphics.Canvas: void <init>()>","<android.graphics.Canvas: void <init>()>"
"<android.content.Loader: boolean cancelLoad()>","<android.content.Loader: boolean cancelLoad()>"
"<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>","<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>"
"<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>","<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>"
"<java.util.OptionalInt: int orElseThrow(java.util.function.Supplier)>","<java.util.OptionalInt: int orElseThrow(java.util.function.Supplier)>"
"<android.view.textclassifier.ConversationActions$Request: int getMaxSuggestions()>","<android.view.textclassifier.ConversationActions$Request: int getMaxSuggestions()>"
"<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>"
"<java.util.Arrays: void parallelSetAll(long[],java.util.function.IntToLongFunction)>","<java.util.Arrays: void parallelSetAll(long[],java.util.function.IntToLongFunction)>"
"<java.time.LocalDate: int lengthOfMonth()>","<java.time.LocalDate: int lengthOfMonth()>"
"<android.os.Process: int getGidForName(java.lang.String)>","<android.os.Process: int getGidForName(java.lang.String)>"
"<android.view.Window: int getNavigationBarColor()>","<android.view.Window: int getNavigationBarColor()>"
"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(java.time.Instant)>","<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(java.time.Instant)>"
"<java.lang.Math: double log10(double)>","<java.lang.Math: double log10(double)>"
"<org.xmlpull.v1.XmlSerializer: void setProperty(java.lang.String,java.lang.Object)>","<org.xmlpull.v1.XmlSerializer: void setProperty(java.lang.String,java.lang.Object)>"
"<android.graphics.Canvas: boolean isHardwareAccelerated()>","<android.graphics.Canvas: boolean isHardwareAccelerated()>"
"<android.hardware.camera2.params.SessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>","<android.hardware.camera2.params.SessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$StateCallback)>"
"<android.media.AudioTrack$StreamEventCallback: void onPresentationEnded(android.media.AudioTrack)>","<android.media.AudioTrack$StreamEventCallback: void onPresentationEnded(android.media.AudioTrack)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setHyphenationFrequency(int)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setHyphenationFrequency(int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPaused(android.app.FragmentManager,android.app.Fragment)>"
"<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>","<android.os.BaseBundle: void putLongArray(java.lang.String,long[])>"
"<android.os.Debug: void resetGlobalGcInvocationCount()>","<android.os.Debug: void resetGlobalGcInvocationCount()>"
"<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>","<android.app.AlertDialog: void setIcon(android.graphics.drawable.Drawable)>"
"<android.widget.Toolbar: void onRestoreInstanceState(android.os.Parcelable)>","<android.widget.Toolbar: void onRestoreInstanceState(android.os.Parcelable)>"
"<java.util.Optional: java.util.Optional empty()>","<java.util.Optional: java.util.Optional empty()>"
"<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>","<android.content.pm.PackageInstaller$Session: void setStagingProgress(float)>"
"<android.graphics.drawable.BitmapDrawable: void setDither(boolean)>","<android.graphics.drawable.BitmapDrawable: void setDither(boolean)>"
"<android.widget.MediaController: void <init>(android.content.Context,boolean)>","<android.widget.MediaController: void <init>(android.content.Context,boolean)>"
"<java.nio.file.attribute.AttributeView: java.lang.String name()>","<java.nio.file.attribute.AttributeView: java.lang.String name()>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.view.Window: void setSoftInputMode(int)>","<android.view.Window: void setSoftInputMode(int)>"
"<android.content.ClipDescription: java.lang.CharSequence getLabel()>","<android.content.ClipDescription: java.lang.CharSequence getLabel()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>"
"<java.util.Set: java.util.Spliterator spliterator()>","<java.util.Set: java.util.Spliterator spliterator()>"
"<android.telephony.data.ApnSetting: int getApnTypeBitmask()>","<android.telephony.data.ApnSetting: int getApnTypeBitmask()>"
"<android.media.TimedMetaData: byte[] getMetaData()>","<android.media.TimedMetaData: byte[] getMetaData()>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>"
"<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>","<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>"
"<android.os.Message: void writeToParcel(android.os.Parcel,int)>","<android.os.Message: void writeToParcel(android.os.Parcel,int)>"
"<java.io.Writer: void close()>","<java.io.Writer: void close()>"
"<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>","<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>"
"<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>","<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>"
"<android.animation.ValueAnimator: android.animation.Animator setDuration(long)>","<android.animation.ValueAnimator: android.animation.Animator setDuration(long)>"
"<android.view.DragEvent: float getX()>","<android.view.DragEvent: float getX()>"
"<android.os.LocaleList: void setDefault(android.os.LocaleList)>","<android.os.LocaleList: void setDefault(android.os.LocaleList)>"
"<android.view.MenuItem: android.view.MenuItem setActionView(int)>","<android.view.MenuItem: android.view.MenuItem setActionView(int)>"
"<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>","<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>"
"<android.util.SizeF: boolean equals(java.lang.Object)>","<android.util.SizeF: boolean equals(java.lang.Object)>"
"<android.hardware.HardwareBuffer: android.hardware.HardwareBuffer create(int,int,int,int,long)>","<android.hardware.HardwareBuffer: android.hardware.HardwareBuffer create(int,int,int,int,long)>"
"<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>","<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>"
"<java.util.SortedSet: java.lang.Object first()>","<java.util.SortedSet: java.lang.Object first()>"
"<android.content.ContentResolver: boolean getMasterSyncAutomatically()>","<android.content.ContentResolver: boolean getMasterSyncAutomatically()>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot()>"
"<android.telephony.ServiceState: boolean isSearching()>","<android.telephony.ServiceState: boolean isSearching()>"
"<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>","<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>"
"<android.view.SurfaceControlViewHost: void release()>","<android.view.SurfaceControlViewHost: void release()>"
"<android.content.Context: java.io.File getExternalCacheDir()>","<android.content.Context: java.io.File getExternalCacheDir()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
"<java.lang.System: void gc()>","<java.lang.System: void gc()>"
"<android.app.Activity: void startPostponedEnterTransition()>","<android.app.Activity: void startPostponedEnterTransition()>"
"<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.BlendMode)>","<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.BlendMode)>"
"<android.media.AudioManager: void removeOnCommunicationDeviceChangedListener(android.media.AudioManager$OnCommunicationDeviceChangedListener)>","<android.media.AudioManager: void removeOnCommunicationDeviceChangedListener(android.media.AudioManager$OnCommunicationDeviceChangedListener)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)>"
"<android.view.View: boolean restoreDefaultFocus()>","<android.view.View: boolean restoreDefaultFocus()>"
"<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>","<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>"
"<android.app.Activity: void dismissDialog(int)>","<android.app.Activity: void dismissDialog(int)>"
"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>"
"<android.media.AudioManager: int getStreamMinVolume(int)>","<android.media.AudioManager: int getStreamMinVolume(int)>"
"<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)>","<android.text.PrecomputedText: int getSpanFlags(java.lang.Object)>"
"<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>","<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>","<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>"
"<java.time.format.FormatStyle: void <init>(java.lang.String,int)>","<java.time.format.FormatStyle: void <init>(java.lang.String,int)>"
"<java.nio.channels.FileLock: long position()>","<java.nio.channels.FileLock: long position()>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.app.Activity: void onEnterAnimationComplete()>","<android.app.Activity: void onEnterAnimationComplete()>"
"<java.lang.StackTraceElement: java.lang.String getFileName()>","<java.lang.StackTraceElement: java.lang.String getFileName()>"
"<android.hardware.camera2.params.OutputConfiguration: void enableSurfaceSharing()>","<android.hardware.camera2.params.OutputConfiguration: void enableSurfaceSharing()>"
"<android.content.pm.ApplicationInfo: boolean isResourceOverlay()>","<android.content.pm.ApplicationInfo: boolean isResourceOverlay()>"
"<android.telephony.TelephonyManager: void <clinit>()>","<android.telephony.TelephonyManager: void <clinit>()>"
"<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>","<android.content.pm.PackageManager: boolean addPermission(android.content.pm.PermissionInfo)>"
"<android.app.PictureInPictureUiState: boolean isStashed()>","<android.app.PictureInPictureUiState: boolean isStashed()>"
"<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureSearch(android.os.CancellationSignal,java.util.function.Consumer)>","<android.view.ScrollCaptureCallback: void onScrollCaptureSearch(android.os.CancellationSignal,java.util.function.Consumer)>"
"<android.os.Debug$MemoryInfo: int getTotalPrivateClean()>","<android.os.Debug$MemoryInfo: int getTotalPrivateClean()>"
"<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>","<android.view.MenuItem: android.graphics.drawable.Drawable getIcon()>"
"<java.util.Random: java.util.stream.LongStream longs()>","<java.util.Random: java.util.stream.LongStream longs()>"
"<android.text.Spannable$Factory: void <init>()>","<android.text.Spannable$Factory: void <init>()>"
"<java.lang.IndexOutOfBoundsException: void <init>()>","<java.lang.IndexOutOfBoundsException: void <init>()>"
"<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,int[])>","<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,int[])>"
"<android.view.textclassifier.TextClassifierEvent: int getEventType()>","<android.view.textclassifier.TextClassifierEvent: int getEventType()>"
"<android.view.accessibility.AccessibilityRecord: int getItemCount()>","<android.view.accessibility.AccessibilityRecord: int getItemCount()>"
"<java.nio.file.LinkOption: java.nio.file.LinkOption[] values()>","<java.nio.file.LinkOption: java.nio.file.LinkOption[] values()>"
"<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.TextClassifier$EntityConfig getTypeConfig()>","<android.view.textclassifier.ConversationActions$Request: android.view.textclassifier.TextClassifier$EntityConfig getTypeConfig()>"
"<android.media.AudioTrack: int setPlaybackRate(int)>","<android.media.AudioTrack: int setPlaybackRate(int)>"
"<android.graphics.Rect: void inset(android.graphics.Insets)>","<android.graphics.Rect: void inset(android.graphics.Insets)>"
"<java.time.ZonedDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: long getLong(java.time.temporal.TemporalField)>"
"<java.util.function.IntUnaryOperator: int applyAsInt(int)>","<java.util.function.IntUnaryOperator: int applyAsInt(int)>"
"<java.lang.Short: int compareUnsigned(short,short)>","<java.lang.Short: int compareUnsigned(short,short)>"
"<android.view.ViewTreeObserver$OnPreDrawListener: boolean onPreDraw()>","<android.view.ViewTreeObserver$OnPreDrawListener: boolean onPreDraw()>"
"<android.view.View: boolean isAttachedToWindow()>","<android.view.View: boolean isAttachedToWindow()>"
"<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>","<java.lang.ClassLoader: java.util.Enumeration getSystemResources(java.lang.String)>"
"<android.media.AudioTrack: int getOffloadDelay()>","<android.media.AudioTrack: int getOffloadDelay()>"
"<java.util.List: int lastIndexOf(java.lang.Object)>","<java.util.List: int lastIndexOf(java.lang.Object)>"
"<android.graphics.drawable.Drawable$ConstantState: int getChangingConfigurations()>","<android.graphics.drawable.Drawable$ConstantState: int getChangingConfigurations()>"
"<android.text.Layout: int getParagraphDirection(int)>","<android.text.Layout: int getParagraphDirection(int)>"
"<android.widget.ListView: void addHeaderView(android.view.View)>","<android.widget.ListView: void addHeaderView(android.view.View)>"
"<android.view.KeyEvent: int normalizeMetaState(int)>","<android.view.KeyEvent: int normalizeMetaState(int)>"
"<android.media.MediaMetadata$Builder: void <init>()>","<android.media.MediaMetadata$Builder: void <init>()>"
"<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String)>"
"<java.net.NetworkInterface: byte[] getHardwareAddress()>","<java.net.NetworkInterface: byte[] getHardwareAddress()>"
"<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>","<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>"
"<android.media.Spatializer: boolean isAvailable()>","<android.media.Spatializer: boolean isAvailable()>"
"<android.os.Bundle: float getFloat(java.lang.String,float)>","<android.os.Bundle: float getFloat(java.lang.String,float)>"
"<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.stream.Stream$Builder: void accept(java.lang.Object)>","<java.util.stream.Stream$Builder: void accept(java.lang.Object)>"
"<android.content.Context: android.content.Context createWindowContext(int,android.os.Bundle)>","<android.content.Context: android.content.Context createWindowContext(int,android.os.Bundle)>"
"<org.xmlpull.v1.XmlPullParser: void <clinit>()>","<org.xmlpull.v1.XmlPullParser: void <clinit>()>"
"<android.widget.TextView: float getTextScaleX()>","<android.widget.TextView: float getTextScaleX()>"
"<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>","<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)>"
"<java.net.URLConnection: boolean getAllowUserInteraction()>","<java.net.URLConnection: boolean getAllowUserInteraction()>"
"<java.net.URI: java.lang.String getSchemeSpecificPart()>","<java.net.URI: java.lang.String getSchemeSpecificPart()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(int)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(int)>"
"<android.telephony.IccOpenLogicalChannelResponse: void writeToParcel(android.os.Parcel,int)>","<android.telephony.IccOpenLogicalChannelResponse: void writeToParcel(android.os.Parcel,int)>"
"<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onReady(android.hardware.camera2.CameraOfflineSession)>","<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onReady(android.hardware.camera2.CameraOfflineSession)>"
"<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>","<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetRight(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetRight(int,int)>"
"<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>","<android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)>"
"<android.app.AlertDialog: void setIconAttribute(int)>","<android.app.AlertDialog: void setIconAttribute(int)>"
"<android.media.MediaPlayer: android.media.MediaTimestamp getTimestamp()>","<android.media.MediaPlayer: android.media.MediaTimestamp getTimestamp()>"
"<java.nio.file.WatchEvent: int count()>","<java.nio.file.WatchEvent: int count()>"
"<java.util.Random: boolean nextBoolean()>","<java.util.Random: boolean nextBoolean()>"
"<java.time.Month: java.time.Month[] values()>","<java.time.Month: java.time.Month[] values()>"
"<android.graphics.Paint: void setAlpha(int)>","<android.graphics.Paint: void setAlpha(int)>"
"<android.app.FragmentManager: int getBackStackEntryCount()>","<android.app.FragmentManager: int getBackStackEntryCount()>"
"<android.hardware.camera2.CaptureFailure: int getSequenceId()>","<android.hardware.camera2.CaptureFailure: int getSequenceId()>"
"<android.net.Uri: android.net.Uri parse(java.lang.String)>","<android.net.Uri: android.net.Uri parse(java.lang.String)>"
"<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>","<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>"
"<android.os.Handler: boolean hasMessages(int,java.lang.Object)>","<android.os.Handler: boolean hasMessages(int,java.lang.Object)>"
"<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>","<android.content.ContextWrapper: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.graphics.drawable.LayerDrawable: int getEndPadding()>","<android.graphics.drawable.LayerDrawable: int getEndPadding()>"
"<android.view.SurfaceView: void setVisibility(int)>","<android.view.SurfaceView: void setVisibility(int)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>"
"<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>"
"<android.hardware.camera2.CaptureRequest$Key: boolean equals(java.lang.Object)>","<android.hardware.camera2.CaptureRequest$Key: boolean equals(java.lang.Object)>"
"<android.view.MotionEvent: void setSource(int)>","<android.view.MotionEvent: void setSource(int)>"
"<java.util.Spliterator: long getExactSizeIfKnown()>","<java.util.Spliterator: long getExactSizeIfKnown()>"
"<android.telephony.SignalStrengthUpdateRequest: java.lang.String toString()>","<android.telephony.SignalStrengthUpdateRequest: java.lang.String toString()>"
"<android.animation.ValueAnimator: java.lang.Object clone()>","<android.animation.ValueAnimator: java.lang.Object clone()>"
"<java.lang.Math: double fma(double,double,double)>","<java.lang.Math: double fma(double,double,double)>"
"<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>"
"<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>","<android.view.inputmethod.InputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>"
"<java.lang.Short: float floatValue()>","<java.lang.Short: float floatValue()>"
"<java.lang.reflect.Modifier: void <init>()>","<java.lang.reflect.Modifier: void <init>()>"
"<java.lang.Byte: byte parseByte(java.lang.String,int)>","<java.lang.Byte: byte parseByte(java.lang.String,int)>"
"<android.widget.AdapterView: void onProvideAutofillStructure(android.view.ViewStructure,int)>","<android.widget.AdapterView: void onProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.media.AudioManager: void setStreamVolume(int,int,int)>","<android.media.AudioManager: void setStreamVolume(int,int,int)>"
"<android.transition.TransitionManager: void <init>()>","<android.transition.TransitionManager: void <init>()>"
"<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()>","<android.media.AudioRecordingConfiguration: android.media.AudioFormat getClientFormat()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExpedited(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExpedited(boolean)>"
"<java.nio.channels.FileChannel: long position()>","<java.nio.channels.FileChannel: long position()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer slice()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer slice()>"
"<android.view.textclassifier.TextSelection: android.view.textclassifier.TextClassification getTextClassification()>","<android.view.textclassifier.TextSelection: android.view.textclassifier.TextClassification getTextClassification()>"
"<android.os.Debug: void startAllocCounting()>","<android.os.Debug: void startAllocCounting()>"
"<java.util.AbstractMap: int size()>","<java.util.AbstractMap: int size()>"
"<android.telephony.RadioAccessSpecifier: void <clinit>()>","<android.telephony.RadioAccessSpecifier: void <clinit>()>"
"<java.lang.reflect.Field: java.lang.Class getType()>","<java.lang.reflect.Field: java.lang.Class getType()>"
"<android.view.View: android.view.AttachedSurfaceControl getRootSurfaceControl()>","<android.view.View: android.view.AttachedSurfaceControl getRootSurfaceControl()>"
"<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>","<android.content.Intent: android.content.Intent setDataAndNormalize(android.net.Uri)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence)>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence)>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>"
"<android.view.View: android.os.IBinder getWindowToken()>","<android.view.View: android.os.IBinder getWindowToken()>"
"<android.content.ContextWrapper: void startActivities(android.content.Intent[])>","<android.content.ContextWrapper: void startActivities(android.content.Intent[])>"
"<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>"
"<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>","<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>"
"<java.security.PermissionCollection: void setReadOnly()>","<java.security.PermissionCollection: void setReadOnly()>"
"<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>","<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>"
"<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>","<android.media.AudioTrack: void setPlaybackParams(android.media.PlaybackParams)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect compose()>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect compose()>"
"<android.view.View: void cancelDragAndDrop()>","<android.view.View: void cancelDragAndDrop()>"
"<android.widget.TextView: boolean hasSelection()>","<android.widget.TextView: boolean hasSelection()>"
"<android.view.SurfaceControl: void <init>()>","<android.view.SurfaceControl: void <init>()>"
"<android.graphics.Matrix: void mapPoints(float[],float[])>","<android.graphics.Matrix: void mapPoints(float[],float[])>"
"<java.security.Provider: boolean remove(java.lang.Object,java.lang.Object)>","<java.security.Provider: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.view.ViewGroup: android.view.View getChildAt(int)>","<android.view.ViewGroup: android.view.View getChildAt(int)>"
"<android.app.Dialog: void <init>(android.content.Context)>","<android.app.Dialog: void <init>(android.content.Context)>"
"<java.net.Inet4Address: byte[] getAddress()>","<java.net.Inet4Address: byte[] getAddress()>"
"<java.util.Hashtable: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.util.Hashtable: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<android.graphics.RenderNode: boolean setTranslationZ(float)>","<android.graphics.RenderNode: boolean setTranslationZ(float)>"
"<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
"<java.util.stream.DoubleStream: java.util.stream.IntStream mapToInt(java.util.function.DoubleToIntFunction)>","<java.util.stream.DoubleStream: java.util.stream.IntStream mapToInt(java.util.function.DoubleToIntFunction)>"
"<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>","<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>"
"<android.telephony.TelephonyCallback$BarringInfoListener: void onBarringInfoChanged(android.telephony.BarringInfo)>","<android.telephony.TelephonyCallback$BarringInfoListener: void onBarringInfoChanged(android.telephony.BarringInfo)>"
"<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>","<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>"
"<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)>","<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)>"
"<java.nio.charset.CoderResult: int length()>","<java.nio.charset.CoderResult: int length()>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)>"
"<android.widget.ListView: void setDividerHeight(int)>","<android.widget.ListView: void setDividerHeight(int)>"
"<android.os.Parcel: char[] createCharArray()>","<android.os.Parcel: char[] createCharArray()>"
"<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void setPrefix(java.lang.String,java.lang.String)>"
"<android.media.AudioManager: boolean isMusicActive()>","<android.media.AudioManager: boolean isMusicActive()>"
"<java.util.Collections: void swap(java.util.List,int,int)>","<java.util.Collections: void swap(java.util.List,int,int)>"
"<android.widget.RemoteViews: void setIntDimenAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setIntDimenAttr(int,java.lang.String,int)>"
"<android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,int,android.view.Surface,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>","<android.media.projection.MediaProjection: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,int,android.view.Surface,android.hardware.display.VirtualDisplay$Callback,android.os.Handler)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>"
"<java.lang.String: void <init>(byte[],java.lang.String)>","<java.lang.String: void <init>(byte[],java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>"
"<java.time.Period: java.time.Period plusYears(long)>","<java.time.Period: java.time.Period plusYears(long)>"
"<android.widget.RemoteViews: void setRadioGroupChecked(int,int)>","<android.widget.RemoteViews: void setRadioGroupChecked(int,int)>"
"<java.security.Provider: java.lang.String getName()>","<java.security.Provider: java.lang.String getName()>"
"<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>","<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>"
"<android.widget.TextView: void setMinWidth(int)>","<android.widget.TextView: void setMinWidth(int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withMonth(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withMonth(int)>"
"<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>"
"<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>","<android.content.Intent: android.content.Intent getIntentOld(java.lang.String)>"
"<java.time.LocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.LocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent: void <clinit>()>"
"<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>","<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>"
"<java.util.IntSummaryStatistics: java.lang.String toString()>","<java.util.IntSummaryStatistics: java.lang.String toString()>"
"<android.graphics.fonts.Font$Builder: void <init>(android.graphics.fonts.Font)>","<android.graphics.fonts.Font$Builder: void <init>(android.graphics.fonts.Font)>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setLocale(android.icu.util.ULocale)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setLocale(android.icu.util.ULocale)>"
"<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>","<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>"
"<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStopped(android.app.FragmentManager,android.app.Fragment)>"
"<android.view.textclassifier.ConversationActions$Message: void <clinit>()>","<android.view.textclassifier.ConversationActions$Message: void <clinit>()>"
"<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>","<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>"
"<java.util.Spliterator: long estimateSize()>","<java.util.Spliterator: long estimateSize()>"
"<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>","<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>"
"<android.view.textclassifier.TextSelection$Request: int getEndIndex()>","<android.view.textclassifier.TextSelection$Request: int getEndIndex()>"
"<java.time.temporal.ValueRange: long getLargestMinimum()>","<java.time.temporal.ValueRange: long getLargestMinimum()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<java.lang.System: java.nio.channels.Channel inheritedChannel()>","<java.lang.System: java.nio.channels.Channel inheritedChannel()>"
"<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<java.nio.LongBuffer: int hashCode()>","<java.nio.LongBuffer: int hashCode()>"
"<android.graphics.Region: int describeContents()>","<android.graphics.Region: int describeContents()>"
"<android.graphics.Canvas: boolean clipOutRect(float,float,float,float)>","<android.graphics.Canvas: boolean clipOutRect(float,float,float,float)>"
"<java.lang.StringBuffer: char charAt(int)>","<java.lang.StringBuffer: char charAt(int)>"
"<java.io.File: java.lang.String getParent()>","<java.io.File: java.lang.String getParent()>"
"<java.net.URLConnection: java.lang.Object getContent()>","<java.net.URLConnection: java.lang.Object getContent()>"
"<java.time.Duration: java.time.Duration minusMinutes(long)>","<java.time.Duration: java.time.Duration minusMinutes(long)>"
"<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>","<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>"
"<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>","<java.net.DatagramSocket: void <init>(int,java.net.InetAddress)>"
"<android.view.MotionEvent: float getHistoricalSize(int,int)>","<android.view.MotionEvent: float getHistoricalSize(int,int)>"
"<java.util.Arrays: short[] copyOfRange(short[],int,int)>","<java.util.Arrays: short[] copyOfRange(short[],int,int)>"
"<android.widget.Toolbar: void setTitleMarginBottom(int)>","<android.widget.Toolbar: void setTitleMarginBottom(int)>"
"<android.graphics.Canvas: void rotate(float,float,float)>","<android.graphics.Canvas: void rotate(float,float,float)>"
"<android.widget.AdapterView: int getLastVisiblePosition()>","<android.widget.AdapterView: int getLastVisiblePosition()>"
"<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>","<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>"
"<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>","<android.view.ViewGroup: void focusableViewAvailable(android.view.View)>"
"<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromPendingIntent(android.app.PendingIntent)>","<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromPendingIntent(android.app.PendingIntent)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowSpan()>"
"<android.content.pm.PermissionInfo: int getProtectionFlags()>","<android.content.pm.PermissionInfo: int getProtectionFlags()>"
"<android.content.ContentValues: boolean containsKey(java.lang.String)>","<android.content.ContentValues: boolean containsKey(java.lang.String)>"
"<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>","<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent build()>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent build()>"
"<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>"
"<java.time.Duration: java.time.Duration abs()>","<java.time.Duration: java.time.Duration abs()>"
"<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>","<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
"<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>","<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>"
"<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.media.AudioAttributes: int hashCode()>","<android.media.AudioAttributes: int hashCode()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: void <clinit>()>","<android.view.textclassifier.TextClassifier$EntityConfig: void <clinit>()>"
"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>","<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)>"
"<java.util.stream.LongStream: java.util.OptionalLong reduce(java.util.function.LongBinaryOperator)>","<java.util.stream.LongStream: java.util.OptionalLong reduce(java.util.function.LongBinaryOperator)>"
"<android.content.DialogInterface$OnDismissListener: void onDismiss(android.content.DialogInterface)>","<android.content.DialogInterface$OnDismissListener: void onDismiss(android.content.DialogInterface)>"
"<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>"
"<java.lang.String: java.lang.String toLowerCase()>","<java.lang.String: java.lang.String toLowerCase()>"
"<android.icu.util.ULocale: java.lang.String toLegacyKey(java.lang.String)>","<android.icu.util.ULocale: java.lang.String toLegacyKey(java.lang.String)>"
"<java.lang.Math: int negateExact(int)>","<java.lang.Math: int negateExact(int)>"
"<android.media.MediaFormat: void removeKey(java.lang.String)>","<android.media.MediaFormat: void removeKey(java.lang.String)>"
"<android.os.Process: boolean is64Bit()>","<android.os.Process: boolean is64Bit()>"
"<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>","<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>"
"<android.content.pm.PackageManager$Property: int describeContents()>","<android.content.pm.PackageManager$Property: int describeContents()>"
"<android.app.SharedElementCallback$OnSharedElementsReadyListener: void onSharedElementsReady()>","<android.app.SharedElementCallback$OnSharedElementsReadyListener: void onSharedElementsReady()>"
"<android.view.View: void setAlpha(float)>","<android.view.View: void setAlpha(float)>"
"<android.view.WindowManager$LayoutParams: void setBlurBehindRadius(int)>","<android.view.WindowManager$LayoutParams: void setBlurBehindRadius(int)>"
"<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>","<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>"
"<java.lang.Thread: java.lang.Object clone()>","<java.lang.Thread: java.lang.Object clone()>"
"<android.view.Surface: void setFrameRate(float,int,int)>","<android.view.Surface: void setFrameRate(float,int,int)>"
"<java.util.Date: int getYear()>","<java.util.Date: int getYear()>"
"<android.database.Cursor: java.lang.String getColumnName(int)>","<android.database.Cursor: java.lang.String getColumnName(int)>"
"<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<java.lang.UnsatisfiedLinkError: void <init>()>","<java.lang.UnsatisfiedLinkError: void <init>()>"
"<java.util.stream.IntStream: boolean noneMatch(java.util.function.IntPredicate)>","<java.util.stream.IntStream: boolean noneMatch(java.util.function.IntPredicate)>"
"<android.graphics.Typeface: void <init>()>","<android.graphics.Typeface: void <init>()>"
"<android.util.SizeF: void writeToParcel(android.os.Parcel,int)>","<android.util.SizeF: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Surface: android.graphics.Canvas lockHardwareCanvas()>","<android.view.Surface: android.graphics.Canvas lockHardwareCanvas()>"
"<java.util.SortedMap: java.util.Set entrySet()>","<java.util.SortedMap: java.util.Set entrySet()>"
"<android.view.Window: java.util.List getSystemGestureExclusionRects()>","<android.view.Window: java.util.List getSystemGestureExclusionRects()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(float)>","<java.lang.StringBuffer: java.lang.StringBuffer append(float)>"
"<android.graphics.drawable.BitmapDrawable: int getAlpha()>","<android.graphics.drawable.BitmapDrawable: int getAlpha()>"
"<java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>","<java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>"
"<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>"
"<java.lang.reflect.Modifier: boolean isSynchronized(int)>","<java.lang.reflect.Modifier: boolean isSynchronized(int)>"
"<java.net.URI: java.lang.String toString()>","<java.net.URI: java.lang.String toString()>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>"
"<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>","<android.hardware.camera2.CaptureRequest$Builder: void setTag(java.lang.Object)>"
"<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>","<java.util.AbstractCollection: boolean removeAll(java.util.Collection)>"
"<java.io.FilterOutputStream: void write(int)>","<java.io.FilterOutputStream: void write(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayName()>","<android.icu.util.ULocale: java.lang.String getDisplayName()>"
"<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>","<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>"
"<android.content.Context: java.lang.String[] fileList()>","<android.content.Context: java.lang.String[] fileList()>"
"<android.hardware.camera2.CaptureResult: long getFrameNumber()>","<android.hardware.camera2.CaptureResult: long getFrameNumber()>"
"<android.content.ComponentName: java.lang.String toShortString()>","<android.content.ComponentName: java.lang.String toShortString()>"
"<android.view.textclassifier.TextLanguage$Builder: void <init>()>","<android.view.textclassifier.TextLanguage$Builder: void <init>()>"
"<android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)>","<android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)>"
"<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>","<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>"
"<android.view.ViewStructure: void setVisibility(int)>","<android.view.ViewStructure: void setVisibility(int)>"
"<java.util.stream.IntStream: java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction)>","<java.util.stream.IntStream: java.util.stream.DoubleStream mapToDouble(java.util.function.IntToDoubleFunction)>"
"<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>","<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>"
"<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>","<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>"
"<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()>","<android.telephony.TelephonyManager: java.lang.String getVisualVoicemailPackageName()>"
"<android.net.Uri: java.lang.String getSchemeSpecificPart()>","<android.net.Uri: java.lang.String getSchemeSpecificPart()>"
"<android.telephony.data.ApnSetting: int getMvnoType()>","<android.telephony.data.ApnSetting: int getMvnoType()>"
"<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>","<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.animation.LayoutTransition: void setDuration(long)>","<android.animation.LayoutTransition: void setDuration(long)>"
"<android.widget.TextView: void setCompoundDrawableTintList(android.content.res.ColorStateList)>","<android.widget.TextView: void setCompoundDrawableTintList(android.content.res.ColorStateList)>"
"<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>","<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String)>"
"<android.content.BroadcastReceiver$PendingResult: void finish()>","<android.content.BroadcastReceiver$PendingResult: void finish()>"
"<android.os.ParcelFileDescriptor: int detachFd()>","<android.os.ParcelFileDescriptor: int detachFd()>"
"<android.text.TextPaint: void <init>()>","<android.text.TextPaint: void <init>()>"
"<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>","<android.os.MessageQueue: void removeOnFileDescriptorEventListener(java.io.FileDescriptor)>"
"<android.media.SubtitleData: void <init>(int,long,long,byte[])>","<android.media.SubtitleData: void <init>(int,long,long,byte[])>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setJournalMode(java.lang.String)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setJournalMode(java.lang.String)>"
"<java.lang.Math: double IEEEremainder(double,double)>","<java.lang.Math: double IEEEremainder(double,double)>"
"<android.media.AudioManager: int getRingerMode()>","<android.media.AudioManager: int getRingerMode()>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection build()>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection build()>"
"<android.widget.TextView: boolean performLongClick()>","<android.widget.TextView: boolean performLongClick()>"
"<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>","<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>"
"<android.view.DragEvent: void <init>()>","<android.view.DragEvent: void <init>()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: int getIndex()>","<android.app.VoiceInteractor$PickOptionRequest$Option: int getIndex()>"
"<android.view.translation.TranslationResponseValue: int hashCode()>","<android.view.translation.TranslationResponseValue: int hashCode()>"
"<java.nio.CharBuffer: java.nio.Buffer position(int)>","<java.nio.CharBuffer: java.nio.Buffer position(int)>"
"<java.util.stream.LongStream: java.util.stream.LongStream rangeClosed(long,long)>","<java.util.stream.LongStream: java.util.stream.LongStream rangeClosed(long,long)>"
"<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>"
"<android.app.ActivityManager$RunningTaskInfo: int describeContents()>","<android.app.ActivityManager$RunningTaskInfo: int describeContents()>"
"<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>","<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>"
"<java.lang.InstantiationError: void <init>(java.lang.String)>","<java.lang.InstantiationError: void <init>(java.lang.String)>"
"<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>","<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>"
"<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>","<android.hardware.Camera$Parameters: boolean isAutoWhiteBalanceLockSupported()>"
"<java.net.SocketImpl: void accept(java.net.SocketImpl)>","<java.net.SocketImpl: void accept(java.net.SocketImpl)>"
"<java.lang.'annotation'.RetentionPolicy: void <init>(java.lang.String,int)>","<java.lang.'annotation'.RetentionPolicy: void <init>(java.lang.String,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)>"
"<android.widget.RelativeLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.RelativeLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.graphics.RenderNode: boolean isForceDarkAllowed()>","<android.graphics.RenderNode: boolean isForceDarkAllowed()>"
"<java.util.Arrays: int mismatch(int[],int,int,int[],int,int)>","<java.util.Arrays: int mismatch(int[],int,int,int[],int,int)>"
"<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>","<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>"
"<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()>","<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()>"
"<android.graphics.Paint: void setTextSize(float)>","<android.graphics.Paint: void setTextSize(float)>"
"<android.view.ViewParent: int getTextDirection()>","<android.view.ViewParent: int getTextDirection()>"
"<android.graphics.RecordingCanvas: void drawColor(long,android.graphics.BlendMode)>","<android.graphics.RecordingCanvas: void drawColor(long,android.graphics.BlendMode)>"
"<android.media.Rating: boolean isThumbUp()>","<android.media.Rating: boolean isThumbUp()>"
"<android.content.pm.PackageManager$Property: boolean isInteger()>","<android.content.pm.PackageManager$Property: boolean isInteger()>"
"<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()>","<android.view.inputmethod.CursorAnchorInfo: java.lang.CharSequence getComposingText()>"
"<java.time.Instant: int hashCode()>","<java.time.Instant: int hashCode()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>","<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>"
"<android.view.ViewGroup: boolean isLayoutSuppressed()>","<android.view.ViewGroup: boolean isLayoutSuppressed()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)>"
"<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View,float,float)>","<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View,float,float)>"
"<android.view.textclassifier.ConversationActions$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.ConversationActions$Request: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: boolean equals(boolean[],int,int,boolean[],int,int)>","<java.util.Arrays: boolean equals(boolean[],int,int,boolean[],int,int)>"
"<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.net.ConnectivityManager$NetworkCallback: void <init>()>","<android.net.ConnectivityManager$NetworkCallback: void <init>()>"
"<java.lang.RuntimeException: void <init>()>","<java.lang.RuntimeException: void <init>()>"
"<android.graphics.Paint: void setFlags(int)>","<android.graphics.Paint: void setFlags(int)>"
"<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()>","<android.media.MediaDrm$ProvisionRequest: java.lang.String getDefaultUrl()>"
"<android.os.Debug: void resetGlobalExternalAllocSize()>","<android.os.Debug: void resetGlobalExternalAllocSize()>"
"<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()>","<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSessionId getContentCaptureSessionId()>"
"<java.lang.Throwable: void <init>(java.lang.Throwable)>","<java.lang.Throwable: void <init>(java.lang.Throwable)>"
"<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>","<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>"
"<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)>","<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)>"
"<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)>","<android.media.MediaMetadata: android.media.Rating getRating(java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setMaxSuggestions(int)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setMaxSuggestions(int)>"
"<android.animation.Keyframe: void setValue(java.lang.Object)>","<android.animation.Keyframe: void setValue(java.lang.Object)>"
"<java.lang.NumberFormatException: void <init>()>","<java.lang.NumberFormatException: void <init>()>"
"<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder excludeUsage(int)>","<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder excludeUsage(int)>"
"<android.hardware.Camera$Parameters: java.lang.String getAntibanding()>","<android.hardware.Camera$Parameters: java.lang.String getAntibanding()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.app.ActivityManager$TaskDescription: void <init>()>","<android.app.ActivityManager$TaskDescription: void <init>()>"
"<android.widget.TextView: boolean onTextContextMenuItem(int)>","<android.widget.TextView: boolean onTextContextMenuItem(int)>"
"<android.graphics.RecordingCanvas: void drawPoint(float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPoint(float,float,android.graphics.Paint)>"
"<java.util.Arrays: int deepHashCode(java.lang.Object[])>","<java.util.Arrays: int deepHashCode(java.lang.Object[])>"
"<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>"
"<android.media.MediaDrm: void release()>","<android.media.MediaDrm: void release()>"
"<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View)>","<android.widget.AbsListView: boolean showContextMenuForChild(android.view.View)>"
"<android.view.View: void setTop(int)>","<android.view.View: void setTop(int)>"
"<java.util.Locale$Category: void <init>(java.lang.String,int)>","<java.util.Locale$Category: void <init>(java.lang.String,int)>"
"<android.view.MenuItem: android.graphics.PorterDuff$Mode getIconTintMode()>","<android.view.MenuItem: android.graphics.PorterDuff$Mode getIconTintMode()>"
"<java.util.Collections: java.util.Map emptyMap()>","<java.util.Collections: java.util.Map emptyMap()>"
"<android.util.Rational: java.lang.String toString()>","<android.util.Rational: java.lang.String toString()>"
"<java.util.Spliterator$OfPrimitive: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfPrimitive: java.util.Spliterator trySplit()>"
"<android.telephony.NetworkScanRequest: int getIncrementalResultsPeriodicity()>","<android.telephony.NetworkScanRequest: int getIncrementalResultsPeriodicity()>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putText(java.lang.String,java.lang.CharSequence)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putText(java.lang.String,java.lang.CharSequence)>"
"<java.util.Locale: void <init>(java.lang.String)>","<java.util.Locale: void <init>(java.lang.String)>"
"<android.view.View: int computeVerticalScrollExtent()>","<android.view.View: int computeVerticalScrollExtent()>"
"<android.media.AudioRecord: int getMinBufferSize(int,int,int)>","<android.media.AudioRecord: int getMinBufferSize(int,int,int)>"
"<java.util.HashMap: void putAll(java.util.Map)>","<java.util.HashMap: void putAll(java.util.Map)>"
"<javax.net.SocketFactory: java.net.Socket createSocket()>","<javax.net.SocketFactory: java.net.Socket createSocket()>"
"<android.graphics.drawable.LayerDrawable: void setId(int,int)>","<android.graphics.drawable.LayerDrawable: void setId(int,int)>"
"<android.view.DisplayCutout: java.lang.String toString()>","<android.view.DisplayCutout: java.lang.String toString()>"
"<android.app.ActionBar: int getNavigationMode()>","<android.app.ActionBar: int getNavigationMode()>"
"<android.view.Menu: android.view.MenuItem findItem(int)>","<android.view.Menu: android.view.MenuItem findItem(int)>"
"<java.util.AbstractSet: boolean removeAll(java.util.Collection)>","<java.util.AbstractSet: boolean removeAll(java.util.Collection)>"
"<android.widget.AbsListView: void smoothScrollBy(int,int)>","<android.widget.AbsListView: void smoothScrollBy(int,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View$OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>","<android.view.View$OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()>","<android.app.Activity: android.app.VoiceInteractor getVoiceInteractor()>"
"<android.content.Loader: void deliverResult(java.lang.Object)>","<android.content.Loader: void deliverResult(java.lang.Object)>"
"<android.telephony.TelephonyManager: boolean isModemEnabledForSlot(int)>","<android.telephony.TelephonyManager: boolean isModemEnabledForSlot(int)>"
"<android.media.MediaDrm$MediaDrmStateException: void <init>()>","<android.media.MediaDrm$MediaDrmStateException: void <init>()>"
"<android.content.ContextParams: android.content.AttributionSource getNextAttributionSource()>","<android.content.ContextParams: android.content.AttributionSource getNextAttributionSource()>"
"<android.view.View: boolean checkInputConnectionProxy(android.view.View)>","<android.view.View: boolean checkInputConnectionProxy(android.view.View)>"
"<android.media.AudioManager: void playSoundEffect(int,float)>","<android.media.AudioManager: void playSoundEffect(int,float)>"
"<java.nio.ByteOrder: java.lang.String toString()>","<java.nio.ByteOrder: java.lang.String toString()>"
"<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.widget.TextView: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.widget.TextView: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: boolean didTouchFocusSelect()>","<android.widget.TextView: boolean didTouchFocusSelect()>"
"<android.view.WindowInsetsAnimationController: int getTypes()>","<android.view.WindowInsetsAnimationController: int getTypes()>"
"<java.util.stream.IntStream: java.util.stream.IntStream distinct()>","<java.util.stream.IntStream: java.util.stream.IntStream distinct()>"
"<java.time.Instant: java.time.Instant plusMillis(long)>","<java.time.Instant: java.time.Instant plusMillis(long)>"
"<android.os.Process: boolean isSdkSandbox()>","<android.os.Process: boolean isSdkSandbox()>"
"<android.widget.TextView: int getTotalPaddingEnd()>","<android.widget.TextView: int getTotalPaddingEnd()>"
"<android.widget.AbsListView: void setCacheColorHint(int)>","<android.widget.AbsListView: void setCacheColorHint(int)>"
"<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)>","<android.content.ContextWrapper: int checkSelfPermission(java.lang.String)>"
"<java.text.CharacterIterator: char next()>","<java.text.CharacterIterator: char next()>"
"<java.net.URLConnection: int getReadTimeout()>","<java.net.URLConnection: int getReadTimeout()>"
"<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.os.Parcel: int dataSize()>","<android.os.Parcel: int dataSize()>"
"<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>","<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>"
"<android.view.KeyEvent$Callback: boolean onKeyDown(int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.hardware.camera2.params.OutputConfiguration: void <clinit>()>","<android.hardware.camera2.params.OutputConfiguration: void <clinit>()>"
"<java.lang.StringBuffer: void <init>()>","<java.lang.StringBuffer: void <init>()>"
"<android.os.CancellationSignal: void throwIfCanceled()>","<android.os.CancellationSignal: void throwIfCanceled()>"
"<java.security.NoSuchProviderException: void <init>()>","<java.security.NoSuchProviderException: void <init>()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.content.ContentProvider: void <init>()>","<android.content.ContentProvider: void <init>()>"
"<android.view.Window: boolean getAllowEnterTransitionOverlap()>","<android.view.Window: boolean getAllowEnterTransitionOverlap()>"
"<java.time.LocalDate: java.time.LocalDate withMonth(int)>","<java.time.LocalDate: java.time.LocalDate withMonth(int)>"
"<android.media.session.MediaSession$Token: void <clinit>()>","<android.media.session.MediaSession$Token: void <clinit>()>"
"<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)>","<android.os.UserHandle: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Matrix: void <init>()>","<android.graphics.Matrix: void <init>()>"
"<android.widget.TextView: boolean isFallbackLineSpacing()>","<android.widget.TextView: boolean isFallbackLineSpacing()>"
"<java.time.Duration: java.time.Duration minus(java.time.Duration)>","<java.time.Duration: java.time.Duration minus(java.time.Duration)>"
"<android.graphics.drawable.Drawable: boolean canApplyTheme()>","<android.graphics.drawable.Drawable: boolean canApplyTheme()>"
"<android.media.AudioTrack$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>","<android.media.AudioTrack$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList withLStar(float)>","<android.content.res.ColorStateList: android.content.res.ColorStateList withLStar(float)>"
"<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>","<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>"
"<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>","<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>"
"<android.text.style.URLSpan: int describeContents()>","<android.text.style.URLSpan: int describeContents()>"
"<android.graphics.Matrix: void setScale(float,float)>","<android.graphics.Matrix: void setScale(float,float)>"
"<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>","<android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)>"
"<android.graphics.RecordingCanvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.os.VibrationAttributes: int describeContents()>","<android.os.VibrationAttributes: int describeContents()>"
"<android.view.translation.ViewTranslationResponse: void <init>()>","<android.view.translation.ViewTranslationResponse: void <init>()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliableSocketPair()>"
"<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.io.InputStream,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)>","<android.telephony.TelephonyManager: void uploadCallComposerPicture(java.io.InputStream,java.lang.String,java.util.concurrent.Executor,android.os.OutcomeReceiver)>"
"<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>","<android.media.session.MediaSession: void setPlaybackState(android.media.session.PlaybackState)>"
"<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>","<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider()>"
"<java.lang.Character: int charCount(int)>","<java.lang.Character: int charCount(int)>"
"<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>"
"<android.content.res.Configuration: int hashCode()>","<android.content.res.Configuration: int hashCode()>"
"<android.view.WindowInsetsController: void show(int)>","<android.view.WindowInsetsController: void show(int)>"
"<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>","<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>"
"<android.util.Property: java.lang.String getName()>","<android.util.Property: java.lang.String getName()>"
"<java.net.InetAddress: boolean isMCSiteLocal()>","<java.net.InetAddress: boolean isMCSiteLocal()>"
"<android.hardware.camera2.CameraCharacteristics$Key: void <init>(java.lang.String,java.lang.Class)>","<android.hardware.camera2.CameraCharacteristics$Key: void <init>(java.lang.String,java.lang.Class)>"
"<android.content.Intent: java.lang.String getIdentifier()>","<android.content.Intent: java.lang.String getIdentifier()>"
"<android.graphics.drawable.Icon: int getType()>","<android.graphics.drawable.Icon: int getType()>"
"<javax.security.auth.Subject: boolean isReadOnly()>","<javax.security.auth.Subject: boolean isReadOnly()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>"
"<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>","<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>"
"<java.io.File: boolean isAbsolute()>","<java.io.File: boolean isAbsolute()>"
"<android.os.Parcel: void readFloatArray(float[])>","<android.os.Parcel: void readFloatArray(float[])>"
"<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>","<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>"
"<android.os.Messenger: android.os.IBinder getBinder()>","<android.os.Messenger: android.os.IBinder getBinder()>"
"<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>","<android.view.ViewOverlay: void add(android.graphics.drawable.Drawable)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(android.view.textclassifier.TextSelection$Request)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder addItem(long,android.widget.RemoteViews)>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder addItem(long,android.widget.RemoteViews)>"
"<android.view.View: boolean isOpaque()>","<android.view.View: boolean isOpaque()>"
"<android.telephony.TelephonyManager: void <init>()>","<android.telephony.TelephonyManager: void <init>()>"
"<java.nio.channels.FileLock: void <init>(java.nio.channels.AsynchronousFileChannel,long,long,boolean)>","<java.nio.channels.FileLock: void <init>(java.nio.channels.AsynchronousFileChannel,long,long,boolean)>"
"<java.lang.Enum: void finalize()>","<java.lang.Enum: void finalize()>"
"<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()>","<android.app.VoiceInteractor: android.app.VoiceInteractor$Request[] getActiveRequests()>"
"<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>","<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>"
"<android.view.ViewStructure: void setAccessibilityFocused(boolean)>","<android.view.ViewStructure: void setAccessibilityFocused(boolean)>"
"<java.lang.Package: java.lang.String getName()>","<java.lang.Package: java.lang.String getName()>"
"<android.graphics.ColorSpace$Model: void <clinit>()>","<android.graphics.ColorSpace$Model: void <clinit>()>"
"<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setUsage(int)>","<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setUsage(int)>"
"<android.media.AudioPresentation: int getPresentationId()>","<android.media.AudioPresentation: int getPresentationId()>"
"<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<android.app.ActivityManager$TaskDescription: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$TaskDescription: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void onDetachedFromWindow()>","<android.view.View: void onDetachedFromWindow()>"
"<android.widget.TextView: void setLetterSpacing(float)>","<android.widget.TextView: void setLetterSpacing(float)>"
"<android.widget.AbsListView: boolean onStartNestedScroll(android.view.View,android.view.View,int)>","<android.widget.AbsListView: boolean onStartNestedScroll(android.view.View,android.view.View,int)>"
"<java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)>","<java.util.Collections: java.util.SortedMap checkedSortedMap(java.util.SortedMap,java.lang.Class,java.lang.Class)>"
"<android.media.AudioDeviceInfo: int getId()>","<android.media.AudioDeviceInfo: int getId()>"
"<android.os.Vibrator: boolean hasAmplitudeControl()>","<android.os.Vibrator: boolean hasAmplitudeControl()>"
"<java.nio.channels.Selector: int select(java.util.function.Consumer,long)>","<java.nio.channels.Selector: int select(java.util.function.Consumer,long)>"
"<android.hardware.camera2.params.MultiResolutionStreamInfo: int getWidth()>","<android.hardware.camera2.params.MultiResolutionStreamInfo: int getWidth()>"
"<android.app.Activity: void onVisibleBehindCanceled()>","<android.app.Activity: void onVisibleBehindCanceled()>"
"<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<java.text.CharacterIterator: int getEndIndex()>","<java.text.CharacterIterator: int getEndIndex()>"
"<android.view.Display: float[] getSupportedRefreshRates()>","<android.view.Display: float[] getSupportedRefreshRates()>"
"<java.nio.LongBuffer: int compareTo(java.lang.Object)>","<java.nio.LongBuffer: int compareTo(java.lang.Object)>"
"<android.telephony.SignalStrength: int getEvdoEcio()>","<android.telephony.SignalStrength: int getEvdoEcio()>"
"<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>","<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>"
"<android.os.CombinedVibration: int describeContents()>","<android.os.CombinedVibration: int describeContents()>"
"<java.time.temporal.ChronoField: long checkValidValue(long)>","<java.time.temporal.ChronoField: long checkValidValue(long)>"
"<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>","<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>"
"<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>","<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: int hashCode(short[])>","<java.util.Arrays: int hashCode(short[])>"
"<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>","<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>"
"<java.util.Locale: java.lang.String toString()>","<java.util.Locale: java.lang.String toString()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle foldArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)>"
"<java.util.AbstractMap: java.util.Collection values()>","<java.util.AbstractMap: java.util.Collection values()>"
"<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>"
"<java.time.chrono.ChronoZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.chrono.ChronoZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>","<android.content.ContentProvider: android.net.Uri uncanonicalize(android.net.Uri)>"
"<android.hardware.Camera: void finalize()>","<android.hardware.Camera: void finalize()>"
"<java.nio.LongBuffer: int arrayOffset()>","<java.nio.LongBuffer: int arrayOffset()>"
"<android.view.Choreographer$FrameTimeline: void <init>()>","<android.view.Choreographer$FrameTimeline: void <init>()>"
"<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>","<android.content.Loader: void registerOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.media.MediaDrm$LogMessage: int getPriority()>","<android.media.MediaDrm$LogMessage: int getPriority()>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)>"
"<android.os.Debug$MemoryInfo: int getTotalPss()>","<android.os.Debug$MemoryInfo: int getTotalPss()>"
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>","<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)>"
"<android.view.animation.Animation: boolean isInitialized()>","<android.view.animation.Animation: boolean isInitialized()>"
"<java.util.Arrays: java.lang.String toString(char[])>","<java.util.Arrays: java.lang.String toString(char[])>"
"<java.lang.Boolean: int compareTo(java.lang.Object)>","<java.lang.Boolean: int compareTo(java.lang.Object)>"
"<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>","<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>"
"<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long)>","<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long)>"
"<java.lang.Boolean: boolean logicalXor(boolean,boolean)>","<java.lang.Boolean: boolean logicalXor(boolean,boolean)>"
"<android.view.Menu: boolean hasVisibleItems()>","<android.view.Menu: boolean hasVisibleItems()>"
"<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>","<android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>"
"<android.view.textclassifier.ConversationActions$Message: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.ConversationActions$Message: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Window: int getLocalFeatures()>","<android.view.Window: int getLocalFeatures()>"
"<java.lang.System: int identityHashCode(java.lang.Object)>","<java.lang.System: int identityHashCode(java.lang.Object)>"
"<android.media.session.MediaSession: void setRatingType(int)>","<android.media.session.MediaSession: void setRatingType(int)>"
"<java.lang.ClassLoader: void clearAssertionStatus()>","<java.lang.ClassLoader: void clearAssertionStatus()>"
"<android.media.MediaPlayer: void setDataSource(java.lang.String)>","<android.media.MediaPlayer: void setDataSource(java.lang.String)>"
"<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>","<android.view.ActionMode: android.view.MenuInflater getMenuInflater()>"
"<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>","<android.widget.TextView$SavedState: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)>","<android.app.Activity: void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState)>"
"<android.media.audiofx.AudioEffect: void <init>()>","<android.media.audiofx.AudioEffect: void <init>()>"
"<android.view.View: boolean isImportantForAccessibility()>","<android.view.View: boolean isImportantForAccessibility()>"
"<android.os.Debug: int getGlobalAllocSize()>","<android.os.Debug: int getGlobalAllocSize()>"
"<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>","<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.media.MediaPlayer: void releaseDrm()>","<android.media.MediaPlayer: void releaseDrm()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>","<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>"
"<android.view.inputmethod.TextSnapshot: int getSelectionStart()>","<android.view.inputmethod.TextSnapshot: int getSelectionStart()>"
"<java.io.File: java.net.URI toURI()>","<java.io.File: java.net.URI toURI()>"
"<java.io.FileInputStream: int read(byte[],int,int)>","<java.io.FileInputStream: int read(byte[],int,int)>"
"<android.media.session.MediaController$TransportControls: void setRating(android.media.Rating)>","<android.media.session.MediaController$TransportControls: void setRating(android.media.Rating)>"
"<android.app.Activity: void setProgress(int)>","<android.app.Activity: void setProgress(int)>"
"<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>","<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>"
"<android.graphics.Bitmap: boolean hasMipMap()>","<android.graphics.Bitmap: boolean hasMipMap()>"
"<android.media.session.MediaSession$QueueItem: long getQueueId()>","<android.media.session.MediaSession$QueueItem: long getQueueId()>"
"<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>","<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>"
"<android.animation.ValueAnimator: long getDuration()>","<android.animation.ValueAnimator: long getDuration()>"
"<java.time.LocalDate: java.time.LocalDate plusMonths(long)>","<java.time.LocalDate: java.time.LocalDate plusMonths(long)>"
"<android.icu.util.ULocale: int compareTo(java.lang.Object)>","<android.icu.util.ULocale: int compareTo(java.lang.Object)>"
"<android.app.VoiceInteractor$Request: void <init>()>","<android.app.VoiceInteractor$Request: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getUniqueId()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getUniqueId()>"
"<android.content.ClipData$Item: android.content.Intent getIntent()>","<android.content.ClipData$Item: android.content.Intent getIntent()>"
"<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>","<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>"
"<android.view.View: void bringToFront()>","<android.view.View: void bringToFront()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int[])>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int[])>"
"<java.time.chrono.IsoChronology: int prolepticYear(java.time.chrono.Era,int)>","<java.time.chrono.IsoChronology: int prolepticYear(java.time.chrono.Era,int)>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>"
"<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUsage(int)>","<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUsage(int)>"
"<java.util.Dictionary: java.util.Enumeration elements()>","<java.util.Dictionary: java.util.Enumeration elements()>"
"<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)>","<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)>"
"<android.hardware.camera2.CaptureRequest: boolean equals(java.lang.Object)>","<android.hardware.camera2.CaptureRequest: boolean equals(java.lang.Object)>"
"<java.lang.ClassLoader: void <init>()>","<java.lang.ClassLoader: void <init>()>"
"<android.view.Window: void setColorMode(int)>","<android.view.Window: void setColorMode(int)>"
"<java.lang.StackOverflowError: void <init>()>","<java.lang.StackOverflowError: void <init>()>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setHints(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setHints(java.util.Collection)>"
"<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setHomeAsUpIndicator(android.graphics.drawable.Drawable)>"
"<java.lang.reflect.Method: void <init>()>","<java.lang.reflect.Method: void <init>()>"
"<java.util.Arrays: int binarySearch(char[],char)>","<java.util.Arrays: int binarySearch(char[],char)>"
"<android.view.ViewStructure: void setAutofillOptions(java.lang.CharSequence[])>","<android.view.ViewStructure: void setAutofillOptions(java.lang.CharSequence[])>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.Chronology getChronology()>"
"<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>","<android.view.SurfaceControl: void readFromParcel(android.os.Parcel)>"
"<android.view.textclassifier.TextClassification$Request: int describeContents()>","<android.view.textclassifier.TextClassification$Request: int describeContents()>"
"<android.media.MediaDrm$KeyStatus: int getStatusCode()>","<android.media.MediaDrm$KeyStatus: int getStatusCode()>"
"<java.lang.invoke.MethodHandleInfo: java.lang.String toString(int,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandleInfo: java.lang.String toString(int,java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"
"<android.database.Cursor: boolean move(int)>","<android.database.Cursor: boolean move(int)>"
"<java.lang.Math: float fma(float,float,float)>","<java.lang.Math: float fma(float,float,float)>"
"<android.media.VolumeShaper$Configuration: void writeToParcel(android.os.Parcel,int)>","<android.media.VolumeShaper$Configuration: void writeToParcel(android.os.Parcel,int)>"
"<android.net.Uri: int compareTo(java.lang.Object)>","<android.net.Uri: int compareTo(java.lang.Object)>"
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>"
"<android.media.session.MediaSession$Callback: void onSkipToPrevious()>","<android.media.session.MediaSession$Callback: void onSkipToPrevious()>"
"<java.io.File: java.io.File[] listFiles()>","<java.io.File: java.io.File[] listFiles()>"
"<android.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setLogo(android.graphics.drawable.Drawable)>"
"<android.telephony.TelephonyScanManager: void <init>()>","<android.telephony.TelephonyScanManager: void <init>()>"
"<android.util.Range: int hashCode()>","<android.util.Range: int hashCode()>"
"<android.view.View: boolean isHorizontalFadingEdgeEnabled()>","<android.view.View: boolean isHorizontalFadingEdgeEnabled()>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>"
"<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>","<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>"
"<android.view.ContentInfo: android.os.Bundle getExtras()>","<android.view.ContentInfo: android.os.Bundle getExtras()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.view.ViewStructure: void setFocused(boolean)>","<android.view.ViewStructure: void setFocused(boolean)>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)>"
"<android.widget.RemoteViews: void setViewOutlinePreferredRadius(int,float,int)>","<android.widget.RemoteViews: void setViewOutlinePreferredRadius(int,float,int)>"
"<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>","<android.hardware.Camera$Parameters: void setPreviewFpsRange(int,int)>"
"<android.net.IpPrefix: void <clinit>()>","<android.net.IpPrefix: void <clinit>()>"
"<android.widget.RelativeLayout: int getIgnoreGravity()>","<android.widget.RelativeLayout: int getIgnoreGravity()>"
"<android.hardware.camera2.CameraManager: boolean isConcurrentSessionConfigurationSupported(java.util.Map)>","<android.hardware.camera2.CameraManager: boolean isConcurrentSessionConfigurationSupported(java.util.Map)>"
"<java.time.chrono.IsoChronology: void <init>()>","<java.time.chrono.IsoChronology: void <init>()>"
"<android.os.Parcel: void writeStringList(java.util.List)>","<android.os.Parcel: void writeStringList(java.util.List)>"
"<java.net.Socket: void setReceiveBufferSize(int)>","<java.net.Socket: void setReceiveBufferSize(int)>"
"<android.view.KeyEvent: boolean isPrintingKey()>","<android.view.KeyEvent: boolean isPrintingKey()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTabListener(android.app.ActionBar$TabListener)>"
"<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>","<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>"
"<android.animation.Keyframe: android.animation.Keyframe clone()>","<android.animation.Keyframe: android.animation.Keyframe clone()>"
"<java.text.AttributedCharacterIterator$Attribute: int hashCode()>","<java.text.AttributedCharacterIterator$Attribute: int hashCode()>"
"<android.media.session.MediaSession$Callback: void <init>()>","<android.media.session.MediaSession$Callback: void <init>()>"
"<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: void fill(long[],long)>","<java.util.Arrays: void fill(long[],long)>"
"<java.io.PrintStream: void println(float)>","<java.io.PrintStream: void println(float)>"
"<android.transition.Transition: void setMatchOrder(int[])>","<android.transition.Transition: void setMatchOrder(int[])>"
"<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.lang.Integer: int numberOfTrailingZeros(int)>","<java.lang.Integer: int numberOfTrailingZeros(int)>"
"<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()>","<android.app.ActivityManager: android.util.Size getAppTaskThumbnailSize()>"
"<android.net.RouteInfo: boolean hasGateway()>","<android.net.RouteInfo: boolean hasGateway()>"
"<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>"
"<android.os.Build: java.util.List getFingerprintedPartitions()>","<android.os.Build: java.util.List getFingerprintedPartitions()>"
"<android.view.textclassifier.TextClassifierEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassifierEvent: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Instant: boolean isBefore(java.time.Instant)>","<java.time.Instant: boolean isBefore(java.time.Instant)>"
"<android.hardware.camera2.CaptureResult: java.lang.String getCameraId()>","<android.hardware.camera2.CaptureResult: java.lang.String getCameraId()>"
"<android.graphics.Paint: boolean isUnderlineText()>","<android.graphics.Paint: boolean isUnderlineText()>"
"<java.lang.ThreadGroup: void <init>(java.lang.String)>","<java.lang.ThreadGroup: void <init>(java.lang.String)>"
"<android.view.WindowId: void writeToParcel(android.os.Parcel,int)>","<android.view.WindowId: void writeToParcel(android.os.Parcel,int)>"
"<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>","<java.text.AttributedCharacterIterator: int getRunStart(java.text.AttributedCharacterIterator$Attribute)>"
"<android.content.SharedPreferences: float getFloat(java.lang.String,float)>","<android.content.SharedPreferences: float getFloat(java.lang.String,float)>"
"<android.media.MediaDrm: void removeKeys(byte[])>","<android.media.MediaDrm: void removeKeys(byte[])>"
"<android.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setCollapseIcon(android.graphics.drawable.Drawable)>"
"<android.graphics.Rect: int height()>","<android.graphics.Rect: int height()>"
"<java.lang.Enum: int compareTo(java.lang.Enum)>","<java.lang.Enum: int compareTo(java.lang.Enum)>"
"<android.graphics.RectF: float width()>","<android.graphics.RectF: float width()>"
"<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.lang.CloneNotSupportedException: void <init>()>","<java.lang.CloneNotSupportedException: void <init>()>"
"<java.time.Duration: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.Duration: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<java.time.temporal.TemporalField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)>","<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset,java.time.ZoneOffset,java.util.List,java.util.List,java.util.List)>"
"<android.app.VoiceInteractor$Prompt: int countVoicePrompts()>","<android.app.VoiceInteractor$Prompt: int countVoicePrompts()>"
"<android.graphics.Region: boolean quickReject(android.graphics.Rect)>","<android.graphics.Region: boolean quickReject(android.graphics.Rect)>"
"<android.graphics.RenderNode: boolean getClipToBounds()>","<android.graphics.RenderNode: boolean getClipToBounds()>"
"<android.view.WindowInsetsController: void removeOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>","<android.view.WindowInsetsController: void removeOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>"
"<android.graphics.ColorSpace: void <init>()>","<android.graphics.ColorSpace: void <init>()>"
"<java.security.cert.Certificate: void verify(java.security.PublicKey)>","<java.security.cert.Certificate: void verify(java.security.PublicKey)>"
"<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>","<android.content.SharedPreferences$OnSharedPreferenceChangeListener: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>"
"<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>","<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>"
"<android.media.Image: int getDataSpace()>","<android.media.Image: int getDataSpace()>"
"<java.text.FieldPosition: int getEndIndex()>","<java.text.FieldPosition: int getEndIndex()>"
"<android.graphics.drawable.LayerDrawable: void setDrawable(int,android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: void setDrawable(int,android.graphics.drawable.Drawable)>"
"<android.app.Dialog: android.view.View findViewById(int)>","<android.app.Dialog: android.view.View findViewById(int)>"
"<java.lang.SecurityManager: boolean inClassLoader()>","<java.lang.SecurityManager: boolean inClassLoader()>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>"
"<java.net.Socket: java.util.Set supportedOptions()>","<java.net.Socket: java.util.Set supportedOptions()>"
"<java.util.function.IntConsumer: void accept(int)>","<java.util.function.IntConsumer: void accept(int)>"
"<android.graphics.RectF: void inset(float,float)>","<android.graphics.RectF: void inset(float,float)>"
"<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>","<android.view.ViewTreeObserver: void removeOnDrawListener(android.view.ViewTreeObserver$OnDrawListener)>"
"<android.media.AudioTrack: int getPlayState()>","<android.media.AudioTrack: int getPlayState()>"
"<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<android.widget.Filter$FilterResults: void <init>()>","<android.widget.Filter$FilterResults: void <init>()>"
"<android.os.Build: java.lang.String getSerial()>","<android.os.Build: java.lang.String getSerial()>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,android.icu.util.ULocale[],boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(java.lang.String,android.icu.util.ULocale[],boolean[])>"
"<android.os.Parcel: void readByteArray(byte[])>","<android.os.Parcel: void readByteArray(byte[])>"
"<android.widget.TextView$OnEditorActionListener: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>","<android.widget.TextView$OnEditorActionListener: boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent)>"
"<android.view.Surface: void release()>","<android.view.Surface: void release()>"
"<android.database.sqlite.SQLiteStatement: void <init>()>","<android.database.sqlite.SQLiteStatement: void <init>()>"
"<android.net.IpSecManager$SpiUnavailableException: void <init>()>","<android.net.IpSecManager$SpiUnavailableException: void <init>()>"
"<java.util.stream.LongStream: java.util.stream.LongStream distinct()>","<java.util.stream.LongStream: java.util.stream.LongStream distinct()>"
"<android.view.textclassifier.TextClassification: java.lang.String toString()>","<android.view.textclassifier.TextClassification: java.lang.String toString()>"
"<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>","<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)>"
"<java.time.Clock: java.time.Clock systemDefaultZone()>","<java.time.Clock: java.time.Clock systemDefaultZone()>"
"<android.app.FragmentTransaction: int commitAllowingStateLoss()>","<android.app.FragmentTransaction: int commitAllowingStateLoss()>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>"
"<android.media.AudioRecord$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRecord)>","<android.media.AudioRecord$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRecord)>"
"<android.view.Window: void setResizingCaptionDrawable(android.graphics.drawable.Drawable)>","<android.view.Window: void setResizingCaptionDrawable(android.graphics.drawable.Drawable)>"
"<android.media.AudioManager: int getAudioHwSyncForSession(int)>","<android.media.AudioManager: int getAudioHwSyncForSession(int)>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraCaptureSession,int)>"
"<java.lang.reflect.Method: boolean isSynthetic()>","<java.lang.reflect.Method: boolean isSynthetic()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentStarted(android.app.FragmentManager,android.app.Fragment)>"
"<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)>","<android.content.ContentProviderClient: android.net.Uri canonicalize(android.net.Uri)>"
"<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>","<android.media.AudioAttributes$Builder: void <init>(android.media.AudioAttributes)>"
"<android.widget.Toolbar: void dismissPopupMenus()>","<android.widget.Toolbar: void dismissPopupMenus()>"
"<android.hardware.camera2.CameraExtensionSession$StateCallback: void onConfigured(android.hardware.camera2.CameraExtensionSession)>","<android.hardware.camera2.CameraExtensionSession$StateCallback: void onConfigured(android.hardware.camera2.CameraExtensionSession)>"
"<android.view.WindowInsetsController: int getSystemBarsBehavior()>","<android.view.WindowInsetsController: int getSystemBarsBehavior()>"
"<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>","<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>"
"<android.animation.Animator: long getDuration()>","<android.animation.Animator: long getDuration()>"
"<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode[] values()>","<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode[] values()>"
"<android.view.accessibility.AccessibilityEvent: void recycle()>","<android.view.accessibility.AccessibilityEvent: void recycle()>"
"<android.text.style.CharacterStyle: void <init>()>","<android.text.style.CharacterStyle: void <init>()>"
"<java.util.regex.MatchResult: int start(int)>","<java.util.regex.MatchResult: int start(int)>"
"<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>","<android.view.View: android.graphics.PorterDuff$Mode getBackgroundTintMode()>"
"<android.util.Log: int w(java.lang.String,java.lang.String)>","<android.util.Log: int w(java.lang.String,java.lang.String)>"
"<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>","<java.nio.charset.CharsetEncoder: boolean isLegalReplacement(byte[])>"
"<android.os.Handler: boolean sendEmptyMessage(int)>","<android.os.Handler: boolean sendEmptyMessage(int)>"
"<java.util.Hashtable: void <init>()>","<java.util.Hashtable: void <init>()>"
"<android.content.Context: int getWallpaperDesiredMinimumHeight()>","<android.content.Context: int getWallpaperDesiredMinimumHeight()>"
"<java.io.Console: java.lang.String readLine()>","<java.io.Console: java.lang.String readLine()>"
"<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>","<java.lang.reflect.Array: boolean getBoolean(java.lang.Object,int)>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setUsage(long)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setUsage(long)>"
"<java.nio.channels.MulticastChannel: void close()>","<java.nio.channels.MulticastChannel: void close()>"
"<android.view.View: int generateViewId()>","<android.view.View: int generateViewId()>"
"<android.view.Menu: void removeItem(int)>","<android.view.Menu: void removeItem(int)>"
"<android.app.RemoteAction: void <clinit>()>","<android.app.RemoteAction: void <clinit>()>"
"<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<java.time.LocalDateTime: int hashCode()>","<java.time.LocalDateTime: int hashCode()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>"
"<android.graphics.drawable.LayerDrawable: void setPaddingRelative(int,int,int,int)>","<android.graphics.drawable.LayerDrawable: void setPaddingRelative(int,int,int,int)>"
"<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>","<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>"
"<android.app.Activity: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>","<android.app.Activity: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>"
"<android.os.HandlerThread: boolean quit()>","<android.os.HandlerThread: boolean quit()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflect(java.lang.reflect.Method)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setEditable(boolean)>"
"<java.lang.reflect.Field: void setLong(java.lang.Object,long)>","<java.lang.reflect.Field: void setLong(java.lang.Object,long)>"
"<android.view.MotionEvent: int getButtonState()>","<android.view.MotionEvent: int getButtonState()>"
"<android.media.session.PlaybackState$CustomAction: java.lang.String getAction()>","<android.media.session.PlaybackState$CustomAction: java.lang.String getAction()>"
"<java.lang.Thread: void resume()>","<java.lang.Thread: void resume()>"
"<java.time.Period: java.time.Period ofMonths(int)>","<java.time.Period: java.time.Period ofMonths(int)>"
"<java.time.Duration: long dividedBy(java.time.Duration)>","<java.time.Duration: long dividedBy(java.time.Duration)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>"
"<android.app.PictureInPictureUiState: void <init>()>","<android.app.PictureInPictureUiState: void <init>()>"
"<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>","<android.widget.TextView: boolean extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)>"
"<java.lang.Character: boolean isDefined(int)>","<java.lang.Character: boolean isDefined(int)>"
"<android.view.View: int getHorizontalScrollbarHeight()>","<android.view.View: int getHorizontalScrollbarHeight()>"
"<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>"
"<java.net.MalformedURLException: void <init>()>","<java.net.MalformedURLException: void <init>()>"
"<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel position(long)>","<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel position(long)>"
"<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>","<android.view.ViewPropertyAnimator: android.animation.TimeInterpolator getInterpolator()>"
"<java.lang.ClassCastException: void <init>(java.lang.String)>","<java.lang.ClassCastException: void <init>(java.lang.String)>"
"<java.net.ProtocolFamily: java.lang.String name()>","<java.net.ProtocolFamily: java.lang.String name()>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setHidden(boolean)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setHidden(boolean)>"
"<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)>","<android.view.ActionMode: void setSubtitle(java.lang.CharSequence)>"
"<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,int)>"
"<android.os.CombinedVibration: void <init>()>","<android.os.CombinedVibration: void <init>()>"
"<android.view.View: void setDrawingCacheQuality(int)>","<android.view.View: void setDrawingCacheQuality(int)>"
"<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>","<android.app.AlertDialog: void setMessage(java.lang.CharSequence)>"
"<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)>","<android.app.Fragment: boolean shouldShowRequestPermissionRationale(java.lang.String)>"
"<java.lang.Thread: void stop(java.lang.Throwable)>","<java.lang.Thread: void stop(java.lang.Throwable)>"
"<android.view.ViewStructure: void setAlpha(float)>","<android.view.ViewStructure: void setAlpha(float)>"
"<android.database.Cursor: long getLong(int)>","<android.database.Cursor: long getLong(int)>"
"<android.os.VibrationAttributes: android.os.VibrationAttributes createForUsage(int)>","<android.os.VibrationAttributes: android.os.VibrationAttributes createForUsage(int)>"
"<android.os.Parcel: android.os.IBinder[] createBinderArray()>","<android.os.Parcel: android.os.IBinder[] createBinderArray()>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setInsertionMarkerLocation(float,float,float,float,int)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setInsertionMarkerLocation(float,float,float,float,int)>"
"<android.view.ViewParent: void clearChildFocus(android.view.View)>","<android.view.ViewParent: void clearChildFocus(android.view.View)>"
"<android.content.pm.PackageManager$Property: boolean isString()>","<android.content.pm.PackageManager$Property: boolean isString()>"
"<java.net.InetAddress: byte[] getAddress()>","<java.net.InetAddress: byte[] getAddress()>"
"<java.lang.Math: long max(long,long)>","<java.lang.Math: long max(long,long)>"
"<android.content.res.ColorStateList: void <init>(int[][],int[])>","<android.content.res.ColorStateList: void <init>(int[][],int[])>"
"<android.os.Handler$Callback: boolean handleMessage(android.os.Message)>","<android.os.Handler$Callback: boolean handleMessage(android.os.Message)>"
"<android.telephony.TelephonyManager$UssdResponseCallback: void <init>()>","<android.telephony.TelephonyManager$UssdResponseCallback: void <init>()>"
"<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>"
"<android.widget.TextView: boolean isSuggestionsEnabled()>","<android.widget.TextView: boolean isSuggestionsEnabled()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setOnClickListener(android.view.View$OnClickListener)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setOnClickListener(android.view.View$OnClickListener)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowIndex(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowIndex(int)>"
"<java.lang.String: java.lang.String concat(java.lang.String)>","<java.lang.String: java.lang.String concat(java.lang.String)>"
"<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>","<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>"
"<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>","<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>"
"<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>","<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>"
"<java.io.File: boolean mkdirs()>","<java.io.File: boolean mkdirs()>"
"<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>","<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>"
"<android.transition.Transition: void setPathMotion(android.transition.PathMotion)>","<android.transition.Transition: void setPathMotion(android.transition.PathMotion)>"
"<android.util.SparseBooleanArray: int indexOfKey(int)>","<android.util.SparseBooleanArray: int indexOfKey(int)>"
"<java.nio.CharBuffer: boolean hasArray()>","<java.nio.CharBuffer: boolean hasArray()>"
"<android.text.PrecomputedText$Params: void <init>()>","<android.text.PrecomputedText$Params: void <init>()>"
"<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket(int)>","<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket(int)>"
"<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>","<android.content.Context: android.content.Context createAttributionContext(java.lang.String)>"
"<java.net.DatagramSocket: void setTrafficClass(int)>","<java.net.DatagramSocket: void setTrafficClass(int)>"
"<android.widget.TextView: void setEnabled(boolean)>","<android.widget.TextView: void setEnabled(boolean)>"
"<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>","<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])>"
"<java.time.DayOfWeek: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.util.concurrent.Semaphore: void <init>(int)>","<java.util.concurrent.Semaphore: void <init>(int)>"
"<android.view.SurfaceControl$Transaction: void <init>()>","<android.view.SurfaceControl$Transaction: void <init>()>"
"<android.hardware.Camera$Parameters: void remove(java.lang.String)>","<android.hardware.Camera$Parameters: void remove(java.lang.String)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)>"
"<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>","<java.lang.reflect.Constructor: boolean equals(java.lang.Object)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyPort(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyPort(int)>"
"<java.nio.channels.ClosedChannelException: void <init>()>","<java.nio.channels.ClosedChannelException: void <init>()>"
"<android.graphics.Rect: int describeContents()>","<android.graphics.Rect: int describeContents()>"
"<android.net.NetworkCapabilities: int describeContents()>","<android.net.NetworkCapabilities: int describeContents()>"
"<android.view.KeyEvent: boolean isMetaPressed()>","<android.view.KeyEvent: boolean isMetaPressed()>"
"<android.content.pm.PackageManager: java.util.List queryReceiverProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryReceiverProperty(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>","<android.view.accessibility.AccessibilityNodeInfo: int getDrawingOrder()>"
"<android.view.animation.Animation: java.lang.Object clone()>","<android.view.animation.Animation: java.lang.Object clone()>"
"<android.os.MemoryFile: void <init>(java.lang.String,int)>","<android.os.MemoryFile: void <init>(java.lang.String,int)>"
"<java.security.Provider$Service: java.lang.String toString()>","<java.security.Provider$Service: java.lang.String toString()>"
"<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.function.LongUnaryOperator: long applyAsLong(long)>","<java.util.function.LongUnaryOperator: long applyAsLong(long)>"
"<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>","<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>"
"<java.util.Deque: java.lang.Object getLast()>","<java.util.Deque: java.lang.Object getLast()>"
"<android.view.KeyEvent$DispatcherState: void <init>()>","<android.view.KeyEvent$DispatcherState: void <init>()>"
"<android.widget.ListView: void setHeaderDividersEnabled(boolean)>","<android.widget.ListView: void setHeaderDividersEnabled(boolean)>"
"<android.media.AudioFocusRequest$Builder: void <init>(int)>","<android.media.AudioFocusRequest$Builder: void <init>(int)>"
"<android.app.FragmentManager: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>","<android.app.FragmentManager: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>"
"<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.ByteBuffer)>","<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String,java.nio.ByteBuffer)>"
"<android.app.ActivityManager$RunningServiceInfo: int describeContents()>","<android.app.ActivityManager$RunningServiceInfo: int describeContents()>"
"<android.hardware.camera2.params.InputConfiguration: int getHeight()>","<android.hardware.camera2.params.InputConfiguration: int getHeight()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
"<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>","<android.widget.TextView: void setTextKeepState(java.lang.CharSequence)>"
"<android.widget.TextView: android.text.InputFilter[] getFilters()>","<android.widget.TextView: android.text.InputFilter[] getFilters()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.database.Cursor,int,java.lang.String,android.content.DialogInterface$OnClickListener)>"
"<java.lang.Integer: void <clinit>()>","<java.lang.Integer: void <clinit>()>"
"<android.media.AudioTrack$OnCodecFormatChangedListener: void onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)>","<android.media.AudioTrack$OnCodecFormatChangedListener: void onCodecFormatChanged(android.media.AudioTrack,android.media.AudioMetadataReadMap)>"
"<java.time.Instant: java.time.Instant ofEpochMilli(long)>","<java.time.Instant: java.time.Instant ofEpochMilli(long)>"
"<android.content.pm.PackageManager$Property: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageManager$Property: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void setViewTranslationCallback(android.view.translation.ViewTranslationCallback)>","<android.view.View: void setViewTranslationCallback(android.view.translation.ViewTranslationCallback)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.lang.StringBuffer: java.lang.String toString()>","<java.lang.StringBuffer: java.lang.String toString()>"
"<android.provider.Settings$Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Global: boolean putLong(android.content.ContentResolver,java.lang.String,long)>"
"<android.os.PatternMatcher: boolean match(java.lang.String)>","<android.os.PatternMatcher: boolean match(java.lang.String)>"
"<android.media.MediaDescription$Builder: void <init>()>","<android.media.MediaDescription$Builder: void <init>()>"
"<android.media.session.MediaSession$Callback: void onSkipToNext()>","<android.media.session.MediaSession$Callback: void onSkipToNext()>"
"<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>","<android.util.AttributeSet: int getAttributeIntValue(java.lang.String,java.lang.String,int)>"
"<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>"
"<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])>","<java.util.UUID: java.util.UUID nameUUIDFromBytes(byte[])>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeReturnType(java.lang.Class)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeReturnType(java.lang.Class)>"
"<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>","<android.view.SurfaceView: void setChildSurfacePackage(android.view.SurfaceControlViewHost$SurfacePackage)>"
"<android.content.IntentFilter: void addCategory(java.lang.String)>","<android.content.IntentFilter: void addCategory(java.lang.String)>"
"<android.content.ContextWrapper: java.lang.String getPackageCodePath()>","<android.content.ContextWrapper: java.lang.String getPackageCodePath()>"
"<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>","<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>"
"<java.time.chrono.ChronoLocalDateTime: int hashCode()>","<java.time.chrono.ChronoLocalDateTime: int hashCode()>"
"<android.view.View: int getNextFocusForwardId()>","<android.view.View: int getNextFocusForwardId()>"
"<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>","<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>"
"<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
"<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>","<android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>"
"<android.view.Display: long getAppVsyncOffsetNanos()>","<android.view.Display: long getAppVsyncOffsetNanos()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer alignedSlice(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer alignedSlice(int)>"
"<android.content.ContentProviderResult: void <init>(android.os.Parcel)>","<android.content.ContentProviderResult: void <init>(android.os.Parcel)>"
"<android.graphics.Canvas: int getMaximumBitmapWidth()>","<android.graphics.Canvas: int getMaximumBitmapWidth()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>","<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>"
"<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>"
"<android.view.ActionMode: android.view.View getCustomView()>","<android.view.ActionMode: android.view.View getCustomView()>"
"<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>","<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.util.function.ToDoubleFunction: double applyAsDouble(java.lang.Object)>","<java.util.function.ToDoubleFunction: double applyAsDouble(java.lang.Object)>"
"<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>","<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>"
"<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.contentcapture.ContentCaptureSession: void <init>()>","<android.view.contentcapture.ContentCaptureSession: void <init>()>"
"<android.view.Display$Mode: int describeContents()>","<android.view.Display$Mode: int describeContents()>"
"<android.media.VolumeShaper$Configuration: int hashCode()>","<android.media.VolumeShaper$Configuration: int hashCode()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)>"
"<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>","<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>"
"<java.time.LocalTime: java.time.LocalTime plusSeconds(long)>","<java.time.LocalTime: java.time.LocalTime plusSeconds(long)>"
"<android.media.MediaPlayer: void setVolume(float,float)>","<android.media.MediaPlayer: void setVolume(float,float)>"
"<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>","<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>"
"<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Debug: int getBinderReceivedTransactions()>","<android.os.Debug: int getBinderReceivedTransactions()>"
"<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>","<android.text.method.MovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>"
"<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextBeforeCursor(int,int)>","<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextBeforeCursor(int,int)>"
"<android.content.Context: void sendBroadcastWithMultiplePermissions(android.content.Intent,java.lang.String[])>","<android.content.Context: void sendBroadcastWithMultiplePermissions(android.content.Intent,java.lang.String[])>"
"<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token getMediaKeyEventSession()>","<android.media.session.MediaSessionManager: android.media.session.MediaSession$Token getMediaKeyEventSession()>"
"<android.media.MediaDrm: void clearOnSessionLostStateListener()>","<android.media.MediaDrm: void clearOnSessionLostStateListener()>"
"<android.graphics.RectF: boolean intersect(float,float,float,float)>","<android.graphics.RectF: boolean intersect(float,float,float,float)>"
"<android.telephony.VisualVoicemailSmsFilterSettings: java.lang.String toString()>","<android.telephony.VisualVoicemailSmsFilterSettings: java.lang.String toString()>"
"<android.graphics.RenderNode: float getRotationX()>","<android.graphics.RenderNode: float getRotationX()>"
"<android.os.PersistableBundle: int describeContents()>","<android.os.PersistableBundle: int describeContents()>"
"<java.time.Instant: java.time.Instant plusNanos(long)>","<java.time.Instant: java.time.Instant plusNanos(long)>"
"<android.graphics.drawable.ColorDrawable: void getOutline(android.graphics.Outline)>","<android.graphics.drawable.ColorDrawable: void getOutline(android.graphics.Outline)>"
"<android.view.translation.TranslationResponseValue: int describeContents()>","<android.view.translation.TranslationResponseValue: int describeContents()>"
"<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>","<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>"
"<android.net.IpPrefix: void writeToParcel(android.os.Parcel,int)>","<android.net.IpPrefix: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit of(java.time.temporal.ChronoUnit)>","<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit of(java.time.temporal.ChronoUnit)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setHasStableIds(boolean)>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setHasStableIds(boolean)>"
"<android.view.RoundedCorner: java.lang.String toString()>","<android.view.RoundedCorner: java.lang.String toString()>"
"<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>","<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>"
"<android.widget.RelativeLayout$LayoutParams: void <init>(android.widget.RelativeLayout$LayoutParams)>","<android.widget.RelativeLayout$LayoutParams: void <init>(android.widget.RelativeLayout$LayoutParams)>"
"<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>","<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>"
"<java.lang.Throwable: void <init>(java.lang.String)>","<java.lang.Throwable: void <init>(java.lang.String)>"
"<java.security.Provider$Service: java.lang.String getType()>","<java.security.Provider$Service: java.lang.String getType()>"
"<android.view.SurfaceView: void onDetachedFromWindow()>","<android.view.SurfaceView: void onDetachedFromWindow()>"
"<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>","<android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)>"
"<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>","<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>"
"<java.time.ZoneId: java.time.ZoneId systemDefault()>","<java.time.ZoneId: java.time.ZoneId systemDefault()>"
"<android.graphics.Path$Op: android.graphics.Path$Op[] values()>","<android.graphics.Path$Op: android.graphics.Path$Op[] values()>"
"<android.view.displayhash.DisplayHash: java.lang.String toString()>","<android.view.displayhash.DisplayHash: java.lang.String toString()>"
"<java.net.DatagramPacket: int getOffset()>","<java.net.DatagramPacket: int getOffset()>"
"<android.graphics.Bitmap: void setWidth(int)>","<android.graphics.Bitmap: void setWidth(int)>"
"<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)>"
"<android.content.pm.Attribution: void <init>()>","<android.content.pm.Attribution: void <init>()>"
"<android.content.ClipDescription: void <init>(android.content.ClipDescription)>","<android.content.ClipDescription: void <init>(android.content.ClipDescription)>"
"<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>","<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>"
"<android.os.MessageQueue$OnFileDescriptorEventListener: int onFileDescriptorEvents(java.io.FileDescriptor,int)>","<android.os.MessageQueue$OnFileDescriptorEventListener: int onFileDescriptorEvents(java.io.FileDescriptor,int)>"
"<java.util.NavigableMap: java.util.Map$Entry pollLastEntry()>","<java.util.NavigableMap: java.util.Map$Entry pollLastEntry()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
"<android.view.View: void setSystemUiVisibility(int)>","<android.view.View: void setSystemUiVisibility(int)>"
"<android.app.Dialog: int getVolumeControlStream()>","<android.app.Dialog: int getVolumeControlStream()>"
"<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>"
"<android.view.contentcapture.ContentCaptureContext: void writeToParcel(android.os.Parcel,int)>","<android.view.contentcapture.ContentCaptureContext: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void setHapticFeedbackEnabled(boolean)>","<android.view.View: void setHapticFeedbackEnabled(boolean)>"
"<java.lang.Double: java.lang.String toString()>","<java.lang.Double: java.lang.String toString()>"
"<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>","<android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)>"
"<android.content.AttributionSource: int getUid()>","<android.content.AttributionSource: int getUid()>"
"<android.view.ViewGroup: void measureChildren(int,int)>","<android.view.ViewGroup: void measureChildren(int,int)>"
"<android.content.pm.PackageInstaller$Session: void fsync(java.io.OutputStream)>","<android.content.pm.PackageInstaller$Session: void fsync(java.io.OutputStream)>"
"<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void entityRef(java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.Buffer reset()>","<java.nio.DoubleBuffer: java.nio.Buffer reset()>"
"<android.view.accessibility.AccessibilityEvent: void setAction(int)>","<android.view.accessibility.AccessibilityEvent: void setAction(int)>"
"<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>","<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>"
"<java.lang.NoSuchMethodError: void <init>()>","<java.lang.NoSuchMethodError: void <init>()>"
"<android.graphics.Insets: boolean equals(java.lang.Object)>","<android.graphics.Insets: boolean equals(java.lang.Object)>"
"<android.media.session.MediaController$TransportControls: void setPlaybackSpeed(float)>","<android.media.session.MediaController$TransportControls: void setPlaybackSpeed(float)>"
"<java.util.OptionalInt: void ifPresentOrElse(java.util.function.IntConsumer,java.lang.Runnable)>","<java.util.OptionalInt: void ifPresentOrElse(java.util.function.IntConsumer,java.lang.Runnable)>"
"<android.graphics.RectF: void union(float,float,float,float)>","<android.graphics.RectF: void union(float,float,float,float)>"
"<android.widget.TextView: void setWidth(int)>","<android.widget.TextView: void setWidth(int)>"
"<android.view.View: boolean requestFocus()>","<android.view.View: boolean requestFocus()>"
"<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>","<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>"
"<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>","<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>"
"<android.media.MediaDrm: void setOnSessionLostStateListener(android.media.MediaDrm$OnSessionLostStateListener,android.os.Handler)>","<android.media.MediaDrm: void setOnSessionLostStateListener(android.media.MediaDrm$OnSessionLostStateListener,android.os.Handler)>"
"<java.net.SocketOptions: void setOption(int,java.lang.Object)>","<java.net.SocketOptions: void setOption(int,java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>","<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>"
"<java.security.PrivilegedExceptionAction: java.lang.Object run()>","<java.security.PrivilegedExceptionAction: java.lang.Object run()>"
"<android.os.CancellationSignal: void cancel()>","<android.os.CancellationSignal: void cancel()>"
"<java.lang.Exception: void <init>(java.lang.Throwable)>","<java.lang.Exception: void <init>(java.lang.Throwable)>"
"<java.lang.Class: java.lang.String getTypeName()>","<java.lang.Class: java.lang.String getTypeName()>"
"<android.util.Range: void <init>(java.lang.Comparable,java.lang.Comparable)>","<android.util.Range: void <init>(java.lang.Comparable,java.lang.Comparable)>"
"<android.view.WindowInsets$Type: int systemGestures()>","<android.view.WindowInsets$Type: int systemGestures()>"
"<android.animation.ValueAnimator: void reverse()>","<android.animation.ValueAnimator: void reverse()>"
"<java.lang.Math: double ceil(double)>","<java.lang.Math: double ceil(double)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace)>"
"<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String,android.os.UserHandle)>","<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String,android.os.UserHandle)>"
"<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>","<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>"
"<android.graphics.RenderNode: boolean isPivotExplicitlySet()>","<android.graphics.RenderNode: boolean isPivotExplicitlySet()>"
"<android.os.Message: boolean isAsynchronous()>","<android.os.Message: boolean isAsynchronous()>"
"<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)>","<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putString(int,java.lang.String)>"
"<android.media.PlaybackParams: float getSpeed()>","<android.media.PlaybackParams: float getSpeed()>"
"<android.view.View: void dispatchSetActivated(boolean)>","<android.view.View: void dispatchSetActivated(boolean)>"
"<android.animation.PropertyValuesHolder: void setIntValues(int[])>","<android.animation.PropertyValuesHolder: void setIntValues(int[])>"
"<android.view.ViewStructure: java.lang.CharSequence getText()>","<android.view.ViewStructure: java.lang.CharSequence getText()>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])>"
"<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<java.lang.Long: int compare(long,long)>","<java.lang.Long: int compare(long,long)>"
"<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>","<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>"
"<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>","<android.view.ViewGroup: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(char)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char)>"
"<java.lang.Character: boolean isWhitespace(int)>","<java.lang.Character: boolean isWhitespace(int)>"
"<java.lang.Character: void <init>(char)>","<java.lang.Character: void <init>(char)>"
"<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>","<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>"
"<android.util.Log: int e(java.lang.String,java.lang.String)>","<android.util.Log: int e(java.lang.String,java.lang.String)>"
"<java.io.File: boolean exists()>","<java.io.File: boolean exists()>"
"<java.nio.ShortBuffer: int arrayOffset()>","<java.nio.ShortBuffer: int arrayOffset()>"
"<android.net.SocketKeepalive$Callback: void <init>()>","<android.net.SocketKeepalive$Callback: void <init>()>"
"<java.util.OptionalLong: long getAsLong()>","<java.util.OptionalLong: long getAsLong()>"
"<java.time.Duration: int toHoursPart()>","<java.time.Duration: int toHoursPart()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollX()>","<android.view.accessibility.AccessibilityRecord: int getScrollX()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int)>"
"<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator andThen(java.util.function.LongUnaryOperator)>","<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator andThen(java.util.function.LongUnaryOperator)>"
"<java.time.LocalDate: java.time.Period until(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: java.time.Period until(java.time.chrono.ChronoLocalDate)>"
"<android.net.LinkProperties: java.lang.String toString()>","<android.net.LinkProperties: java.lang.String toString()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)>"
"<java.util.ListIterator: boolean hasPrevious()>","<java.util.ListIterator: boolean hasPrevious()>"
"<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>","<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>"
"<android.view.KeyCharacterMap: int getModifierBehavior()>","<android.view.KeyCharacterMap: int getModifierBehavior()>"
"<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)>","<android.hardware.Camera$Parameters: void setGpsProcessingMethod(java.lang.String)>"
"<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>","<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>"
"<java.lang.Class: boolean isInterface()>","<java.lang.Class: boolean isInterface()>"
"<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>","<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>"
"<android.view.AttachedSurfaceControl: void setTouchableRegion(android.graphics.Region)>","<android.view.AttachedSurfaceControl: void setTouchableRegion(android.graphics.Region)>"
"<java.lang.Double: double doubleValue()>","<java.lang.Double: double doubleValue()>"
"<android.view.WindowInsets: int getSystemWindowInsetTop()>","<android.view.WindowInsets: int getSystemWindowInsetTop()>"
"<android.view.View: boolean hasFocus()>","<android.view.View: boolean hasFocus()>"
"<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>","<android.content.ClipData: android.content.ClipData newHtmlText(java.lang.CharSequence,java.lang.CharSequence,java.lang.String)>"
"<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader,java.lang.Class)>"
"<android.content.Intent: java.util.Set getCategories()>","<android.content.Intent: java.util.Set getCategories()>"
"<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>","<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request build()>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request build()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Model getModel()>"
"<java.lang.Math: double cos(double)>","<java.lang.Math: double cos(double)>"
"<android.view.MotionEvent: float getHistoricalX(int,int)>","<android.view.MotionEvent: float getHistoricalX(int,int)>"
"<android.media.AudioTrack: int getUnderrunCount()>","<android.media.AudioTrack: int getUnderrunCount()>"
"<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>","<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>"
"<android.media.session.MediaSession$QueueItem: android.media.MediaDescription getDescription()>","<android.media.session.MediaSession$QueueItem: android.media.MediaDescription getDescription()>"
"<android.widget.AbsListView: boolean onInterceptHoverEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onInterceptHoverEvent(android.view.MotionEvent)>"
"<java.lang.StringBuilder: char charAt(int)>","<java.lang.StringBuilder: char charAt(int)>"
"<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence)>","<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence)>"
"<android.telephony.TelephonyManager: void updateAvailableNetworks(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>","<android.telephony.TelephonyManager: void updateAvailableNetworks(java.util.List,java.util.concurrent.Executor,java.util.function.Consumer)>"
"<android.app.Activity: boolean setTranslucent(boolean)>","<android.app.Activity: boolean setTranslucent(boolean)>"
"<org.xmlpull.v1.XmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>","<org.xmlpull.v1.XmlSerializer: java.lang.String getPrefix(java.lang.String,boolean)>"
"<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>","<java.nio.file.FileSystem: java.util.Set supportedFileAttributeViews()>"
"<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>","<java.lang.ClassLoader: void setPackageAssertionStatus(java.lang.String,boolean)>"
"<android.view.DragAndDropPermissions: void <init>()>","<android.view.DragAndDropPermissions: void <init>()>"
"<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>","<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>"
"<android.widget.TextView: int getJustificationMode()>","<android.widget.TextView: int getJustificationMode()>"
"<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)>","<android.view.textclassifier.TextSelection: float getConfidenceScore(java.lang.String)>"
"<java.lang.invoke.MethodHandles$Lookup: void <init>()>","<java.lang.invoke.MethodHandles$Lookup: void <init>()>"
"<android.widget.TextView: int getAutoSizeTextType()>","<android.widget.TextView: int getAutoSizeTextType()>"
"<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>","<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>"
"<android.media.AudioRecord: android.media.AudioFormat getFormat()>","<android.media.AudioRecord: android.media.AudioFormat getFormat()>"
"<java.time.Instant: long toEpochMilli()>","<java.time.Instant: long toEpochMilli()>"
"<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.widget.TextView: void setTextSelectHandle(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextSelectHandle(android.graphics.drawable.Drawable)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction addTransactionCommittedListener(java.util.concurrent.Executor,android.view.SurfaceControl$TransactionCommittedListener)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction addTransactionCommittedListener(java.util.concurrent.Executor,android.view.SurfaceControl$TransactionCommittedListener)>"
"<android.app.RemoteAction: int describeContents()>","<android.app.RemoteAction: int describeContents()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordEndIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordEndIndex(int)>"
"<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>","<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoPeriod period(int,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoPeriod period(int,int,int)>"
"<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>","<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>"
"<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>","<android.view.WindowInsets: android.view.WindowInsets consumeStableInsets()>"
"<android.graphics.Path: android.graphics.Path$FillType getFillType()>","<android.graphics.Path: android.graphics.Path$FillType getFillType()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>"
"<android.text.style.URLSpan: void onClick(android.view.View)>","<android.text.style.URLSpan: void onClick(android.view.View)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)>"
"<android.text.PrecomputedText: void <init>()>","<android.text.PrecomputedText: void <init>()>"
"<android.view.MotionEvent: float getToolMajor()>","<android.view.MotionEvent: float getToolMajor()>"
"<android.graphics.drawable.Drawable: void jumpToCurrentState()>","<android.graphics.drawable.Drawable: void jumpToCurrentState()>"
"<android.hardware.camera2.CaptureFailure: boolean wasImageCaptured()>","<android.hardware.camera2.CaptureFailure: boolean wasImageCaptured()>"
"<android.view.View: void <init>(android.content.Context)>","<android.view.View: void <init>(android.content.Context)>"
"<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.View: boolean isActivated()>","<android.view.View: boolean isActivated()>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusMonths(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusMonths(long)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog create()>","<android.app.AlertDialog$Builder: android.app.AlertDialog create()>"
"<android.animation.Animator: long getStartDelay()>","<android.animation.Animator: long getStartDelay()>"
"<android.os.Handler: void <init>(android.os.Handler$Callback)>","<android.os.Handler: void <init>(android.os.Handler$Callback)>"
"<java.text.Format: java.lang.Object parseObject(java.lang.String)>","<java.text.Format: java.lang.Object parseObject(java.lang.String)>"
"<android.view.DragAndDropPermissions: void writeToParcel(android.os.Parcel,int)>","<android.view.DragAndDropPermissions: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: boolean isImportantForAutofill()>","<android.view.View: boolean isImportantForAutofill()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(java.lang.CharSequence)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(java.lang.CharSequence)>"
"<android.app.Activity: void finish()>","<android.app.Activity: void finish()>"
"<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>","<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>"
"<java.io.FileOutputStream: void <init>(java.io.File)>","<java.io.FileOutputStream: void <init>(java.io.File)>"
"<android.net.Network: java.net.InetAddress[] getAllByName(java.lang.String)>","<android.net.Network: java.net.InetAddress[] getAllByName(java.lang.String)>"
"<java.time.LocalTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>","<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>"
"<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction$Builder setExtras(android.os.Bundle)>","<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction$Builder setExtras(android.os.Bundle)>"
"<android.view.translation.TranslationCapability: int describeContents()>","<android.view.translation.TranslationCapability: int describeContents()>"
"<android.net.ConnectivityManager: void <init>()>","<android.net.ConnectivityManager: void <init>()>"
"<android.media.AudioAttributes: boolean isContentSpatialized()>","<android.media.AudioAttributes: boolean isContentSpatialized()>"
"<android.app.assist.AssistContent: boolean isAppProvidedIntent()>","<android.app.assist.AssistContent: boolean isAppProvidedIntent()>"
"<android.content.res.TypedArray: int getIndex(int)>","<android.content.res.TypedArray: int getIndex(int)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>"
"<java.time.Period: void <init>()>","<java.time.Period: void <init>()>"
"<android.os.Parcelable: int describeContents()>","<android.os.Parcelable: int describeContents()>"
"<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>","<android.graphics.Outline: void setRoundRect(android.graphics.Rect,float)>"
"<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()>","<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()>"
"<android.view.ViewTreeObserver: void addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>","<android.view.ViewTreeObserver: void addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>"
"<android.media.MediaMetadataEditor: void <init>()>","<android.media.MediaMetadataEditor: void <init>()>"
"<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()>","<android.view.textclassifier.TextClassifierEvent: android.os.Bundle getExtras()>"
"<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>","<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>"
"<android.database.sqlite.SQLiteStatement: long executeInsert()>","<android.database.sqlite.SQLiteStatement: long executeInsert()>"
"<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)>"
"<android.os.Debug: void startMethodTracing()>","<android.os.Debug: void startMethodTracing()>"
"<java.util.Arrays: void setAll(java.lang.Object[],java.util.function.IntFunction)>","<java.util.Arrays: void setAll(java.lang.Object[],java.util.function.IntFunction)>"
"<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState build()>","<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState build()>"
"<java.lang.Thread: void start()>","<java.lang.Thread: void start()>"
"<java.security.cert.CertPath: void <init>(java.lang.String)>","<java.security.cert.CertPath: void <init>(java.lang.String)>"
"<android.graphics.Point: void negate()>","<android.graphics.Point: void negate()>"
"<java.lang.String: int lastIndexOf(java.lang.String)>","<java.lang.String: int lastIndexOf(java.lang.String)>"
"<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>","<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>"
"<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>","<android.media.AudioRecord: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>"
"<java.time.Period: java.time.Period normalized()>","<java.time.Period: java.time.Period normalized()>"
"<java.nio.file.Path: java.nio.file.Path getRoot()>","<java.nio.file.Path: java.nio.file.Path getRoot()>"
"<android.content.ContentValues: boolean equals(java.lang.Object)>","<android.content.ContentValues: boolean equals(java.lang.Object)>"
"<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>","<android.media.session.MediaSessionManager: java.util.List getActiveSessions(android.content.ComponentName)>"
"<android.telephony.BarringInfo$BarringServiceInfo: int getBarringType()>","<android.telephony.BarringInfo$BarringServiceInfo: int getBarringType()>"
"<android.widget.Scroller: boolean isFinished()>","<android.widget.Scroller: boolean isFinished()>"
"<android.widget.ListView: long[] getCheckItemIds()>","<android.widget.ListView: long[] getCheckItemIds()>"
"<android.view.inputmethod.InputConnection: boolean finishComposingText()>","<android.view.inputmethod.InputConnection: boolean finishComposingText()>"
"<java.nio.channels.Selector: void close()>","<java.nio.channels.Selector: void close()>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>"
"<android.view.MenuItem: int getAlphabeticModifiers()>","<android.view.MenuItem: int getAlphabeticModifiers()>"
"<android.media.MediaDrm: void provideProvisionResponse(byte[])>","<android.media.MediaDrm: void provideProvisionResponse(byte[])>"
"<android.view.View: boolean performHapticFeedback(int)>","<android.view.View: boolean performHapticFeedback(int)>"
"<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>","<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)>"
"<android.content.pm.PackageInstaller$SessionParams: void setInstallLocation(int)>","<android.content.pm.PackageInstaller$SessionParams: void setInstallLocation(int)>"
"<android.media.SyncParams: float getFrameRate()>","<android.media.SyncParams: float getFrameRate()>"
"<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>","<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Integer: int highestOneBit(int)>","<java.lang.Integer: int highestOneBit(int)>"
"<android.widget.AbsListView: int getVerticalScrollbarWidth()>","<android.widget.AbsListView: int getVerticalScrollbarWidth()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>"
"<android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)>","<android.widget.TextView: void setTextClassifier(android.view.textclassifier.TextClassifier)>"
"<android.graphics.RectF: int hashCode()>","<android.graphics.RectF: int hashCode()>"
"<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>","<android.view.SubMenu: android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)>"
"<android.os.Bundle: void putFloatArray(java.lang.String,float[])>","<android.os.Bundle: void putFloatArray(java.lang.String,float[])>"
"<java.nio.file.DirectoryStream: java.util.Iterator iterator()>","<java.nio.file.DirectoryStream: java.util.Iterator iterator()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeId(int)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeId(int)>"
"<java.time.LocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.LocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>","<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)>"
"<java.io.InputStream: int readNBytes(byte[],int,int)>","<java.io.InputStream: int readNBytes(byte[],int,int)>"
"<android.app.Activity: boolean showAssist(android.os.Bundle)>","<android.app.Activity: boolean showAssist(android.os.Bundle)>"
"<android.media.AudioMetadataReadMap: android.media.AudioMetadataMap dup()>","<android.media.AudioMetadataReadMap: android.media.AudioMetadataMap dup()>"
"<android.view.KeyEvent: long getDownTime()>","<android.view.KeyEvent: long getDownTime()>"
"<android.view.View$MeasureSpec: void <init>()>","<android.view.View$MeasureSpec: void <init>()>"
"<java.util.Hashtable: void <init>(int,float)>","<java.util.Hashtable: void <init>(int,float)>"
"<android.animation.Animator: void <init>()>","<android.animation.Animator: void <init>()>"
"<java.lang.Float: float sum(float,float)>","<java.lang.Float: float sum(float,float)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(android.net.Uri)>"
"<android.telephony.TelephonyManager$ModemErrorException: void <init>(android.telephony.TelephonyManager)>","<android.telephony.TelephonyManager$ModemErrorException: void <init>(android.telephony.TelephonyManager)>"
"<android.net.LinkProperties: java.lang.String getInterfaceName()>","<android.net.LinkProperties: java.lang.String getInterfaceName()>"
"<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>","<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>"
"<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)>"
"<java.util.stream.LongStream: java.util.stream.LongStream skip(long)>","<java.util.stream.LongStream: java.util.stream.LongStream skip(long)>"
"<android.icu.util.ULocale: java.lang.String getName()>","<android.icu.util.ULocale: java.lang.String getName()>"
"<android.content.ContentProvider: boolean isTemporary()>","<android.content.ContentProvider: boolean isTemporary()>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream parallel()>","<java.util.stream.BaseStream: java.util.stream.BaseStream parallel()>"
"<android.os.Bundle: byte getByte(java.lang.String)>","<android.os.Bundle: byte getByte(java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence)>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float,float)>"
"<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>","<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>"
"<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)>","<android.app.ActivityManager: boolean isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAuxiliary(boolean)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAuxiliary(boolean)>"
"<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)>","<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap,int)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap,int)>"
"<android.content.res.Resources$Theme: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.Resources$Theme: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String,java.lang.Class)>"
"<android.view.inputmethod.InputMethodInfo: int getConfigChanges()>","<android.view.inputmethod.InputMethodInfo: int getConfigChanges()>"
"<android.media.MediaDrm: int getSecurityLevel(byte[])>","<android.media.MediaDrm: int getSecurityLevel(byte[])>"
"<android.os.Parcel: java.lang.Object readTypedObject(android.os.Parcelable$Creator)>","<android.os.Parcel: java.lang.Object readTypedObject(android.os.Parcelable$Creator)>"
"<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setIpv4Encapsulation(android.net.IpSecManager$UdpEncapsulationSocket,int)>","<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setIpv4Encapsulation(android.net.IpSecManager$UdpEncapsulationSocket,int)>"
"<java.lang.Math: double sinh(double)>","<java.lang.Math: double sinh(double)>"
"<java.util.Optional: boolean equals(java.lang.Object)>","<java.util.Optional: boolean equals(java.lang.Object)>"
"<java.lang.Character: char lowSurrogate(int)>","<java.lang.Character: char lowSurrogate(int)>"
"<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>","<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable mutate()>"
"<android.media.AudioMetadataReadMap: java.lang.Object get(android.media.AudioMetadata$Key)>","<android.media.AudioMetadataReadMap: java.lang.Object get(android.media.AudioMetadata$Key)>"
"<android.media.MediaDrm$MediaDrmStateException: java.lang.String getDiagnosticInfo()>","<android.media.MediaDrm$MediaDrmStateException: java.lang.String getDiagnosticInfo()>"
"<android.media.session.MediaController$PlaybackInfo: java.lang.String toString()>","<android.media.session.MediaController$PlaybackInfo: java.lang.String toString()>"
"<java.lang.reflect.Field: byte getByte(java.lang.Object)>","<java.lang.reflect.Field: byte getByte(java.lang.Object)>"
"<java.util.Arrays: void parallelSort(float[],int,int)>","<java.util.Arrays: void parallelSort(float[],int,int)>"
"<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>","<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>"
"<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>","<java.net.ContentHandlerFactory: java.net.ContentHandler createContentHandler(java.lang.String)>"
"<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>","<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>"
"<android.media.MediaPlayer$OnMediaTimeDiscontinuityListener: void onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)>","<android.media.MediaPlayer$OnMediaTimeDiscontinuityListener: void onMediaTimeDiscontinuity(android.media.MediaPlayer,android.media.MediaTimestamp)>"
"<java.nio.Buffer: java.lang.Object array()>","<java.nio.Buffer: java.lang.Object array()>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asVarargsCollector(java.lang.Class)>"
"<android.media.AudioAttributes: int getContentType()>","<android.media.AudioAttributes: int getContentType()>"
"<java.util.List: int size()>","<java.util.List: int size()>"
"<java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>","<java.util.Collections: java.util.SortedSet synchronizedSortedSet(java.util.SortedSet)>"
"<java.lang.Float: float intBitsToFloat(int)>","<java.lang.Float: float intBitsToFloat(int)>"
"<java.nio.CharBuffer: java.lang.Object array()>","<java.nio.CharBuffer: java.lang.Object array()>"
"<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable mutate()>","<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable mutate()>"
"<java.time.Duration: java.time.Duration multipliedBy(long)>","<java.time.Duration: java.time.Duration multipliedBy(long)>"
"<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>","<android.widget.ListView: void addHeaderView(android.view.View,java.lang.Object,boolean)>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>"
"<android.graphics.Canvas: void concat(android.graphics.Matrix)>","<android.graphics.Canvas: void concat(android.graphics.Matrix)>"
"<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>","<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>"
"<android.view.Menu: android.view.MenuItem add(int,int,int,int)>","<android.view.Menu: android.view.MenuItem add(int,int,int,int)>"
"<android.view.translation.TranslationSpec: void <clinit>()>","<android.view.translation.TranslationSpec: void <clinit>()>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetStart(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetStart(int,int)>"
"<java.lang.'annotation'.ElementType: void <clinit>()>","<java.lang.'annotation'.ElementType: void <clinit>()>"
"<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getOetf()>","<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getOetf()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>","<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
"<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)>","<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setMatrix(android.graphics.Matrix)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setMatrix(android.graphics.Matrix)>"
"<java.net.SocketImpl: void <init>()>","<java.net.SocketImpl: void <init>()>"
"<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>","<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>"
"<java.lang.reflect.Method: java.lang.String toGenericString()>","<java.lang.reflect.Method: java.lang.String toGenericString()>"
"<android.os.Process: int getThreadPriority(int)>","<android.os.Process: int getThreadPriority(int)>"
"<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>","<android.view.SurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>"
"<android.view.KeyEvent: boolean isSymPressed()>","<android.view.KeyEvent: boolean isSymPressed()>"
"<android.widget.ListView: int getMaxScrollAmount()>","<android.widget.ListView: int getMaxScrollAmount()>"
"<java.util.stream.LongStream: java.util.stream.BaseStream sequential()>","<java.util.stream.LongStream: java.util.stream.BaseStream sequential()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>"
"<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>","<android.text.InputFilter$AllCaps: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>"
"<android.os.Debug: int getGlobalClassInitCount()>","<android.os.Debug: int getGlobalClassInitCount()>"
"<android.database.sqlite.SQLiteClosable: void <init>()>","<android.database.sqlite.SQLiteClosable: void <init>()>"
"<android.view.Window: void setChildInt(int,int)>","<android.view.Window: void setChildInt(int,int)>"
"<java.time.OffsetTime: java.time.OffsetTime withSecond(int)>","<java.time.OffsetTime: java.time.OffsetTime withSecond(int)>"
"<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>","<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>"
"<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>","<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>"
"<java.net.ServerSocket: boolean getReuseAddress()>","<java.net.ServerSocket: boolean getReuseAddress()>"
"<java.net.ServerSocket: void setReuseAddress(boolean)>","<java.net.ServerSocket: void setReuseAddress(boolean)>"
"<java.time.temporal.TemporalField: boolean isDateBased()>","<java.time.temporal.TemporalField: boolean isDateBased()>"
"<android.text.TextUtils: java.lang.CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)>","<android.text.TextUtils: java.lang.CharSequence listEllipsize(android.content.Context,java.util.List,java.lang.String,android.text.TextPaint,float,int)>"
"<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>","<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int)>"
"<java.time.Month: java.time.Month of(int)>","<java.time.Month: java.time.Month of(int)>"
"<android.net.RouteInfo: android.net.IpPrefix getDestination()>","<android.net.RouteInfo: android.net.IpPrefix getDestination()>"
"<android.app.ActionBar: float getElevation()>","<android.app.ActionBar: float getElevation()>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setNetworkSpecifier(java.lang.String)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setNetworkSpecifier(java.lang.String)>"
"<android.graphics.Outline: void setOval(int,int,int,int)>","<android.graphics.Outline: void setOval(int,int,int,int)>"
"<java.net.SocketImpl: void bind(java.net.InetAddress,int)>","<java.net.SocketImpl: void bind(java.net.InetAddress,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMin()>"
"<android.telephony.IccOpenLogicalChannelResponse: int getChannel()>","<android.telephony.IccOpenLogicalChannelResponse: int getChannel()>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <init>()>"
"<android.content.pm.ApplicationInfo: boolean isProfileable()>","<android.content.pm.ApplicationInfo: boolean isProfileable()>"
"<java.io.Reader: long transferTo(java.io.Writer)>","<java.io.Reader: long transferTo(java.io.Writer)>"
"<java.lang.Package: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<java.lang.Math: long multiplyFull(int,int)>","<java.lang.Math: long multiplyFull(int,int)>"
"<android.view.View: long getDrawingTime()>","<android.view.View: long getDrawingTime()>"
"<android.graphics.drawable.BitmapDrawable: boolean hasAntiAlias()>","<android.graphics.drawable.BitmapDrawable: boolean hasAntiAlias()>"
"<java.io.File: void <init>(java.lang.String,java.lang.String)>","<java.io.File: void <init>(java.lang.String,java.lang.String)>"
"<android.content.Context: java.util.concurrent.Executor getMainExecutor()>","<android.content.Context: java.util.concurrent.Executor getMainExecutor()>"
"<android.util.Property: void <init>(java.lang.Class,java.lang.String)>","<android.util.Property: void <init>(java.lang.Class,java.lang.String)>"
"<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>","<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>"
"<java.time.format.TextStyle: boolean isStandalone()>","<java.time.format.TextStyle: boolean isStandalone()>"
"<android.media.AudioRecord: int getAudioSessionId()>","<android.media.AudioRecord: int getAudioSessionId()>"
"<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>","<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>"
"<android.graphics.Color: boolean isWideGamut()>","<android.graphics.Color: boolean isWideGamut()>"
"<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>","<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>"
"<android.app.Activity: void setProgressBarVisibility(boolean)>","<android.app.Activity: void setProgressBarVisibility(boolean)>"
"<java.lang.Math: double atan(double)>","<java.lang.Math: double atan(double)>"
"<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>","<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>"
"<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>","<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>"
"<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.view.View: boolean requestFocus(int,android.graphics.Rect)>","<android.view.View: boolean requestFocus(int,android.graphics.Rect)>"
"<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>","<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>"
"<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>","<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>"
"<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollDeltaY(int)>"
"<java.util.SortedSet: java.util.SortedSet headSet(java.lang.Object)>","<java.util.SortedSet: java.util.SortedSet headSet(java.lang.Object)>"
"<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>","<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>"
"<android.view.Display: java.lang.String getName()>","<android.view.Display: java.lang.String getName()>"
"<android.app.Activity: android.view.View findViewById(int)>","<android.app.Activity: android.view.View findViewById(int)>"
"<android.graphics.RenderNode: float getTranslationZ()>","<android.graphics.RenderNode: float getTranslationZ()>"
"<java.time.format.DateTimeFormatter: void <clinit>()>","<java.time.format.DateTimeFormatter: void <clinit>()>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder scaleToStartVolume(float)>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder scaleToStartVolume(float)>"
"<android.app.Fragment: android.app.FragmentManager getFragmentManager()>","<android.app.Fragment: android.app.FragmentManager getFragmentManager()>"
"<java.net.URL: java.net.URLConnection openConnection()>","<java.net.URL: java.net.URLConnection openConnection()>"
"<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaShort()>","<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaShort()>"
"<android.hardware.camera2.CaptureFailure: void <init>()>","<android.hardware.camera2.CaptureFailure: void <init>()>"
"<android.os.LocaleList: int indexOf(java.util.Locale)>","<android.os.LocaleList: int indexOf(java.util.Locale)>"
"<android.content.pm.PackageInfo: java.lang.String toString()>","<android.content.pm.PackageInfo: java.lang.String toString()>"
"<java.time.Duration: java.time.Duration ofSeconds(long)>","<java.time.Duration: java.time.Duration ofSeconds(long)>"
"<android.media.session.PlaybackState$CustomAction: void <clinit>()>","<android.media.session.PlaybackState$CustomAction: void <clinit>()>"
"<java.time.LocalDateTime: int getSecond()>","<java.time.LocalDateTime: int getSecond()>"
"<android.app.VoiceInteractor$CompleteVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>","<android.app.VoiceInteractor$CompleteVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getLabel()>","<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getLabel()>"
"<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.os.LocaleList: java.lang.String toString()>","<android.os.LocaleList: java.lang.String toString()>"
"<java.time.Month: int firstDayOfYear(boolean)>","<java.time.Month: int firstDayOfYear(boolean)>"
"<java.lang.Long: long parseLong(java.lang.String,int)>","<java.lang.Long: long parseLong(java.lang.String,int)>"
"<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>","<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>"
"<java.time.Duration: java.time.Duration minusNanos(long)>","<java.time.Duration: java.time.Duration minusNanos(long)>"
"<java.net.Inet4Address: boolean isMCLinkLocal()>","<java.net.Inet4Address: boolean isMCLinkLocal()>"
"<java.util.Properties: void <init>(java.util.Properties)>","<java.util.Properties: void <init>(java.util.Properties)>"
"<android.widget.AdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)>","<android.widget.AdapterView: void dispatchRestoreInstanceState(android.util.SparseArray)>"
"<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)>","<android.media.session.MediaSessionManager: void removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener)>"
"<android.media.AudioManager$AudioRecordingCallback: void <init>()>","<android.media.AudioManager$AudioRecordingCallback: void <init>()>"
"<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>","<android.content.pm.PackageManager: void addPackageToPreferred(java.lang.String)>"
"<java.lang.invoke.MethodHandleInfo: java.lang.String refKindName(int)>","<java.lang.invoke.MethodHandleInfo: java.lang.String refKindName(int)>"
"<android.media.AudioRecordingConfiguration: java.util.List getClientEffects()>","<android.media.AudioRecordingConfiguration: java.util.List getClientEffects()>"
"<android.widget.RelativeLayout$LayoutParams: void removeRule(int)>","<android.widget.RelativeLayout$LayoutParams: void removeRule(int)>"
"<android.window.SplashScreenView: void <init>()>","<android.window.SplashScreenView: void <init>()>"
"<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.content.pm.ModuleInfo: java.lang.CharSequence getName()>","<android.content.pm.ModuleInfo: java.lang.CharSequence getName()>"
"<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics valueOf(java.lang.String)>","<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics valueOf(java.lang.String)>"
"<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>","<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>"
"<java.nio.ShortBuffer: void <init>()>","<java.nio.ShortBuffer: void <init>()>"
"<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>","<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>"
"<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>","<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Message: void <init>()>","<android.view.textclassifier.ConversationActions$Message: void <init>()>"
"<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>","<android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>"
"<android.widget.Toolbar: void setTitleTextColor(int)>","<android.widget.Toolbar: void setTitleTextColor(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>"
"<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>","<android.provider.Settings$System: void setShowGTalkServiceStatus(android.content.ContentResolver,boolean)>"
"<java.time.LocalDate: java.time.LocalDate minusYears(long)>","<java.time.LocalDate: java.time.LocalDate minusYears(long)>"
"<android.graphics.drawable.Drawable: boolean isVisible()>","<android.graphics.drawable.Drawable: boolean isVisible()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle tryFinally(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle tryFinally(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)>"
"<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],android.content.pm.PackageManager$PackageInfoFlags)>"
"<java.util.Random: int nextInt(int)>","<java.util.Random: int nextInt(int)>"
"<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>","<android.text.method.TransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>"
"<android.graphics.Paint$Join: void <init>(java.lang.String,int)>","<android.graphics.Paint$Join: void <init>(java.lang.String,int)>"
"<android.media.Image: void setCropRect(android.graphics.Rect)>","<android.media.Image: void setCropRect(android.graphics.Rect)>"
"<android.content.SyncAdapterType: boolean equals(java.lang.Object)>","<android.content.SyncAdapterType: boolean equals(java.lang.Object)>"
"<java.nio.file.FileSystem: boolean isReadOnly()>","<java.nio.file.FileSystem: boolean isReadOnly()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: void <init>()>","<android.database.sqlite.SQLiteDatabase$OpenParams: void <init>()>"
"<android.os.Process: void setThreadPriority(int,int)>","<android.os.Process: void setThreadPriority(int,int)>"
"<java.io.PrintStream: void flush()>","<java.io.PrintStream: void flush()>"
"<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>","<java.nio.FloatBuffer: int compareTo(java.nio.FloatBuffer)>"
"<java.util.Hashtable: java.lang.String toString()>","<java.util.Hashtable: java.lang.String toString()>"
"<android.content.Context: java.lang.ClassLoader getClassLoader()>","<android.content.Context: java.lang.ClassLoader getClassLoader()>"
"<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()>","<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>"
"<android.graphics.Canvas$VertexMode: void <clinit>()>","<android.graphics.Canvas$VertexMode: void <clinit>()>"
"<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<java.net.URI: java.net.URL toURL()>","<java.net.URI: java.net.URL toURL()>"
"<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>","<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>"
"<android.app.ActivityManager: int getLauncherLargeIconDensity()>","<android.app.ActivityManager: int getLauncherLargeIconDensity()>"
"<java.lang.Long: java.lang.String toHexString(long)>","<java.lang.Long: java.lang.String toHexString(long)>"
"<java.lang.NullPointerException: void <init>()>","<java.lang.NullPointerException: void <init>()>"
"<android.media.MediaDrm$OnSessionLostStateListener: void onSessionLostState(android.media.MediaDrm,byte[])>","<android.media.MediaDrm$OnSessionLostStateListener: void onSessionLostState(android.media.MediaDrm,byte[])>"
"<android.util.ArrayMap: java.lang.Object keyAt(int)>","<android.util.ArrayMap: java.lang.Object keyAt(int)>"
"<android.hardware.Camera$Area: boolean equals(java.lang.Object)>","<android.hardware.Camera$Area: boolean equals(java.lang.Object)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>"
"<android.net.Uri: android.net.Uri$Builder buildUpon()>","<android.net.Uri: android.net.Uri$Builder buildUpon()>"
"<android.content.IntentFilter: java.lang.String getDataType(int)>","<android.content.IntentFilter: java.lang.String getDataType(int)>"
"<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<java.text.AttributedCharacterIterator$Attribute: java.lang.Object readResolve()>","<java.text.AttributedCharacterIterator$Attribute: java.lang.Object readResolve()>"
"<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()>","<android.content.pm.PackageManager: android.os.Bundle getSuspendedPackageAppExtras()>"
"<java.lang.reflect.Parameter: java.lang.Class getType()>","<java.lang.reflect.Parameter: java.lang.Class getType()>"
"<android.content.pm.PackageManager: void verifyPendingInstall(int,int)>","<android.content.pm.PackageManager: void verifyPendingInstall(int,int)>"
"<android.content.Context: android.content.ComponentName startService(android.content.Intent)>","<android.content.Context: android.content.ComponentName startService(android.content.Intent)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>","<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>"
"<android.os.VibrationAttributes: int getFlags()>","<android.os.VibrationAttributes: int getFlags()>"
"<android.hardware.camera2.CameraCharacteristics: java.util.List getKeys()>","<android.hardware.camera2.CameraCharacteristics: java.util.List getKeys()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withMonth(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withMonth(int)>"
"<java.util.Arrays: boolean equals(long[],long[])>","<java.util.Arrays: boolean equals(long[],long[])>"
"<android.os.ParcelFileDescriptor$OnCloseListener: void onClose(java.io.IOException)>","<android.os.ParcelFileDescriptor$OnCloseListener: void onClose(java.io.IOException)>"
"<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()>","<android.view.textclassifier.TextClassification$Request: java.time.ZonedDateTime getReferenceTime()>"
"<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>","<android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])>"
"<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>","<android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)>"
"<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>","<android.view.inputmethod.InputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>"
"<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<android.media.AudioRouting: android.media.AudioDeviceInfo getPreferredDevice()>","<android.media.AudioRouting: android.media.AudioDeviceInfo getPreferredDevice()>"
"<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void notifyDetachedFromWindow()>","<android.view.SurfaceControlViewHost$SurfacePackage: void notifyDetachedFromWindow()>"
"<java.time.LocalDate: java.time.LocalDateTime atStartOfDay()>","<java.time.LocalDate: java.time.LocalDateTime atStartOfDay()>"
"<android.content.ContentProvider: void onCallingPackageChanged()>","<android.content.ContentProvider: void onCallingPackageChanged()>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>","<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>"
"<java.time.ZonedDateTime: int getSecond()>","<java.time.ZonedDateTime: int getSecond()>"
"<android.graphics.Path: boolean isInverseFillType()>","<android.graphics.Path: boolean isInverseFillType()>"
"<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getLowerBound()>","<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getLowerBound()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>","<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>"
"<java.util.Random: java.util.stream.IntStream ints(int,int)>","<java.util.Random: java.util.stream.IntStream ints(int,int)>"
"<android.app.Fragment: android.transition.Transition getReturnTransition()>","<android.app.Fragment: android.transition.Transition getReturnTransition()>"
"<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>","<java.net.URLConnection: void setFileNameMap(java.net.FileNameMap)>"
"<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>","<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>"
"<java.time.Month: java.time.Month 'from'(java.time.temporal.TemporalAccessor)>","<java.time.Month: java.time.Month 'from'(java.time.temporal.TemporalAccessor)>"
"<android.widget.AdapterView$OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>","<android.widget.AdapterView$OnItemSelectedListener: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>"
"<android.telephony.BarringInfo: boolean equals(java.lang.Object)>","<android.telephony.BarringInfo: boolean equals(java.lang.Object)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>","<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>"
"<android.os.Parcel: android.os.IBinder readStrongBinder()>","<android.os.Parcel: android.os.IBinder readStrongBinder()>"
"<java.util.Arrays: int binarySearch(double[],double)>","<java.util.Arrays: int binarySearch(double[],double)>"
"<android.widget.EditText: void <init>(android.content.Context)>","<android.widget.EditText: void <init>(android.content.Context)>"
"<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>","<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>"
"<android.os.Message: android.os.Bundle peekData()>","<android.os.Message: android.os.Bundle peekData()>"
"<java.net.ServerSocket: void implAccept(java.net.Socket)>","<java.net.ServerSocket: void implAccept(java.net.Socket)>"
"<android.view.View: void stopNestedScroll()>","<android.view.View: void stopNestedScroll()>"
"<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection)>","<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection)>"
"<java.util.Dictionary: boolean isEmpty()>","<java.util.Dictionary: boolean isEmpty()>"
"<android.os.Debug$InstructionCount: int globalMethodInvocations()>","<android.os.Debug$InstructionCount: int globalMethodInvocations()>"
"<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()>","<android.graphics.Bitmap: android.hardware.HardwareBuffer getHardwareBuffer()>"
"<android.view.ViewParent: boolean isTextDirectionResolved()>","<android.view.ViewParent: boolean isTextDirectionResolved()>"
"<android.net.Uri: int getPort()>","<android.net.Uri: int getPort()>"
"<android.graphics.RecordingCanvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>"
"<android.graphics.Region: boolean set(int,int,int,int)>","<android.graphics.Region: boolean set(int,int,int,int)>"
"<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int)>"
"<android.view.inputmethod.EditorBoundsInfo: java.lang.String toString()>","<android.view.inputmethod.EditorBoundsInfo: java.lang.String toString()>"
"<android.widget.TextView: void setJustificationMode(int)>","<android.widget.TextView: void setJustificationMode(int)>"
"<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.view.View: boolean canScrollVertically(int)>","<android.view.View: boolean canScrollVertically(int)>"
"<android.app.Dialog: void setOwnerActivity(android.app.Activity)>","<android.app.Dialog: void setOwnerActivity(android.app.Activity)>"
"<android.view.View: int getWindowSystemUiVisibility()>","<android.view.View: int getWindowSystemUiVisibility()>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(boolean)>"
"<android.hardware.Sensor: float getResolution()>","<android.hardware.Sensor: float getResolution()>"
"<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>","<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>"
"<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>","<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>"
"<android.telephony.TelephonyManager: boolean isTtyModeSupported()>","<android.telephony.TelephonyManager: boolean isTtyModeSupported()>"
"<android.view.View: void setEnabled(boolean)>","<android.view.View: void setEnabled(boolean)>"
"<java.nio.channels.FileLock: boolean isValid()>","<java.nio.channels.FileLock: boolean isValid()>"
"<java.util.Optional: java.lang.Object orElseThrow()>","<java.util.Optional: java.lang.Object orElseThrow()>"
"<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.util.LongSparseArray: void remove(long)>","<android.util.LongSparseArray: void remove(long)>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onProgressChanged(int,float)>","<android.content.pm.PackageInstaller$SessionCallback: void onProgressChanged(int,float)>"
"<android.view.ActionMode: boolean isTitleOptional()>","<android.view.ActionMode: boolean isTitleOptional()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseOrAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseOrAcquire(java.lang.Object[])>"
"<android.widget.AdapterView: void onDetachedFromWindow()>","<android.widget.AdapterView: void onDetachedFromWindow()>"
"<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>","<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>"
"<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>","<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>"
"<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()>","<android.content.pm.InstallSourceInfo: java.lang.String getInitiatingPackageName()>"
"<android.graphics.drawable.BitmapDrawable: void <init>(java.lang.String)>","<android.graphics.drawable.BitmapDrawable: void <init>(java.lang.String)>"
"<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>","<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>"
"<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.ActivityManager: boolean isLowMemoryKillReportSupported()>","<android.app.ActivityManager: boolean isLowMemoryKillReportSupported()>"
"<java.io.File: java.lang.String getPath()>","<java.io.File: java.lang.String getPath()>"
"<android.media.AudioRecord: int getState()>","<android.media.AudioRecord: int getState()>"
"<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>","<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>"
"<android.util.Property: void set(java.lang.Object,java.lang.Object)>","<android.util.Property: void set(java.lang.Object,java.lang.Object)>"
"<android.view.translation.TranslationSpec: void <init>(android.icu.util.ULocale,int)>","<android.view.translation.TranslationSpec: void <init>(android.icu.util.ULocale,int)>"
"<java.time.OffsetDateTime: int compareTo(java.lang.Object)>","<java.time.OffsetDateTime: int compareTo(java.lang.Object)>"
"<android.database.SQLException: void <init>()>","<android.database.SQLException: void <init>()>"
"<android.view.View: int getScrollY()>","<android.view.View: int getScrollY()>"
"<android.widget.RemoteViews: void setLightBackgroundLayoutId(int)>","<android.widget.RemoteViews: void setLightBackgroundLayoutId(int)>"
"<java.net.URLConnection: java.util.Map getHeaderFields()>","<java.net.URLConnection: java.util.Map getHeaderFields()>"
"<java.util.UUID: boolean equals(java.lang.Object)>","<java.util.UUID: boolean equals(java.lang.Object)>"
"<android.view.View: android.view.View requireViewById(int)>","<android.view.View: android.view.View requireViewById(int)>"
"<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)>"
"<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>","<java.util.stream.Stream: boolean allMatch(java.util.function.Predicate)>"
"<android.media.MediaMetadataEditor: java.lang.String getString(int,java.lang.String)>","<android.media.MediaMetadataEditor: java.lang.String getString(int,java.lang.String)>"
"<java.nio.charset.Charset: boolean isRegistered()>","<java.nio.charset.Charset: boolean isRegistered()>"
"<java.time.Duration: java.util.List getUnits()>","<java.time.Duration: java.util.List getUnits()>"
"<android.view.textclassifier.TextLinks$TextLink: int getStart()>","<android.view.textclassifier.TextLinks$TextLink: int getStart()>"
"<android.app.Fragment: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>","<android.app.Fragment: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>"
"<java.lang.String: int offsetByCodePoints(int,int)>","<java.lang.String: int offsetByCodePoints(int,int)>"
"<java.io.InputStream: long transferTo(java.io.OutputStream)>","<java.io.InputStream: long transferTo(java.io.OutputStream)>"
"<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>","<android.content.ContentResolver: java.util.List getOutgoingPersistedUriPermissions()>"
"<android.os.RemoteException: void <init>()>","<android.os.RemoteException: void <init>()>"
"<java.lang.String: java.lang.String stripTrailing()>","<java.lang.String: java.lang.String stripTrailing()>"
"<android.view.ViewDebug$ExportedProperty: boolean deepExport()>","<android.view.ViewDebug$ExportedProperty: boolean deepExport()>"
"<android.graphics.RenderNode: float getPivotY()>","<android.graphics.RenderNode: float getPivotY()>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>"
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>","<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()>","<android.media.session.MediaSessionManager$RemoteUserInfo: int getPid()>"
"<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>","<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>"
"<android.content.res.Configuration: void setLocales(android.os.LocaleList)>","<android.content.res.Configuration: void setLocales(android.os.LocaleList)>"
"<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>","<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>"
"<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String)>","<android.media.session.MediaSession: void <init>(android.content.Context,java.lang.String)>"
"<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>","<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>"
"<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>","<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>"
"<java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>","<java.util.Comparator: java.util.Comparator comparingLong(java.util.function.ToLongFunction)>"
"<android.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.content.Loader)>","<android.app.LoaderManager$LoaderCallbacks: void onLoaderReset(android.content.Loader)>"
"<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>","<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>"
"<java.nio.file.Path: java.io.File toFile()>","<java.nio.file.Path: java.io.File toFile()>"
"<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(java.lang.Runnable)>","<android.app.VoiceInteractor: boolean unregisterOnDestroyedCallback(java.lang.Runnable)>"
"<java.lang.Math: double atan2(double,double)>","<java.lang.Math: double atan2(double,double)>"
"<android.os.Debug: long threadCpuTimeNanos()>","<android.os.Debug: long threadCpuTimeNanos()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean)>"
"<java.io.InputStream: java.io.InputStream nullInputStream()>","<java.io.InputStream: java.io.InputStream nullInputStream()>"
"<java.util.concurrent.ExecutionException: void <init>(java.lang.String)>","<java.util.concurrent.ExecutionException: void <init>(java.lang.String)>"
"<android.media.AudioTrack: int setAuxEffectSendLevel(float)>","<android.media.AudioTrack: int setAuxEffectSendLevel(float)>"
"<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()>","<android.view.Display$HdrCapabilities: int[] getSupportedHdrTypes()>"
"<android.widget.TextView$BufferType: void <init>(java.lang.String,int)>","<android.widget.TextView$BufferType: void <init>(java.lang.String,int)>"
"<android.graphics.RecordingCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>","<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>"
"<java.lang.Long: void <init>(java.lang.String)>","<java.lang.Long: void <init>(java.lang.String)>"
"<android.view.Window: int getDefaultFeatures(android.content.Context)>","<android.view.Window: int getDefaultFeatures(android.content.Context)>"
"<android.app.VoiceInteractor: android.app.VoiceInteractor$Request getActiveRequest(java.lang.String)>","<android.app.VoiceInteractor: android.app.VoiceInteractor$Request getActiveRequest(java.lang.String)>"
"<android.view.View: int[] getAttributeResolutionStack(int)>","<android.view.View: int[] getAttributeResolutionStack(int)>"
"<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>"
"<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>","<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>"
"<android.media.AudioManager: void addOnModeChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnModeChangedListener)>","<android.media.AudioManager: void addOnModeChangedListener(java.util.concurrent.Executor,android.media.AudioManager$OnModeChangedListener)>"
"<android.content.IntentFilter: void addDataPath(java.lang.String,int)>","<android.content.IntentFilter: void addDataPath(java.lang.String,int)>"
"<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>"
"<android.icu.util.ULocale: android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale)>","<android.icu.util.ULocale: android.icu.util.ULocale addLikelySubtags(android.icu.util.ULocale)>"
"<java.time.temporal.TemporalField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>","<java.time.temporal.TemporalField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
"<java.lang.Class: boolean isArray()>","<java.lang.Class: boolean isArray()>"
"<android.view.translation.TranslationResponseValue: java.lang.String toString()>","<android.view.translation.TranslationResponseValue: java.lang.String toString()>"
"<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>","<android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>"
"<android.graphics.Matrix: void setSkew(float,float)>","<android.graphics.Matrix: void setSkew(float,float)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setAuthType(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setAuthType(int)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)>"
"<android.graphics.Rect: boolean intersects(int,int,int,int)>","<android.graphics.Rect: boolean intersects(int,int,int,int)>"
"<android.hardware.camera2.CameraDevice: int getCameraAudioRestriction()>","<android.hardware.camera2.CameraDevice: int getCameraAudioRestriction()>"
"<android.view.View: void setLeftTopRightBottom(int,int,int,int)>","<android.view.View: void setLeftTopRightBottom(int,int,int,int)>"
"<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"
"<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>","<java.util.SortedMap: java.util.SortedMap tailMap(java.lang.Object)>"
"<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>","<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>"
"<android.view.View: boolean isPressed()>","<android.view.View: boolean isPressed()>"
"<android.media.AudioManager: boolean shouldVibrate(int)>","<android.media.AudioManager: boolean shouldVibrate(int)>"
"<java.io.PrintStream: void write(int)>","<java.io.PrintStream: void write(int)>"
"<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>"
"<android.os.Parcel: void writeTypedArrayMap(android.util.ArrayMap,int)>","<android.os.Parcel: void writeTypedArrayMap(android.util.ArrayMap,int)>"
"<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>","<android.widget.RemoteViews: void <init>(android.widget.RemoteViews,android.widget.RemoteViews)>"
"<android.view.View: boolean getHasOverlappingRendering()>","<android.view.View: boolean getHasOverlappingRendering()>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int[])>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int[])>"
"<android.media.AudioManager: boolean isWiredHeadsetOn()>","<android.media.AudioManager: boolean isWiredHeadsetOn()>"
"<org.xmlpull.v1.XmlSerializer: java.lang.String getNamespace()>","<org.xmlpull.v1.XmlSerializer: java.lang.String getNamespace()>"
"<android.view.Window: void injectInputEvent(android.view.InputEvent)>","<android.view.Window: void injectInputEvent(android.view.InputEvent)>"
"<android.hardware.lights.Light: int getOrdinal()>","<android.hardware.lights.Light: int getOrdinal()>"
"<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>","<android.provider.Settings$System: void getConfiguration(android.content.ContentResolver,android.content.res.Configuration)>"
"<java.time.chrono.IsoEra: java.time.chrono.IsoEra[] values()>","<java.time.chrono.IsoEra: java.time.chrono.IsoEra[] values()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isActive()>"
"<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.concurrent.Executor getExecutor()>","<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.concurrent.Executor getExecutor()>"
"<android.widget.Toolbar$LayoutParams: void <init>(int)>","<android.widget.Toolbar$LayoutParams: void <init>(int)>"
"<java.lang.Error: void <init>(java.lang.String)>","<java.lang.Error: void <init>(java.lang.String)>"
"<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()>","<android.content.pm.InstallSourceInfo: java.lang.String getInstallingPackageName()>"
"<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription)>","<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription)>"
"<java.util.Collections: java.util.NavigableSet emptyNavigableSet()>","<java.util.Collections: java.util.NavigableSet emptyNavigableSet()>"
"<android.graphics.Color: float[] getComponents(float[])>","<android.graphics.Color: float[] getComponents(float[])>"
"<java.lang.System: java.lang.String lineSeparator()>","<java.lang.System: java.lang.String lineSeparator()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()>"
"<android.app.Fragment: void setArguments(android.os.Bundle)>","<android.app.Fragment: void setArguments(android.os.Bundle)>"
"<java.util.Map$Entry: java.util.Comparator comparingByValue(java.util.Comparator)>","<java.util.Map$Entry: java.util.Comparator comparingByValue(java.util.Comparator)>"
"<java.lang.ref.ReferenceQueue: void <init>()>","<java.lang.ref.ReferenceQueue: void <init>()>"
"<android.view.View: float getRightFadingEdgeStrength()>","<android.view.View: float getRightFadingEdgeStrength()>"
"<android.app.Fragment: java.lang.CharSequence getText(int)>","<android.app.Fragment: java.lang.CharSequence getText(int)>"
"<android.os.Debug: int setGlobalAllocationLimit(int)>","<android.os.Debug: int setGlobalAllocationLimit(int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>"
"<android.graphics.RecordingCanvas: void drawPoints(float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPoints(float[],android.graphics.Paint)>"
"<android.graphics.ColorSpace: boolean isWideGamut()>","<android.graphics.ColorSpace: boolean isWideGamut()>"
"<java.time.OffsetDateTime: java.time.OffsetTime toOffsetTime()>","<java.time.OffsetDateTime: java.time.OffsetTime toOffsetTime()>"
"<android.graphics.RenderNode: boolean hasIdentityMatrix()>","<android.graphics.RenderNode: boolean hasIdentityMatrix()>"
"<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>"
"<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>","<android.content.pm.PackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>"
"<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.TextView: boolean onTouchEvent(android.view.MotionEvent)>"
"<java.net.Socket: void <init>()>","<java.net.Socket: void <init>()>"
"<android.util.Rational: void <init>(int,int)>","<android.util.Rational: void <init>(int,int)>"
"<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>","<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>"
"<android.content.DialogInterface$OnClickListener: void onClick(android.content.DialogInterface,int)>","<android.content.DialogInterface$OnClickListener: void onClick(android.content.DialogInterface,int)>"
"<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>","<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>"
"<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.text.style.URLSpan: int getSpanTypeId()>","<android.text.style.URLSpan: int getSpanTypeId()>"
"<android.app.Person: android.app.Person$Builder toBuilder()>","<android.app.Person: android.app.Person$Builder toBuilder()>"
"<java.util.AbstractList: void removeRange(int,int)>","<java.util.AbstractList: void removeRange(int,int)>"
"<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>","<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>"
"<java.util.Collections: java.util.Iterator emptyIterator()>","<java.util.Collections: java.util.Iterator emptyIterator()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.ZoneId)>"
"<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])>","<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])>"
"<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>","<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>"
"<android.util.SparseArray: void append(int,java.lang.Object)>","<android.util.SparseArray: void append(int,java.lang.Object)>"
"<android.hardware.Camera$Parameters: void setGpsTimestamp(long)>","<android.hardware.Camera$Parameters: void setGpsTimestamp(long)>"
"<java.util.NavigableSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>","<java.util.NavigableSet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>"
"<android.hardware.camera2.MultiResolutionImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,java.util.concurrent.Executor)>","<android.hardware.camera2.MultiResolutionImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,java.util.concurrent.Executor)>"
"<android.content.Context: int[] checkUriPermissions(java.util.List,int,int,int)>","<android.content.Context: int[] checkUriPermissions(java.util.List,int,int,int)>"
"<android.view.View: void setDrawingCacheBackgroundColor(int)>","<android.view.View: void setDrawingCacheBackgroundColor(int)>"
"<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>","<java.lang.SecurityManager: void checkRead(java.io.FileDescriptor)>"
"<android.view.ViewGroup: void addView(android.view.View,int,int)>","<android.view.ViewGroup: void addView(android.view.View,int,int)>"
"<android.widget.TextView: boolean isSingleLine()>","<android.widget.TextView: boolean isSingleLine()>"
"<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>","<java.nio.ByteBuffer: java.nio.DoubleBuffer asDoubleBuffer()>"
"<java.util.function.LongToIntFunction: int applyAsInt(long)>","<java.util.function.LongToIntFunction: int applyAsInt(long)>"
"<android.view.WindowInsets$Type: int mandatorySystemGestures()>","<android.view.WindowInsets$Type: int mandatorySystemGestures()>"
"<android.app.VoiceInteractor$Prompt: java.lang.String toString()>","<android.app.VoiceInteractor$Prompt: java.lang.String toString()>"
"<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)>"
"<android.graphics.Paint$FontMetricsInt: void <init>()>","<android.graphics.Paint$FontMetricsInt: void <init>()>"
"<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)>","<android.content.pm.PackageManager: java.util.Set getWhitelistedRestrictedPermissions(java.lang.String,int)>"
"<android.content.pm.PackageManager$ComponentInfoFlags: void <init>()>","<android.content.pm.PackageManager$ComponentInfoFlags: void <init>()>"
"<android.view.View: void setRevealOnFocusHint(boolean)>","<android.view.View: void setRevealOnFocusHint(boolean)>"
"<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onActiveChanged(int,boolean)>","<android.content.pm.PackageInstaller$SessionCallback: void onActiveChanged(int,boolean)>"
"<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>","<java.net.URLConnection: boolean getDefaultAllowUserInteraction()>"
"<java.nio.FloatBuffer: java.nio.Buffer reset()>","<java.nio.FloatBuffer: java.nio.Buffer reset()>"
"<android.hardware.Sensor: int getFifoReservedEventCount()>","<android.hardware.Sensor: int getFifoReservedEventCount()>"
"<android.app.Activity: void onUserLeaveHint()>","<android.app.Activity: void onUserLeaveHint()>"
"<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>","<android.hardware.camera2.params.MeteringRectangle: void <init>(int,int,int,int,int)>"
"<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: void defineEntityReplacementText(java.lang.String,java.lang.String)>"
"<android.view.ViewStructure: void setFocusable(boolean)>","<android.view.ViewStructure: void setFocusable(boolean)>"
"<java.lang.Short: int compare(short,short)>","<java.lang.Short: int compare(short,short)>"
"<android.os.Bundle: char[] getCharArray(java.lang.String)>","<android.os.Bundle: char[] getCharArray(java.lang.String)>"
"<android.os.Vibrator: void cancel()>","<android.os.Vibrator: void cancel()>"
"<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>","<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)>"
"<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.view.ViewGroup: int indexOfChild(android.view.View)>","<android.view.ViewGroup: int indexOfChild(android.view.View)>"
"<java.net.URI: int compareTo(java.net.URI)>","<java.net.URI: int compareTo(java.net.URI)>"
"<android.telephony.TelephonyManager: boolean hasIccCard()>","<android.telephony.TelephonyManager: boolean hasIccCard()>"
"<java.util.stream.DoubleStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)>","<java.util.stream.DoubleStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjDoubleConsumer,java.util.function.BiConsumer)>"
"<android.media.VolumeShaper$Operation: boolean equals(java.lang.Object)>","<android.media.VolumeShaper$Operation: boolean equals(java.lang.Object)>"
"<android.content.pm.PackageInstaller$SessionParams: void setPackageSource(int)>","<android.content.pm.PackageInstaller$SessionParams: void setPackageSource(int)>"
"<android.os.PatternMatcher: void <init>(java.lang.String,int)>","<android.os.PatternMatcher: void <init>(java.lang.String,int)>"
"<android.transition.PathMotion: void <init>()>","<android.transition.PathMotion: void <init>()>"
"<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()>","<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()>"
"<android.view.ActionMode: void setType(int)>","<android.view.ActionMode: void setType(int)>"
"<android.animation.ValueAnimator: android.animation.Animator clone()>","<android.animation.ValueAnimator: android.animation.Animator clone()>"
"<java.lang.Thread: void run()>","<java.lang.Thread: void run()>"
"<android.net.ProxyInfo: java.lang.String[] getExclusionList()>","<android.net.ProxyInfo: java.lang.String[] getExclusionList()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setOverridesImplicitlyEnabledSubtype(boolean)>"
"<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.Consumer)>"
"<android.widget.TextView: boolean hasOverlappingRendering()>","<android.widget.TextView: boolean hasOverlappingRendering()>"
"<android.telephony.data.ApnSetting: int hashCode()>","<android.telephony.data.ApnSetting: int hashCode()>"
"<android.widget.EditText: void setEllipsize(android.text.TextUtils$TruncateAt)>","<android.widget.EditText: void setEllipsize(android.text.TextUtils$TruncateAt)>"
"<java.io.PrintWriter: void print(java.lang.String)>","<java.io.PrintWriter: void print(java.lang.String)>"
"<android.view.inputmethod.InputConnection: boolean endBatchEdit()>","<android.view.inputmethod.InputConnection: boolean endBatchEdit()>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.telephony.ims.ImsReasonInfo: int getCode()>","<android.telephony.ims.ImsReasonInfo: int getCode()>"
"<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.net.IpPrefix: int hashCode()>","<android.net.IpPrefix: int hashCode()>"
"<android.media.MediaMetadataEditor: long getLong(int,long)>","<android.media.MediaMetadataEditor: long getLong(int,long)>"
"<android.view.View: void setOnCapturedPointerListener(android.view.View$OnCapturedPointerListener)>","<android.view.View: void setOnCapturedPointerListener(android.view.View$OnCapturedPointerListener)>"
"<android.hardware.camera2.CameraManager$TorchCallback: void <init>()>","<android.hardware.camera2.CameraManager$TorchCallback: void <init>()>"
"<android.view.WindowInsets: java.lang.String toString()>","<android.view.WindowInsets: java.lang.String toString()>"
"<java.util.stream.LongStream: java.util.stream.LongStream empty()>","<java.util.stream.LongStream: java.util.stream.LongStream empty()>"
"<java.util.LongSummaryStatistics: void <init>(long,long,long,long)>","<java.util.LongSummaryStatistics: void <init>(long,long,long,long)>"
"<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.lang.ClassNotFoundException: void <init>()>","<java.lang.ClassNotFoundException: void <init>()>"
"<android.media.TimedMetaData: long getTimestamp()>","<android.media.TimedMetaData: long getTimestamp()>"
"<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>","<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>"
"<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence)>","<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence)>"
"<android.media.Session2Token: android.os.Bundle getExtras()>","<android.media.Session2Token: android.os.Bundle getExtras()>"
"<android.animation.ValueAnimator: void resume()>","<android.animation.ValueAnimator: void resume()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>"
"<android.media.RemoteControlClient: void <init>(android.app.PendingIntent,android.os.Looper)>","<android.media.RemoteControlClient: void <init>(android.app.PendingIntent,android.os.Looper)>"
"<android.view.WindowInsets$Type: void <init>()>","<android.view.WindowInsets$Type: void <init>()>"
"<android.graphics.drawable.LayerDrawable: boolean onLevelChange(int)>","<android.graphics.drawable.LayerDrawable: boolean onLevelChange(int)>"
"<android.os.Debug: long getNativeHeapAllocatedSize()>","<android.os.Debug: long getNativeHeapAllocatedSize()>"
"<android.telephony.PhoneStateListener: void onDataActivity(int)>","<android.telephony.PhoneStateListener: void onDataActivity(int)>"
"<android.util.Rational: long longValue()>","<android.util.Rational: long longValue()>"
"<java.io.PrintWriter: void print(int)>","<java.io.PrintWriter: void print(int)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isContentInvalid()>"
"<android.net.Uri: boolean equals(java.lang.Object)>","<android.net.Uri: boolean equals(java.lang.Object)>"
"<java.util.Arrays: void parallelSort(double[])>","<java.util.Arrays: void parallelSort(double[])>"
"<android.widget.TextView: int getImeOptions()>","<android.widget.TextView: int getImeOptions()>"
"<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>","<android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)>"
"<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>","<android.view.inputmethod.InputMethodManager: boolean switchToNextInputMethod(android.os.IBinder,boolean)>"
"<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>","<android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Debug: int getThreadExternalAllocSize()>","<android.os.Debug: int getThreadExternalAllocSize()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>"
"<android.content.ClipData$Item: void <init>(android.net.Uri)>","<android.content.ClipData$Item: void <init>(android.net.Uri)>"
"<java.time.Instant: java.time.Instant minusNanos(long)>","<java.time.Instant: java.time.Instant minusNanos(long)>"
"<android.view.View: int getOutlineSpotShadowColor()>","<android.view.View: int getOutlineSpotShadowColor()>"
"<android.view.View: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>","<android.view.View: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>"
"<android.view.View: int getMinimumHeight()>","<android.view.View: int getMinimumHeight()>"
"<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>","<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>","<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>"
"<android.widget.TextView: android.text.PrecomputedText$Params getTextMetricsParams()>","<android.widget.TextView: android.text.PrecomputedText$Params getTextMetricsParams()>"
"<android.graphics.RenderNode: boolean setRotationY(float)>","<android.graphics.RenderNode: boolean setRotationY(float)>"
"<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onSwitchFailed(android.hardware.camera2.CameraOfflineSession)>","<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onSwitchFailed(android.hardware.camera2.CameraOfflineSession)>"
"<android.view.accessibility.AccessibilityWindowInfo: void <init>()>","<android.view.accessibility.AccessibilityWindowInfo: void <init>()>"
"<android.view.translation.TranslationResponseValue: int getStatusCode()>","<android.view.translation.TranslationResponseValue: int getStatusCode()>"
"<android.app.Activity: void startActivities(android.content.Intent[])>","<android.app.Activity: void startActivities(android.content.Intent[])>"
"<android.view.inputmethod.ExtractedText: int describeContents()>","<android.view.inputmethod.ExtractedText: int describeContents()>"
"<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)>","<javax.security.auth.Subject: java.util.Set getPrincipals(java.lang.Class)>"
"<android.net.NetworkRequest: boolean hasCapability(int)>","<android.net.NetworkRequest: boolean hasCapability(int)>"
"<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>","<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>"
"<java.security.cert.CertPath: java.lang.String getType()>","<java.security.cert.CertPath: java.lang.String getType()>"
"<android.graphics.Matrix: void set(android.graphics.Matrix)>","<android.graphics.Matrix: void set(android.graphics.Matrix)>"
"<android.widget.AbsListView: int getCacheColorHint()>","<android.widget.AbsListView: int getCacheColorHint()>"
"<android.telephony.TelephonyManager: int setForbiddenPlmns(java.util.List)>","<android.telephony.TelephonyManager: int setForbiddenPlmns(java.util.List)>"
"<android.content.ContextWrapper: java.io.File getCodeCacheDir()>","<android.content.ContextWrapper: java.io.File getCodeCacheDir()>"
"<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()>","<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()>"
"<java.net.Inet4Address: boolean isMCGlobal()>","<java.net.Inet4Address: boolean isMCGlobal()>"
"<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>","<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>"
"<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)>"
"<android.view.View: void setNextFocusUpId(int)>","<android.view.View: void setNextFocusUpId(int)>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asCollector(java.lang.Class,int)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asCollector(java.lang.Class,int)>"
"<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>"
"<java.nio.channels.Pipe$SourceChannel: int validOps()>","<java.nio.channels.Pipe$SourceChannel: int validOps()>"
"<android.graphics.RenderNode: boolean setPosition(android.graphics.Rect)>","<android.graphics.RenderNode: boolean setPosition(android.graphics.Rect)>"
"<java.nio.ShortBuffer: short[] array()>","<java.nio.ShortBuffer: short[] array()>"
"<android.media.ResourceBusyException: void <init>(java.lang.String)>","<android.media.ResourceBusyException: void <init>(java.lang.String)>"
"<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.inputmethod.ExtractedTextRequest: void <init>()>","<android.view.inputmethod.ExtractedTextRequest: void <init>()>"
"<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>","<android.content.ContentResolver: void releasePersistableUriPermission(android.net.Uri,int)>"
"<java.nio.CharBuffer: java.lang.Appendable append(char)>","<java.nio.CharBuffer: java.lang.Appendable append(char)>"
"<android.app.ActivityManager: int addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>","<android.app.ActivityManager: int addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager$TaskDescription,android.graphics.Bitmap)>"
"<javax.security.auth.Subject: boolean equals(java.lang.Object)>","<javax.security.auth.Subject: boolean equals(java.lang.Object)>"
"<java.time.chrono.Era: int getValue()>","<java.time.chrono.Era: int getValue()>"
"<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>","<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>"
"<android.graphics.Matrix: boolean preSkew(float,float,float,float)>","<android.graphics.Matrix: boolean preSkew(float,float,float,float)>"
"<android.view.WindowInsets$Builder: void <init>(android.view.WindowInsets)>","<android.view.WindowInsets$Builder: void <init>(android.view.WindowInsets)>"
"<java.lang.reflect.Array: void <init>()>","<java.lang.reflect.Array: void <init>()>"
"<android.content.ClipboardManager: boolean hasPrimaryClip()>","<android.content.ClipboardManager: boolean hasPrimaryClip()>"
"<android.content.Context: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>","<android.content.Context: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>"
"<java.time.Period: java.time.Period ofDays(int)>","<java.time.Period: java.time.Period ofDays(int)>"
"<android.content.pm.PathPermission: void <init>(android.os.Parcel)>","<android.content.pm.PathPermission: void <init>(android.os.Parcel)>"
"<android.graphics.Movie: int duration()>","<android.graphics.Movie: int duration()>"
"<android.telephony.TelephonyManager: void sendDialerSpecialCode(java.lang.String)>","<android.telephony.TelephonyManager: void sendDialerSpecialCode(java.lang.String)>"
"<android.graphics.drawable.LayerDrawable: int getLayerGravity(int)>","<android.graphics.drawable.LayerDrawable: int getLayerGravity(int)>"
"<android.view.View: int getMeasuredWidthAndState()>","<android.view.View: int getMeasuredWidthAndState()>"
"<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings build()>","<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings build()>"
"<android.app.Dialog: void setCancelMessage(android.os.Message)>","<android.app.Dialog: void setCancelMessage(android.os.Message)>"
"<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()>","<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVisualPrompt()>"
"<android.hardware.camera2.CameraManager: void turnOnTorchWithStrengthLevel(java.lang.String,int)>","<android.hardware.camera2.CameraManager: void turnOnTorchWithStrengthLevel(java.lang.String,int)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBlendModeEffect(android.graphics.RenderEffect,android.graphics.RenderEffect,android.graphics.BlendMode)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBlendModeEffect(android.graphics.RenderEffect,android.graphics.RenderEffect,android.graphics.BlendMode)>"
"<java.util.Spliterator$OfInt: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfInt: java.util.Spliterator trySplit()>"
"<android.view.Window: int getFeatures()>","<android.view.Window: int getFeatures()>"
"<android.app.ActionBar: void setDisplayOptions(int,int)>","<android.app.ActionBar: void setDisplayOptions(int,int)>"
"<android.view.ViewStructure: java.lang.CharSequence getHint()>","<android.view.ViewStructure: java.lang.CharSequence getHint()>"
"<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()>","<android.view.textclassifier.TextSelection$Request: android.os.LocaleList getDefaultLocales()>"
"<android.content.ContentProviderClient: boolean release()>","<android.content.ContentProviderClient: boolean release()>"
"<java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>","<java.util.function.Predicate: java.util.function.Predicate isEqual(java.lang.Object)>"
"<android.graphics.Point: int describeContents()>","<android.graphics.Point: int describeContents()>"
"<java.util.Collection: java.util.stream.Stream stream()>","<java.util.Collection: java.util.stream.Stream stream()>"
"<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.String)>","<android.content.ContentValues: void put(java.lang.String,java.lang.String)>"
"<android.widget.AbsListView: void setFriction(float)>","<android.widget.AbsListView: void setFriction(float)>"
"<android.view.View: int getLayerType()>","<android.view.View: int getLayerType()>"
"<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] values()>","<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] values()>"
"<android.view.ContextThemeWrapper: void <init>(android.content.Context,android.content.res.Resources$Theme)>","<android.view.ContextThemeWrapper: void <init>(android.content.Context,android.content.res.Resources$Theme)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withDecimalStyle(java.time.format.DecimalStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withDecimalStyle(java.time.format.DecimalStyle)>"
"<java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>","<java.time.zone.ZoneOffsetTransition: int compareTo(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>","<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>"
"<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>","<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>"
"<android.telephony.VisualVoicemailSmsFilterSettings$Builder: void <init>()>","<android.telephony.VisualVoicemailSmsFilterSettings$Builder: void <init>()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setAllowedCapturePolicy(int)>"
"<android.graphics.drawable.LayerDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<android.graphics.RecordingCanvas: void enableZ()>","<android.graphics.RecordingCanvas: void enableZ()>"
"<android.app.Activity: boolean isInMultiWindowMode()>","<android.app.Activity: boolean isInMultiWindowMode()>"
"<android.graphics.drawable.LayerDrawable: int getLayerInsetLeft(int)>","<android.graphics.drawable.LayerDrawable: int getLayerInsetLeft(int)>"
"<android.telephony.TelephonyManager$TimeoutException: void <init>(android.telephony.TelephonyManager)>","<android.telephony.TelephonyManager$TimeoutException: void <init>(android.telephony.TelephonyManager)>"
"<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>","<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>"
"<android.widget.AbsListView: void handleDataChanged()>","<android.widget.AbsListView: void handleDataChanged()>"
"<android.text.Spannable: void removeSpan(java.lang.Object)>","<android.text.Spannable: void removeSpan(java.lang.Object)>"
"<java.util.Arrays: void fill(float[],int,int,float)>","<java.util.Arrays: void fill(float[],int,int,float)>"
"<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>","<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>"
"<android.view.LayoutInflater$Filter: boolean onLoadClass(java.lang.Class)>","<android.view.LayoutInflater$Filter: boolean onLoadClass(java.lang.Class)>"
"<android.content.Intent: java.lang.String toString()>","<android.content.Intent: java.lang.String toString()>"
"<android.view.inputmethod.TextSnapshot: void <init>(android.view.inputmethod.SurroundingText,int,int,int)>","<android.view.inputmethod.TextSnapshot: void <init>(android.view.inputmethod.SurroundingText,int,int,int)>"
"<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>","<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>"
"<java.security.cert.Certificate: java.lang.String toString()>","<java.security.cert.Certificate: java.lang.String toString()>"
"<android.media.MediaPlayer$OnErrorListener: boolean onError(android.media.MediaPlayer,int,int)>","<android.media.MediaPlayer$OnErrorListener: boolean onError(android.media.MediaPlayer,int,int)>"
"<android.view.animation.Animation: int getBackdropColor()>","<android.view.animation.Animation: int getBackdropColor()>"
"<android.net.IpSecAlgorithm: void writeToParcel(android.os.Parcel,int)>","<android.net.IpSecAlgorithm: void writeToParcel(android.os.Parcel,int)>"
"<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>","<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>"
"<android.app.Activity: android.transition.Scene getContentScene()>","<android.app.Activity: android.transition.Scene getContentScene()>"
"<java.util.AbstractQueue: java.lang.Object remove()>","<java.util.AbstractQueue: java.lang.Object remove()>"
"<android.hardware.camera2.CaptureRequest: int describeContents()>","<android.hardware.camera2.CaptureRequest: int describeContents()>"
"<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>","<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>"
"<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>","<android.transition.Transition: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.ComponentName: android.content.ComponentName clone()>","<android.content.ComponentName: android.content.ComponentName clone()>"
"<android.media.MediaDrm: void <init>(java.util.UUID)>","<android.media.MediaDrm: void <init>(java.util.UUID)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusNanos(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusNanos(long)>"
"<android.graphics.Paint: void <init>()>","<android.graphics.Paint: void <init>()>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>"
"<java.util.HashMap: java.lang.Object get(java.lang.Object)>","<java.util.HashMap: java.lang.Object get(java.lang.Object)>"
"<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.spi.AbstractSelectableChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.media.MediaPlayer$OnCompletionListener: void onCompletion(android.media.MediaPlayer)>","<android.media.MediaPlayer$OnCompletionListener: void onCompletion(android.media.MediaPlayer)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int hashCode()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int hashCode()>"
"<android.graphics.Bitmap: int getAllocationByteCount()>","<android.graphics.Bitmap: int getAllocationByteCount()>"
"<java.util.LongSummaryStatistics: long getMin()>","<java.util.LongSummaryStatistics: long getMin()>"
"<android.media.AudioRecord$OnRecordPositionUpdateListener: void onMarkerReached(android.media.AudioRecord)>","<android.media.AudioRecord$OnRecordPositionUpdateListener: void onMarkerReached(android.media.AudioRecord)>"
"<android.content.Context: int checkPermission(java.lang.String,int,int)>","<android.content.Context: int checkPermission(java.lang.String,int,int)>"
"<java.util.Arrays: int mismatch(float[],float[])>","<java.util.Arrays: int mismatch(float[],float[])>"
"<java.io.IOException: void <init>(java.lang.Throwable)>","<java.io.IOException: void <init>(java.lang.Throwable)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>"
"<android.os.Parcel: boolean[] createBooleanArray()>","<android.os.Parcel: boolean[] createBooleanArray()>"
"<android.content.BroadcastReceiver: boolean getAbortBroadcast()>","<android.content.BroadcastReceiver: boolean getAbortBroadcast()>"
"<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String)>"
"<android.widget.AbsListView: void clearChoices()>","<android.widget.AbsListView: void clearChoices()>"
"<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>","<android.media.session.MediaController: void <init>(android.content.Context,android.media.session.MediaSession$Token)>"
"<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>","<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>"
"<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)>","<android.hardware.Camera$Parameters: void setSceneMode(java.lang.String)>"
"<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<java.io.Writer: void <init>()>","<java.io.Writer: void <init>()>"
"<android.database.Cursor: java.lang.String[] getColumnNames()>","<android.database.Cursor: java.lang.String[] getColumnNames()>"
"<java.time.format.DecimalStyle: char getZeroDigit()>","<java.time.format.DecimalStyle: char getZeroDigit()>"
"<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>","<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback,android.os.Handler)>"
"<java.lang.Readable: int read(java.nio.CharBuffer)>","<java.lang.Readable: int read(java.nio.CharBuffer)>"
"<android.media.Rating: android.media.Rating newPercentageRating(float)>","<android.media.Rating: android.media.Rating newPercentageRating(float)>"
"<java.time.Duration: java.time.Duration minusMillis(long)>","<java.time.Duration: java.time.Duration minusMillis(long)>"
"<android.view.InputDevice: boolean supportsSource(int)>","<android.view.InputDevice: boolean supportsSource(int)>"
"<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>","<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)>"
"<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>","<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>"
"<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,int)>","<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,int)>"
"<java.time.ZonedDateTime: int getDayOfMonth()>","<java.time.ZonedDateTime: int getDayOfMonth()>"
"<android.view.Window: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.Window: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>","<java.util.concurrent.ConcurrentLinkedQueue: boolean isEmpty()>"
"<java.lang.System: void exit(int)>","<java.lang.System: void exit(int)>"
"<java.util.Arrays: boolean[] copyOf(boolean[],int)>","<java.util.Arrays: boolean[] copyOf(boolean[],int)>"
"<java.lang.Integer: boolean equals(java.lang.Object)>","<java.lang.Integer: boolean equals(java.lang.Object)>"
"<android.media.AudioManager: float getStreamVolumeDb(int,int,int)>","<android.media.AudioManager: float getStreamVolumeDb(int,int,int)>"
"<java.util.OptionalLong: int hashCode()>","<java.util.OptionalLong: int hashCode()>"
"<android.net.RouteInfo: void <init>()>","<android.net.RouteInfo: void <init>()>"
"<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>","<android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener: void onMediaKeyEventSessionChanged(java.lang.String,android.media.session.MediaSession$Token)>"
"<android.database.Cursor: java.lang.String getString(int)>","<android.database.Cursor: java.lang.String getString(int)>"
"<android.app.Fragment: void setSharedElementReturnTransition(android.transition.Transition)>","<android.app.Fragment: void setSharedElementReturnTransition(android.transition.Transition)>"
"<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>","<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>"
"<android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
"<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>","<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>"
"<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.security.Provider: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<android.view.textclassifier.TextLanguage: int describeContents()>","<android.view.textclassifier.TextLanguage: int describeContents()>"
"<android.content.ClipboardManager: void clearPrimaryClip()>","<android.content.ClipboardManager: void clearPrimaryClip()>"
"<android.graphics.RenderNode: float getElevation()>","<android.graphics.RenderNode: float getElevation()>"
"<android.widget.TextView: int getCurrentTextColor()>","<android.widget.TextView: int getCurrentTextColor()>"
"<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>","<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)>"
"<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)>","<android.content.pm.PackageManager: boolean getSyntheticAppDetailsActivityEnabled(java.lang.String)>"
"<android.view.View: int[] mergeDrawableStates(int[],int[])>","<android.view.View: int[] mergeDrawableStates(int[],int[])>"
"<android.app.FragmentManager: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)>","<android.app.FragmentManager: android.app.Fragment$SavedState saveFragmentInstanceState(android.app.Fragment)>"
"<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>","<android.hardware.camera2.CaptureRequest: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>"
"<android.telephony.TelephonyCallback$CallForwardingIndicatorListener: void onCallForwardingIndicatorChanged(boolean)>","<android.telephony.TelephonyCallback$CallForwardingIndicatorListener: void onCallForwardingIndicatorChanged(boolean)>"
"<java.lang.Class: java.lang.Class[] getInterfaces()>","<java.lang.Class: java.lang.Class[] getInterfaces()>"
"<java.util.NavigableMap: java.lang.Object lowerKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object lowerKey(java.lang.Object)>"
"<android.os.Vibrator: boolean areAllPrimitivesSupported(int[])>","<android.os.Vibrator: boolean areAllPrimitivesSupported(int[])>"
"<java.time.LocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"
"<android.view.Menu: void setGroupVisible(int,boolean)>","<android.view.Menu: void setGroupVisible(int,boolean)>"
"<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<java.util.InvalidPropertiesFormatException: void <init>(java.lang.Throwable)>","<java.util.InvalidPropertiesFormatException: void <init>(java.lang.Throwable)>"
"<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>","<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>"
"<android.app.Activity: java.lang.CharSequence onCreateDescription()>","<android.app.Activity: java.lang.CharSequence onCreateDescription()>"
"<android.widget.TextView: int getCompoundPaddingStart()>","<android.widget.TextView: int getCompoundPaddingStart()>"
"<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>","<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>"
"<android.content.res.ColorStateList: int describeContents()>","<android.content.res.ColorStateList: int describeContents()>"
"<android.net.LinkProperties: void setLinkAddresses(java.util.Collection)>","<android.net.LinkProperties: void setLinkAddresses(java.util.Collection)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void <init>()>","<android.app.ActivityManager$RunningAppProcessInfo: void <init>()>"
"<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int)>","<android.hardware.camera2.CameraCharacteristics: android.hardware.camera2.params.RecommendedStreamConfigurationMap getRecommendedStreamConfigurationMap(int)>"
"<java.lang.String: void <init>()>","<java.lang.String: void <init>()>"
"<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>","<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>"
"<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>","<java.util.PrimitiveIterator$OfLong: java.lang.Long next()>"
"<android.view.ViewGroup: void onDescendantInvalidated(android.view.View,android.view.View)>","<android.view.ViewGroup: void onDescendantInvalidated(android.view.View,android.view.View)>"
"<android.database.sqlite.SQLiteDatabase: void <init>()>","<android.database.sqlite.SQLiteDatabase: void <init>()>"
"<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>","<android.app.AlertDialog: void setTitle(java.lang.CharSequence)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(int)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(int)>"
"<android.telephony.SignalStrength: int getCdmaEcio()>","<android.telephony.SignalStrength: int getCdmaEcio()>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>"
"<android.widget.TextView: void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode)>","<android.widget.TextView: void setCompoundDrawableTintMode(android.graphics.PorterDuff$Mode)>"
"<android.view.inputmethod.InputMethodInfo: void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)>","<android.view.inputmethod.InputMethodInfo: void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)>"
"<android.widget.TextView: int getPaintFlags()>","<android.widget.TextView: int getPaintFlags()>"
"<android.view.inputmethod.InputMethodManager: void <init>()>","<android.view.inputmethod.InputMethodManager: void <init>()>"
"<android.content.pm.ConfigurationInfo: int describeContents()>","<android.content.pm.ConfigurationInfo: int describeContents()>"
"<java.time.LocalDateTime: java.time.LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.LocalDateTime: java.time.LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo)>"
"<java.time.format.DecimalStyle: java.lang.String toString()>","<java.time.format.DecimalStyle: java.lang.String toString()>"
"<android.graphics.Matrix: int hashCode()>","<android.graphics.Matrix: int hashCode()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[],int,int)>"
"<java.time.Period: java.time.Period plusMonths(long)>","<java.time.Period: java.time.Period plusMonths(long)>"
"<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>","<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>"
"<android.os.Parcel: android.util.SizeF readSizeF()>","<android.os.Parcel: android.util.SizeF readSizeF()>"
"<java.util.Arrays: void parallelSetAll(java.lang.Object[],java.util.function.IntFunction)>","<java.util.Arrays: void parallelSetAll(java.lang.Object[],java.util.function.IntFunction)>"
"<java.lang.Long: long reverse(long)>","<java.lang.Long: long reverse(long)>"
"<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)>","<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>"
"<android.content.pm.ModuleInfo: boolean equals(java.lang.Object)>","<android.content.pm.ModuleInfo: boolean equals(java.lang.Object)>"
"<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>","<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,java.util.stream.Collector$Characteristics[])>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(java.time.LocalTime)>","<java.time.LocalDate: java.time.LocalDateTime atTime(java.time.LocalTime)>"
"<android.graphics.drawable.LayerDrawable: boolean onStateChange(int[])>","<android.graphics.drawable.LayerDrawable: boolean onStateChange(int[])>"
"<java.lang.invoke.VarHandle: java.lang.Class varType()>","<java.lang.invoke.VarHandle: java.lang.Class varType()>"
"<android.view.InputDevice: boolean hasMicrophone()>","<android.view.InputDevice: boolean hasMicrophone()>"
"<java.nio.charset.Charset: boolean equals(java.lang.Object)>","<java.nio.charset.Charset: boolean equals(java.lang.Object)>"
"<android.view.MotionEvent$PointerProperties: void <init>()>","<android.view.MotionEvent$PointerProperties: void <init>()>"
"<android.graphics.Paint: void setStartHyphenEdit(int)>","<android.graphics.Paint: void setStartHyphenEdit(int)>"
"<java.lang.Float: int floatToIntBits(float)>","<java.lang.Float: int floatToIntBits(float)>"
"<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>"
"<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>","<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>"
"<android.view.View: void setHorizontalScrollBarEnabled(boolean)>","<android.view.View: void setHorizontalScrollBarEnabled(boolean)>"
"<android.media.Rating: int getRatingStyle()>","<android.media.Rating: int getRatingStyle()>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open(java.net.ProtocolFamily)>"
"<android.content.pm.PackageManager: void getGroupOfPlatformPermission(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>","<android.content.pm.PackageManager: void getGroupOfPlatformPermission(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>"
"<android.view.animation.Animation: void startNow()>","<android.view.animation.Animation: void startNow()>"
"<android.content.res.AssetManager: java.lang.String[] getLocales()>","<android.content.res.AssetManager: java.lang.String[] getLocales()>"
"<android.graphics.Color: long convert(long,android.graphics.ColorSpace)>","<android.graphics.Color: long convert(long,android.graphics.ColorSpace)>"
"<java.util.Arrays: java.lang.String toString(int[])>","<java.util.Arrays: java.lang.String toString(int[])>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: boolean isOutputSupportedFor(android.view.Surface)>"
"<java.lang.invoke.MethodType: java.lang.Class returnType()>","<java.lang.invoke.MethodType: java.lang.Class returnType()>"
"<android.view.View: int getAccessibilityTraversalAfter()>","<android.view.View: int getAccessibilityTraversalAfter()>"
"<org.xmlpull.v1.XmlSerializer: java.lang.Object getProperty(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: java.lang.Object getProperty(java.lang.String)>"
"<java.util.Locale$Category: java.util.Locale$Category valueOf(java.lang.String)>","<java.util.Locale$Category: java.util.Locale$Category valueOf(java.lang.String)>"
"<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()>","<android.view.textclassifier.TextLanguage: int getLocaleHypothesisCount()>"
"<android.net.IpSecAlgorithm: byte[] getKey()>","<android.net.IpSecAlgorithm: byte[] getKey()>"
"<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>","<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>"
"<android.widget.AbsListView: int getListPaddingBottom()>","<android.widget.AbsListView: int getListPaddingBottom()>"
"<android.view.Window: void setSharedElementReenterTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementReenterTransition(android.transition.Transition)>"
"<java.nio.IntBuffer: int hashCode()>","<java.nio.IntBuffer: int hashCode()>"
"<java.lang.Thread$State: java.lang.Thread$State valueOf(java.lang.String)>","<java.lang.Thread$State: java.lang.Thread$State valueOf(java.lang.String)>"
"<android.content.ContentProvider: java.lang.String getReadPermission()>","<android.content.ContentProvider: java.lang.String getReadPermission()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>"
"<android.view.View: void requestLayout()>","<android.view.View: void requestLayout()>"
"<java.security.CodeSigner: int hashCode()>","<java.security.CodeSigner: int hashCode()>"
"<android.media.ImageReader: void <init>()>","<android.media.ImageReader: void <init>()>"
"<android.media.MediaDrm: void setOnExpirationUpdateListener(java.util.concurrent.Executor,android.media.MediaDrm$OnExpirationUpdateListener)>","<android.media.MediaDrm: void setOnExpirationUpdateListener(java.util.concurrent.Executor,android.media.MediaDrm$OnExpirationUpdateListener)>"
"<android.hardware.display.DeviceProductInfo: int getManufactureWeek()>","<android.hardware.display.DeviceProductInfo: int getManufactureWeek()>"
"<java.nio.Buffer: boolean isDirect()>","<java.nio.Buffer: boolean isDirect()>"
"<android.media.VolumeShaper$Configuration: float[] getVolumes()>","<android.media.VolumeShaper$Configuration: float[] getVolumes()>"
"<android.telephony.TelephonyDisplayInfo: int getOverrideNetworkType()>","<android.telephony.TelephonyDisplayInfo: int getOverrideNetworkType()>"
"<android.view.InputDevice: boolean isExternal()>","<android.view.InputDevice: boolean isExternal()>"
"<java.nio.ByteBuffer: byte get(int)>","<java.nio.ByteBuffer: byte get(int)>"
"<android.app.ActivityManager: java.util.List getRunningAppProcesses()>","<android.app.ActivityManager: java.util.List getRunningAppProcesses()>"
"<android.util.ArrayMap: java.util.Collection values()>","<android.util.ArrayMap: java.util.Collection values()>"
"<android.graphics.RectF: int describeContents()>","<android.graphics.RectF: int describeContents()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(java.util.List)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(java.util.List)>"
"<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>","<java.util.concurrent.TimeUnit: void <init>(java.lang.String,int)>"
"<java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)>","<java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription build()>","<android.media.MediaDescription$Builder: android.media.MediaDescription build()>"
"<android.graphics.Matrix: boolean preRotate(float,float,float)>","<android.graphics.Matrix: boolean preRotate(float,float,float)>"
"<android.content.ComponentName: java.lang.String getPackageName()>","<android.content.ComponentName: java.lang.String getPackageName()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence)>","<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence)>"
"<java.lang.Integer: int parseUnsignedInt(java.lang.String)>","<java.lang.Integer: int parseUnsignedInt(java.lang.String)>"
"<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>","<android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)>"
"<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>","<android.widget.RemoteViews: void setChronometerCountDown(int,boolean)>"
"<android.accounts.Account: void <clinit>()>","<android.accounts.Account: void <clinit>()>"
"<java.net.DatagramSocket: boolean getBroadcast()>","<java.net.DatagramSocket: boolean getBroadcast()>"
"<android.widget.Toolbar$LayoutParams: void <init>(int,int)>","<android.widget.Toolbar$LayoutParams: void <init>(int,int)>"
"<android.telephony.TelephonyManager: void sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)>","<android.telephony.TelephonyManager: void sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)>"
"<java.util.Collections: void <init>()>","<java.util.Collections: void <init>()>"
"<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence)>","<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence)>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onClosed(android.hardware.camera2.CameraCaptureSession)>"
"<android.view.WindowId: int hashCode()>","<android.view.WindowId: int hashCode()>"
"<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)>","<android.telephony.TelephonyManager: void setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)>"
"<android.telephony.TelephonyCallback$CellLocationListener: void onCellLocationChanged(android.telephony.CellLocation)>","<android.telephony.TelephonyCallback$CellLocationListener: void onCellLocationChanged(android.telephony.CellLocation)>"
"<android.hardware.camera2.CameraExtensionSession: int capture(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback)>","<android.hardware.camera2.CameraExtensionSession: int capture(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback)>"
"<android.view.View: void setBackgroundResource(int)>","<android.view.View: void setBackgroundResource(int)>"
"<java.util.Map: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>"
"<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>"
"<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>","<java.util.AbstractMap: java.lang.Object remove(java.lang.Object)>"
"<java.time.temporal.ChronoUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>","<java.time.temporal.ChronoUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
"<android.media.MediaFormat: java.lang.String getString(java.lang.String)>","<android.media.MediaFormat: java.lang.String getString(java.lang.String)>"
"<android.view.DragAndDropPermissions: int describeContents()>","<android.view.DragAndDropPermissions: int describeContents()>"
"<android.media.MediaPlayer: void setAuxEffectSendLevel(float)>","<android.media.MediaPlayer: void setAuxEffectSendLevel(float)>"
"<android.content.AttributionSource: int describeContents()>","<android.content.AttributionSource: int describeContents()>"
"<android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>","<android.hardware.camera2.CameraDevice: void createCaptureSession(android.hardware.camera2.params.SessionConfiguration)>"
"<android.content.ClipDescription: boolean isStyledText()>","<android.content.ClipDescription: boolean isStyledText()>"
"<java.util.stream.LongStream: java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction)>","<java.util.stream.LongStream: java.util.stream.DoubleStream mapToDouble(java.util.function.LongToDoubleFunction)>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,long,long)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,long,long)>"
"<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.nio.file.Path: boolean endsWith(java.lang.String)>","<java.nio.file.Path: boolean endsWith(java.lang.String)>"
"<java.util.Date: int getSeconds()>","<java.util.Date: int getSeconds()>"
"<java.lang.Integer: int divideUnsigned(int,int)>","<java.lang.Integer: int divideUnsigned(int,int)>"
"<android.window.OnBackInvokedDispatcher: void registerOnBackInvokedCallback(int,android.window.OnBackInvokedCallback)>","<android.window.OnBackInvokedDispatcher: void registerOnBackInvokedCallback(int,android.window.OnBackInvokedCallback)>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>"
"<android.graphics.Matrix: boolean postRotate(float,float,float)>","<android.graphics.Matrix: boolean postRotate(float,float,float)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)>"
"<android.view.MotionEvent: float getX(int)>","<android.view.MotionEvent: float getX(int)>"
"<java.time.Period: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
"<java.net.DatagramSocketImpl: int getLocalPort()>","<java.net.DatagramSocketImpl: int getLocalPort()>"
"<android.graphics.Rect: boolean intersect(android.graphics.Rect)>","<android.graphics.Rect: boolean intersect(android.graphics.Rect)>"
"<android.graphics.RenderNode: float getTranslationY()>","<android.graphics.RenderNode: float getTranslationY()>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void <init>()>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void <init>()>"
"<android.view.View: void setTag(int,java.lang.Object)>","<android.view.View: void setTag(int,java.lang.Object)>"
"<java.util.Set: boolean equals(java.lang.Object)>","<java.util.Set: boolean equals(java.lang.Object)>"
"<android.hardware.Sensor: int getType()>","<android.hardware.Sensor: int getType()>"
"<java.lang.Character: java.lang.String getName(int)>","<java.lang.Character: java.lang.String getName(int)>"
"<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>","<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>"
"<android.app.Activity: void onContextMenuClosed(android.view.Menu)>","<android.app.Activity: void onContextMenuClosed(android.view.Menu)>"
"<java.lang.ArrayStoreException: void <init>(java.lang.String)>","<java.lang.ArrayStoreException: void <init>(java.lang.String)>"
"<android.hardware.SensorManager: int getSensors()>","<android.hardware.SensorManager: int getSensors()>"
"<java.io.File: boolean setReadable(boolean)>","<java.io.File: boolean setReadable(boolean)>"
"<java.util.stream.LongStream: java.util.stream.LongStream flatMap(java.util.function.LongFunction)>","<java.util.stream.LongStream: java.util.stream.LongStream flatMap(java.util.function.LongFunction)>"
"<java.io.FileInputStream: void <init>(java.lang.String)>","<java.io.FileInputStream: void <init>(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>"
"<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>","<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>"
"<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void docdecl(java.lang.String)>"
"<java.io.File: boolean delete()>","<java.io.File: boolean delete()>"
"<android.view.SurfaceHolder: void setFixedSize(int,int)>","<android.view.SurfaceHolder: void setFixedSize(int,int)>"
"<java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>","<java.util.Collections: java.lang.Object min(java.util.Collection,java.util.Comparator)>"
"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>","<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>"
"<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>","<android.app.Application: void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent)>"
"<android.media.audiofx.AudioEffect: boolean hasControl()>","<android.media.audiofx.AudioEffect: boolean hasControl()>"
"<android.widget.TextView: int getLineBreakStyle()>","<android.widget.TextView: int getLineBreakStyle()>"
"<java.util.Locale: java.lang.String lookupTag(java.util.List,java.util.Collection)>","<java.util.Locale: java.lang.String lookupTag(java.util.List,java.util.Collection)>"
"<android.view.ViewParent: void requestFitSystemWindows()>","<android.view.ViewParent: void requestFitSystemWindows()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDataSpace(android.view.SurfaceControl,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDataSpace(android.view.SurfaceControl,int)>"
"<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String,java.lang.Class)>"
"<android.text.Layout: void draw(android.graphics.Canvas)>","<android.text.Layout: void draw(android.graphics.Canvas)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setOpaque(boolean)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setOpaque(boolean)>"
"<android.graphics.Rect: void union(int,int,int,int)>","<android.graphics.Rect: void union(int,int,int,int)>"
"<java.nio.FloatBuffer: java.nio.Buffer limit(int)>","<java.nio.FloatBuffer: java.nio.Buffer limit(int)>"
"<android.graphics.fonts.FontStyle: void <init>(int,int)>","<android.graphics.fonts.FontStyle: void <init>(int,int)>"
"<android.graphics.Color: float alpha(long)>","<android.graphics.Color: float alpha(long)>"
"<java.util.function.DoublePredicate: java.util.function.DoublePredicate negate()>","<java.util.function.DoublePredicate: java.util.function.DoublePredicate negate()>"
"<android.widget.AbsListView: void getFocusedRect(android.graphics.Rect)>","<android.widget.AbsListView: void getFocusedRect(android.graphics.Rect)>"
"<android.app.PendingIntent: java.lang.String getTargetPackage()>","<android.app.PendingIntent: java.lang.String getTargetPackage()>"
"<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>","<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent,android.os.Bundle)>"
"<android.media.AudioTrack: int setPresentation(android.media.AudioPresentation)>","<android.media.AudioTrack: int setPresentation(android.media.AudioPresentation)>"
"<android.hardware.camera2.params.InputConfiguration: int getWidth()>","<android.hardware.camera2.params.InputConfiguration: int getWidth()>"
"<android.telephony.TelephonyCallback$ServiceStateListener: void onServiceStateChanged(android.telephony.ServiceState)>","<android.telephony.TelephonyCallback$ServiceStateListener: void onServiceStateChanged(android.telephony.ServiceState)>"
"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>","<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()>","<android.view.textclassifier.TextSelection: android.os.Bundle getExtras()>"
"<android.os.Build$Partition: void <init>()>","<android.os.Build$Partition: void <init>()>"
"<java.lang.Long: int numberOfTrailingZeros(long)>","<java.lang.Long: int numberOfTrailingZeros(long)>"
"<android.os.Bundle: java.lang.ClassLoader getClassLoader()>","<android.os.Bundle: java.lang.ClassLoader getClassLoader()>"
"<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>","<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>"
"<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()>","<android.view.WindowMetrics: android.view.WindowInsets getWindowInsets()>"
"<android.app.Activity: void startLockTask()>","<android.app.Activity: void startLockTask()>"
"<android.telephony.PhoneStateListener: void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)>","<android.telephony.PhoneStateListener: void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)>"
"<java.net.SocketImpl: java.io.OutputStream getOutputStream()>","<java.net.SocketImpl: java.io.OutputStream getOutputStream()>"
"<java.lang.SecurityManager: void checkExit(int)>","<java.lang.SecurityManager: void checkExit(int)>"
"<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.util.AttributeSet: java.lang.String getIdAttribute()>","<android.util.AttributeSet: java.lang.String getIdAttribute()>"
"<java.time.LocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>","<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>"
"<android.hardware.lights.Light: void <init>()>","<android.hardware.lights.Light: void <init>()>"
"<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>","<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>"
"<android.view.translation.ViewTranslationResponse: android.view.autofill.AutofillId getAutofillId()>","<android.view.translation.ViewTranslationResponse: android.view.autofill.AutofillId getAutofillId()>"
"<android.telephony.TelephonyCallback$PhysicalChannelConfigListener: void onPhysicalChannelConfigChanged(java.util.List)>","<android.telephony.TelephonyCallback$PhysicalChannelConfigListener: void onPhysicalChannelConfigChanged(java.util.List)>"
"<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putLong(int,long)>","<android.media.MediaMetadataEditor: android.media.MediaMetadataEditor putLong(int,long)>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraCaptureSession,int,long)>"
"<android.graphics.Color: long pack()>","<android.graphics.Color: long pack()>"
"<android.media.AudioManager$OnCommunicationDeviceChangedListener: void onCommunicationDeviceChanged(android.media.AudioDeviceInfo)>","<android.media.AudioManager$OnCommunicationDeviceChangedListener: void onCommunicationDeviceChanged(android.media.AudioDeviceInfo)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.time.temporal.TemporalField[])>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.time.temporal.TemporalField[])>"
"<android.widget.TextView$SavedState: void <init>()>","<android.widget.TextView$SavedState: void <init>()>"
"<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>","<android.content.Context: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.media.Image: android.graphics.Rect getCropRect()>","<android.media.Image: android.graphics.Rect getCropRect()>"
"<android.view.View: void autofill(android.view.autofill.AutofillValue)>","<android.view.View: void autofill(android.view.autofill.AutofillValue)>"
"<android.view.View: void onHoverChanged(boolean)>","<android.view.View: void onHoverChanged(boolean)>"
"<java.lang.Float: boolean isInfinite(float)>","<java.lang.Float: boolean isInfinite(float)>"
"<java.lang.Character: boolean isJavaLetterOrDigit(char)>","<java.lang.Character: boolean isJavaLetterOrDigit(char)>"
"<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>","<android.app.ActionBar: void setDisplayShowHomeEnabled(boolean)>"
"<android.media.RemoteControlClient: void setPlaybackState(int)>","<android.media.RemoteControlClient: void setPlaybackState(int)>"
"<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>","<android.content.ContextWrapper: int checkCallingPermission(java.lang.String)>"
"<android.text.TextUtils: java.lang.CharSequence makeSafeForPresentation(java.lang.String,int,float,int)>","<android.text.TextUtils: java.lang.CharSequence makeSafeForPresentation(java.lang.String,int,float,int)>"
"<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>","<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>"
"<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>","<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>"
"<android.graphics.PathEffect: void <init>()>","<android.graphics.PathEffect: void <init>()>"
"<android.graphics.RecordingCanvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>"
"<android.view.View: boolean isFocusableInTouchMode()>","<android.view.View: boolean isFocusableInTouchMode()>"
"<android.view.inputmethod.SurroundingText: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.SurroundingText: void writeToParcel(android.os.Parcel,int)>"
"<java.util.AbstractList: void clear()>","<java.util.AbstractList: void clear()>"
"<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>","<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>"
"<android.media.AudioManager: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>","<android.media.AudioManager: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>"
"<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>","<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>"
"<android.widget.TextView: void setText(java.lang.CharSequence)>","<android.widget.TextView: void setText(java.lang.CharSequence)>"
"<android.content.ContentValues: void putNull(java.lang.String)>","<android.content.ContentValues: void putNull(java.lang.String)>"
"<android.view.InputDevice: java.lang.String toString()>","<android.view.InputDevice: java.lang.String toString()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<java.nio.LongBuffer: boolean hasArray()>","<java.nio.LongBuffer: boolean hasArray()>"
"<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>","<android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()>"
"<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>","<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>"
"<android.media.RemoteController: boolean setArtworkConfiguration(int,int)>","<android.media.RemoteController: boolean setArtworkConfiguration(int,int)>"
"<android.graphics.Bitmap: void setHasAlpha(boolean)>","<android.graphics.Bitmap: void setHasAlpha(boolean)>"
"<android.app.ActionBar: void hide()>","<android.app.ActionBar: void hide()>"
"<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction add(int,android.app.Fragment)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble average()>","<java.util.stream.DoubleStream: java.util.OptionalDouble average()>"
"<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()>","<android.telephony.data.ApnSetting: java.net.InetAddress getProxyAddress()>"
"<android.view.View: java.util.ArrayList getTouchables()>","<android.view.View: java.util.ArrayList getTouchables()>"
"<android.graphics.fonts.Font: boolean equals(java.lang.Object)>","<android.graphics.fonts.Font: boolean equals(java.lang.Object)>"
"<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.media.MediaPlayer: void clearOnMediaTimeDiscontinuityListener()>","<android.media.MediaPlayer: void clearOnMediaTimeDiscontinuityListener()>"
"<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>","<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>"
"<android.os.Bundle: void putShortArray(java.lang.String,short[])>","<android.os.Bundle: void putShortArray(java.lang.String,short[])>"
"<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>","<java.lang.ClassLoader: void setDefaultAssertionStatus(boolean)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)>"
"<java.util.Arrays: void fill(byte[],int,int,byte)>","<java.util.Arrays: void fill(byte[],int,int,byte)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void <init>()>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void <init>()>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>"
"<android.view.contentcapture.ContentCaptureContext: void <init>()>","<android.view.contentcapture.ContentCaptureContext: void <init>()>"
"<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>","<android.hardware.camera2.params.StreamConfigurationMap: int[] getOutputFormats()>"
"<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSession createContentCaptureSession(android.view.contentcapture.ContentCaptureContext)>","<android.view.contentcapture.ContentCaptureSession: android.view.contentcapture.ContentCaptureSession createContentCaptureSession(android.view.contentcapture.ContentCaptureContext)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
"<java.lang.Float: void <init>(float)>","<java.lang.Float: void <init>(float)>"
"<android.net.ConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>","<android.net.ConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>"
"<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)>"
"<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>","<android.app.ActivityManager: void dumpPackageState(java.io.FileDescriptor,java.lang.String)>"
"<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>","<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>"
"<java.net.DatagramPacket: void setLength(int)>","<java.net.DatagramPacket: void setLength(int)>"
"<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)>","<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence)>"
"<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[])>","<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[])>"
"<android.graphics.Matrix: boolean rectStaysRect()>","<android.graphics.Matrix: boolean rectStaysRect()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProtocol(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProtocol(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>"
"<java.lang.Package: boolean isCompatibleWith(java.lang.String)>","<java.lang.Package: boolean isCompatibleWith(java.lang.String)>"
"<android.database.sqlite.SQLiteQuery: java.lang.String toString()>","<android.database.sqlite.SQLiteQuery: java.lang.String toString()>"
"<android.animation.Animator: boolean isStarted()>","<android.animation.Animator: boolean isStarted()>"
"<android.view.inputmethod.CursorAnchorInfo: void <init>(android.os.Parcel)>","<android.view.inputmethod.CursorAnchorInfo: void <init>(android.os.Parcel)>"
"<java.io.PrintStream: void print(double)>","<java.io.PrintStream: void print(double)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)>"
"<android.os.ResultReceiver: int describeContents()>","<android.os.ResultReceiver: int describeContents()>"
"<android.app.assist.AssistContent: void writeToParcel(android.os.Parcel,int)>","<android.app.assist.AssistContent: void writeToParcel(android.os.Parcel,int)>"
"<android.view.translation.TranslationResponseValue: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.TranslationResponseValue: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <clinit>()>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <clinit>()>"
"<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>","<android.content.pm.PackageManager: java.util.List getPreferredPackages(int)>"
"<android.app.VoiceInteractor$Prompt: void writeToParcel(android.os.Parcel,int)>","<android.app.VoiceInteractor$Prompt: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>","<java.util.Properties: void store(java.io.OutputStream,java.lang.String)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)>"
"<java.util.Date: void <init>(int,int,int)>","<java.util.Date: void <init>(int,int,int)>"
"<android.app.Activity: android.app.Application getApplication()>","<android.app.Activity: android.app.Application getApplication()>"
"<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>","<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>"
"<android.os.Parcel: java.lang.Object readSerializable(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object readSerializable(java.lang.ClassLoader,java.lang.Class)>"
"<android.animation.ValueAnimator: long getTotalDuration()>","<android.animation.ValueAnimator: long getTotalDuration()>"
"<android.os.LocaleList: boolean equals(java.lang.Object)>","<android.os.LocaleList: boolean equals(java.lang.Object)>"
"<android.media.MediaFormat: void removeFeature(java.lang.String)>","<android.media.MediaFormat: void removeFeature(java.lang.String)>"
"<java.io.FilterOutputStream: void write(byte[])>","<java.io.FilterOutputStream: void write(byte[])>"
"<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>"
"<android.graphics.drawable.BitmapDrawable: void setBitmap(android.graphics.Bitmap)>","<android.graphics.drawable.BitmapDrawable: void setBitmap(android.graphics.Bitmap)>"
"<android.widget.AbsListView: boolean canScrollList(int)>","<android.widget.AbsListView: boolean canScrollList(int)>"
"<android.content.Intent$FilterComparison: int hashCode()>","<android.content.Intent$FilterComparison: int hashCode()>"
"<android.widget.MediaController: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.MediaController: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.pm.ActivityInfo$WindowLayout: void <init>(int,float,int,float,int,int,int)>","<android.content.pm.ActivityInfo$WindowLayout: void <init>(int,float,int,float,int,int,int)>"
"<android.media.ImageReader: android.media.Image acquireLatestImage()>","<android.media.ImageReader: android.media.Image acquireLatestImage()>"
"<android.view.contentcapture.ContentCaptureSession: void close()>","<android.view.contentcapture.ContentCaptureSession: void close()>"
"<java.net.ServerSocket: int getSoTimeout()>","<java.net.ServerSocket: int getSoTimeout()>"
"<android.widget.AdapterView: void <init>(android.content.Context)>","<android.widget.AdapterView: void <init>(android.content.Context)>"
"<android.graphics.drawable.Icon: int describeContents()>","<android.graphics.drawable.Icon: int describeContents()>"
"<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.String,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.String,boolean)>"
"<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>","<android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])>"
"<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>","<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()>"
"<android.view.View: android.view.WindowInsetsController getWindowInsetsController()>","<android.view.View: android.view.WindowInsetsController getWindowInsetsController()>"
"<android.view.WindowInsetsAnimationControlListener: void onReady(android.view.WindowInsetsAnimationController,int)>","<android.view.WindowInsetsAnimationControlListener: void onReady(android.view.WindowInsetsAnimationController,int)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithData(byte[],int,int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithData(byte[],int,int)>"
"<android.content.pm.PackageManager: void extendVerificationTimeout(int,int,long)>","<android.content.pm.PackageManager: void extendVerificationTimeout(int,int,long)>"
"<android.view.Display$Mode: boolean equals(java.lang.Object)>","<android.view.Display$Mode: boolean equals(java.lang.Object)>"
"<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>","<java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>"
"<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence,int,int)>","<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence,int,int)>"
"<java.nio.DoubleBuffer: void <init>()>","<java.nio.DoubleBuffer: void <init>()>"
"<android.app.ActionBar: java.lang.CharSequence getSubtitle()>","<android.app.ActionBar: java.lang.CharSequence getSubtitle()>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,java.lang.String)>"
"<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.net.Uri: java.lang.String getAuthority()>","<android.net.Uri: java.lang.String getAuthority()>"
"<android.graphics.fonts.FontFamily: void <init>()>","<android.graphics.fonts.FontFamily: void <init>()>"
"<android.view.SurfaceView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.view.SurfaceView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)>","<android.os.PersistableBundle: void writeToParcel(android.os.Parcel,int)>"
"<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>","<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>"
"<java.lang.Long: java.lang.Long decode(java.lang.String)>","<java.lang.Long: java.lang.Long decode(java.lang.String)>"
"<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>","<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>"
"<android.view.View: void setAccessibilityTraversalAfter(int)>","<android.view.View: void setAccessibilityTraversalAfter(int)>"
"<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>","<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>"
"<android.hardware.Camera$ErrorCallback: void onError(int,android.hardware.Camera)>","<android.hardware.Camera$ErrorCallback: void onError(int,android.hardware.Camera)>"
"<android.content.pm.PermissionGroupInfo: int describeContents()>","<android.content.pm.PermissionGroupInfo: int describeContents()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace getFromDataSpace(int)>","<android.graphics.ColorSpace: android.graphics.ColorSpace getFromDataSpace(int)>"
"<java.lang.Thread: void join()>","<java.lang.Thread: void join()>"
"<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>","<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>"
"<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>","<java.lang.reflect.Field: void setFloat(java.lang.Object,float)>"
"<java.util.stream.DoubleStream: double sum()>","<java.util.stream.DoubleStream: double sum()>"
"<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>"
"<android.app.Activity: void onSaveInstanceState(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onSaveInstanceState(android.os.Bundle,android.os.PersistableBundle)>"
"<android.widget.Toolbar: void setCollapseIcon(int)>","<android.widget.Toolbar: void setCollapseIcon(int)>"
"<java.time.OffsetDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>","<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>"
"<android.widget.AbsListView: void fling(int)>","<android.widget.AbsListView: void fling(int)>"
"<java.util.stream.LongStream: boolean noneMatch(java.util.function.LongPredicate)>","<java.util.stream.LongStream: boolean noneMatch(java.util.function.LongPredicate)>"
"<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>","<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>"
"<java.lang.reflect.Modifier: boolean isStrict(int)>","<java.lang.reflect.Modifier: boolean isStrict(int)>"
"<android.net.LinkProperties: java.util.List getLinkAddresses()>","<android.net.LinkProperties: java.util.List getLinkAddresses()>"
"<android.graphics.Bitmap: void prepareToDraw()>","<android.graphics.Bitmap: void prepareToDraw()>"
"<java.util.stream.IntStream: java.util.Spliterator spliterator()>","<java.util.stream.IntStream: java.util.Spliterator spliterator()>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,java.lang.CharSequence)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewTextChanged(android.view.autofill.AutofillId,java.lang.CharSequence)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>"
"<java.time.OffsetTime: java.time.OffsetTime minusHours(long)>","<java.time.OffsetTime: java.time.OffsetTime minusHours(long)>"
"<android.media.MediaDrm$KeyRequest: int getRequestType()>","<android.media.MediaDrm$KeyRequest: int getRequestType()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction attach(android.app.Fragment)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.hardware.display.VirtualDisplay$Callback: void onResumed()>","<android.hardware.display.VirtualDisplay$Callback: void onResumed()>"
"<android.view.Display: int getWidth()>","<android.view.Display: int getWidth()>"
"<android.app.ActivityManager$AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)>","<android.app.ActivityManager$AppTask: void startActivity(android.content.Context,android.content.Intent,android.os.Bundle)>"
"<android.animation.Animator: void start()>","<android.animation.Animator: void start()>"
"<java.nio.ByteBuffer: int arrayOffset()>","<java.nio.ByteBuffer: int arrayOffset()>"
"<android.util.DisplayMetrics: boolean equals(java.lang.Object)>","<android.util.DisplayMetrics: boolean equals(java.lang.Object)>"
"<java.lang.String: int lastIndexOf(int)>","<java.lang.String: int lastIndexOf(int)>"
"<android.widget.TextView: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()>","<android.widget.TextView: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()>"
"<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>","<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>","<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)>"
"<android.content.pm.ApplicationInfo: java.util.Set getKnownActivityEmbeddingCerts()>","<android.content.pm.ApplicationInfo: java.util.Set getKnownActivityEmbeddingCerts()>"
"<java.lang.Double: long doubleToLongBits(double)>","<java.lang.Double: long doubleToLongBits(double)>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofTotalSeconds(int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofTotalSeconds(int)>"
"<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[],int,int)>","<java.util.Arrays: java.util.Spliterator$OfDouble spliterator(double[],int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getColumnCount()>"
"<android.view.DragEvent: void <clinit>()>","<android.view.DragEvent: void <clinit>()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()>","<android.view.textclassifier.SelectionEvent: java.lang.String getPackageName()>"
"<java.text.CharacterIterator: char current()>","<java.text.CharacterIterator: char current()>"
"<java.nio.file.WatchEvent: java.lang.Object context()>","<java.nio.file.WatchEvent: java.lang.Object context()>"
"<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationCancel(android.animation.Animator)>"
"<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RecentTaskInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.audiofx.AudioEffect: int getId()>","<android.media.audiofx.AudioEffect: int getId()>"
"<android.app.Activity: void reportFullyDrawn()>","<android.app.Activity: void reportFullyDrawn()>"
"<java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)>","<java.util.Collections: java.util.List checkedList(java.util.List,java.lang.Class)>"
"<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>","<android.content.ContentProvider: java.lang.String getType(android.net.Uri)>"
"<android.graphics.ColorSpace: float[] fromXyz(float,float,float)>","<android.graphics.ColorSpace: float[] fromXyz(float,float,float)>"
"<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>","<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>"
"<java.lang.ClassCircularityError: void <init>(java.lang.String)>","<java.lang.ClassCircularityError: void <init>(java.lang.String)>"
"<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>","<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>"
"<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>","<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>"
"<android.net.NetworkInfo: boolean isRoaming()>","<android.net.NetworkInfo: boolean isRoaming()>"
"<android.media.session.MediaController$TransportControls: void fastForward()>","<android.media.session.MediaController$TransportControls: void fastForward()>"
"<android.animation.Animator: void cancel()>","<android.animation.Animator: void cancel()>"
"<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>","<android.widget.RemoteViews: void setImageViewIcon(int,android.graphics.drawable.Icon)>"
"<java.util.Arrays: int compare(byte[],byte[])>","<java.util.Arrays: int compare(byte[],byte[])>"
"<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>","<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Paint: java.util.Locale getTextLocale()>","<android.graphics.Paint: java.util.Locale getTextLocale()>"
"<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>","<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>"
"<java.time.LocalTime: java.time.LocalTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.LocalTime: java.time.LocalTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.time.temporal.TemporalAmount: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.temporal.TemporalAmount: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<java.net.Socket: java.net.InetAddress getLocalAddress()>","<java.net.Socket: java.net.InetAddress getLocalAddress()>"
"<android.hardware.camera2.CaptureRequest$Builder: java.lang.Object getPhysicalCameraKey(android.hardware.camera2.CaptureRequest$Key,java.lang.String)>","<android.hardware.camera2.CaptureRequest$Builder: java.lang.Object getPhysicalCameraKey(android.hardware.camera2.CaptureRequest$Key,java.lang.String)>"
"<java.lang.ref.Reference: boolean enqueue()>","<java.lang.ref.Reference: boolean enqueue()>"
"<java.util.Spliterator$OfDouble: java.util.Spliterator$OfDouble trySplit()>","<java.util.Spliterator$OfDouble: java.util.Spliterator$OfDouble trySplit()>"
"<android.view.ViewGroup: void setClipToPadding(boolean)>","<android.view.ViewGroup: void setClipToPadding(boolean)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
"<java.util.HashMap: void forEach(java.util.function.BiConsumer)>","<java.util.HashMap: void forEach(java.util.function.BiConsumer)>"
"<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>","<android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)>"
"<android.content.Intent: java.lang.String toURI()>","<android.content.Intent: java.lang.String toURI()>"
"<android.widget.TextView: void setTypeface(android.graphics.Typeface)>","<android.widget.TextView: void setTypeface(android.graphics.Typeface)>"
"<java.nio.CharBuffer: int read(java.nio.CharBuffer)>","<java.nio.CharBuffer: int read(java.nio.CharBuffer)>"
"<android.app.Activity: void onTopResumedActivityChanged(boolean)>","<android.app.Activity: void onTopResumedActivityChanged(boolean)>"
"<java.io.PrintWriter: void print(char[])>","<java.io.PrintWriter: void print(char[])>"
"<java.lang.Boolean: boolean logicalAnd(boolean,boolean)>","<java.lang.Boolean: boolean logicalAnd(boolean,boolean)>"
"<java.time.chrono.ChronoLocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<java.net.ServerSocket: void <init>()>","<java.net.ServerSocket: void <init>()>"
"<java.net.DatagramSocket: void setReceiveBufferSize(int)>","<java.net.DatagramSocket: void setReceiveBufferSize(int)>"
"<java.time.Duration: java.time.Duration negated()>","<java.time.Duration: java.time.Duration negated()>"
"<android.graphics.drawable.Drawable: boolean isProjected()>","<android.graphics.drawable.Drawable: boolean isProjected()>"
"<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>","<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily build()>"
"<java.time.temporal.ChronoField: java.time.temporal.ValueRange range()>","<java.time.temporal.ChronoField: java.time.temporal.ValueRange range()>"
"<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>","<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>"
"<java.lang.reflect.Method: java.lang.Class getReturnType()>","<java.lang.reflect.Method: java.lang.Class getReturnType()>"
"<java.util.Random: java.util.stream.DoubleStream doubles(long)>","<java.util.Random: java.util.stream.DoubleStream doubles(long)>"
"<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>","<java.nio.channels.spi.AbstractSelector: java.util.Set cancelledKeys()>"
"<android.graphics.Paint: float getStrikeThruPosition()>","<android.graphics.Paint: float getStrikeThruPosition()>"
"<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>","<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>"
"<java.net.Socket: boolean isConnected()>","<java.net.Socket: boolean isConnected()>"
"<android.widget.TextView: void autofill(android.view.autofill.AutofillValue)>","<android.widget.TextView: void autofill(android.view.autofill.AutofillValue)>"
"<android.text.ParcelableSpan: int getSpanTypeId()>","<android.text.ParcelableSpan: int getSpanTypeId()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)>"
"<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()>","<android.net.ConnectivityManager: android.net.ProxyInfo getDefaultProxy()>"
"<android.database.sqlite.SQLiteDatabase: void setCustomScalarFunction(java.lang.String,java.util.function.UnaryOperator)>","<android.database.sqlite.SQLiteDatabase: void setCustomScalarFunction(java.lang.String,java.util.function.UnaryOperator)>"
"<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>","<java.nio.file.attribute.BasicFileAttributes: java.lang.Object fileKey()>"
"<java.nio.CharBuffer: char[] array()>","<java.nio.CharBuffer: char[] array()>"
"<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)>","<android.media.session.MediaSessionManager: void notifySession2Created(android.media.Session2Token)>"
"<android.view.View: boolean isAccessibilityFocused()>","<android.view.View: boolean isAccessibilityFocused()>"
"<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer get(int[],int,int)>"
"<android.util.Size: int getHeight()>","<android.util.Size: int getHeight()>"
"<org.xmlpull.v1.XmlPullParser: int getEventType()>","<org.xmlpull.v1.XmlPullParser: int getEventType()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>"
"<android.graphics.RecordingCanvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>"
"<android.view.View: boolean isShowingLayoutBounds()>","<android.view.View: boolean isShowingLayoutBounds()>"
"<android.content.Loader: int getId()>","<android.content.Loader: int getId()>"
"<android.telephony.TelephonyManager: void setAllowedNetworkTypesForReason(int,long)>","<android.telephony.TelephonyManager: void setAllowedNetworkTypesForReason(int,long)>"
"<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>","<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>"
"<android.graphics.fonts.FontVariationAxis: java.lang.String toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>","<android.graphics.fonts.FontVariationAxis: java.lang.String toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>"
"<android.app.ActionBar: int getTabCount()>","<android.app.ActionBar: int getTabCount()>"
"<java.nio.file.LinkOption: void <clinit>()>","<java.nio.file.LinkOption: void <clinit>()>"
"<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)>","<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int,long)>"
"<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])>"
"<java.lang.invoke.MethodType: java.lang.Class lastParameterType()>","<java.lang.invoke.MethodType: java.lang.Class lastParameterType()>"
"<java.util.Random: void nextBytes(byte[])>","<java.util.Random: void nextBytes(byte[])>"
"<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>","<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[])>"
"<android.text.Layout: boolean isSpanned()>","<android.text.Layout: boolean isSpanned()>"
"<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>","<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>"
"<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>","<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>"
"<android.content.IntentFilter: java.lang.String getCategory(int)>","<android.content.IntentFilter: java.lang.String getCategory(int)>"
"<java.lang.reflect.Parameter: boolean isSynthetic()>","<java.lang.reflect.Parameter: boolean isSynthetic()>"
"<android.media.session.MediaController$PlaybackInfo: int getPlaybackType()>","<android.media.session.MediaController$PlaybackInfo: int getPlaybackType()>"
"<android.media.AudioPresentation: boolean hasAudioDescription()>","<android.media.AudioPresentation: boolean hasAudioDescription()>"
"<java.util.Arrays: void sort(char[],int,int)>","<java.util.Arrays: void sort(char[],int,int)>"
"<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>","<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setDefaultLocales(android.os.LocaleList)>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setDefaultLocales(android.os.LocaleList)>"
"<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>"
"<android.media.MediaPlayer: void start()>","<android.media.MediaPlayer: void start()>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setCutoutPath(android.graphics.Path)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setCutoutPath(android.graphics.Path)>"
"<java.time.LocalDateTime: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>","<java.time.LocalDateTime: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>"
"<java.util.Arrays: int binarySearch(double[],int,int,double)>","<java.util.Arrays: int binarySearch(double[],int,int,double)>"
"<android.util.SizeF: android.util.SizeF parseSizeF(java.lang.String)>","<android.util.SizeF: android.util.SizeF parseSizeF(java.lang.String)>"
"<android.widget.TextView: void setLastBaselineToBottomHeight(int)>","<android.widget.TextView: void setLastBaselineToBottomHeight(int)>"
"<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>","<java.lang.reflect.TypeVariable: java.lang.reflect.Type[] getBounds()>"
"<android.text.PrecomputedText$Params: int hashCode()>","<android.text.PrecomputedText$Params: int hashCode()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
"<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>","<android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)>"
"<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>"
"<android.view.View: void getFocusedRect(android.graphics.Rect)>","<android.view.View: void getFocusedRect(android.graphics.Rect)>"
"<android.media.VolumeProvider: int getVolumeControl()>","<android.media.VolumeProvider: int getVolumeControl()>"
"<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>","<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>"
"<android.graphics.Region: void <init>()>","<android.graphics.Region: void <init>()>"
"<android.text.Layout: int getBottomPadding()>","<android.text.Layout: int getBottomPadding()>"
"<android.icu.util.ULocale: android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale)>","<android.icu.util.ULocale: android.icu.util.ULocale minimizeSubtags(android.icu.util.ULocale)>"
"<android.widget.RemoteViews: void setViewLayoutHeight(int,float,int)>","<android.widget.RemoteViews: void setViewLayoutHeight(int,float,int)>"
"<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setClientPrefix(java.lang.String)>","<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setClientPrefix(java.lang.String)>"
"<java.lang.Character: java.lang.String toString(char)>","<java.lang.Character: java.lang.String toString(char)>"
"<android.text.Editable: java.lang.Appendable append(char)>","<android.text.Editable: java.lang.Appendable append(char)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>"
"<android.view.View: boolean isPaddingOffsetRequired()>","<android.view.View: boolean isPaddingOffsetRequired()>"
"<android.net.IpPrefix: java.lang.String toString()>","<android.net.IpPrefix: java.lang.String toString()>"
"<android.content.pm.ConfigurationInfo: void <clinit>()>","<android.content.pm.ConfigurationInfo: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int describeContents()>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int describeContents()>"
"<java.net.URL: java.lang.String getFile()>","<java.net.URL: java.lang.String getFile()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isAccessibilityFocused()>"
"<java.lang.Character: boolean isLowerCase(int)>","<java.lang.Character: boolean isLowerCase(int)>"
"<java.lang.TypeNotPresentException: java.lang.String typeName()>","<java.lang.TypeNotPresentException: java.lang.String typeName()>"
"<android.media.AudioManager: void setMode(int)>","<android.media.AudioManager: void setMode(int)>"
"<android.os.Parcel: android.os.Parcel obtain(android.os.IBinder)>","<android.os.Parcel: android.os.Parcel obtain(android.os.IBinder)>"
"<android.view.inputmethod.InputMethodSubtype: int getIconResId()>","<android.view.inputmethod.InputMethodSubtype: int getIconResId()>"
"<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>","<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>"
"<java.util.Random: void setSeed(long)>","<java.util.Random: void setSeed(long)>"
"<android.hardware.SensorDirectChannel: void close()>","<android.hardware.SensorDirectChannel: void close()>"
"<java.nio.channels.AsynchronousFileChannel: void force(boolean)>","<java.nio.channels.AsynchronousFileChannel: void force(boolean)>"
"<java.lang.Short: int intValue()>","<java.lang.Short: int intValue()>"
"<android.os.PatternMatcher: int getType()>","<android.os.PatternMatcher: int getType()>"
"<android.graphics.ColorSpace$Rgb: float getMinValue(int)>","<android.graphics.ColorSpace$Rgb: float getMinValue(int)>"
"<android.view.View: boolean awakenScrollBars(int)>","<android.view.View: boolean awakenScrollBars(int)>"
"<android.hardware.HardwareBuffer: void writeToParcel(android.os.Parcel,int)>","<android.hardware.HardwareBuffer: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel shutdownInput()>"
"<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>","<java.nio.channels.spi.AbstractSelectableChannel: void implCloseChannel()>"
"<android.view.ViewGroup: int[] onCreateDrawableState(int)>","<android.view.ViewGroup: int[] onCreateDrawableState(int)>"
"<android.app.ActionBar$Tab: java.lang.CharSequence getText()>","<android.app.ActionBar$Tab: java.lang.CharSequence getText()>"
"<android.net.NetworkInfo: java.lang.String getReason()>","<android.net.NetworkInfo: java.lang.String getReason()>"
"<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>","<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>"
"<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>","<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>"
"<android.media.metrics.LogSessionId: void <clinit>()>","<android.media.metrics.LogSessionId: void <clinit>()>"
"<android.graphics.Paint: float ascent()>","<android.graphics.Paint: float ascent()>"
"<java.nio.channels.SocketChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.SocketChannel: java.net.SocketAddress getLocalAddress()>"
"<java.lang.reflect.Modifier: boolean isTransient(int)>","<java.lang.reflect.Modifier: boolean isTransient(int)>"
"<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>","<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>"
"<android.view.View: int getTextAlignment()>","<android.view.View: int getTextAlignment()>"
"<android.view.MotionEvent: float getHistoricalOrientation(int,int)>","<android.view.MotionEvent: float getHistoricalOrientation(int,int)>"
"<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.media.AudioTrack: int getDualMonoMode()>","<android.media.AudioTrack: int getDualMonoMode()>"
"<android.telephony.TelephonyCallback$DataActivityListener: void onDataActivity(int)>","<android.telephony.TelephonyCallback$DataActivityListener: void onDataActivity(int)>"
"<java.lang.Double: double longBitsToDouble(long)>","<java.lang.Double: double longBitsToDouble(long)>"
"<android.graphics.Matrix: boolean equals(java.lang.Object)>","<android.graphics.Matrix: boolean equals(java.lang.Object)>"
"<android.content.res.AssetManager: void close()>","<android.content.res.AssetManager: void close()>"
"<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.ZoneId)>","<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.ZoneId)>"
"<java.util.Arrays: void parallelSort(int[])>","<java.util.Arrays: void parallelSort(int[])>"
"<android.hardware.Camera$Parameters: boolean isSmoothZoomSupported()>","<android.hardware.Camera$Parameters: boolean isSmoothZoomSupported()>"
"<android.transition.TransitionPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>","<android.transition.TransitionPropagation: long getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)>"
"<android.view.View: void onAttachedToWindow()>","<android.view.View: void onAttachedToWindow()>"
"<android.widget.Toolbar: int getContentInsetEnd()>","<android.widget.Toolbar: int getContentInsetEnd()>"
"<android.content.Context: java.io.File getCodeCacheDir()>","<android.content.Context: java.io.File getCodeCacheDir()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAutoEnterEnabled(boolean)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAutoEnterEnabled(boolean)>"
"<android.media.AudioRecord: boolean isPrivacySensitive()>","<android.media.AudioRecord: boolean isPrivacySensitive()>"
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>"
"<android.content.Intent: java.lang.String getPackage()>","<android.content.Intent: java.lang.String getPackage()>"
"<java.util.stream.LongStream: java.util.stream.LongStream of(long[])>","<java.util.stream.LongStream: java.util.stream.LongStream of(long[])>"
"<android.hardware.Camera: void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)>","<android.hardware.Camera: void setAutoFocusMoveCallback(android.hardware.Camera$AutoFocusMoveCallback)>"
"<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View,float,float)>","<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View,float,float)>"
"<java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>","<java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>"
"<java.util.ListIterator: void set(java.lang.Object)>","<java.util.ListIterator: void set(java.lang.Object)>"
"<android.view.KeyEvent: boolean isTracking()>","<android.view.KeyEvent: boolean isTracking()>"
"<android.content.Context: boolean deleteFile(java.lang.String)>","<android.content.Context: boolean deleteFile(java.lang.String)>"
"<java.security.Guard: void checkGuard(java.lang.Object)>","<java.security.Guard: void checkGuard(java.lang.Object)>"
"<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator andThen(java.util.function.DoubleUnaryOperator)>","<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator andThen(java.util.function.DoubleUnaryOperator)>"
"<android.telephony.TelephonyDisplayInfo: int getNetworkType()>","<android.telephony.TelephonyDisplayInfo: int getNetworkType()>"
"<android.media.session.MediaSession$Token: void <init>()>","<android.media.session.MediaSession$Token: void <init>()>"
"<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>","<android.widget.TextView: void setTransformationMethod(android.text.method.TransformationMethod)>"
"<android.hardware.Sensor: java.lang.String getVendor()>","<android.hardware.Sensor: java.lang.String getVendor()>"
"<android.util.ArrayMap: int hashCode()>","<android.util.ArrayMap: int hashCode()>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetBottom(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetBottom(int,int)>"
"<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)>"
"<java.time.OffsetTime: boolean isEqual(java.time.OffsetTime)>","<java.time.OffsetTime: boolean isEqual(java.time.OffsetTime)>"
"<android.graphics.Movie: int height()>","<android.graphics.Movie: int height()>"
"<java.util.Deque: boolean contains(java.lang.Object)>","<java.util.Deque: boolean contains(java.lang.Object)>"
"<android.view.WindowInsetsAnimationController: float getCurrentAlpha()>","<android.view.WindowInsetsAnimationController: float getCurrentAlpha()>"
"<android.telephony.PreciseDataConnectionState: void <clinit>()>","<android.telephony.PreciseDataConnectionState: void <clinit>()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDestroyed(android.app.FragmentManager,android.app.Fragment)>"
"<java.nio.ByteBuffer: void <init>()>","<java.nio.ByteBuffer: void <init>()>"
"<java.time.OffsetTime: java.time.OffsetTime now()>","<java.time.OffsetTime: java.time.OffsetTime now()>"
"<java.nio.file.spi.FileSystemProvider: void <init>()>","<java.nio.file.spi.FileSystemProvider: void <init>()>"
"<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>","<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>"
"<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>","<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>"
"<android.graphics.Bitmap: int getDensity()>","<android.graphics.Bitmap: int getDensity()>"
"<android.transition.Scene: android.transition.Scene getCurrentScene(android.view.ViewGroup)>","<android.transition.Scene: android.transition.Scene getCurrentScene(android.view.ViewGroup)>"
"<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.Consumer)>"
"<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>","<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>"
"<android.content.IntentFilter: boolean matchAction(java.lang.String)>","<android.content.IntentFilter: boolean matchAction(java.lang.String)>"
"<android.os.Handler: void handleMessage(android.os.Message)>","<android.os.Handler: void handleMessage(android.os.Message)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>","<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>"
"<android.view.KeyCharacterMap: char getNumber(int)>","<android.view.KeyCharacterMap: char getNumber(int)>"
"<java.security.CodeSource: boolean implies(java.security.CodeSource)>","<java.security.CodeSource: boolean implies(java.security.CodeSource)>"
"<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()>","<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPictureSize()>"
"<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()>","<android.app.Fragment: android.transition.Transition getSharedElementReturnTransition()>"
"<android.view.InputDevice: android.hardware.lights.LightsManager getLightsManager()>","<android.view.InputDevice: android.hardware.lights.LightsManager getLightsManager()>"
"<android.view.Display: boolean isValid()>","<android.view.Display: boolean isValid()>"
"<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>","<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>"
"<android.widget.TextView: boolean bringPointIntoView(int)>","<android.widget.TextView: boolean bringPointIntoView(int)>"
"<java.lang.IllegalStateException: void <init>()>","<java.lang.IllegalStateException: void <init>()>"
"<android.os.Message: void setData(android.os.Bundle)>","<android.os.Message: void setData(android.os.Bundle)>"
"<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>","<android.media.AudioManager: void dispatchMediaKeyEvent(android.view.KeyEvent)>"
"<android.transition.Transition: android.transition.Transition removeTarget(java.lang.Class)>","<android.transition.Transition: android.transition.Transition removeTarget(java.lang.Class)>"
"<android.hardware.lights.LightState$Builder: void <init>()>","<android.hardware.lights.LightState$Builder: void <init>()>"
"<java.util.AbstractQueue: boolean addAll(java.util.Collection)>","<java.util.AbstractQueue: boolean addAll(java.util.Collection)>"
"<android.graphics.Paint: void setLetterSpacing(float)>","<android.graphics.Paint: void setLetterSpacing(float)>"
"<android.graphics.drawable.ColorDrawable: void setAlpha(int)>","<android.graphics.drawable.ColorDrawable: void setAlpha(int)>"
"<java.time.chrono.IsoChronology: java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
"<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<java.lang.VerifyError: void <init>(java.lang.String)>","<java.lang.VerifyError: void <init>(java.lang.String)>"
"<java.net.Socket: int getReceiveBufferSize()>","<java.net.Socket: int getReceiveBufferSize()>"
"<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>","<android.database.Cursor: android.os.Bundle respond(android.os.Bundle)>"
"<android.widget.RelativeLayout$LayoutParams: void addRule(int,int)>","<android.widget.RelativeLayout$LayoutParams: void addRule(int,int)>"
"<android.view.InputDevice: int getKeyCodeForKeyLocation(int)>","<android.view.InputDevice: int getKeyCodeForKeyLocation(int)>"
"<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>","<android.hardware.camera2.params.StreamConfigurationMap: int[] getInputFormats()>"
"<java.util.Arrays: int mismatch(short[],int,int,short[],int,int)>","<java.util.Arrays: int mismatch(short[],int,int,short[],int,int)>"
"<android.os.Process: long getStartRequestedElapsedRealtime()>","<android.os.Process: long getStartRequestedElapsedRealtime()>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setOffloadedPlayback(boolean)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setOffloadedPlayback(boolean)>"
"<android.media.MediaPlayer: void deselectTrack(int)>","<android.media.MediaPlayer: void deselectTrack(int)>"
"<android.media.AudioDeviceInfo: java.util.List getAudioProfiles()>","<android.media.AudioDeviceInfo: java.util.List getAudioProfiles()>"
"<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()>","<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()>"
"<java.util.Arrays: int compare(int[],int,int,int[],int,int)>","<java.util.Arrays: int compare(int[],int,int,int[],int,int)>"
"<android.view.textclassifier.TextLanguage: void <clinit>()>","<android.view.textclassifier.TextLanguage: void <clinit>()>"
"<android.view.ActionMode: void setCustomView(android.view.View)>","<android.view.ActionMode: void setCustomView(android.view.View)>"
"<android.content.Intent: android.content.Intent cloneFilter()>","<android.content.Intent: android.content.Intent cloneFilter()>"
"<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>","<android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)>"
"<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>","<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>"
"<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>"
"<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>","<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>"
"<android.view.View: void getHitRect(android.graphics.Rect)>","<android.view.View: void getHitRect(android.graphics.Rect)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>","<android.content.pm.PackageManager: java.lang.String getInstallerPackageName(java.lang.String)>"
"<android.media.MediaDrm: byte[] getSecureStop(byte[])>","<android.media.MediaDrm: byte[] getSecureStop(byte[])>"
"<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>","<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>"
"<android.view.ViewGroup: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.view.ViewGroup: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<java.lang.IncompatibleClassChangeError: void <init>()>","<java.lang.IncompatibleClassChangeError: void <init>()>"
"<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>","<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>"
"<android.content.ContentValues: int size()>","<android.content.ContentValues: int size()>"
"<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>","<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>"
"<android.widget.TextView: boolean getLinksClickable()>","<android.widget.TextView: boolean getLinksClickable()>"
"<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)>","<android.media.MediaFormat: void setByteBuffer(java.lang.String,java.nio.ByteBuffer)>"
"<android.window.SplashScreen: void clearOnExitAnimationListener()>","<android.window.SplashScreen: void clearOnExitAnimationListener()>"
"<java.text.ParsePosition: int getErrorIndex()>","<java.text.ParsePosition: int getErrorIndex()>"
"<android.content.Intent: android.net.Uri getData()>","<android.content.Intent: android.net.Uri getData()>"
"<android.content.res.Resources$Theme: android.content.res.Resources getResources()>","<android.content.res.Resources$Theme: android.content.res.Resources getResources()>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isOther()>","<java.nio.file.attribute.BasicFileAttributes: boolean isOther()>"
"<android.media.projection.MediaProjection: void unregisterCallback(android.media.projection.MediaProjection$Callback)>","<android.media.projection.MediaProjection: void unregisterCallback(android.media.projection.MediaProjection$Callback)>"
"<android.graphics.RectF: float height()>","<android.graphics.RectF: float height()>"
"<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>","<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>"
"<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>","<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>"
"<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>","<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>"
"<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)>","<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)>"
"<android.os.CombinedVibration: android.os.CombinedVibration createParallel(android.os.VibrationEffect)>","<android.os.CombinedVibration: android.os.CombinedVibration createParallel(android.os.VibrationEffect)>"
"<java.lang.Comparable: int compareTo(java.lang.Object)>","<java.lang.Comparable: int compareTo(java.lang.Object)>"
"<android.view.View: void setClipBounds(android.graphics.Rect)>","<android.view.View: void setClipBounds(android.graphics.Rect)>"
"<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>","<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)>"
"<android.net.NetworkCapabilities: void <clinit>()>","<android.net.NetworkCapabilities: void <clinit>()>"
"<android.os.Bundle: void putShort(java.lang.String,short)>","<android.os.Bundle: void putShort(java.lang.String,short)>"
"<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>","<android.util.ArrayMap: java.lang.Object setValueAt(int,java.lang.Object)>"
"<java.nio.charset.Charset: boolean canEncode()>","<java.nio.charset.Charset: boolean canEncode()>"
"<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>","<java.net.URLConnection: void setContentHandlerFactory(java.net.ContentHandlerFactory)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findConstructor(java.lang.Class,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findConstructor(java.lang.Class,java.lang.invoke.MethodType)>"
"<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>","<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<java.lang.Character: byte getDirectionality(char)>","<java.lang.Character: byte getDirectionality(char)>"
"<java.net.DatagramPacket: void setPort(int)>","<java.net.DatagramPacket: void setPort(int)>"
"<android.graphics.RecordingCanvas: void drawPaint(android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPaint(android.graphics.Paint)>"
"<java.util.HashMap: void <init>(java.util.Map)>","<java.util.HashMap: void <init>(java.util.Map)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)>"
"<java.lang.Integer: byte byteValue()>","<java.lang.Integer: byte byteValue()>"
"<android.content.pm.Attribution: void <clinit>()>","<android.content.pm.Attribution: void <clinit>()>"
"<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>","<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>"
"<java.util.MissingResourceException: java.lang.String getKey()>","<java.util.MissingResourceException: java.lang.String getKey()>"
"<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>","<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String getModelName()>"
"<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>","<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>"
"<android.graphics.text.MeasuredText: float getCharWidthAt(int)>","<android.graphics.text.MeasuredText: float getCharWidthAt(int)>"
"<android.app.Activity: boolean isTaskRoot()>","<android.app.Activity: boolean isTaskRoot()>"
"<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>","<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>"
"<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>","<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>"
"<java.lang.NumberFormatException: void <init>(java.lang.String)>","<java.lang.NumberFormatException: void <init>(java.lang.String)>"
"<java.util.Arrays: void sort(long[],int,int)>","<java.util.Arrays: void sort(long[],int,int)>"
"<java.util.Arrays: void parallelSort(short[])>","<java.util.Arrays: void parallelSort(short[])>"
"<android.content.pm.PackageManager: int getInstantAppCookieMaxBytes()>","<android.content.pm.PackageManager: int getInstantAppCookieMaxBytes()>"
"<android.graphics.text.LineBreakConfig: int getLineBreakWordStyle()>","<android.graphics.text.LineBreakConfig: int getLineBreakWordStyle()>"
"<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>","<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>"
"<android.graphics.Bitmap: int getScaledWidth(int)>","<android.graphics.Bitmap: int getScaledWidth(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream iterate(double,java.util.function.DoubleUnaryOperator)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream iterate(double,java.util.function.DoubleUnaryOperator)>"
"<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(int)>","<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(int)>"
"<android.content.ContentValues: void remove(java.lang.String)>","<android.content.ContentValues: void remove(java.lang.String)>"
"<android.media.RemoteControlClient: void setTransportControlFlags(int)>","<android.media.RemoteControlClient: void setTransportControlFlags(int)>"
"<android.media.MediaSyncEvent: void writeToParcel(android.os.Parcel,int)>","<android.media.MediaSyncEvent: void writeToParcel(android.os.Parcel,int)>"
"<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>","<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)>"
"<android.graphics.Outline: float getAlpha()>","<android.graphics.Outline: float getAlpha()>"
"<android.content.ContentValues: void putAll(android.content.ContentValues)>","<android.content.ContentValues: void putAll(android.content.ContentValues)>"
"<java.lang.reflect.Parameter: void <init>()>","<java.lang.reflect.Parameter: void <init>()>"
"<java.time.OffsetTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<java.security.cert.CertPath: boolean equals(java.lang.Object)>","<java.security.cert.CertPath: boolean equals(java.lang.Object)>"
"<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)>","<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)>"
"<android.graphics.Paint: int getAlpha()>","<android.graphics.Paint: int getAlpha()>"
"<android.widget.Filter: java.lang.CharSequence convertResultToString(java.lang.Object)>","<android.widget.Filter: java.lang.CharSequence convertResultToString(java.lang.Object)>"
"<android.view.View: boolean isFocused()>","<android.view.View: boolean isFocused()>"
"<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>","<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>"
"<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>","<android.hardware.camera2.CameraCaptureSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>"
"<android.animation.ValueAnimator: boolean isStarted()>","<android.animation.ValueAnimator: boolean isStarted()>"
"<java.io.PrintWriter: void write(java.lang.String)>","<java.io.PrintWriter: void write(java.lang.String)>"
"<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.lang.ArithmeticException: void <init>(java.lang.String)>","<java.lang.ArithmeticException: void <init>(java.lang.String)>"
"<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener)>","<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>"
"<android.media.MediaDrm: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.HashMap)>","<android.media.MediaDrm: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.HashMap)>"
"<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>","<android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>"
"<android.telephony.TelephonyManager: boolean isDataCapable()>","<android.telephony.TelephonyManager: boolean isDataCapable()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAcquire(java.lang.Object[])>"
"<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>","<android.content.ServiceConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>"
"<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()>","<android.graphics.Typeface$CustomFallbackBuilder: int getMaxCustomFallbackCount()>"
"<android.widget.TextView: void drawableStateChanged()>","<android.widget.TextView: void drawableStateChanged()>"
"<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>","<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>"
"<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>","<android.view.WindowInsets: android.graphics.Insets getMandatorySystemGestureInsets()>"
"<java.util.Locale: java.util.Set getUnicodeLocaleAttributes()>","<java.util.Locale: java.util.Set getUnicodeLocaleAttributes()>"
"<android.content.pm.ProviderInfo: void <clinit>()>","<android.content.pm.ProviderInfo: void <clinit>()>"
"<android.view.MotionEvent: float getHistoricalY(int)>","<android.view.MotionEvent: float getHistoricalY(int)>"
"<android.app.ActionBar$Tab: java.lang.Object getTag()>","<android.app.ActionBar$Tab: java.lang.Object getTag()>"
"<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>","<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setEntityType(java.lang.String,float)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setEntityType(java.lang.String,float)>"
"<android.graphics.drawable.Drawable: void <init>()>","<android.graphics.drawable.Drawable: void <init>()>"
"<android.content.pm.ResolveInfo: int describeContents()>","<android.content.pm.ResolveInfo: int describeContents()>"
"<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>","<android.os.BaseBundle: void putIntArray(java.lang.String,int[])>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onReady(android.hardware.camera2.CameraCaptureSession)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onReady(android.hardware.camera2.CameraCaptureSession)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: void <init>(android.view.textclassifier.TextClassifierEvent$1)>","<android.view.textclassifier.TextClassifierEvent$Builder: void <init>(android.view.textclassifier.TextClassifierEvent$1)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(float[],int,int)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)>"
"<android.content.pm.PackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>"
"<android.graphics.drawable.BitmapDrawable: void setAlpha(int)>","<android.graphics.drawable.BitmapDrawable: void setAlpha(int)>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBottom()>"
"<android.app.ActionBar$Tab: java.lang.CharSequence getContentDescription()>","<android.app.ActionBar$Tab: java.lang.CharSequence getContentDescription()>"
"<android.app.Dialog: void takeKeyEvents(boolean)>","<android.app.Dialog: void takeKeyEvents(boolean)>"
"<android.view.Window: void restoreHierarchyState(android.os.Bundle)>","<android.view.Window: void restoreHierarchyState(android.os.Bundle)>"
"<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String,java.lang.Class)>"
"<android.media.Image$Plane: void <init>()>","<android.media.Image$Plane: void <init>()>"
"<android.view.View: int getHorizontalFadingEdgeLength()>","<android.view.View: int getHorizontalFadingEdgeLength()>"
"<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>","<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isScreenReaderFocusable()>"
"<android.view.animation.Animation: boolean getShowBackdrop()>","<android.view.animation.Animation: boolean getShowBackdrop()>"
"<android.hardware.display.DeviceProductInfo: void writeToParcel(android.os.Parcel,int)>","<android.hardware.display.DeviceProductInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>"
"<java.net.URI: void <init>(java.lang.String)>","<java.net.URI: void <init>(java.lang.String)>"
"<android.widget.RemoteViews: int describeContents()>","<android.widget.RemoteViews: int describeContents()>"
"<java.util.Deque: java.lang.Object getFirst()>","<java.util.Deque: java.lang.Object getFirst()>"
"<android.util.AndroidException: void <init>(java.lang.Exception)>","<android.util.AndroidException: void <init>(java.lang.Exception)>"
"<android.media.Spatializer: boolean isEnabled()>","<android.media.Spatializer: boolean isEnabled()>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openFileHelper(android.net.Uri,java.lang.String)>"
"<android.content.res.Configuration: void <init>()>","<android.content.res.Configuration: void <init>()>"
"<android.text.PrecomputedText$Params: int getBreakStrategy()>","<android.text.PrecomputedText$Params: int getBreakStrategy()>"
"<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>","<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>"
"<android.view.View: void setTextAlignment(int)>","<android.view.View: void setTextAlignment(int)>"
"<android.graphics.Region: boolean getBounds(android.graphics.Rect)>","<android.graphics.Region: boolean getBounds(android.graphics.Rect)>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getAppPackageName()>"
"<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>","<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>"
"<android.view.View: void setCameraDistance(float)>","<android.view.View: void setCameraDistance(float)>"
"<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>","<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)>"
"<android.graphics.RecordingCanvas: int getMaximumBitmapHeight()>","<android.graphics.RecordingCanvas: int getMaximumBitmapHeight()>"
"<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>","<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>"
"<java.lang.Short: int toUnsignedInt(short)>","<java.lang.Short: int toUnsignedInt(short)>"
"<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>","<android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)>"
"<android.accounts.Account: int describeContents()>","<android.accounts.Account: int describeContents()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>","<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction malformedInputAction()>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void <init>()>"
"<android.view.View: boolean awakenScrollBars(int,boolean)>","<android.view.View: boolean awakenScrollBars(int,boolean)>"
"<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>","<java.lang.'annotation'.Annotation: java.lang.Class annotationType()>"
"<android.database.sqlite.SQLiteProgram: int getUniqueId()>","<android.database.sqlite.SQLiteProgram: int getUniqueId()>"
"<android.hardware.camera2.CameraCaptureSession: void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)>","<android.hardware.camera2.CameraCaptureSession: void updateOutputConfiguration(android.hardware.camera2.params.OutputConfiguration)>"
"<java.net.URISyntaxException: java.lang.String getMessage()>","<java.net.URISyntaxException: java.lang.String getMessage()>"
"<android.media.MediaPlayer$TrackInfo: int describeContents()>","<android.media.MediaPlayer$TrackInfo: int describeContents()>"
"<android.media.AudioPresentation: int getProgramId()>","<android.media.AudioPresentation: int getProgramId()>"
"<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>","<android.graphics.drawable.BitmapDrawable: void setMipMap(boolean)>"
"<java.time.temporal.TemporalField: java.lang.String toString()>","<java.time.temporal.TemporalField: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor: java.lang.String toString()>","<android.content.res.AssetFileDescriptor: java.lang.String toString()>"
"<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>","<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>"
"<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>","<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>"
"<android.app.PendingIntent: java.lang.String toString()>","<android.app.PendingIntent: java.lang.String toString()>"
"<android.hardware.Sensor: int getVersion()>","<android.hardware.Sensor: int getVersion()>"
"<android.media.AudioManager: void setRingerMode(int)>","<android.media.AudioManager: void setRingerMode(int)>"
"<android.os.Debug: long getNativeHeapSize()>","<android.os.Debug: long getNativeHeapSize()>"
"<android.graphics.drawable.BitmapDrawable: boolean isFilterBitmap()>","<android.graphics.drawable.BitmapDrawable: boolean isFilterBitmap()>"
"<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>","<android.os.BaseBundle: void putStringArray(java.lang.String,java.lang.String[])>"
"<java.util.Date: void setTime(long)>","<java.util.Date: void setTime(long)>"
"<android.net.NetworkInfo: java.lang.String getExtraInfo()>","<android.net.NetworkInfo: java.lang.String getExtraInfo()>"
"<android.view.MotionEvent: void offsetLocation(float,float)>","<android.view.MotionEvent: void offsetLocation(float,float)>"
"<android.animation.ValueAnimator: void setRepeatCount(int)>","<android.animation.ValueAnimator: void setRepeatCount(int)>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setTtcIndex(int)>"
"<android.graphics.ColorSpace: float getMaxValue(int)>","<android.graphics.ColorSpace: float getMaxValue(int)>"
"<android.view.View: void refreshDrawableState()>","<android.view.View: void refreshDrawableState()>"
"<android.hardware.Camera$Parameters: int getPreviewFrameRate()>","<android.hardware.Camera$Parameters: int getPreviewFrameRate()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(int,char)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(int,char)>"
"<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader,java.lang.Class)>"
"<android.view.View: void setTransitionVisibility(int)>","<android.view.View: void setTransitionVisibility(int)>"
"<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>","<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>"
"<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.inputmethod.CorrectionInfo: int getOffset()>","<android.view.inputmethod.CorrectionInfo: int getOffset()>"
"<java.lang.Math: double nextAfter(double,double)>","<java.lang.Math: double nextAfter(double,double)>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int,int)>","<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int,int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostResumed(android.app.Activity)>"
"<android.widget.TextView: java.lang.String getFontFeatureSettings()>","<android.widget.TextView: java.lang.String getFontFeatureSettings()>"
"<android.hardware.camera2.params.OutputConfiguration: boolean equals(java.lang.Object)>","<android.hardware.camera2.params.OutputConfiguration: boolean equals(java.lang.Object)>"
"<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>","<android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>"
"<android.view.ViewGroup: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>"
"<android.content.pm.FeatureGroupInfo: void <clinit>()>","<android.content.pm.FeatureGroupInfo: void <clinit>()>"
"<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>","<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>"
"<android.app.Activity: void enterPictureInPictureMode()>","<android.app.Activity: void enterPictureInPictureMode()>"
"<android.os.PersistableBundle: java.lang.Object clone()>","<android.os.PersistableBundle: java.lang.Object clone()>"
"<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>","<android.media.AudioAttributes: void writeToParcel(android.os.Parcel,int)>"
"<java.util.HashSet: void <init>(int)>","<java.util.HashSet: void <init>(int)>"
"<java.net.DatagramPacket: void setData(byte[],int,int)>","<java.net.DatagramPacket: void setData(byte[],int,int)>"
"<android.view.textclassifier.TextSelection$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextSelection$Request: java.lang.CharSequence getText()>"
"<android.content.pm.PackageManager: boolean isInstantApp(java.lang.String)>","<android.content.pm.PackageManager: boolean isInstantApp(java.lang.String)>"
"<android.view.animation.Animation: void setDetachWallpaper(boolean)>","<android.view.animation.Animation: void setDetachWallpaper(boolean)>"
"<android.view.animation.Animation: long computeDurationHint()>","<android.view.animation.Animation: long computeDurationHint()>"
"<java.lang.String: int indexOf(int)>","<java.lang.String: int indexOf(int)>"
"<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.Context: void grantUriPermission(java.lang.String,android.net.Uri,int)>"
"<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>","<android.net.NetworkCapabilities: boolean equals(java.lang.Object)>"
"<android.os.Vibrator: void vibrate(long[],int,android.media.AudioAttributes)>","<android.os.Vibrator: void vibrate(long[],int,android.media.AudioAttributes)>"
"<android.hardware.camera2.CaptureResult: int getSequenceId()>","<android.hardware.camera2.CaptureResult: int getSequenceId()>"
"<android.telephony.ims.ImsReasonInfo: void <init>(int,int,java.lang.String)>","<android.telephony.ims.ImsReasonInfo: void <init>(int,int,java.lang.String)>"
"<java.time.LocalDate: int getDayOfMonth()>","<java.time.LocalDate: int getDayOfMonth()>"
"<java.util.Map: boolean equals(java.lang.Object)>","<java.util.Map: boolean equals(java.lang.Object)>"
"<java.io.File: void <init>(java.net.URI)>","<java.io.File: void <init>(java.net.URI)>"
"<java.util.stream.Stream: void forEach(java.util.function.Consumer)>","<java.util.stream.Stream: void forEach(java.util.function.Consumer)>"
"<java.lang.SecurityManager: void checkLink(java.lang.String)>","<java.lang.SecurityManager: void checkLink(java.lang.String)>"
"<java.time.Period: java.time.Period minusYears(long)>","<java.time.Period: java.time.Period minusYears(long)>"
"<android.telephony.SignalStrengthUpdateRequest: int hashCode()>","<android.telephony.SignalStrengthUpdateRequest: int hashCode()>"
"<java.util.Deque: void addFirst(java.lang.Object)>","<java.util.Deque: void addFirst(java.lang.Object)>"
"<android.content.Loader: void onAbandon()>","<android.content.Loader: void onAbandon()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollY()>","<android.view.accessibility.AccessibilityRecord: int getScrollY()>"
"<java.util.Arrays: java.util.stream.IntStream stream(int[],int,int)>","<java.util.Arrays: java.util.stream.IntStream stream(int[],int,int)>"
"<android.telephony.ServiceState: int getCdmaSystemId()>","<android.telephony.ServiceState: int getCdmaSystemId()>"
"<android.hardware.lights.LightsRequest: java.util.Map getLightsAndStates()>","<android.hardware.lights.LightsRequest: java.util.Map getLightsAndStates()>"
"<android.graphics.drawable.LayerDrawable: boolean onLayoutDirectionChanged(int)>","<android.graphics.drawable.LayerDrawable: boolean onLayoutDirectionChanged(int)>"
"<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>","<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>"
"<android.app.RemoteAction: android.app.RemoteAction clone()>","<android.app.RemoteAction: android.app.RemoteAction clone()>"
"<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>","<android.app.Activity: boolean onNavigateUpFromChild(android.app.Activity)>"
"<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,long)>","<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,long)>"
"<java.lang.Short: int compareTo(java.lang.Short)>","<java.lang.Short: int compareTo(java.lang.Short)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>"
"<android.view.Display: int getRotation()>","<android.view.Display: int getRotation()>"
"<java.util.List: java.util.List subList(int,int)>","<java.util.List: java.util.List subList(int,int)>"
"<android.app.FragmentManager$BackStackEntry: java.lang.String getName()>","<android.app.FragmentManager$BackStackEntry: java.lang.String getName()>"
"<org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()>","<org.xmlpull.v1.XmlPullParser: boolean isEmptyElementTag()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>"
"<java.nio.charset.CharsetDecoder: void implReset()>","<java.nio.charset.CharsetDecoder: void implReset()>"
"<android.content.res.ColorStateList: java.lang.String toString()>","<android.content.res.ColorStateList: java.lang.String toString()>"
"<android.view.ViewStructure: void setAutofillType(int)>","<android.view.ViewStructure: void setAutofillType(int)>"
"<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>","<android.content.Intent: char[] getCharArrayExtra(java.lang.String)>"
"<android.media.AudioManager: void setMicrophoneMute(boolean)>","<android.media.AudioManager: void setMicrophoneMute(boolean)>"
"<java.nio.file.Path: java.nio.file.Path subpath(int,int)>","<java.nio.file.Path: java.nio.file.Path subpath(int,int)>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.String toString()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.String toString()>"
"<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedSceneModes()>"
"<android.content.Context: boolean isUiContext()>","<android.content.Context: boolean isUiContext()>"
"<android.content.ClipData: int describeContents()>","<android.content.ClipData: int describeContents()>"
"<android.view.View$DragShadowBuilder: void <init>()>","<android.view.View$DragShadowBuilder: void <init>()>"
"<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace$RenderIntent getRenderIntent()>","<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace$RenderIntent getRenderIntent()>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setNetworkSpecifier(android.net.NetworkSpecifier)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setNetworkSpecifier(android.net.NetworkSpecifier)>"
"<android.graphics.Path: void set(android.graphics.Path)>","<android.graphics.Path: void set(android.graphics.Path)>"
"<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>","<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>"
"<android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener: void onBufferTransformHintChanged(int)>","<android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener: void onBufferTransformHintChanged(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isTextSelectable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isTextSelectable()>"
"<java.time.LocalTime: void <clinit>()>","<java.time.LocalTime: void <clinit>()>"
"<java.nio.file.Path: java.util.Iterator iterator()>","<java.nio.file.Path: java.util.Iterator iterator()>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor)>"
"<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>","<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>"
"<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>","<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,android.icu.util.ULocale)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void <clinit>()>","<android.app.VoiceInteractor$PickOptionRequest$Option: void <clinit>()>"
"<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)>","<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,int)>"
"<android.view.MenuItem: int getOrder()>","<android.view.MenuItem: int getOrder()>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setLabels(java.util.Map)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setLabels(java.util.Map)>"
"<android.animation.LayoutTransition: void setStartDelay(int,long)>","<android.animation.LayoutTransition: void setStartDelay(int,long)>"
"<java.lang.SecurityManager: int classLoaderDepth()>","<java.lang.SecurityManager: int classLoaderDepth()>"
"<android.view.KeyEvent: int getSource()>","<android.view.KeyEvent: int getSource()>"
"<android.os.PatternMatcher: int describeContents()>","<android.os.PatternMatcher: int describeContents()>"
"<android.media.MediaMetadataEditor: int[] getEditableKeys()>","<android.media.MediaMetadataEditor: int[] getEditableKeys()>"
"<android.view.Window: void setLogo(int)>","<android.view.Window: void setLogo(int)>"
"<java.time.OffsetTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View: int getRightPaddingOffset()>","<android.view.View: int getRightPaddingOffset()>"
"<android.view.accessibility.AccessibilityRecord: void recycle()>","<android.view.accessibility.AccessibilityRecord: void recycle()>"
"<android.view.Menu: void setGroupEnabled(int,boolean)>","<android.view.Menu: void setGroupEnabled(int,boolean)>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioFormat(android.media.AudioFormat)>","<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioFormat(android.media.AudioFormat)>"
"<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()>","<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()>"
"<java.util.function.Function: java.util.function.Function identity()>","<java.util.function.Function: java.util.function.Function identity()>"
"<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>","<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>"
"<java.lang.Long: java.lang.String toOctalString(long)>","<java.lang.Long: java.lang.String toOctalString(long)>"
"<android.content.Intent: android.content.Intent addFlags(int)>","<android.content.Intent: android.content.Intent addFlags(int)>"
"<android.graphics.RenderNode: int getBottom()>","<android.graphics.RenderNode: int getBottom()>"
"<java.io.File: boolean setExecutable(boolean,boolean)>","<java.io.File: boolean setExecutable(boolean,boolean)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class,java.lang.String,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStaticSetter(java.lang.Class,java.lang.String,java.lang.Class)>"
"<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>","<android.graphics.Typeface$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>"
"<android.graphics.drawable.LayerDrawable: void setHotspot(float,float)>","<android.graphics.drawable.LayerDrawable: void setHotspot(float,float)>"
"<android.hardware.lights.LightsManager: android.hardware.lights.LightState getLightState(android.hardware.lights.Light)>","<android.hardware.lights.LightsManager: android.hardware.lights.LightState getLightState(android.hardware.lights.Light)>"
"<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>","<java.io.PrintStream: void <init>(java.io.File,java.lang.String)>"
"<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)>","<android.widget.TextView: boolean onDragEvent(android.view.DragEvent)>"
"<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>","<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>"
"<android.view.KeyCharacterMap: void finalize()>","<android.view.KeyCharacterMap: void finalize()>"
"<java.time.Clock: void <init>()>","<java.time.Clock: void <init>()>"
"<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)>","<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.util.DisplayMetrics)>"
"<android.graphics.Typeface: void <clinit>()>","<android.graphics.Typeface: void <clinit>()>"
"<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>","<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>"
"<android.net.LinkProperties: void setInterfaceName(java.lang.String)>","<android.net.LinkProperties: void setInterfaceName(java.lang.String)>"
"<android.media.session.MediaController$Callback: void onSessionEvent(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$Callback: void onSessionEvent(java.lang.String,android.os.Bundle)>"
"<android.hardware.SyncFence: int describeContents()>","<android.hardware.SyncFence: int describeContents()>"
"<java.time.LocalDateTime: java.time.LocalDateTime withMonth(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withMonth(int)>"
"<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>","<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>"
"<java.util.OptionalInt: boolean isEmpty()>","<java.util.OptionalInt: boolean isEmpty()>"
"<android.content.res.Resources: float getFloat(int)>","<android.content.res.Resources: float getFloat(int)>"
"<android.graphics.Paint: void setStrikeThruText(boolean)>","<android.graphics.Paint: void setStrikeThruText(boolean)>"
"<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>","<android.os.IBinder: android.os.IInterface queryLocalInterface(java.lang.String)>"
"<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>","<android.hardware.camera2.CameraCaptureSession: void abortCaptures()>"
"<android.content.pm.ApplicationInfo: boolean isVirtualPreload()>","<android.content.pm.ApplicationInfo: boolean isVirtualPreload()>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)>"
"<java.util.function.IntPredicate: java.util.function.IntPredicate negate()>","<java.util.function.IntPredicate: java.util.function.IntPredicate negate()>"
"<android.graphics.PathEffect: void finalize()>","<android.graphics.PathEffect: void finalize()>"
"<android.content.Intent: android.content.Intent getIntent(java.lang.String)>","<android.content.Intent: android.content.Intent getIntent(java.lang.String)>"
"<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>","<android.widget.AbsListView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>"
"<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>","<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>"
"<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String)>"
"<java.lang.reflect.Executable: int getParameterCount()>","<java.lang.reflect.Executable: int getParameterCount()>"
"<android.telephony.VisualVoicemailSmsFilterSettings: void writeToParcel(android.os.Parcel,int)>","<android.telephony.VisualVoicemailSmsFilterSettings: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>","<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>"
"<android.view.Display: long getPresentationDeadlineNanos()>","<android.view.Display: long getPresentationDeadlineNanos()>"
"<android.widget.TextView: int getAutoSizeMaxTextSize()>","<android.widget.TextView: int getAutoSizeMaxTextSize()>"
"<android.view.View: boolean isAutoHandwritingEnabled()>","<android.view.View: boolean isAutoHandwritingEnabled()>"
"<android.media.Session2Token: int hashCode()>","<android.media.Session2Token: int hashCode()>"
"<android.widget.RelativeLayout: void setIgnoreGravity(int)>","<android.widget.RelativeLayout: void setIgnoreGravity(int)>"
"<java.lang.Iterable: void forEach(java.util.function.Consumer)>","<java.lang.Iterable: void forEach(java.util.function.Consumer)>"
"<java.time.temporal.ChronoUnit: java.lang.String toString()>","<java.time.temporal.ChronoUnit: java.lang.String toString()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.Chronology getChronology()>"
"<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>","<java.security.GeneralSecurityException: void <init>(java.lang.Throwable)>"
"<android.widget.RemoteViews: void <init>(java.lang.String,int)>","<android.widget.RemoteViews: void <init>(java.lang.String,int)>"
"<android.media.VolumeShaper$Operation: int describeContents()>","<android.media.VolumeShaper$Operation: int describeContents()>"
"<java.lang.StringBuffer: java.lang.StringBuffer reverse()>","<java.lang.StringBuffer: java.lang.StringBuffer reverse()>"
"<android.app.PendingIntent: void send(int)>","<android.app.PendingIntent: void send(int)>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,java.util.List,android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,java.util.List,android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.view.View: void requestApplyInsets()>","<android.view.View: void requestApplyInsets()>"
"<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>","<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>"
"<android.view.View: void setNextFocusDownId(int)>","<android.view.View: void setNextFocusDownId(int)>"
"<java.lang.Character: int toUpperCase(int)>","<java.lang.Character: int toUpperCase(int)>"
"<android.graphics.Matrix: void setSkew(float,float,float,float)>","<android.graphics.Matrix: void setSkew(float,float,float,float)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>"
"<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>","<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>"
"<android.view.View: int getAutofillType()>","<android.view.View: int getAutofillType()>"
"<android.text.Layout: int getLineStart(int)>","<android.text.Layout: int getLineStart(int)>"
"<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>","<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>"
"<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>","<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas()>"
"<android.os.Handler: android.os.Message obtainMessage(int)>","<android.os.Handler: android.os.Message obtainMessage(int)>"
"<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()>","<android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()>"
"<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>","<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>"
"<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(float,float,float,float,float[],android.graphics.Path$Direction)>"
"<java.util.ArrayList: java.util.Iterator iterator()>","<java.util.ArrayList: java.util.Iterator iterator()>"
"<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>","<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>"
"<java.time.temporal.ChronoField: boolean isDateBased()>","<java.time.temporal.ChronoField: boolean isDateBased()>"
"<android.app.Person: void <clinit>()>","<android.app.Person: void <clinit>()>"
"<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)>","<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)>"
"<android.app.Fragment: void onStart()>","<android.app.Fragment: void onStart()>"
"<android.media.MediaDrm$KeyStatus: void <init>()>","<android.media.MediaDrm$KeyStatus: void <init>()>"
"<java.util.NavigableSet: java.util.NavigableSet descendingSet()>","<java.util.NavigableSet: java.util.NavigableSet descendingSet()>"
"<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>"
"<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean,int)>","<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean,int)>"
"<java.lang.Short: long longValue()>","<java.lang.Short: long longValue()>"
"<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>","<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>"
"<android.widget.TextView: void setAutoLinkMask(int)>","<android.widget.TextView: void setAutoLinkMask(int)>"
"<android.content.pm.ComponentInfo: boolean isEnabled()>","<android.content.pm.ComponentInfo: boolean isEnabled()>"
"<android.widget.AbsListView: void setFilterText(java.lang.String)>","<android.widget.AbsListView: void setFilterText(java.lang.String)>"
"<java.lang.Integer: java.lang.String toString(int)>","<java.lang.Integer: java.lang.String toString(int)>"
"<android.hardware.display.DeviceProductInfo: java.lang.String getName()>","<android.hardware.display.DeviceProductInfo: java.lang.String getName()>"
"<android.media.MediaDrm$ProvisionRequest: void <init>()>","<android.media.MediaDrm$ProvisionRequest: void <init>()>"
"<android.database.ContentObserver: void <init>(android.os.Handler)>","<android.database.ContentObserver: void <init>(android.os.Handler)>"
"<java.lang.Byte: java.lang.Byte valueOf(byte)>","<java.lang.Byte: java.lang.Byte valueOf(byte)>"
"<android.text.Layout: int getEllipsizedWidth()>","<android.text.Layout: int getEllipsizedWidth()>"
"<android.telephony.PreciseDataConnectionState: int getLastCauseCode()>","<android.telephony.PreciseDataConnectionState: int getLastCauseCode()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean refreshWithExtraData(java.lang.String,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeInfo: boolean refreshWithExtraData(java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: int getCompoundPaddingLeft()>","<android.widget.TextView: int getCompoundPaddingLeft()>"
"<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon,android.graphics.drawable.Icon)>","<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon,android.graphics.drawable.Icon)>"
"<android.app.Application: void onLowMemory()>","<android.app.Application: void onLowMemory()>"
"<android.view.Display$HdrCapabilities: int describeContents()>","<android.view.Display$HdrCapabilities: int describeContents()>"
"<java.time.Duration: long get(java.time.temporal.TemporalUnit)>","<java.time.Duration: long get(java.time.temporal.TemporalUnit)>"
"<android.view.inputmethod.InputMethodInfo: int hashCode()>","<android.view.inputmethod.InputMethodInfo: int hashCode()>"
"<android.telephony.PhoneStateListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)>","<android.telephony.PhoneStateListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)>"
"<android.app.ActivityManager: java.util.List getProcessesInErrorState()>","<android.app.ActivityManager: java.util.List getProcessesInErrorState()>"
"<android.content.ContextWrapper: java.util.concurrent.Executor getMainExecutor()>","<android.content.ContextWrapper: java.util.concurrent.Executor getMainExecutor()>"
"<java.lang.Enum: boolean equals(java.lang.Object)>","<java.lang.Enum: boolean equals(java.lang.Object)>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeLayout(boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeLayout(boolean)>"
"<android.widget.ListView: void setFooterDividersEnabled(boolean)>","<android.widget.ListView: void setFooterDividersEnabled(boolean)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setScheduleAsExpeditedJob(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setScheduleAsExpeditedJob(boolean)>"
"<android.view.View: java.util.List getSystemGestureExclusionRects()>","<android.view.View: java.util.List getSystemGestureExclusionRects()>"
"<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>","<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>"
"<android.view.View: void onVisibilityAggregated(boolean)>","<android.view.View: void onVisibilityAggregated(boolean)>"
"<java.security.Provider: java.util.Set keySet()>","<java.security.Provider: java.util.Set keySet()>"
"<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>","<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int)>"
"<java.lang.Void: void <init>()>","<java.lang.Void: void <init>()>"
"<android.view.MotionEvent: long getEventTime()>","<android.view.MotionEvent: long getEventTime()>"
"<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.Integer: int hashCode(int)>","<java.lang.Integer: int hashCode(int)>"
"<android.util.AttributeSet: java.lang.String getPositionDescription()>","<android.util.AttributeSet: java.lang.String getPositionDescription()>"
"<java.util.Arrays: char[] copyOfRange(char[],int,int)>","<java.util.Arrays: char[] copyOfRange(char[],int,int)>"
"<android.media.AudioManager: boolean isBluetoothScoOn()>","<android.media.AudioManager: boolean isBluetoothScoOn()>"
"<android.graphics.Typeface$Builder: void <init>(java.io.File)>","<android.graphics.Typeface$Builder: void <init>(java.io.File)>"
"<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>","<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>"
"<android.animation.ValueAnimator$DurationScaleChangeListener: void onChanged(float)>","<android.animation.ValueAnimator$DurationScaleChangeListener: void onChanged(float)>"
"<java.security.PermissionCollection: void add(java.security.Permission)>","<java.security.PermissionCollection: void add(java.security.Permission)>"
"<android.view.WindowId: void registerFocusObserver(android.view.WindowId$FocusObserver)>","<android.view.WindowId: void registerFocusObserver(android.view.WindowId$FocusObserver)>"
"<android.os.Messenger: void <init>(android.os.Handler)>","<android.os.Messenger: void <init>(android.os.Handler)>"
"<android.view.ViewOverlay: void clear()>","<android.view.ViewOverlay: void clear()>"
"<android.media.AudioManager: void setSpeakerphoneOn(boolean)>","<android.media.AudioManager: void setSpeakerphoneOn(boolean)>"
"<android.media.AudioTrack: int getChannelConfiguration()>","<android.media.AudioTrack: int getChannelConfiguration()>"
"<android.content.pm.ServiceInfo: int describeContents()>","<android.content.pm.ServiceInfo: int describeContents()>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle ofDefaultLocale()>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle ofDefaultLocale()>"
"<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)>"
"<android.graphics.Paint: float getShadowLayerDx()>","<android.graphics.Paint: float getShadowLayerDx()>"
"<android.util.ArrayMap: java.lang.Object valueAt(int)>","<android.util.ArrayMap: java.lang.Object valueAt(int)>"
"<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>","<java.util.Collections: java.util.Set synchronizedSet(java.util.Set)>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>"
"<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setDestinationPort(int)>","<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setDestinationPort(int)>"
"<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>","<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>"
"<java.util.concurrent.Semaphore: void acquireUninterruptibly(int)>","<java.util.concurrent.Semaphore: void acquireUninterruptibly(int)>"
"<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>","<java.lang.SecurityManager: java.lang.Class currentLoadedClass()>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>","<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>"
"<android.net.IpSecTransform: void finalize()>","<android.net.IpSecTransform: void finalize()>"
"<android.media.AudioFormat: int getEncoding()>","<android.media.AudioFormat: int getEncoding()>"
"<android.widget.TextView: int getTextSizeUnit()>","<android.widget.TextView: int getTextSizeUnit()>"
"<android.graphics.ColorSpace$Rgb: float[] getTransform(float[])>","<android.graphics.ColorSpace$Rgb: float[] getTransform(float[])>"
"<android.view.View: java.lang.CharSequence getContentDescription()>","<android.view.View: java.lang.CharSequence getContentDescription()>"
"<android.telephony.ims.ImsReasonInfo: java.lang.String getExtraMessage()>","<android.telephony.ims.ImsReasonInfo: java.lang.String getExtraMessage()>"
"<java.util.function.LongPredicate: java.util.function.LongPredicate or(java.util.function.LongPredicate)>","<java.util.function.LongPredicate: java.util.function.LongPredicate or(java.util.function.LongPredicate)>"
"<android.graphics.Color: float luminance(int)>","<android.graphics.Color: float luminance(int)>"
"<android.media.SyncParams: android.media.SyncParams setFrameRate(float)>","<android.media.SyncParams: android.media.SyncParams setFrameRate(float)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo getCollectionInfo()>"
"<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>","<android.animation.LayoutTransition: boolean isTransitionTypeEnabled(int)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle$AccessMode,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle varHandleInvoker(java.lang.invoke.VarHandle$AccessMode,java.lang.invoke.MethodType)>"
"<android.content.ClipDescription: float getConfidenceScore(java.lang.String)>","<android.content.ClipDescription: float getConfidenceScore(java.lang.String)>"
"<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.media.AudioFormat: void <clinit>()>","<android.media.AudioFormat: void <clinit>()>"
"<java.lang.Boolean: int compareTo(java.lang.Boolean)>","<java.lang.Boolean: int compareTo(java.lang.Boolean)>"
"<java.lang.Class: java.lang.Object cast(java.lang.Object)>","<java.lang.Class: java.lang.Object cast(java.lang.Object)>"
"<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>","<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>"
"<android.view.animation.Animation: void ensureInterpolator()>","<android.view.animation.Animation: void ensureInterpolator()>"
"<android.hardware.camera2.CaptureFailure: android.hardware.camera2.CaptureRequest getRequest()>","<android.hardware.camera2.CaptureFailure: android.hardware.camera2.CaptureRequest getRequest()>"
"<android.widget.TextView: int getAutoLinkMask()>","<android.widget.TextView: int getAutoLinkMask()>"
"<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>","<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>"
"<android.view.inputmethod.CorrectionInfo: int describeContents()>","<android.view.inputmethod.CorrectionInfo: int describeContents()>"
"<java.lang.reflect.Modifier: int methodModifiers()>","<java.lang.reflect.Modifier: int methodModifiers()>"
"<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>","<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>"
"<android.app.VoiceInteractor$ConfirmationRequest: void onConfirmationResult(boolean,android.os.Bundle)>","<android.app.VoiceInteractor$ConfirmationRequest: void onConfirmationResult(boolean,android.os.Bundle)>"
"<java.io.PrintStream: void print(boolean)>","<java.io.PrintStream: void print(boolean)>"
"<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>","<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>"
"<android.app.Dialog: void onContentChanged()>","<android.app.Dialog: void onContentChanged()>"
"<android.os.ParcelFileDescriptor: void checkError()>","<android.os.ParcelFileDescriptor: void checkError()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
"<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder clearLight(android.hardware.lights.Light)>","<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder clearLight(android.hardware.lights.Light)>"
"<android.telephony.data.ApnSetting: java.lang.String toString()>","<android.telephony.data.ApnSetting: java.lang.String toString()>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float)>"
"<android.view.View: boolean isSoundEffectsEnabled()>","<android.view.View: boolean isSoundEffectsEnabled()>"
"<java.time.OffsetDateTime: boolean isAfter(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: boolean isAfter(java.time.OffsetDateTime)>"
"<android.os.VibrationAttributes: int hashCode()>","<android.os.VibrationAttributes: int hashCode()>"
"<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>","<android.content.Context: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>"
"<java.lang.Thread: long getId()>","<java.lang.Thread: long getId()>"
"<java.io.File: boolean setExecutable(boolean)>","<java.io.File: boolean setExecutable(boolean)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)>"
"<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>","<android.hardware.Camera$Parameters: void setFocusMode(java.lang.String)>"
"<java.time.chrono.ChronoZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.ChronoZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>"
"<android.content.pm.PackageInstaller: java.util.List getAllSessions()>","<android.content.pm.PackageInstaller: java.util.List getAllSessions()>"
"<java.util.OptionalLong: boolean isEmpty()>","<java.util.OptionalLong: boolean isEmpty()>"
"<java.util.concurrent.Semaphore: java.lang.String toString()>","<java.util.concurrent.Semaphore: java.lang.String toString()>"
"<android.app.ActivityManager: int getLockTaskModeState()>","<android.app.ActivityManager: int getLockTaskModeState()>"
"<java.io.FileInputStream: void close()>","<java.io.FileInputStream: void close()>"
"<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)>","<android.telephony.TelephonyManager: void requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager$CellInfoCallback)>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream onClose(java.lang.Runnable)>","<java.util.stream.BaseStream: java.util.stream.BaseStream onClose(java.lang.Runnable)>"
"<java.io.Reader: java.io.Reader nullReader()>","<java.io.Reader: java.io.Reader nullReader()>"
"<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()>","<android.view.ScrollCaptureSession: android.graphics.Rect getScrollBounds()>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],boolean[])>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle unreflectVarHandle(java.lang.reflect.Field)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle unreflectVarHandle(java.lang.reflect.Field)>"
"<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[],int,int)>","<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[],int,int)>"
"<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)>","<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)>"
"<android.view.accessibility.AccessibilityWindowInfo: void <init>(android.view.accessibility.AccessibilityWindowInfo)>","<android.view.accessibility.AccessibilityWindowInfo: void <init>(android.view.accessibility.AccessibilityWindowInfo)>"
"<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>","<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char,int)>"
"<java.util.concurrent.ExecutionException: void <init>()>","<java.util.concurrent.ExecutionException: void <init>()>"
"<java.util.AbstractQueue: java.lang.Object element()>","<java.util.AbstractQueue: java.lang.Object element()>"
"<android.media.RemoteController: boolean seekTo(long)>","<android.media.RemoteController: boolean seekTo(long)>"
"<android.view.Window: void setStatusBarContrastEnforced(boolean)>","<android.view.Window: void setStatusBarContrastEnforced(boolean)>"
"<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>","<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>"
"<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>","<android.content.pm.PackageInstaller$SessionInfo: int[] getChildSessionIds()>"
"<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<android.app.Activity: void showLockTaskEscapeMessage()>","<android.app.Activity: void showLockTaskEscapeMessage()>"
"<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>","<android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>"
"<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>","<java.nio.LongBuffer: int compareTo(java.nio.LongBuffer)>"
"<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)>","<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String)>"
"<android.media.session.MediaSession$QueueItem: void <init>(android.media.MediaDescription,long)>","<android.media.session.MediaSession$QueueItem: void <init>(android.media.MediaDescription,long)>"
"<android.app.Activity: boolean enterPictureInPictureMode(android.app.PictureInPictureParams)>","<android.app.Activity: boolean enterPictureInPictureMode(android.app.PictureInPictureParams)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setOperatorNumeric(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setOperatorNumeric(java.lang.String)>"
"<android.icu.util.ULocale: java.util.Locale toLocale()>","<android.icu.util.ULocale: java.util.Locale toLocale()>"
"<java.util.DoubleSummaryStatistics: long getCount()>","<java.util.DoubleSummaryStatistics: long getCount()>"
"<android.graphics.ColorSpace$Connector: float[] transform(float,float,float)>","<android.graphics.ColorSpace$Connector: float[] transform(float,float,float)>"
"<android.app.Activity: boolean onPictureInPictureRequested()>","<android.app.Activity: boolean onPictureInPictureRequested()>"
"<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>","<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>"
"<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>","<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>"
"<android.view.WindowInsets: boolean hasStableInsets()>","<android.view.WindowInsets: boolean hasStableInsets()>"
"<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>","<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>"
"<java.util.ArrayList: void sort(java.util.Comparator)>","<java.util.ArrayList: void sort(java.util.Comparator)>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource(int)>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource(int)>"
"<android.os.Parcel: void writeBundle(android.os.Bundle)>","<android.os.Parcel: void writeBundle(android.os.Bundle)>"
"<java.nio.LongBuffer: java.nio.LongBuffer duplicate()>","<java.nio.LongBuffer: java.nio.LongBuffer duplicate()>"
"<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>","<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: void requestPermissions(java.lang.String[],int)>","<android.app.Activity: void requestPermissions(java.lang.String[],int)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow()>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow()>"
"<android.app.Activity: void onPause()>","<android.app.Activity: void onPause()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>"
"<android.graphics.Paint: java.lang.String getFontVariationSettings()>","<android.graphics.Paint: java.lang.String getFontVariationSettings()>"
"<java.lang.invoke.VarHandle$AccessMode: void <init>(java.lang.String,int)>","<java.lang.invoke.VarHandle$AccessMode: void <init>(java.lang.String,int)>"
"<android.app.VoiceInteractor$CompleteVoiceRequest: void onCompleteResult(android.os.Bundle)>","<android.app.VoiceInteractor$CompleteVoiceRequest: void onCompleteResult(android.os.Bundle)>"
"<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.file.spi.FileSystemProvider: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<android.content.Intent$FilterComparison: android.content.Intent getIntent()>","<android.content.Intent$FilterComparison: android.content.Intent getIntent()>"
"<java.time.Clock: boolean equals(java.lang.Object)>","<java.time.Clock: boolean equals(java.lang.Object)>"
"<android.widget.Toolbar: void setLogo(int)>","<android.widget.Toolbar: void setLogo(int)>"
"<android.app.Activity: void onRestart()>","<android.app.Activity: void onRestart()>"
"<android.app.FragmentManager: void <init>()>","<android.app.FragmentManager: void <init>()>"
"<android.view.MotionEvent: int axisFromString(java.lang.String)>","<android.view.MotionEvent: int axisFromString(java.lang.String)>"
"<android.widget.TextView: void setCursorVisible(boolean)>","<android.widget.TextView: void setCursorVisible(boolean)>"
"<android.view.View: void setScrollbarFadingEnabled(boolean)>","<android.view.View: void setScrollbarFadingEnabled(boolean)>"
"<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>","<android.app.Application: void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener)>"
"<android.graphics.drawable.LayerDrawable: void onBoundsChange(android.graphics.Rect)>","<android.graphics.drawable.LayerDrawable: void onBoundsChange(android.graphics.Rect)>"
"<android.view.animation.Animation: float getScaleFactor()>","<android.view.animation.Animation: float getScaleFactor()>"
"<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>","<android.view.inputmethod.InputContentInfo: android.net.Uri getLinkUri()>"
"<android.graphics.Color: android.graphics.Color valueOf(long)>","<android.graphics.Color: android.graphics.Color valueOf(long)>"
"<java.time.LocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>"
"<java.time.LocalTime: int compareTo(java.time.LocalTime)>","<java.time.LocalTime: int compareTo(java.time.LocalTime)>"
"<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>","<android.transition.Transition: android.transition.Transition removeTarget(android.view.View)>"
"<android.widget.AbsListView: void scrollListBy(int)>","<android.widget.AbsListView: void scrollListBy(int)>"
"<java.util.Random: long nextLong()>","<java.util.Random: long nextLong()>"
"<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>","<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>","<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
"<java.security.AccessControlException: void <init>(java.lang.String)>","<java.security.AccessControlException: void <init>(java.lang.String)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect)>"
"<java.time.temporal.TemporalAccessor: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.temporal.TemporalAccessor: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.hardware.lights.LightState: void writeToParcel(android.os.Parcel,int)>","<android.hardware.lights.LightState: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>","<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizes()>"
"<java.io.PrintStream: void close()>","<java.io.PrintStream: void close()>"
"<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>","<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>","<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>"
"<android.view.View: int getVerticalFadingEdgeLength()>","<android.view.View: int getVerticalFadingEdgeLength()>"
"<android.graphics.Paint$FontMetricsInt: int hashCode()>","<android.graphics.Paint$FontMetricsInt: int hashCode()>"
"<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>","<android.app.FragmentManager: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>"
"<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorConnected(android.hardware.Sensor)>","<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorConnected(android.hardware.Sensor)>"
"<java.time.chrono.IsoEra: int getValue()>","<java.time.chrono.IsoEra: int getValue()>"
"<android.media.session.MediaController$TransportControls: void rewind()>","<android.media.session.MediaController$TransportControls: void rewind()>"
"<android.view.animation.Animation: long getStartTime()>","<android.view.animation.Animation: long getStartTime()>"
"<android.media.projection.MediaProjection: void <init>()>","<android.media.projection.MediaProjection: void <init>()>"
"<android.media.audiofx.AudioEffect$Descriptor: void <init>()>","<android.media.audiofx.AudioEffect$Descriptor: void <init>()>"
"<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)>","<android.text.PrecomputedText: void getBounds(int,int,android.graphics.Rect)>"
"<android.content.Loader: boolean isReset()>","<android.content.Loader: boolean isReset()>"
"<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>","<android.hardware.Camera$Parameters: boolean isVideoStabilizationSupported()>"
"<android.view.View: boolean isContextClickable()>","<android.view.View: boolean isContextClickable()>"
"<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)>"
"<java.nio.CharBuffer: int length()>","<java.nio.CharBuffer: int length()>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAudioAttributes(android.media.AudioAttributes)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAudioAttributes(android.media.AudioAttributes)>"
"<android.view.textclassifier.TextClassifierEvent: int getEventIndex()>","<android.view.textclassifier.TextClassifierEvent: int getEventIndex()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)>"
"<android.widget.TextView: void setSelectAllOnFocus(boolean)>","<android.widget.TextView: void setSelectAllOnFocus(boolean)>"
"<android.content.res.AssetManager$AssetInputStream: int available()>","<android.content.res.AssetManager$AssetInputStream: int available()>"
"<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>","<android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)>"
"<java.util.HashSet: boolean remove(java.lang.Object)>","<java.util.HashSet: boolean remove(java.lang.Object)>"
"<android.database.Cursor: void setNotificationUris(android.content.ContentResolver,java.util.List)>","<android.database.Cursor: void setNotificationUris(android.content.ContentResolver,java.util.List)>"
"<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.Class,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(java.lang.Class,boolean)>"
"<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>","<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputFormats()>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputFormats()>"
"<android.graphics.RenderNode: boolean getUseCompositingLayer()>","<android.graphics.RenderNode: boolean getUseCompositingLayer()>"
"<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getEditorBounds()>","<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getEditorBounds()>"
"<android.view.textclassifier.TextSelection: java.lang.String toString()>","<android.view.textclassifier.TextSelection: java.lang.String toString()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>"
"<android.media.AudioManager: boolean isStreamMute(int)>","<android.media.AudioManager: boolean isStreamMute(int)>"
"<android.view.ViewGroup: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>","<android.view.ViewGroup: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>"
"<android.widget.Scroller: void <init>(android.content.Context)>","<android.widget.Scroller: void <init>(android.content.Context)>"
"<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()>","<android.telephony.TelephonyManager: boolean isConcurrentVoiceAndDataSupported()>"
"<android.util.Range: android.util.Range extend(java.lang.Comparable)>","<android.util.Range: android.util.Range extend(java.lang.Comparable)>"
"<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>","<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>"
"<android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>"
"<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,android.graphics.Color)>","<android.graphics.RuntimeShader: void setColorUniform(java.lang.String,android.graphics.Color)>"
"<java.lang.invoke.MethodHandle: java.lang.Object invokeWithArguments(java.util.List)>","<java.lang.invoke.MethodHandle: java.lang.Object invokeWithArguments(java.util.List)>"
"<java.lang.Object: void finalize()>","<java.lang.Object: void finalize()>"
"<java.util.AbstractCollection: void clear()>","<java.util.AbstractCollection: void clear()>"
"<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>"
"<android.view.MotionEvent: int getDeviceId()>","<android.view.MotionEvent: int getDeviceId()>"
"<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>","<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>"
"<android.view.ViewParent: int getTextAlignment()>","<android.view.ViewParent: int getTextAlignment()>"
"<java.util.Arrays: java.lang.String toString(boolean[])>","<java.util.Arrays: java.lang.String toString(boolean[])>"
"<java.nio.ShortBuffer: java.nio.Buffer rewind()>","<java.nio.ShortBuffer: java.nio.Buffer rewind()>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>"
"<java.util.Collections: void fill(java.util.List,java.lang.Object)>","<java.util.Collections: void fill(java.util.List,java.lang.Object)>"
"<android.media.session.MediaSession$Callback: void onPause()>","<android.media.session.MediaSession$Callback: void onPause()>"
"<android.text.Layout: boolean isFallbackLineSpacingEnabled()>","<android.text.Layout: boolean isFallbackLineSpacingEnabled()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(android.database.Cursor,java.lang.String,java.lang.String,android.content.DialogInterface$OnMultiChoiceClickListener)>"
"<android.hardware.camera2.params.SessionConfiguration: void setSessionParameters(android.hardware.camera2.CaptureRequest)>","<android.hardware.camera2.params.SessionConfiguration: void setSessionParameters(android.hardware.camera2.CaptureRequest)>"
"<android.media.PlaybackParams: void <init>()>","<android.media.PlaybackParams: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int describeContents()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int describeContents()>"
"<java.lang.System: long currentTimeMillis()>","<java.lang.System: long currentTimeMillis()>"
"<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>","<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>"
"<android.view.MenuItem: android.view.MenuItem setIconTintBlendMode(android.graphics.BlendMode)>","<android.view.MenuItem: android.view.MenuItem setIconTintBlendMode(android.graphics.BlendMode)>"
"<android.content.pm.ComponentInfo: int getLogoResource()>","<android.content.pm.ComponentInfo: int getLogoResource()>"
"<android.content.ContextWrapper: boolean isDeviceProtectedStorage()>","<android.content.ContextWrapper: boolean isDeviceProtectedStorage()>"
"<android.media.AudioManager: void setStreamMute(int,boolean)>","<android.media.AudioManager: void setStreamMute(int,boolean)>"
"<android.view.textclassifier.SelectionEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.SelectionEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>","<android.app.Fragment: android.app.FragmentManager getChildFragmentManager()>"
"<android.telephony.data.ApnSetting: android.net.Uri getMmsc()>","<android.telephony.data.ApnSetting: android.net.Uri getMmsc()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,float)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>"
"<android.media.VolumeShaper: void apply(android.media.VolumeShaper$Operation)>","<android.media.VolumeShaper: void apply(android.media.VolumeShaper$Operation)>"
"<android.graphics.Canvas: int getHeight()>","<android.graphics.Canvas: int getHeight()>"
"<java.util.Arrays: int compare(float[],int,int,float[],int,int)>","<java.util.Arrays: int compare(float[],int,int,float[],int,int)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,int,int,android.graphics.Bitmap$Config)>"
"<java.security.Principal: boolean implies(javax.security.auth.Subject)>","<java.security.Principal: boolean implies(javax.security.auth.Subject)>"
"<java.net.InetSocketAddress: int getPort()>","<java.net.InetSocketAddress: int getPort()>"
"<java.lang.String: int indexOf(int,int)>","<java.lang.String: int indexOf(int,int)>"
"<android.view.AttachedSurfaceControl: boolean applyTransactionOnDraw(android.view.SurfaceControl$Transaction)>","<android.view.AttachedSurfaceControl: boolean applyTransactionOnDraw(android.view.SurfaceControl$Transaction)>"
"<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashError(int)>","<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashError(int)>"
"<android.os.Debug: void resetThreadAllocSize()>","<android.os.Debug: void resetThreadAllocSize()>"
"<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>"
"<android.media.AudioManager: void clearCommunicationDevice()>","<android.media.AudioManager: void clearCommunicationDevice()>"
"<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>","<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>"
"<android.view.View: float getBottomFadingEdgeStrength()>","<android.view.View: float getBottomFadingEdgeStrength()>"
"<java.time.ZonedDateTime: int getYear()>","<java.time.ZonedDateTime: int getYear()>"
"<android.hardware.Camera$Parameters: float getHorizontalViewAngle()>","<android.hardware.Camera$Parameters: float getHorizontalViewAngle()>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>"
"<android.graphics.ColorSpace: float[] toXyz(float,float,float)>","<android.graphics.ColorSpace: float[] toXyz(float,float,float)>"
"<android.view.View: void addFocusables(java.util.ArrayList,int)>","<android.view.View: void addFocusables(java.util.ArrayList,int)>"
"<android.view.MotionEvent: float getY()>","<android.view.MotionEvent: float getY()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)>"
"<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>","<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction show(android.app.Fragment)>"
"<java.lang.Byte: int hashCode(byte)>","<java.lang.Byte: int hashCode(byte)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>"
"<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.pm.PackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)>","<android.content.pm.PackageManager: java.lang.CharSequence getUserBadgedLabel(java.lang.CharSequence,android.os.UserHandle)>"
"<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>","<android.content.res.AssetManager: java.lang.String[] list(java.lang.String)>"
"<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>","<android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)>"
"<android.telephony.PreciseDataConnectionState: void <init>()>","<android.telephony.PreciseDataConnectionState: void <init>()>"
"<java.lang.Character: boolean isISOControl(int)>","<java.lang.Character: boolean isISOControl(int)>"
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>"
"<java.lang.invoke.VarHandle$AccessMode: java.lang.invoke.VarHandle$AccessMode[] values()>","<java.lang.invoke.VarHandle$AccessMode: java.lang.invoke.VarHandle$AccessMode[] values()>"
"<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>","<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>"
"<android.view.Window: void setReturnTransition(android.transition.Transition)>","<android.view.Window: void setReturnTransition(android.transition.Transition)>"
"<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.util.HashMap: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.media.AudioPresentation: boolean hasDialogueEnhancement()>","<android.media.AudioPresentation: boolean hasDialogueEnhancement()>"
"<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>","<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>"
"<android.view.ViewPropertyAnimator: void <init>()>","<android.view.ViewPropertyAnimator: void <init>()>"
"<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>","<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(int)>","<java.lang.StringBuffer: java.lang.StringBuffer append(int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.media.MediaPlayer: void release()>","<android.media.MediaPlayer: void release()>"
"<android.graphics.fonts.FontStyle: boolean equals(java.lang.Object)>","<android.graphics.fonts.FontStyle: boolean equals(java.lang.Object)>"
"<android.content.ServiceConnection: void onBindingDied(android.content.ComponentName)>","<android.content.ServiceConnection: void onBindingDied(android.content.ComponentName)>"
"<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>","<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>"
"<android.widget.RemoteViews$RemoteViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>","<android.widget.RemoteViews$RemoteViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>"
"<java.util.AbstractCollection: java.lang.Object[] toArray()>","<java.util.AbstractCollection: java.lang.Object[] toArray()>"
"<android.view.WindowInsets: boolean equals(java.lang.Object)>","<android.view.WindowInsets: boolean equals(java.lang.Object)>"
"<android.view.View: void setActivated(boolean)>","<android.view.View: void setActivated(boolean)>"
"<android.net.IpPrefix: boolean contains(java.net.InetAddress)>","<android.net.IpPrefix: boolean contains(java.net.InetAddress)>"
"<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>","<android.hardware.SensorEventListener: void onSensorChanged(android.hardware.SensorEvent)>"
"<android.os.BaseBundle: long getLong(java.lang.String)>","<android.os.BaseBundle: long getLong(java.lang.String)>"
"<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)>","<android.view.ActionProvider: void setVisibilityListener(android.view.ActionProvider$VisibilityListener)>"
"<java.lang.Number: void <init>()>","<java.lang.Number: void <init>()>"
"<java.util.NavigableSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>","<java.util.NavigableSet: java.util.NavigableSet headSet(java.lang.Object,boolean)>"
"<android.os.Parcel: void writeTypedObject(android.os.Parcelable,int)>","<android.os.Parcel: void writeTypedObject(android.os.Parcelable,int)>"
"<java.util.AbstractMap: boolean containsKey(java.lang.Object)>","<java.util.AbstractMap: boolean containsKey(java.lang.Object)>"
"<android.view.translation.ViewTranslationResponse: int describeContents()>","<android.view.translation.ViewTranslationResponse: int describeContents()>"
"<android.view.AttachedSurfaceControl: android.view.SurfaceControl$Transaction buildReparentTransaction(android.view.SurfaceControl)>","<android.view.AttachedSurfaceControl: android.view.SurfaceControl$Transaction buildReparentTransaction(android.view.SurfaceControl)>"
"<android.icu.util.ULocale$Category: void <init>(java.lang.String,int)>","<android.icu.util.ULocale$Category: void <init>(java.lang.String,int)>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>"
"<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>","<android.view.View: android.graphics.PorterDuff$Mode getForegroundTintMode()>"
"<java.lang.Character: boolean isUpperCase(int)>","<java.lang.Character: boolean isUpperCase(int)>"
"<java.nio.channels.SelectionKey: boolean isAcceptable()>","<java.nio.channels.SelectionKey: boolean isAcceptable()>"
"<android.widget.Toolbar: void setNavigationContentDescription(int)>","<android.widget.Toolbar: void setNavigationContentDescription(int)>"
"<java.lang.reflect.Executable: java.lang.String getName()>","<java.lang.reflect.Executable: java.lang.String getName()>"
"<android.view.contentcapture.ContentCaptureContext: java.lang.String toString()>","<android.view.contentcapture.ContentCaptureContext: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.util.Set)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.util.Set)>"
"<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.widget.ListView: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<android.graphics.Path: void addPath(android.graphics.Path)>","<android.graphics.Path: void addPath(android.graphics.Path)>"
"<java.util.stream.LongStream$Builder: java.util.stream.LongStream build()>","<java.util.stream.LongStream$Builder: java.util.stream.LongStream build()>"
"<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>","<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>"
"<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>","<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>"
"<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()>","<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()>"
"<android.graphics.BlendMode: void <clinit>()>","<android.graphics.BlendMode: void <clinit>()>"
"<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()>","<android.view.Display$HdrCapabilities: float getDesiredMaxLuminance()>"
"<android.view.animation.Animation: boolean getDetachWallpaper()>","<android.view.animation.Animation: boolean getDetachWallpaper()>"
"<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>","<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>"
"<android.view.animation.Animation: void setBackdropColor(int)>","<android.view.animation.Animation: void setBackdropColor(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>"
"<android.view.View: void setPivotY(float)>","<android.view.View: void setPivotY(float)>"
"<android.view.animation.Animation: void start()>","<android.view.animation.Animation: void start()>"
"<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int,int)>"
"<android.media.RemoteController$MetadataEditor: void <init>(android.media.RemoteController)>","<android.media.RemoteController$MetadataEditor: void <init>(android.media.RemoteController)>"
"<java.time.LocalTime: void <init>()>","<java.time.LocalTime: void <init>()>"
"<android.widget.TextView: int getMinWidth()>","<android.widget.TextView: int getMinWidth()>"
"<android.media.audiofx.AudioEffect$Descriptor: boolean equals(java.lang.Object)>","<android.media.audiofx.AudioEffect$Descriptor: boolean equals(java.lang.Object)>"
"<android.graphics.fonts.Font: int getTtcIndex()>","<android.graphics.fonts.Font: int getTtcIndex()>"
"<android.media.AudioAttributes: int getFlags()>","<android.media.AudioAttributes: int getFlags()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseXor(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseXor(java.lang.Object[])>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.os.Debug: void printLoadedClasses(int)>","<android.os.Debug: void printLoadedClasses(int)>"
"<android.app.ActivityManager: void setWatchHeapLimit(long)>","<android.app.ActivityManager: void setWatchHeapLimit(long)>"
"<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.media.AudioTrack: int setNotificationMarkerPosition(int)>","<android.media.AudioTrack: int setNotificationMarkerPosition(int)>"
"<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod normalized()>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod normalized()>"
"<android.hardware.Camera: void stopSmoothZoom()>","<android.hardware.Camera: void stopSmoothZoom()>"
"<android.view.View: boolean hasWindowFocus()>","<android.view.View: boolean hasWindowFocus()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)>"
"<android.util.ArrayMap: void <init>()>","<android.util.ArrayMap: void <init>()>"
"<java.io.FilterOutputStream: void close()>","<java.io.FilterOutputStream: void close()>"
"<android.app.FragmentManager: boolean isStateSaved()>","<android.app.FragmentManager: boolean isStateSaved()>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int,int)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int,int)>"
"<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>","<android.view.MenuItem: android.view.MenuItem setIntent(android.content.Intent)>"
"<java.time.LocalDateTime: int getDayOfYear()>","<java.time.LocalDateTime: int getDayOfYear()>"
"<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)>"
"<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>","<android.content.Context: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>"
"<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>","<java.util.function.ToIntFunction: int applyAsInt(java.lang.Object)>"
"<android.app.Fragment: android.content.res.Resources getResources()>","<android.app.Fragment: android.content.res.Resources getResources()>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()>","<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection getHints()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect()>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect()>"
"<android.graphics.Paint: void setTextScaleX(float)>","<android.graphics.Paint: void setTextScaleX(float)>"
"<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.widget.TextView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>","<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>"
"<android.view.translation.TranslationCapability: int getState()>","<android.view.translation.TranslationCapability: int getState()>"
"<android.media.AudioFormat$Builder: void <init>()>","<android.media.AudioFormat$Builder: void <init>()>"
"<android.view.View: boolean isHovered()>","<android.view.View: boolean isHovered()>"
"<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUid(int)>","<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder addMatchingUid(int)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setLocale(android.icu.util.ULocale)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setLocale(android.icu.util.ULocale)>"
"<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)>","<java.util.Collections: java.util.Set checkedSet(java.util.Set,java.lang.Class)>"
"<android.os.Message: android.os.Handler getTarget()>","<android.os.Message: android.os.Handler getTarget()>"
"<android.widget.AbsListView: int getTranscriptMode()>","<android.widget.AbsListView: int getTranscriptMode()>"
"<android.graphics.fonts.Font: java.lang.String toString()>","<android.graphics.fonts.Font: java.lang.String toString()>"
"<android.content.ContentProvider: android.content.AttributionSource getCallingAttributionSource()>","<android.content.ContentProvider: android.content.AttributionSource getCallingAttributionSource()>"
"<java.security.Provider: java.util.Enumeration elements()>","<java.security.Provider: java.util.Enumeration elements()>"
"<java.net.URI: int hashCode()>","<java.net.URI: int hashCode()>"
"<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>","<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>"
"<java.lang.UnsupportedOperationException: void <init>()>","<java.lang.UnsupportedOperationException: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>"
"<android.hardware.SensorManager: java.util.List getSensorList(int)>","<android.hardware.SensorManager: java.util.List getSensorList(int)>"
"<android.media.Rating: java.lang.String toString()>","<android.media.Rating: java.lang.String toString()>"
"<java.lang.invoke.VarHandle: void fullFence()>","<java.lang.invoke.VarHandle: void fullFence()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>"
"<java.util.Spliterator$OfDouble: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfDouble: void forEachRemaining(java.lang.Object)>"
"<android.media.MediaDescription: void writeToParcel(android.os.Parcel,int)>","<android.media.MediaDescription: void writeToParcel(android.os.Parcel,int)>"
"<java.time.chrono.ChronoLocalDate: long toEpochDay()>","<java.time.chrono.ChronoLocalDate: long toEpochDay()>"
"<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>","<android.content.pm.PackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>"
"<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>","<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>"
"<android.graphics.Paint: java.lang.String getFontFeatureSettings()>","<android.graphics.Paint: java.lang.String getFontFeatureSettings()>"
"<java.lang.Byte: double doubleValue()>","<java.lang.Byte: double doubleValue()>"
"<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>","<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>"
"<java.lang.Float: boolean isInfinite()>","<java.lang.Float: boolean isInfinite()>"
"<android.graphics.Paint: void setColor(long)>","<android.graphics.Paint: void setColor(long)>"
"<android.content.pm.PackageManager: android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String)>","<android.content.pm.PackageManager: android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String)>"
"<android.app.Activity: int getMaxNumPictureInPictureActions()>","<android.app.Activity: int getMaxNumPictureInPictureActions()>"
"<android.content.res.Resources: void flushLayoutCache()>","<android.content.res.Resources: void flushLayoutCache()>"
"<android.media.AudioTrack: int getNativeFrameCount()>","<android.media.AudioTrack: int getNativeFrameCount()>"
"<java.lang.String: void <clinit>()>","<java.lang.String: void <clinit>()>"
"<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>"
"<java.util.AbstractMap: java.util.Set keySet()>","<java.util.AbstractMap: java.util.Set keySet()>"
"<android.view.View: android.content.res.Resources getResources()>","<android.view.View: android.content.res.Resources getResources()>"
"<android.hardware.Sensor: int getMinDelay()>","<android.hardware.Sensor: int getMinDelay()>"
"<java.time.temporal.ChronoField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>","<java.time.temporal.ChronoField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
"<android.content.pm.PackageManager$Property: float getFloat()>","<android.content.pm.PackageManager$Property: float getFloat()>"
"<java.time.zone.ZoneRules: java.lang.String toString()>","<java.time.zone.ZoneRules: java.lang.String toString()>"
"<java.time.Period: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.Period: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<android.os.Parcel: void <clinit>()>","<android.os.Parcel: void <clinit>()>"
"<java.util.Collections: java.util.Set singleton(java.lang.Object)>","<java.util.Collections: java.util.Set singleton(java.lang.Object)>"
"<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.media.VolumeShaper: void replace(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation,boolean)>","<android.media.VolumeShaper: void replace(android.media.VolumeShaper$Configuration,android.media.VolumeShaper$Operation,boolean)>"
"<android.telephony.TelephonyManager: void registerTelephonyCallback(int,java.util.concurrent.Executor,android.telephony.TelephonyCallback)>","<android.telephony.TelephonyManager: void registerTelephonyCallback(int,java.util.concurrent.Executor,android.telephony.TelephonyCallback)>"
"<android.icu.util.ULocale$Category: void <clinit>()>","<android.icu.util.ULocale$Category: void <clinit>()>"
"<java.time.Duration: java.time.Duration plusSeconds(long)>","<java.time.Duration: java.time.Duration plusSeconds(long)>"
"<java.lang.Iterable: java.util.Iterator iterator()>","<java.lang.Iterable: java.util.Iterator iterator()>"
"<android.view.View: float getPivotY()>","<android.view.View: float getPivotY()>"
"<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>","<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>"
"<android.graphics.Matrix: void setSinCos(float,float,float,float)>","<android.graphics.Matrix: void setSinCos(float,float,float,float)>"
"<android.view.inputmethod.InputMethodSubtype: int describeContents()>","<android.view.inputmethod.InputMethodSubtype: int describeContents()>"
"<android.view.WindowManager$LayoutParams: void setFitInsetsIgnoringVisibility(boolean)>","<android.view.WindowManager$LayoutParams: void setFitInsetsIgnoringVisibility(boolean)>"
"<java.lang.String: int indexOf(java.lang.String)>","<java.lang.String: int indexOf(java.lang.String)>"
"<android.media.MediaDrm: boolean requiresSecureDecoder(java.lang.String)>","<android.media.MediaDrm: boolean requiresSecureDecoder(java.lang.String)>"
"<java.util.function.ObjLongConsumer: void accept(java.lang.Object,long)>","<java.util.function.ObjLongConsumer: void accept(java.lang.Object,long)>"
"<android.view.View: boolean dispatchNestedPreFling(float,float)>","<android.view.View: boolean dispatchNestedPreFling(float,float)>"
"<android.os.Bundle: void putByteArray(java.lang.String,byte[])>","<android.os.Bundle: void putByteArray(java.lang.String,byte[])>"
"<java.time.Duration: java.time.Duration withNanos(int)>","<java.time.Duration: java.time.Duration withNanos(int)>"
"<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model[] values()>","<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model[] values()>"
"<android.app.Fragment: boolean isHidden()>","<android.app.Fragment: boolean isHidden()>"
"<android.view.View: int getWindowVisibility()>","<android.view.View: int getWindowVisibility()>"
"<android.graphics.Bitmap: void setHasMipMap(boolean)>","<android.graphics.Bitmap: void setHasMipMap(boolean)>"
"<java.util.AbstractMap: void <init>()>","<java.util.AbstractMap: void <init>()>"
"<android.view.translation.TranslationResponseValue: boolean equals(java.lang.Object)>","<android.view.translation.TranslationResponseValue: boolean equals(java.lang.Object)>"
"<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>","<android.view.SurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>"
"<java.security.PrivilegedActionException: java.lang.String toString()>","<java.security.PrivilegedActionException: java.lang.String toString()>"
"<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>","<android.widget.TextView: void setHintTextColor(android.content.res.ColorStateList)>"
"<android.app.Activity: void setExitSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Activity: void setExitSharedElementCallback(android.app.SharedElementCallback)>"
"<android.content.Loader: void reset()>","<android.content.Loader: void reset()>"
"<java.util.Queue: java.lang.Object remove()>","<java.util.Queue: java.lang.Object remove()>"
"<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>","<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>"
"<android.widget.AbsListView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.widget.AbsListView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>","<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>"
"<android.app.Dialog: void setDismissMessage(android.os.Message)>","<android.app.Dialog: void setDismissMessage(android.os.Message)>"
"<android.content.ContextParams$Builder: void <init>(android.content.ContextParams)>","<android.content.ContextParams$Builder: void <init>(android.content.ContextParams)>"
"<java.lang.Double: long longValue()>","<java.lang.Double: long longValue()>"
"<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>","<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>"
"<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>","<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>"
"<java.lang.String: void <init>(java.lang.StringBuilder)>","<java.lang.String: void <init>(java.lang.StringBuilder)>"
"<java.lang.String: java.lang.String toString()>","<java.lang.String: java.lang.String toString()>"
"<android.content.Context: void clearWallpaper()>","<android.content.Context: void clearWallpaper()>"
"<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>","<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>"
"<java.lang.Character: int compareTo(java.lang.Object)>","<java.lang.Character: int compareTo(java.lang.Object)>"
"<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>","<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()>"
"<java.util.Set: boolean add(java.lang.Object)>","<java.util.Set: boolean add(java.lang.Object)>"
"<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>","<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>"
"<android.widget.RemoteViews: void setColorInt(int,java.lang.String,int,int)>","<android.widget.RemoteViews: void setColorInt(int,java.lang.String,int,int)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>"
"<java.time.DayOfWeek: long getLong(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: long getLong(java.time.temporal.TemporalField)>"
"<android.graphics.Rect: boolean contains(int,int)>","<android.graphics.Rect: boolean contains(int,int)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setCloseAction(android.app.RemoteAction)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setCloseAction(android.app.RemoteAction)>"
"<android.graphics.Paint: void setDither(boolean)>","<android.graphics.Paint: void setDither(boolean)>"
"<java.util.Arrays: int compareUnsigned(int[],int,int,int[],int,int)>","<java.util.Arrays: int compareUnsigned(int[],int,int,int[],int,int)>"
"<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>","<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.Arrays: void fill(char[],int,int,char)>","<java.util.Arrays: void fill(char[],int,int,char)>"
"<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>","<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>"
"<java.lang.String: void <init>(byte[],int,int,java.lang.String)>","<java.lang.String: void <init>(byte[],int,int,java.lang.String)>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>","<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>"
"<android.view.View: boolean hasFocusable()>","<android.view.View: boolean hasFocusable()>"
"<android.content.pm.PackageManager$Property: java.lang.String getPackageName()>","<android.content.pm.PackageManager$Property: java.lang.String getPackageName()>"
"<java.util.Arrays: int compare(short[],int,int,short[],int,int)>","<java.util.Arrays: int compare(short[],int,int,short[],int,int)>"
"<android.app.PendingIntent: int describeContents()>","<android.app.PendingIntent: int describeContents()>"
"<android.text.InputFilter$AllCaps: void <init>()>","<android.text.InputFilter$AllCaps: void <init>()>"
"<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>","<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>"
"<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>","<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>"
"<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>","<android.text.TextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>"
"<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>","<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>"
"<android.graphics.Typeface: int getWeight()>","<android.graphics.Typeface: int getWeight()>"
"<java.net.Socket: void bind(java.net.SocketAddress)>","<java.net.Socket: void bind(java.net.SocketAddress)>"
"<android.content.ContextWrapper: boolean isRestricted()>","<android.content.ContextWrapper: boolean isRestricted()>"
"<java.lang.reflect.Array: char getChar(java.lang.Object,int)>","<java.lang.reflect.Array: char getChar(java.lang.Object,int)>"
"<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>","<android.os.Bundle: android.os.IBinder getBinder(java.lang.String)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder replaceWith(java.lang.String)>"
"<android.os.Bundle: char getChar(java.lang.String,char)>","<android.os.Bundle: char getChar(java.lang.String,char)>"
"<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateDefaultLayoutParams()>","<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateDefaultLayoutParams()>"
"<android.app.PendingIntent: boolean isForegroundService()>","<android.app.PendingIntent: boolean isForegroundService()>"
"<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>","<java.security.AccessControlContext: void <init>(java.security.AccessControlContext,java.security.DomainCombiner)>"
"<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>","<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>"
"<java.util.concurrent.Semaphore: void release(int)>","<java.util.concurrent.Semaphore: void release(int)>"
"<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>","<android.widget.TextView: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>"
"<android.graphics.RenderNode: int getWidth()>","<android.graphics.RenderNode: int getWidth()>"
"<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>","<java.nio.file.attribute.FileTime: long 'to'(java.util.concurrent.TimeUnit)>"
"<java.util.HashSet: void <init>(java.util.Collection)>","<java.util.HashSet: void <init>(java.util.Collection)>"
"<android.content.ContentValues: java.lang.Object get(java.lang.String)>","<android.content.ContentValues: java.lang.Object get(java.lang.String)>"
"<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>","<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>"
"<android.graphics.Bitmap: boolean isRecycled()>","<android.graphics.Bitmap: boolean isRecycled()>"
"<android.widget.TextView: void append(java.lang.CharSequence)>","<android.widget.TextView: void append(java.lang.CharSequence)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArgumentsToMatch(java.lang.invoke.MethodHandle,int,java.util.List,int)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArgumentsToMatch(java.lang.invoke.MethodHandle,int,java.util.List,int)>"
"<android.view.animation.Animation: void setFillAfter(boolean)>","<android.view.animation.Animation: void setFillAfter(boolean)>"
"<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<java.util.Arrays: boolean equals(double[],double[])>","<java.util.Arrays: boolean equals(double[],double[])>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType dropParameterTypes(int,int)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType dropParameterTypes(int,int)>"
"<java.util.stream.IntStream: java.util.OptionalInt findAny()>","<java.util.stream.IntStream: java.util.OptionalInt findAny()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)>"
"<android.hardware.Camera$AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)>","<android.hardware.Camera$AutoFocusCallback: void onAutoFocus(boolean,android.hardware.Camera)>"
"<android.graphics.text.MeasuredText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>","<android.graphics.text.MeasuredText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>"
"<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream$Builder add(double)>","<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream$Builder add(double)>"
"<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>","<java.nio.LongBuffer: java.nio.LongBuffer get(long[],int,int)>"
"<android.view.Window: void setLocalFocus(boolean,boolean)>","<android.view.Window: void setLocalFocus(boolean,boolean)>"
"<java.lang.Integer: java.lang.String toUnsignedString(int,int)>","<java.lang.Integer: java.lang.String toUnsignedString(int,int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<android.hardware.Camera$Parameters: boolean isZoomSupported()>","<android.hardware.Camera$Parameters: boolean isZoomSupported()>"
"<android.view.ViewGroup: void dispatchSetActivated(boolean)>","<android.view.ViewGroup: void dispatchSetActivated(boolean)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordStartIndex(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder setRelativeSuggestedWordStartIndex(int)>"
"<android.graphics.Paint: void setAntiAlias(boolean)>","<android.graphics.Paint: void setAntiAlias(boolean)>"
"<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>","<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>"
"<java.lang.Integer: int parseInt(java.lang.String,int)>","<java.lang.Integer: int parseInt(java.lang.String,int)>"
"<android.view.MenuItem: void setShowAsAction(int)>","<android.view.MenuItem: void setShowAsAction(int)>"
"<android.widget.RemoteViews: void removeAllViews(int)>","<android.widget.RemoteViews: void removeAllViews(int)>"
"<android.media.session.PlaybackState: void <init>()>","<android.media.session.PlaybackState: void <init>()>"
"<android.net.SocketKeepalive: void close()>","<android.net.SocketKeepalive: void close()>"
"<android.os.Parcel: void writeTypedSparseArray(android.util.SparseArray,int)>","<android.os.Parcel: void writeTypedSparseArray(android.util.SparseArray,int)>"
"<android.view.View: void forceHasOverlappingRendering(boolean)>","<android.view.View: void forceHasOverlappingRendering(boolean)>"
"<android.content.ContentProviderClient: void close()>","<android.content.ContentProviderClient: void close()>"
"<java.io.FileOutputStream: void <init>(java.lang.String)>","<java.io.FileOutputStream: void <init>(java.lang.String)>"
"<android.widget.TextView: void setMaxWidth(int)>","<android.widget.TextView: void setMaxWidth(int)>"
"<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator andThen(java.util.function.IntUnaryOperator)>","<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator andThen(java.util.function.IntUnaryOperator)>"
"<java.util.Random: int next(int)>","<java.util.Random: int next(int)>"
"<android.graphics.drawable.BitmapDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.BitmapDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<java.time.LocalTime: java.time.LocalTime plusMinutes(long)>","<java.time.LocalTime: java.time.LocalTime plusMinutes(long)>"
"<android.net.ProxyInfo: int hashCode()>","<android.net.ProxyInfo: int hashCode()>"
"<java.io.File: long getFreeSpace()>","<java.io.File: long getFreeSpace()>"
"<java.nio.CharBuffer: java.nio.Buffer rewind()>","<java.nio.CharBuffer: java.nio.Buffer rewind()>"
"<android.view.View: void dispatchDrawableHotspotChanged(float,float)>","<android.view.View: void dispatchDrawableHotspotChanged(float,float)>"
"<android.graphics.drawable.LayerDrawable: int getStartPadding()>","<android.graphics.drawable.LayerDrawable: int getStartPadding()>"
"<java.text.Format: java.lang.Object clone()>","<java.text.Format: java.lang.Object clone()>"
"<android.view.View: void setRenderEffect(android.graphics.RenderEffect)>","<android.view.View: void setRenderEffect(android.graphics.RenderEffect)>"
"<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>","<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>"
"<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float)>","<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float)>"
"<android.view.Window: void setStatusBarColor(int)>","<android.view.Window: void setStatusBarColor(int)>"
"<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>","<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>"
"<android.util.Log: int wtf(java.lang.String,java.lang.String)>","<android.util.Log: int wtf(java.lang.String,java.lang.String)>"
"<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>","<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>"
"<java.nio.channels.Channel: void close()>","<java.nio.channels.Channel: void close()>"
"<android.hardware.camera2.CaptureFailure: int getReason()>","<android.hardware.camera2.CaptureFailure: int getReason()>"
"<android.media.Rating: android.media.Rating newStarRating(int,float)>","<android.media.Rating: android.media.Rating newStarRating(int,float)>"
"<java.lang.ref.Reference: java.lang.Object get()>","<java.lang.ref.Reference: java.lang.Object get()>"
"<java.lang.Character: char toUpperCase(char)>","<java.lang.Character: char toUpperCase(char)>"
"<android.os.PatternMatcher: java.lang.String getPath()>","<android.os.PatternMatcher: java.lang.String getPath()>"
"<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>","<android.app.Activity: void onRestoreInstanceState(android.os.Bundle)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class[])>"
"<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()>","<android.telephony.TelephonyManager: int getCarrierIdFromSimMccMnc()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)>"
"<android.view.textclassifier.ConversationActions: java.lang.String getId()>","<android.view.textclassifier.ConversationActions: java.lang.String getId()>"
"<java.time.Period: boolean isZero()>","<java.time.Period: boolean isZero()>"
"<android.view.View: float getRotationY()>","<android.view.View: float getRotationY()>"
"<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>","<android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)>"
"<android.view.animation.Animation: void cancel()>","<android.view.animation.Animation: void cancel()>"
"<android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>","<android.view.DisplayCutout: void <init>(android.graphics.Rect,java.util.List)>"
"<android.view.MotionEvent: float getTouchMinor(int)>","<android.view.MotionEvent: float getTouchMinor(int)>"
"<java.util.IntSummaryStatistics: double getAverage()>","<java.util.IntSummaryStatistics: double getAverage()>"
"<java.time.chrono.ChronoPeriod: boolean isZero()>","<java.time.chrono.ChronoPeriod: boolean isZero()>"
"<java.util.concurrent.TimeUnit: long toSeconds(long)>","<java.util.concurrent.TimeUnit: long toSeconds(long)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.graphics.drawable.LayerDrawable: int getLayerHeight(int)>","<android.graphics.drawable.LayerDrawable: int getLayerHeight(int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])>"
"<java.security.CodeSigner: java.lang.String toString()>","<java.security.CodeSigner: java.lang.String toString()>"
"<android.util.LongSparseArray: void put(long,java.lang.Object)>","<android.util.LongSparseArray: void put(long,java.lang.Object)>"
"<android.hardware.Camera: void stopFaceDetection()>","<android.hardware.Camera: void stopFaceDetection()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor clear()>"
"<android.graphics.RenderNode: int getSpotShadowColor()>","<android.graphics.RenderNode: int getSpotShadowColor()>"
"<android.widget.AbsListView: int pointToPosition(int,int)>","<android.widget.AbsListView: int pointToPosition(int,int)>"
"<android.media.AudioManager: int getRouting(int)>","<android.media.AudioManager: int getRouting(int)>"
"<android.view.ViewDebug: void <init>()>","<android.view.ViewDebug: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)>","<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)>"
"<android.view.View: int[] onCreateDrawableState(int)>","<android.view.View: int[] onCreateDrawableState(int)>"
"<android.graphics.fonts.FontVariationAxis: java.lang.String toString()>","<android.graphics.fonts.FontVariationAxis: java.lang.String toString()>"
"<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>","<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>"
"<java.security.cert.CertificateEncodingException: void <init>()>","<java.security.cert.CertificateEncodingException: void <init>()>"
"<android.app.FragmentTransaction: void commitNowAllowingStateLoss()>","<android.app.FragmentTransaction: void commitNowAllowingStateLoss()>"
"<android.telephony.TelephonyManager: java.lang.String getManufacturerCode()>","<android.telephony.TelephonyManager: java.lang.String getManufacturerCode()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer put(char[],int,int)>"
"<java.net.Socket: boolean isBound()>","<java.net.Socket: boolean isBound()>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setAttributionTag(java.lang.String)>","<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setAttributionTag(java.lang.String)>"
"<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>","<android.app.TaskStackBuilder: void startActivities(android.os.Bundle)>"
"<java.util.Spliterator: java.util.Comparator getComparator()>","<java.util.Spliterator: java.util.Comparator getComparator()>"
"<java.util.function.Function: java.util.function.Function compose(java.util.function.Function)>","<java.util.function.Function: java.util.function.Function compose(java.util.function.Function)>"
"<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.Consumer)>","<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.Consumer)>"
"<android.media.AudioRecord: boolean setPreferredMicrophoneFieldDimension(float)>","<android.media.AudioRecord: boolean setPreferredMicrophoneFieldDimension(float)>"
"<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>","<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>"
"<android.widget.AbsListView: void deferNotifyDataSetChanged()>","<android.widget.AbsListView: void deferNotifyDataSetChanged()>"
"<java.io.PrintStream: void <init>(java.io.OutputStream)>","<java.io.PrintStream: void <init>(java.io.OutputStream)>"
"<android.view.WindowManager$LayoutParams: java.lang.String toString()>","<android.view.WindowManager$LayoutParams: java.lang.String toString()>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureFailure)>"
"<android.view.View: void setAnimation(android.view.animation.Animation)>","<android.view.View: void setAnimation(android.view.animation.Animation)>"
"<java.lang.StringBuilder: int capacity()>","<java.lang.StringBuilder: int capacity()>"
"<android.net.NetworkCapabilities: int[] getCapabilities()>","<android.net.NetworkCapabilities: int[] getCapabilities()>"
"<java.lang.invoke.MethodHandleInfo: boolean refKindIsValid(int)>","<java.lang.invoke.MethodHandleInfo: boolean refKindIsValid(int)>"
"<android.media.AudioMetadata: android.media.AudioMetadataMap createMap()>","<android.media.AudioMetadata: android.media.AudioMetadataMap createMap()>"
"<java.lang.Math: float signum(float)>","<java.lang.Math: float signum(float)>"
"<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>","<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>"
"<android.media.Session2Token: void writeToParcel(android.os.Parcel,int)>","<android.media.Session2Token: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Math: long addExact(long,long)>","<java.lang.Math: long addExact(long,long)>"
"<android.content.pm.ModuleInfo: java.lang.String toString()>","<android.content.pm.ModuleInfo: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>","<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>"
"<android.view.ViewGroup: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>","<android.view.ViewGroup: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>"
"<java.util.Collection: java.util.stream.Stream parallelStream()>","<java.util.Collection: java.util.stream.Stream parallelStream()>"
"<java.time.OffsetTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String)>"
"<java.time.Period: java.time.Period between(java.time.LocalDate,java.time.LocalDate)>","<java.time.Period: java.time.Period between(java.time.LocalDate,java.time.LocalDate)>"
"<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)>","<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)>"
"<java.net.Socket: boolean isClosed()>","<java.net.Socket: boolean isClosed()>"
"<android.hardware.camera2.params.MultiResolutionStreamInfo: java.lang.String getPhysicalCameraId()>","<android.hardware.camera2.params.MultiResolutionStreamInfo: java.lang.String getPhysicalCameraId()>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>","<java.nio.file.attribute.BasicFileAttributes: boolean isSymbolicLink()>"
"<android.net.RouteInfo: boolean matches(java.net.InetAddress)>","<android.net.RouteInfo: boolean matches(java.net.InetAddress)>"
"<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>","<android.graphics.fonts.FontVariationAxis: android.graphics.fonts.FontVariationAxis[] fromFontVariationSettings(java.lang.String)>"
"<java.nio.channels.SelectionKey: int readyOps()>","<java.nio.channels.SelectionKey: int readyOps()>"
"<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>","<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>"
"<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>","<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyAddress(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyAddress(java.lang.String)>"
"<java.util.Deque: java.lang.Object peekFirst()>","<java.util.Deque: java.lang.Object peekFirst()>"
"<java.lang.Math: int toIntExact(long)>","<java.lang.Math: int toIntExact(long)>"
"<android.animation.ValueAnimator: long getStartDelay()>","<android.animation.ValueAnimator: long getStartDelay()>"
"<android.graphics.RecordingCanvas: void drawRGB(int,int,int)>","<android.graphics.RecordingCanvas: void drawRGB(int,int,int)>"
"<android.view.MotionEvent: float getXPrecision()>","<android.view.MotionEvent: float getXPrecision()>"
"<java.lang.Class: java.lang.Class[] getDeclaredClasses()>","<java.lang.Class: java.lang.Class[] getDeclaredClasses()>"
"<java.time.LocalDate: int getMonthValue()>","<java.time.LocalDate: int getMonthValue()>"
"<android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)>","<android.hardware.camera2.CameraManager: void setTorchMode(java.lang.String,boolean)>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureProcessStarted(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest)>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureProcessStarted(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest)>"
"<android.view.View: void dispatchFinishTemporaryDetach()>","<android.view.View: void dispatchFinishTemporaryDetach()>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayCountry(android.icu.util.ULocale)>"
"<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>","<android.hardware.camera2.params.OutputConfiguration: java.util.List getSurfaces()>"
"<java.util.OptionalLong: long orElseThrow(java.util.function.Supplier)>","<java.util.OptionalLong: long orElseThrow(java.util.function.Supplier)>"
"<android.app.assist.AssistContent: void setStructuredData(java.lang.String)>","<android.app.assist.AssistContent: void setStructuredData(java.lang.String)>"
"<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>","<java.nio.ByteBuffer: int compareTo(java.nio.ByteBuffer)>"
"<java.security.PrivilegedAction: java.lang.Object run()>","<java.security.PrivilegedAction: java.lang.Object run()>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setText(java.lang.CharSequence)>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setText(java.lang.CharSequence)>"
"<android.text.Spanned: int getSpanStart(java.lang.Object)>","<android.text.Spanned: int getSpanStart(java.lang.Object)>"
"<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>","<android.transition.PathMotion: android.graphics.Path getPath(float,float,float,float)>"
"<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>","<android.app.Activity: void onRequestPermissionsResult(int,java.lang.String[],int[])>"
"<android.media.VolumeProvider: void onSetVolumeTo(int)>","<android.media.VolumeProvider: void onSetVolumeTo(int)>"
"<android.widget.TextView: void setTextSelectHandleLeft(int)>","<android.widget.TextView: void setTextSelectHandleLeft(int)>"
"<android.graphics.ColorSpace$Rgb: float[] getTransform()>","<android.graphics.ColorSpace$Rgb: float[] getTransform()>"
"<android.animation.Animator: void setupEndValues()>","<android.animation.Animator: void setupEndValues()>"
"<android.animation.ValueAnimator: void pause()>","<android.animation.ValueAnimator: void pause()>"
"<android.graphics.Canvas$EdgeType: void <clinit>()>","<android.graphics.Canvas$EdgeType: void <clinit>()>"
"<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>","<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>"
"<android.content.ContextWrapper: boolean stopService(android.content.Intent)>","<android.content.ContextWrapper: boolean stopService(android.content.Intent)>"
"<android.content.ContentValues: int hashCode()>","<android.content.ContentValues: int hashCode()>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.Toolbar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle exactInvoker(java.lang.invoke.MethodType)>"
"<android.content.pm.PackageManager$Property: java.lang.String getName()>","<android.content.pm.PackageManager$Property: java.lang.String getName()>"
"<android.database.Cursor: boolean isNull(int)>","<android.database.Cursor: boolean isNull(int)>"
"<android.media.MediaPlayer$OnDrmInfoListener: void onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer$DrmInfo)>","<android.media.MediaPlayer$OnDrmInfoListener: void onDrmInfo(android.media.MediaPlayer,android.media.MediaPlayer$DrmInfo)>"
"<java.util.Arrays: int mismatch(double[],double[])>","<java.util.Arrays: int mismatch(double[],double[])>"
"<java.util.concurrent.TimeUnit: java.time.temporal.ChronoUnit toChronoUnit()>","<java.util.concurrent.TimeUnit: java.time.temporal.ChronoUnit toChronoUnit()>"
"<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>","<android.util.AttributeSet: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>"
"<android.os.Message: int describeContents()>","<android.os.Message: int describeContents()>"
"<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>","<android.content.ClipData: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>","<android.graphics.Paint: int getOffsetForAdvance(char[],int,int,int,int,boolean,float)>"
"<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>","<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>"
"<java.net.InetSocketAddress: java.lang.String toString()>","<java.net.InetSocketAddress: java.lang.String toString()>"
"<android.widget.AbsListView: int getBottomPaddingOffset()>","<android.widget.AbsListView: int getBottomPaddingOffset()>"
"<android.app.VoiceInteractor$Request: void onDetached()>","<android.app.VoiceInteractor$Request: void onDetached()>"
"<android.graphics.RenderNode: boolean hasShadow()>","<android.graphics.RenderNode: boolean hasShadow()>"
"<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence)>","<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.os.OutcomeReceiver: void onError(java.lang.Throwable)>","<android.os.OutcomeReceiver: void onError(java.lang.Throwable)>"
"<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>","<android.app.ActionBar: void setDisplayShowCustomEnabled(boolean)>"
"<android.os.Parcel: void setPropagateAllowBlocking()>","<android.os.Parcel: void setPropagateAllowBlocking()>"
"<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>","<android.widget.EditText: void setText(java.lang.CharSequence,android.widget.TextView$BufferType)>"
"<android.hardware.Camera$Parameters: java.util.List getFocusAreas()>","<android.hardware.Camera$Parameters: java.util.List getFocusAreas()>"
"<android.util.LongSparseArray: java.lang.Object get(long)>","<android.util.LongSparseArray: java.lang.Object get(long)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>"
"<android.media.VolumeShaper$Configuration: float[] getTimes()>","<android.media.VolumeShaper$Configuration: float[] getTimes()>"
"<android.graphics.RectF: java.lang.String toShortString()>","<android.graphics.RectF: java.lang.String toShortString()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[],int,int)>"
"<android.app.Fragment$SavedState: int describeContents()>","<android.app.Fragment$SavedState: int describeContents()>"
"<android.view.Window: android.transition.TransitionManager getTransitionManager()>","<android.view.Window: android.transition.TransitionManager getTransitionManager()>"
"<android.graphics.Rect: void set(android.graphics.Rect)>","<android.graphics.Rect: void set(android.graphics.Rect)>"
"<android.media.Image: int getWidth()>","<android.media.Image: int getWidth()>"
"<android.graphics.RecordingCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>"
"<android.hardware.camera2.params.MultiResolutionStreamInfo: void <init>(int,int,java.lang.String)>","<android.hardware.camera2.params.MultiResolutionStreamInfo: void <init>(int,int,java.lang.String)>"
"<java.nio.channels.Pipe: java.nio.channels.Pipe$SinkChannel sink()>","<java.nio.channels.Pipe: java.nio.channels.Pipe$SinkChannel sink()>"
"<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.view.View: long getUniqueDrawingId()>","<android.view.View: long getUniqueDrawingId()>"
"<android.accounts.Account: void <init>(android.os.Parcel)>","<android.accounts.Account: void <init>(android.os.Parcel)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getMax()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setUsage(int)>"
"<java.lang.Thread: void <init>(java.lang.String)>","<java.lang.Thread: void <init>(java.lang.String)>"
"<java.time.ZoneOffset: java.time.ZoneOffset 'from'(java.time.temporal.TemporalAccessor)>","<java.time.ZoneOffset: java.time.ZoneOffset 'from'(java.time.temporal.TemporalAccessor)>"
"<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>","<java.lang.Long: java.lang.Long getLong(java.lang.String,long)>"
"<android.view.InputDevice$MotionRange: float getMin()>","<android.view.InputDevice$MotionRange: float getMin()>"
"<java.lang.Character: boolean isISOControl(char)>","<java.lang.Character: boolean isISOControl(char)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>"
"<java.lang.Thread: void <init>(java.lang.Runnable)>","<java.lang.Thread: void <init>(java.lang.Runnable)>"
"<android.icu.util.ULocale: java.util.Iterator getKeywords(java.lang.String)>","<android.icu.util.ULocale: java.util.Iterator getKeywords(java.lang.String)>"
"<android.media.session.MediaController: int getRatingType()>","<android.media.session.MediaController: int getRatingType()>"
"<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)>","<android.widget.AbsListView: void smoothScrollToPositionFromTop(int,int)>"
"<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>","<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActionBar: android.app.ActionBar$Tab getSelectedTab()>","<android.app.ActionBar: android.app.ActionBar$Tab getSelectedTab()>"
"<java.util.Collections: void sort(java.util.List,java.util.Comparator)>","<java.util.Collections: void sort(java.util.List,java.util.Comparator)>"
"<java.time.DayOfWeek: java.time.DayOfWeek plus(long)>","<java.time.DayOfWeek: java.time.DayOfWeek plus(long)>"
"<android.content.ComponentName: android.content.ComponentName createRelative(java.lang.String,java.lang.String)>","<android.content.ComponentName: android.content.ComponentName createRelative(java.lang.String,java.lang.String)>"
"<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.widget.TextView: int computeVerticalScrollRange()>","<android.widget.TextView: int computeVerticalScrollRange()>"
"<android.os.Handler: void removeMessages(int)>","<android.os.Handler: void removeMessages(int)>"
"<android.content.DialogInterface: void cancel()>","<android.content.DialogInterface: void cancel()>"
"<android.telephony.BarringInfo$BarringServiceInfo: int hashCode()>","<android.telephony.BarringInfo$BarringServiceInfo: int hashCode()>"
"<android.view.View: void offsetLeftAndRight(int)>","<android.view.View: void offsetLeftAndRight(int)>"
"<java.lang.Class: java.lang.Package getPackage()>","<java.lang.Class: java.lang.Package getPackage()>"
"<android.view.WindowId: int describeContents()>","<android.view.WindowId: int describeContents()>"
"<android.media.MediaPlayer$OnVideoSizeChangedListener: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>","<android.media.MediaPlayer$OnVideoSizeChangedListener: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>"
"<android.os.Debug$InstructionCount: boolean resetAndStart()>","<android.os.Debug$InstructionCount: boolean resetAndStart()>"
"<android.view.View: int getPaddingEnd()>","<android.view.View: int getPaddingEnd()>"
"<android.media.MediaMetadataEditor: void addEditableKey(int)>","<android.media.MediaMetadataEditor: void addEditableKey(int)>"
"<android.os.Handler: boolean post(java.lang.Runnable)>","<android.os.Handler: boolean post(java.lang.Runnable)>"
"<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<java.util.Collections: java.util.SortedSet emptySortedSet()>","<java.util.Collections: java.util.SortedSet emptySortedSet()>"
"<android.widget.MediaController: void show(int)>","<android.widget.MediaController: void show(int)>"
"<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>","<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>"
"<android.graphics.Color: android.graphics.Color valueOf(float,float,float)>","<android.graphics.Color: android.graphics.Color valueOf(float,float,float)>"
"<android.view.autofill.AutofillValue: boolean isText()>","<android.view.autofill.AutofillValue: boolean isText()>"
"<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setFlags(int,int)>","<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes$Builder setFlags(int,int)>"
"<java.time.chrono.ChronoLocalDate: java.lang.String toString()>","<java.time.chrono.ChronoLocalDate: java.lang.String toString()>"
"<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()>","<android.media.AudioFocusRequest: android.media.AudioAttributes getAudioAttributes()>"
"<java.nio.channels.SelectionKey: boolean isReadable()>","<java.nio.channels.SelectionKey: boolean isReadable()>"
"<java.lang.Package: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int,int)>"
"<java.lang.Boolean: boolean logicalOr(boolean,boolean)>","<java.lang.Boolean: boolean logicalOr(boolean,boolean)>"
"<java.util.stream.LongStream: long[] toArray()>","<java.util.stream.LongStream: long[] toArray()>"
"<android.util.SparseBooleanArray: int size()>","<android.util.SparseBooleanArray: int size()>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>"
"<android.graphics.RectF: void setEmpty()>","<android.graphics.RectF: void setEmpty()>"
"<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>","<java.nio.channels.SelectableChannel: java.lang.Object blockingLock()>"
"<android.content.Context: void sendBroadcast(android.content.Intent)>","<android.content.Context: void sendBroadcast(android.content.Intent)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderTitle(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream sorted()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream sorted()>"
"<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>","<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)>"
"<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>","<java.lang.reflect.Array: void setLong(java.lang.Object,int,long)>"
"<java.util.stream.IntStream: java.util.IntSummaryStatistics summaryStatistics()>","<java.util.stream.IntStream: java.util.IntSummaryStatistics summaryStatistics()>"
"<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)>","<android.content.IntentFilter: void addDataSchemeSpecificPart(java.lang.String,int)>"
"<java.util.Map: boolean containsKey(java.lang.Object)>","<java.util.Map: boolean containsKey(java.lang.Object)>"
"<java.util.Arrays: int hashCode(char[])>","<java.util.Arrays: int hashCode(char[])>"
"<android.media.AudioRecord: boolean setPreferredDevice(android.media.AudioDeviceInfo)>","<android.media.AudioRecord: boolean setPreferredDevice(android.media.AudioDeviceInfo)>"
"<android.animation.Animator: java.lang.Object clone()>","<android.animation.Animator: java.lang.Object clone()>"
"<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>","<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>"
"<java.util.Arrays: byte[] copyOf(byte[],int)>","<java.util.Arrays: byte[] copyOf(byte[],int)>"
"<java.time.chrono.ChronoLocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.chrono.ChronoLocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.util.Optional: java.util.Optional flatMap(java.util.function.Function)>","<java.util.Optional: java.util.Optional flatMap(java.util.function.Function)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime of(int,int,int,int,int,int,int,java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime of(int,int,int,int,int,int,int,java.time.ZoneOffset)>"
"<android.content.ContextWrapper: android.content.Context createContext(android.content.ContextParams)>","<android.content.ContextWrapper: android.content.Context createContext(android.content.ContextParams)>"
"<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>","<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>"
"<android.graphics.Rect: void <init>(int,int,int,int)>","<android.graphics.Rect: void <init>(int,int,int,int)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.Chronology getChronology()>","<java.time.chrono.ChronoPeriod: java.time.chrono.Chronology getChronology()>"
"<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>","<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)>"
"<android.view.RoundedCorner: void <init>(int,int,int,int)>","<android.view.RoundedCorner: void <init>(int,int,int,int)>"
"<android.view.RoundedCorner: int hashCode()>","<android.view.RoundedCorner: int hashCode()>"
"<android.content.LocusId: int describeContents()>","<android.content.LocusId: int describeContents()>"
"<java.util.Optional: java.util.Optional map(java.util.function.Function)>","<java.util.Optional: java.util.Optional map(java.util.function.Function)>"
"<java.lang.Math: double asin(double)>","<java.lang.Math: double asin(double)>"
"<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>","<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)>"
"<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()>","<android.media.session.MediaController: java.lang.CharSequence getQueueTitle()>"
"<java.lang.Class: java.lang.String toGenericString()>","<java.lang.Class: java.lang.String toGenericString()>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextCursorDrawable()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextCursorDrawable()>"
"<android.view.MenuItem: java.lang.CharSequence getTitle()>","<android.view.MenuItem: java.lang.CharSequence getTitle()>"
"<java.text.AttributedCharacterIterator$Attribute: void <init>(java.lang.String)>","<java.text.AttributedCharacterIterator$Attribute: void <init>(java.lang.String)>"
"<android.content.Context: java.lang.String getPackageCodePath()>","<android.content.Context: java.lang.String getPackageCodePath()>"
"<java.util.SortedMap: java.util.Comparator comparator()>","<java.util.SortedMap: java.util.Comparator comparator()>"
"<android.media.AudioTrack: int setVolume(float)>","<android.media.AudioTrack: int setVolume(float)>"
"<android.graphics.RecordingCanvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>"
"<android.graphics.Region: boolean isRect()>","<android.graphics.Region: boolean isRect()>"
"<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long)>","<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long)>"
"<android.graphics.drawable.Drawable: void setDither(boolean)>","<android.graphics.drawable.Drawable: void setDither(boolean)>"
"<java.util.Properties: java.util.Enumeration propertyNames()>","<java.util.Properties: java.util.Enumeration propertyNames()>"
"<android.net.LinkProperties: void setMtu(int)>","<android.net.LinkProperties: void setMtu(int)>"
"<java.time.LocalDateTime: int getDayOfMonth()>","<java.time.LocalDateTime: int getDayOfMonth()>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>"
"<android.graphics.Path: void offset(float,float)>","<android.graphics.Path: void offset(float,float)>"
"<android.media.MediaDrm: byte[] openSession(int)>","<android.media.MediaDrm: byte[] openSession(int)>"
"<java.nio.IntBuffer: void <init>()>","<java.nio.IntBuffer: void <init>()>"
"<android.view.View: int getBaseline()>","<android.view.View: int getBaseline()>"
"<android.content.pm.PackageInstaller$Session: void close()>","<android.content.pm.PackageInstaller$Session: void close()>"
"<android.view.InputEvent: int describeContents()>","<android.view.InputEvent: int describeContents()>"
"<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>"
"<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>","<android.app.FragmentManager: android.app.Fragment findFragmentById(int)>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],double)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],double)>"
"<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>","<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>"
"<android.os.Debug: void resetThreadExternalAllocSize()>","<android.os.Debug: void resetThreadExternalAllocSize()>"
"<android.content.ClipDescription: int getMimeTypeCount()>","<android.content.ClipDescription: int getMimeTypeCount()>"
"<android.widget.TextView: void setMaxEms(int)>","<android.widget.TextView: void setMaxEms(int)>"
"<android.media.MediaDrm$OnEventListener: void onEvent(android.media.MediaDrm,byte[],int,int,byte[])>","<android.media.MediaDrm$OnEventListener: void onEvent(android.media.MediaDrm,byte[],int,int,byte[])>"
"<java.util.IntSummaryStatistics: long getCount()>","<java.util.IntSummaryStatistics: long getCount()>"
"<java.lang.ArithmeticException: void <init>()>","<java.lang.ArithmeticException: void <init>()>"
"<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>","<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>"
"<android.app.Person: void <init>()>","<android.app.Person: void <init>()>"
"<java.nio.channels.NetworkChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.NetworkChannel: java.net.SocketAddress getLocalAddress()>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setDefaultLocales(android.os.LocaleList)>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setDefaultLocales(android.os.LocaleList)>"
"<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>","<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>"
"<java.util.regex.Matcher: int start(java.lang.String)>","<java.util.regex.Matcher: int start(java.lang.String)>"
"<android.content.ContentResolver: void notifyChange(java.util.Collection,android.database.ContentObserver,int)>","<android.content.ContentResolver: void notifyChange(java.util.Collection,android.database.ContentObserver,int)>"
"<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<java.nio.file.WatchEvent$Kind: java.lang.Class type()>","<java.nio.file.WatchEvent$Kind: java.lang.Class type()>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(java.lang.String)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmapContentUri(java.lang.String)>"
"<android.content.ContextWrapper: void setTheme(int)>","<android.content.ContextWrapper: void setTheme(int)>"
"<android.view.SurfaceControl$Builder: void <init>()>","<android.view.SurfaceControl$Builder: void <init>()>"
"<android.media.AudioTrack: int write(byte[],int,int,int)>","<android.media.AudioTrack: int write(byte[],int,int,int)>"
"<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation[] values()>","<android.graphics.ColorSpace$Adaptation: android.graphics.ColorSpace$Adaptation[] values()>"
"<android.graphics.Paint: boolean hasGlyph(java.lang.String)>","<android.graphics.Paint: boolean hasGlyph(java.lang.String)>"
"<android.view.animation.Animation: long getDuration()>","<android.view.animation.Animation: long getDuration()>"
"<java.time.LocalDateTime: java.time.LocalDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.LocalDateTime: java.time.LocalDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.telephony.data.ApnSetting: void <init>()>","<android.telephony.data.ApnSetting: void <init>()>"
"<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>","<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>"
"<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>","<android.content.pm.PackageManager: void removePackageFromPreferred(java.lang.String)>"
"<android.content.pm.PackageManager: android.content.pm.ChangedPackages getChangedPackages(int)>","<android.content.pm.PackageManager: android.content.pm.ChangedPackages getChangedPackages(int)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(java.lang.Class)>"
"<android.graphics.drawable.Icon$OnDrawableLoadedListener: void onDrawableLoaded(android.graphics.drawable.Drawable)>","<android.graphics.drawable.Icon$OnDrawableLoadedListener: void onDrawableLoaded(android.graphics.drawable.Drawable)>"
"<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>","<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>"
"<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProvider)>","<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProvider)>"
"<android.content.DialogInterface: void dismiss()>","<android.content.DialogInterface: void dismiss()>"
"<java.time.chrono.Chronology: int prolepticYear(java.time.chrono.Era,int)>","<java.time.chrono.Chronology: int prolepticYear(java.time.chrono.Era,int)>"
"<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>","<android.content.pm.PackageManager: boolean removeWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)>"
"<android.graphics.Paint: long getShadowLayerColorLong()>","<android.graphics.Paint: long getShadowLayerColorLong()>"
"<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()>","<android.view.textclassifier.ConversationActions$Request: java.util.List getConversation()>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayScript(android.icu.util.ULocale)>"
"<android.media.Rating: boolean hasHeart()>","<android.media.Rating: boolean hasHeart()>"
"<android.content.Intent: android.content.Intent setFlags(int)>","<android.content.Intent: android.content.Intent setFlags(int)>"
"<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>","<android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>"
"<android.net.IpSecManager: android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress)>","<android.net.IpSecManager: android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress)>"
"<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>","<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>"
"<android.text.Spanned: int getSpanEnd(java.lang.Object)>","<android.text.Spanned: int getSpanEnd(java.lang.Object)>"
"<java.time.LocalDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.app.Fragment: android.os.Bundle getArguments()>","<android.app.Fragment: android.os.Bundle getArguments()>"
"<android.app.Activity: void onRestoreInstanceState(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onRestoreInstanceState(android.os.Bundle,android.os.PersistableBundle)>"
"<android.database.Cursor: boolean moveToFirst()>","<android.database.Cursor: boolean moveToFirst()>"
"<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>"
"<android.os.Parcel: void writeInterfaceToken(java.lang.String)>","<android.os.Parcel: void writeInterfaceToken(java.lang.String)>"
"<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>","<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>"
"<android.database.sqlite.SQLiteDatabase: void setCustomAggregateFunction(java.lang.String,java.util.function.BinaryOperator)>","<android.database.sqlite.SQLiteDatabase: void setCustomAggregateFunction(java.lang.String,java.util.function.BinaryOperator)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle constant(java.lang.Class,java.lang.Object)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle constant(java.lang.Class,java.lang.Object)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventContext(android.view.textclassifier.TextClassificationContext)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventContext(android.view.textclassifier.TextClassificationContext)>"
"<android.app.AlertDialog: void <init>(android.content.Context,int)>","<android.app.AlertDialog: void <init>(android.content.Context,int)>"
"<android.content.Intent: java.lang.String resolveType(android.content.Context)>","<android.content.Intent: java.lang.String resolveType(android.content.Context)>"
"<java.time.Duration: void <clinit>()>","<java.time.Duration: void <clinit>()>"
"<java.time.format.TextStyle: void <clinit>()>","<java.time.format.TextStyle: void <clinit>()>"
"<android.view.autofill.AutofillValue: boolean isToggle()>","<android.view.autofill.AutofillValue: boolean isToggle()>"
"<android.telephony.SignalStrength: java.util.List getCellSignalStrengths()>","<android.telephony.SignalStrength: java.util.List getCellSignalStrengths()>"
"<android.content.pm.Signature: byte[] toByteArray()>","<android.content.pm.Signature: byte[] toByteArray()>"
"<java.util.AbstractCollection: boolean contains(java.lang.Object)>","<java.util.AbstractCollection: boolean contains(java.lang.Object)>"
"<java.nio.file.FileSystem: java.lang.Iterable getFileStores()>","<java.nio.file.FileSystem: java.lang.Iterable getFileStores()>"
"<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>","<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>"
"<java.lang.StringBuffer: int indexOf(java.lang.String)>","<java.lang.StringBuffer: int indexOf(java.lang.String)>"
"<android.media.RemoteControlClient: void setOnGetPlaybackPositionListener(android.media.RemoteControlClient$OnGetPlaybackPositionListener)>","<android.media.RemoteControlClient: void setOnGetPlaybackPositionListener(android.media.RemoteControlClient$OnGetPlaybackPositionListener)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)>"
"<android.view.InputDevice: java.lang.String getName()>","<android.view.InputDevice: java.lang.String getName()>"
"<android.os.Parcel: android.os.IInterface[] createInterfaceArray(java.util.function.IntFunction,java.util.function.Function)>","<android.os.Parcel: android.os.IInterface[] createInterfaceArray(java.util.function.IntFunction,java.util.function.Function)>"
"<android.view.ViewDebug$IntToString: java.lang.String 'to'()>","<android.view.ViewDebug$IntToString: java.lang.String 'to'()>"
"<android.graphics.Region: boolean union(android.graphics.Rect)>","<android.graphics.Region: boolean union(android.graphics.Rect)>"
"<android.app.assist.AssistContent: void <init>()>","<android.app.assist.AssistContent: void <init>()>"
"<java.lang.Byte: java.lang.String toString()>","<java.lang.Byte: java.lang.String toString()>"
"<java.util.stream.IntStream: java.util.stream.IntStream map(java.util.function.IntUnaryOperator)>","<java.util.stream.IntStream: java.util.stream.IntStream map(java.util.function.IntUnaryOperator)>"
"<android.app.Activity: void invalidateOptionsMenu()>","<android.app.Activity: void invalidateOptionsMenu()>"
"<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>","<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>"
"<android.view.animation.Transformation: void set(android.view.animation.Transformation)>","<android.view.animation.Transformation: void set(android.view.animation.Transformation)>"
"<android.content.IntentFilter: java.util.Iterator categoriesIterator()>","<android.content.IntentFilter: java.util.Iterator categoriesIterator()>"
"<android.view.textclassifier.TextSelection: int getSelectionStartIndex()>","<android.view.textclassifier.TextSelection: int getSelectionStartIndex()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setTappableElementInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setTappableElementInsets(android.graphics.Insets)>"
"<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>","<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>"
"<android.net.Network: void bindSocket(java.net.Socket)>","<android.net.Network: void bindSocket(java.net.Socket)>"
"<java.util.NavigableMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry ceilingEntry(java.lang.Object)>"
"<java.util.Properties: java.util.Set stringPropertyNames()>","<java.util.Properties: java.util.Set stringPropertyNames()>"
"<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String,java.lang.Class)>"
"<android.content.pm.PackageInstaller$Session: void removeSplit(java.lang.String)>","<android.content.pm.PackageInstaller$Session: void removeSplit(java.lang.String)>"
"<android.telephony.NetworkScanRequest: void <clinit>()>","<android.telephony.NetworkScanRequest: void <clinit>()>"
"<java.lang.Math: int multiplyExact(int,int)>","<java.lang.Math: int multiplyExact(int,int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>"
"<java.time.OffsetTime: boolean isBefore(java.time.OffsetTime)>","<java.time.OffsetTime: boolean isBefore(java.time.OffsetTime)>"
"<android.view.Window: void setHideOverlayWindows(boolean)>","<android.view.Window: void setHideOverlayWindows(boolean)>"
"<java.net.NetworkInterface: boolean isLoopback()>","<java.net.NetworkInterface: boolean isLoopback()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>"
"<android.content.Context: java.lang.CharSequence getText(int)>","<android.content.Context: java.lang.CharSequence getText(int)>"
"<android.graphics.ColorSpace$Model: int getComponentCount()>","<android.graphics.ColorSpace$Model: int getComponentCount()>"
"<android.content.Loader: void deliverCancellation()>","<android.content.Loader: void deliverCancellation()>"
"<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>","<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>"
"<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>","<java.text.AttributedCharacterIterator: int getRunLimit(java.util.Set)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>"
"<android.graphics.Region: void <init>(int,int,int,int)>","<android.graphics.Region: void <init>(int,int,int,int)>"
"<android.media.session.MediaController$TransportControls: void <init>(android.media.session.MediaController)>","<android.media.session.MediaController$TransportControls: void <init>(android.media.session.MediaController)>"
"<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String,java.lang.Class)>","<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String,java.lang.Class)>"
"<android.graphics.BitmapShader: void setFilterMode(int)>","<android.graphics.BitmapShader: void setFilterMode(int)>"
"<android.widget.ListView: void setItemsCanFocus(boolean)>","<android.widget.ListView: void setItemsCanFocus(boolean)>"
"<android.view.Menu: void setQwertyMode(boolean)>","<android.view.Menu: void setQwertyMode(boolean)>"
"<java.net.DatagramSocketImpl: void setTTL(byte)>","<java.net.DatagramSocketImpl: void setTTL(byte)>"
"<android.view.View: void getDrawingRect(android.graphics.Rect)>","<android.view.View: void getDrawingRect(android.graphics.Rect)>"
"<java.lang.Byte: int compareTo(java.lang.Object)>","<java.lang.Byte: int compareTo(java.lang.Object)>"
"<android.media.RemoteControlClient: void setMetadataUpdateListener(android.media.RemoteControlClient$OnMetadataUpdateListener)>","<android.media.RemoteControlClient: void setMetadataUpdateListener(android.media.RemoteControlClient$OnMetadataUpdateListener)>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>"
"<android.view.ViewStructure: int getChildCount()>","<android.view.ViewStructure: int getChildCount()>"
"<android.net.NetworkRequest: void writeToParcel(android.os.Parcel,int)>","<android.net.NetworkRequest: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void onVisibilityChanged(android.view.View,int)>","<android.view.View: void onVisibilityChanged(android.view.View,int)>"
"<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.graphics.Canvas: boolean isOpaque()>","<android.graphics.Canvas: boolean isOpaque()>"
"<java.nio.channels.SelectionKey: int interestOps()>","<java.nio.channels.SelectionKey: int interestOps()>"
"<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest$Builder setPhysicalCameraKey(android.hardware.camera2.CaptureRequest$Key,java.lang.Object,java.lang.String)>","<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest$Builder setPhysicalCameraKey(android.hardware.camera2.CaptureRequest$Key,java.lang.Object,java.lang.String)>"
"<android.widget.Toolbar: void setContentInsetEndWithActions(int)>","<android.widget.Toolbar: void setContentInsetEndWithActions(int)>"
"<android.media.VolumeShaper: void finalize()>","<android.media.VolumeShaper: void finalize()>"
"<android.view.inputmethod.EditorBoundsInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.EditorBoundsInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(android.icu.util.ULocale)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRanges()>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRanges()>"
"<android.graphics.fonts.Font$Builder: void <init>(android.content.res.Resources,int)>","<android.graphics.fonts.Font$Builder: void <init>(android.content.res.Resources,int)>"
"<android.content.LocusId: void <clinit>()>","<android.content.LocusId: void <clinit>()>"
"<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>","<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig create(java.util.Collection,java.util.Collection,java.util.Collection)>"
"<android.media.MediaMetadata$Builder: void <init>(android.media.MediaMetadata)>","<android.media.MediaMetadata$Builder: void <init>(android.media.MediaMetadata)>"
"<android.graphics.Picture: void finalize()>","<android.graphics.Picture: void finalize()>"
"<android.os.Process: void killProcess(int)>","<android.os.Process: void killProcess(int)>"
"<java.util.concurrent.ExecutorService: boolean isTerminated()>","<java.util.concurrent.ExecutorService: boolean isTerminated()>"
"<android.media.Session2Token: void <init>(android.content.Context,android.content.ComponentName)>","<android.media.Session2Token: void <init>(android.content.Context,android.content.ComponentName)>"
"<android.graphics.Path: void toggleInverseFillType()>","<android.graphics.Path: void toggleInverseFillType()>"
"<android.view.SurfaceControlViewHost: void relayout(int,int)>","<android.view.SurfaceControlViewHost: void relayout(int,int)>"
"<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>","<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock(long,long,boolean)>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock(long,long,boolean)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(int,boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>"
"<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>","<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>"
"<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>","<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withHour(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withHour(int)>"
"<android.view.View: void setFadingEdgeLength(int)>","<android.view.View: void setFadingEdgeLength(int)>"
"<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>","<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>"
"<android.view.ViewGroup: void addView(android.view.View,int)>","<android.view.ViewGroup: void addView(android.view.View,int)>"
"<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>","<java.nio.charset.CharsetEncoder: void implReplaceWith(byte[])>"
"<android.view.ActionMode: void onWindowFocusChanged(boolean)>","<android.view.ActionMode: void onWindowFocusChanged(boolean)>"
"<java.time.chrono.ChronoPeriod: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoPeriod: boolean equals(java.lang.Object)>"
"<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()>","<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()>"
"<android.net.IpSecManager$SecurityParameterIndex: void close()>","<android.net.IpSecManager$SecurityParameterIndex: void close()>"
"<android.media.AudioRecordingMonitor: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>","<android.media.AudioRecordingMonitor: void registerAudioRecordingCallback(java.util.concurrent.Executor,android.media.AudioManager$AudioRecordingCallback)>"
"<java.util.ListIterator: void add(java.lang.Object)>","<java.util.ListIterator: void add(java.lang.Object)>"
"<android.graphics.RenderNode: float getRotationY()>","<android.graphics.RenderNode: float getRotationY()>"
"<java.time.ZoneOffset: int hashCode()>","<java.time.ZoneOffset: int hashCode()>"
"<android.net.RouteInfo: boolean equals(java.lang.Object)>","<android.net.RouteInfo: boolean equals(java.lang.Object)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[])>","<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[])>"
"<java.net.ServerSocket: boolean isClosed()>","<java.net.ServerSocket: boolean isClosed()>"
"<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>","<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>"
"<android.view.inputmethod.InputContentInfo: int describeContents()>","<android.view.inputmethod.InputContentInfo: int describeContents()>"
"<android.view.inputmethod.InputConnection: boolean setSelection(int,int)>","<android.view.inputmethod.InputConnection: boolean setSelection(int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)>"
"<java.lang.Character: boolean isMirrored(char)>","<java.lang.Character: boolean isMirrored(char)>"
"<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>","<android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)>"
"<android.graphics.Insets: int describeContents()>","<android.graphics.Insets: int describeContents()>"
"<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()>","<java.nio.channels.SelectionKey: java.nio.channels.SelectableChannel channel()>"
"<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>","<android.content.ClipboardManager: android.content.ClipData getPrimaryClip()>"
"<android.view.View: void setScreenReaderFocusable(boolean)>","<android.view.View: void setScreenReaderFocusable(boolean)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks build()>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks build()>"
"<java.time.temporal.ValueRange: boolean isFixed()>","<java.time.temporal.ValueRange: boolean isFixed()>"
"<android.view.textclassifier.TextLinks$TextLink: int describeContents()>","<android.view.textclassifier.TextLinks$TextLink: int describeContents()>"
"<java.io.PrintWriter: void println(float)>","<java.io.PrintWriter: void println(float)>"
"<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>","<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>"
"<android.view.textclassifier.TextClassifier: void <clinit>()>","<android.view.textclassifier.TextClassifier: void <clinit>()>"
"<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>","<java.util.stream.Collector: java.util.function.BinaryOperator combiner()>"
"<android.view.Window: android.view.View findViewById(int)>","<android.view.Window: android.view.View findViewById(int)>"
"<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>","<android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[],int,int)>"
"<android.view.inputmethod.CursorAnchorInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.CursorAnchorInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Instant: java.time.Instant plus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.Instant plus(long,java.time.temporal.TemporalUnit)>"
"<android.content.pm.ActivityInfo: java.lang.String toString()>","<android.content.pm.ActivityInfo: java.lang.String toString()>"
"<android.media.Spatializer: void removeOnSpatializerStateChangedListener(android.media.Spatializer$OnSpatializerStateChangedListener)>","<android.media.Spatializer: void removeOnSpatializerStateChangedListener(android.media.Spatializer$OnSpatializerStateChangedListener)>"
"<android.view.View: void setRotationY(float)>","<android.view.View: void setRotationY(float)>"
"<java.lang.Float: short shortValue()>","<java.lang.Float: short shortValue()>"
"<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>","<java.util.PrimitiveIterator$OfDouble: java.lang.Double next()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnSpan(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnSpan(int)>"
"<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>","<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)>"
"<java.lang.Integer: int numberOfLeadingZeros(int)>","<java.lang.Integer: int numberOfLeadingZeros(int)>"
"<android.app.SharedElementCallback: void <init>()>","<android.app.SharedElementCallback: void <init>()>"
"<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringTimeSeconds()>","<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringTimeSeconds()>"
"<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>","<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>"
"<android.view.ViewGroup: boolean hasFocus()>","<android.view.ViewGroup: boolean hasFocus()>"
"<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>","<java.nio.channels.DatagramChannel: java.net.DatagramSocket socket()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setState(int,long,float)>"
"<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>","<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>"
"<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>","<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>"
"<java.nio.file.WatchService: java.nio.file.WatchKey take()>","<java.nio.file.WatchService: java.nio.file.WatchKey take()>"
"<android.hardware.SensorDirectChannel: void finalize()>","<android.hardware.SensorDirectChannel: void finalize()>"
"<android.view.translation.TranslationSpec: boolean equals(java.lang.Object)>","<android.view.translation.TranslationSpec: boolean equals(java.lang.Object)>"
"<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>","<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>"
"<java.time.ZoneOffset: java.lang.String toString()>","<java.time.ZoneOffset: java.lang.String toString()>"
"<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>","<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>"
"<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<android.util.TypedValue: float complexToFraction(int,float,float)>","<android.util.TypedValue: float complexToFraction(int,float,float)>"
"<java.util.concurrent.locks.Lock: boolean tryLock()>","<java.util.concurrent.locks.Lock: boolean tryLock()>"
"<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>","<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>"
"<android.app.PictureInPictureParams: android.app.RemoteAction getCloseAction()>","<android.app.PictureInPictureParams: android.app.RemoteAction getCloseAction()>"
"<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>","<java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>"
"<java.util.concurrent.locks.ReentrantLock: void unlock()>","<java.util.concurrent.locks.ReentrantLock: void unlock()>"
"<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getRangeUnit()>","<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getRangeUnit()>"
"<android.view.textclassifier.TextClassification: java.lang.String getText()>","<android.view.textclassifier.TextClassification: java.lang.String getText()>"
"<java.time.format.DecimalStyle: char getPositiveSign()>","<java.time.format.DecimalStyle: char getPositiveSign()>"
"<android.graphics.Matrix: boolean postScale(float,float)>","<android.graphics.Matrix: boolean postScale(float,float)>"
"<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>","<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
"<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()>","<android.telephony.TelephonyManager: boolean doesSwitchMultiSimConfigTriggerReboot()>"
"<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>","<android.content.ContextWrapper: android.content.Context createDisplayContext(android.view.Display)>"
"<android.app.ActionBar$Tab: int getPosition()>","<android.app.ActionBar$Tab: int getPosition()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setPrimaryNavigationFragment(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setPrimaryNavigationFragment(android.app.Fragment)>"
"<java.lang.ClassFormatError: void <init>(java.lang.String)>","<java.lang.ClassFormatError: void <init>(java.lang.String)>"
"<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>","<android.hardware.Camera$Parameters: java.util.List getZoomRatios()>"
"<android.widget.AbsListView: void onDetachedFromWindow()>","<android.widget.AbsListView: void onDetachedFromWindow()>"
"<android.view.View: void setKeyboardNavigationCluster(boolean)>","<android.view.View: void setKeyboardNavigationCluster(boolean)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double[])>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double[])>"
"<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)>","<android.widget.TextView: void setEllipsize(android.text.TextUtils$TruncateAt)>"
"<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>","<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float,byte[])>"
"<java.util.Queue: boolean offer(java.lang.Object)>","<java.util.Queue: boolean offer(java.lang.Object)>"
"<android.media.MediaDrm$OnExpirationUpdateListener: void onExpirationUpdate(android.media.MediaDrm,byte[],long)>","<android.media.MediaDrm$OnExpirationUpdateListener: void onExpirationUpdate(android.media.MediaDrm,byte[],long)>"
"<java.util.Hashtable: boolean equals(java.lang.Object)>","<java.util.Hashtable: boolean equals(java.lang.Object)>"
"<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>","<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)>"
"<java.nio.ByteBuffer: java.nio.Buffer position(int)>","<java.nio.ByteBuffer: java.nio.Buffer position(int)>"
"<android.app.Fragment: void setExitTransition(android.transition.Transition)>","<android.app.Fragment: void setExitTransition(android.transition.Transition)>"
"<java.util.Properties: void loadFromXML(java.io.InputStream)>","<java.util.Properties: void loadFromXML(java.io.InputStream)>"
"<android.graphics.drawable.LayerDrawable: void setPadding(int,int,int,int)>","<android.graphics.drawable.LayerDrawable: void setPadding(int,int,int,int)>"
"<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy[] values()>","<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy[] values()>"
"<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>","<java.lang.System: java.lang.String mapLibraryName(java.lang.String)>"
"<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>","<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>"
"<android.view.ViewStructure: void setReceiveContentMimeTypes(java.lang.String[])>","<android.view.ViewStructure: void setReceiveContentMimeTypes(java.lang.String[])>"
"<android.hardware.Camera: android.hardware.Camera open()>","<android.hardware.Camera: android.hardware.Camera open()>"
"<java.util.Locale: java.util.Set getUnicodeLocaleKeys()>","<java.util.Locale: java.util.Set getUnicodeLocaleKeys()>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle zero(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle zero(java.lang.Class)>"
"<java.lang.String: java.lang.String copyValueOf(char[])>","<java.lang.String: java.lang.String copyValueOf(char[])>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setExtras(android.os.Bundle)>"
"<android.view.ViewGroup: void dispatchDisplayHint(int)>","<android.view.ViewGroup: void dispatchDisplayHint(int)>"
"<android.graphics.Outline: void <init>()>","<android.graphics.Outline: void <init>()>"
"<android.view.View: void setTransitionAlpha(float)>","<android.view.View: void setTransitionAlpha(float)>"
"<android.graphics.Movie: void <init>()>","<android.graphics.Movie: void <init>()>"
"<android.view.translation.TranslationSpec: int hashCode()>","<android.view.translation.TranslationSpec: int hashCode()>"
"<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()>","<android.view.inputmethod.CursorAnchorInfo: int getSelectionEnd()>"
"<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String,int)>","<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID,java.lang.String,int)>"
"<java.io.InputStream: int read(byte[],int,int)>","<java.io.InputStream: int read(byte[],int,int)>"
"<android.view.KeyEvent: boolean hasModifiers(int)>","<android.view.KeyEvent: boolean hasModifiers(int)>"
"<android.util.Rational: int getDenominator()>","<android.util.Rational: int getDenominator()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>","<android.graphics.ColorSpace: android.graphics.ColorSpace get(android.graphics.ColorSpace$Named)>"
"<android.view.View: java.lang.CharSequence getAccessibilityClassName()>","<android.view.View: java.lang.CharSequence getAccessibilityClassName()>"
"<java.util.Arrays: void sort(double[],int,int)>","<java.util.Arrays: void sort(double[],int,int)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setTitle(java.lang.CharSequence)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setTitle(java.lang.CharSequence)>"
"<android.view.animation.Animation: void reset()>","<android.view.animation.Animation: void reset()>"
"<android.telephony.ServiceState: boolean getRoaming()>","<android.telephony.ServiceState: boolean getRoaming()>"
"<android.widget.TextView: void onAttachedToWindow()>","<android.widget.TextView: void onAttachedToWindow()>"
"<android.view.Window: android.transition.Transition getSharedElementExitTransition()>","<android.view.Window: android.transition.Transition getSharedElementExitTransition()>"
"<android.widget.TextView: boolean onPreDraw()>","<android.widget.TextView: boolean onPreDraw()>"
"<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>","<android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)>"
"<android.view.Display: int getState()>","<android.view.Display: int getState()>"
"<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>","<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"
"<java.time.Period: java.time.Period parse(java.lang.CharSequence)>","<java.time.Period: java.time.Period parse(java.lang.CharSequence)>"
"<java.lang.Byte: int intValue()>","<java.lang.Byte: int intValue()>"
"<android.widget.AbsListView: int getCheckedItemCount()>","<android.widget.AbsListView: int getCheckedItemCount()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent(int)>"
"<android.media.AudioFocusRequest: int getFocusGain()>","<android.media.AudioFocusRequest: int getFocusGain()>"
"<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>","<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>"
"<android.os.Debug$MemoryInfo: int describeContents()>","<android.os.Debug$MemoryInfo: int describeContents()>"
"<android.widget.AbsListView: void onRtlPropertiesChanged(int)>","<android.widget.AbsListView: void onRtlPropertiesChanged(int)>"
"<android.view.Window: void setFeatureInt(int,int)>","<android.view.Window: void setFeatureInt(int,int)>"
"<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAccessPrioritiesChanged()>","<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAccessPrioritiesChanged()>"
"<java.lang.Long: int bitCount(long)>","<java.lang.Long: int bitCount(long)>"
"<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>","<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>"
"<android.view.AbsSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>","<android.view.AbsSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>"
"<android.os.CancellationSignal: void <init>()>","<android.os.CancellationSignal: void <init>()>"
"<java.util.HashMap: int size()>","<java.util.HashMap: int size()>"
"<android.view.View: void buildDrawingCache(boolean)>","<android.view.View: void buildDrawingCache(boolean)>"
"<android.view.View: int getScrollIndicators()>","<android.view.View: int getScrollIndicators()>"
"<android.view.WindowId: void <init>()>","<android.view.WindowId: void <init>()>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder removeCapability(int)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder removeCapability(int)>"
"<android.media.MediaPlayer: byte[] provideKeyResponse(byte[],byte[])>","<android.media.MediaPlayer: byte[] provideKeyResponse(byte[],byte[])>"
"<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>","<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream map(java.util.function.DoubleUnaryOperator)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream map(java.util.function.DoubleUnaryOperator)>"
"<android.util.DisplayMetrics: void <init>()>","<android.util.DisplayMetrics: void <init>()>"
"<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>","<android.view.MenuItem: android.view.MenuItem setAlphabeticShortcut(char)>"
"<android.net.LinkProperties: void setDomains(java.lang.String)>","<android.net.LinkProperties: void setDomains(java.lang.String)>"
"<android.content.Loader: java.lang.String dataToString(java.lang.Object)>","<android.content.Loader: java.lang.String dataToString(java.lang.Object)>"
"<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>","<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setScores(float[])>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setScores(float[])>"
"<android.view.textclassifier.TextLinks: java.util.Collection getLinks()>","<android.view.textclassifier.TextLinks: java.util.Collection getLinks()>"
"<android.view.ViewGroupOverlay: void add(android.view.View)>","<android.view.ViewGroupOverlay: void add(android.view.View)>"
"<java.util.concurrent.locks.Condition: void await()>","<java.util.concurrent.locks.Condition: void await()>"
"<java.util.Set: boolean addAll(java.util.Collection)>","<java.util.Set: boolean addAll(java.util.Collection)>"
"<android.content.Intent$ShortcutIconResource: java.lang.String toString()>","<android.content.Intent$ShortcutIconResource: java.lang.String toString()>"
"<android.widget.AbsListView: void drawableStateChanged()>","<android.widget.AbsListView: void drawableStateChanged()>"
"<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.widget.FrameLayout$LayoutParams)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.widget.FrameLayout$LayoutParams)>"
"<android.view.View: boolean isShown()>","<android.view.View: boolean isShown()>"
"<android.graphics.Bitmap: int getPixel(int,int)>","<android.graphics.Bitmap: int getPixel(int,int)>"
"<android.widget.TextView: void setPaddingRelative(int,int,int,int)>","<android.widget.TextView: void setPaddingRelative(int,int,int,int)>"
"<java.time.temporal.ValueRange: boolean equals(java.lang.Object)>","<java.time.temporal.ValueRange: boolean equals(java.lang.Object)>"
"<java.lang.reflect.Method: int getModifiers()>","<java.lang.reflect.Method: int getModifiers()>"
"<java.lang.StringBuilder: void <init>()>","<java.lang.StringBuilder: void <init>()>"
"<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>","<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>"
"<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>","<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStopped(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStopped(android.app.Activity)>"
"<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>"
"<android.widget.TextView: int getTotalPaddingTop()>","<android.widget.TextView: int getTotalPaddingTop()>"
"<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()>","<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState()>"
"<android.media.session.PlaybackState: java.util.List getCustomActions()>","<android.media.session.PlaybackState: java.util.List getCustomActions()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendReplacementRun(android.graphics.Paint,int,float)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendReplacementRun(android.graphics.Paint,int,float)>"
"<android.graphics.RenderNode: boolean hasDisplayList()>","<android.graphics.RenderNode: boolean hasDisplayList()>"
"<java.lang.StackTraceElement: boolean equals(java.lang.Object)>","<java.lang.StackTraceElement: boolean equals(java.lang.Object)>"
"<android.graphics.Path$Op: void <init>(java.lang.String,int)>","<android.graphics.Path$Op: void <init>(java.lang.String,int)>"
"<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>","<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>"
"<java.io.PrintStream: void print(java.lang.Object)>","<java.io.PrintStream: void print(java.lang.Object)>"
"<java.security.Principal: int hashCode()>","<java.security.Principal: int hashCode()>"
"<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>","<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>"
"<android.content.ComponentName: void <clinit>()>","<android.content.ComponentName: void <clinit>()>"
"<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String toString()>","<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String toString()>"
"<android.view.InputDevice: boolean isVirtual()>","<android.view.InputDevice: boolean isVirtual()>"
"<android.app.Activity: void showDialog(int)>","<android.app.Activity: void showDialog(int)>"
"<android.content.Loader: boolean takeContentChanged()>","<android.content.Loader: boolean takeContentChanged()>"
"<java.nio.DoubleBuffer: java.nio.Buffer limit(int)>","<java.nio.DoubleBuffer: java.nio.Buffer limit(int)>"
"<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()>","<android.media.MediaPlayer: android.media.PlaybackParams getPlaybackParams()>"
"<android.transition.Scene: void <init>(android.view.ViewGroup)>","<android.transition.Scene: void <init>(android.view.ViewGroup)>"
"<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.MotionEvent: float getSize()>","<android.view.MotionEvent: float getSize()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>"
"<android.view.View: boolean isDirty()>","<android.view.View: boolean isDirty()>"
"<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>","<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>"
"<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>","<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>"
"<java.util.function.DoubleSupplier: double getAsDouble()>","<java.util.function.DoubleSupplier: double getAsDouble()>"
"<android.icu.util.ULocale: java.lang.String toLegacyType(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String toLegacyType(java.lang.String,java.lang.String)>"
"<android.os.Process: long getStartElapsedRealtime()>","<android.os.Process: long getStartElapsedRealtime()>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: void <clinit>()>","<android.content.pm.PackageManager$ComponentEnabledSetting: void <clinit>()>"
"<android.app.AlertDialog: android.widget.ListView getListView()>","<android.app.AlertDialog: android.widget.ListView getListView()>"
"<android.os.Bundle: java.lang.Object clone()>","<android.os.Bundle: java.lang.Object clone()>"
"<android.view.View: void setLayerType(int,android.graphics.Paint)>","<android.view.View: void setLayerType(int,android.graphics.Paint)>"
"<android.content.pm.PermissionInfo: int getProtection()>","<android.content.pm.PermissionInfo: int getProtection()>"
"<android.app.Activity: void startActivityForResult(android.content.Intent,int)>","<android.app.Activity: void startActivityForResult(android.content.Intent,int)>"
"<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>","<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>"
"<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>","<android.view.inputmethod.InputConnection: boolean sendKeyEvent(android.view.KeyEvent)>"
"<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)>","<android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)>"
"<android.text.PrecomputedText: java.lang.CharSequence subSequence(int,int)>","<android.text.PrecomputedText: java.lang.CharSequence subSequence(int,int)>"
"<java.lang.CharSequence: int length()>","<java.lang.CharSequence: int length()>"
"<android.graphics.Paint: int getStartHyphenEdit()>","<android.graphics.Paint: int getStartHyphenEdit()>"
"<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>","<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>"
"<android.media.MediaMetadata: android.media.MediaDescription getDescription()>","<android.media.MediaMetadata: android.media.MediaDescription getDescription()>"
"<android.view.View: void scrollTo(int,int)>","<android.view.View: void scrollTo(int,int)>"
"<java.util.Arrays: boolean equals(short[],short[])>","<java.util.Arrays: boolean equals(short[],short[])>"
"<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>","<java.util.Locale: java.util.List filter(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()>","<android.telephony.TelephonyManager: java.lang.String getNetworkSpecifier()>"
"<android.telephony.SignalStrength: java.util.List getCellSignalStrengths(java.lang.Class)>","<android.telephony.SignalStrength: java.util.List getCellSignalStrengths(java.lang.Class)>"
"<android.net.NetworkRequest: boolean equals(java.lang.Object)>","<android.net.NetworkRequest: boolean equals(java.lang.Object)>"
"<android.telephony.CellIdentity: int hashCode()>","<android.telephony.CellIdentity: int hashCode()>"
"<android.graphics.SurfaceTexture: long getTimestamp()>","<android.graphics.SurfaceTexture: long getTimestamp()>"
"<java.net.URL: java.lang.String toString()>","<java.net.URL: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>","<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long,android.os.Bundle)>"
"<android.net.Network: android.net.Network fromNetworkHandle(long)>","<android.net.Network: android.net.Network fromNetworkHandle(long)>"
"<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>","<java.util.Collections: java.util.Collection synchronizedCollection(java.util.Collection)>"
"<java.lang.StringBuffer: int offsetByCodePoints(int,int)>","<java.lang.StringBuffer: int offsetByCodePoints(int,int)>"
"<android.view.ViewStructure: void setElevation(float)>","<android.view.ViewStructure: void setElevation(float)>"
"<android.widget.AbsListView: void dispatchSetPressed(boolean)>","<android.widget.AbsListView: void dispatchSetPressed(boolean)>"
"<android.media.AudioMetadataMap: java.lang.Object remove(android.media.AudioMetadata$Key)>","<android.media.AudioMetadataMap: java.lang.Object remove(android.media.AudioMetadata$Key)>"
"<android.view.ViewGroup: void dispatchPointerCaptureChanged(boolean)>","<android.view.ViewGroup: void dispatchPointerCaptureChanged(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,android.content.ComponentName)>","<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,android.content.ComponentName)>"
"<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>","<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>"
"<android.graphics.drawable.BitmapDrawable: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.BitmapDrawable: void setTintList(android.content.res.ColorStateList)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setMultiLine(boolean)>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getLanguageTag()>"
"<android.widget.TextView: java.lang.CharSequence getText()>","<android.widget.TextView: java.lang.CharSequence getText()>"
"<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>","<android.provider.Settings$System: boolean getShowGTalkServiceStatus(android.content.ContentResolver)>"
"<java.util.Map$Entry: boolean equals(java.lang.Object)>","<java.util.Map$Entry: boolean equals(java.lang.Object)>"
"<android.media.MediaPlayer$MetricsConstants: void <init>()>","<android.media.MediaPlayer$MetricsConstants: void <init>()>"
"<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)>","<android.widget.TextView: void setEditableFactory(android.text.Editable$Factory)>"
"<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>"
"<java.net.DatagramSocket: java.lang.Object getOption(java.net.SocketOption)>","<java.net.DatagramSocket: java.lang.Object getOption(java.net.SocketOption)>"
"<android.widget.TextView: void onSelectionChanged(int,int)>","<android.widget.TextView: void onSelectionChanged(int,int)>"
"<android.widget.AdapterView: long getItemIdAtPosition(int)>","<android.widget.AdapterView: long getItemIdAtPosition(int)>"
"<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>","<android.content.pm.PackageManager: java.util.List queryInstrumentation(java.lang.String,int)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLinks generateLinks(android.view.textclassifier.TextLinks$Request)>"
"<android.transition.Transition$EpicenterCallback: android.graphics.Rect onGetEpicenter(android.transition.Transition)>","<android.transition.Transition$EpicenterCallback: android.graphics.Rect onGetEpicenter(android.transition.Transition)>"
"<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>","<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>"
"<android.view.inputmethod.CursorAnchorInfo: java.lang.String toString()>","<android.view.inputmethod.CursorAnchorInfo: java.lang.String toString()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime of(int,int,int,int,int,int,int,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime of(int,int,int,int,int,int,int,java.time.ZoneId)>"
"<android.widget.AbsListView$OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>","<android.widget.AbsListView$OnScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>"
"<java.io.Writer: void write(java.lang.String,int,int)>","<java.io.Writer: void write(java.lang.String,int,int)>"
"<java.nio.channels.FileLock: long size()>","<java.nio.channels.FileLock: long size()>"
"<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<android.animation.ValueAnimator: void <init>()>","<android.animation.ValueAnimator: void <init>()>"
"<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>","<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>"
"<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>"
"<java.lang.Object: void <init>()>","<java.lang.Object: void <init>()>"
"<java.nio.file.attribute.FileTime: int hashCode()>","<java.nio.file.attribute.FileTime: int hashCode()>"
"<java.nio.file.attribute.BasicFileAttributes: long size()>","<java.nio.file.attribute.BasicFileAttributes: long size()>"
"<android.app.Activity: android.view.SearchEvent getSearchEvent()>","<android.app.Activity: android.view.SearchEvent getSearchEvent()>"
"<android.util.SparseArray: int size()>","<android.util.SparseArray: int size()>"
"<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>","<android.database.ContentObserver: void dispatchChange(boolean,android.net.Uri)>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setTextClassification(android.view.textclassifier.TextClassification)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setTextClassification(android.view.textclassifier.TextClassification)>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetLeft(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetLeft(int,int)>"
"<android.media.MediaFormat: java.lang.String toString()>","<android.media.MediaFormat: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>"
"<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()>","<android.view.textclassifier.ConversationActions$Message: java.lang.CharSequence getText()>"
"<java.time.LocalTime: java.time.LocalTime withHour(int)>","<java.time.LocalTime: java.time.LocalTime withHour(int)>"
"<android.hardware.HardwareBuffer: long getUsage()>","<android.hardware.HardwareBuffer: long getUsage()>"
"<java.util.Queue: java.lang.Object element()>","<java.util.Queue: java.lang.Object element()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusWeeks(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusWeeks(long)>"
"<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>","<java.lang.Character: int codePointBefore(java.lang.CharSequence,int)>"
"<java.net.URL: java.lang.String getUserInfo()>","<java.net.URL: java.lang.String getUserInfo()>"
"<java.util.OptionalInt: boolean equals(java.lang.Object)>","<java.util.OptionalInt: boolean equals(java.lang.Object)>"
"<java.lang.invoke.VarHandle: void setVolatile(java.lang.Object[])>","<java.lang.invoke.VarHandle: void setVolatile(java.lang.Object[])>"
"<android.app.Fragment: void setExitSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Fragment: void setExitSharedElementCallback(android.app.SharedElementCallback)>"
"<java.time.Period: long get(java.time.temporal.TemporalUnit)>","<java.time.Period: long get(java.time.temporal.TemporalUnit)>"
"<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>","<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>"
"<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>","<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()>"
"<android.view.MenuItem: java.lang.CharSequence getContentDescription()>","<android.view.MenuItem: java.lang.CharSequence getContentDescription()>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAspectRatio(android.util.Rational)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setAspectRatio(android.util.Rational)>"
"<java.nio.file.FileStore: java.nio.file.attribute.FileStoreAttributeView getFileStoreAttributeView(java.lang.Class)>","<java.nio.file.FileStore: java.nio.file.attribute.FileStoreAttributeView getFileStoreAttributeView(java.lang.Class)>"
"<java.net.DatagramPacket: void setData(byte[])>","<java.net.DatagramPacket: void setData(byte[])>"
"<java.text.FieldPosition: void setBeginIndex(int)>","<java.text.FieldPosition: void setBeginIndex(int)>"
"<android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>","<android.os.Handler: android.os.Handler createAsync(android.os.Looper,android.os.Handler$Callback)>"
"<android.widget.TextView: int getMarqueeRepeatLimit()>","<android.widget.TextView: int getMarqueeRepeatLimit()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setPosition(android.view.SurfaceControl,float,float)>"
"<java.util.stream.LongStream: java.util.stream.LongStream of(long)>","<java.util.stream.LongStream: java.util.stream.LongStream of(long)>"
"<android.view.WindowInsets$Type: int systemBars()>","<android.view.WindowInsets$Type: int systemBars()>"
"<java.nio.channels.InterruptibleChannel: void close()>","<java.nio.channels.InterruptibleChannel: void close()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams build()>"
"<android.view.View: int getPaddingBottom()>","<android.view.View: int getPaddingBottom()>"
"<java.time.Duration: java.time.Duration plusNanos(long)>","<java.time.Duration: java.time.Duration plusNanos(long)>"
"<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>","<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()>"
"<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>","<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>"
"<android.graphics.Paint: void setTextSkewX(float)>","<android.graphics.Paint: void setTextSkewX(float)>"
"<java.util.stream.Stream: java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.DoubleStream flatMapToDouble(java.util.function.Function)>"
"<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.text.Editable: void clear()>","<android.text.Editable: void clear()>"
"<android.view.WindowInsets: android.graphics.Insets getStableInsets()>","<android.view.WindowInsets: android.graphics.Insets getStableInsets()>"
"<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>","<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>"
"<android.os.Parcel: void readFixedArray(java.lang.Object,android.os.Parcelable$Creator)>","<android.os.Parcel: void readFixedArray(java.lang.Object,android.os.Parcelable$Creator)>"
"<java.io.Reader: int read(char[])>","<java.io.Reader: int read(char[])>"
"<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId$FocusObserver)>","<android.view.WindowId: void unregisterFocusObserver(android.view.WindowId$FocusObserver)>"
"<android.view.Window$Callback: boolean onSearchRequested()>","<android.view.Window$Callback: boolean onSearchRequested()>"
"<java.nio.ByteBuffer: short getShort()>","<java.nio.ByteBuffer: short getShort()>"
"<java.time.ZoneId: java.time.ZoneId of(java.lang.String,java.util.Map)>","<java.time.ZoneId: java.time.ZoneId of(java.lang.String,java.util.Map)>"
"<java.nio.FloatBuffer: boolean isDirect()>","<java.nio.FloatBuffer: boolean isDirect()>"
"<android.telephony.TelephonyCallback$ActiveDataSubscriptionIdListener: void onActiveDataSubscriptionIdChanged(int)>","<android.telephony.TelephonyCallback$ActiveDataSubscriptionIdListener: void onActiveDataSubscriptionIdChanged(int)>"
"<android.util.SparseArray: int indexOfKey(int)>","<android.util.SparseArray: int indexOfKey(int)>"
"<java.time.Duration: java.time.Duration withSeconds(long)>","<java.time.Duration: java.time.Duration withSeconds(long)>"
"<android.media.AudioTrack: int getChannelCount()>","<android.media.AudioTrack: int getChannelCount()>"
"<android.graphics.fonts.Font: int getSourceIdentifier()>","<android.graphics.fonts.Font: int getSourceIdentifier()>"
"<java.lang.System: void setErr(java.io.PrintStream)>","<java.lang.System: void setErr(java.io.PrintStream)>"
"<android.content.ContentResolver: java.util.List getCurrentSyncs()>","<android.content.ContentResolver: java.util.List getCurrentSyncs()>"
"<android.content.pm.PackageManager$Property: boolean isBoolean()>","<android.content.pm.PackageManager$Property: boolean isBoolean()>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setId(java.lang.String)>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage$Builder setId(java.lang.String)>"
"<android.hardware.camera2.CameraExtensionSession: void close()>","<android.hardware.camera2.CameraExtensionSession: void close()>"
"<java.util.stream.LongStream: java.util.stream.LongStream limit(long)>","<java.util.stream.LongStream: java.util.stream.LongStream limit(long)>"
"<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>","<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>"
"<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.InputMethodInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.os.VibrationAttributes: int getUsage()>","<android.os.VibrationAttributes: int getUsage()>"
"<java.time.LocalDate: java.time.LocalDate plusWeeks(long)>","<java.time.LocalDate: java.time.LocalDate plusWeeks(long)>"
"<android.graphics.Region: boolean isComplex()>","<android.graphics.Region: boolean isComplex()>"
"<android.media.session.MediaController$Callback: void onQueueTitleChanged(java.lang.CharSequence)>","<android.media.session.MediaController$Callback: void onQueueTitleChanged(java.lang.CharSequence)>"
"<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle invoker(java.lang.invoke.MethodType)>"
"<android.widget.RemoteViews: void setOnClickResponse(int,android.widget.RemoteViews$RemoteResponse)>","<android.widget.RemoteViews: void setOnClickResponse(int,android.widget.RemoteViews$RemoteResponse)>"
"<android.view.inputmethod.TextSnapshot: int getCompositionEnd()>","<android.view.inputmethod.TextSnapshot: int getCompositionEnd()>"
"<java.net.Inet4Address: boolean equals(java.lang.Object)>","<java.net.Inet4Address: boolean equals(java.lang.Object)>"
"<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>","<android.graphics.Color: android.graphics.Color convert(android.graphics.ColorSpace)>"
"<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>","<android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)>"
"<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>","<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>"
"<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.lang.Object)>"
"<android.animation.LayoutTransition$TransitionListener: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition$TransitionListener: void endTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>"
"<android.media.MediaDescription: java.lang.CharSequence getSubtitle()>","<android.media.MediaDescription: java.lang.CharSequence getSubtitle()>"
"<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>","<android.content.Context: int checkCallingUriPermission(android.net.Uri,int)>"
"<android.net.SocketKeepalive$Callback: void onDataReceived()>","<android.net.SocketKeepalive$Callback: void onDataReceived()>"
"<java.time.OffsetDateTime: int getDayOfYear()>","<java.time.OffsetDateTime: int getDayOfYear()>"
"<android.content.pm.PackageManager$Property: boolean isFloat()>","<android.content.pm.PackageManager$Property: boolean isFloat()>"
"<java.time.LocalDate: java.time.chrono.Chronology getChronology()>","<java.time.LocalDate: java.time.chrono.Chronology getChronology()>"
"<android.content.res.TypedArray: int getInteger(int,int)>","<android.content.res.TypedArray: int getInteger(int,int)>"
"<android.text.Layout: java.lang.CharSequence getText()>","<android.text.Layout: java.lang.CharSequence getText()>"
"<android.view.ViewGroup: void addTouchables(java.util.ArrayList)>","<android.view.ViewGroup: void addTouchables(java.util.ArrayList)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(java.lang.String)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(java.lang.String)>"
"<java.util.List: void sort(java.util.Comparator)>","<java.util.List: void sort(java.util.Comparator)>"
"<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)>"
"<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.graphics.Color: float red()>","<android.graphics.Color: float red()>"
"<android.app.AlertDialog: android.widget.Button getButton(int)>","<android.app.AlertDialog: android.widget.Button getButton(int)>"
"<java.util.OptionalDouble: java.lang.String toString()>","<java.util.OptionalDouble: java.lang.String toString()>"
"<java.io.File: boolean canRead()>","<java.io.File: boolean canRead()>"
"<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>","<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>"
"<java.io.Flushable: void flush()>","<java.io.Flushable: void flush()>"
"<java.time.chrono.ChronoZonedDateTime: boolean isBefore(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: boolean isBefore(java.time.chrono.ChronoZonedDateTime)>"
"<org.xmlpull.v1.XmlPullParser: int getColumnNumber()>","<org.xmlpull.v1.XmlPullParser: int getColumnNumber()>"
"<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.os.Parcel: void enforceInterface(java.lang.String)>","<android.os.Parcel: void enforceInterface(java.lang.String)>"
"<android.os.Bundle: java.lang.String toString()>","<android.os.Bundle: java.lang.String toString()>"
"<java.net.InetAddress: boolean isLoopbackAddress()>","<java.net.InetAddress: boolean isLoopbackAddress()>"
"<java.security.PrivilegedActionException: java.lang.Exception getException()>","<java.security.PrivilegedActionException: java.lang.Exception getException()>"
"<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>"
"<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>","<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()>"
"<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.Context: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZBy(float)>"
"<android.content.BroadcastReceiver: void <init>()>","<android.content.BroadcastReceiver: void <init>()>"
"<android.transition.Transition$TransitionListener: void onTransitionStart(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionStart(android.transition.Transition)>"
"<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getExtensionSupportedSizes(int,int)>","<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getExtensionSupportedSizes(int,int)>"
"<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>","<java.lang.reflect.Array: void setShort(java.lang.Object,int,short)>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>"
"<android.app.Application: java.lang.String getProcessName()>","<android.app.Application: java.lang.String getProcessName()>"
"<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()>","<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()>"
"<android.view.OrientationEventListener: void disable()>","<android.view.OrientationEventListener: void disable()>"
"<android.os.Debug: void resetGlobalExternalFreedSize()>","<android.os.Debug: void resetGlobalExternalFreedSize()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferTransform(android.view.SurfaceControl,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferTransform(android.view.SurfaceControl,int)>"
"<android.telephony.NetworkScan: void <init>()>","<android.telephony.NetworkScan: void <init>()>"
"<android.os.Handler: void dispatchMessage(android.os.Message)>","<android.os.Handler: void dispatchMessage(android.os.Message)>"
"<java.nio.IntBuffer: java.nio.Buffer flip()>","<java.nio.IntBuffer: java.nio.Buffer flip()>"
"<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.ContextWrapper: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<java.time.OffsetDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.OffsetDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.view.WindowId: void <clinit>()>","<android.view.WindowId: void <clinit>()>"
"<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>","<android.app.TaskStackBuilder: android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle)>"
"<android.view.View: int getMeasuredState()>","<android.view.View: int getMeasuredState()>"
"<android.graphics.Paint: void setTextLocale(java.util.Locale)>","<android.graphics.Paint: void setTextLocale(java.util.Locale)>"
"<java.time.temporal.ChronoUnit: void <init>(java.lang.String,int)>","<java.time.temporal.ChronoUnit: void <init>(java.lang.String,int)>"
"<android.view.View: void requestUnbufferedDispatch(int)>","<android.view.View: void requestUnbufferedDispatch(int)>"
"<android.graphics.Paint$Style: android.graphics.Paint$Style[] values()>","<android.graphics.Paint$Style: android.graphics.Paint$Style[] values()>"
"<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>","<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>"
"<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>","<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>"
"<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>","<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>"
"<android.content.Context: android.content.ContentResolver getContentResolver()>","<android.content.Context: android.content.ContentResolver getContentResolver()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <init>()>"
"<android.os.Message: void copyFrom(android.os.Message)>","<android.os.Message: void copyFrom(android.os.Message)>"
"<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>","<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>"
"<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>","<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>"
"<android.view.ViewGroup: int getChildDrawingOrder(int,int)>","<android.view.ViewGroup: int getChildDrawingOrder(int,int)>"
"<android.view.Display: boolean isMinimalPostProcessingSupported()>","<android.view.Display: boolean isMinimalPostProcessingSupported()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
"<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()>","<android.view.contentcapture.ContentCaptureContext: android.os.Bundle getExtras()>"
"<android.graphics.ColorSpace$Rgb: float[] toXyz(float[])>","<android.graphics.ColorSpace$Rgb: float[] toXyz(float[])>"
"<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>"
"<android.widget.TextView: float getShadowRadius()>","<android.widget.TextView: float getShadowRadius()>"
"<android.database.SQLException: void <init>(java.lang.String)>","<android.database.SQLException: void <init>(java.lang.String)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>"
"<java.io.PrintWriter: java.lang.Appendable append(char)>","<java.io.PrintWriter: java.lang.Appendable append(char)>"
"<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>","<android.hardware.Camera$Parameters: void setPreviewSize(int,int)>"
"<java.nio.file.Path: java.nio.file.Path resolveSibling(java.nio.file.Path)>","<java.nio.file.Path: java.nio.file.Path resolveSibling(java.nio.file.Path)>"
"<java.util.stream.LongStream: java.util.PrimitiveIterator$OfLong iterator()>","<java.util.stream.LongStream: java.util.PrimitiveIterator$OfLong iterator()>"
"<android.view.KeyEvent: java.lang.String toString()>","<android.view.KeyEvent: java.lang.String toString()>"
"<java.lang.Math: double max(double,double)>","<java.lang.Math: double max(double,double)>"
"<android.telephony.TelephonyCallback$DataActivationStateListener: void onDataActivationStateChanged(int)>","<android.telephony.TelephonyCallback$DataActivationStateListener: void onDataActivationStateChanged(int)>"
"<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>","<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Window: int getNavigationBarDividerColor()>","<android.view.Window: int getNavigationBarDividerColor()>"
"<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>","<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>"
"<android.content.ContentProvider: void onTrimMemory(int)>","<android.content.ContentProvider: void onTrimMemory(int)>"
"<android.widget.RemoteViews$RemoteViewOutlineProvider: void <init>(float)>","<android.widget.RemoteViews$RemoteViewOutlineProvider: void <init>(float)>"
"<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)>","<android.view.textclassifier.TextLanguage: android.icu.util.ULocale getLocale(int)>"
"<android.app.Activity: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Activity: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int)>"
"<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()>","<android.telephony.TelephonyManager: boolean isManualNetworkSelectionAllowed()>"
"<java.lang.reflect.Constructor: java.lang.String getName()>","<java.lang.reflect.Constructor: java.lang.String getName()>"
"<java.lang.Double: boolean isNaN(double)>","<java.lang.Double: boolean isNaN(double)>"
"<android.telephony.TelephonyDisplayInfo: int describeContents()>","<android.telephony.TelephonyDisplayInfo: int describeContents()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>"
"<android.database.sqlite.SQLiteTransactionListener: void onBegin()>","<android.database.sqlite.SQLiteTransactionListener: void onBegin()>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectBottom()>"
"<android.content.pm.Signature: char[] toChars()>","<android.content.pm.Signature: char[] toChars()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,java.lang.String)>"
"<android.view.WindowInsetsAnimationController: boolean isReady()>","<android.view.WindowInsetsAnimationController: boolean isReady()>"
"<android.view.KeyCharacterMap: int get(int,int)>","<android.view.KeyCharacterMap: int get(int,int)>"
"<android.widget.AdapterView: void setSelection(int)>","<android.widget.AdapterView: void setSelection(int)>"
"<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialSelectedText(int)>","<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialSelectedText(int)>"
"<android.graphics.Rect: boolean equals(java.lang.Object)>","<android.graphics.Rect: boolean equals(java.lang.Object)>"
"<android.graphics.Bitmap: void recycle()>","<android.graphics.Bitmap: void recycle()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnDismissListener(android.content.DialogInterface$OnDismissListener)>"
"<android.os.Bundle: void <init>(int)>","<android.os.Bundle: void <init>(int)>"
"<java.lang.Thread: boolean isDaemon()>","<java.lang.Thread: boolean isDaemon()>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void writeToParcel(android.os.Parcel,int)>","<android.view.SurfaceControlViewHost$SurfacePackage: void writeToParcel(android.os.Parcel,int)>"
"<android.telephony.CellIdentity: void <init>()>","<android.telephony.CellIdentity: void <init>()>"
"<android.view.View: void setTag(java.lang.Object)>","<android.view.View: void setTag(java.lang.Object)>"
"<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>","<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>"
"<java.util.stream.DoubleStream: java.util.stream.BaseStream parallel()>","<java.util.stream.DoubleStream: java.util.stream.BaseStream parallel()>"
"<java.net.DatagramSocket: void close()>","<java.net.DatagramSocket: void close()>"
"<java.util.concurrent.Semaphore: void acquireUninterruptibly()>","<java.util.concurrent.Semaphore: void acquireUninterruptibly()>"
"<java.util.Comparator: java.util.Comparator thenComparing(java.util.Comparator)>","<java.util.Comparator: java.util.Comparator thenComparing(java.util.Comparator)>"
"<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>","<android.view.Window: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.media.AudioManager: boolean isSurroundFormatEnabled(int)>","<android.media.AudioManager: boolean isSurroundFormatEnabled(int)>"
"<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>","<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>"
"<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>","<java.nio.IntBuffer: int compareTo(java.nio.IntBuffer)>"
"<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>","<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double)>"
"<java.lang.Character: boolean isHighSurrogate(char)>","<java.lang.Character: boolean isHighSurrogate(char)>"
"<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.Throwable)>"
"<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URLStreamHandler: void setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()>","<android.hardware.camera2.CaptureFailure: java.lang.String getPhysicalCameraId()>"
"<android.view.ActionMode$Callback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>","<android.view.ActionMode$Callback: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>"
"<java.util.Arrays: int binarySearch(float[],float)>","<java.util.Arrays: int binarySearch(float[],float)>"
"<android.telephony.ims.ImsReasonInfo: void writeToParcel(android.os.Parcel,int)>","<android.telephony.ims.ImsReasonInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: boolean equals(float[],int,int,float[],int,int)>","<java.util.Arrays: boolean equals(float[],int,int,float[],int,int)>"
"<android.widget.TextView: android.graphics.Typeface getTypeface()>","<android.widget.TextView: android.graphics.Typeface getTypeface()>"
"<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,java.util.List)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType insertParameterTypes(int,java.util.List)>"
"<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.util.Hashtable: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.widget.Toolbar$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>","<android.widget.Toolbar$OnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>"
"<android.widget.TextView: int getSelectionEnd()>","<android.widget.TextView: int getSelectionEnd()>"
"<android.os.IBinder: boolean isBinderAlive()>","<android.os.IBinder: boolean isBinderAlive()>"
"<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>","<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()>"
"<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.graphics.Matrix: void setRotate(float)>","<android.graphics.Matrix: void setRotate(float)>"
"<java.util.concurrent.Semaphore: int drainPermits()>","<java.util.concurrent.Semaphore: int drainPermits()>"
"<java.util.Arrays: void sort(int[])>","<java.util.Arrays: void sort(int[])>"
"<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>","<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextAfterCursor(int,int)>"
"<android.telephony.ServiceState: void setStateOff()>","<android.telephony.ServiceState: void setStateOff()>"
"<android.widget.TextView: void setMarqueeRepeatLimit(int)>","<android.widget.TextView: void setMarqueeRepeatLimit(int)>"
"<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>","<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>"
"<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>","<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int,boolean)>"
"<java.net.URL: java.lang.Object getContent(java.lang.Class[])>","<java.net.URL: java.lang.Object getContent(java.lang.Class[])>"
"<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>","<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)>"
"<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>"
"<java.nio.channels.spi.AbstractSelector: boolean isOpen()>","<java.nio.channels.spi.AbstractSelector: boolean isOpen()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo obtain(int,int,int,int,boolean,boolean)>"
"<java.util.stream.IntStream: java.util.stream.IntStream flatMap(java.util.function.IntFunction)>","<java.util.stream.IntStream: java.util.stream.IntStream flatMap(java.util.function.IntFunction)>"
"<android.view.View: boolean getFitsSystemWindows()>","<android.view.View: boolean getFitsSystemWindows()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withNano(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withNano(int)>"
"<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>","<android.transition.TransitionManager: void go(android.transition.Scene,android.transition.Transition)>"
"<java.net.ServerSocket: void <init>(int,int)>","<java.net.ServerSocket: void <init>(int,int)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>"
"<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>","<java.util.Optional: java.lang.Object orElseGet(java.util.function.Supplier)>"
"<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>","<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>"
"<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>","<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>"
"<android.content.res.Configuration: void <clinit>()>","<android.content.res.Configuration: void <clinit>()>"
"<android.os.Message: android.os.Message obtain()>","<android.os.Message: android.os.Message obtain()>"
"<android.text.Layout: int getLineForOffset(int)>","<android.text.Layout: int getLineForOffset(int)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
"<java.time.OffsetDateTime: int getHour()>","<java.time.OffsetDateTime: int getHour()>"
"<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>","<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)>"
"<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>","<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>"
"<java.util.Arrays: java.lang.String toString(java.lang.Object[])>","<java.util.Arrays: java.lang.String toString(java.lang.Object[])>"
"<java.net.DatagramSocket: int getTrafficClass()>","<java.net.DatagramSocket: int getTrafficClass()>"
"<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()>","<android.hardware.display.DeviceProductInfo: java.lang.String getProductId()>"
"<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)>","<android.widget.RemoteViews: void setTextViewCompoundDrawables(int,int,int,int,int)>"
"<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>","<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeeded(android.view.SurfaceHolder)>"
"<java.lang.Long: long parseLong(java.lang.String)>","<java.lang.Long: long parseLong(java.lang.String)>"
"<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetBefore()>","<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetBefore()>"
"<java.time.LocalDateTime: int getMinute()>","<java.time.LocalDateTime: int getMinute()>"
"<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>","<java.io.FilenameFilter: boolean accept(java.io.File,java.lang.String)>"
"<android.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>","<android.app.FragmentManager$BackStackEntry: int getBreadCrumbTitleRes()>"
"<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>","<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Deque: java.lang.Object remove()>","<java.util.Deque: java.lang.Object remove()>"
"<android.app.Dialog: android.view.View getCurrentFocus()>","<android.app.Dialog: android.view.View getCurrentFocus()>"
"<android.view.KeyEvent: int getMetaState()>","<android.view.KeyEvent: int getMetaState()>"
"<android.telephony.SignalStrengthUpdateRequest$Builder: void <init>()>","<android.telephony.SignalStrengthUpdateRequest$Builder: void <init>()>"
"<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>","<android.view.accessibility.AccessibilityWindowInfo: java.lang.CharSequence getTitle()>"
"<java.lang.IllegalArgumentException: void <init>(java.lang.String)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String)>"
"<java.lang.Double: boolean isNaN()>","<java.lang.Double: boolean isNaN()>"
"<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>","<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)>"
"<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>"
"<android.app.Activity: void onPostCreate(android.os.Bundle)>","<android.app.Activity: void onPostCreate(android.os.Bundle)>"
"<android.content.pm.PackageManager$Property: void <init>()>","<android.content.pm.PackageManager$Property: void <init>()>"
"<android.telephony.NetworkScanRequest: int getSearchPeriodicity()>","<android.telephony.NetworkScanRequest: int getSearchPeriodicity()>"
"<java.time.chrono.ChronoZonedDateTime: long getLong(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: long getLong(java.time.temporal.TemporalField)>"
"<android.os.LocaleList: int size()>","<android.os.LocaleList: int size()>"
"<android.view.KeyEvent: int getDeadChar(int,int)>","<android.view.KeyEvent: int getDeadChar(int,int)>"
"<android.widget.ListView: void setAdapter(android.widget.Adapter)>","<android.widget.ListView: void setAdapter(android.widget.Adapter)>"
"<java.net.DatagramSocket: void bind(java.net.SocketAddress)>","<java.net.DatagramSocket: void bind(java.net.SocketAddress)>"
"<android.app.ActivityManager$RecentTaskInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RecentTaskInfo: void readFromParcel(android.os.Parcel)>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>","<java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>"
"<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>","<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>"
"<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>"
"<android.app.Activity: boolean isLocalVoiceInteractionSupported()>","<android.app.Activity: boolean isLocalVoiceInteractionSupported()>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>"
"<android.view.View: float getTopFadingEdgeStrength()>","<android.view.View: float getTopFadingEdgeStrength()>"
"<java.lang.Long: long divideUnsigned(long,long)>","<java.lang.Long: long divideUnsigned(long,long)>"
"<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])>","<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])>"
"<java.nio.CharBuffer: java.nio.Buffer mark()>","<java.nio.CharBuffer: java.nio.Buffer mark()>"
"<android.view.View: void setPaddingRelative(int,int,int,int)>","<android.view.View: void setPaddingRelative(int,int,int,int)>"
"<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>","<android.app.Fragment: void startActivity(android.content.Intent,android.os.Bundle)>"
"<android.view.ViewGroup: void removeViewsInLayout(int,int)>","<android.view.ViewGroup: void removeViewsInLayout(int,int)>"
"<android.graphics.drawable.BitmapDrawable: void setAutoMirrored(boolean)>","<android.graphics.drawable.BitmapDrawable: void setAutoMirrored(boolean)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.net.InetAddress)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyAddress(java.net.InetAddress)>"
"<java.util.Collection: boolean add(java.lang.Object)>","<java.util.Collection: boolean add(java.lang.Object)>"
"<java.time.OffsetTime: int compareTo(java.time.OffsetTime)>","<java.time.OffsetTime: int compareTo(java.time.OffsetTime)>"
"<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>","<android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)>"
"<android.content.Context: java.lang.String getString(int,java.lang.Object[])>","<android.content.Context: java.lang.String getString(int,java.lang.Object[])>"
"<android.content.pm.PackageManager$ApplicationInfoFlags: android.content.pm.PackageManager$ApplicationInfoFlags of(long)>","<android.content.pm.PackageManager$ApplicationInfoFlags: android.content.pm.PackageManager$ApplicationInfoFlags of(long)>"
"<android.os.Parcelable$Creator: java.lang.Object[] newArray(int)>","<android.os.Parcelable$Creator: java.lang.Object[] newArray(int)>"
"<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>","<java.net.URLConnection: java.net.FileNameMap getFileNameMap()>"
"<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>","<android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>","<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setBufferSizeInBytes(int)>","<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setBufferSizeInBytes(int)>"
"<android.animation.Animator: void setStartDelay(long)>","<android.animation.Animator: void setStartDelay(long)>"
"<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>"
"<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>","<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>"
"<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>","<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>"
"<android.view.WindowManager$LayoutParams: int getFitInsetsSides()>","<android.view.WindowManager$LayoutParams: int getFitInsetsSides()>"
"<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>"
"<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBitmapEffect(android.graphics.Bitmap)>"
"<android.media.AudioTrack: void registerStreamEventCallback(java.util.concurrent.Executor,android.media.AudioTrack$StreamEventCallback)>","<android.media.AudioTrack: void registerStreamEventCallback(java.util.concurrent.Executor,android.media.AudioTrack$StreamEventCallback)>"
"<android.util.ArrayMap: boolean equals(java.lang.Object)>","<android.util.ArrayMap: boolean equals(java.lang.Object)>"
"<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>","<android.database.DatabaseErrorHandler: void onCorruption(android.database.sqlite.SQLiteDatabase)>"
"<android.app.Activity: void onAttachedToWindow()>","<android.app.Activity: void onAttachedToWindow()>"
"<android.content.ComponentName: int compareTo(android.content.ComponentName)>","<android.content.ComponentName: int compareTo(android.content.ComponentName)>"
"<android.os.Process: int myTid()>","<android.os.Process: int myTid()>"
"<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>","<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>"
"<android.graphics.ColorSpace$Rgb: float[] getPrimaries()>","<android.graphics.ColorSpace$Rgb: float[] getPrimaries()>"
"<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>","<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>"
"<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>","<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>"
"<android.animation.StateListAnimator: java.lang.Object clone()>","<android.animation.StateListAnimator: java.lang.Object clone()>"
"<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>","<android.content.BroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)>"
"<android.graphics.RenderNode: float getRotationZ()>","<android.graphics.RenderNode: float getRotationZ()>"
"<android.text.Layout: int getLineDescent(int)>","<android.text.Layout: int getLineDescent(int)>"
"<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()>","<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureRequestKeys()>"
"<java.lang.Math: long round(double)>","<java.lang.Math: long round(double)>"
"<android.view.View: void invalidateOutline()>","<android.view.View: void invalidateOutline()>"
"<android.graphics.Shader$TileMode: void <clinit>()>","<android.graphics.Shader$TileMode: void <clinit>()>"
"<android.telephony.TelephonyManager: void setCallComposerStatus(int)>","<android.telephony.TelephonyManager: void setCallComposerStatus(int)>"
"<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onIdle(android.hardware.camera2.CameraOfflineSession)>","<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onIdle(android.hardware.camera2.CameraOfflineSession)>"
"<java.net.InetAddress: boolean isLinkLocalAddress()>","<java.net.InetAddress: boolean isLinkLocalAddress()>"
"<android.view.View: void cancelLongPress()>","<android.view.View: void cancelLongPress()>"
"<android.graphics.Rect: int hashCode()>","<android.graphics.Rect: int hashCode()>"
"<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,android.icu.util.ULocale)>"
"<android.telephony.TelephonyManager: boolean isSmsCapable()>","<android.telephony.TelephonyManager: boolean isSmsCapable()>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence,java.lang.String,android.content.Intent,android.net.Uri)>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.util.SparseBooleanArray: void put(int,boolean)>","<android.util.SparseBooleanArray: void put(int,boolean)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>"
"<android.telephony.PreciseDataConnectionState: int hashCode()>","<android.telephony.PreciseDataConnectionState: int hashCode()>"
"<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Window: boolean hasChildren()>","<android.view.Window: boolean hasChildren()>"
"<android.net.Network: void <init>()>","<android.net.Network: void <init>()>"
"<java.util.Date: boolean before(java.util.Date)>","<java.util.Date: boolean before(java.util.Date)>"
"<android.content.res.Configuration: int getLayoutDirection()>","<android.content.res.Configuration: int getLayoutDirection()>"
"<android.view.ViewGroup: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.ViewGroup: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>","<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>"
"<java.util.concurrent.ExecutionException: void <init>(java.lang.String,java.lang.Throwable)>","<java.util.concurrent.ExecutionException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.stream.LongStream: java.util.OptionalLong findFirst()>","<java.util.stream.LongStream: java.util.OptionalLong findFirst()>"
"<java.lang.Math: long incrementExact(long)>","<java.lang.Math: long incrementExact(long)>"
"<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse build()>","<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse build()>"
"<android.app.Activity: boolean isDestroyed()>","<android.app.Activity: boolean isDestroyed()>"
"<java.net.DatagramSocketImpl: java.lang.Object getOption(java.net.SocketOption)>","<java.net.DatagramSocketImpl: java.lang.Object getOption(java.net.SocketOption)>"
"<android.telephony.TelephonyManager: java.lang.String getImei(int)>","<android.telephony.TelephonyManager: java.lang.String getImei(int)>"
"<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getBaseUnit()>","<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getBaseUnit()>"
"<android.icu.util.ULocale: java.lang.String getISO3Language()>","<android.icu.util.ULocale: java.lang.String getISO3Language()>"
"<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator identity()>","<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator identity()>"
"<android.media.MediaPlayer: void attachAuxEffect(int)>","<android.media.MediaPlayer: void attachAuxEffect(int)>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.lang.AssertionError: void <init>(char)>","<java.lang.AssertionError: void <init>(char)>"
"<android.widget.TextView: java.lang.String[] getAutofillHints()>","<android.widget.TextView: java.lang.String[] getAutofillHints()>"
"<java.security.ProtectionDomain: boolean implies(java.security.Permission)>","<java.security.ProtectionDomain: boolean implies(java.security.Permission)>"
"<android.os.Bundle: void <clinit>()>","<android.os.Bundle: void <clinit>()>"
"<android.view.View: boolean isKeyboardNavigationCluster()>","<android.view.View: boolean isKeyboardNavigationCluster()>"
"<java.nio.ShortBuffer: java.nio.Buffer clear()>","<java.nio.ShortBuffer: java.nio.Buffer clear()>"
"<android.widget.ListView: int getFooterViewsCount()>","<android.widget.ListView: int getFooterViewsCount()>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.media.AudioTrack: void flush()>","<android.media.AudioTrack: void flush()>"
"<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>","<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>"
"<android.view.ActionMode: int getType()>","<android.view.ActionMode: int getType()>"
"<android.view.WindowInsets: boolean isConsumed()>","<android.view.WindowInsets: boolean isConsumed()>"
"<java.lang.invoke.VarHandle: boolean weakCompareAndSetAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: boolean weakCompareAndSetAcquire(java.lang.Object[])>"
"<android.net.Uri: boolean isOpaque()>","<android.net.Uri: boolean isOpaque()>"
"<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>","<android.widget.AbsListView: boolean performItemClick(android.view.View,int,long)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setApnTypeBitmask(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setApnTypeBitmask(int)>"
"<java.nio.MappedByteBuffer: void <init>()>","<java.nio.MappedByteBuffer: void <init>()>"
"<android.view.InputDevice: boolean[] hasKeys(int[])>","<android.view.InputDevice: boolean[] hasKeys(int[])>"
"<android.graphics.ColorSpace$Rgb: boolean isSrgb()>","<android.graphics.ColorSpace$Rgb: boolean isSrgb()>"
"<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>"
"<android.graphics.Color: float green()>","<android.graphics.Color: float green()>"
"<android.media.AudioManager: void loadSoundEffects()>","<android.media.AudioManager: void loadSoundEffects()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,float)>"
"<android.app.Activity: void runOnUiThread(java.lang.Runnable)>","<android.app.Activity: void runOnUiThread(java.lang.Runnable)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedVideoSizes()>"
"<android.hardware.lights.Light: int getId()>","<android.hardware.lights.Light: int getId()>"
"<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int,java.util.List)>","<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int,java.util.List)>"
"<android.content.pm.PackageInfo: void <clinit>()>","<android.content.pm.PackageInfo: void <clinit>()>"
"<android.media.RemoteControlClient$OnMetadataUpdateListener: void onMetadataUpdate(int,java.lang.Object)>","<android.media.RemoteControlClient$OnMetadataUpdateListener: void onMetadataUpdate(int,java.lang.Object)>"
"<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.lang.Object)>"
"<java.util.AbstractMap: java.lang.Object clone()>","<java.util.AbstractMap: java.lang.Object clone()>"
"<java.lang.reflect.Field: int getInt(java.lang.Object)>","<java.lang.reflect.Field: int getInt(java.lang.Object)>"
"<java.util.Map: void forEach(java.util.function.BiConsumer)>","<java.util.Map: void forEach(java.util.function.BiConsumer)>"
"<android.content.Intent: void writeToParcel(android.os.Parcel,int)>","<android.content.Intent: void writeToParcel(android.os.Parcel,int)>"
"<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>","<android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)>"
"<android.view.translation.ViewTranslationResponse$Builder: void <init>(android.view.autofill.AutofillId)>","<android.view.translation.ViewTranslationResponse$Builder: void <init>(android.view.autofill.AutofillId)>"
"<android.hardware.display.DisplayManager: void <init>()>","<android.hardware.display.DisplayManager: void <init>()>"
"<android.graphics.Paint: void setElegantTextHeight(boolean)>","<android.graphics.Paint: void setElegantTextHeight(boolean)>"
"<android.telephony.TelephonyDisplayInfo: void <clinit>()>","<android.telephony.TelephonyDisplayInfo: void <clinit>()>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <init>()>"
"<android.net.NetworkRequest: boolean hasTransport(int)>","<android.net.NetworkRequest: boolean hasTransport(int)>"
"<android.graphics.Path: void lineTo(float,float)>","<android.graphics.Path: void lineTo(float,float)>"
"<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>","<android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)>"
"<java.util.Locale: boolean equals(java.lang.Object)>","<java.util.Locale: boolean equals(java.lang.Object)>"
"<java.lang.String: int length()>","<java.lang.String: int length()>"
"<android.hardware.camera2.params.InputConfiguration: void <init>(int,int,int)>","<android.hardware.camera2.params.InputConfiguration: void <init>(int,int,int)>"
"<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>","<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object peek()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object peek()>"
"<android.view.Display: android.view.DisplayCutout getCutout()>","<android.view.Display: android.view.DisplayCutout getCutout()>"
"<java.io.InputStream: int available()>","<java.io.InputStream: int available()>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)>"
"<android.content.res.AssetFileDescriptor: long getStartOffset()>","<android.content.res.AssetFileDescriptor: long getStartOffset()>"
"<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>","<java.util.function.LongBinaryOperator: long applyAsLong(long,long)>"
"<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>","<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>"
"<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>","<android.util.AttributeSet: int getAttributeListValue(int,java.lang.String[],int)>"
"<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>","<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>"
"<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>","<java.nio.IntBuffer: java.nio.IntBuffer asReadOnlyBuffer()>"
"<android.media.metrics.LogSessionId: boolean equals(java.lang.Object)>","<android.media.metrics.LogSessionId: boolean equals(java.lang.Object)>"
"<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>","<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>"
"<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>","<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>"
"<java.lang.ThreadGroup: void list()>","<java.lang.ThreadGroup: void list()>"
"<android.os.VibrationEffect: void <init>()>","<android.os.VibrationEffect: void <init>()>"
"<android.view.View: java.lang.String toString()>","<android.view.View: java.lang.String toString()>"
"<android.view.View: void setScrollContainer(boolean)>","<android.view.View: void setScrollContainer(boolean)>"
"<android.view.textclassifier.TextClassifier: boolean isDestroyed()>","<android.view.textclassifier.TextClassifier: boolean isDestroyed()>"
"<android.media.MediaDrm$ProvisionRequest: byte[] getData()>","<android.media.MediaDrm$ProvisionRequest: byte[] getData()>"
"<android.media.session.MediaController$TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void prepareFromSearch(java.lang.String,android.os.Bundle)>"
"<android.app.ActionBar: void setLogo(int)>","<android.app.ActionBar: void setLogo(int)>"
"<android.content.Loader: void onStopLoading()>","<android.content.Loader: void onStopLoading()>"
"<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()>","<android.media.session.MediaSession: android.media.session.MediaSession$Token getSessionToken()>"
"<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>","<android.view.Menu: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>"
"<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration build()>","<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration build()>"
"<java.util.regex.Matcher: int end(int)>","<java.util.regex.Matcher: int end(int)>"
"<java.lang.Math: double sin(double)>","<java.lang.Math: double sin(double)>"
"<java.util.function.LongFunction: java.lang.Object apply(long)>","<java.util.function.LongFunction: java.lang.Object apply(long)>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>"
"<android.telephony.TelephonyManager$CellInfoCallback: void <init>()>","<android.telephony.TelephonyManager$CellInfoCallback: void <init>()>"
"<java.util.Arrays: boolean equals(short[],int,int,short[],int,int)>","<java.util.Arrays: boolean equals(short[],int,int,short[],int,int)>"
"<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()>","<android.media.AudioRecord: android.media.AudioDeviceInfo getPreferredDevice()>"
"<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>","<android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)>"
"<java.lang.'annotation'.Annotation: boolean equals(java.lang.Object)>","<java.lang.'annotation'.Annotation: boolean equals(java.lang.Object)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>"
"<android.content.ComponentName: int hashCode()>","<android.content.ComponentName: int hashCode()>"
"<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>","<java.nio.file.spi.FileSystemProvider: void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>"
"<java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>","<java.util.Comparator: java.util.Comparator nullsFirst(java.util.Comparator)>"
"<java.nio.charset.Charset: int hashCode()>","<java.nio.charset.Charset: int hashCode()>"
"<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>"
"<android.view.View: void setScrollBarFadeDuration(int)>","<android.view.View: void setScrollBarFadeDuration(int)>"
"<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>","<java.util.Properties: void storeToXML(java.io.OutputStream,java.lang.String,java.lang.String)>"
"<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>","<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>"
"<android.icu.util.ULocale: java.lang.String getISO3Country()>","<android.icu.util.ULocale: java.lang.String getISO3Country()>"
"<android.app.PictureInPictureParams: java.lang.CharSequence getSubtitle()>","<android.app.PictureInPictureParams: java.lang.CharSequence getSubtitle()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>"
"<android.view.WindowInsets: android.graphics.Rect getPrivacyIndicatorBounds()>","<android.view.WindowInsets: android.graphics.Rect getPrivacyIndicatorBounds()>"
"<java.util.SortedSet: java.util.Comparator comparator()>","<java.util.SortedSet: java.util.Comparator comparator()>"
"<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence[],java.lang.CharSequence)>","<android.app.VoiceInteractor$Prompt: void <init>(java.lang.CharSequence[],java.lang.CharSequence)>"
"<android.view.InputDevice: int getSources()>","<android.view.InputDevice: int getSources()>"
"<android.media.AudioDeviceCallback: void onAudioDevicesRemoved(android.media.AudioDeviceInfo[])>","<android.media.AudioDeviceCallback: void onAudioDevicesRemoved(android.media.AudioDeviceInfo[])>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>"
"<java.util.NavigableSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>","<java.util.NavigableSet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>"
"<java.lang.VirtualMachineError: void <init>()>","<java.lang.VirtualMachineError: void <init>()>"
"<java.security.Provider: void load(java.io.InputStream)>","<java.security.Provider: void load(java.io.InputStream)>"
"<java.util.Arrays: int mismatch(boolean[],boolean[])>","<java.util.Arrays: int mismatch(boolean[],boolean[])>"
"<java.util.Deque: java.lang.Object removeLast()>","<java.util.Deque: java.lang.Object removeLast()>"
"<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>","<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>"
"<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>","<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>"
"<android.hardware.lights.Light: boolean hasBrightnessControl()>","<android.hardware.lights.Light: boolean hasBrightnessControl()>"
"<android.view.WindowInsetsAnimation: float getFraction()>","<android.view.WindowInsetsAnimation: float getFraction()>"
"<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getSource()>","<android.graphics.ColorSpace$Connector: android.graphics.ColorSpace getSource()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>"
"<android.widget.Adapter: boolean isEmpty()>","<android.widget.Adapter: boolean isEmpty()>"
"<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>","<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int,android.view.inputmethod.TextAttribute)>"
"<android.hardware.camera2.CameraManager$TorchCallback: void onTorchStrengthLevelChanged(java.lang.String,int)>","<android.hardware.camera2.CameraManager$TorchCallback: void onTorchStrengthLevelChanged(java.lang.String,int)>"
"<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy valueOf(java.lang.String)>","<java.lang.'annotation'.RetentionPolicy: java.lang.'annotation'.RetentionPolicy valueOf(java.lang.String)>"
"<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>","<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>"
"<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakStyle(int)>","<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakStyle(int)>"
"<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>","<android.view.inputmethod.InputConnection: boolean deleteSurroundingText(int,int)>"
"<android.content.IntentFilter: int describeContents()>","<android.content.IntentFilter: int describeContents()>"
"<android.widget.TextView: void debug(int)>","<android.widget.TextView: void debug(int)>"
"<android.media.Rating: android.media.Rating newThumbRating(boolean)>","<android.media.Rating: android.media.Rating newThumbRating(boolean)>"
"<java.time.LocalDate: boolean equals(java.lang.Object)>","<java.time.LocalDate: boolean equals(java.lang.Object)>"
"<java.util.Spliterator: java.util.Spliterator trySplit()>","<java.util.Spliterator: java.util.Spliterator trySplit()>"
"<android.text.PrecomputedText$Params: boolean equals(java.lang.Object)>","<android.text.PrecomputedText$Params: boolean equals(java.lang.Object)>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo getRangeInfo()>"
"<java.net.Socket: void shutdownOutput()>","<java.net.Socket: void shutdownOutput()>"
"<android.icu.util.ULocale: java.util.Set getExtensionKeys()>","<android.icu.util.ULocale: java.util.Set getExtensionKeys()>"
"<android.widget.MediaController$MediaPlayerControl: boolean canSeekBackward()>","<android.widget.MediaController$MediaPlayerControl: boolean canSeekBackward()>"
"<android.text.Layout: float getLineLeft(int)>","<android.text.Layout: float getLineLeft(int)>"
"<java.lang.Byte: byte byteValue()>","<java.lang.Byte: byte byteValue()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>"
"<android.text.style.URLSpan: void <init>(android.os.Parcel)>","<android.text.style.URLSpan: void <init>(android.os.Parcel)>"
"<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType[] values()>","<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType[] values()>"
"<java.util.stream.Stream: void forEachOrdered(java.util.function.Consumer)>","<java.util.stream.Stream: void forEachOrdered(java.util.function.Consumer)>"
"<android.telephony.TelephonyManager: int getSimCarrierId()>","<android.telephony.TelephonyManager: int getSimCarrierId()>"
"<java.time.OffsetTime: int hashCode()>","<java.time.OffsetTime: int hashCode()>"
"<java.util.IntSummaryStatistics: long getSum()>","<java.util.IntSummaryStatistics: long getSum()>"
"<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateEpochDay(long)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateEpochDay(long)>"
"<android.app.Dialog: void onCreate(android.os.Bundle)>","<android.app.Dialog: void onCreate(android.os.Bundle)>"
"<android.content.BroadcastReceiver: boolean getDebugUnregister()>","<android.content.BroadcastReceiver: boolean getDebugUnregister()>"
"<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: boolean connect(java.net.SocketAddress)>"
"<android.view.View: android.view.ViewPropertyAnimator animate()>","<android.view.View: android.view.ViewPropertyAnimator animate()>"
"<java.nio.ByteBuffer: int getInt()>","<java.nio.ByteBuffer: int getInt()>"
"<android.media.AudioTrack: int getPlaybackHeadPosition()>","<android.media.AudioTrack: int getPlaybackHeadPosition()>"
"<java.lang.String: java.lang.String[] split(java.lang.String,int)>","<java.lang.String: java.lang.String[] split(java.lang.String,int)>"
"<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>","<android.view.WindowManager: android.view.WindowMetrics getCurrentWindowMetrics()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>","<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])>"
"<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>","<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>"
"<android.telephony.TelephonyCallback$MessageWaitingIndicatorListener: void onMessageWaitingIndicatorChanged(boolean)>","<android.telephony.TelephonyCallback$MessageWaitingIndicatorListener: void onMessageWaitingIndicatorChanged(boolean)>"
"<android.net.NetworkInfo: boolean isConnectedOrConnecting()>","<android.net.NetworkInfo: boolean isConnectedOrConnecting()>"
"<android.net.Uri: java.lang.String getUserInfo()>","<android.net.Uri: java.lang.String getUserInfo()>"
"<android.hardware.camera2.CaptureResult$Key: java.lang.String toString()>","<android.hardware.camera2.CaptureResult$Key: java.lang.String toString()>"
"<java.lang.Long: long lowestOneBit(long)>","<java.lang.Long: long lowestOneBit(long)>"
"<java.time.temporal.ChronoField: java.time.temporal.ChronoField[] values()>","<java.time.temporal.ChronoField: java.time.temporal.ChronoField[] values()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>"
"<android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)>","<android.media.AudioRecord: int read(java.nio.ByteBuffer,int,int)>"
"<java.io.PrintStream: void println(boolean)>","<java.io.PrintStream: void println(boolean)>"
"<android.view.View: void setAutofillHints(java.lang.String[])>","<android.view.View: void setAutofillHints(java.lang.String[])>"
"<android.graphics.Matrix: boolean preScale(float,float)>","<android.graphics.Matrix: boolean preScale(float,float)>"
"<android.app.Activity: void removeDialog(int)>","<android.app.Activity: void removeDialog(int)>"
"<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>","<android.text.Layout: android.text.Layout$Directions getLineDirections(int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreCreated(android.app.Activity,android.os.Bundle)>"
"<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>","<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>"
"<android.content.SyncAdapterType: int describeContents()>","<android.content.SyncAdapterType: int describeContents()>"
"<android.telephony.IccOpenLogicalChannelResponse: int describeContents()>","<android.telephony.IccOpenLogicalChannelResponse: int describeContents()>"
"<android.media.MediaPlayer: boolean setPreferredDevice(android.media.AudioDeviceInfo)>","<android.media.MediaPlayer: boolean setPreferredDevice(android.media.AudioDeviceInfo)>"
"<android.view.SurfaceControl: void finalize()>","<android.view.SurfaceControl: void finalize()>"
"<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>","<java.io.PrintStream: void <init>(java.lang.String,java.lang.String)>"
"<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>","<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>"
"<android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>","<android.media.MediaFormat: android.media.MediaFormat createVideoFormat(java.lang.String,int,int)>"
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<android.graphics.drawable.Drawable: int getIntrinsicWidth()>","<android.graphics.drawable.Drawable: int getIntrinsicWidth()>"
"<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)>","<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$AvailabilityCallback)>"
"<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>","<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>"
"<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>","<android.widget.RemoteViews: void setIcon(int,java.lang.String,android.graphics.drawable.Icon)>"
"<android.media.AudioRecord: void release()>","<android.media.AudioRecord: void release()>"
"<android.view.autofill.AutofillValue: boolean isList()>","<android.view.autofill.AutofillValue: boolean isList()>"
"<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>","<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>"
"<android.view.inputmethod.TextAttribute: void <init>()>","<android.view.inputmethod.TextAttribute: void <init>()>"
"<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo build()>","<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo build()>"
"<java.lang.invoke.VarHandle$AccessMode: void <clinit>()>","<java.lang.invoke.VarHandle$AccessMode: void <clinit>()>"
"<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>","<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>"
"<java.util.HashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.util.HashMap: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>","<android.view.Menu: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>"
"<java.time.Instant: java.time.Instant ofEpochSecond(long)>","<java.time.Instant: java.time.Instant ofEpochSecond(long)>"
"<android.view.animation.LayoutAnimationController: void setOrder(int)>","<android.view.animation.LayoutAnimationController: void setOrder(int)>"
"<android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener)>","<android.view.Window: void removeOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener)>"
"<android.view.textclassifier.TextLinks: java.lang.String toString()>","<android.view.textclassifier.TextLinks: java.lang.String toString()>"
"<android.graphics.drawable.LayerDrawable: int addLayer(android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: int addLayer(android.graphics.drawable.Drawable)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int,int)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseOr(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseOr(java.lang.Object[])>"
"<android.media.session.MediaController$PlaybackInfo: int getCurrentVolume()>","<android.media.session.MediaController$PlaybackInfo: int getCurrentVolume()>"
"<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>","<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>"
"<android.widget.AdapterView: int getPositionForView(android.view.View)>","<android.widget.AdapterView: int getPositionForView(android.view.View)>"
"<android.telephony.PreciseDataConnectionState: int getNetworkType()>","<android.telephony.PreciseDataConnectionState: int getNetworkType()>"
"<android.os.Parcel: long readLong()>","<android.os.Parcel: long readLong()>"
"<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>","<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>"
"<java.util.AbstractList: int indexOf(java.lang.Object)>","<java.util.AbstractList: int indexOf(java.lang.Object)>"
"<java.util.regex.Pattern: java.lang.String quote(java.lang.String)>","<java.util.regex.Pattern: java.lang.String quote(java.lang.String)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(java.time.chrono.Era,int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(java.time.chrono.Era,int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>"
"<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>","<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setResultId(java.lang.String)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setResultId(java.lang.String)>"
"<android.window.SplashScreenView: void remove()>","<android.window.SplashScreenView: void remove()>"
"<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>","<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()>"
"<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>"
"<android.app.Activity: void closeOptionsMenu()>","<android.app.Activity: void closeOptionsMenu()>"
"<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>","<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,int)>"
"<android.media.AudioManager: void registerMediaButtonEventReceiver(android.app.PendingIntent)>","<android.media.AudioManager: void registerMediaButtonEventReceiver(android.app.PendingIntent)>"
"<android.graphics.RecordingCanvas: int getMaximumBitmapWidth()>","<android.graphics.RecordingCanvas: int getMaximumBitmapWidth()>"
"<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>","<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbTitle()>"
"<java.lang.Character$Subset: java.lang.String toString()>","<java.lang.Character$Subset: java.lang.String toString()>"
"<java.io.File: boolean setWritable(boolean,boolean)>","<java.io.File: boolean setWritable(boolean,boolean)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusMonths(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusMonths(long)>"
"<android.graphics.Typeface: boolean isItalic()>","<android.graphics.Typeface: boolean isItalic()>"
"<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>","<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>"
"<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>","<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>"
"<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>","<android.text.TextUtils$StringSplitter: void setString(java.lang.String)>"
"<java.nio.file.attribute.FileAttribute: java.lang.String name()>","<java.nio.file.attribute.FileAttribute: java.lang.String name()>"
"<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>","<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)>"
"<android.graphics.Region: boolean quickReject(int,int,int,int)>","<android.graphics.Region: boolean quickReject(int,int,int,int)>"
"<java.lang.Class: java.lang.Object[] getSigners()>","<java.lang.Class: java.lang.Object[] getSigners()>"
"<android.media.MediaDrm: void clearOnEventListener()>","<android.media.MediaDrm: void clearOnEventListener()>"
"<android.icu.util.ULocale: java.lang.String getCountry(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getCountry(java.lang.String)>"
"<android.widget.TextView: void setGravity(int)>","<android.widget.TextView: void setGravity(int)>"
"<android.text.Layout: int getEllipsisStart(int)>","<android.text.Layout: int getEllipsisStart(int)>"
"<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>","<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setStatusBarColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setStatusBarColor(int)>"
"<android.widget.TextView: android.view.ActionMode$Callback getCustomInsertionActionModeCallback()>","<android.widget.TextView: android.view.ActionMode$Callback getCustomInsertionActionModeCallback()>"
"<android.view.textclassifier.SelectionEvent: int getEventType()>","<android.view.textclassifier.SelectionEvent: int getEventType()>"
"<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>","<android.view.WindowInsets: android.graphics.Insets getTappableElementInsets()>"
"<android.os.Debug: int getBinderDeathObjectCount()>","<android.os.Debug: int getBinderDeathObjectCount()>"
"<android.media.audiofx.AudioEffect: int setEnabled(boolean)>","<android.media.audiofx.AudioEffect: int setEnabled(boolean)>"
"<android.app.ActivityManager$RecentTaskInfo: void <init>()>","<android.app.ActivityManager$RecentTaskInfo: void <init>()>"
"<android.app.Person$Builder: android.app.Person$Builder setName(java.lang.CharSequence)>","<android.app.Person$Builder: android.app.Person$Builder setName(java.lang.CharSequence)>"
"<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>","<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>"
"<android.util.SparseArray: int contentHashCode()>","<android.util.SparseArray: int contentHashCode()>"
"<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>","<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
"<android.media.AudioRecord: int getChannelConfiguration()>","<android.media.AudioRecord: int getChannelConfiguration()>"
"<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>","<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>"
"<java.nio.FloatBuffer: boolean equals(java.lang.Object)>","<java.nio.FloatBuffer: boolean equals(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)>"
"<android.view.View: void setAccessibilityTraversalBefore(int)>","<android.view.View: void setAccessibilityTraversalBefore(int)>"
"<android.view.KeyCharacterMap: char getMatch(int,char[])>","<android.view.KeyCharacterMap: char getMatch(int,char[])>"
"<java.util.stream.Stream: long count()>","<java.util.stream.Stream: long count()>"
"<android.graphics.RenderNode: int getRight()>","<android.graphics.RenderNode: int getRight()>"
"<android.hardware.camera2.CameraExtensionSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback)>","<android.hardware.camera2.CameraExtensionSession: int setRepeatingRequest(android.hardware.camera2.CaptureRequest,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback)>"
"<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()>","<android.telephony.TelephonyManager: android.os.PersistableBundle getCarrierConfig()>"
"<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>","<android.view.View: boolean overScrollBy(int,int,int,int,int,int,int,int,boolean)>"
"<java.lang.invoke.VarHandle: boolean weakCompareAndSetRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: boolean weakCompareAndSetRelease(java.lang.Object[])>"
"<android.media.AudioManager: void startBluetoothSco()>","<android.media.AudioManager: void startBluetoothSco()>"
"<android.widget.Toolbar: void onMeasure(int,int)>","<android.widget.Toolbar: void onMeasure(int,int)>"
"<java.util.Optional: int hashCode()>","<java.util.Optional: int hashCode()>"
"<android.content.pm.PackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()>","<android.content.pm.PackageManager: java.lang.CharSequence getBackgroundPermissionOptionLabel()>"
"<java.nio.LongBuffer: java.nio.Buffer clear()>","<java.nio.LongBuffer: java.nio.Buffer clear()>"
"<android.view.animation.Animation: void setDuration(long)>","<android.view.animation.Animation: void setDuration(long)>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)>","<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)>"
"<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUri(android.net.Uri)>","<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUri(android.net.Uri)>"
"<android.widget.AdapterView: void dispatchSaveInstanceState(android.util.SparseArray)>","<android.widget.AdapterView: void dispatchSaveInstanceState(android.util.SparseArray)>"
"<android.content.res.Resources: java.lang.String getQuantityString(int,int)>","<android.content.res.Resources: java.lang.String getQuantityString(int,int)>"
"<java.lang.StringBuilder: int codePointBefore(int)>","<java.lang.StringBuilder: int codePointBefore(int)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setExcludedTypes(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setExcludedTypes(java.util.Collection)>"
"<android.widget.AbsListView$SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)>","<android.widget.AbsListView$SelectionBoundsAdjuster: void adjustListItemSelectionBounds(android.graphics.Rect)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>","<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFpsRange()>"
"<java.time.DayOfWeek: void <clinit>()>","<java.time.DayOfWeek: void <clinit>()>"
"<android.view.WindowManager$LayoutParams: void setColorMode(int)>","<android.view.WindowManager$LayoutParams: void setColorMode(int)>"
"<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>","<android.text.TextWatcher: void afterTextChanged(android.text.Editable)>"
"<android.graphics.RecordingCanvas: boolean isHardwareAccelerated()>","<android.graphics.RecordingCanvas: boolean isHardwareAccelerated()>"
"<android.content.res.Configuration: boolean needNewResources(int,int)>","<android.content.res.Configuration: boolean needNewResources(int,int)>"
"<java.io.Writer: java.io.Writer nullWriter()>","<java.io.Writer: java.io.Writer nullWriter()>"
"<android.app.VoiceInteractor$ConfirmationRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>","<android.app.VoiceInteractor$ConfirmationRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
"<java.nio.ByteBuffer: byte get()>","<java.nio.ByteBuffer: byte get()>"
"<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailablePhysicalCameraRequestKeys()>","<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailablePhysicalCameraRequestKeys()>"
"<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>","<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>"
"<android.view.View: android.view.autofill.AutofillId getAutofillId()>","<android.view.View: android.view.autofill.AutofillId getAutofillId()>"
"<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>","<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>"
"<java.util.AbstractMap: int hashCode()>","<java.util.AbstractMap: int hashCode()>"
"<android.widget.ListView: void onDetachedFromWindow()>","<android.widget.ListView: void onDetachedFromWindow()>"
"<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>","<android.view.Window: void setAllowReturnTransitionOverlap(boolean)>"
"<java.security.Timestamp: java.lang.String toString()>","<java.security.Timestamp: java.lang.String toString()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.LocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextSelection)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextSelection)>"
"<java.util.Arrays: void parallelSort(int[],int,int)>","<java.util.Arrays: void parallelSort(int[],int,int)>"
"<android.graphics.Outline: boolean getRect(android.graphics.Rect)>","<android.graphics.Outline: boolean getRect(android.graphics.Rect)>"
"<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>","<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>"
"<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.net.URI: java.net.URI resolve(java.lang.String)>","<java.net.URI: java.net.URI resolve(java.lang.String)>"
"<java.util.Locale: java.lang.String[] getISOCountries()>","<java.util.Locale: java.lang.String[] getISOCountries()>"
"<java.util.Hashtable: void <init>(int)>","<java.util.Hashtable: void <init>(int)>"
"<android.content.ContentResolver: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)>","<android.content.ContentResolver: android.content.ContentResolver$MimeTypeInfo getTypeInfo(java.lang.String)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>"
"<java.net.DatagramSocketImpl: void close()>","<java.net.DatagramSocketImpl: void close()>"
"<java.util.stream.LongStream$Builder: void accept(long)>","<java.util.stream.LongStream$Builder: void accept(long)>"
"<android.net.ProxyInfo: void <init>(android.net.ProxyInfo)>","<android.net.ProxyInfo: void <init>(android.net.ProxyInfo)>"
"<android.transition.Transition: java.util.List getTargets()>","<android.transition.Transition: java.util.List getTargets()>"
"<android.content.ContentProvider: java.lang.String getCallingPackage()>","<android.content.ContentProvider: java.lang.String getCallingPackage()>"
"<android.view.ViewStructure: android.os.Bundle getExtras()>","<android.view.ViewStructure: android.os.Bundle getExtras()>"
"<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>","<java.util.PrimitiveIterator$OfDouble: void forEachRemaining(java.util.function.DoubleConsumer)>"
"<android.view.inputmethod.InputConnection: java.lang.CharSequence getSelectedText(int)>","<android.view.inputmethod.InputConnection: java.lang.CharSequence getSelectedText(int)>"
"<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>(android.database.sqlite.SQLiteDatabase$OpenParams)>"
"<android.view.textclassifier.TextLinks$TextLink: void <clinit>()>","<android.view.textclassifier.TextLinks$TextLink: void <clinit>()>"
"<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>","<android.view.KeyCharacterMap: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])>"
"<java.util.Set: java.util.Set copyOf(java.util.Collection)>","<java.util.Set: java.util.Set copyOf(java.util.Collection)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnIndex()>"
"<android.util.AttributeSet: int getAttributeIntValue(int,int)>","<android.util.AttributeSet: int getAttributeIntValue(int,int)>"
"<android.util.SparseBooleanArray: boolean get(int)>","<android.util.SparseBooleanArray: boolean get(int)>"
"<java.lang.SecurityException: void <init>(java.lang.String)>","<java.lang.SecurityException: void <init>(java.lang.String)>"
"<java.util.Arrays: float[] copyOf(float[],int)>","<java.util.Arrays: float[] copyOf(float[],int)>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()>","<android.media.session.MediaSessionManager$RemoteUserInfo: int getUid()>"
"<android.widget.TextView: void setError(java.lang.CharSequence)>","<android.widget.TextView: void setError(java.lang.CharSequence)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEntityTypes(java.lang.String[])>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEntityTypes(java.lang.String[])>"
"<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>","<android.view.Window: boolean performContextMenuIdentifierAction(int,int)>"
"<android.content.res.ColorStateList: boolean isStateful()>","<android.content.res.ColorStateList: boolean isStateful()>"
"<android.hardware.HardwareBuffer: void finalize()>","<android.hardware.HardwareBuffer: void finalize()>"
"<android.view.WindowId: boolean equals(java.lang.Object)>","<android.view.WindowId: boolean equals(java.lang.Object)>"
"<android.content.ContextWrapper: java.lang.String getAttributionTag()>","<android.content.ContextWrapper: java.lang.String getAttributionTag()>"
"<java.nio.channels.spi.AbstractSelector: void begin()>","<java.nio.channels.spi.AbstractSelector: void begin()>"
"<java.lang.reflect.Executable: boolean isVarArgs()>","<java.lang.reflect.Executable: boolean isVarArgs()>"
"<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.SyncAdapterType: boolean isUserVisible()>","<android.content.SyncAdapterType: boolean isUserVisible()>"
"<java.lang.Float: double doubleValue()>","<java.lang.Float: double doubleValue()>"
"<org.xmlpull.v1.XmlSerializer: void flush()>","<org.xmlpull.v1.XmlSerializer: void flush()>"
"<android.icu.util.ULocale$AvailableType: void <init>(java.lang.String,int)>","<android.icu.util.ULocale$AvailableType: void <init>(java.lang.String,int)>"
"<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>","<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,android.icu.util.ULocale)>"
"<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)>","<android.hardware.Camera$Parameters: void setWhiteBalance(java.lang.String)>"
"<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>","<java.nio.channels.spi.AbstractSelector: void implCloseSelector()>"
"<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage build()>","<android.view.textclassifier.TextLanguage$Builder: android.view.textclassifier.TextLanguage build()>"
"<java.time.LocalTime: int get(java.time.temporal.TemporalField)>","<java.time.LocalTime: int get(java.time.temporal.TemporalField)>"
"<android.hardware.camera2.CameraExtensionCharacteristics: void <init>()>","<android.hardware.camera2.CameraExtensionCharacteristics: void <init>()>"
"<android.graphics.Bitmap: void setPremultiplied(boolean)>","<android.graphics.Bitmap: void setPremultiplied(boolean)>"
"<java.lang.String: java.lang.String valueOf(char)>","<java.lang.String: java.lang.String valueOf(char)>"
"<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)>","<android.widget.MediaController: void setMediaPlayer(android.widget.MediaController$MediaPlayerControl)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.graphics.RecordingCanvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>"
"<android.view.accessibility.AccessibilityWindowInfo: int getType()>","<android.view.accessibility.AccessibilityWindowInfo: int getType()>"
"<java.time.chrono.ChronoLocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.chrono.ChronoLocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>","<java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)>"
"<android.media.session.MediaController$PlaybackInfo: int getVolumeControl()>","<android.media.session.MediaController$PlaybackInfo: int getVolumeControl()>"
"<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>","<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>"
"<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String)>"
"<android.widget.AbsListView: void onCancelPendingInputEvents()>","<android.widget.AbsListView: void onCancelPendingInputEvents()>"
"<java.time.Month: java.time.Month firstMonthOfQuarter()>","<java.time.Month: java.time.Month firstMonthOfQuarter()>"
"<java.time.Duration: java.time.Duration plusMinutes(long)>","<java.time.Duration: java.time.Duration plusMinutes(long)>"
"<android.icu.util.ULocale: java.lang.String getDisplayName(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayName(android.icu.util.ULocale)>"
"<android.view.Display: android.view.Display$Mode[] getSupportedModes()>","<android.view.Display: android.view.Display$Mode[] getSupportedModes()>"
"<android.graphics.drawable.LayerDrawable: int getLayerInsetStart(int)>","<android.graphics.drawable.LayerDrawable: int getLayerInsetStart(int)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordEndIndex()>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<android.view.Display: int getFlags()>","<android.view.Display: int getFlags()>"
"<android.view.KeyEvent: int getModifiers()>","<android.view.KeyEvent: int getModifiers()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object[] toArray()>"
"<android.hardware.camera2.params.OutputConfiguration: void writeToParcel(android.os.Parcel,int)>","<android.hardware.camera2.params.OutputConfiguration: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setExtras(android.os.Bundle)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setExtras(android.os.Bundle)>"
"<android.view.ContentInfo: android.content.ClipData getClip()>","<android.view.ContentInfo: android.content.ClipData getClip()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(float)>"
"<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>","<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>"
"<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>","<java.lang.reflect.Parameter: java.lang.reflect.Type getParameterizedType()>"
"<java.lang.Package: java.lang.String toString()>","<java.lang.Package: java.lang.String toString()>"
"<java.util.Optional: void <init>()>","<java.util.Optional: void <init>()>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setContext(android.content.Context)>","<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setContext(android.content.Context)>"
"<java.lang.reflect.Array: short getShort(java.lang.Object,int)>","<java.lang.reflect.Array: short getShort(java.lang.Object,int)>"
"<android.media.Image: int getHeight()>","<android.media.Image: int getHeight()>"
"<java.lang.Character: boolean isTitleCase(int)>","<java.lang.Character: boolean isTitleCase(int)>"
"<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(int,boolean)>"
"<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>","<java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)>"
"<java.util.regex.Matcher: int end()>","<java.util.regex.Matcher: int end()>"
"<java.lang.reflect.Method: java.lang.Object getDefaultValue()>","<java.lang.reflect.Method: java.lang.Object getDefaultValue()>"
"<android.view.MotionEvent: void setEdgeFlags(int)>","<android.view.MotionEvent: void setEdgeFlags(int)>"
"<java.time.format.TextStyle: java.time.format.TextStyle asStandalone()>","<java.time.format.TextStyle: java.time.format.TextStyle asStandalone()>"
"<java.lang.SecurityManager: void checkPropertiesAccess()>","<java.lang.SecurityManager: void checkPropertiesAccess()>"
"<android.view.View: void buildDrawingCache()>","<android.view.View: void buildDrawingCache()>"
"<android.app.ActionBar: void setIcon(int)>","<android.app.ActionBar: void setIcon(int)>"
"<java.util.stream.DoubleStream: java.util.PrimitiveIterator$OfDouble iterator()>","<java.util.stream.DoubleStream: java.util.PrimitiveIterator$OfDouble iterator()>"
"<android.content.AttributionSource: boolean isTrusted(android.content.Context)>","<android.content.AttributionSource: boolean isTrusted(android.content.Context)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])>"
"<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>","<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>"
"<android.telephony.data.ApnSetting: int getMtuV4()>","<android.telephony.data.ApnSetting: int getMtuV4()>"
"<java.nio.FloatBuffer: float[] array()>","<java.nio.FloatBuffer: float[] array()>"
"<android.widget.TextView: int getCompoundPaddingRight()>","<android.widget.TextView: int getCompoundPaddingRight()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<java.util.stream.IntStream: int[] toArray()>","<java.util.stream.IntStream: int[] toArray()>"
"<android.os.Debug: void resetGlobalFreedCount()>","<android.os.Debug: void resetGlobalFreedCount()>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent$Builder: void <init>(int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>","<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>"
"<android.widget.AbsListView: boolean showContextMenu(float,float)>","<android.widget.AbsListView: boolean showContextMenu(float,float)>"
"<android.view.WindowInsetsAnimation: int getTypeMask()>","<android.view.WindowInsetsAnimation: int getTypeMask()>"
"<android.widget.TextView: void setMaxLines(int)>","<android.widget.TextView: void setMaxLines(int)>"
"<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>","<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>"
"<java.lang.NoSuchFieldError: void <init>(java.lang.String)>","<java.lang.NoSuchFieldError: void <init>(java.lang.String)>"
"<android.hardware.camera2.params.OutputConfiguration: void removeSensorPixelModeUsed(int)>","<android.hardware.camera2.params.OutputConfiguration: void removeSensorPixelModeUsed(int)>"
"<android.os.Message: void setTarget(android.os.Handler)>","<android.os.Message: void setTarget(android.os.Handler)>"
"<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>","<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>"
"<android.view.contentcapture.ContentCaptureSessionId: int hashCode()>","<android.view.contentcapture.ContentCaptureSessionId: int hashCode()>"
"<java.util.Date: void setMonth(int)>","<java.util.Date: void setMonth(int)>"
"<java.nio.file.Path: java.nio.file.Path getFileName()>","<java.nio.file.Path: java.nio.file.Path getFileName()>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>"
"<android.media.session.PlaybackState$CustomAction: java.lang.String toString()>","<android.media.session.PlaybackState$CustomAction: java.lang.String toString()>"
"<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void <init>(android.view.SurfaceControlViewHost$SurfacePackage)>","<android.view.SurfaceControlViewHost$SurfacePackage: void <init>(android.view.SurfaceControlViewHost$SurfacePackage)>"
"<android.content.Context: void updateServiceGroup(android.content.ServiceConnection,int,int)>","<android.content.Context: void updateServiceGroup(android.content.ServiceConnection,int,int)>"
"<java.lang.'annotation'.Target: java.lang.'annotation'.ElementType[] value()>","<java.lang.'annotation'.Target: java.lang.'annotation'.ElementType[] value()>"
"<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>","<java.nio.channels.MembershipKey: java.net.NetworkInterface networkInterface()>"
"<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<java.util.PrimitiveIterator$OfLong: long nextLong()>","<java.util.PrimitiveIterator$OfLong: long nextLong()>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(android.content.pm.VersionedPackage,int)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<java.net.InetAddress: boolean isMulticastAddress()>","<java.net.InetAddress: boolean isMulticastAddress()>"
"<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,int)>","<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,int)>"
"<android.view.animation.Animation: float resolveSize(int,float,int,int)>","<android.view.animation.Animation: float resolveSize(int,float,int,int)>"
"<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>","<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>"
"<android.app.Activity: android.view.Window getWindow()>","<android.app.Activity: android.view.Window getWindow()>"
"<java.time.Period: int getMonths()>","<java.time.Period: int getMonths()>"
"<java.lang.Math: double toDegrees(double)>","<java.lang.Math: double toDegrees(double)>"
"<android.view.ViewStructure$HtmlInfo: java.lang.String getTag()>","<android.view.ViewStructure$HtmlInfo: java.lang.String getTag()>"
"<java.lang.StringBuffer: int codePointCount(int,int)>","<java.lang.StringBuffer: int codePointCount(int,int)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: void <init>()>","<android.view.textclassifier.TextClassifierEvent$Builder: void <init>()>"
"<java.time.OffsetDateTime: void <init>()>","<java.time.OffsetDateTime: void <init>()>"
"<java.util.regex.Matcher: boolean hasAnchoringBounds()>","<java.util.regex.Matcher: boolean hasAnchoringBounds()>"
"<android.view.View: int getNextClusterForwardId()>","<android.view.View: int getNextClusterForwardId()>"
"<java.io.Writer: void <init>(java.lang.Object)>","<java.io.Writer: void <init>(java.lang.Object)>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>","<android.graphics.Canvas: boolean clipRect(android.graphics.RectF)>"
"<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)>","<android.view.Menu: android.view.SubMenu addSubMenu(java.lang.CharSequence)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder addOpenFlags(int)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(android.graphics.drawable.Drawable)>"
"<android.content.res.Configuration: void setLocale(java.util.Locale)>","<android.content.res.Configuration: void setLocale(java.util.Locale)>"
"<android.view.View: void setSoundEffectsEnabled(boolean)>","<android.view.View: void setSoundEffectsEnabled(boolean)>"
"<android.view.ViewGroup: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>","<android.view.ViewGroup: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>"
"<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>","<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener,android.os.Handler)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.OffsetDateTime: java.time.OffsetDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.util.Arrays: int compareUnsigned(int[],int[])>","<java.util.Arrays: int compareUnsigned(int[],int[])>"
"<java.time.chrono.ChronoZonedDateTime: int get(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: int get(java.time.temporal.TemporalField)>"
"<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>","<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>"
"<android.view.View: boolean performContextClick(float,float)>","<android.view.View: boolean performContextClick(float,float)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])>"
"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[],java.util.Comparator)>"
"<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>","<android.hardware.display.VirtualDisplay: android.view.Display getDisplay()>"
"<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)>","<android.hardware.Camera$Parameters: void setJpegThumbnailQuality(int)>"
"<android.content.SyncAdapterType: boolean supportsUploading()>","<android.content.SyncAdapterType: boolean supportsUploading()>"
"<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newVirtualViewStructure(android.view.autofill.AutofillId,long)>","<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newVirtualViewStructure(android.view.autofill.AutofillId,long)>"
"<android.content.ComponentName: boolean equals(java.lang.Object)>","<android.content.ComponentName: boolean equals(java.lang.Object)>"
"<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)>","<android.view.inputmethod.InputConnection: boolean performContextMenuAction(int)>"
"<android.media.MediaSyncEvent: java.lang.String toString()>","<android.media.MediaSyncEvent: java.lang.String toString()>"
"<java.time.chrono.ChronoPeriod: java.util.List getUnits()>","<java.time.chrono.ChronoPeriod: java.util.List getUnits()>"
"<android.content.ContentProviderResult: void <init>(java.lang.Throwable)>","<android.content.ContentProviderResult: void <init>(java.lang.Throwable)>"
"<android.util.AndroidRuntimeException: void <init>()>","<android.util.AndroidRuntimeException: void <init>()>"
"<java.time.chrono.ChronoPeriod: int hashCode()>","<java.time.chrono.ChronoPeriod: int hashCode()>"
"<android.graphics.Rect: void <init>(android.graphics.Rect)>","<android.graphics.Rect: void <init>(android.graphics.Rect)>"
"<android.media.PlaybackParams: void writeToParcel(android.os.Parcel,int)>","<android.media.PlaybackParams: void writeToParcel(android.os.Parcel,int)>"
"<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>","<java.security.NoSuchAlgorithmException: void <init>(java.lang.Throwable)>"
"<android.app.Activity: void onCreate(android.os.Bundle)>","<android.app.Activity: void onCreate(android.os.Bundle)>"
"<android.os.Debug: long getNativeHeapFreeSize()>","<android.os.Debug: long getNativeHeapFreeSize()>"
"<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeUnavailable(java.lang.String)>","<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeUnavailable(java.lang.String)>"
"<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>","<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRangesFor(android.util.Size)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoFpsRangesFor(android.util.Size)>"
"<android.widget.TextView: java.lang.CharSequence getError()>","<android.widget.TextView: java.lang.CharSequence getError()>"
"<android.view.translation.TranslationCapability: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.TranslationCapability: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void invalidate(android.graphics.Rect)>","<android.view.View: void invalidate(android.graphics.Rect)>"
"<android.view.View: void onStartTemporaryDetach()>","<android.view.View: void onStartTemporaryDetach()>"
"<java.util.Optional: java.util.Optional or(java.util.function.Supplier)>","<java.util.Optional: java.util.Optional or(java.util.function.Supplier)>"
"<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>","<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.lang.String)>"
"<android.graphics.drawable.ColorDrawable: boolean hasFocusStateSpecified()>","<android.graphics.drawable.ColorDrawable: boolean hasFocusStateSpecified()>"
"<java.util.stream.LongStream: java.util.stream.LongStream peek(java.util.function.LongConsumer)>","<java.util.stream.LongStream: java.util.stream.LongStream peek(java.util.function.LongConsumer)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder scaleToEndVolume(float)>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder scaleToEndVolume(float)>"
"<android.hardware.Camera$ShutterCallback: void onShutter()>","<android.hardware.Camera$ShutterCallback: void onShutter()>"
"<java.util.stream.IntStream: void forEachOrdered(java.util.function.IntConsumer)>","<java.util.stream.IntStream: void forEachOrdered(java.util.function.IntConsumer)>"
"<android.view.KeyEvent: boolean isModifierKey(int)>","<android.view.KeyEvent: boolean isModifierKey(int)>"
"<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>","<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureEnd(java.lang.Runnable)>","<android.view.ScrollCaptureCallback: void onScrollCaptureEnd(java.lang.Runnable)>"
"<android.media.ImageReader: int getMaxImages()>","<android.media.ImageReader: int getMaxImages()>"
"<java.util.concurrent.TimeUnit: long convert(java.time.Duration)>","<java.util.concurrent.TimeUnit: long convert(java.time.Duration)>"
"<android.media.audiofx.AudioEffect$Descriptor: int hashCode()>","<android.media.audiofx.AudioEffect$Descriptor: int hashCode()>"
"<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>","<java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>"
"<android.graphics.Matrix: boolean preTranslate(float,float)>","<android.graphics.Matrix: boolean preTranslate(float,float)>"
"<java.lang.Short: java.lang.Short valueOf(java.lang.String)>","<java.lang.Short: java.lang.Short valueOf(java.lang.String)>"
"<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>","<android.view.inputmethod.InputMethodManager: void hideStatusIcon(android.os.IBinder)>"
"<android.widget.TextView: int getTotalPaddingRight()>","<android.widget.TextView: int getTotalPaddingRight()>"
"<android.view.OrientationEventListener: void <init>(android.content.Context,int)>","<android.view.OrientationEventListener: void <init>(android.content.Context,int)>"
"<android.content.res.TypedArray: int getColor(int,int)>","<android.content.res.TypedArray: int getColor(int,int)>"
"<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>","<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>"
"<android.widget.Adapter: int getViewTypeCount()>","<android.widget.Adapter: int getViewTypeCount()>"
"<android.graphics.Color: int argb(float,float,float,float)>","<android.graphics.Color: int argb(float,float,float,float)>"
"<android.telephony.ServiceState: boolean equals(java.lang.Object)>","<android.telephony.ServiceState: boolean equals(java.lang.Object)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<java.util.OptionalDouble: double orElse(double)>","<java.util.OptionalDouble: double orElse(double)>"
"<android.view.inputmethod.InputContentInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.InputContentInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.autofill.AutofillId: int describeContents()>","<android.view.autofill.AutofillId: int describeContents()>"
"<android.media.AudioPresentation: java.lang.String toString()>","<android.media.AudioPresentation: java.lang.String toString()>"
"<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>","<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>"
"<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)>","<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)>"
"<android.app.PendingIntent: int hashCode()>","<android.app.PendingIntent: int hashCode()>"
"<android.app.assist.AssistContent: android.os.Bundle getExtras()>","<android.app.assist.AssistContent: android.os.Bundle getExtras()>"
"<android.graphics.RectF: void union(float,float)>","<android.graphics.RectF: void union(float,float)>"
"<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>","<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>"
"<android.graphics.Path$FillType: void <clinit>()>","<android.graphics.Path$FillType: void <clinit>()>"
"<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>","<android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.LocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.util.Size: boolean equals(java.lang.Object)>","<android.util.Size: boolean equals(java.lang.Object)>"
"<android.media.AudioFormat$Builder: android.media.AudioFormat build()>","<android.media.AudioFormat$Builder: android.media.AudioFormat build()>"
"<android.media.AudioRecord: int read(short[],int,int)>","<android.media.AudioRecord: int read(short[],int,int)>"
"<android.graphics.Paint: int getColor()>","<android.graphics.Paint: int getColor()>"
"<android.media.MediaPlayer: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>","<android.media.MediaPlayer: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>"
"<android.app.Activity: android.content.ComponentName getComponentName()>","<android.app.Activity: android.content.ComponentName getComponentName()>"
"<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>","<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()>"
"<android.os.Parcel: void writeCharArray(char[])>","<android.os.Parcel: void writeCharArray(char[])>"
"<android.telephony.BarringInfo$BarringServiceInfo: void writeToParcel(android.os.Parcel,int)>","<android.telephony.BarringInfo$BarringServiceInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.AudioRecordingConfiguration: int describeContents()>","<android.media.AudioRecordingConfiguration: int describeContents()>"
"<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>","<android.app.ActivityManager$TaskDescription: java.lang.String getLabel()>"
"<android.media.AudioMetadata$Format: void <init>()>","<android.media.AudioMetadata$Format: void <init>()>"
"<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>","<android.text.method.KeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>"
"<java.time.Clock: java.time.Clock tickSeconds(java.time.ZoneId)>","<java.time.Clock: java.time.Clock tickSeconds(java.time.ZoneId)>"
"<android.view.ViewTreeObserver: void <init>()>","<android.view.ViewTreeObserver: void <init>()>"
"<android.media.AudioManager: boolean setSurroundFormatEnabled(int,boolean)>","<android.media.AudioManager: boolean setSurroundFormatEnabled(int,boolean)>"
"<java.io.File: boolean equals(java.lang.Object)>","<java.io.File: boolean equals(java.lang.Object)>"
"<java.time.Instant: java.time.Instant parse(java.lang.CharSequence)>","<java.time.Instant: java.time.Instant parse(java.lang.CharSequence)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
"<android.net.NetworkInfo$State: void <clinit>()>","<android.net.NetworkInfo$State: void <clinit>()>"
"<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)>"
"<android.media.MediaMetadata: void <init>()>","<android.media.MediaMetadata: void <init>()>"
"<android.content.res.Configuration: android.content.res.Configuration generateDelta(android.content.res.Configuration,android.content.res.Configuration)>","<android.content.res.Configuration: android.content.res.Configuration generateDelta(android.content.res.Configuration,android.content.res.Configuration)>"
"<android.graphics.Paint: android.graphics.BlendMode getBlendMode()>","<android.graphics.Paint: android.graphics.BlendMode getBlendMode()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)>"
"<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>","<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int[],int,int,android.graphics.Bitmap$Config)>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request$Builder setExtras(android.os.Bundle)>"
"<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>","<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>"
"<android.widget.RemoteViews: void showPrevious(int)>","<android.widget.RemoteViews: void showPrevious(int)>"
"<android.widget.TextView: void cancelLongPress()>","<android.widget.TextView: void cancelLongPress()>"
"<android.content.res.ColorStateList: boolean isOpaque()>","<android.content.res.ColorStateList: boolean isOpaque()>"
"<android.telephony.TelephonyScanManager$NetworkScanCallback: void onResults(java.util.List)>","<android.telephony.TelephonyScanManager$NetworkScanCallback: void onResults(java.util.List)>"
"<android.database.Cursor: java.util.List getNotificationUris()>","<android.database.Cursor: java.util.List getNotificationUris()>"
"<android.view.View: void saveHierarchyState(android.util.SparseArray)>","<android.view.View: void saveHierarchyState(android.util.SparseArray)>"
"<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>","<android.os.Parcelable: void writeToParcel(android.os.Parcel,int)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>"
"<android.graphics.drawable.ColorDrawable: boolean canApplyTheme()>","<android.graphics.drawable.ColorDrawable: boolean canApplyTheme()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<javax.security.auth.Subject: java.util.Set getPublicCredentials()>","<javax.security.auth.Subject: java.util.Set getPublicCredentials()>"
"<android.media.session.PlaybackState: int describeContents()>","<android.media.session.PlaybackState: int describeContents()>"
"<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>","<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>"
"<java.time.chrono.ChronoZonedDateTime: int compareTo(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: int compareTo(java.time.chrono.ChronoZonedDateTime)>"
"<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>","<java.security.Provider$Service: java.lang.Object newInstance(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>","<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>"
"<java.time.chrono.Chronology: boolean equals(java.lang.Object)>","<java.time.chrono.Chronology: boolean equals(java.lang.Object)>"
"<android.graphics.RenderNode: long computeApproximateMemoryUsage()>","<android.graphics.RenderNode: long computeApproximateMemoryUsage()>"
"<android.view.RoundedCorner: int describeContents()>","<android.view.RoundedCorner: int describeContents()>"
"<java.nio.file.attribute.FileTime: void <init>()>","<java.nio.file.attribute.FileTime: void <init>()>"
"<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayNameWithDialect(java.lang.String,java.lang.String)>"
"<android.view.KeyEvent: char getNumber()>","<android.view.KeyEvent: char getNumber()>"
"<android.view.View: boolean hasOnLongClickListeners()>","<android.view.View: boolean hasOnLongClickListeners()>"
"<java.util.stream.Stream: java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction)>","<java.util.stream.Stream: java.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction)>"
"<android.telephony.TelephonyManager: boolean isDataEnabledForReason(int)>","<android.telephony.TelephonyManager: boolean isDataEnabledForReason(int)>"
"<java.util.OptionalDouble: boolean isEmpty()>","<java.util.OptionalDouble: boolean isEmpty()>"
"<android.media.AudioManager: void setAllowedCapturePolicy(int)>","<android.media.AudioManager: void setAllowedCapturePolicy(int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotCount()>","<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotCount()>"
"<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>","<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>"
"<java.time.Instant: java.time.Instant minusSeconds(long)>","<java.time.Instant: java.time.Instant minusSeconds(long)>"
"<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>","<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>"
"<android.content.res.ColorStateList: void <clinit>()>","<android.content.res.ColorStateList: void <clinit>()>"
"<java.time.Duration: java.time.Duration 'from'(java.time.temporal.TemporalAmount)>","<java.time.Duration: java.time.Duration 'from'(java.time.temporal.TemporalAmount)>"
"<java.security.PrivilegedActionException: java.lang.Throwable getCause()>","<java.security.PrivilegedActionException: java.lang.Throwable getCause()>"
"<java.net.Proxy: java.lang.String toString()>","<java.net.Proxy: java.lang.String toString()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusMonths(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusMonths(long)>"
"<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>","<android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)>"
"<android.os.Debug: int getGlobalGcInvocationCount()>","<android.os.Debug: int getGlobalGcInvocationCount()>"
"<android.media.AudioTrack: android.media.AudioFormat getFormat()>","<android.media.AudioTrack: android.media.AudioFormat getFormat()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(java.nio.DoubleBuffer)>"
"<java.nio.charset.CharsetEncoder: void implReset()>","<java.nio.charset.CharsetEncoder: void implReset()>"
"<java.util.stream.IntStream: java.util.stream.IntStream of(int[])>","<java.util.stream.IntStream: java.util.stream.IntStream of(int[])>"
"<android.view.Window: boolean isWideColorGamut()>","<android.view.Window: boolean isWideColorGamut()>"
"<java.io.File: java.lang.String[] list()>","<java.io.File: java.lang.String[] list()>"
"<java.lang.Thread: void sleep(long)>","<java.lang.Thread: void sleep(long)>"
"<android.graphics.Paint: void setSubpixelText(boolean)>","<android.graphics.Paint: void setSubpixelText(boolean)>"
"<android.view.View: void setOverScrollMode(int)>","<android.view.View: void setOverScrollMode(int)>"
"<android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>","<android.media.MediaFormat: android.media.MediaFormat createAudioFormat(java.lang.String,int,int)>"
"<java.net.ServerSocket: java.net.Socket accept()>","<java.net.ServerSocket: java.net.Socket accept()>"
"<java.time.chrono.ChronoLocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>"
"<android.view.SurfaceView: void setAlpha(float)>","<android.view.SurfaceView: void setAlpha(float)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>"
"<java.util.Deque: boolean offerFirst(java.lang.Object)>","<java.util.Deque: boolean offerFirst(java.lang.Object)>"
"<java.util.NavigableSet: java.util.SortedSet headSet(java.lang.Object)>","<java.util.NavigableSet: java.util.SortedSet headSet(java.lang.Object)>"
"<android.graphics.Path: void transform(android.graphics.Matrix)>","<android.graphics.Path: void transform(android.graphics.Matrix)>"
"<android.os.Debug: int getGlobalExternalFreedSize()>","<android.os.Debug: int getGlobalExternalFreedSize()>"
"<java.security.Key: java.lang.String getAlgorithm()>","<java.security.Key: java.lang.String getAlgorithm()>"
"<android.widget.TextView: void setShowSoftInputOnFocus(boolean)>","<android.widget.TextView: void setShowSoftInputOnFocus(boolean)>"
"<android.util.AttributeSet: java.lang.String getClassAttribute()>","<android.util.AttributeSet: java.lang.String getClassAttribute()>"
"<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>","<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>"
"<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>","<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>"
"<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>","<android.content.pm.PackageManager: boolean addWhitelistedRestrictedPermission(java.lang.String,java.lang.String,int)>"
"<android.view.MenuItem: android.view.ActionProvider getActionProvider()>","<android.view.MenuItem: android.view.ActionProvider getActionProvider()>"
"<android.widget.TextView$SavedState: java.lang.String toString()>","<android.widget.TextView$SavedState: java.lang.String toString()>"
"<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.util.regex.Matcher: java.lang.String group(int)>","<java.util.regex.Matcher: java.lang.String group(int)>"
"<java.io.PrintWriter: void <init>(java.io.File,java.nio.charset.Charset)>","<java.io.PrintWriter: void <init>(java.io.File,java.nio.charset.Charset)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()>","<android.media.MediaPlayer: android.media.AudioDeviceInfo getRoutedDevice()>"
"<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>","<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>"
"<android.view.textclassifier.SelectionEvent: long getEventTime()>","<android.view.textclassifier.SelectionEvent: long getEventTime()>"
"<android.media.AudioTrack: int getNotificationMarkerPosition()>","<android.media.AudioTrack: int getNotificationMarkerPosition()>"
"<android.telephony.BarringInfo$BarringServiceInfo: boolean isBarred()>","<android.telephony.BarringInfo$BarringServiceInfo: boolean isBarred()>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.Window: void registerScrollCaptureCallback(android.view.ScrollCaptureCallback)>","<android.view.Window: void registerScrollCaptureCallback(android.view.ScrollCaptureCallback)>"
"<android.view.View: java.lang.String getTransitionName()>","<android.view.View: java.lang.String getTransitionName()>"
"<java.time.temporal.ValueRange: long getSmallestMaximum()>","<java.time.temporal.ValueRange: long getSmallestMaximum()>"
"<android.os.Bundle: void putByte(java.lang.String,byte)>","<android.os.Bundle: void putByte(java.lang.String,byte)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)>"
"<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>","<android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)>"
"<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup publicLookup()>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup publicLookup()>"
"<android.widget.Scroller: void forceFinished(boolean)>","<android.widget.Scroller: void forceFinished(boolean)>"
"<java.lang.String: int hashCode()>","<java.lang.String: int hashCode()>"
"<java.util.function.Consumer: java.util.function.Consumer andThen(java.util.function.Consumer)>","<java.util.function.Consumer: java.util.function.Consumer andThen(java.util.function.Consumer)>"
"<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>"
"<android.widget.AbsListView$RecyclerListener: void onMovedToScrapHeap(android.view.View)>","<android.widget.AbsListView$RecyclerListener: void onMovedToScrapHeap(android.view.View)>"
"<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>","<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>"
"<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>","<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[],int,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime now()>","<java.time.LocalDateTime: java.time.LocalDateTime now()>"
"<android.graphics.RenderNode: float getTranslationX()>","<android.graphics.RenderNode: float getTranslationX()>"
"<java.lang.ThreadGroup: void suspend()>","<java.lang.ThreadGroup: void suspend()>"
"<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>"
"<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>","<android.view.MenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>"
"<java.io.PrintWriter: void println(boolean)>","<java.io.PrintWriter: void println(boolean)>"
"<android.app.Activity: void setInheritShowWhenLocked(boolean)>","<android.app.Activity: void setInheritShowWhenLocked(boolean)>"
"<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>","<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>"
"<java.io.Reader: void reset()>","<java.io.Reader: void reset()>"
"<android.content.pm.FeatureGroupInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.FeatureGroupInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.ZoneId: void <init>()>","<java.time.ZoneId: void <init>()>"
"<java.lang.StringBuffer: void <init>(int)>","<java.lang.StringBuffer: void <init>(int)>"
"<android.graphics.Rect: void sort()>","<android.graphics.Rect: void sort()>"
"<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)>","<javax.security.auth.Subject: java.lang.Object doAsPrivileged(javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext)>"
"<android.view.View: void updateDragShadow(android.view.View$DragShadowBuilder)>","<android.view.View: void updateDragShadow(android.view.View$DragShadowBuilder)>"
"<android.view.View: boolean isDuplicateParentStateEnabled()>","<android.view.View: boolean isDuplicateParentStateEnabled()>"
"<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>","<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()>"
"<android.widget.RemoteViews$RemoteCollectionItems: void <init>()>","<android.widget.RemoteViews$RemoteCollectionItems: void <init>()>"
"<android.graphics.drawable.BitmapDrawable: int getOpacity()>","<android.graphics.drawable.BitmapDrawable: int getOpacity()>"
"<android.app.Dialog: void create()>","<android.app.Dialog: void create()>"
"<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)>","<android.view.SurfaceHolder$Callback2: void surfaceRedrawNeededAsync(android.view.SurfaceHolder,java.lang.Runnable)>"
"<android.graphics.Matrix: void setValues(float[])>","<android.graphics.Matrix: void setValues(float[])>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(java.lang.CharSequence,int,int,android.os.LocaleList)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextSelection suggestSelection(java.lang.CharSequence,int,int,android.os.LocaleList)>"
"<android.graphics.Color: boolean isInColorSpace(long,android.graphics.ColorSpace)>","<android.graphics.Color: boolean isInColorSpace(long,android.graphics.ColorSpace)>"
"<java.time.Duration: int compareTo(java.time.Duration)>","<java.time.Duration: int compareTo(java.time.Duration)>"
"<android.graphics.RecordingCanvas: void <init>()>","<android.graphics.RecordingCanvas: void <init>()>"
"<java.nio.FloatBuffer: void <init>()>","<java.nio.FloatBuffer: void <init>()>"
"<java.util.stream.DoubleStream$Builder: void accept(double)>","<java.util.stream.DoubleStream$Builder: void accept(double)>"
"<android.view.SurfaceControl: int describeContents()>","<android.view.SurfaceControl: int describeContents()>"
"<java.lang.Math: double hypot(double,double)>","<java.lang.Math: double hypot(double,double)>"
"<android.view.SubMenu: android.view.SubMenu setIcon(int)>","<android.view.SubMenu: android.view.SubMenu setIcon(int)>"
"<android.util.ArrayMap: java.util.Set keySet()>","<android.util.ArrayMap: java.util.Set keySet()>"
"<android.view.inputmethod.SurroundingText: int describeContents()>","<android.view.inputmethod.SurroundingText: int describeContents()>"
"<android.content.ContentValues: void <clinit>()>","<android.content.ContentValues: void <clinit>()>"
"<android.graphics.Path: void rMoveTo(float,float)>","<android.graphics.Path: void rMoveTo(float,float)>"
"<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>","<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>"
"<java.util.SortedSet: java.util.SortedSet tailSet(java.lang.Object)>","<java.util.SortedSet: java.util.SortedSet tailSet(java.lang.Object)>"
"<android.view.WindowManager: void removeCrossWindowBlurEnabledListener(java.util.function.Consumer)>","<android.view.WindowManager: void removeCrossWindowBlurEnabledListener(java.util.function.Consumer)>"
"<java.time.chrono.ChronoLocalDate: boolean isLeapYear()>","<java.time.chrono.ChronoLocalDate: boolean isLeapYear()>"
"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>","<java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>"
"<android.widget.FrameLayout: boolean getMeasureAllChildren()>","<android.widget.FrameLayout: boolean getMeasureAllChildren()>"
"<android.app.assist.AssistContent: android.net.Uri getWebUri()>","<android.app.assist.AssistContent: android.net.Uri getWebUri()>"
"<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>","<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>"
"<java.time.format.FormatStyle: java.time.format.FormatStyle valueOf(java.lang.String)>","<java.time.format.FormatStyle: java.time.format.FormatStyle valueOf(java.lang.String)>"
"<android.os.Parcel: void writeByteArray(byte[],int,int)>","<android.os.Parcel: void writeByteArray(byte[],int,int)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: int describeContents()>","<android.view.SurfaceControlViewHost$SurfacePackage: int describeContents()>"
"<android.widget.Toolbar: int getTitleMarginEnd()>","<android.widget.Toolbar: int getTitleMarginEnd()>"
"<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>","<android.content.pm.PackageInstaller: java.util.List getActiveStagedSessions()>"
"<android.content.res.TypedArray: int getInt(int,int)>","<android.content.res.TypedArray: int getInt(int,int)>"
"<java.util.AbstractQueue: void clear()>","<java.util.AbstractQueue: void clear()>"
"<java.nio.file.WatchKey: void cancel()>","<java.nio.file.WatchKey: void cancel()>"
"<android.app.Fragment: void onAttach(android.app.Activity)>","<android.app.Fragment: void onAttach(android.app.Activity)>"
"<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>","<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>"
"<java.util.Collection: boolean removeIf(java.util.function.Predicate)>","<java.util.Collection: boolean removeIf(java.util.function.Predicate)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setExtras(android.os.Bundle)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setExtras(android.os.Bundle)>"
"<android.graphics.RecordingCanvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>"
"<android.content.res.Resources: float getFraction(int,int,int)>","<android.content.res.Resources: float getFraction(int,int,int)>"
"<java.time.Month: int get(java.time.temporal.TemporalField)>","<java.time.Month: int get(java.time.temporal.TemporalField)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(int,int,android.content.DialogInterface$OnClickListener)>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()>","<android.content.pm.PackageInstaller$SessionInfo: boolean hasParentSessionId()>"
"<android.content.res.TypedArray: int length()>","<android.content.res.TypedArray: int length()>"
"<android.os.Messenger: boolean equals(java.lang.Object)>","<android.os.Messenger: boolean equals(java.lang.Object)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int)>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int)>"
"<java.util.stream.IntStream: java.util.stream.IntStream sequential()>","<java.util.stream.IntStream: java.util.stream.IntStream sequential()>"
"<java.io.PrintWriter: void write(char[])>","<java.io.PrintWriter: void write(char[])>"
"<android.view.Choreographer$FrameTimeline: long getExpectedPresentationTimeNanos()>","<android.view.Choreographer$FrameTimeline: long getExpectedPresentationTimeNanos()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class,java.lang.String,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStaticGetter(java.lang.Class,java.lang.String,java.lang.Class)>"
"<java.time.chrono.IsoChronology: java.time.chrono.IsoEra eraOf(int)>","<java.time.chrono.IsoChronology: java.time.chrono.IsoEra eraOf(int)>"
"<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)>","<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.os.MemoryFile)>"
"<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>","<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>"
"<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>","<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>"
"<android.content.ContextWrapper: android.content.AttributionSource getAttributionSource()>","<android.content.ContextWrapper: android.content.AttributionSource getAttributionSource()>"
"<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>","<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>"
"<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>","<java.util.regex.Matcher: java.util.regex.Matcher usePattern(java.util.regex.Pattern)>"
"<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)>","<android.media.MediaFormat: java.nio.ByteBuffer getByteBuffer(java.lang.String)>"
"<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<java.net.Socket: void close()>","<java.net.Socket: void close()>"
"<android.view.KeyEvent: boolean isCtrlPressed()>","<android.view.KeyEvent: boolean isCtrlPressed()>"
"<android.widget.RemoteViews: void setLabelFor(int,int)>","<android.widget.RemoteViews: void setLabelFor(int,int)>"
"<android.util.AttributeSet: java.lang.String getAttributeName(int)>","<android.util.AttributeSet: java.lang.String getAttributeName(int)>"
"<android.media.AudioRecord: int setNotificationMarkerPosition(int)>","<android.media.AudioRecord: int setNotificationMarkerPosition(int)>"
"<java.time.chrono.ChronoLocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: int compareTo(java.time.chrono.ChronoLocalDate)>"
"<java.nio.channels.Selector: void <init>()>","<java.nio.channels.Selector: void <init>()>"
"<android.content.res.TypedArray: java.lang.String toString()>","<android.content.res.TypedArray: java.lang.String toString()>"
"<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>","<android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)>"
"<android.content.ContextWrapper: java.io.File getFilesDir()>","<android.content.ContextWrapper: java.io.File getFilesDir()>"
"<android.content.res.AssetManager$AssetInputStream: int read()>","<android.content.res.AssetManager$AssetInputStream: int read()>"
"<android.media.AudioTrack: void removeOnCodecFormatChangedListener(android.media.AudioTrack$OnCodecFormatChangedListener)>","<android.media.AudioTrack: void removeOnCodecFormatChangedListener(android.media.AudioTrack$OnCodecFormatChangedListener)>"
"<android.view.textclassifier.SelectionEvent: int getStart()>","<android.view.textclassifier.SelectionEvent: int getStart()>"
"<android.os.BaseBundle: int[] getIntArray(java.lang.String)>","<android.os.BaseBundle: int[] getIntArray(java.lang.String)>"
"<android.media.MediaDrm$MediaDrmStateException: boolean isTransient()>","<android.media.MediaDrm$MediaDrmStateException: boolean isTransient()>"
"<android.view.View: android.view.View findViewWithTag(java.lang.Object)>","<android.view.View: android.view.View findViewWithTag(java.lang.Object)>"
"<android.hardware.SyncFence: boolean await(java.time.Duration)>","<android.hardware.SyncFence: boolean await(java.time.Duration)>"
"<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>","<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>"
"<android.graphics.text.LineBreakConfig: int getLineBreakStyle()>","<android.graphics.text.LineBreakConfig: int getLineBreakStyle()>"
"<android.media.session.PlaybackState: long getActiveQueueItemId()>","<android.media.session.PlaybackState: long getActiveQueueItemId()>"
"<android.media.AudioTrack: float getMaxVolume()>","<android.media.AudioTrack: float getMaxVolume()>"
"<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>","<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>"
"<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>","<android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int,android.os.Bundle)>"
"<android.util.SparseBooleanArray: void delete(int)>","<android.util.SparseBooleanArray: void delete(int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.Object)>"
"<android.util.SparseArray: java.lang.Object valueAt(int)>","<android.util.SparseArray: java.lang.Object valueAt(int)>"
"<java.util.Collections: void sort(java.util.List)>","<java.util.Collections: void sort(java.util.List)>"
"<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>","<java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>"
"<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>","<android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)>"
"<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.View: android.graphics.Bitmap getDrawingCache()>","<android.view.View: android.graphics.Bitmap getDrawingCache()>"
"<android.graphics.Region: void finalize()>","<android.graphics.Region: void finalize()>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int)>"
"<android.view.ContentInfo: java.lang.String toString()>","<android.view.ContentInfo: java.lang.String toString()>"
"<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)>","<android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)>"
"<android.content.res.loader.ResourcesLoader: void clearProviders()>","<android.content.res.loader.ResourcesLoader: void clearProviders()>"
"<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>"
"<java.util.AbstractCollection: boolean isEmpty()>","<java.util.AbstractCollection: boolean isEmpty()>"
"<android.graphics.SurfaceTexture$OnFrameAvailableListener: void onFrameAvailable(android.graphics.SurfaceTexture)>","<android.graphics.SurfaceTexture$OnFrameAvailableListener: void onFrameAvailable(android.graphics.SurfaceTexture)>"
"<java.nio.DoubleBuffer: java.nio.Buffer clear()>","<java.nio.DoubleBuffer: java.nio.Buffer clear()>"
"<java.util.NavigableMap: java.util.Map$Entry higherEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry higherEntry(java.lang.Object)>"
"<java.lang.Double: int compareTo(java.lang.Object)>","<java.lang.Double: int compareTo(java.lang.Object)>"
"<android.graphics.Paint: void setShadowLayer(float,float,float,long)>","<android.graphics.Paint: void setShadowLayer(float,float,float,long)>"
"<android.graphics.Paint: android.graphics.Shader getShader()>","<android.graphics.Paint: android.graphics.Shader getShader()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>","<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>"
"<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>","<android.app.Activity: void finishActivityFromChild(android.app.Activity,int)>"
"<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>","<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>"
"<android.view.ViewGroup: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>","<android.view.ViewGroup: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>"
"<android.os.Bundle: android.os.Bundle deepCopy()>","<android.os.Bundle: android.os.Bundle deepCopy()>"
"<android.view.View: void setBackground(android.graphics.drawable.Drawable)>","<android.view.View: void setBackground(android.graphics.drawable.Drawable)>"
"<android.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>","<android.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)>"
"<java.util.Hashtable: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<java.time.Instant: void <init>()>","<java.time.Instant: void <init>()>"
"<java.text.CharacterIterator: char last()>","<java.text.CharacterIterator: char last()>"
"<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>","<android.view.View: void setBackgroundTintMode(android.graphics.PorterDuff$Mode)>"
"<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.media.MediaPlayer$DrmInfo: java.util.Map getPssh()>","<android.media.MediaPlayer$DrmInfo: java.util.Map getPssh()>"
"<android.view.AbsSavedState: void <init>(android.os.Parcelable)>","<android.view.AbsSavedState: void <init>(android.os.Parcelable)>"
"<java.util.stream.DoubleStream: java.util.stream.BaseStream sequential()>","<java.util.stream.DoubleStream: java.util.stream.BaseStream sequential()>"
"<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>","<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>"
"<java.lang.NoSuchMethodException: void <init>(java.lang.String)>","<java.lang.NoSuchMethodException: void <init>(java.lang.String)>"
"<android.content.ContentValues: java.util.Set valueSet()>","<android.content.ContentValues: java.util.Set valueSet()>"
"<android.graphics.RecordingCanvas: void drawLine(float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawLine(float,float,float,float,android.graphics.Paint)>"
"<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>","<android.media.session.MediaSession: void setMetadata(android.media.MediaMetadata)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map)>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map)>"
"<android.transition.Transition$TransitionListener: void onTransitionPause(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionPause(android.transition.Transition)>"
"<android.graphics.fonts.FontVariationAxis: float getStyleValue()>","<android.graphics.fonts.FontVariationAxis: float getStyleValue()>"
"<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>","<java.security.Provider: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()>","<android.app.VoiceInteractor$PickOptionRequest$Option: android.os.Bundle getExtras()>"
"<android.hardware.camera2.CameraCaptureSession: void close()>","<android.hardware.camera2.CameraCaptureSession: void close()>"
"<java.lang.Math: double signum(double)>","<java.lang.Math: double signum(double)>"
"<java.lang.Package: java.lang.String getImplementationVersion()>","<java.lang.Package: java.lang.String getImplementationVersion()>"
"<java.io.Reader: void <init>(java.lang.Object)>","<java.io.Reader: void <init>(java.lang.Object)>"
"<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>","<android.app.Activity: android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent)>"
"<android.os.BaseBundle: void remove(java.lang.String)>","<android.os.BaseBundle: void remove(java.lang.String)>"
"<java.lang.Character$UnicodeBlock: void <clinit>()>","<java.lang.Character$UnicodeBlock: void <clinit>()>"
"<android.hardware.camera2.CameraMetadata: void <init>()>","<android.hardware.camera2.CameraMetadata: void <init>()>"
"<java.util.LongSummaryStatistics: void accept(int)>","<java.util.LongSummaryStatistics: void accept(int)>"
"<java.lang.reflect.Executable: java.lang.Class[] getExceptionTypes()>","<java.lang.reflect.Executable: java.lang.Class[] getExceptionTypes()>"
"<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[])>","<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[])>"
"<android.media.Image: void setFence(android.hardware.SyncFence)>","<android.media.Image: void setFence(android.hardware.SyncFence)>"
"<android.view.ViewStructure: int addChildCount(int)>","<android.view.ViewStructure: int addChildCount(int)>"
"<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>","<android.app.Activity: void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder)>"
"<java.lang.System: java.lang.SecurityManager getSecurityManager()>","<java.lang.System: java.lang.SecurityManager getSecurityManager()>"
"<android.view.textclassifier.ConversationActions$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.ConversationActions$Request: android.os.Bundle getExtras()>"
"<android.widget.RelativeLayout$LayoutParams: int getRule(int)>","<android.widget.RelativeLayout$LayoutParams: int getRule(int)>"
"<android.view.Window: void togglePanel(int,android.view.KeyEvent)>","<android.view.Window: void togglePanel(int,android.view.KeyEvent)>"
"<java.lang.reflect.Method: boolean isBridge()>","<java.lang.reflect.Method: boolean isBridge()>"
"<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)>","<android.view.SubMenu: android.view.SubMenu setHeaderIcon(int)>"
"<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>","<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>"
"<android.view.textclassifier.TextLinks$TextLinkSpan: void <init>(android.view.textclassifier.TextLinks$TextLink)>","<android.view.textclassifier.TextLinks$TextLinkSpan: void <init>(android.view.textclassifier.TextLinks$TextLink)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)>"
"<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>","<android.app.SharedElementCallback: android.os.Parcelable onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)>"
"<android.os.Process: int myUid()>","<android.os.Process: int myUid()>"
"<android.view.ViewStructure: android.view.ViewStructure$HtmlInfo$Builder newHtmlInfoBuilder(java.lang.String)>","<android.view.ViewStructure: android.view.ViewStructure$HtmlInfo$Builder newHtmlInfoBuilder(java.lang.String)>"
"<android.app.Activity: boolean isVoiceInteractionRoot()>","<android.app.Activity: boolean isVoiceInteractionRoot()>"
"<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>","<android.database.ContentObserver: void onChange(boolean,android.net.Uri)>"
"<android.content.SyncInfo: int describeContents()>","<android.content.SyncInfo: int describeContents()>"
"<android.view.ActionMode: void setTitle(int)>","<android.view.ActionMode: void setTitle(int)>"
"<java.nio.ByteBuffer: int hashCode()>","<java.nio.ByteBuffer: int hashCode()>"
"<java.util.stream.IntStream: java.util.stream.IntStream concat(java.util.stream.IntStream,java.util.stream.IntStream)>","<java.util.stream.IntStream: java.util.stream.IntStream concat(java.util.stream.IntStream,java.util.stream.IntStream)>"
"<android.text.PrecomputedText: void removeSpan(java.lang.Object)>","<android.text.PrecomputedText: void removeSpan(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isMultiLine()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>"
"<android.view.textclassifier.TextSelection$Builder: void <init>(int,int)>","<android.view.textclassifier.TextSelection$Builder: void <init>(int,int)>"
"<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>","<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>"
"<java.util.function.IntToLongFunction: long applyAsLong(int)>","<java.util.function.IntToLongFunction: long applyAsLong(int)>"
"<android.view.contentcapture.ContentCaptureSessionId: java.lang.String toString()>","<android.view.contentcapture.ContentCaptureSessionId: java.lang.String toString()>"
"<android.util.Size: int hashCode()>","<android.util.Size: int hashCode()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>"
"<java.lang.Character: char[] toChars(int)>","<java.lang.Character: char[] toChars(int)>"
"<android.media.session.MediaController$Callback: void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo)>","<android.media.session.MediaController$Callback: void onAudioInfoChanged(android.media.session.MediaController$PlaybackInfo)>"
"<android.media.AudioTrack: int setPlaybackHeadPosition(int)>","<android.media.AudioTrack: int setPlaybackHeadPosition(int)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addNextIntent(android.content.Intent)>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(int,int)>","<java.time.LocalDate: java.time.LocalDateTime atTime(int,int)>"
"<java.time.temporal.TemporalUnit: boolean isDateBased()>","<java.time.temporal.TemporalUnit: boolean isDateBased()>"
"<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>","<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>"
"<android.hardware.camera2.params.SessionConfiguration: int describeContents()>","<android.hardware.camera2.params.SessionConfiguration: int describeContents()>"
"<android.content.pm.PackageManager: boolean canPackageQuery(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: boolean canPackageQuery(java.lang.String,java.lang.String)>"
"<java.lang.Long: java.lang.String toString(long,int)>","<java.lang.Long: java.lang.String toString(long,int)>"
"<android.media.AudioAttributes: java.lang.String toString()>","<android.media.AudioAttributes: java.lang.String toString()>"
"<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>","<android.os.Debug: boolean dumpService(java.lang.String,java.io.FileDescriptor,java.lang.String[])>"
"<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)>","<android.media.AudioManager: void registerMediaButtonEventReceiver(android.content.ComponentName)>"
"<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.lang.Float: int intValue()>","<java.lang.Float: int intValue()>"
"<android.net.LinkProperties: int hashCode()>","<android.net.LinkProperties: int hashCode()>"
"<android.widget.TextView: void setTextSize(float)>","<android.widget.TextView: void setTextSize(float)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
"<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>","<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>"
"<android.widget.Toolbar: int getTitleMarginBottom()>","<android.widget.Toolbar: int getTitleMarginBottom()>"
"<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>","<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)>"
"<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>","<android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>"
"<android.view.DisplayCutout: int getSafeInsetBottom()>","<android.view.DisplayCutout: int getSafeInsetBottom()>"
"<android.content.ContentProviderResult: void <init>(android.os.Bundle)>","<android.content.ContentProviderResult: void <init>(android.os.Bundle)>"
"<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>","<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setVariant(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setVariant(java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setGeometry(android.view.SurfaceControl,android.graphics.Rect,android.graphics.Rect,int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getInputEncoding()>"
"<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>","<android.widget.TextView: void setMovementMethod(android.text.method.MovementMethod)>"
"<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.reflect.Modifier: boolean isProtected(int)>","<java.lang.reflect.Modifier: boolean isProtected(int)>"
"<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>","<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>"
"<java.lang.reflect.Field: double getDouble(java.lang.Object)>","<java.lang.reflect.Field: double getDouble(java.lang.Object)>"
"<android.content.IntentSender: boolean equals(java.lang.Object)>","<android.content.IntentSender: boolean equals(java.lang.Object)>"
"<java.lang.Byte: int compareUnsigned(byte,byte)>","<java.lang.Byte: int compareUnsigned(byte,byte)>"
"<android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>","<android.app.Activity: void setLocusContext(android.content.LocusId,android.os.Bundle)>"
"<android.net.NetworkCapabilities: boolean hasEnterpriseId(int)>","<android.net.NetworkCapabilities: boolean hasEnterpriseId(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>"
"<android.view.View: int computeVerticalScrollRange()>","<android.view.View: int computeVerticalScrollRange()>"
"<android.animation.StateListAnimator: void <init>()>","<android.animation.StateListAnimator: void <init>()>"
"<android.text.Layout: int getLineCount()>","<android.text.Layout: int getLineCount()>"
"<android.view.Window: android.transition.Transition getReturnTransition()>","<android.view.Window: android.transition.Transition getReturnTransition()>"
"<java.nio.DoubleBuffer: java.nio.Buffer mark()>","<java.nio.DoubleBuffer: java.nio.Buffer mark()>"
"<android.media.AudioDeviceInfo: int[] getChannelIndexMasks()>","<android.media.AudioDeviceInfo: int[] getChannelIndexMasks()>"
"<java.time.chrono.Chronology: java.time.chrono.Era eraOf(int)>","<java.time.chrono.Chronology: java.time.chrono.Era eraOf(int)>"
"<android.media.Rating: android.media.Rating newHeartRating(boolean)>","<android.media.Rating: android.media.Rating newHeartRating(boolean)>"
"<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>","<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>"
"<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>","<android.view.accessibility.AccessibilityNodeInfo: void removeAction(int)>"
"<android.content.res.TypedArray: android.content.res.Resources getResources()>","<android.content.res.TypedArray: android.content.res.Resources getResources()>"
"<android.telephony.data.ApnSetting: int getMmsProxyPort()>","<android.telephony.data.ApnSetting: int getMmsProxyPort()>"
"<java.util.concurrent.locks.Lock: void lockInterruptibly()>","<java.util.concurrent.locks.Lock: void lockInterruptibly()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[],int,int)>"
"<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>","<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>"
"<java.time.OffsetTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category valueOf(java.lang.String)>","<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category valueOf(java.lang.String)>"
"<android.media.ImageReader: int getDataSpace()>","<android.media.ImageReader: int getDataSpace()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setExtras(android.os.Bundle)>"
"<android.telephony.TelephonyCallback$CallDisconnectCauseListener: void onCallDisconnectCauseChanged(int,int)>","<android.telephony.TelephonyCallback$CallDisconnectCauseListener: void onCallDisconnectCauseChanged(int,int)>"
"<android.graphics.Outline: void setPath(android.graphics.Path)>","<android.graphics.Outline: void setPath(android.graphics.Path)>"
"<java.util.Set: java.util.Iterator iterator()>","<java.util.Set: java.util.Iterator iterator()>"
"<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RunningTaskInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.net.Network: void bindSocket(java.io.FileDescriptor)>","<android.net.Network: void bindSocket(java.io.FileDescriptor)>"
"<android.transition.Transition: java.lang.String getName()>","<android.transition.Transition: java.lang.String getName()>"
"<android.media.MediaDrm: void releaseAllSecureStops()>","<android.media.MediaDrm: void releaseAllSecureStops()>"
"<android.os.Parcel: void writeByteArray(byte[])>","<android.os.Parcel: void writeByteArray(byte[])>"
"<android.os.ParcelFileDescriptor$FileDescriptorDetachedException: void <init>()>","<android.os.ParcelFileDescriptor$FileDescriptorDetachedException: void <init>()>"
"<java.util.Map: int size()>","<java.util.Map: int size()>"
"<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback)>","<android.media.session.MediaController: void registerCallback(android.media.session.MediaController$Callback)>"
"<java.nio.DoubleBuffer: java.nio.Buffer rewind()>","<java.nio.DoubleBuffer: java.nio.Buffer rewind()>"
"<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,android.icu.util.ULocale)>"
"<android.view.Window: void openPanel(int,android.view.KeyEvent)>","<android.view.Window: void openPanel(int,android.view.KeyEvent)>"
"<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>","<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>"
"<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>","<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>"
"<java.util.Arrays: boolean equals(long[],int,int,long[],int,int)>","<java.util.Arrays: boolean equals(long[],int,int,long[],int,int)>"
"<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>","<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>"
"<android.view.translation.TranslationCapability: boolean isUiTranslationEnabled()>","<android.view.translation.TranslationCapability: boolean isUiTranslationEnabled()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)>"
"<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>","<java.util.NavigableMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>"
"<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String getName()>","<android.hardware.camera2.CameraCharacteristics$Key: java.lang.String getName()>"
"<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>","<android.view.DisplayCutout: android.graphics.Insets getWaterfallInsets()>"
"<android.database.ContentObserver: void onChange(boolean)>","<android.database.ContentObserver: void onChange(boolean)>"
"<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>","<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>"
"<android.content.res.TypedArray: java.lang.CharSequence getText(int)>","<android.content.res.TypedArray: java.lang.CharSequence getText(int)>"
"<android.os.Vibrator: int areAllEffectsSupported(int[])>","<android.os.Vibrator: int areAllEffectsSupported(int[])>"
"<android.app.RemoteAction: boolean equals(java.lang.Object)>","<android.app.RemoteAction: boolean equals(java.lang.Object)>"
"<java.time.ZoneId: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.ZoneId: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.content.pm.PackageManager: void <clinit>()>","<android.content.pm.PackageManager: void <clinit>()>"
"<java.lang.Long: java.lang.String toUnsignedString(long,int)>","<java.lang.Long: java.lang.String toUnsignedString(long,int)>"
"<android.graphics.RectF: boolean isEmpty()>","<android.graphics.RectF: boolean isEmpty()>"
"<android.graphics.Outline: void setEmpty()>","<android.graphics.Outline: void setEmpty()>"
"<android.database.sqlite.SQLiteDatabase: long getPageSize()>","<android.database.sqlite.SQLiteDatabase: long getPageSize()>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: int hashCode()>","<android.media.session.MediaSessionManager$RemoteUserInfo: int hashCode()>"
"<java.util.NavigableSet: java.lang.Object ceiling(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object ceiling(java.lang.Object)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>","<java.nio.ShortBuffer: java.nio.ShortBuffer asReadOnlyBuffer()>"
"<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getInstallReason()>","<android.content.pm.PackageInstaller$SessionInfo: int getInstallReason()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<android.app.Activity: void openContextMenu(android.view.View)>","<android.app.Activity: void openContextMenu(android.view.View)>"
"<android.animation.Keyframe: java.lang.Class getType()>","<android.animation.Keyframe: java.lang.Class getType()>"
"<android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>","<android.view.PointerIcon: android.view.PointerIcon create(android.graphics.Bitmap,float,float)>"
"<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>","<android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)>"
"<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)>","<android.view.inputmethod.CursorAnchorInfo: android.graphics.RectF getCharacterBounds(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setRangeInfo(android.view.accessibility.AccessibilityNodeInfo$RangeInfo)>"
"<java.lang.invoke.MethodHandles$Lookup: int lookupModes()>","<java.lang.invoke.MethodHandles$Lookup: int lookupModes()>"
"<java.nio.LongBuffer: boolean equals(java.lang.Object)>","<java.nio.LongBuffer: boolean equals(java.lang.Object)>"
"<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>","<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>"
"<android.view.WindowInsetsController: void addOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>","<android.view.WindowInsetsController: void addOnControllableInsetsChangedListener(android.view.WindowInsetsController$OnControllableInsetsChangedListener)>"
"<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>","<java.nio.channels.spi.AbstractSelectionKey: boolean isValid()>"
"<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>","<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>"
"<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>","<android.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>"
"<android.widget.TextView: int getRightPaddingOffset()>","<android.widget.TextView: int getRightPaddingOffset()>"
"<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>","<java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>"
"<java.util.Random: java.util.stream.IntStream ints(long)>","<java.util.Random: java.util.stream.IntStream ints(long)>"
"<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.content.res.AssetManager$AssetInputStream: int read(byte[])>","<android.content.res.AssetManager$AssetInputStream: int read(byte[])>"
"<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>","<android.media.AudioManager: void registerAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback,android.os.Handler)>"
"<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()>","<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getLabel()>"
"<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<android.view.textclassifier.TextClassificationSessionId: java.lang.String toString()>","<android.view.textclassifier.TextClassificationSessionId: java.lang.String toString()>"
"<android.content.pm.PackageManager: void updateInstantAppCookie(byte[])>","<android.content.pm.PackageManager: void updateInstantAppCookie(byte[])>"
"<android.view.animation.Animation$AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>","<android.view.animation.Animation$AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>"
"<android.telephony.TelephonyCallback$SignalStrengthsListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>","<android.telephony.TelephonyCallback$SignalStrengthsListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>"
"<java.nio.file.Path: java.lang.String toString()>","<java.nio.file.Path: java.lang.String toString()>"
"<java.util.Arrays: void fill(double[],int,int,double)>","<java.util.Arrays: void fill(double[],int,int,double)>"
"<android.app.Fragment: void setReenterTransition(android.transition.Transition)>","<android.app.Fragment: void setReenterTransition(android.transition.Transition)>"
"<java.lang.invoke.MethodType: java.lang.String toMethodDescriptorString()>","<java.lang.invoke.MethodType: java.lang.String toMethodDescriptorString()>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setForceDucking(boolean)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setForceDucking(boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View,int)>"
"<java.util.Collection: java.util.Spliterator spliterator()>","<java.util.Collection: java.util.Spliterator spliterator()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putLong(int,long)>","<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putLong(int,long)>"
"<java.util.ArrayList: boolean isEmpty()>","<java.util.ArrayList: boolean isEmpty()>"
"<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>","<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>"
"<android.content.pm.Attribution: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.Attribution: void writeToParcel(android.os.Parcel,int)>"
"<android.media.AudioTrack: int setStereoVolume(float,float)>","<android.media.AudioTrack: int setStereoVolume(float,float)>"
"<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: void applyTheme(android.content.res.Resources$Theme)>"
"<android.media.AudioPresentation: void <init>()>","<android.media.AudioPresentation: void <init>()>"
"<android.media.session.PlaybackState$CustomAction: java.lang.CharSequence getName()>","<android.media.session.PlaybackState$CustomAction: java.lang.CharSequence getName()>"
"<java.util.Collections: java.util.Queue checkedQueue(java.util.Queue,java.lang.Class)>","<java.util.Collections: java.util.Queue checkedQueue(java.util.Queue,java.lang.Class)>"
"<android.view.textclassifier.TextSelection: void <clinit>()>","<android.view.textclassifier.TextSelection: void <clinit>()>"
"<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Bitmap: int getHeight()>","<android.graphics.Bitmap: int getHeight()>"
"<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>","<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>"
"<android.graphics.SurfaceTexture: boolean isReleased()>","<android.graphics.SurfaceTexture: boolean isReleased()>"
"<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>","<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>"
"<java.time.temporal.ChronoUnit: boolean isTimeBased()>","<java.time.temporal.ChronoUnit: boolean isTimeBased()>"
"<android.app.PendingIntent: int getCreatorUid()>","<android.app.PendingIntent: int getCreatorUid()>"
"<android.telephony.TelephonyManager: boolean setOperatorBrandOverride(java.lang.String)>","<android.telephony.TelephonyManager: boolean setOperatorBrandOverride(java.lang.String)>"
"<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>","<android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)>"
"<java.util.List: boolean containsAll(java.util.Collection)>","<java.util.List: boolean containsAll(java.util.Collection)>"
"<android.widget.AbsListView: void setBottomEdgeEffectColor(int)>","<android.widget.AbsListView: void setBottomEdgeEffectColor(int)>"
"<android.media.SyncParams: android.media.SyncParams setSyncSource(int)>","<android.media.SyncParams: android.media.SyncParams setSyncSource(int)>"
"<android.widget.TextView: int[] onCreateDrawableState(int)>","<android.widget.TextView: int[] onCreateDrawableState(int)>"
"<android.widget.ListView: android.widget.ListAdapter getAdapter()>","<android.widget.ListView: android.widget.ListAdapter getAdapter()>"
"<java.util.function.DoubleToIntFunction: int applyAsInt(double)>","<java.util.function.DoubleToIntFunction: int applyAsInt(double)>"
"<java.util.function.DoublePredicate: java.util.function.DoublePredicate or(java.util.function.DoublePredicate)>","<java.util.function.DoublePredicate: java.util.function.DoublePredicate or(java.util.function.DoublePredicate)>"
"<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.view.View: void setScrollX(int)>","<android.view.View: void setScrollX(int)>"
"<java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>","<java.util.stream.Stream: java.util.stream.Stream concat(java.util.stream.Stream,java.util.stream.Stream)>"
"<java.time.ZonedDateTime: int getHour()>","<java.time.ZonedDateTime: int getHour()>"
"<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>"
"<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>","<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()>"
"<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>","<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>"
"<java.lang.Character: void <clinit>()>","<java.lang.Character: void <clinit>()>"
"<android.os.Debug: void startNativeTracing()>","<android.os.Debug: void startNativeTracing()>"
"<android.view.textclassifier.TextClassifier: void destroy()>","<android.view.textclassifier.TextClassifier: void destroy()>"
"<java.time.Month: int minLength()>","<java.time.Month: int minLength()>"
"<android.graphics.Canvas: void drawRGB(int,int,int)>","<android.graphics.Canvas: void drawRGB(int,int,int)>"
"<android.view.View: void onWindowVisibilityChanged(int)>","<android.view.View: void onWindowVisibilityChanged(int)>"
"<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setColor(int)>","<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setColor(int)>"
"<android.telephony.TelephonyCallback$ImsCallDisconnectCauseListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>","<android.telephony.TelephonyCallback$ImsCallDisconnectCauseListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>"
"<java.util.Locale: java.lang.String getDisplayScript()>","<java.util.Locale: java.lang.String getDisplayScript()>"
"<java.lang.AssertionError: void <init>()>","<java.lang.AssertionError: void <init>()>"
"<android.net.LinkProperties: int describeContents()>","<android.net.LinkProperties: int describeContents()>"
"<android.app.ActionBar: int getHeight()>","<android.app.ActionBar: int getHeight()>"
"<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent valueOf(java.lang.String)>","<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent valueOf(java.lang.String)>"
"<android.media.RemoteControlClient$MetadataEditor: java.lang.Object clone()>","<android.media.RemoteControlClient$MetadataEditor: java.lang.Object clone()>"
"<android.net.IpSecTransform: void close()>","<android.net.IpSecTransform: void close()>"
"<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>","<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>"
"<java.lang.Double: int hashCode()>","<java.lang.Double: int hashCode()>"
"<android.media.session.MediaSession$QueueItem: java.lang.String toString()>","<android.media.session.MediaSession$QueueItem: java.lang.String toString()>"
"<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>","<android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)>"
"<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>","<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>"
"<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<java.time.Instant: int compareTo(java.lang.Object)>","<java.time.Instant: int compareTo(java.lang.Object)>"
"<java.lang.invoke.VarHandle: java.lang.Object getVolatile(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getVolatile(java.lang.Object[])>"
"<android.widget.AdapterView: void removeView(android.view.View)>","<android.widget.AdapterView: void removeView(android.view.View)>"
"<java.nio.channels.AsynchronousFileChannel: long size()>","<java.nio.channels.AsynchronousFileChannel: long size()>"
"<android.content.pm.PackageInstaller$SessionParams: void <clinit>()>","<android.content.pm.PackageInstaller$SessionParams: void <clinit>()>"
"<android.media.RemoteController: android.media.RemoteController$MetadataEditor editMetadata()>","<android.media.RemoteController: android.media.RemoteController$MetadataEditor editMetadata()>"
"<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>","<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>"
"<java.time.Period: java.time.Period minusDays(long)>","<java.time.Period: java.time.Period minusDays(long)>"
"<android.transition.Transition: android.transition.Transition setInterpolator(android.animation.TimeInterpolator)>","<android.transition.Transition: android.transition.Transition setInterpolator(android.animation.TimeInterpolator)>"
"<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>","<java.nio.file.Watchable: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>"
"<android.widget.TextView: boolean showContextMenu(float,float)>","<android.widget.TextView: boolean showContextMenu(float,float)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,android.animation.Keyframe[])>"
"<java.util.Collections: java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap)>","<java.util.Collections: java.util.NavigableMap synchronizedNavigableMap(java.util.NavigableMap)>"
"<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,float,int)>","<android.widget.RemoteViews: void setIntDimen(int,java.lang.String,float,int)>"
"<java.util.concurrent.Semaphore: void reducePermits(int)>","<java.util.concurrent.Semaphore: void reducePermits(int)>"
"<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>","<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>"
"<android.widget.RemoteViews: void setOnCheckedChangeResponse(int,android.widget.RemoteViews$RemoteResponse)>","<android.widget.RemoteViews: void setOnCheckedChangeResponse(int,android.widget.RemoteViews$RemoteResponse)>"
"<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>","<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>"
"<android.view.Window: android.content.res.TypedArray getWindowStyle()>","<android.view.Window: android.content.res.TypedArray getWindowStyle()>"
"<android.view.View: void postOnAnimation(java.lang.Runnable)>","<android.view.View: void postOnAnimation(java.lang.Runnable)>"
"<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>","<android.content.ContextWrapper: void startActivities(android.content.Intent[],android.os.Bundle)>"
"<android.net.ProxyInfo: int describeContents()>","<android.net.ProxyInfo: int describeContents()>"
"<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>","<android.view.inputmethod.InputContentInfo: void <init>(android.net.Uri,android.content.ClipDescription,android.net.Uri)>"
"<android.graphics.drawable.BitmapDrawable: void setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.BitmapDrawable: void setTintBlendMode(android.graphics.BlendMode)>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>"
"<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>","<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)>"
"<java.util.function.Predicate: boolean test(java.lang.Object)>","<java.util.function.Predicate: boolean test(java.lang.Object)>"
"<android.content.pm.PackageManager$PackageInfoFlags: long getValue()>","<android.content.pm.PackageManager$PackageInfoFlags: long getValue()>"
"<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()>","<android.view.textclassifier.TextLinks: java.lang.CharSequence getText()>"
"<java.util.Map: java.util.Collection values()>","<java.util.Map: java.util.Collection values()>"
"<android.os.IInterface: android.os.IBinder asBinder()>","<android.os.IInterface: android.os.IBinder asBinder()>"
"<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext$Builder setWidgetVersion(java.lang.String)>","<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext$Builder setWidgetVersion(java.lang.String)>"
"<java.lang.Integer: java.lang.String toUnsignedString(int)>","<java.lang.Integer: java.lang.String toUnsignedString(int)>"
"<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>","<android.transition.Transition: android.transition.Transition addTarget(android.view.View)>"
"<android.media.AudioManager: java.util.List getAudioDevicesForAttributes(android.media.AudioAttributes)>","<android.media.AudioManager: java.util.List getAudioDevicesForAttributes(android.media.AudioAttributes)>"
"<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(android.view.MenuItem)>","<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionCollapse(android.view.MenuItem)>"
"<android.media.AudioFormat: int describeContents()>","<android.media.AudioFormat: int describeContents()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream$Builder builder()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream$Builder builder()>"
"<android.content.pm.PackageInstaller: void uninstallExistingPackage(java.lang.String,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void uninstallExistingPackage(java.lang.String,android.content.IntentSender)>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyShortcut(int,android.view.KeyEvent)>"
"<android.media.AudioManager: void unregisterAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback)>","<android.media.AudioManager: void unregisterAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback)>"
"<java.lang.IllegalMonitorStateException: void <init>()>","<java.lang.IllegalMonitorStateException: void <init>()>"
"<java.util.ArrayList: boolean add(java.lang.Object)>","<java.util.ArrayList: boolean add(java.lang.Object)>"
"<android.media.Image: void setTimestamp(long)>","<android.media.Image: void setTimestamp(long)>"
"<android.app.assist.AssistContent: void setIntent(android.content.Intent)>","<android.app.assist.AssistContent: void setIntent(android.content.Intent)>"
"<android.graphics.Color: java.lang.String toString()>","<android.graphics.Color: java.lang.String toString()>"
"<android.widget.MediaController: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.widget.MediaController: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>"
"<android.window.SplashScreenView: java.time.Duration getIconAnimationDuration()>","<android.window.SplashScreenView: java.time.Duration getIconAnimationDuration()>"
"<java.lang.StringBuffer: java.lang.Appendable append(char)>","<java.lang.StringBuffer: java.lang.Appendable append(char)>"
"<android.content.Intent: boolean filterEquals(android.content.Intent)>","<android.content.Intent: boolean filterEquals(android.content.Intent)>"
"<android.app.Activity: void setFeatureDrawableAlpha(int,int)>","<android.app.Activity: void setFeatureDrawableAlpha(int,int)>"
"<android.app.Fragment: void unregisterForContextMenu(android.view.View)>","<android.app.Fragment: void unregisterForContextMenu(android.view.View)>"
"<android.content.IntentFilter: void <clinit>()>","<android.content.IntentFilter: void <clinit>()>"
"<android.graphics.Matrix: boolean isIdentity()>","<android.graphics.Matrix: boolean isIdentity()>"
"<java.lang.System: java.util.Properties getProperties()>","<java.lang.System: java.util.Properties getProperties()>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>"
"<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,android.os.Handler)>","<android.hardware.camera2.CameraManager: void registerAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback,android.os.Handler)>"
"<android.graphics.RecordingCanvas: void drawPath(android.graphics.Path,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPath(android.graphics.Path,android.graphics.Paint)>"
"<android.graphics.Paint: void setWordSpacing(float)>","<android.graphics.Paint: void setWordSpacing(float)>"
"<android.graphics.NinePatch: int getDensity()>","<android.graphics.NinePatch: int getDensity()>"
"<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>","<android.media.session.MediaController: android.media.MediaMetadata getMetadata()>"
"<android.view.Window: void setIcon(int)>","<android.view.Window: void setIcon(int)>"
"<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>"
"<java.net.URL: boolean sameFile(java.net.URL)>","<java.net.URL: boolean sameFile(java.net.URL)>"
"<android.app.Activity: void registerComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Activity: void registerComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.widget.MediaController$MediaPlayerControl: void start()>","<android.widget.MediaController$MediaPlayerControl: void start()>"
"<android.hardware.SyncFence: void <clinit>()>","<android.hardware.SyncFence: void <clinit>()>"
"<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setItalic(boolean)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setItalic(boolean)>"
"<java.util.function.DoublePredicate: java.util.function.DoublePredicate and(java.util.function.DoublePredicate)>","<java.util.function.DoublePredicate: java.util.function.DoublePredicate and(java.util.function.DoublePredicate)>"
"<android.content.pm.PackageInstaller$Session: java.io.InputStream openRead(java.lang.String)>","<android.content.pm.PackageInstaller$Session: java.io.InputStream openRead(java.lang.String)>"
"<android.util.SparseBooleanArray: void removeAt(int)>","<android.util.SparseBooleanArray: void removeAt(int)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createShaderEffect(android.graphics.Shader)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createShaderEffect(android.graphics.Shader)>"
"<android.os.Message: java.lang.String toString()>","<android.os.Message: java.lang.String toString()>"
"<java.util.Arrays: boolean equals(int[],int[])>","<java.util.Arrays: boolean equals(int[],int[])>"
"<android.telephony.TelephonyManager: int getDataState()>","<android.telephony.TelephonyManager: int getDataState()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentSaveInstanceState(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>","<java.security.Provider: void <init>(java.lang.String,double,java.lang.String)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighResolutionOutputSizes(int)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighResolutionOutputSizes(int)>"
"<java.time.ZoneOffset: int compareTo(java.time.ZoneOffset)>","<java.time.ZoneOffset: int compareTo(java.time.ZoneOffset)>"
"<java.util.Arrays: boolean equals(boolean[],boolean[])>","<java.util.Arrays: boolean equals(boolean[],boolean[])>"
"<android.os.Parcel: java.lang.String readString()>","<android.os.Parcel: java.lang.String readString()>"
"<android.view.WindowInsetsAnimationController: android.graphics.Insets getShownStateInsets()>","<android.view.WindowInsetsAnimationController: android.graphics.Insets getShownStateInsets()>"
"<android.animation.LayoutTransition: long getStartDelay(int)>","<android.animation.LayoutTransition: long getStartDelay(int)>"
"<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>","<android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>"
"<android.view.ViewPropertyAnimator: long getStartDelay()>","<android.view.ViewPropertyAnimator: long getStartDelay()>"
"<android.util.AndroidException: void <init>(java.lang.String)>","<android.util.AndroidException: void <init>(java.lang.String)>"
"<android.util.Log: int v(java.lang.String,java.lang.String)>","<android.util.Log: int v(java.lang.String,java.lang.String)>"
"<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>","<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>"
"<android.view.View: boolean isHorizontalScrollBarEnabled()>","<android.view.View: boolean isHorizontalScrollBarEnabled()>"
"<android.content.res.TypedArray: java.lang.String getString(int)>","<android.content.res.TypedArray: java.lang.String getString(int)>"
"<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>","<java.util.Comparator: java.util.Comparator nullsLast(java.util.Comparator)>"
"<android.content.ContextWrapper: java.io.File getCacheDir()>","<android.content.ContextWrapper: java.io.File getCacheDir()>"
"<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback)>","<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback)>"
"<android.content.ContentProvider: void shutdown()>","<android.content.ContentProvider: void shutdown()>"
"<java.nio.file.AccessMode: java.nio.file.AccessMode[] values()>","<java.nio.file.AccessMode: java.nio.file.AccessMode[] values()>"
"<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.text.TextUtils: boolean isGraphic(char)>","<android.text.TextUtils: boolean isGraphic(char)>"
"<java.lang.Long: long remainderUnsigned(long,long)>","<java.lang.Long: long remainderUnsigned(long,long)>"
"<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer asReadOnlyBuffer()>"
"<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>","<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>"
"<android.view.View: boolean isPivotSet()>","<android.view.View: boolean isPivotSet()>"
"<android.view.MotionEvent: int getActionButton()>","<android.view.MotionEvent: int getActionButton()>"
"<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>","<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)>"
"<android.view.KeyEvent: char getMatch(char[],int)>","<android.view.KeyEvent: char getMatch(char[],int)>"
"<android.graphics.Paint: void reset()>","<android.graphics.Paint: void reset()>"
"<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.widget.ListView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.widget.AbsListView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.widget.AbsListView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<java.util.function.IntToDoubleFunction: double applyAsDouble(int)>","<java.util.function.IntToDoubleFunction: double applyAsDouble(int)>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()>"
"<java.lang.ThreadGroup: java.lang.String toString()>","<java.lang.ThreadGroup: java.lang.String toString()>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewInsetsChanged(android.graphics.Insets)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewInsetsChanged(android.graphics.Insets)>"
"<android.media.MediaDrm: void setOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener,android.os.Handler)>","<android.media.MediaDrm: void setOnKeyStatusChangeListener(android.media.MediaDrm$OnKeyStatusChangeListener,android.os.Handler)>"
"<android.util.Range: java.lang.Comparable getUpper()>","<android.util.Range: java.lang.Comparable getUpper()>"
"<java.nio.file.AccessMode: java.nio.file.AccessMode valueOf(java.lang.String)>","<java.nio.file.AccessMode: java.nio.file.AccessMode valueOf(java.lang.String)>"
"<android.view.contentcapture.ContentCaptureSession: void destroy()>","<android.view.contentcapture.ContentCaptureSession: void destroy()>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle of(java.util.Locale)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle of(java.util.Locale)>"
"<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.AbstractCollection: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.hardware.SensorListener: void onSensorChanged(int,float[])>","<android.hardware.SensorListener: void onSensorChanged(int,float[])>"
"<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>","<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>"
"<android.os.Process: void sendSignal(int,int)>","<android.os.Process: void sendSignal(int,int)>"
"<android.content.res.Resources: int getDimensionPixelSize(int)>","<android.content.res.Resources: int getDimensionPixelSize(int)>"
"<java.time.LocalTime: java.time.LocalTime plusHours(long)>","<java.time.LocalTime: java.time.LocalTime plusHours(long)>"
"<android.net.IpSecAlgorithm: java.lang.String toString()>","<android.net.IpSecAlgorithm: java.lang.String toString()>"
"<android.telephony.SignalStrength: void <clinit>()>","<android.telephony.SignalStrength: void <clinit>()>"
"<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.content.Intent: java.lang.String getDataString()>","<android.content.Intent: java.lang.String getDataString()>"
"<android.view.textclassifier.TextClassificationContext$Builder: void <init>(java.lang.String,java.lang.String)>","<android.view.textclassifier.TextClassificationContext$Builder: void <init>(java.lang.String,java.lang.String)>"
"<android.view.textclassifier.SelectionEvent: void <clinit>()>","<android.view.textclassifier.SelectionEvent: void <clinit>()>"
"<android.telephony.TelephonyManager: boolean isDataEnabled()>","<android.telephony.TelephonyManager: boolean isDataEnabled()>"
"<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>","<android.transition.Transition: android.transition.Transition addListener(android.transition.Transition$TransitionListener)>"
"<android.os.PatternMatcher: void <init>(android.os.Parcel)>","<android.os.PatternMatcher: void <init>(android.os.Parcel)>"
"<android.icu.util.ULocale: java.lang.String getLanguage(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getLanguage(java.lang.String)>"
"<android.net.Uri: int compareTo(android.net.Uri)>","<android.net.Uri: int compareTo(android.net.Uri)>"
"<android.widget.RemoteViews: void setAccessibilityTraversalAfter(int,int)>","<android.widget.RemoteViews: void setAccessibilityTraversalAfter(int,int)>"
"<android.media.VolumeShaper$Operation: void <clinit>()>","<android.media.VolumeShaper$Operation: void <clinit>()>"
"<android.view.animation.Animation$AnimationListener: void onAnimationEnd(android.view.animation.Animation)>","<android.view.animation.Animation$AnimationListener: void onAnimationEnd(android.view.animation.Animation)>"
"<android.graphics.Movie: int width()>","<android.graphics.Movie: int width()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setInputType(int)>"
"<java.util.Properties: java.lang.String getProperty(java.lang.String)>","<java.util.Properties: java.lang.String getProperty(java.lang.String)>"
"<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>","<android.os.CancellationSignal: void setOnCancelListener(android.os.CancellationSignal$OnCancelListener)>"
"<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>","<android.hardware.Camera: void setPreviewTexture(android.graphics.SurfaceTexture)>"
"<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>","<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>"
"<android.telephony.SignalStrength: boolean equals(java.lang.Object)>","<android.telephony.SignalStrength: boolean equals(java.lang.Object)>"
"<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>","<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>"
"<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>","<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>"
"<android.view.WindowMetrics: android.graphics.Rect getBounds()>","<android.view.WindowMetrics: android.graphics.Rect getBounds()>"
"<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>","<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>"
"<android.view.accessibility.AccessibilityWindowInfo: int hashCode()>","<android.view.accessibility.AccessibilityWindowInfo: int hashCode()>"
"<android.database.ContentObserver: void onChange(boolean,java.util.Collection,int)>","<android.database.ContentObserver: void onChange(boolean,java.util.Collection,int)>"
"<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUid(int)>","<android.content.pm.PackageInstaller$SessionParams: void setOriginatingUid(int)>"
"<android.hardware.lights.LightState: java.lang.String toString()>","<android.hardware.lights.LightState: java.lang.String toString()>"
"<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)>"
"<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()>","<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()>"
"<java.nio.channels.FileLock: void release()>","<java.nio.channels.FileLock: void release()>"
"<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String)>"
"<java.nio.ShortBuffer: java.nio.ByteOrder order()>","<java.nio.ShortBuffer: java.nio.ByteOrder order()>"
"<java.net.Inet4Address: boolean isMCSiteLocal()>","<java.net.Inet4Address: boolean isMCSiteLocal()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)>"
"<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>","<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection,java.util.Locale$FilteringMode)>"
"<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.Shader$TileMode)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.Shader$TileMode)>"
"<java.util.stream.IntStream: java.util.PrimitiveIterator$OfInt iterator()>","<java.util.stream.IntStream: java.util.PrimitiveIterator$OfInt iterator()>"
"<java.util.OptionalDouble: boolean equals(java.lang.Object)>","<java.util.OptionalDouble: boolean equals(java.lang.Object)>"
"<android.media.PlaybackParams: float getPitch()>","<android.media.PlaybackParams: float getPitch()>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>"
"<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>","<android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()>"
"<android.view.WindowInsets: int getStableInsetRight()>","<android.view.WindowInsets: int getStableInsetRight()>"
"<android.view.Window: android.transition.Transition getReenterTransition()>","<android.view.Window: android.transition.Transition getReenterTransition()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizesFor(android.util.Range)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizesFor(android.util.Range)>"
"<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setOriginatingNumbers(java.util.List)>","<android.telephony.VisualVoicemailSmsFilterSettings$Builder: android.telephony.VisualVoicemailSmsFilterSettings$Builder setOriginatingNumbers(java.util.List)>"
"<android.app.Activity: void onDestroy()>","<android.app.Activity: void onDestroy()>"
"<java.text.CharacterIterator: char setIndex(int)>","<java.text.CharacterIterator: char setIndex(int)>"
"<java.util.Date: int getDate()>","<java.util.Date: int getDate()>"
"<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>","<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)>"
"<android.widget.RemoteViews: void setTextColor(int,int)>","<android.widget.RemoteViews: void setTextColor(int,int)>"
"<android.hardware.camera2.MultiResolutionImageReader: void finalize()>","<android.hardware.camera2.MultiResolutionImageReader: void finalize()>"
"<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>","<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>"
"<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>","<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>"
"<java.lang.Long: long parseLong(java.lang.CharSequence,int,int,int)>","<java.lang.Long: long parseLong(java.lang.CharSequence,int,int,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>"
"<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.content.ContentProviderClient: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>"
"<java.net.URI: java.lang.String getRawAuthority()>","<java.net.URI: java.lang.String getRawAuthority()>"
"<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>","<android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>"
"<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>","<android.content.pm.PackageInstaller: void updateSessionAppIcon(int,android.graphics.Bitmap)>"
"<android.text.Layout: int getWidth()>","<android.text.Layout: int getWidth()>"
"<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>","<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)>"
"<android.view.SurfaceControl$Transaction: int describeContents()>","<android.view.SurfaceControl$Transaction: int describeContents()>"
"<android.content.AttributionSource$Builder: void <init>(int)>","<android.content.AttributionSource$Builder: void <init>(int)>"
"<java.time.Period: void <clinit>()>","<java.time.Period: void <clinit>()>"
"<android.os.UserHandle: int describeContents()>","<android.os.UserHandle: int describeContents()>"
"<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)>","<android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)>"
"<android.os.Parcel: void recycle()>","<android.os.Parcel: void recycle()>"
"<java.lang.StringBuilder: void getChars(int,int,char[],int)>","<java.lang.StringBuilder: void getChars(int,int,char[],int)>"
"<android.view.WindowId: java.lang.String toString()>","<android.view.WindowId: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest build()>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest build()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordStartIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordStartIndex()>"
"<java.util.Locale: java.lang.String getISO3Country()>","<java.util.Locale: java.lang.String getISO3Country()>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setLinkUri(android.net.Uri)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setLinkUri(android.net.Uri)>"
"<android.content.res.Configuration: boolean isScreenWideColorGamut()>","<android.content.res.Configuration: boolean isScreenWideColorGamut()>"
"<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setDefaultLocales(android.os.LocaleList)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setDefaultLocales(android.os.LocaleList)>"
"<java.util.regex.Pattern: void <init>()>","<java.util.regex.Pattern: void <init>()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle iteratedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle iteratedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.content.res.Resources: java.lang.String getResourceName(int)>","<android.content.res.Resources: java.lang.String getResourceName(int)>"
"<android.content.pm.PackageInstaller$SessionInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageInstaller$SessionInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription build()>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription build()>"
"<android.media.AudioAttributes: boolean areHapticChannelsMuted()>","<android.media.AudioAttributes: boolean areHapticChannelsMuted()>"
"<android.media.MediaDrm: void setOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener,android.os.Handler)>","<android.media.MediaDrm: void setOnExpirationUpdateListener(android.media.MediaDrm$OnExpirationUpdateListener,android.os.Handler)>"
"<android.app.Activity: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>","<android.app.Activity: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>"
"<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>","<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>"
"<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext build()>","<android.view.contentcapture.ContentCaptureContext$Builder: android.view.contentcapture.ContentCaptureContext build()>"
"<java.lang.ThreadGroup: void setDaemon(boolean)>","<java.lang.ThreadGroup: void setDaemon(boolean)>"
"<android.graphics.Paint: void setFilterBitmap(boolean)>","<android.graphics.Paint: void setFilterBitmap(boolean)>"
"<android.content.pm.ServiceInfo: int getForegroundServiceType()>","<android.content.pm.ServiceInfo: int getForegroundServiceType()>"
"<android.media.AudioRecord: int getBufferSizeInFrames()>","<android.media.AudioRecord: int getBufferSizeInFrames()>"
"<android.content.ContextParams$Builder: void <init>()>","<android.content.ContextParams$Builder: void <init>()>"
"<android.app.Dialog: void setContentView(android.view.View)>","<android.app.Dialog: void setContentView(android.view.View)>"
"<android.media.Spatializer: void removeOnHeadTrackerAvailableListener(android.media.Spatializer$OnHeadTrackerAvailableListener)>","<android.media.Spatializer: void removeOnHeadTrackerAvailableListener(android.media.Spatializer$OnHeadTrackerAvailableListener)>"
"<java.time.LocalTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.text.Layout: int getLineBottom(int)>","<android.text.Layout: int getLineBottom(int)>"
"<android.media.MediaDrm: void setOnEventListener(java.util.concurrent.Executor,android.media.MediaDrm$OnEventListener)>","<android.media.MediaDrm: void setOnEventListener(java.util.concurrent.Executor,android.media.MediaDrm$OnEventListener)>"
"<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()>","<java.text.AttributedCharacterIterator$Attribute: java.lang.String getName()>"
"<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.media.ImageReader: int getHeight()>","<android.media.ImageReader: int getHeight()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void setExtras(android.os.Bundle)>","<android.app.VoiceInteractor$PickOptionRequest$Option: void setExtras(android.os.Bundle)>"
"<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>","<java.util.Iterator: void forEachRemaining(java.util.function.Consumer)>"
"<android.view.MotionEvent: float getPressure(int)>","<android.view.MotionEvent: float getPressure(int)>"
"<android.app.Dialog: android.view.SearchEvent getSearchEvent()>","<android.app.Dialog: android.view.SearchEvent getSearchEvent()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer)>"
"<android.widget.Toolbar: void setSubtitleTextColor(int)>","<android.widget.Toolbar: void setSubtitleTextColor(int)>"
"<java.io.PrintStream: void clearError()>","<java.io.PrintStream: void clearError()>"
"<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>","<android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()>"
"<android.media.AudioRecord: int getNotificationMarkerPosition()>","<android.media.AudioRecord: int getNotificationMarkerPosition()>"
"<android.widget.RelativeLayout: void setHorizontalGravity(int)>","<android.widget.RelativeLayout: void setHorizontalGravity(int)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int)>"
"<android.hardware.camera2.CaptureRequest: boolean isReprocess()>","<android.hardware.camera2.CaptureRequest: boolean isReprocess()>"
"<java.nio.file.Path: boolean startsWith(java.lang.String)>","<java.nio.file.Path: boolean startsWith(java.lang.String)>"
"<android.content.pm.ServiceInfo: void <clinit>()>","<android.content.pm.ServiceInfo: void <clinit>()>"
"<android.telephony.TelephonyDisplayInfo: void <init>()>","<android.telephony.TelephonyDisplayInfo: void <init>()>"
"<android.hardware.TriggerEvent: void <init>()>","<android.hardware.TriggerEvent: void <init>()>"
"<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>","<android.graphics.NinePatch: android.graphics.Bitmap getBitmap()>"
"<android.media.AudioAttributes: void <init>()>","<android.media.AudioAttributes: void <init>()>"
"<java.security.Principal: boolean equals(java.lang.Object)>","<java.security.Principal: boolean equals(java.lang.Object)>"
"<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.util.Optional: boolean isPresent()>","<java.util.Optional: boolean isPresent()>"
"<android.widget.AdapterView: long getSelectedItemId()>","<android.widget.AdapterView: long getSelectedItemId()>"
"<java.util.Arrays: void fill(char[],char)>","<java.util.Arrays: void fill(char[],char)>"
"<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>","<android.os.VibrationAttributes$Builder: android.os.VibrationAttributes build()>"
"<android.hardware.Camera$Face: void <init>()>","<android.hardware.Camera$Face: void <init>()>"
"<android.os.LocaleList: int hashCode()>","<android.os.LocaleList: int hashCode()>"
"<android.media.MediaPlayer: void prepare()>","<android.media.MediaPlayer: void prepare()>"
"<android.content.pm.PackageManager$NameNotFoundException: void <init>()>","<android.content.pm.PackageManager$NameNotFoundException: void <init>()>"
"<android.app.VoiceInteractor$Request: android.content.Context getContext()>","<android.app.VoiceInteractor$Request: android.content.Context getContext()>"
"<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>","<java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.Path)>","<android.graphics.Canvas: boolean quickReject(android.graphics.Path)>"
"<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>","<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>"
"<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>","<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentPreCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<android.view.InputDevice$MotionRange: boolean isFromSource(int)>","<android.view.InputDevice$MotionRange: boolean isFromSource(int)>"
"<java.io.PrintWriter: void <init>(java.lang.String)>","<java.io.PrintWriter: void <init>(java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: void <init>(java.util.List)>","<android.view.textclassifier.ConversationActions$Request$Builder: void <init>(java.util.List)>"
"<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>","<android.hardware.TriggerEventListener: void onTrigger(android.hardware.TriggerEvent)>"
"<android.os.Bundle: float getFloat(java.lang.String)>","<android.os.Bundle: float getFloat(java.lang.String)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setText(int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>"
"<java.util.Hashtable: int hashCode()>","<java.util.Hashtable: int hashCode()>"
"<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>","<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>"
"<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>","<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)>"
"<android.app.PendingIntent: android.app.PendingIntent getForegroundService(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getForegroundService(android.content.Context,int,android.content.Intent,int)>"
"<java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>","<java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>"
"<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<android.telephony.BarringInfo: int hashCode()>","<android.telephony.BarringInfo: int hashCode()>"
"<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.graphics.Bitmap: int getByteCount()>","<android.graphics.Bitmap: int getByteCount()>"
"<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setIcon(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setIcon(int)>"
"<java.lang.NoSuchMethodError: void <init>(java.lang.String)>","<java.lang.NoSuchMethodError: void <init>(java.lang.String)>"
"<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int)>","<android.view.inputmethod.InputConnection: boolean requestCursorUpdates(int)>"
"<java.io.PrintWriter: void close()>","<java.io.PrintWriter: void close()>"
"<android.view.View: void onFinishTemporaryDetach()>","<android.view.View: void onFinishTemporaryDetach()>"
"<android.view.WindowInsets$Builder: void <init>()>","<android.view.WindowInsets$Builder: void <init>()>"
"<android.view.View: void drawableStateChanged()>","<android.view.View: void drawableStateChanged()>"
"<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[],int,int)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setExtras(android.os.Bundle)>"
"<android.media.AudioTrack: android.os.PersistableBundle getMetrics()>","<android.media.AudioTrack: android.os.PersistableBundle getMetrics()>"
"<android.animation.LayoutTransition: long getDuration(int)>","<android.animation.LayoutTransition: long getDuration(int)>"
"<java.util.OptionalDouble: double orElseGet(java.util.function.DoubleSupplier)>","<java.util.OptionalDouble: double orElseGet(java.util.function.DoubleSupplier)>"
"<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()>","<android.telephony.TelephonyManager: boolean setPreferredNetworkTypeToGlobal()>"
"<android.view.View: float getAlpha()>","<android.view.View: float getAlpha()>"
"<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>","<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>"
"<android.net.ConnectivityManager$NetworkCallback: void onBlockedStatusChanged(android.net.Network,boolean)>","<android.net.ConnectivityManager$NetworkCallback: void onBlockedStatusChanged(android.net.Network,boolean)>"
"<android.transition.Transition$EpicenterCallback: void <init>()>","<android.transition.Transition$EpicenterCallback: void <init>()>"
"<android.view.inputmethod.InputConnection: boolean reportFullscreenMode(boolean)>","<android.view.inputmethod.InputConnection: boolean reportFullscreenMode(boolean)>"
"<java.util.concurrent.TimeUnit: long toNanos(long)>","<java.util.concurrent.TimeUnit: long toNanos(long)>"
"<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>","<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>"
"<android.view.ContentInfo: void <init>()>","<android.view.ContentInfo: void <init>()>"
"<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantLock: int getWaitQueueLength(java.util.concurrent.locks.Condition)>"
"<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>","<java.lang.reflect.Array: void setBoolean(java.lang.Object,int,boolean)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(int)>"
"<java.lang.Long: java.lang.String toBinaryString(long)>","<java.lang.Long: java.lang.String toBinaryString(long)>"
"<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>","<java.lang.reflect.Array: float getFloat(java.lang.Object,int)>"
"<android.provider.Settings$System: void <init>()>","<android.provider.Settings$System: void <init>()>"
"<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)>","<android.media.AudioManager: void unregisterRemoteControlClient(android.media.RemoteControlClient)>"
"<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>","<android.animation.StateListAnimator: android.animation.StateListAnimator clone()>"
"<android.view.View: void setZ(float)>","<android.view.View: void setZ(float)>"
"<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)>","<android.media.session.MediaSession: void setMediaButtonReceiver(android.app.PendingIntent)>"
"<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>","<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction addToBackStack(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()>","<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(int)>"
"<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>","<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setManual(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setManual(boolean)>"
"<android.media.MediaPlayer: void selectTrack(int)>","<android.media.MediaPlayer: void selectTrack(int)>"
"<java.util.Date: void setYear(int)>","<java.util.Date: void setYear(int)>"
"<java.text.ParseException: int getErrorOffset()>","<java.text.ParseException: int getErrorOffset()>"
"<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>","<android.widget.TextView: void setTextColor(android.content.res.ColorStateList)>"
"<java.net.URLConnection: long getExpiration()>","<java.net.URLConnection: long getExpiration()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyPort(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsProxyPort(int)>"
"<android.view.KeyEvent: boolean isGamepadButton(int)>","<android.view.KeyEvent: boolean isGamepadButton(int)>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder setStyle(android.graphics.fonts.FontStyle)>"
"<android.hardware.TriggerEventListener: void <init>()>","<android.hardware.TriggerEventListener: void <init>()>"
"<java.lang.Math: double cosh(double)>","<java.lang.Math: double cosh(double)>"
"<android.view.ViewGroup: void dispatchProvideStructure(android.view.ViewStructure)>","<android.view.ViewGroup: void dispatchProvideStructure(android.view.ViewStructure)>"
"<java.util.Spliterator: int characteristics()>","<java.util.Spliterator: int characteristics()>"
"<android.view.ViewDebug$RecyclerTraceType: void <clinit>()>","<android.view.ViewDebug$RecyclerTraceType: void <clinit>()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets build()>","<android.view.WindowInsets$Builder: android.view.WindowInsets build()>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int)>"
"<android.os.BaseBundle: int getInt(java.lang.String,int)>","<android.os.BaseBundle: int getInt(java.lang.String,int)>"
"<java.nio.charset.CharsetDecoder: java.lang.String replacement()>","<java.nio.charset.CharsetDecoder: java.lang.String replacement()>"
"<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>","<java.nio.CharBuffer: java.nio.CharBuffer asReadOnlyBuffer()>"
"<android.graphics.Matrix: boolean preRotate(float)>","<android.graphics.Matrix: boolean preRotate(float)>"
"<android.app.Activity: boolean onNavigateUp()>","<android.app.Activity: boolean onNavigateUp()>"
"<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>","<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>"
"<java.time.chrono.ChronoZonedDateTime: int hashCode()>","<java.time.chrono.ChronoZonedDateTime: int hashCode()>"
"<java.lang.SecurityManager: boolean inClass(java.lang.String)>","<java.lang.SecurityManager: boolean inClass(java.lang.String)>"
"<android.telephony.CellLocation: void <init>()>","<android.telephony.CellLocation: void <init>()>"
"<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>","<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>"
"<java.util.Arrays: int compareUnsigned(byte[],int,int,byte[],int,int)>","<java.util.Arrays: int compareUnsigned(byte[],int,int,byte[],int,int)>"
"<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>","<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.util.Dictionary: java.lang.Object get(java.lang.Object)>","<java.util.Dictionary: java.lang.Object get(java.lang.Object)>"
"<java.time.Instant: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.Instant: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>","<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>"
"<android.media.session.MediaController$Callback: void onQueueChanged(java.util.List)>","<android.media.session.MediaController$Callback: void onQueueChanged(java.util.List)>"
"<android.os.Parcel: double[] createDoubleArray()>","<android.os.Parcel: double[] createDoubleArray()>"
"<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>","<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>"
"<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.hardware.camera2.params.OutputConfiguration: long getStreamUseCase()>","<android.hardware.camera2.params.OutputConfiguration: long getStreamUseCase()>"
"<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>","<android.content.pm.PackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>"
"<android.view.Display: int getPixelFormat()>","<android.view.Display: int getPixelFormat()>"
"<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>"
"<android.hardware.HardwareBuffer: void <clinit>()>","<android.hardware.HardwareBuffer: void <clinit>()>"
"<android.widget.ListView: int getDividerHeight()>","<android.widget.ListView: int getDividerHeight()>"
"<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()>","<android.content.pm.PackageInstaller$Session: boolean isMultiPackage()>"
"<java.lang.SecurityManager: void checkSetFactory()>","<java.lang.SecurityManager: void checkSetFactory()>"
"<java.time.Instant: long getEpochSecond()>","<java.time.Instant: long getEpochSecond()>"
"<java.time.Instant: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.graphics.Region$Op: android.graphics.Region$Op[] values()>","<android.graphics.Region$Op: android.graphics.Region$Op[] values()>"
"<java.util.Optional: java.lang.String toString()>","<java.util.Optional: java.lang.String toString()>"
"<java.time.chrono.ChronoZonedDateTime: java.lang.String toString()>","<java.time.chrono.ChronoZonedDateTime: java.lang.String toString()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentActivityCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<android.view.KeyEvent: int getFlags()>","<android.view.KeyEvent: int getFlags()>"
"<java.util.Collections: void copy(java.util.List,java.util.List)>","<java.util.Collections: void copy(java.util.List,java.util.List)>"
"<android.media.session.MediaSession: void setExtras(android.os.Bundle)>","<android.media.session.MediaSession: void setExtras(android.os.Bundle)>"
"<android.view.contentcapture.ContentCaptureSession: void notifySessionPaused()>","<android.view.contentcapture.ContentCaptureSession: void notifySessionPaused()>"
"<android.transition.Transition: java.lang.Object clone()>","<android.transition.Transition: java.lang.Object clone()>"
"<android.widget.TextView: void setTextSelectHandleRight(int)>","<android.widget.TextView: void setTextSelectHandleRight(int)>"
"<android.util.Range: android.util.Range intersect(android.util.Range)>","<android.util.Range: android.util.Range intersect(android.util.Range)>"
"<java.util.List: java.util.ListIterator listIterator()>","<java.util.List: java.util.ListIterator listIterator()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>","<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction()>"
"<android.graphics.RenderNode: boolean setElevation(float)>","<android.graphics.RenderNode: boolean setElevation(float)>"
"<java.time.LocalDate: int hashCode()>","<java.time.LocalDate: int hashCode()>"
"<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>","<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>"
"<android.net.RouteInfo: boolean isDefaultRoute()>","<android.net.RouteInfo: boolean isDefaultRoute()>"
"<java.lang.StringBuffer: int indexOf(java.lang.String,int)>","<java.lang.StringBuffer: int indexOf(java.lang.String,int)>"
"<java.io.File: java.io.File getParentFile()>","<java.io.File: java.io.File getParentFile()>"
"<java.lang.System: void runFinalization()>","<java.lang.System: void runFinalization()>"
"<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>","<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>"
"<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>","<android.text.PrecomputedText: android.text.PrecomputedText$Params getParams()>"
"<android.view.inputmethod.InputMethodInfo: void <clinit>()>","<android.view.inputmethod.InputMethodInfo: void <clinit>()>"
"<android.net.SocketKeepalive$Callback: void onStarted()>","<android.net.SocketKeepalive$Callback: void onStarted()>"
"<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>","<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)>"
"<android.icu.util.ULocale: java.util.Iterator getKeywords()>","<android.icu.util.ULocale: java.util.Iterator getKeywords()>"
"<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>","<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>"
"<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()>","<android.hardware.Camera$Parameters: android.hardware.Camera$Size getJpegThumbnailSize()>"
"<android.app.Activity: void onStop()>","<android.app.Activity: void onStop()>"
"<java.io.OutputStream: void close()>","<java.io.OutputStream: void close()>"
"<android.media.session.PlaybackState: float getPlaybackSpeed()>","<android.media.session.PlaybackState: float getPlaybackSpeed()>"
"<java.util.regex.Pattern: int flags()>","<java.util.regex.Pattern: int flags()>"
"<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure$HtmlInfo)>","<android.view.ViewStructure: void setHtmlInfo(android.view.ViewStructure$HtmlInfo)>"
"<android.media.MediaSyncEvent: android.media.MediaSyncEvent createEvent(int)>","<android.media.MediaSyncEvent: android.media.MediaSyncEvent createEvent(int)>"
"<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>","<java.lang.reflect.Array: void setInt(java.lang.Object,int,int)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.ArrayList: int lastIndexOf(java.lang.Object)>","<java.util.ArrayList: int lastIndexOf(java.lang.Object)>"
"<android.animation.PropertyValuesHolder: void <init>()>","<android.animation.PropertyValuesHolder: void <init>()>"
"<android.view.Window: void closeAllPanels()>","<android.view.Window: void closeAllPanels()>"
"<android.view.animation.Animation: void setBackgroundColor(int)>","<android.view.animation.Animation: void setBackgroundColor(int)>"
"<android.view.ViewStructure: android.view.autofill.AutofillId getAutofillId()>","<android.view.ViewStructure: android.view.autofill.AutofillId getAutofillId()>"
"<android.graphics.RenderNode: boolean setPivotY(float)>","<android.graphics.RenderNode: boolean setPivotY(float)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromApk(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>"
"<android.view.InputDevice: java.util.List getMotionRanges()>","<android.view.InputDevice: java.util.List getMotionRanges()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
"<java.util.Map: java.util.Map copyOf(java.util.Map)>","<java.util.Map: java.util.Map copyOf(java.util.Map)>"
"<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>","<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()>"
"<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>","<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>"
"<android.net.LinkProperties: void setNat64Prefix(android.net.IpPrefix)>","<android.net.LinkProperties: void setNat64Prefix(android.net.IpPrefix)>"
"<android.content.res.Configuration: android.os.LocaleList getLocales()>","<android.content.res.Configuration: android.os.LocaleList getLocales()>"
"<android.graphics.ColorSpace: int getDataSpace()>","<android.graphics.ColorSpace: int getDataSpace()>"
"<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<java.nio.file.Path: int hashCode()>","<java.nio.file.Path: int hashCode()>"
"<android.app.ActionBar: android.view.View getCustomView()>","<android.app.ActionBar: android.view.View getCustomView()>"
"<android.media.AudioTrack$MetricsConstants: void <init>()>","<android.media.AudioTrack$MetricsConstants: void <init>()>"
"<java.nio.channels.MembershipKey: void drop()>","<java.nio.channels.MembershipKey: void drop()>"
"<android.content.pm.FeatureInfo: java.lang.String toString()>","<android.content.pm.FeatureInfo: java.lang.String toString()>"
"<android.view.View: void setFilterTouchesWhenObscured(boolean)>","<android.view.View: void setFilterTouchesWhenObscured(boolean)>"
"<android.content.ClipData$Item: void <init>(android.content.Intent)>","<android.content.ClipData$Item: void <init>(android.content.Intent)>"
"<java.io.PrintWriter: void println(int)>","<java.io.PrintWriter: void println(int)>"
"<java.nio.ByteBuffer: long getLong()>","<java.nio.ByteBuffer: long getLong()>"
"<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>","<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>"
"<java.util.Hashtable: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<android.graphics.Rect: boolean intersect(int,int,int,int)>","<android.graphics.Rect: boolean intersect(int,int,int,int)>"
"<java.util.HashMap: void <init>()>","<java.util.HashMap: void <init>()>"
"<android.telephony.IccOpenLogicalChannelResponse: void <clinit>()>","<android.telephony.IccOpenLogicalChannelResponse: void <clinit>()>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.nio.charset.CharsetEncoder: byte[] replacement()>","<java.nio.charset.CharsetEncoder: byte[] replacement()>"
"<android.widget.TextView: int getLastBaselineToBottomHeight()>","<android.widget.TextView: int getLastBaselineToBottomHeight()>"
"<java.lang.StringBuilder: void <init>(int)>","<java.lang.StringBuilder: void <init>(int)>"
"<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>","<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>"
"<android.graphics.RecordingCanvas: void drawOval(float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawOval(float,float,float,float,android.graphics.Paint)>"
"<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener)>","<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener)>"
"<java.nio.FloatBuffer: java.nio.Buffer position(int)>","<java.nio.FloatBuffer: java.nio.Buffer position(int)>"
"<android.view.WindowInsets: boolean isVisible(int)>","<android.view.WindowInsets: boolean isVisible(int)>"
"<android.view.inputmethod.InputConnection: void closeConnection()>","<android.view.inputmethod.InputConnection: void closeConnection()>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type()>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type()>"
"<android.content.pm.PackageManager$ResolveInfoFlags: long getValue()>","<android.content.pm.PackageManager$ResolveInfoFlags: long getValue()>"
"<android.media.session.MediaSession$QueueItem: void <clinit>()>","<android.media.session.MediaSession$QueueItem: void <clinit>()>"
"<java.time.Instant: java.time.Instant minus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.Instant minus(java.time.temporal.TemporalAmount)>"
"<android.view.textclassifier.TextClassifierEvent: void <init>(android.view.textclassifier.TextClassifierEvent$1)>","<android.view.textclassifier.TextClassifierEvent: void <init>(android.view.textclassifier.TextClassifierEvent$1)>"
"<android.media.MediaFormat: void setLong(java.lang.String,long)>","<android.media.MediaFormat: void setLong(java.lang.String,long)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>"
"<android.view.View: android.graphics.Matrix getAnimationMatrix()>","<android.view.View: android.graphics.Matrix getAnimationMatrix()>"
"<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>","<android.content.Intent: byte[] getByteArrayExtra(java.lang.String)>"
"<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>","<java.text.Format: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>"
"<android.view.ViewGroup: void setClipChildren(boolean)>","<android.view.ViewGroup: void setClipChildren(boolean)>"
"<java.nio.channels.SeekableByteChannel: long position()>","<java.nio.channels.SeekableByteChannel: long position()>"
"<android.view.View$BaseSavedState: void writeToParcel(android.os.Parcel,int)>","<android.view.View$BaseSavedState: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: void parallelSort(long[],int,int)>","<java.util.Arrays: void parallelSort(long[],int,int)>"
"<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>","<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>"
"<android.view.View: int getPaddingRight()>","<android.view.View: int getPaddingRight()>"
"<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener)>","<android.app.SharedElementCallback: void onSharedElementsArrived(java.util.List,java.util.List,android.app.SharedElementCallback$OnSharedElementsReadyListener)>"
"<android.animation.LayoutTransition: void setStagger(int,long)>","<android.animation.LayoutTransition: void setStagger(int,long)>"
"<java.time.Instant: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.nio.IntBuffer: int arrayOffset()>","<java.nio.IntBuffer: int arrayOffset()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findStatic(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"
"<java.net.Socket: boolean getKeepAlive()>","<java.net.Socket: boolean getKeepAlive()>"
"<android.widget.Filter: void <init>()>","<android.widget.Filter: void <init>()>"
"<android.animation.ValueAnimator: java.lang.String toString()>","<android.animation.ValueAnimator: java.lang.String toString()>"
"<android.telephony.NetworkScanRequest: int getMaxSearchTime()>","<android.telephony.NetworkScanRequest: int getMaxSearchTime()>"
"<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>","<android.database.sqlite.SQLiteDatabase: void setPageSize(long)>"
"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,android.content.pm.PackageManager$ApplicationInfoFlags)>"
"<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel position(long)>","<java.nio.channels.FileChannel: java.nio.channels.SeekableByteChannel position(long)>"
"<android.view.MenuItem: boolean isChecked()>","<android.view.MenuItem: boolean isChecked()>"
"<android.view.inputmethod.InputContentInfo: void requestPermission()>","<android.view.inputmethod.InputContentInfo: void requestPermission()>"
"<android.widget.RemoteViews: java.lang.String getPackage()>","<android.widget.RemoteViews: java.lang.String getPackage()>"
"<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>","<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>"
"<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.view.ContentInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.ContentInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Fragment: void onStop()>","<android.app.Fragment: void onStop()>"
"<android.view.SurfaceView: void draw(android.graphics.Canvas)>","<android.view.SurfaceView: void draw(android.graphics.Canvas)>"
"<java.nio.file.attribute.FileTime: java.time.Instant toInstant()>","<java.nio.file.attribute.FileTime: java.time.Instant toInstant()>"
"<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>","<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String,int)>"
"<java.lang.invoke.MethodType: boolean hasWrappers()>","<java.lang.invoke.MethodType: boolean hasWrappers()>"
"<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Insets)>","<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Insets)>"
"<android.widget.TextView: void setMinLines(int)>","<android.widget.TextView: void setMinLines(int)>"
"<java.lang.reflect.Field: boolean isEnumConstant()>","<java.lang.reflect.Field: boolean isEnumConstant()>"
"<java.net.URLConnection: java.util.Map getRequestProperties()>","<java.net.URLConnection: java.util.Map getRequestProperties()>"
"<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.InvalidKeyException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.util.OptionalInt: boolean isPresent()>","<java.util.OptionalInt: boolean isPresent()>"
"<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>","<android.view.inputmethod.InputMethodInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>"
"<android.os.Debug: long getPss()>","<android.os.Debug: long getPss()>"
"<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>","<android.content.Intent: android.content.Intent parseUri(java.lang.String,int)>"
"<java.util.IntSummaryStatistics: void <init>()>","<java.util.IntSummaryStatistics: void <init>()>"
"<android.media.AudioTrack$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioTrack)>","<android.media.AudioTrack$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioTrack)>"
"<android.graphics.Paint: android.graphics.Xfermode getXfermode()>","<android.graphics.Paint: android.graphics.Xfermode getXfermode()>"
"<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)>","<android.content.SyncRequest: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>","<java.nio.channels.spi.AbstractSelectableChannel: boolean isRegistered()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle countedLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)>"
"<android.view.View: boolean getKeepScreenOn()>","<android.view.View: boolean getKeepScreenOn()>"
"<android.app.ActivityManager: void restartPackage(java.lang.String)>","<android.app.ActivityManager: void restartPackage(java.lang.String)>"
"<android.hardware.lights.LightsRequest$Builder: void <init>()>","<android.hardware.lights.LightsRequest$Builder: void <init>()>"
"<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>","<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>"
"<java.io.PrintWriter: void println(char[])>","<java.io.PrintWriter: void println(char[])>"
"<java.util.Date: void setSeconds(int)>","<java.util.Date: void setSeconds(int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>","<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>"
"<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>"
"<android.widget.TextView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.TextView: java.lang.CharSequence getAccessibilityClassName()>"
"<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>","<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>"
"<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()>","<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()>"
"<android.telephony.TelephonyCallback$CellInfoListener: void onCellInfoChanged(java.util.List)>","<android.telephony.TelephonyCallback$CellInfoListener: void onCellInfoChanged(java.util.List)>"
"<android.view.autofill.AutofillId: void writeToParcel(android.os.Parcel,int)>","<android.view.autofill.AutofillId: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>","<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>"
"<android.content.Intent$ShortcutIconResource: void <init>()>","<android.content.Intent$ShortcutIconResource: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime of(int,int,int)>","<java.time.LocalTime: java.time.LocalTime of(int,int,int)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object)>"
"<android.widget.AbsListView: boolean isScrollingCacheEnabled()>","<android.widget.AbsListView: boolean isScrollingCacheEnabled()>"
"<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>","<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)>"
"<java.time.format.DateTimeFormatter: java.util.Set getResolverFields()>","<java.time.format.DateTimeFormatter: java.util.Set getResolverFields()>"
"<android.graphics.RecordingCanvas: int getHeight()>","<android.graphics.RecordingCanvas: int getHeight()>"
"<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()>","<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()>"
"<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>","<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>"
"<android.app.VoiceInteractor$CommandRequest: void <init>(java.lang.String,android.os.Bundle)>","<android.app.VoiceInteractor$CommandRequest: void <init>(java.lang.String,android.os.Bundle)>"
"<android.app.Fragment: void onCreate(android.os.Bundle)>","<android.app.Fragment: void onCreate(android.os.Bundle)>"
"<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>","<android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>"
"<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int)>","<android.net.ProxyInfo: android.net.ProxyInfo buildDirectProxy(java.lang.String,int)>"
"<android.view.ViewGroup: boolean onStartNestedScroll(android.view.View,android.view.View,int)>","<android.view.ViewGroup: boolean onStartNestedScroll(android.view.View,android.view.View,int)>"
"<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>","<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>"
"<android.graphics.drawable.LayerDrawable: int getPaddingMode()>","<android.graphics.drawable.LayerDrawable: int getPaddingMode()>"
"<java.nio.CharBuffer: char get()>","<java.nio.CharBuffer: char get()>"
"<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbShortTitle()>","<android.app.FragmentManager$BackStackEntry: java.lang.CharSequence getBreadCrumbShortTitle()>"
"<android.graphics.Typeface$Builder: void <init>(java.lang.String)>","<android.graphics.Typeface$Builder: void <init>(java.lang.String)>"
"<android.view.View: void announceForAccessibility(java.lang.CharSequence)>","<android.view.View: void announceForAccessibility(java.lang.CharSequence)>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setExtras(android.os.Bundle)>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setExtras(android.os.Bundle)>"
"<android.content.Context: int checkCallingPermission(java.lang.String)>","<android.content.Context: int checkCallingPermission(java.lang.String)>"
"<android.os.Parcel: byte[] createByteArray()>","<android.os.Parcel: byte[] createByteArray()>"
"<android.content.SharedPreferences$Editor: boolean commit()>","<android.content.SharedPreferences$Editor: boolean commit()>"
"<android.media.AudioRecord: int getTimestamp(android.media.AudioTimestamp,int)>","<android.media.AudioRecord: int getTimestamp(android.media.AudioTimestamp,int)>"
"<android.app.Activity: android.content.ComponentName getCallingActivity()>","<android.app.Activity: android.content.ComponentName getCallingActivity()>"
"<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>","<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>"
"<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>","<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)>"
"<android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>","<android.graphics.Bitmap: android.graphics.Bitmap wrapHardwareBuffer(android.hardware.HardwareBuffer,android.graphics.ColorSpace)>"
"<android.view.Window: void unregisterScrollCaptureCallback(android.view.ScrollCaptureCallback)>","<android.view.Window: void unregisterScrollCaptureCallback(android.view.ScrollCaptureCallback)>"
"<java.time.chrono.ChronoLocalDateTime: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoLocalDateTime: boolean equals(java.lang.Object)>"
"<android.window.SplashScreen$OnExitAnimationListener: void onSplashScreenExit(android.window.SplashScreenView)>","<android.window.SplashScreen$OnExitAnimationListener: void onSplashScreenExit(android.window.SplashScreenView)>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setExtras(android.os.Bundle)>"
"<java.lang.reflect.Modifier: boolean isAbstract(int)>","<java.lang.reflect.Modifier: boolean isAbstract(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>"
"<android.graphics.ColorSpace: int getComponentCount()>","<android.graphics.ColorSpace: int getComponentCount()>"
"<java.net.URI: boolean equals(java.lang.Object)>","<java.net.URI: boolean equals(java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>"
"<android.widget.Toolbar: void <init>(android.content.Context)>","<android.widget.Toolbar: void <init>(android.content.Context)>"
"<java.io.InputStream: int read(byte[])>","<java.io.InputStream: int read(byte[])>"
"<android.view.WindowManager$LayoutParams: void <init>(int)>","<android.view.WindowManager$LayoutParams: void <init>(int)>"
"<android.content.pm.PackageInstaller$Session: void requestChecksums(java.lang.String,int,java.util.List,java.util.concurrent.Executor,android.content.pm.PackageManager$OnChecksumsReadyListener)>","<android.content.pm.PackageInstaller$Session: void requestChecksums(java.lang.String,int,java.util.List,java.util.concurrent.Executor,android.content.pm.PackageManager$OnChecksumsReadyListener)>"
"<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>","<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>"
"<java.util.stream.IntStream: int sum()>","<java.util.stream.IntStream: int sum()>"
"<android.widget.ListView: void setSelection(int)>","<android.widget.ListView: void setSelection(int)>"
"<java.util.Properties: void load(java.io.Reader)>","<java.util.Properties: void load(java.io.Reader)>"
"<android.media.session.MediaController$TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void prepareFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.graphics.Outline: void set(android.graphics.Outline)>","<android.graphics.Outline: void set(android.graphics.Outline)>"
"<java.util.stream.LongStream: java.util.LongSummaryStatistics summaryStatistics()>","<java.util.stream.LongStream: java.util.LongSummaryStatistics summaryStatistics()>"
"<android.media.projection.MediaProjection: void stop()>","<android.media.projection.MediaProjection: void stop()>"
"<android.view.View: void onAnimationEnd()>","<android.view.View: void onAnimationEnd()>"
"<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>","<android.text.TextDirectionHeuristic: boolean isRtl(char[],int,int)>"
"<android.hardware.camera2.CameraDevice: void createConstrainedHighSpeedCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>","<android.hardware.camera2.CameraDevice: void createConstrainedHighSpeedCaptureSession(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>"
"<android.graphics.Canvas: int getDensity()>","<android.graphics.Canvas: int getDensity()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>"
"<android.graphics.Paint$FontMetrics: void <init>()>","<android.graphics.Paint$FontMetrics: void <init>()>"
"<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>","<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>"
"<android.net.Uri: boolean isHierarchical()>","<android.net.Uri: boolean isHierarchical()>"
"<android.animation.LayoutTransition: void enableTransitionType(int)>","<android.animation.LayoutTransition: void enableTransitionType(int)>"
"<android.app.Dialog: void registerForContextMenu(android.view.View)>","<android.app.Dialog: void registerForContextMenu(android.view.View)>"
"<android.view.textclassifier.TextLanguage$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLanguage$Request: void writeToParcel(android.os.Parcel,int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>","<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)>"
"<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)>","<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)>"
"<android.view.MenuItem: android.view.View getActionView()>","<android.view.MenuItem: android.view.View getActionView()>"
"<java.nio.channels.FileChannel: void <init>()>","<java.nio.channels.FileChannel: void <init>()>"
"<android.hardware.Camera$Parameters: float getExposureCompensationStep()>","<android.hardware.Camera$Parameters: float getExposureCompensationStep()>"
"<java.time.LocalDate: java.time.LocalDate now()>","<java.time.LocalDate: java.time.LocalDate now()>"
"<android.graphics.PorterDuff: void <init>()>","<android.graphics.PorterDuff: void <init>()>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)>"
"<android.widget.Toolbar: int getContentInsetStart()>","<android.widget.Toolbar: int getContentInsetStart()>"
"<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<android.content.Intent: java.lang.String getType()>","<android.content.Intent: java.lang.String getType()>"
"<java.lang.reflect.Modifier: int constructorModifiers()>","<java.lang.reflect.Modifier: int constructorModifiers()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>","<android.graphics.drawable.Drawable: boolean onLayoutDirectionChanged(int)>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraExtensionSession,int)>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureSequenceAborted(android.hardware.camera2.CameraExtensionSession,int)>"
"<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)>","<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)>"
"<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
"<java.lang.Object: void wait(long,int)>","<java.lang.Object: void wait(long,int)>"
"<android.hardware.Camera$Parameters: int getJpegQuality()>","<android.hardware.Camera$Parameters: int getJpegQuality()>"
"<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>","<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isSealed()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isSealed()>"
"<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>"
"<android.media.MediaTimestamp: long getAnchorMediaTimeUs()>","<android.media.MediaTimestamp: long getAnchorMediaTimeUs()>"
"<java.nio.file.attribute.FileTime: java.lang.String toString()>","<java.nio.file.attribute.FileTime: java.lang.String toString()>"
"<android.widget.TextView: void setHint(java.lang.CharSequence)>","<android.widget.TextView: void setHint(java.lang.CharSequence)>"
"<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>","<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>"
"<android.graphics.Paint: float getUnderlineThickness()>","<android.graphics.Paint: float getUnderlineThickness()>"
"<android.content.IntentFilter: void setPriority(int)>","<android.content.IntentFilter: void setPriority(int)>"
"<android.telephony.ServiceState: int getDuplexMode()>","<android.telephony.ServiceState: int getDuplexMode()>"
"<android.telephony.TelephonyManager: void setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)>","<android.telephony.TelephonyManager: void setSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void implCloseChannel()>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setFlags(int)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setFlags(int)>"
"<android.graphics.drawable.LayerDrawable: void draw(android.graphics.Canvas)>","<android.graphics.drawable.LayerDrawable: void draw(android.graphics.Canvas)>"
"<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>","<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>"
"<android.graphics.Color: int hashCode()>","<android.graphics.Color: int hashCode()>"
"<java.io.Console: char[] readPassword()>","<java.io.Console: char[] readPassword()>"
"<java.util.Collections: java.util.NavigableMap checkedNavigableMap(java.util.NavigableMap,java.lang.Class,java.lang.Class)>","<java.util.Collections: java.util.NavigableMap checkedNavigableMap(java.util.NavigableMap,java.lang.Class,java.lang.Class)>"
"<android.hardware.lights.Light: int hashCode()>","<android.hardware.lights.Light: int hashCode()>"
"<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection,java.util.concurrent.Executor,android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback)>","<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraOfflineSession switchToOffline(java.util.Collection,java.util.concurrent.Executor,android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback)>"
"<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>","<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>"
"<android.view.View: void startAnimation(android.view.animation.Animation)>","<android.view.View: void startAnimation(android.view.animation.Animation)>"
"<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>","<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>"
"<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>","<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>"
"<android.view.View: void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>"
"<android.util.TypedValue: float getFloat()>","<android.util.TypedValue: float getFloat()>"
"<android.media.AudioRecord: int getSampleRate()>","<android.media.AudioRecord: int getSampleRate()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTag(java.lang.Object)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setTag(java.lang.Object)>"
"<android.media.MediaTimestamp: boolean equals(java.lang.Object)>","<android.media.MediaTimestamp: boolean equals(java.lang.Object)>"
"<java.util.ListIterator: boolean hasNext()>","<java.util.ListIterator: boolean hasNext()>"
"<android.content.res.Configuration: int diff(android.content.res.Configuration)>","<android.content.res.Configuration: int diff(android.content.res.Configuration)>"
"<java.io.PrintStream: void <init>(java.lang.String,java.nio.charset.Charset)>","<java.io.PrintStream: void <init>(java.lang.String,java.nio.charset.Charset)>"
"<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)>","<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)>"
"<android.graphics.Color: long convert(int,android.graphics.ColorSpace)>","<android.graphics.Color: long convert(int,android.graphics.ColorSpace)>"
"<android.content.Context: boolean isDeviceProtectedStorage()>","<android.content.Context: boolean isDeviceProtectedStorage()>"
"<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest build()>","<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest build()>"
"<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>","<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>"
"<android.widget.MediaController: void show()>","<android.widget.MediaController: void show()>"
"<android.app.Fragment: android.app.Fragment getParentFragment()>","<android.app.Fragment: android.app.Fragment getParentFragment()>"
"<android.content.ClipData$Item: java.lang.String toString()>","<android.content.ClipData$Item: java.lang.String toString()>"
"<android.graphics.Region: java.lang.String toString()>","<android.graphics.Region: java.lang.String toString()>"
"<android.animation.Keyframe: float getFraction()>","<android.animation.Keyframe: float getFraction()>"
"<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>"
"<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)>"
"<android.telephony.PreciseDataConnectionState: int getState()>","<android.telephony.PreciseDataConnectionState: int getState()>"
"<android.graphics.Paint$FontMetricsInt: boolean equals(java.lang.Object)>","<android.graphics.Paint$FontMetricsInt: boolean equals(java.lang.Object)>"
"<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>","<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>"
"<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>","<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection,java.lang.Class[])>"
"<java.lang.Class: java.lang.Class[] getClasses()>","<java.lang.Class: java.lang.Class[] getClasses()>"
"<android.view.View: void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)>","<android.view.View: void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)>"
"<java.lang.Class: java.lang.Object[] getEnumConstants()>","<java.lang.Class: java.lang.Object[] getEnumConstants()>"
"<java.lang.Float: java.lang.Float valueOf(float)>","<java.lang.Float: java.lang.Float valueOf(float)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator)>","<java.util.stream.DoubleStream: java.util.OptionalDouble reduce(java.util.function.DoubleBinaryOperator)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>","<java.nio.LongBuffer: java.nio.LongBuffer put(long[])>"
"<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>","<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>"
"<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>","<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>"
"<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>","<android.os.BaseBundle: void putBooleanArray(java.lang.String,boolean[])>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)>"
"<java.lang.Math: double nextDown(double)>","<java.lang.Math: double nextDown(double)>"
"<android.widget.AbsListView: long[] getCheckedItemIds()>","<android.widget.AbsListView: long[] getCheckedItemIds()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>"
"<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>","<android.app.SharedElementCallback: android.view.View onCreateSnapshotView(android.content.Context,android.os.Parcelable)>"
"<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.view.MotionEvent: float getRawY()>","<android.view.MotionEvent: float getRawY()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordEndIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeWordEndIndex()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseXorRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseXorRelease(java.lang.Object[])>"
"<java.util.function.DoubleUnaryOperator: double applyAsDouble(double)>","<java.util.function.DoubleUnaryOperator: double applyAsDouble(double)>"
"<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$Session openSession(int)>","<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$Session openSession(int)>"
"<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)>","<android.hardware.Camera$Parameters: void setAutoExposureLock(boolean)>"
"<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>","<android.hardware.Camera$Area: void <init>(android.graphics.Rect,int)>"
"<android.telephony.TelephonyManager: int isMultiSimSupported()>","<android.telephony.TelephonyManager: int isMultiSimSupported()>"
"<java.time.Clock: long millis()>","<java.time.Clock: long millis()>"
"<java.lang.reflect.Parameter: int getModifiers()>","<java.lang.reflect.Parameter: int getModifiers()>"
"<java.util.Date: void setDate(int)>","<java.util.Date: void setDate(int)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)>"
"<android.text.PrecomputedText: java.lang.String toString()>","<android.text.PrecomputedText: java.lang.String toString()>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getInputSizes(int)>"
"<java.lang.ClassFormatError: void <init>()>","<java.lang.ClassFormatError: void <init>()>"
"<android.hardware.camera2.params.OutputConfiguration: int getTimestampBase()>","<android.hardware.camera2.params.OutputConfiguration: int getTimestampBase()>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>"
"<android.view.SurfaceControl$Transaction: void apply()>","<android.view.SurfaceControl$Transaction: void apply()>"
"<android.app.Fragment: boolean isRemoving()>","<android.app.Fragment: boolean isRemoving()>"
"<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>"
"<java.nio.file.FileSystem: void close()>","<java.nio.file.FileSystem: void close()>"
"<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void write(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>"
"<java.lang.Byte: void <clinit>()>","<java.lang.Byte: void <clinit>()>"
"<java.util.Spliterator$OfInt: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfInt: void forEachRemaining(java.lang.Object)>"
"<android.widget.RelativeLayout: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.RelativeLayout: java.lang.CharSequence getAccessibilityClassName()>"
"<android.graphics.drawable.LayerDrawable: void applyTheme(android.content.res.Resources$Theme)>","<android.graphics.drawable.LayerDrawable: void applyTheme(android.content.res.Resources$Theme)>"
"<java.lang.Class: int getModifiers()>","<java.lang.Class: int getModifiers()>"
"<android.view.View: boolean isVerticalScrollBarEnabled()>","<android.view.View: boolean isVerticalScrollBarEnabled()>"
"<android.app.ActivityManager$TaskDescription: void <init>(android.app.ActivityManager$TaskDescription)>","<android.app.ActivityManager$TaskDescription: void <init>(android.app.ActivityManager$TaskDescription)>"
"<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>","<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>"
"<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>","<android.media.MediaPlayer$TrackInfo: android.media.MediaFormat getFormat()>"
"<android.view.View: boolean canResolveTextDirection()>","<android.view.View: boolean canResolveTextDirection()>"
"<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()>","<android.view.Display$HdrCapabilities: float getDesiredMaxAverageLuminance()>"
"<android.util.Size: void <init>(int,int)>","<android.util.Size: void <init>(int,int)>"
"<android.app.Activity: android.media.session.MediaController getMediaController()>","<android.app.Activity: android.media.session.MediaController getMediaController()>"
"<android.app.ActionBar$TabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>","<android.app.ActionBar$TabListener: void onTabSelected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>"
"<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>","<java.util.regex.Pattern: java.util.function.Predicate asPredicate()>"
"<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()>","<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()>"
"<android.graphics.Rect: java.lang.String flattenToString()>","<android.graphics.Rect: java.lang.String flattenToString()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder addAction(android.app.RemoteAction)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder addAction(android.app.RemoteAction)>"
"<java.util.NavigableSet: java.util.Iterator descendingIterator()>","<java.util.NavigableSet: java.util.Iterator descendingIterator()>"
"<android.content.Intent: void setSourceBounds(android.graphics.Rect)>","<android.content.Intent: void setSourceBounds(android.graphics.Rect)>"
"<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>","<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.text.NoCopySpan$Concrete: void <init>()>","<android.text.NoCopySpan$Concrete: void <init>()>"
"<java.nio.Buffer: java.nio.Buffer mark()>","<java.nio.Buffer: java.nio.Buffer mark()>"
"<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>","<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)>"
"<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>","<android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Collections: java.util.Enumeration emptyEnumeration()>","<java.util.Collections: java.util.Enumeration emptyEnumeration()>"
"<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>","<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>"
"<java.lang.reflect.Constructor: boolean isSynthetic()>","<java.lang.reflect.Constructor: boolean isSynthetic()>"
"<android.widget.AbsListView: void setVerticalScrollbarPosition(int)>","<android.widget.AbsListView: void setVerticalScrollbarPosition(int)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<java.lang.String: java.util.stream.IntStream codePoints()>","<java.lang.String: java.util.stream.IntStream codePoints()>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setTransliteration(java.lang.CharSequence)>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setTransliteration(java.lang.CharSequence)>"
"<android.view.RoundedCorner: int getRadius()>","<android.view.RoundedCorner: int getRadius()>"
"<android.view.textclassifier.TextSelection$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextSelection$Request: android.os.Bundle getExtras()>"
"<java.lang.Integer: java.lang.String toString(int,int)>","<java.lang.Integer: java.lang.String toString(int,int)>"
"<java.time.Instant: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>","<java.time.Instant: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>"
"<android.view.ViewGroup: void addView(android.view.View)>","<android.view.ViewGroup: void addView(android.view.View)>"
"<android.view.Window: boolean requestFeature(int)>","<android.view.Window: boolean requestFeature(int)>"
"<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>","<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>"
"<java.text.ParsePosition: boolean equals(java.lang.Object)>","<java.text.ParsePosition: boolean equals(java.lang.Object)>"
"<android.media.MediaPlayer: boolean isPlaying()>","<android.media.MediaPlayer: boolean isPlaying()>"
"<java.lang.reflect.Method: java.lang.String toString()>","<java.lang.reflect.Method: java.lang.String toString()>"
"<android.media.MediaPlayer: void setSurface(android.view.Surface)>","<android.media.MediaPlayer: void setSurface(android.view.Surface)>"
"<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle findVarHandle(java.lang.Class,java.lang.String,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle findVarHandle(java.lang.Class,java.lang.String,java.lang.Class)>"
"<java.nio.file.FileStore: java.lang.String type()>","<java.nio.file.FileStore: java.lang.String type()>"
"<java.lang.Math: double pow(double,double)>","<java.lang.Math: double pow(double,double)>"
"<android.content.AttributionSource: void <clinit>()>","<android.content.AttributionSource: void <clinit>()>"
"<android.view.View: boolean hasPointerCapture()>","<android.view.View: boolean hasPointerCapture()>"
"<java.time.LocalDate: java.time.LocalDate plusDays(long)>","<java.time.LocalDate: java.time.LocalDate plusDays(long)>"
"<android.graphics.Insets: android.graphics.Insets subtract(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets subtract(android.graphics.Insets,android.graphics.Insets)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)>"
"<android.animation.LayoutTransition: long getStagger(int)>","<android.animation.LayoutTransition: long getStagger(int)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.view.KeyEvent: boolean isAltPressed()>","<android.view.KeyEvent: boolean isAltPressed()>"
"<android.media.MediaDrm: java.util.List getSupportedCryptoSchemes()>","<android.media.MediaDrm: java.util.List getSupportedCryptoSchemes()>"
"<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>","<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>"
"<java.net.NetworkInterface: int getMTU()>","<java.net.NetworkInterface: int getMTU()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>"
"<java.util.DoubleSummaryStatistics: double getAverage()>","<java.util.DoubleSummaryStatistics: double getAverage()>"
"<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>","<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)>"
"<android.content.res.TypedArray: int getResourceId(int,int)>","<android.content.res.TypedArray: int getResourceId(int,int)>"
"<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>","<android.app.ActionBar: void setDisplayUseLogoEnabled(boolean)>"
"<android.widget.RemoteViews$RemoteCollectionItems: int getViewTypeCount()>","<android.widget.RemoteViews$RemoteCollectionItems: int getViewTypeCount()>"
"<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>","<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>"
"<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>","<java.lang.ThreadGroup: boolean allowThreadSuspension(boolean)>"
"<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>","<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>"
"<java.lang.invoke.VarHandle$AccessMode: java.lang.invoke.VarHandle$AccessMode valueFromMethodName(java.lang.String)>","<java.lang.invoke.VarHandle$AccessMode: java.lang.invoke.VarHandle$AccessMode valueFromMethodName(java.lang.String)>"
"<android.view.autofill.AutofillValue: void <init>()>","<android.view.autofill.AutofillValue: void <init>()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setRequiresCharging(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setRequiresCharging(boolean)>"
"<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCursor(android.database.Cursor,android.content.DialogInterface$OnClickListener,java.lang.String)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean addAll(java.util.Collection)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseOrRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseOrRelease(java.lang.Object[])>"
"<java.util.regex.Matcher: boolean lookingAt()>","<java.util.regex.Matcher: boolean lookingAt()>"
"<android.view.inputmethod.InputMethodManager: void startStylusHandwriting(android.view.View)>","<android.view.inputmethod.InputMethodManager: void startStylusHandwriting(android.view.View)>"
"<android.media.MediaDescription: android.os.Bundle getExtras()>","<android.media.MediaDescription: android.os.Bundle getExtras()>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)>"
"<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringFactor()>","<android.telephony.BarringInfo$BarringServiceInfo: int getConditionalBarringFactor()>"
"<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>","<java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>"
"<java.io.PrintWriter: void print(char)>","<java.io.PrintWriter: void print(char)>"
"<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>","<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>"
"<android.graphics.SurfaceTexture: void <init>(boolean)>","<android.graphics.SurfaceTexture: void <init>(boolean)>"
"<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream build()>","<java.util.stream.DoubleStream$Builder: java.util.stream.DoubleStream build()>"
"<java.nio.channels.NetworkChannel: java.lang.Object getOption(java.net.SocketOption)>","<java.nio.channels.NetworkChannel: java.lang.Object getOption(java.net.SocketOption)>"
"<android.util.Rational: boolean isInfinite()>","<android.util.Rational: boolean isInfinite()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.ZoneOffset getOffset()>","<java.time.chrono.ChronoZonedDateTime: java.time.ZoneOffset getOffset()>"
"<java.time.Clock: java.time.Clock system(java.time.ZoneId)>","<java.time.Clock: java.time.Clock system(java.time.ZoneId)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.database.ContentObserver: void dispatchChange(boolean,java.util.Collection,int)>","<android.database.ContentObserver: void dispatchChange(boolean,java.util.Collection,int)>"
"<java.lang.NoSuchFieldException: void <init>(java.lang.String)>","<java.lang.NoSuchFieldException: void <init>(java.lang.String)>"
"<android.content.Intent: android.content.Intent setType(java.lang.String)>","<android.content.Intent: android.content.Intent setType(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)>"
"<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>","<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>"
"<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>","<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>"
"<android.view.animation.Transformation: void <init>()>","<android.view.animation.Transformation: void <init>()>"
"<android.view.ViewStructure$HtmlInfo: void <init>()>","<android.view.ViewStructure$HtmlInfo: void <init>()>"
"<android.hardware.camera2.params.StreamConfigurationMap: boolean equals(java.lang.Object)>","<android.hardware.camera2.params.StreamConfigurationMap: boolean equals(java.lang.Object)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble min()>","<java.util.stream.DoubleStream: java.util.OptionalDouble min()>"
"<android.hardware.Camera$Parameters: float getVerticalViewAngle()>","<android.hardware.Camera$Parameters: float getVerticalViewAngle()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
"<android.graphics.drawable.Icon: android.net.Uri getUri()>","<android.graphics.drawable.Icon: android.net.Uri getUri()>"
"<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>","<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>"
"<android.media.MediaPlayer: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>","<android.media.MediaPlayer: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>"
"<android.widget.TextView: float getShadowDy()>","<android.widget.TextView: float getShadowDy()>"
"<android.media.AudioRouting: android.media.AudioDeviceInfo getRoutedDevice()>","<android.media.AudioRouting: android.media.AudioDeviceInfo getRoutedDevice()>"
"<java.io.InputStream: void <init>()>","<java.io.InputStream: void <init>()>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType,int)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle spreadInvoker(java.lang.invoke.MethodType,int)>"
"<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>","<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>"
"<android.view.ViewStructure: void setContextClickable(boolean)>","<android.view.ViewStructure: void setContextClickable(boolean)>"
"<android.content.pm.ChangedPackages: int describeContents()>","<android.content.pm.ChangedPackages: int describeContents()>"
"<java.time.LocalDateTime: java.time.LocalDateTime withDayOfYear(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withDayOfYear(int)>"
"<android.view.textclassifier.TextClassification$Request: void <clinit>()>","<android.view.textclassifier.TextClassification$Request: void <clinit>()>"
"<android.graphics.RenderNode: int getHeight()>","<android.graphics.RenderNode: int getHeight()>"
"<android.app.ActivityManager: int getMemoryClass()>","<android.app.ActivityManager: int getMemoryClass()>"
"<android.view.View: void scrollBy(int,int)>","<android.view.View: void scrollBy(int,int)>"
"<java.lang.Float: byte byteValue()>","<java.lang.Float: byte byteValue()>"
"<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request)>","<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request)>"
"<java.util.stream.IntStream: java.util.stream.IntStream peek(java.util.function.IntConsumer)>","<java.util.stream.IntStream: java.util.stream.IntStream peek(java.util.function.IntConsumer)>"
"<android.graphics.Path: void addPath(android.graphics.Path,float,float)>","<android.graphics.Path: void addPath(android.graphics.Path,float,float)>"
"<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()>","<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()>"
"<android.app.ActivityManager$MemoryInfo: int describeContents()>","<android.app.ActivityManager$MemoryInfo: int describeContents()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>"
"<android.util.SparseArray: void <init>(int)>","<android.util.SparseArray: void <init>(int)>"
"<android.net.IpSecTransform: void <init>()>","<android.net.IpSecTransform: void <init>()>"
"<java.net.SocketOption: java.lang.String name()>","<java.net.SocketOption: java.lang.String name()>"
"<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>","<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>"
"<android.media.MediaMetadata: int getBitmapDimensionLimit()>","<android.media.MediaMetadata: int getBitmapDimensionLimit()>"
"<android.view.Window: void setLayout(int,int)>","<android.view.Window: void setLayout(int,int)>"
"<android.hardware.camera2.CaptureRequest$Key: int hashCode()>","<android.hardware.camera2.CaptureRequest$Key: int hashCode()>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],android.graphics.ColorSpace$Rgb$TransferParameters)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],float[],android.graphics.ColorSpace$Rgb$TransferParameters)>"
"<android.widget.TextView: void jumpDrawablesToCurrentState()>","<android.widget.TextView: void jumpDrawablesToCurrentState()>"
"<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>","<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL)>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: void <init>()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: void <init>()>"
"<android.icu.util.ULocale: java.lang.String getBaseName(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getBaseName(java.lang.String)>"
"<java.io.SyncFailedException: void <init>(java.lang.String)>","<java.io.SyncFailedException: void <init>(java.lang.String)>"
"<java.io.PrintStream: void print(char[])>","<java.io.PrintStream: void print(char[])>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()>","<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.sqlite.SQLiteDatabase$CursorFactory getCursorFactory()>"
"<java.lang.Class: void <init>()>","<java.lang.Class: void <init>()>"
"<android.view.textclassifier.TextLinks$TextLink: int getEnd()>","<android.view.textclassifier.TextLinks$TextLink: int getEnd()>"
"<android.view.ViewStructure: void setEnabled(boolean)>","<android.view.ViewStructure: void setEnabled(boolean)>"
"<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>","<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>"
"<android.net.LinkProperties: boolean equals(java.lang.Object)>","<android.net.LinkProperties: boolean equals(java.lang.Object)>"
"<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>","<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
"<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>","<java.net.DatagramSocketImpl: int peek(java.net.InetAddress)>"
"<android.app.TaskInfo: java.lang.String toString()>","<android.app.TaskInfo: java.lang.String toString()>"
"<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>","<android.view.WindowInsets: android.graphics.Insets getSystemGestureInsets()>"
"<android.icu.util.ULocale: android.icu.util.ULocale getDefault(android.icu.util.ULocale$Category)>","<android.icu.util.ULocale: android.icu.util.ULocale getDefault(android.icu.util.ULocale$Category)>"
"<android.content.ContentResolver$MimeTypeInfo: android.graphics.drawable.Icon getIcon()>","<android.content.ContentResolver$MimeTypeInfo: android.graphics.drawable.Icon getIcon()>"
"<java.util.Deque: java.lang.Object pollFirst()>","<java.util.Deque: java.lang.Object pollFirst()>"
"<android.view.DisplayCutout: int getSafeInsetRight()>","<android.view.DisplayCutout: int getSafeInsetRight()>"
"<android.graphics.Region: void <clinit>()>","<android.graphics.Region: void <clinit>()>"
"<java.util.AbstractMap: boolean equals(java.lang.Object)>","<java.util.AbstractMap: boolean equals(java.lang.Object)>"
"<android.icu.util.ULocale: android.icu.util.ULocale[] getAvailableLocales()>","<android.icu.util.ULocale: android.icu.util.ULocale[] getAvailableLocales()>"
"<android.content.Context: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>","<android.content.Context: void sendStickyBroadcast(android.content.Intent,android.os.Bundle)>"
"<android.net.IpSecManager: void <init>()>","<android.net.IpSecManager: void <init>()>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>"
"<java.util.ArrayList: void ensureCapacity(int)>","<java.util.ArrayList: void ensureCapacity(int)>"
"<android.content.pm.PackageManager: void requestChecksums(java.lang.String,boolean,int,java.util.List,android.content.pm.PackageManager$OnChecksumsReadyListener)>","<android.content.pm.PackageManager: void requestChecksums(java.lang.String,boolean,int,java.util.List,android.content.pm.PackageManager$OnChecksumsReadyListener)>"
"<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>","<java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)>"
"<java.lang.Thread: boolean holdsLock(java.lang.Object)>","<java.lang.Thread: boolean holdsLock(java.lang.Object)>"
"<java.util.AbstractList: int lastIndexOf(java.lang.Object)>","<java.util.AbstractList: int lastIndexOf(java.lang.Object)>"
"<java.util.Hashtable: boolean containsValue(java.lang.Object)>","<java.util.Hashtable: boolean containsValue(java.lang.Object)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.TextClassificationSessionId getSessionId()>"
"<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int)>","<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int)>"
"<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>","<android.view.inputmethod.InputMethodManager: void hideSoftInputFromInputMethod(android.os.IBinder,int)>"
"<java.lang.StringBuffer: int capacity()>","<java.lang.StringBuffer: int capacity()>"
"<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>","<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface,java.net.InetAddress)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean)>"
"<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>","<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>"
"<java.time.ZoneId: boolean equals(java.lang.Object)>","<java.time.ZoneId: boolean equals(java.lang.Object)>"
"<java.lang.reflect.Executable: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.Executable: boolean isAnnotationPresent(java.lang.Class)>"
"<java.time.chrono.ChronoLocalDate: boolean equals(java.lang.Object)>","<java.time.chrono.ChronoLocalDate: boolean equals(java.lang.Object)>"
"<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)>","<android.text.PrecomputedText: int nextSpanTransition(int,int,java.lang.Class)>"
"<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>","<android.app.FragmentManager: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>"
"<android.content.pm.PackageInstaller$SessionInfo: float getProgress()>","<android.content.pm.PackageInstaller$SessionInfo: float getProgress()>"
"<android.net.Network: int hashCode()>","<android.net.Network: int hashCode()>"
"<java.io.File: java.lang.String getCanonicalPath()>","<java.io.File: java.lang.String getCanonicalPath()>"
"<java.time.LocalDate: java.time.LocalDate ofYearDay(int,int)>","<java.time.LocalDate: java.time.LocalDate ofYearDay(int,int)>"
"<android.view.inputmethod.ExtractedTextRequest: void <clinit>()>","<android.view.inputmethod.ExtractedTextRequest: void <clinit>()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.RenderEffect,android.graphics.Shader$TileMode)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createBlurEffect(float,float,android.graphics.RenderEffect,android.graphics.Shader$TileMode)>"
"<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>"
"<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>","<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
"<org.xmlpull.v1.XmlSerializer: boolean getFeature(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: boolean getFeature(java.lang.String)>"
"<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader,java.lang.Class,java.lang.Class)>","<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader,java.lang.Class,java.lang.Class)>"
"<android.view.Choreographer: void removeVsyncCallback(android.view.Choreographer$VsyncCallback)>","<android.view.Choreographer: void removeVsyncCallback(android.view.Choreographer$VsyncCallback)>"
"<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>","<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: void getLocationInSurface(int[])>","<android.view.View: void getLocationInSurface(int[])>"
"<android.net.ConnectivityManager: void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)>","<android.net.ConnectivityManager: void addDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)>"
"<java.util.OptionalDouble: double orElseThrow()>","<java.util.OptionalDouble: double orElseThrow()>"
"<android.graphics.drawable.Drawable: int getLevel()>","<android.graphics.drawable.Drawable: int getLevel()>"
"<android.widget.AbsListView: int getTopEdgeEffectColor()>","<android.widget.AbsListView: int getTopEdgeEffectColor()>"
"<android.telephony.PhoneStateListener: void <init>(java.util.concurrent.Executor)>","<android.telephony.PhoneStateListener: void <init>(java.util.concurrent.Executor)>"
"<android.os.Parcel: void writeBoolean(boolean)>","<android.os.Parcel: void writeBoolean(boolean)>"
"<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>","<android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)>"
"<java.lang.IllegalAccessException: void <init>()>","<java.lang.IllegalAccessException: void <init>()>"
"<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraExtensionCharacteristics getCameraExtensionCharacteristics(java.lang.String)>","<android.hardware.camera2.CameraManager: android.hardware.camera2.CameraExtensionCharacteristics getCameraExtensionCharacteristics(java.lang.String)>"
"<java.nio.DoubleBuffer: boolean hasArray()>","<java.nio.DoubleBuffer: boolean hasArray()>"
"<android.os.Looper: void prepare()>","<android.os.Looper: void prepare()>"
"<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()>","<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()>"
"<android.widget.ListView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.widget.ListView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<java.io.InputStream: byte[] readNBytes(int)>","<java.io.InputStream: byte[] readNBytes(int)>"
"<java.lang.SecurityManager: void <init>()>","<java.lang.SecurityManager: void <init>()>"
"<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()>","<android.view.accessibility.AccessibilityWindowInfo: int getDisplayId()>"
"<android.media.AudioManager: int generateAudioSessionId()>","<android.media.AudioManager: int generateAudioSessionId()>"
"<android.graphics.RecordingCanvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>"
"<android.view.KeyEvent: int getRepeatCount()>","<android.view.KeyEvent: int getRepeatCount()>"
"<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()>","<android.view.MenuItem: java.lang.CharSequence getTitleCondensed()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<java.nio.file.Path: int compareTo(java.lang.Object)>","<java.nio.file.Path: int compareTo(java.lang.Object)>"
"<java.time.chrono.Era: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.Era: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandle()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandle()>"
"<android.app.Fragment: java.lang.String toString()>","<android.app.Fragment: java.lang.String toString()>"
"<android.media.MediaMetadataEditor: void apply()>","<android.media.MediaMetadataEditor: void apply()>"
"<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>","<java.lang.reflect.Field: void setDouble(java.lang.Object,double)>"
"<android.content.Context: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>","<android.content.Context: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>"
"<android.content.res.Resources: java.lang.String getResourceEntryName(int)>","<android.content.res.Resources: java.lang.String getResourceEntryName(int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>"
"<android.media.session.MediaController$TransportControls: void play()>","<android.media.session.MediaController$TransportControls: void play()>"
"<android.media.AudioManager$AudioRecordingCallback: void onRecordingConfigChanged(java.util.List)>","<android.media.AudioManager$AudioRecordingCallback: void onRecordingConfigChanged(java.util.List)>"
"<java.lang.Integer: double doubleValue()>","<java.lang.Integer: double doubleValue()>"
"<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>"
"<android.view.contentcapture.ContentCaptureContext$Builder: void <init>(android.content.LocusId)>","<android.view.contentcapture.ContentCaptureContext$Builder: void <init>(android.content.LocusId)>"
"<android.util.Rational: int getNumerator()>","<android.util.Rational: int getNumerator()>"
"<android.graphics.ColorSpace$Named: void <clinit>()>","<android.graphics.ColorSpace$Named: void <clinit>()>"
"<java.lang.String: java.lang.String stripLeading()>","<java.lang.String: java.lang.String stripLeading()>"
"<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>","<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>"
"<android.view.Choreographer$FrameTimeline: long getVsyncId()>","<android.view.Choreographer$FrameTimeline: long getVsyncId()>"
"<android.widget.Toolbar: boolean showOverflowMenu()>","<android.widget.Toolbar: boolean showOverflowMenu()>"
"<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>","<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsets(int,android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsets(int,android.graphics.Insets)>"
"<android.telephony.ServiceState: boolean getIsManualSelection()>","<android.telephony.ServiceState: boolean getIsManualSelection()>"
"<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.content.ContentValues: void put(java.lang.String,byte[])>","<android.content.ContentValues: void put(java.lang.String,byte[])>"
"<android.widget.TextView: int getExtendedPaddingBottom()>","<android.widget.TextView: int getExtendedPaddingBottom()>"
"<java.nio.channels.ServerSocketChannel: int validOps()>","<java.nio.channels.ServerSocketChannel: int validOps()>"
"<java.util.Arrays: double[] copyOfRange(double[],int,int)>","<java.util.Arrays: double[] copyOfRange(double[],int,int)>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>"
"<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>","<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>"
"<android.net.IpPrefix: java.net.InetAddress getAddress()>","<android.net.IpPrefix: java.net.InetAddress getAddress()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.ComponentInfo: int getIconResource()>","<android.content.pm.ComponentInfo: int getIconResource()>"
"<java.time.Instant: java.time.Instant plusSeconds(long)>","<java.time.Instant: java.time.Instant plusSeconds(long)>"
"<android.content.Intent: java.lang.String getScheme()>","<android.content.Intent: java.lang.String getScheme()>"
"<android.media.AudioAttributes: int describeContents()>","<android.media.AudioAttributes: int describeContents()>"
"<android.os.Parcel: void readStringArray(java.lang.String[])>","<android.os.Parcel: void readStringArray(java.lang.String[])>"
"<android.app.ActionBar: int getSelectedNavigationIndex()>","<android.app.ActionBar: int getSelectedNavigationIndex()>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>"
"<android.app.Activity: void setRecentsScreenshotEnabled(boolean)>","<android.app.Activity: void setRecentsScreenshotEnabled(boolean)>"
"<android.widget.TextView: int getBottomPaddingOffset()>","<android.widget.TextView: int getBottomPaddingOffset()>"
"<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>","<android.hardware.camera2.CaptureRequest$Builder: android.hardware.camera2.CaptureRequest build()>"
"<android.graphics.ColorSpace$Named: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$Named: void <init>(java.lang.String,int)>"
"<java.util.Arrays: void sort(short[],int,int)>","<java.util.Arrays: void sort(short[],int,int)>"
"<android.media.Rating: int describeContents()>","<android.media.Rating: int describeContents()>"
"<java.lang.reflect.Field: void setChar(java.lang.Object,char)>","<java.lang.reflect.Field: void setChar(java.lang.Object,char)>"
"<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>"
"<android.media.RemoteController: long getEstimatedMediaPosition()>","<android.media.RemoteController: long getEstimatedMediaPosition()>"
"<android.view.ViewGroup: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>","<android.view.ViewGroup: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>"
"<android.text.ClipboardManager: java.lang.CharSequence getText()>","<android.text.ClipboardManager: java.lang.CharSequence getText()>"
"<java.nio.ByteBuffer: char getChar(int)>","<java.nio.ByteBuffer: char getChar(int)>"
"<android.telephony.TelephonyManager: boolean isRttSupported()>","<android.telephony.TelephonyManager: boolean isRttSupported()>"
"<android.graphics.Point: boolean equals(int,int)>","<android.graphics.Point: boolean equals(int,int)>"
"<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>","<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>"
"<java.util.Arrays: int compare(long[],int,int,long[],int,int)>","<java.util.Arrays: int compare(long[],int,int,long[],int,int)>"
"<android.net.NetworkRequest: android.net.NetworkSpecifier getNetworkSpecifier()>","<android.net.NetworkRequest: android.net.NetworkSpecifier getNetworkSpecifier()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.app.SharedElementCallback: void onSharedElementStart(java.util.List,java.util.List,java.util.List)>","<android.app.SharedElementCallback: void onSharedElementStart(java.util.List,java.util.List,java.util.List)>"
"<android.view.MotionEvent: java.lang.String toString()>","<android.view.MotionEvent: java.lang.String toString()>"
"<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextLinks$Request: java.lang.String getCallingPackageName()>"
"<android.graphics.Bitmap: void setDensity(int)>","<android.graphics.Bitmap: void setDensity(int)>"
"<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>","<java.nio.file.Path: java.nio.file.Path toRealPath(java.nio.file.LinkOption[])>"
"<android.graphics.ColorSpace$Rgb: boolean isWideGamut()>","<android.graphics.ColorSpace$Rgb: boolean isWideGamut()>"
"<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>"
"<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>","<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>"
"<android.view.DragEvent: float getY()>","<android.view.DragEvent: float getY()>"
"<android.telephony.data.ApnSetting: int getRoamingProtocol()>","<android.telephony.data.ApnSetting: int getRoamingProtocol()>"
"<java.util.Random: java.util.stream.IntStream ints(long,int,int)>","<java.util.Random: java.util.stream.IntStream ints(long,int,int)>"
"<android.media.MediaPlayer: void seekTo(long,int)>","<android.media.MediaPlayer: void seekTo(long,int)>"
"<android.content.Intent: boolean hasCategory(java.lang.String)>","<android.content.Intent: boolean hasCategory(java.lang.String)>"
"<android.graphics.Bitmap$Config: void <clinit>()>","<android.graphics.Bitmap$Config: void <clinit>()>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasDialogueEnhancement(boolean)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasDialogueEnhancement(boolean)>"
"<android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>","<android.os.VibrationEffect: android.os.VibrationEffect createOneShot(long,int)>"
"<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>","<android.view.SubMenu: android.view.SubMenu setHeaderTitle(java.lang.CharSequence)>"
"<java.util.Arrays: java.lang.String toString(short[])>","<java.util.Arrays: java.lang.String toString(short[])>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayConstructor(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayConstructor(java.lang.Class)>"
"<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>"
"<android.view.View: void setForceDarkAllowed(boolean)>","<android.view.View: void setForceDarkAllowed(boolean)>"
"<java.time.chrono.ChronoZonedDateTime: boolean isEqual(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: boolean isEqual(java.time.chrono.ChronoZonedDateTime)>"
"<android.telephony.data.ApnSetting: int getMtuV6()>","<android.telephony.data.ApnSetting: int getMtuV6()>"
"<android.content.pm.SigningInfo: boolean hasMultipleSigners()>","<android.content.pm.SigningInfo: boolean hasMultipleSigners()>"
"<android.widget.AdapterView: void addView(android.view.View)>","<android.widget.AdapterView: void addView(android.view.View)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>","<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int,android.os.Handler)>"
"<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostDestroyed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostDestroyed(android.app.Activity)>"
"<android.content.pm.Signature: void <init>(byte[])>","<android.content.pm.Signature: void <init>(byte[])>"
"<android.view.ViewParent: boolean isTextAlignmentResolved()>","<android.view.ViewParent: boolean isTextAlignmentResolved()>"
"<android.app.ActivityManager: java.util.List getHistoricalProcessExitReasons(java.lang.String,int,int)>","<android.app.ActivityManager: java.util.List getHistoricalProcessExitReasons(java.lang.String,int,int)>"
"<android.widget.TextView: java.lang.String getFontVariationSettings()>","<android.widget.TextView: java.lang.String getFontVariationSettings()>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int,android.content.res.Resources$Theme)>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<android.widget.TextView: void setTextLocales(android.os.LocaleList)>","<android.widget.TextView: void setTextLocales(android.os.LocaleList)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfMonth(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfMonth(int)>"
"<java.util.SortedSet: java.lang.Object last()>","<java.util.SortedSet: java.lang.Object last()>"
"<java.net.ServerSocket: void setSoTimeout(int)>","<java.net.ServerSocket: void setSoTimeout(int)>"
"<java.time.chrono.ChronoLocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.ChronoLocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.os.MessageQueue: void finalize()>","<android.os.MessageQueue: void finalize()>"
"<android.content.pm.PermissionGroupInfo: java.lang.String toString()>","<android.content.pm.PermissionGroupInfo: java.lang.String toString()>"
"<java.time.Instant: java.time.Instant ofEpochSecond(long,long)>","<java.time.Instant: java.time.Instant ofEpochSecond(long,long)>"
"<android.app.Fragment: void postponeEnterTransition()>","<android.app.Fragment: void postponeEnterTransition()>"
"<android.view.Window: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>","<android.view.Window: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>"
"<android.os.Parcel: void setDataSize(int)>","<android.os.Parcel: void setDataSize(int)>"
"<android.hardware.lights.LightsManager$LightsSession: void requestLights(android.hardware.lights.LightsRequest)>","<android.hardware.lights.LightsManager$LightsSession: void requestLights(android.hardware.lights.LightsRequest)>"
"<android.hardware.camera2.params.OutputConfiguration: int getMaxSharedSurfaceCount()>","<android.hardware.camera2.params.OutputConfiguration: int getMaxSharedSurfaceCount()>"
"<java.net.URI: java.lang.String getRawSchemeSpecificPart()>","<java.net.URI: java.lang.String getRawSchemeSpecificPart()>"
"<android.content.Intent: byte getByteExtra(java.lang.String,byte)>","<android.content.Intent: byte getByteExtra(java.lang.String,byte)>"
"<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>","<android.view.inputmethod.InputConnection: boolean setComposingText(java.lang.CharSequence,int)>"
"<android.view.inputmethod.CursorAnchorInfo: int hashCode()>","<android.view.inputmethod.CursorAnchorInfo: int hashCode()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentCreated(android.app.FragmentManager,android.app.Fragment,android.os.Bundle)>"
"<android.view.View$OnContextClickListener: boolean onContextClick(android.view.View)>","<android.view.View$OnContextClickListener: boolean onContextClick(android.view.View)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>"
"<android.media.MediaDrm: void setOnSessionLostStateListener(java.util.concurrent.Executor,android.media.MediaDrm$OnSessionLostStateListener)>","<android.media.MediaDrm: void setOnSessionLostStateListener(java.util.concurrent.Executor,android.media.MediaDrm$OnSessionLostStateListener)>"
"<android.app.Activity: void attachBaseContext(android.content.Context)>","<android.app.Activity: void attachBaseContext(android.content.Context)>"
"<java.security.GeneralSecurityException: void <init>()>","<java.security.GeneralSecurityException: void <init>()>"
"<android.view.SurfaceView: void setClipBounds(android.graphics.Rect)>","<android.view.SurfaceView: void setClipBounds(android.graphics.Rect)>"
"<android.util.SparseArray: void set(int,java.lang.Object)>","<android.util.SparseArray: void set(int,java.lang.Object)>"
"<android.net.NetworkCapabilities: java.lang.String toString()>","<android.net.NetworkCapabilities: java.lang.String toString()>"
"<android.graphics.RecordingCanvas: void setBitmap(android.graphics.Bitmap)>","<android.graphics.RecordingCanvas: void setBitmap(android.graphics.Bitmap)>"
"<java.lang.String: boolean endsWith(java.lang.String)>","<java.lang.String: boolean endsWith(java.lang.String)>"
"<android.media.MediaDrm$SessionException: void <init>(int,java.lang.String)>","<android.media.MediaDrm$SessionException: void <init>(int,java.lang.String)>"
"<java.lang.Thread: java.lang.String getName()>","<java.lang.Thread: java.lang.String getName()>"
"<android.app.Activity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>","<android.app.Activity: void onMultiWindowModeChanged(boolean,android.content.res.Configuration)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>"
"<android.media.AudioRecordingConfiguration: void <init>()>","<android.media.AudioRecordingConfiguration: void <init>()>"
"<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>","<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder removeOpenFlags(int)>"
"<android.graphics.Region: android.graphics.Rect getBounds()>","<android.graphics.Region: android.graphics.Rect getBounds()>"
"<android.content.Context: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.Context: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<java.nio.channels.SocketChannel: boolean isConnected()>","<java.nio.channels.SocketChannel: boolean isConnected()>"
"<android.app.Activity: void dismissKeyboardShortcutsHelper()>","<android.app.Activity: void dismissKeyboardShortcutsHelper()>"
"<java.lang.Long: int signum(long)>","<java.lang.Long: int signum(long)>"
"<java.nio.file.attribute.UserPrincipalLookupService: void <init>()>","<java.nio.file.attribute.UserPrincipalLookupService: void <init>()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.textclassifier.ConversationActions: void <clinit>()>","<android.view.textclassifier.ConversationActions: void <clinit>()>"
"<android.content.pm.PackageInstaller$SessionInfo: int getStagedSessionErrorCode()>","<android.content.pm.PackageInstaller$SessionInfo: int getStagedSessionErrorCode()>"
"<android.widget.ListView: android.widget.Adapter getAdapter()>","<android.widget.ListView: android.widget.Adapter getAdapter()>"
"<java.io.PrintStream: void println(double)>","<java.io.PrintStream: void println(double)>"
"<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)>","<android.view.MenuItem: android.view.MenuItem setActionView(android.view.View)>"
"<java.time.Instant: boolean equals(java.lang.Object)>","<java.time.Instant: boolean equals(java.lang.Object)>"
"<android.content.IntentFilter: java.util.Iterator pathsIterator()>","<android.content.IntentFilter: java.util.Iterator pathsIterator()>"
"<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>","<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>"
"<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>","<android.content.ContentResolver: void cancelSync(android.content.SyncRequest)>"
"<java.io.PrintStream: void print(float)>","<java.io.PrintStream: void print(float)>"
"<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>","<android.media.MediaMetadata: java.lang.String getString(java.lang.String)>"
"<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>","<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>"
"<android.content.res.AssetFileDescriptor: void <clinit>()>","<android.content.res.AssetFileDescriptor: void <clinit>()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnKeyListener(android.content.DialogInterface$OnKeyListener)>"
"<android.os.Messenger: int hashCode()>","<android.os.Messenger: int hashCode()>"
"<android.media.RemoteController$OnClientUpdateListener: void onClientChange(boolean)>","<android.media.RemoteController$OnClientUpdateListener: void onClientChange(boolean)>"
"<android.app.Person: int hashCode()>","<android.app.Person: int hashCode()>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean retainAll(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean retainAll(java.util.Collection)>"
"<java.util.stream.IntStream: java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction)>","<java.util.stream.IntStream: java.util.stream.LongStream mapToLong(java.util.function.IntToLongFunction)>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent: void <clinit>()>"
"<java.net.NetworkInterface: boolean isVirtual()>","<java.net.NetworkInterface: boolean isVirtual()>"
"<java.time.chrono.ChronoLocalDate: int lengthOfYear()>","<java.time.chrono.ChronoLocalDate: int lengthOfYear()>"
"<android.widget.AdapterView$OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>","<android.widget.AdapterView$OnItemClickListener: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>"
"<android.net.Uri: void <init>()>","<android.net.Uri: void <init>()>"
"<java.nio.ShortBuffer: java.lang.Object array()>","<java.nio.ShortBuffer: java.lang.Object array()>"
"<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>","<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>"
"<android.telephony.TelephonyCallback$CallStateListener: void onCallStateChanged(int)>","<android.telephony.TelephonyCallback$CallStateListener: void onCallStateChanged(int)>"
"<java.util.AbstractList: java.util.ListIterator listIterator()>","<java.util.AbstractList: java.util.ListIterator listIterator()>"
"<android.media.session.MediaSession$Callback: void onFastForward()>","<android.media.session.MediaSession$Callback: void onFastForward()>"
"<android.app.Activity: void finishFromChild(android.app.Activity)>","<android.app.Activity: void finishFromChild(android.app.Activity)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$OpenParams)>"
"<java.lang.Character: boolean isUpperCase(char)>","<java.lang.Character: boolean isUpperCase(char)>"
"<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>","<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>"
"<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>","<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>"
"<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.SecurityException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.graphics.Color: void RGBToHSV(int,int,int,float[])>","<android.graphics.Color: void RGBToHSV(int,int,int,float[])>"
"<android.icu.util.ULocale: java.lang.String toUnicodeLocaleKey(java.lang.String)>","<android.icu.util.ULocale: java.lang.String toUnicodeLocaleKey(java.lang.String)>"
"<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>","<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>"
"<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>"
"<android.accounts.Account: boolean equals(java.lang.Object)>","<android.accounts.Account: boolean equals(java.lang.Object)>"
"<android.telephony.TelephonyCallback: void <init>()>","<android.telephony.TelephonyCallback: void <init>()>"
"<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>","<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>"
"<android.view.KeyEvent: int getUnicodeChar()>","<android.view.KeyEvent: int getUnicodeChar()>"
"<android.content.res.Configuration: boolean equals(java.lang.Object)>","<android.content.res.Configuration: boolean equals(java.lang.Object)>"
"<android.view.WindowManager$LayoutParams: int getColorMode()>","<android.view.WindowManager$LayoutParams: int getColorMode()>"
"<android.view.MenuItem: boolean isEnabled()>","<android.view.MenuItem: boolean isEnabled()>"
"<java.net.InetAddress: java.lang.String getHostAddress()>","<java.net.InetAddress: java.lang.String getHostAddress()>"
"<java.nio.Buffer: java.nio.Buffer rewind()>","<java.nio.Buffer: java.nio.Buffer rewind()>"
"<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.KeyException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.media.AudioManager: boolean isSpeakerphoneOn()>","<android.media.AudioManager: boolean isSpeakerphoneOn()>"
"<java.time.ZoneId: java.util.Set getAvailableZoneIds()>","<java.time.ZoneId: java.util.Set getAvailableZoneIds()>"
"<android.view.Window: void setContentView(android.view.View)>","<android.view.Window: void setContentView(android.view.View)>"
"<android.view.Window$Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.view.Window$Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.app.Fragment: void startActivity(android.content.Intent)>","<android.app.Fragment: void startActivity(android.content.Intent)>"
"<java.net.SocketImpl: int available()>","<java.net.SocketImpl: int available()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer duplicate()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer duplicate()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.VarHandle byteArrayViewVarHandle(java.lang.Class,java.nio.ByteOrder)>","<java.lang.invoke.MethodHandles: java.lang.invoke.VarHandle byteArrayViewVarHandle(java.lang.Class,java.nio.ByteOrder)>"
"<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>","<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Boolean: int hashCode(boolean)>","<java.lang.Boolean: int hashCode(boolean)>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setSessionId(int)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setSessionId(int)>"
"<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>","<java.nio.charset.CharsetDecoder: boolean isAutoDetecting()>"
"<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.AdapterView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.time.Duration: java.time.Duration minusDays(long)>","<java.time.Duration: java.time.Duration minusDays(long)>"
"<java.time.Period: java.util.List getUnits()>","<java.time.Period: java.util.List getUnits()>"
"<android.graphics.Color: int rgb(float,float,float)>","<android.graphics.Color: int rgb(float,float,float)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withPositiveSign(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withPositiveSign(char)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getJournalMode()>","<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getJournalMode()>"
"<java.io.UnsupportedEncodingException: void <init>()>","<java.io.UnsupportedEncodingException: void <init>()>"
"<android.content.pm.PackageInstaller$SessionParams: void setAutoRevokePermissionsMode(boolean)>","<android.content.pm.PackageInstaller$SessionParams: void setAutoRevokePermissionsMode(boolean)>"
"<android.content.Context: java.lang.String getPackageName()>","<android.content.Context: java.lang.String getPackageName()>"
"<java.lang.VerifyError: void <init>()>","<java.lang.VerifyError: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime minusNanos(long)>","<java.time.LocalTime: java.time.LocalTime minusNanos(long)>"
"<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>","<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>"
"<java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>","<java.util.PrimitiveIterator$OfDouble: java.lang.Object next()>"
"<java.net.Socket: void <init>(java.net.SocketImpl)>","<java.net.Socket: void <init>(java.net.SocketImpl)>"
"<java.lang.Class: boolean isInstance(java.lang.Object)>","<java.lang.Class: boolean isInstance(java.lang.Object)>"
"<android.content.pm.PackageInstaller$Session: void transfer(java.lang.String)>","<android.content.pm.PackageInstaller$Session: void transfer(java.lang.String)>"
"<android.media.projection.MediaProjection: void registerCallback(android.media.projection.MediaProjection$Callback,android.os.Handler)>","<android.media.projection.MediaProjection: void registerCallback(android.media.projection.MediaProjection$Callback,android.os.Handler)>"
"<android.graphics.drawable.BitmapDrawable: void getOutline(android.graphics.Outline)>","<android.graphics.drawable.BitmapDrawable: void getOutline(android.graphics.Outline)>"
"<android.content.BroadcastReceiver$PendingResult: void <init>()>","<android.content.BroadcastReceiver$PendingResult: void <init>()>"
"<android.graphics.Rect: boolean isEmpty()>","<android.graphics.Rect: boolean isEmpty()>"
"<java.lang.String: java.lang.String trim()>","<java.lang.String: java.lang.String trim()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.View: void setRotation(float)>","<android.view.View: void setRotation(float)>"
"<android.graphics.RectF: void <init>()>","<android.graphics.RectF: void <init>()>"
"<android.hardware.Sensor: void <init>()>","<android.hardware.Sensor: void <init>()>"
"<android.os.VibrationAttributes: boolean isFlagSet(int)>","<android.os.VibrationAttributes: boolean isFlagSet(int)>"
"<android.animation.TypeConverter: java.lang.Object convert(java.lang.Object)>","<android.animation.TypeConverter: java.lang.Object convert(java.lang.Object)>"
"<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)>","<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)>"
"<android.view.contentcapture.ContentCaptureSession: java.lang.String toString()>","<android.view.contentcapture.ContentCaptureSession: java.lang.String toString()>"
"<java.lang.Long: java.lang.String toString(long)>","<java.lang.Long: java.lang.String toString(long)>"
"<java.time.LocalDate: int lengthOfYear()>","<java.time.LocalDate: int lengthOfYear()>"
"<android.app.ActivityManager$RunningServiceInfo: void <clinit>()>","<android.app.ActivityManager$RunningServiceInfo: void <clinit>()>"
"<android.app.FragmentTransaction: int commit()>","<android.app.FragmentTransaction: int commit()>"
"<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()>","<android.content.pm.PackageInstaller$SessionInfo: long getCreatedMillis()>"
"<android.graphics.RenderNode: boolean setPivotX(float)>","<android.graphics.RenderNode: boolean setPivotX(float)>"
"<android.widget.TextView: int getExtendedPaddingTop()>","<android.widget.TextView: int getExtendedPaddingTop()>"
"<java.lang.Enum: int hashCode()>","<java.lang.Enum: int hashCode()>"
"<java.nio.ShortBuffer: java.nio.Buffer flip()>","<java.nio.ShortBuffer: java.nio.Buffer flip()>"
"<android.content.SyncRequest: void <clinit>()>","<android.content.SyncRequest: void <clinit>()>"
"<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)>","<android.telephony.TelephonyManager: int getSubscriptionId(android.telecom.PhoneAccountHandle)>"
"<android.content.pm.Signature: int hashCode()>","<android.content.pm.Signature: int hashCode()>"
"<android.util.ArrayMap: boolean isEmpty()>","<android.util.ArrayMap: boolean isEmpty()>"
"<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>","<android.graphics.drawable.Drawable: void setAutoMirrored(boolean)>"
"<android.view.ActionMode$Callback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>","<android.view.ActionMode$Callback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>"
"<android.view.Surface: java.lang.String toString()>","<android.view.Surface: java.lang.String toString()>"
"<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>","<android.hardware.camera2.params.MeteringRectangle: int getMeteringWeight()>"
"<android.graphics.SurfaceTexture: void <init>(int)>","<android.graphics.SurfaceTexture: void <init>(int)>"
"<android.content.pm.ApplicationInfo: int getMemtagMode()>","<android.content.pm.ApplicationInfo: int getMemtagMode()>"
"<android.util.SparseArray: int indexOfValue(java.lang.Object)>","<android.util.SparseArray: int indexOfValue(java.lang.Object)>"
"<android.view.View: void setScrollIndicators(int,int)>","<android.view.View: void setScrollIndicators(int,int)>"
"<android.app.Activity: java.lang.CharSequence getTitle()>","<android.app.Activity: java.lang.CharSequence getTitle()>"
"<android.transition.Transition: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>","<android.transition.Transition: void setEpicenterCallback(android.transition.Transition$EpicenterCallback)>"
"<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)>","<android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)>"
"<android.media.MediaPlayer$TrackInfo: int getTrackType()>","<android.media.MediaPlayer$TrackInfo: int getTrackType()>"
"<java.time.LocalDate: int compareTo(java.lang.Object)>","<java.time.LocalDate: int compareTo(java.lang.Object)>"
"<android.text.Layout: int getLineAscent(int)>","<android.text.Layout: int getLineAscent(int)>"
"<java.net.Socket: int getSoLinger()>","<java.net.Socket: int getSoLinger()>"
"<java.util.stream.LongStream: java.util.stream.LongStream parallel()>","<java.util.stream.LongStream: java.util.stream.LongStream parallel()>"
"<android.graphics.drawable.LayerDrawable: void setAlpha(int)>","<android.graphics.drawable.LayerDrawable: void setAlpha(int)>"
"<java.time.OffsetTime: int getSecond()>","<java.time.OffsetTime: int getSecond()>"
"<android.view.View: void setSaveEnabled(boolean)>","<android.view.View: void setSaveEnabled(boolean)>"
"<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>","<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>"
"<android.graphics.drawable.ColorDrawable: int getOpacity()>","<android.graphics.drawable.ColorDrawable: int getOpacity()>"
"<android.graphics.BitmapFactory$Options: void <init>()>","<android.graphics.BitmapFactory$Options: void <init>()>"
"<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(java.lang.String)>"
"<android.media.AudioFormat: void writeToParcel(android.os.Parcel,int)>","<android.media.AudioFormat: void writeToParcel(android.os.Parcel,int)>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setEntityConfig(android.view.textclassifier.TextClassifier$EntityConfig)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setEntityConfig(android.view.textclassifier.TextClassifier$EntityConfig)>"
"<android.view.MenuItem: android.view.SubMenu getSubMenu()>","<android.view.MenuItem: android.view.SubMenu getSubMenu()>"
"<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest$Builder setSignalThresholdInfos(java.util.Collection)>","<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest$Builder setSignalThresholdInfos(java.util.Collection)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)>"
"<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>","<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>"
"<java.util.List: java.lang.Object remove(int)>","<java.util.List: java.lang.Object remove(int)>"
"<android.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)>","<android.widget.Toolbar: void setNavigationOnClickListener(android.view.View$OnClickListener)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean removeAll(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean removeAll(java.util.Collection)>"
"<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object)>"
"<java.lang.String: void getChars(int,int,char[],int)>","<java.lang.String: void getChars(int,int,char[],int)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeMode(java.lang.String)>"
"<android.os.Handler: android.os.Looper getLooper()>","<android.os.Handler: android.os.Looper getLooper()>"
"<android.view.textclassifier.TextSelection: int getSelectionEndIndex()>","<android.view.textclassifier.TextSelection: int getSelectionEndIndex()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withChronology(java.time.chrono.Chronology)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withChronology(java.time.chrono.Chronology)>"
"<android.view.View: void onDrawForeground(android.graphics.Canvas)>","<android.view.View: void onDrawForeground(android.graphics.Canvas)>"
"<android.content.Context: android.content.pm.PackageManager getPackageManager()>","<android.content.Context: android.content.pm.PackageManager getPackageManager()>"
"<java.util.Date: void <init>(long)>","<java.util.Date: void <init>(long)>"
"<java.util.HashMap: boolean containsValue(java.lang.Object)>","<java.util.HashMap: boolean containsValue(java.lang.Object)>"
"<android.database.Cursor: int getColumnIndex(java.lang.String)>","<android.database.Cursor: int getColumnIndex(java.lang.String)>"
"<android.widget.Toolbar: void onRtlPropertiesChanged(int)>","<android.widget.Toolbar: void onRtlPropertiesChanged(int)>"
"<android.view.InputDevice: android.view.InputDevice getDevice(int)>","<android.view.InputDevice: android.view.InputDevice getDevice(int)>"
"<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection)>","<java.util.Locale: java.util.List filterTags(java.util.List,java.util.Collection)>"
"<android.net.LinkProperties: android.net.IpPrefix getNat64Prefix()>","<android.net.LinkProperties: android.net.IpPrefix getNat64Prefix()>"
"<android.view.ViewStructure: boolean hasExtras()>","<android.view.ViewStructure: boolean hasExtras()>"
"<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>","<android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)>"
"<android.view.accessibility.AccessibilityRecord: void <init>(android.view.accessibility.AccessibilityRecord)>","<android.view.accessibility.AccessibilityRecord: void <init>(android.view.accessibility.AccessibilityRecord)>"
"<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>","<android.os.PersistableBundle: void putPersistableBundle(java.lang.String,android.os.PersistableBundle)>"
"<android.content.pm.ActivityInfo: int describeContents()>","<android.content.pm.ActivityInfo: int describeContents()>"
"<android.widget.TextView: void setSingleLine()>","<android.widget.TextView: void setSingleLine()>"
"<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>","<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setErrorHandler(android.database.DatabaseErrorHandler)>"
"<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.telephony.TelephonyManager: void unregisterTelephonyCallback(android.telephony.TelephonyCallback)>","<android.telephony.TelephonyManager: void unregisterTelephonyCallback(android.telephony.TelephonyCallback)>"
"<android.transition.Transition: long getStartDelay()>","<android.transition.Transition: long getStartDelay()>"
"<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>","<android.view.inputmethod.InputConnection: boolean beginBatchEdit()>"
"<android.media.MediaDrm$CryptoSession: boolean verify(byte[],byte[],byte[])>","<android.media.MediaDrm$CryptoSession: boolean verify(byte[],byte[],byte[])>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,char)>"
"<java.util.Arrays: java.lang.String toString(double[])>","<java.util.Arrays: java.lang.String toString(double[])>"
"<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>","<android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()>","<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetType()>"
"<android.app.ActionBar: void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>","<android.app.ActionBar: void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>"
"<android.media.ImageReader: int getHardwareBufferFormat()>","<android.media.ImageReader: int getHardwareBufferFormat()>"
"<android.content.Context: android.content.AttributionSource getAttributionSource()>","<android.content.Context: android.content.AttributionSource getAttributionSource()>"
"<java.lang.Integer: int bitCount(int)>","<java.lang.Integer: int bitCount(int)>"
"<android.media.AudioManager: java.util.List getMicrophones()>","<android.media.AudioManager: java.util.List getMicrophones()>"
"<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>","<android.content.Intent: java.lang.String normalizeMimeType(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint)>"
"<android.util.LongSparseArray: void <init>()>","<android.util.LongSparseArray: void <init>()>"
"<android.widget.AbsListView: boolean onRemoteAdapterConnected()>","<android.widget.AbsListView: boolean onRemoteAdapterConnected()>"
"<android.text.Editable: android.text.Editable append(char)>","<android.text.Editable: android.text.Editable append(char)>"
"<android.view.translation.TranslationResponseValue: java.lang.CharSequence getTransliteration()>","<android.view.translation.TranslationResponseValue: java.lang.CharSequence getTransliteration()>"
"<java.io.File: void <clinit>()>","<java.io.File: void <clinit>()>"
"<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])>","<android.os.Vibrator: boolean[] arePrimitivesSupported(int[])>"
"<android.net.IpSecTransform: java.lang.String toString()>","<android.net.IpSecTransform: java.lang.String toString()>"
"<java.lang.invoke.MethodHandles: java.lang.reflect.Member reflectAs(java.lang.Class,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.reflect.Member reflectAs(java.lang.Class,java.lang.invoke.MethodHandle)>"
"<java.io.Reader: int read(char[],int,int)>","<java.io.Reader: int read(char[],int,int)>"
"<android.view.ActionMode: java.lang.Object getTag()>","<android.view.ActionMode: java.lang.Object getTag()>"
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>","<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>"
"<android.media.AudioRecord: android.media.metrics.LogSessionId getLogSessionId()>","<android.media.AudioRecord: android.media.metrics.LogSessionId getLogSessionId()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedIcon(android.graphics.drawable.Drawable,android.os.UserHandle)>"
"<android.net.ConnectivityManager: void reportBadNetwork(android.net.Network)>","<android.net.ConnectivityManager: void reportBadNetwork(android.net.Network)>"
"<android.view.ViewGroup: void layout(int,int,int,int)>","<android.view.ViewGroup: void layout(int,int,int,int)>"
"<java.time.Duration: java.time.Duration minusHours(long)>","<java.time.Duration: java.time.Duration minusHours(long)>"
"<java.time.LocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.LocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.app.FragmentManager: boolean isDestroyed()>","<android.app.FragmentManager: boolean isDestroyed()>"
"<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>","<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>"
"<android.widget.RemoteViews: java.lang.Object clone()>","<android.widget.RemoteViews: java.lang.Object clone()>"
"<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.graphics.Color: float blue()>","<android.graphics.Color: float blue()>"
"<android.view.View: java.util.ArrayList getFocusables(int)>","<android.view.View: java.util.ArrayList getFocusables(int)>"
"<java.io.Reader: long skip(long)>","<java.io.Reader: long skip(long)>"
"<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>","<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>"
"<java.util.stream.Stream: java.util.Optional findFirst()>","<java.util.stream.Stream: java.util.Optional findFirst()>"
"<android.graphics.Picture: void <init>()>","<android.graphics.Picture: void <init>()>"
"<android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>","<android.view.PixelCopy: void request(android.view.Window,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)>"
"<android.os.Process: void <init>()>","<android.os.Process: void <init>()>"
"<android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)>","<android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)>"
"<android.graphics.Color: int parseColor(java.lang.String)>","<android.graphics.Color: int parseColor(java.lang.String)>"
"<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>","<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>"
"<java.nio.channels.FileLock: boolean isShared()>","<java.nio.channels.FileLock: boolean isShared()>"
"<android.view.View: int getDrawingCacheQuality()>","<android.view.View: int getDrawingCacheQuality()>"
"<android.hardware.camera2.CameraDevice: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>","<android.hardware.camera2.CameraDevice: boolean isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(char)>","<java.nio.CharBuffer: java.nio.CharBuffer put(char)>"
"<android.view.inputmethod.InputMethodSubtype: int hashCode()>","<android.view.inputmethod.InputMethodSubtype: int hashCode()>"
"<android.animation.ValueAnimator: long getCurrentPlayTime()>","<android.animation.ValueAnimator: long getCurrentPlayTime()>"
"<android.app.FragmentManager$OnBackStackChangedListener: void onBackStackChanged()>","<android.app.FragmentManager$OnBackStackChangedListener: void onBackStackChanged()>"
"<java.util.Arrays: void parallelPrefix(java.lang.Object[],int,int,java.util.function.BinaryOperator)>","<java.util.Arrays: void parallelPrefix(java.lang.Object[],int,int,java.util.function.BinaryOperator)>"
"<android.content.ContentProviderClient: void finalize()>","<android.content.ContentProviderClient: void finalize()>"
"<android.graphics.Path$Direction: android.graphics.Path$Direction[] values()>","<android.graphics.Path$Direction: android.graphics.Path$Direction[] values()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(java.nio.ShortBuffer)>"
"<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraTotalResults()>","<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraTotalResults()>"
"<android.graphics.Movie: void finalize()>","<android.graphics.Movie: void finalize()>"
"<android.hardware.camera2.params.MeteringRectangle: boolean equals(android.hardware.camera2.params.MeteringRectangle)>","<android.hardware.camera2.params.MeteringRectangle: boolean equals(android.hardware.camera2.params.MeteringRectangle)>"
"<android.view.View: void setSystemGestureExclusionRects(java.util.List)>","<android.view.View: void setSystemGestureExclusionRects(java.util.List)>"
"<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaLong()>","<android.telephony.CellIdentity: java.lang.CharSequence getOperatorAlphaLong()>"
"<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>","<android.graphics.Color: android.graphics.Color valueOf(float,float,float,float,android.graphics.ColorSpace)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>","<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>"
"<java.lang.Math: int getExponent(double)>","<java.lang.Math: int getExponent(double)>"
"<android.app.PendingIntent: android.content.IntentSender getIntentSender()>","<android.app.PendingIntent: android.content.IntentSender getIntentSender()>"
"<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>","<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>"
"<android.hardware.camera2.CameraExtensionSession: void stopRepeating()>","<android.hardware.camera2.CameraExtensionSession: void stopRepeating()>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigureFailed(android.hardware.camera2.CameraCaptureSession)>"
"<android.net.ConnectivityManager: boolean bindProcessToNetwork(android.net.Network)>","<android.net.ConnectivityManager: boolean bindProcessToNetwork(android.net.Network)>"
"<java.net.Socket: java.io.InputStream getInputStream()>","<java.net.Socket: java.io.InputStream getInputStream()>"
"<java.lang.Long: long longValue()>","<java.lang.Long: long longValue()>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>"
"<java.util.Map$Entry: java.util.Comparator comparingByKey()>","<java.util.Map$Entry: java.util.Comparator comparingByKey()>"
"<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>","<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>"
"<android.net.IpSecManager$SpiUnavailableException: int getSpi()>","<android.net.IpSecManager$SpiUnavailableException: int getSpi()>"
"<android.widget.RemoteViews: void setViewLayoutWidthDimen(int,int)>","<android.widget.RemoteViews: void setViewLayoutWidthDimen(int,int)>"
"<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>","<android.view.Window: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>"
"<java.nio.channels.AsynchronousFileChannel: void lock(java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void lock(java.lang.Object,java.nio.channels.CompletionHandler)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.text.Layout: float getPrimaryHorizontal(int)>","<android.text.Layout: float getPrimaryHorizontal(int)>"
"<android.os.Parcel: void writeFixedArray(java.lang.Object,int,int[])>","<android.os.Parcel: void writeFixedArray(java.lang.Object,int,int[])>"
"<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.view.WindowManager$LayoutParams: void <init>()>","<android.view.WindowManager$LayoutParams: void <init>()>"
"<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>","<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>"
"<android.media.MediaDescription: int describeContents()>","<android.media.MediaDescription: int describeContents()>"
"<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)>","<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int)>"
"<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>","<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>"
"<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>","<android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()>"
"<android.view.View: boolean getFilterTouchesWhenObscured()>","<android.view.View: boolean getFilterTouchesWhenObscured()>"
"<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>","<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>"
"<android.widget.TextView: void onEndBatchEdit()>","<android.widget.TextView: void onEndBatchEdit()>"
"<android.media.session.MediaController$TransportControls: void playFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void playFromSearch(java.lang.String,android.os.Bundle)>"
"<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextSelection$Request: java.lang.String getCallingPackageName()>"
"<java.lang.Double: java.lang.String toString(double)>","<java.lang.Double: java.lang.String toString(double)>"
"<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>","<android.hardware.camera2.CaptureRequest$Key: void <init>(java.lang.String,java.lang.Class)>"
"<android.transition.TransitionValues: int hashCode()>","<android.transition.TransitionValues: int hashCode()>"
"<android.view.ActionProvider: android.view.View onCreateActionView()>","<android.view.ActionProvider: android.view.View onCreateActionView()>"
"<android.media.MediaSyncEvent: boolean equals(java.lang.Object)>","<android.media.MediaSyncEvent: boolean equals(java.lang.Object)>"
"<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.os.Parcel: void writeLong(long)>","<android.os.Parcel: void writeLong(long)>"
"<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>","<java.text.Format: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>"
"<java.time.format.DateTimeFormatter: java.lang.String toString()>","<java.time.format.DateTimeFormatter: java.lang.String toString()>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"
"<android.view.textclassifier.TextSelection$Request: void <init>()>","<android.view.textclassifier.TextSelection$Request: void <init>()>"
"<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>","<android.os.BaseBundle: void putBoolean(java.lang.String,boolean)>"
"<java.lang.Long: java.lang.Long valueOf(java.lang.String)>","<java.lang.Long: java.lang.Long valueOf(java.lang.String)>"
"<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener,android.os.Handler)>","<android.media.MediaPlayer: void setOnDrmPreparedListener(android.media.MediaPlayer$OnDrmPreparedListener,android.os.Handler)>"
"<java.lang.String: boolean startsWith(java.lang.String,int)>","<java.lang.String: boolean startsWith(java.lang.String,int)>"
"<java.lang.Thread: void <init>()>","<java.lang.Thread: void <init>()>"
"<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>","<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>"
"<android.os.Parcel: void readException()>","<android.os.Parcel: void readException()>"
"<java.net.SocketImpl: void connect(java.net.InetAddress,int)>","<java.net.SocketImpl: void connect(java.net.InetAddress,int)>"
"<android.telephony.TelephonyCallback$EmergencyNumberListListener: void onEmergencyNumberListChanged(java.util.Map)>","<android.telephony.TelephonyCallback$EmergencyNumberListListener: void onEmergencyNumberListChanged(java.util.Map)>"
"<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>","<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>"
"<java.util.regex.Matcher: int start(int)>","<java.util.regex.Matcher: int start(int)>"
"<java.util.stream.DoubleStream: java.util.stream.Stream boxed()>","<java.util.stream.DoubleStream: java.util.stream.Stream boxed()>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request build()>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request build()>"
"<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)>","<android.hardware.Camera$Parameters: void setAntibanding(java.lang.String)>"
"<android.graphics.Bitmap: void setHeight(int)>","<android.graphics.Bitmap: void setHeight(int)>"
"<android.content.BroadcastReceiver: java.lang.String getResultData()>","<android.content.BroadcastReceiver: java.lang.String getResultData()>"
"<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>","<java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)>"
"<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>","<android.transition.Transition: android.transition.Transition addTarget(java.lang.Class)>"
"<android.view.MotionEvent: float getRawX()>","<android.view.MotionEvent: float getRawX()>"
"<android.content.Intent: android.content.Intent setIdentifier(java.lang.String)>","<android.content.Intent: android.content.Intent setIdentifier(java.lang.String)>"
"<android.view.View: boolean isSaveFromParentEnabled()>","<android.view.View: boolean isSaveFromParentEnabled()>"
"<java.util.PrimitiveIterator: void forEachRemaining(java.lang.Object)>","<java.util.PrimitiveIterator: void forEachRemaining(java.lang.Object)>"
"<android.view.ContextMenu: void clearHeader()>","<android.view.ContextMenu: void clearHeader()>"
"<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>","<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>"
"<java.util.function.BinaryOperator: java.util.function.BinaryOperator minBy(java.util.Comparator)>","<java.util.function.BinaryOperator: java.util.function.BinaryOperator minBy(java.util.Comparator)>"
"<java.lang.ThreadGroup: boolean isDestroyed()>","<java.lang.ThreadGroup: boolean isDestroyed()>"
"<android.view.textclassifier.TextClassificationSessionId: boolean equals(java.lang.Object)>","<android.view.textclassifier.TextClassificationSessionId: boolean equals(java.lang.Object)>"
"<android.hardware.camera2.CaptureResult$Key: java.lang.String getName()>","<android.hardware.camera2.CaptureResult$Key: java.lang.String getName()>"
"<android.graphics.Rect: void union(android.graphics.Rect)>","<android.graphics.Rect: void union(android.graphics.Rect)>"
"<android.view.View: int getDrawingCacheBackgroundColor()>","<android.view.View: int getDrawingCacheBackgroundColor()>"
"<android.content.pm.PackageInstaller$SessionParams: void setWhitelistedRestrictedPermissions(java.util.Set)>","<android.content.pm.PackageInstaller$SessionParams: void setWhitelistedRestrictedPermissions(java.util.Set)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)>"
"<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>","<android.content.pm.PackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setTextDirection(android.text.TextDirectionHeuristic)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setTextDirection(android.text.TextDirectionHeuristic)>"
"<android.telephony.BarringInfo$BarringServiceInfo: void <init>()>","<android.telephony.BarringInfo$BarringServiceInfo: void <init>()>"
"<android.media.MediaDrm: void removeSecureStop(byte[])>","<android.media.MediaDrm: void removeSecureStop(byte[])>"
"<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>","<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>"
"<android.app.Fragment: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>","<android.app.Fragment: void onPictureInPictureModeChanged(boolean,android.content.res.Configuration)>"
"<java.net.URL: java.net.URI toURI()>","<java.net.URL: java.net.URI toURI()>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.Pipe openPipe()>"
"<java.util.Date: int compareTo(java.lang.Object)>","<java.util.Date: int compareTo(java.lang.Object)>"
"<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>","<android.widget.TextView: void setLinkTextColor(android.content.res.ColorStateList)>"
"<android.media.MediaFormat: int getInteger(java.lang.String)>","<android.media.MediaFormat: int getInteger(java.lang.String)>"
"<android.telephony.TelephonyManager: void setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)>","<android.telephony.TelephonyManager: void setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)>"
"<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)>","<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)>"
"<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>","<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>"
"<java.nio.LongBuffer: java.lang.String toString()>","<java.nio.LongBuffer: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>","<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>"
"<android.telecom.PhoneAccountHandle: int hashCode()>","<android.telecom.PhoneAccountHandle: int hashCode()>"
"<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>","<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>"
"<android.view.View: int getWindowAttachCount()>","<android.view.View: int getWindowAttachCount()>"
"<java.util.Hashtable: void forEach(java.util.function.BiConsumer)>","<java.util.Hashtable: void forEach(java.util.function.BiConsumer)>"
"<android.media.session.MediaController: void adjustVolume(int,int)>","<android.media.session.MediaController: void adjustVolume(int,int)>"
"<java.io.Reader: int read(java.nio.CharBuffer)>","<java.io.Reader: int read(java.nio.CharBuffer)>"
"<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>","<android.hardware.display.VirtualDisplay: void setSurface(android.view.Surface)>"
"<android.graphics.Paint: void setUnderlineText(boolean)>","<android.graphics.Paint: void setUnderlineText(boolean)>"
"<android.view.animation.Animation: long getStartOffset()>","<android.view.animation.Animation: long getStartOffset()>"
"<java.lang.IllegalAccessError: void <init>(java.lang.String)>","<java.lang.IllegalAccessError: void <init>(java.lang.String)>"
"<java.lang.String: boolean equals(java.lang.Object)>","<java.lang.String: boolean equals(java.lang.Object)>"
"<android.view.MenuInflater: void inflate(int,android.view.Menu)>","<android.view.MenuInflater: void inflate(int,android.view.Menu)>"
"<android.widget.TextView: void setShadowLayer(float,float,float,int)>","<android.widget.TextView: void setShadowLayer(float,float,float,int)>"
"<android.graphics.Typeface: int getStyle()>","<android.graphics.Typeface: int getStyle()>"
"<android.widget.MediaController: void <init>(android.content.Context)>","<android.widget.MediaController: void <init>(android.content.Context)>"
"<java.io.PrintStream: void println()>","<java.io.PrintStream: void println()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>"
"<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setEncryption(android.net.IpSecAlgorithm)>","<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setEncryption(android.net.IpSecAlgorithm)>"
"<android.util.SparseArray: java.lang.Object get(int)>","<android.util.SparseArray: java.lang.Object get(int)>"
"<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>","<android.os.LocaleList: java.util.Locale getFirstMatch(java.lang.String[])>"
"<java.io.PrintStream: void <init>(java.io.File,java.nio.charset.Charset)>","<java.io.PrintStream: void <init>(java.io.File,java.nio.charset.Charset)>"
"<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>","<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>"
"<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>","<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>"
"<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)>","<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)>"
"<android.util.TypedValue: java.lang.CharSequence coerceToString()>","<android.util.TypedValue: java.lang.CharSequence coerceToString()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean,int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean,int)>"
"<java.util.stream.IntStream: java.util.OptionalInt reduce(java.util.function.IntBinaryOperator)>","<java.util.stream.IntStream: java.util.OptionalInt reduce(java.util.function.IntBinaryOperator)>"
"<android.media.AudioFormat: void <init>()>","<android.media.AudioFormat: void <init>()>"
"<android.content.LocusId: void <init>(java.lang.String)>","<android.content.LocusId: void <init>(java.lang.String)>"
"<android.media.MediaPlayer$OnTimedTextListener: void onTimedText(android.media.MediaPlayer,android.media.TimedText)>","<android.media.MediaPlayer$OnTimedTextListener: void onTimedText(android.media.MediaPlayer,android.media.TimedText)>"
"<android.media.MediaFormat: java.util.Set getFeatures()>","<android.media.MediaFormat: java.util.Set getFeatures()>"
"<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>","<java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>"
"<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>","<android.app.FragmentManager: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>"
"<android.net.ConnectivityManager$NetworkCallback: void onLosing(android.net.Network,int)>","<android.net.ConnectivityManager$NetworkCallback: void onLosing(android.net.Network,int)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>"
"<java.util.HashMap: boolean isEmpty()>","<java.util.HashMap: boolean isEmpty()>"
"<android.content.ComponentCallbacks: void onLowMemory()>","<android.content.ComponentCallbacks: void onLowMemory()>"
"<android.os.Parcel: void writeTypedList(java.util.List)>","<android.os.Parcel: void writeTypedList(java.util.List)>"
"<javax.security.auth.Subject: int hashCode()>","<javax.security.auth.Subject: int hashCode()>"
"<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>","<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>"
"<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>","<android.view.ViewTreeObserver: void addOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>"
"<android.view.MotionEvent: int getActionMasked()>","<android.view.MotionEvent: int getActionMasked()>"
"<java.util.AbstractSet: void <init>()>","<java.util.AbstractSet: void <init>()>"
"<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(android.view.MenuItem)>","<android.view.MenuItem$OnActionExpandListener: boolean onMenuItemActionExpand(android.view.MenuItem)>"
"<java.io.ObjectStreamException: void <init>(java.lang.String)>","<java.io.ObjectStreamException: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)>","<android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)>"
"<java.lang.invoke.VarHandle: void acquireFence()>","<java.lang.invoke.VarHandle: void acquireFence()>"
"<android.hardware.camera2.CameraAccessException: int getReason()>","<android.hardware.camera2.CameraAccessException: int getReason()>"
"<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()>","<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()>"
"<java.lang.Integer: int compareUnsigned(int,int)>","<java.lang.Integer: int compareUnsigned(int,int)>"
"<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>","<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>"
"<android.graphics.Paint: int breakText(char[],int,int,float,float[])>","<android.graphics.Paint: int breakText(char[],int,int,float,float[])>"
"<android.view.SearchEvent: android.view.InputDevice getInputDevice()>","<android.view.SearchEvent: android.view.InputDevice getInputDevice()>"
"<android.app.Fragment: android.app.Fragment getTargetFragment()>","<android.app.Fragment: android.app.Fragment getTargetFragment()>"
"<android.view.MotionEvent: int getMetaState()>","<android.view.MotionEvent: int getMetaState()>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry()>","<android.icu.util.ULocale: java.lang.String getDisplayCountry()>"
"<android.widget.TextView: void setInputExtras(int)>","<android.widget.TextView: void setInputExtras(int)>"
"<java.util.UUID: long getMostSignificantBits()>","<java.util.UUID: long getMostSignificantBits()>"
"<android.app.Fragment: int getId()>","<android.app.Fragment: int getId()>"
"<android.media.MediaDescription: java.lang.String getMediaId()>","<android.media.MediaDescription: java.lang.String getMediaId()>"
"<android.hardware.SensorDirectChannel: boolean isOpen()>","<android.hardware.SensorDirectChannel: boolean isOpen()>"
"<android.view.ActionMode$Callback2: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>","<android.view.ActionMode$Callback2: void onGetContentRect(android.view.ActionMode,android.view.View,android.graphics.Rect)>"
"<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()>","<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()>"
"<android.graphics.Paint: boolean isFakeBoldText()>","<android.graphics.Paint: boolean isFakeBoldText()>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel bind(java.net.SocketAddress)>"
"<android.app.Activity: void setVrModeEnabled(boolean,android.content.ComponentName)>","<android.app.Activity: void setVrModeEnabled(boolean,android.content.ComponentName)>"
"<java.util.Hashtable: boolean containsKey(java.lang.Object)>","<java.util.Hashtable: boolean containsKey(java.lang.Object)>"
"<android.view.animation.Transformation: int getTransformationType()>","<android.view.animation.Transformation: int getTransformationType()>"
"<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>","<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>"
"<android.view.ContentInfo: void <clinit>()>","<android.view.ContentInfo: void <clinit>()>"
"<java.lang.invoke.MethodType: boolean equals(java.lang.Object)>","<java.lang.invoke.MethodType: boolean equals(java.lang.Object)>"
"<android.content.pm.InstallSourceInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.InstallSourceInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ViewStructure: void setClassName(java.lang.String)>","<android.view.ViewStructure: void setClassName(java.lang.String)>"
"<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)>","<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)>"
"<android.widget.AdapterView: int getCount()>","<android.widget.AdapterView: int getCount()>"
"<android.media.MediaDescription: android.net.Uri getMediaUri()>","<android.media.MediaDescription: android.net.Uri getMediaUri()>"
"<android.content.BroadcastReceiver: void setOrderedHint(boolean)>","<android.content.BroadcastReceiver: void setOrderedHint(boolean)>"
"<android.view.MenuItem: int getNumericModifiers()>","<android.view.MenuItem: int getNumericModifiers()>"
"<android.app.VoiceInteractor$AbortVoiceRequest: void onAbortResult(android.os.Bundle)>","<android.app.VoiceInteractor$AbortVoiceRequest: void onAbortResult(android.os.Bundle)>"
"<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>","<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setScale(android.view.SurfaceControl,float,float)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setScale(android.view.SurfaceControl,float,float)>"
"<android.graphics.Color: boolean isWideGamut(long)>","<android.graphics.Color: boolean isWideGamut(long)>"
"<java.nio.FloatBuffer: java.nio.Buffer flip()>","<java.nio.FloatBuffer: java.nio.Buffer flip()>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLanguage detectLanguage(android.view.textclassifier.TextLanguage$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextLanguage detectLanguage(android.view.textclassifier.TextLanguage$Request)>"
"<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent[] values()>","<android.graphics.ColorSpace$RenderIntent: android.graphics.ColorSpace$RenderIntent[] values()>"
"<java.util.regex.Matcher: boolean hasTransparentBounds()>","<java.util.regex.Matcher: boolean hasTransparentBounds()>"
"<android.view.Display$Mode: float getRefreshRate()>","<android.view.Display$Mode: float getRefreshRate()>"
"<java.time.Duration: java.time.Duration ofHours(long)>","<java.time.Duration: java.time.Duration ofHours(long)>"
"<java.lang.Float: int compareTo(java.lang.Object)>","<java.lang.Float: int compareTo(java.lang.Object)>"
"<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>","<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>"
"<java.net.Socket: void setSendBufferSize(int)>","<java.net.Socket: void setSendBufferSize(int)>"
"<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>"
"<java.util.Arrays: int compare(double[],double[])>","<java.util.Arrays: int compare(double[],double[])>"
"<android.view.KeyEvent: int getKeyCode()>","<android.view.KeyEvent: int getKeyCode()>"
"<java.time.chrono.AbstractChronology: java.lang.String toString()>","<java.time.chrono.AbstractChronology: java.lang.String toString()>"
"<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>","<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>"
"<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>"
"<java.util.Date: int getHours()>","<java.util.Date: int getHours()>"
"<android.graphics.Region: android.graphics.Path getBoundaryPath()>","<android.graphics.Region: android.graphics.Path getBoundaryPath()>"
"<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>","<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.TextView: float getShadowDx()>","<android.widget.TextView: float getShadowDx()>"
"<android.view.Window: android.view.WindowInsetsController getInsetsController()>","<android.view.Window: android.view.WindowInsetsController getInsetsController()>"
"<android.graphics.fonts.Font$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>","<android.graphics.fonts.Font$Builder: void <init>(android.content.res.AssetManager,java.lang.String)>"
"<java.lang.SecurityManager: void checkPrintJobAccess()>","<java.lang.SecurityManager: void checkPrintJobAccess()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setUser(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setUser(java.lang.String)>"
"<java.util.Arrays: int compare(float[],float[])>","<java.util.Arrays: int compare(float[],float[])>"
"<java.lang.AbstractMethodError: void <init>()>","<java.lang.AbstractMethodError: void <init>()>"
"<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>","<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String,java.lang.Throwable)>"
"<android.hardware.Sensor: java.lang.String toString()>","<android.hardware.Sensor: java.lang.String toString()>"
"<java.time.chrono.ChronoZonedDateTime: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>","<java.time.chrono.ChronoZonedDateTime: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>"
"<java.lang.IndexOutOfBoundsException: void <init>(int)>","<java.lang.IndexOutOfBoundsException: void <init>(int)>"
"<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMvnoType(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMvnoType(int)>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.Image: void <init>()>","<android.media.Image: void <init>()>"
"<android.media.SyncParams: int getAudioAdjustMode()>","<android.media.SyncParams: int getAudioAdjustMode()>"
"<android.app.PendingIntent: boolean isService()>","<android.app.PendingIntent: boolean isService()>"
"<android.app.Fragment: android.transition.Transition getExitTransition()>","<android.app.Fragment: android.transition.Transition getExitTransition()>"
"<java.lang.StackTraceElement: int hashCode()>","<java.lang.StackTraceElement: int hashCode()>"
"<android.hardware.camera2.params.InputConfiguration: boolean isMultiResolution()>","<android.hardware.camera2.params.InputConfiguration: boolean isMultiResolution()>"
"<java.util.Locale: java.lang.Object clone()>","<java.util.Locale: java.lang.Object clone()>"
"<android.view.View: void setScrollY(int)>","<android.view.View: void setScrollY(int)>"
"<java.util.Arrays: int mismatch(short[],short[])>","<java.util.Arrays: int mismatch(short[],short[])>"
"<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>"
"<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>","<java.util.PrimitiveIterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>"
"<android.view.textclassifier.ConversationActions: void <init>(java.util.List,java.lang.String)>","<android.view.textclassifier.ConversationActions: void <init>(java.util.List,java.lang.String)>"
"<android.telecom.PhoneAccountHandle: boolean equals(java.lang.Object)>","<android.telecom.PhoneAccountHandle: boolean equals(java.lang.Object)>"
"<android.app.Activity: android.view.View requireViewById(int)>","<android.app.Activity: android.view.View requireViewById(int)>"
"<android.telephony.ims.ImsReasonInfo: java.lang.String toString()>","<android.telephony.ims.ImsReasonInfo: java.lang.String toString()>"
"<android.media.MediaDrm$CryptoSession: byte[] encrypt(byte[],byte[],byte[])>","<android.media.MediaDrm$CryptoSession: byte[] encrypt(byte[],byte[],byte[])>"
"<java.text.ParsePosition: int getIndex()>","<java.text.ParsePosition: int getIndex()>"
"<android.media.AudioManager: void unloadSoundEffects()>","<android.media.AudioManager: void unloadSoundEffects()>"
"<java.time.LocalTime: int getSecond()>","<java.time.LocalTime: int getSecond()>"
"<android.view.MotionEvent: long getHistoricalEventTime(int)>","<android.view.MotionEvent: long getHistoricalEventTime(int)>"
"<android.view.MenuItem: boolean isActionViewExpanded()>","<android.view.MenuItem: boolean isActionViewExpanded()>"
"<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>"
"<java.time.temporal.ChronoUnit: boolean isDurationEstimated()>","<java.time.temporal.ChronoUnit: boolean isDurationEstimated()>"
"<android.telephony.BarringInfo: void <clinit>()>","<android.telephony.BarringInfo: void <clinit>()>"
"<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.widget.TextView: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(int,android.util.Size)>"
"<android.database.Cursor: double getDouble(int)>","<android.database.Cursor: double getDouble(int)>"
"<android.content.IntentFilter: java.util.function.Predicate asPredicate()>","<android.content.IntentFilter: java.util.function.Predicate asPredicate()>"
"<android.media.AudioTrack: int setBufferSizeInFrames(int)>","<android.media.AudioTrack: int setBufferSizeInFrames(int)>"
"<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>","<android.view.LayoutInflater: void <init>(android.view.LayoutInflater,android.content.Context)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>"
"<android.content.pm.Attribution: java.lang.String getTag()>","<android.content.pm.Attribution: java.lang.String getTag()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(java.lang.String,java.lang.String,int)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(java.lang.String,java.lang.String,int)>"
"<java.util.SortedSet: java.util.Spliterator spliterator()>","<java.util.SortedSet: java.util.Spliterator spliterator()>"
"<java.net.URLConnection: void setDoInput(boolean)>","<java.net.URLConnection: void setDoInput(boolean)>"
"<android.view.View: void dispatchStartTemporaryDetach()>","<android.view.View: void dispatchStartTemporaryDetach()>"
"<android.graphics.Path: void setLastPoint(float,float)>","<android.graphics.Path: void setLastPoint(float,float)>"
"<java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)>","<java.util.Collections: java.util.Map checkedMap(java.util.Map,java.lang.Class,java.lang.Class)>"
"<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>","<java.lang.ThreadGroup: boolean parentOf(java.lang.ThreadGroup)>"
"<android.widget.EditText: android.text.Editable getText()>","<android.widget.EditText: android.text.Editable getText()>"
"<java.nio.LongBuffer: boolean isDirect()>","<java.nio.LongBuffer: boolean isDirect()>"
"<android.media.session.MediaController$TransportControls: void sendCustomAction(android.media.session.PlaybackState$CustomAction,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void sendCustomAction(android.media.session.PlaybackState$CustomAction,android.os.Bundle)>"
"<android.graphics.drawable.LayerDrawable: int getLeftPadding()>","<android.graphics.drawable.LayerDrawable: int getLeftPadding()>"
"<java.time.chrono.Chronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>","<java.time.chrono.Chronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
"<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.lang.invoke.VarHandle: java.util.List coordinateTypes()>","<java.lang.invoke.VarHandle: java.util.List coordinateTypes()>"
"<android.view.ViewGroup: boolean onNestedPreFling(android.view.View,float,float)>","<android.view.ViewGroup: boolean onNestedPreFling(android.view.View,float,float)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withZeroDigit(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withZeroDigit(char)>"
"<java.nio.channels.SelectionKey: boolean isConnectable()>","<java.nio.channels.SelectionKey: boolean isConnectable()>"
"<android.content.Intent: void <init>()>","<android.content.Intent: void <init>()>"
"<java.util.Optional: java.lang.Object get()>","<java.util.Optional: java.lang.Object get()>"
"<java.lang.reflect.Field: java.lang.String toString()>","<java.lang.reflect.Field: java.lang.String toString()>"
"<java.net.URI: java.lang.String getRawPath()>","<java.net.URI: java.lang.String getRawPath()>"
"<java.time.LocalTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>","<android.view.MenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>"
"<android.view.Window: void setSustainedPerformanceMode(boolean)>","<android.view.Window: void setSustainedPerformanceMode(boolean)>"
"<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>","<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>","<android.graphics.ColorSpace: android.graphics.ColorSpace$Connector connect(android.graphics.ColorSpace,android.graphics.ColorSpace$RenderIntent)>"
"<java.util.HashMap: boolean remove(java.lang.Object,java.lang.Object)>","<java.util.HashMap: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setEditorBounds(android.graphics.RectF)>","<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setEditorBounds(android.graphics.RectF)>"
"<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>","<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>"
"<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowAttached()>","<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowAttached()>"
"<java.nio.channels.DatagramChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.DatagramChannel: java.net.SocketAddress getLocalAddress()>"
"<android.app.PictureInPictureParams: int describeContents()>","<android.app.PictureInPictureParams: int describeContents()>"
"<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>","<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>"
"<android.media.session.MediaSession: void setQueueTitle(java.lang.CharSequence)>","<android.media.session.MediaSession: void setQueueTitle(java.lang.CharSequence)>"
"<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.os.Build$Partition: long getBuildTimeMillis()>","<android.os.Build$Partition: long getBuildTimeMillis()>"
"<android.telephony.data.ApnSetting: int describeContents()>","<android.telephony.data.ApnSetting: int describeContents()>"
"<android.widget.TextView: int getMaxWidth()>","<android.widget.TextView: int getMaxWidth()>"
"<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>","<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(int,float)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putFloat(int,float)>"
"<android.graphics.RectF: boolean contains(float,float)>","<android.graphics.RectF: boolean contains(float,float)>"
"<android.os.PersistableBundle: android.os.PersistableBundle readFromStream(java.io.InputStream)>","<android.os.PersistableBundle: android.os.PersistableBundle readFromStream(java.io.InputStream)>"
"<android.provider.Settings$Global: void <clinit>()>","<android.provider.Settings$Global: void <clinit>()>"
"<java.lang.Character: boolean isUnicodeIdentifierPart(int)>","<java.lang.Character: boolean isUnicodeIdentifierPart(int)>"
"<java.util.ArrayList: int indexOf(java.lang.Object)>","<java.util.ArrayList: int indexOf(java.lang.Object)>"
"<java.lang.Character: boolean isSupplementaryCodePoint(int)>","<java.lang.Character: boolean isSupplementaryCodePoint(int)>"
"<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>","<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>"
"<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>","<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>"
"<java.lang.Double: java.lang.String toHexString(double)>","<java.lang.Double: java.lang.String toHexString(double)>"
"<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>","<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>"
"<android.app.PendingIntent: void cancel()>","<android.app.PendingIntent: void cancel()>"
"<java.util.function.BinaryOperator: java.util.function.BinaryOperator maxBy(java.util.Comparator)>","<java.util.function.BinaryOperator: java.util.function.BinaryOperator maxBy(java.util.Comparator)>"
"<android.view.Window$Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.Window$Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>","<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()>"
"<android.view.Choreographer: android.view.Choreographer getInstance()>","<android.view.Choreographer: android.view.Choreographer getInstance()>"
"<android.view.ViewTreeObserver$OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>","<android.view.ViewTreeObserver$OnGlobalFocusChangeListener: void onGlobalFocusChanged(android.view.View,android.view.View)>"
"<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>","<android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)>"
"<android.app.ActionBar: void show()>","<android.app.ActionBar: void show()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSubtitle(java.lang.CharSequence)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSubtitle(java.lang.CharSequence)>"
"<android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()>","<android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()>"
"<android.graphics.Paint: void getFontMetricsInt(char[],int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>","<android.graphics.Paint: void getFontMetricsInt(char[],int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>"
"<java.net.URI: java.net.URI create(java.lang.String)>","<java.net.URI: java.net.URI create(java.lang.String)>"
"<android.telephony.TelephonyManager$CallComposerException: void <init>(int,java.io.IOException)>","<android.telephony.TelephonyManager$CallComposerException: void <init>(int,java.io.IOException)>"
"<android.graphics.ColorSpace$Rgb: float getMaxValue(int)>","<android.graphics.ColorSpace$Rgb: float getMaxValue(int)>"
"<android.view.Display: void getRealSize(android.graphics.Point)>","<android.view.Display: void getRealSize(android.graphics.Point)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectRight(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectRight(android.graphics.Rect)>"
"<android.os.Parcel: void writeDoubleArray(double[])>","<android.os.Parcel: void writeDoubleArray(double[])>"
"<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>","<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>"
"<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>","<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>"
"<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>","<android.hardware.camera2.CameraCaptureSession: void stopRepeating()>"
"<java.nio.CharBuffer: boolean isDirect()>","<java.nio.CharBuffer: boolean isDirect()>"
"<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>","<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>"
"<android.graphics.Bitmap: boolean isMutable()>","<android.graphics.Bitmap: boolean isMutable()>"
"<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Secure: long getLong(android.content.ContentResolver,java.lang.String,long)>"
"<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>","<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>"
"<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>","<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>"
"<java.lang.Class: boolean isMemberClass()>","<java.lang.Class: boolean isMemberClass()>"
"<android.view.MotionEvent$PointerCoords: void clear()>","<android.view.MotionEvent$PointerCoords: void clear()>"
"<android.graphics.Point: void <init>()>","<android.graphics.Point: void <init>()>"
"<android.os.IBinder: int getSuggestedMaxIpcSizeBytes()>","<android.os.IBinder: int getSuggestedMaxIpcSizeBytes()>"
"<android.animation.ValueAnimator: long getFrameDelay()>","<android.animation.ValueAnimator: long getFrameDelay()>"
"<android.os.MemoryFile: void close()>","<android.os.MemoryFile: void close()>"
"<java.nio.ByteBuffer: boolean isDirect()>","<java.nio.ByteBuffer: boolean isDirect()>"
"<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>","<java.net.URLConnection: void setDefaultRequestProperty(java.lang.String,java.lang.String)>"
"<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>","<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()>"
"<android.media.session.MediaController: android.os.Bundle getExtras()>","<android.media.session.MediaController: android.os.Bundle getExtras()>"
"<android.graphics.drawable.LayerDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>","<android.graphics.drawable.LayerDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>"
"<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)>","<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)>"
"<java.security.Permission: boolean implies(java.security.Permission)>","<java.security.Permission: boolean implies(java.security.Permission)>"
"<android.widget.TextView: int getCompoundPaddingBottom()>","<android.widget.TextView: int getCompoundPaddingBottom()>"
"<android.media.AudioRouting: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>","<android.media.AudioRouting: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>"
"<android.view.inputmethod.CompletionInfo: int getPosition()>","<android.view.inputmethod.CompletionInfo: int getPosition()>"
"<java.lang.Thread: int enumerate(java.lang.Thread[])>","<java.lang.Thread: int enumerate(java.lang.Thread[])>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>"
"<java.lang.Math: double tan(double)>","<java.lang.Math: double tan(double)>"
"<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>","<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>"
"<java.util.Arrays: int mismatch(long[],int,int,long[],int,int)>","<java.util.Arrays: int mismatch(long[],int,int,long[],int,int)>"
"<java.lang.Short: java.lang.Short decode(java.lang.String)>","<java.lang.Short: java.lang.Short decode(java.lang.String)>"
"<java.util.HashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.util.HashMap: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<android.content.ClipboardManager$OnPrimaryClipChangedListener: void onPrimaryClipChanged()>","<android.content.ClipboardManager$OnPrimaryClipChangedListener: void onPrimaryClipChanged()>"
"<android.telephony.ServiceState: void setIsManualSelection(boolean)>","<android.telephony.ServiceState: void setIsManualSelection(boolean)>"
"<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int)>","<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.util.TypedValue: java.lang.String coerceToString(int,int)>","<android.util.TypedValue: java.lang.String coerceToString(int,int)>"
"<android.graphics.RectF: void sort()>","<android.graphics.RectF: void sort()>"
"<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,java.util.function.Function,int[])>","<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,java.util.function.Function,int[])>"
"<android.content.Intent: android.content.Intent setData(android.net.Uri)>","<android.content.Intent: android.content.Intent setData(android.net.Uri)>"
"<android.graphics.Region: boolean quickContains(int,int,int,int)>","<android.graphics.Region: boolean quickContains(int,int,int,int)>"
"<java.lang.invoke.VarHandle: boolean isAccessModeSupported(java.lang.invoke.VarHandle$AccessMode)>","<java.lang.invoke.VarHandle: boolean isAccessModeSupported(java.lang.invoke.VarHandle$AccessMode)>"
"<android.widget.Toolbar: int getCurrentContentInsetLeft()>","<android.widget.Toolbar: int getCurrentContentInsetLeft()>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()>","<android.hardware.Camera$Parameters: java.util.List getSupportedPreviewFrameRates()>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: boolean equals(java.lang.Object)>","<android.media.session.MediaSessionManager$RemoteUserInfo: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>","<android.view.ViewGroup: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>"
"<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>","<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>"
"<android.widget.RemoteViews: void <init>(java.lang.String,int,int)>","<android.widget.RemoteViews: void <init>(java.lang.String,int,int)>"
"<android.widget.Filter$FilterListener: void onFilterComplete(int)>","<android.widget.Filter$FilterListener: void onFilterComplete(int)>"
"<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>"
"<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>","<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)>"
"<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>","<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>"
"<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: int checkSignatures(java.lang.String,java.lang.String)>"
"<android.app.TaskInfo: void <init>()>","<android.app.TaskInfo: void <init>()>"
"<android.os.Debug: void waitForDebugger()>","<android.os.Debug: void waitForDebugger()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle empty(java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle empty(java.lang.invoke.MethodType)>"
"<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>","<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>"
"<android.graphics.fonts.Font: void getMetrics(android.graphics.Paint,android.graphics.Paint$FontMetrics)>","<android.graphics.fonts.Font: void getMetrics(android.graphics.Paint,android.graphics.Paint$FontMetrics)>"
"<java.lang.Character$UnicodeScript: void <clinit>()>","<java.lang.Character$UnicodeScript: void <clinit>()>"
"<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.view.animation.Animation: void finalize()>","<android.view.animation.Animation: void finalize()>"
"<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>","<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>"
"<java.nio.IntBuffer: java.nio.ByteOrder order()>","<java.nio.IntBuffer: java.nio.ByteOrder order()>"
"<android.media.session.MediaSession: void setActive(boolean)>","<android.media.session.MediaSession: void setActive(boolean)>"
"<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>","<android.view.inputmethod.InputMethodManager: boolean switchToLastInputMethod(android.os.IBinder)>"
"<java.util.regex.Matcher: void <init>()>","<java.util.regex.Matcher: void <init>()>"
"<android.widget.TextView: void computeScroll()>","<android.widget.TextView: void computeScroll()>"
"<android.database.DataSetObserver: void onChanged()>","<android.database.DataSetObserver: void onChanged()>"
"<android.view.animation.Animation: boolean hasStarted()>","<android.view.animation.Animation: boolean hasStarted()>"
"<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>","<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>"
"<android.icu.util.ULocale: void <clinit>()>","<android.icu.util.ULocale: void <clinit>()>"
"<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface)>","<android.hardware.camera2.params.OutputConfiguration: void <init>(int,android.view.Surface)>"
"<android.view.animation.LayoutAnimationController: boolean willOverlap()>","<android.view.animation.LayoutAnimationController: boolean willOverlap()>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreBackoff(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setIgnoreBackoff(boolean)>"
"<android.graphics.fonts.FontStyle: java.lang.String toString()>","<android.graphics.fonts.FontStyle: java.lang.String toString()>"
"<android.graphics.Rect: void <clinit>()>","<android.graphics.Rect: void <clinit>()>"
"<android.media.session.MediaSession: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()>","<android.media.session.MediaSession: android.media.session.MediaSessionManager$RemoteUserInfo getCurrentControllerInfo()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<java.lang.AssertionError: void <init>(long)>","<java.lang.AssertionError: void <init>(long)>"
"<java.lang.CharSequence: char charAt(int)>","<java.lang.CharSequence: char charAt(int)>"
"<android.text.TextPaint: void <init>(int)>","<android.text.TextPaint: void <init>(int)>"
"<java.time.Period: java.time.Period minusMonths(long)>","<java.time.Period: java.time.Period minusMonths(long)>"
"<android.text.TextUtils$SimpleStringSplitter: void remove()>","<android.text.TextUtils$SimpleStringSplitter: void remove()>"
"<android.view.translation.ViewTranslationCallback: boolean onHideTranslation(android.view.View)>","<android.view.translation.ViewTranslationCallback: boolean onHideTranslation(android.view.View)>"
"<java.util.function.LongPredicate: java.util.function.LongPredicate negate()>","<java.util.function.LongPredicate: java.util.function.LongPredicate negate()>"
"<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>","<android.text.InputFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>"
"<android.hardware.display.DisplayManager$DisplayListener: void onDisplayRemoved(int)>","<android.hardware.display.DisplayManager$DisplayListener: void onDisplayRemoved(int)>"
"<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>","<java.nio.channels.spi.AbstractSelector: void deregister(java.nio.channels.spi.AbstractSelectionKey)>"
"<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>","<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>"
"<android.hardware.lights.LightsManager: java.util.List getLights()>","<android.hardware.lights.LightsManager: java.util.List getLights()>"
"<android.text.Layout: int getLineBaseline(int)>","<android.text.Layout: int getLineBaseline(int)>"
"<java.lang.Double: double min(double,double)>","<java.lang.Double: double min(double,double)>"
"<java.util.Date: void <init>(int,int,int,int,int)>","<java.util.Date: void <init>(int,int,int,int,int)>"
"<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>","<java.lang.StackTraceElement: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>"
"<android.content.res.ColorStateList: int getDefaultColor()>","<android.content.res.ColorStateList: int getDefaultColor()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isTextEntryKey()>"
"<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>","<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>"
"<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>","<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>"
"<java.util.Arrays: int hashCode(double[])>","<java.util.Arrays: int hashCode(double[])>"
"<android.widget.TextView$SavedState: void <clinit>()>","<android.widget.TextView$SavedState: void <clinit>()>"
"<android.view.View: android.graphics.Rect getClipBounds()>","<android.view.View: android.graphics.Rect getClipBounds()>"
"<android.os.Debug: void resetGlobalAllocCount()>","<android.os.Debug: void resetGlobalAllocCount()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: java.util.Collection resolveEntityListModifications(java.util.Collection)>"
"<java.time.Period: java.time.Period ofWeeks(int)>","<java.time.Period: java.time.Period ofWeeks(int)>"
"<java.lang.Class: java.lang.reflect.Method[] getMethods()>","<java.lang.Class: java.lang.reflect.Method[] getMethods()>"
"<android.app.Fragment: java.lang.Object getHost()>","<android.app.Fragment: java.lang.Object getHost()>"
"<java.nio.channels.AsynchronousFileChannel: void <init>()>","<java.nio.channels.AsynchronousFileChannel: void <init>()>"
"<android.hardware.camera2.CameraManager: java.util.Set getConcurrentCameraIds()>","<android.hardware.camera2.CameraManager: java.util.Set getConcurrentCameraIds()>"
"<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>","<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>"
"<android.view.MotionEvent$PointerProperties: int hashCode()>","<android.view.MotionEvent$PointerProperties: int hashCode()>"
"<java.util.NavigableMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>","<java.util.NavigableMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>"
"<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>","<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>"
"<android.app.Dialog: void cancel()>","<android.app.Dialog: void cancel()>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params build()>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params build()>"
"<java.lang.Character: int codePointCount(char[],int,int)>","<java.lang.Character: int codePointCount(char[],int,int)>"
"<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponseFailed(android.telephony.TelephonyManager,java.lang.String,int)>","<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponseFailed(android.telephony.TelephonyManager,java.lang.String,int)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[],int,int)>"
"<android.telephony.data.ApnSetting: boolean equals(java.lang.Object)>","<android.telephony.data.ApnSetting: boolean equals(java.lang.Object)>"
"<java.util.Collections: java.util.List synchronizedList(java.util.List)>","<java.util.Collections: java.util.List synchronizedList(java.util.List)>"
"<android.widget.RemoteViews$RemoteCollectionItems: int getItemCount()>","<android.widget.RemoteViews$RemoteCollectionItems: int getItemCount()>"
"<android.widget.TextView: boolean isHorizontallyScrollable()>","<android.widget.TextView: boolean isHorizontallyScrollable()>"
"<java.lang.Byte: void <init>(java.lang.String)>","<java.lang.Byte: void <init>(java.lang.String)>"
"<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<java.net.DatagramSocket: void setReuseAddress(boolean)>","<java.net.DatagramSocket: void setReuseAddress(boolean)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript forName(java.lang.String)>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript forName(java.lang.String)>"
"<android.net.ConnectivityManager: void releaseNetworkRequest(android.app.PendingIntent)>","<android.net.ConnectivityManager: void releaseNetworkRequest(android.app.PendingIntent)>"
"<android.app.Activity: void onPerformDirectAction(java.lang.String,android.os.Bundle,android.os.CancellationSignal,java.util.function.Consumer)>","<android.app.Activity: void onPerformDirectAction(java.lang.String,android.os.Bundle,android.os.CancellationSignal,java.util.function.Consumer)>"
"<android.content.Intent: void setSelector(android.content.Intent)>","<android.content.Intent: void setSelector(android.content.Intent)>"
"<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>","<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>"
"<android.hardware.SyncFence: boolean awaitForever()>","<android.hardware.SyncFence: boolean awaitForever()>"
"<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig build()>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig build()>"
"<android.hardware.camera2.CameraDevice$StateCallback: void onClosed(android.hardware.camera2.CameraDevice)>","<android.hardware.camera2.CameraDevice$StateCallback: void onClosed(android.hardware.camera2.CameraDevice)>"
"<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)>","<android.view.Menu: android.view.MenuItem add(java.lang.CharSequence)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getColumnTitle()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getColumnTitle()>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel disconnect()>"
"<android.widget.AbsListView: void onOverScrolled(int,int,boolean,boolean)>","<android.widget.AbsListView: void onOverScrolled(int,int,boolean,boolean)>"
"<android.text.Layout: int getHeight()>","<android.text.Layout: int getHeight()>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String toString()>","<android.view.inputmethod.InputMethodInfo: java.lang.String toString()>"
"<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>"
"<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>","<android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>"
"<java.lang.Double: boolean equals(java.lang.Object)>","<java.lang.Double: boolean equals(java.lang.Object)>"
"<android.media.AudioRecordingConfiguration: boolean equals(java.lang.Object)>","<android.media.AudioRecordingConfiguration: boolean equals(java.lang.Object)>"
"<java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>","<java.util.Collections: int frequency(java.util.Collection,java.lang.Object)>"
"<android.os.Debug: void resetAllCounts()>","<android.os.Debug: void resetAllCounts()>"
"<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>","<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>"
"<java.lang.reflect.Field: boolean equals(java.lang.Object)>","<java.lang.reflect.Field: boolean equals(java.lang.Object)>"
"<java.lang.reflect.InvocationTargetException: void <init>()>","<java.lang.reflect.InvocationTargetException: void <init>()>"
"<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>","<android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putBitmap(int,android.graphics.Bitmap)>","<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putBitmap(int,android.graphics.Bitmap)>"
"<android.graphics.NinePatch: boolean hasAlpha()>","<android.graphics.NinePatch: boolean hasAlpha()>"
"<android.hardware.display.DeviceProductInfo: boolean equals(java.lang.Object)>","<android.hardware.display.DeviceProductInfo: boolean equals(java.lang.Object)>"
"<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>","<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>"
"<android.view.ViewOutlineProvider: void <init>()>","<android.view.ViewOutlineProvider: void <init>()>"
"<android.view.textclassifier.TextLinks$Request: int describeContents()>","<android.view.textclassifier.TextLinks$Request: int describeContents()>"
"<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics[] values()>","<java.util.stream.Collector$Characteristics: java.util.stream.Collector$Characteristics[] values()>"
"<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>","<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>"
"<java.lang.Thread: int getPriority()>","<java.lang.Thread: int getPriority()>"
"<android.graphics.BitmapFactory: void <init>()>","<android.graphics.BitmapFactory: void <init>()>"
"<java.util.Locale: java.lang.String getISO3Language()>","<java.util.Locale: java.lang.String getISO3Language()>"
"<java.net.Inet4Address: boolean isLoopbackAddress()>","<java.net.Inet4Address: boolean isLoopbackAddress()>"
"<java.util.function.UnaryOperator: java.util.function.UnaryOperator identity()>","<java.util.function.UnaryOperator: java.util.function.UnaryOperator identity()>"
"<android.view.textclassifier.TextClassification: int describeContents()>","<android.view.textclassifier.TextClassification: int describeContents()>"
"<java.time.LocalTime: long toEpochSecond(java.time.LocalDate,java.time.ZoneOffset)>","<java.time.LocalTime: long toEpochSecond(java.time.LocalDate,java.time.ZoneOffset)>"
"<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.view.inputmethod.InputMethodInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<android.media.MediaDrm: java.util.List getOfflineLicenseKeySetIds()>","<android.media.MediaDrm: java.util.List getOfflineLicenseKeySetIds()>"
"<android.content.Context: boolean stopService(android.content.Intent)>","<android.content.Context: boolean stopService(android.content.Intent)>"
"<java.nio.CharBuffer: int arrayOffset()>","<java.nio.CharBuffer: int arrayOffset()>"
"<android.app.TaskInfo: boolean isVisible()>","<android.app.TaskInfo: boolean isVisible()>"
"<android.util.SizeF: void <clinit>()>","<android.util.SizeF: void <clinit>()>"
"<android.view.ViewGroup: void dispatchDrawableHotspotChanged(float,float)>","<android.view.ViewGroup: void dispatchDrawableHotspotChanged(float,float)>"
"<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>","<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>"
"<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>","<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>"
"<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()>","<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()>"
"<android.util.DisplayMetrics: void setToDefaults()>","<android.util.DisplayMetrics: void setToDefaults()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence,java.util.function.Consumer)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBuffer(android.view.SurfaceControl,android.hardware.HardwareBuffer,android.hardware.SyncFence,java.util.function.Consumer)>"
"<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>","<java.lang.ExceptionInInitializerError: java.lang.Throwable getException()>"
"<android.content.pm.ChangedPackages: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ChangedPackages: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Thread: void onSpinWait()>","<java.lang.Thread: void onSpinWait()>"
"<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>","<java.lang.reflect.Method: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>"
"<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>","<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>"
"<android.content.pm.Attribution: int describeContents()>","<android.content.pm.Attribution: int describeContents()>"
"<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>","<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asCollector(int,java.lang.Class,int)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asCollector(int,java.lang.Class,int)>"
"<android.widget.Toolbar: void onDetachedFromWindow()>","<android.widget.Toolbar: void onDetachedFromWindow()>"
"<android.os.Parcel: long[] createLongArray()>","<android.os.Parcel: long[] createLongArray()>"
"<java.lang.Character: int toLowerCase(int)>","<java.lang.Character: int toLowerCase(int)>"
"<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>","<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>"
"<android.view.WindowInsetsAnimation$Callback: void onPrepare(android.view.WindowInsetsAnimation)>","<android.view.WindowInsetsAnimation$Callback: void onPrepare(android.view.WindowInsetsAnimation)>"
"<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>","<android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>"
"<android.media.MediaDrm: java.util.HashMap queryKeyStatus(byte[])>","<android.media.MediaDrm: java.util.HashMap queryKeyStatus(byte[])>"
"<java.lang.reflect.Constructor: void <init>()>","<java.lang.reflect.Constructor: void <init>()>"
"<android.media.MediaDescription: void <init>()>","<android.media.MediaDescription: void <init>()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>"
"<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getLinkProperties()>","<android.telephony.PreciseDataConnectionState: android.net.LinkProperties getLinkProperties()>"
"<android.app.Dialog: void setVolumeControlStream(int)>","<android.app.Dialog: void setVolumeControlStream(int)>"
"<android.app.Fragment: void setEnterTransition(android.transition.Transition)>","<android.app.Fragment: void setEnterTransition(android.transition.Transition)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float)>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float)>"
"<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int)>","<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int)>"
"<android.app.Person$Builder: void <init>()>","<android.app.Person$Builder: void <init>()>"
"<android.view.WindowId$FocusObserver: void onFocusLost(android.view.WindowId)>","<android.view.WindowId$FocusObserver: void onFocusLost(android.view.WindowId)>"
"<java.nio.channels.SelectionKey: int interestOpsOr(int)>","<java.nio.channels.SelectionKey: int interestOpsOr(int)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer compact()>","<java.nio.FloatBuffer: java.nio.FloatBuffer compact()>"
"<android.hardware.lights.LightsManager$LightsSession: void <init>()>","<android.hardware.lights.LightsManager$LightsSession: void <init>()>"
"<java.util.NavigableMap: java.util.SortedMap tailMap(java.lang.Object)>","<java.util.NavigableMap: java.util.SortedMap tailMap(java.lang.Object)>"
"<java.lang.OutOfMemoryError: void <init>()>","<java.lang.OutOfMemoryError: void <init>()>"
"<android.view.Choreographer: void <init>()>","<android.view.Choreographer: void <init>()>"
"<android.content.ComponentName: int describeContents()>","<android.content.ComponentName: int describeContents()>"
"<android.view.View: void setImportantForAutofill(int)>","<android.view.View: void setImportantForAutofill(int)>"
"<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>","<android.widget.TextView: void setTypeface(android.graphics.Typeface,int)>"
"<java.text.ParsePosition: int hashCode()>","<java.text.ParsePosition: int hashCode()>"
"<android.app.Person$Builder: android.app.Person$Builder setIcon(android.graphics.drawable.Icon)>","<android.app.Person$Builder: android.app.Person$Builder setIcon(android.graphics.drawable.Icon)>"
"<android.content.Context: void removeStickyBroadcast(android.content.Intent)>","<android.content.Context: void removeStickyBroadcast(android.content.Intent)>"
"<android.view.autofill.AutofillValue: java.lang.String toString()>","<android.view.autofill.AutofillValue: java.lang.String toString()>"
"<android.text.Layout: int getLineVisibleEnd(int)>","<android.text.Layout: int getLineVisibleEnd(int)>"
"<android.telephony.IccOpenLogicalChannelResponse: int getStatus()>","<android.telephony.IccOpenLogicalChannelResponse: int getStatus()>"
"<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.reflect.AccessibleObject: boolean isAnnotationPresent(java.lang.Class)>"
"<android.widget.EditText: void selectAll()>","<android.widget.EditText: void selectAll()>"
"<java.lang.Math: double expm1(double)>","<java.lang.Math: double expm1(double)>"
"<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>","<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>"
"<android.os.Debug$InstructionCount: boolean collect()>","<android.os.Debug$InstructionCount: boolean collect()>"
"<android.media.AudioTrack: float getAudioDescriptionMixLeveldB()>","<android.media.AudioTrack: float getAudioDescriptionMixLeveldB()>"
"<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>","<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>"
"<java.lang.String: int lastIndexOf(java.lang.String,int)>","<java.lang.String: int lastIndexOf(java.lang.String,int)>"
"<android.view.ViewGroup: android.view.View getFocusedChild()>","<android.view.ViewGroup: android.view.View getFocusedChild()>"
"<android.os.PersistableBundle: android.os.PersistableBundle deepCopy()>","<android.os.PersistableBundle: android.os.PersistableBundle deepCopy()>"
"<java.lang.Integer: int remainderUnsigned(int,int)>","<java.lang.Integer: int remainderUnsigned(int,int)>"
"<java.net.URI: java.lang.String getPath()>","<java.net.URI: java.lang.String getPath()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])>"
"<android.graphics.Paint: android.os.LocaleList getTextLocales()>","<android.graphics.Paint: android.os.LocaleList getTextLocales()>"
"<android.hardware.SyncFence: void <init>()>","<android.hardware.SyncFence: void <init>()>"
"<android.graphics.Color: int green(int)>","<android.graphics.Color: int green(int)>"
"<android.widget.AbsListView: void setVelocityScale(float)>","<android.widget.AbsListView: void setVelocityScale(float)>"
"<android.media.AudioMetadata$Key: java.lang.Class getValueClass()>","<android.media.AudioMetadata$Key: java.lang.Class getValueClass()>"
"<android.content.pm.PackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)>","<android.content.pm.PackageManager: android.content.Intent getLeanbackLaunchIntentForPackage(java.lang.String)>"
"<android.hardware.camera2.params.MeteringRectangle: android.graphics.Point getUpperLeftPoint()>","<android.hardware.camera2.params.MeteringRectangle: android.graphics.Point getUpperLeftPoint()>"
"<java.io.FileFilter: boolean accept(java.io.File)>","<java.io.FileFilter: boolean accept(java.io.File)>"
"<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>","<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>"
"<android.graphics.Shader: void <init>()>","<android.graphics.Shader: void <init>()>"
"<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>","<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>"
"<android.view.Surface: void setFrameRate(float,int)>","<android.view.Surface: void setFrameRate(float,int)>"
"<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>","<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setSampleRate(int)>"
"<android.graphics.Paint: boolean isLinearText()>","<android.graphics.Paint: boolean isLinearText()>"
"<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>","<android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)>"
"<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.Rect,android.graphics.Paint)>"
"<android.widget.TextView: float getLeftFadingEdgeStrength()>","<android.widget.TextView: float getLeftFadingEdgeStrength()>"
"<android.util.AttributeSet: float getAttributeFloatValue(int,float)>","<android.util.AttributeSet: float getAttributeFloatValue(int,float)>"
"<android.content.ContextWrapper: void clearWallpaper()>","<android.content.ContextWrapper: void clearWallpaper()>"
"<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>","<android.media.MediaPlayer: void setOnSubtitleDataListener(android.media.MediaPlayer$OnSubtitleDataListener,android.os.Handler)>"
"<android.hardware.SensorEvent: void <init>()>","<android.hardware.SensorEvent: void <init>()>"
"<android.view.InputQueue: void finalize()>","<android.view.InputQueue: void finalize()>"
"<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Point,android.util.Size,int)>","<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Point,android.util.Size,int)>"
"<android.hardware.SensorManager: void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>","<android.hardware.SensorManager: void unregisterDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>"
"<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.util.HashMap: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<android.animation.PropertyValuesHolder: java.lang.String toString()>","<android.animation.PropertyValuesHolder: java.lang.String toString()>"
"<android.animation.Animator$AnimatorPauseListener: void onAnimationResume(android.animation.Animator)>","<android.animation.Animator$AnimatorPauseListener: void onAnimationResume(android.animation.Animator)>"
"<android.content.SyncStatusObserver: void onStatusChanged(int)>","<android.content.SyncStatusObserver: void onStatusChanged(int)>"
"<java.time.chrono.IsoChronology: java.util.List eras()>","<java.time.chrono.IsoChronology: java.util.List eras()>"
"<android.view.ViewTreeObserver: void registerFrameCommitCallback(java.lang.Runnable)>","<android.view.ViewTreeObserver: void registerFrameCommitCallback(java.lang.Runnable)>"
"<android.graphics.Paint: android.graphics.Typeface getTypeface()>","<android.graphics.Paint: android.graphics.Typeface getTypeface()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectConstructor(java.lang.reflect.Constructor)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectConstructor(java.lang.reflect.Constructor)>"
"<android.graphics.Paint: void <init>(android.graphics.Paint)>","<android.graphics.Paint: void <init>(android.graphics.Paint)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: void <init>()>","<android.view.inputmethod.CursorAnchorInfo$Builder: void <init>()>"
"<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>","<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>"
"<android.os.MemoryFile: boolean isPurgingAllowed()>","<android.os.MemoryFile: boolean isPurgingAllowed()>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setPackageName(java.lang.String)>","<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setPackageName(java.lang.String)>"
"<java.util.Queue: boolean add(java.lang.Object)>","<java.util.Queue: boolean add(java.lang.Object)>"
"<android.media.AudioDeviceInfo: java.lang.CharSequence getProductName()>","<android.media.AudioDeviceInfo: java.lang.CharSequence getProductName()>"
"<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>","<android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>"
"<android.text.Layout: int getTopPadding()>","<android.text.Layout: int getTopPadding()>"
"<android.view.textclassifier.ConversationActions: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.ConversationActions: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>","<java.nio.IntBuffer: java.nio.IntBuffer put(int[])>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.graphics.drawable.BitmapDrawable: boolean hasMipMap()>","<android.graphics.drawable.BitmapDrawable: boolean hasMipMap()>"
"<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>","<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>"
"<android.view.ActionMode$Callback: void onDestroyActionMode(android.view.ActionMode)>","<android.view.ActionMode$Callback: void onDestroyActionMode(android.view.ActionMode)>"
"<android.content.pm.FeatureGroupInfo: void <init>()>","<android.content.pm.FeatureGroupInfo: void <init>()>"
"<java.nio.ByteBuffer: int alignmentOffset(int,int)>","<java.nio.ByteBuffer: int alignmentOffset(int,int)>"
"<android.hardware.lights.Light: void <clinit>()>","<android.hardware.lights.Light: void <clinit>()>"
"<java.time.OffsetDateTime: int getYear()>","<java.time.OffsetDateTime: int getYear()>"
"<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()>","<android.view.textclassifier.TextClassification: android.os.Bundle getExtras()>"
"<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>","<java.nio.file.FileSystem: java.nio.file.PathMatcher getPathMatcher(java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)>"
"<android.telephony.TelephonyManager: java.lang.CharSequence getSimSpecificCarrierIdName()>","<android.telephony.TelephonyManager: java.lang.CharSequence getSimSpecificCarrierIdName()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String)>"
"<android.view.Surface: void <clinit>()>","<android.view.Surface: void <clinit>()>"
"<android.hardware.Camera$Parameters: void removeGpsData()>","<android.hardware.Camera$Parameters: void removeGpsData()>"
"<java.util.concurrent.Future: java.lang.Object get()>","<java.util.concurrent.Future: java.lang.Object get()>"
"<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>"
"<android.widget.AbsListView: void reclaimViews(java.util.List)>","<android.widget.AbsListView: void reclaimViews(java.util.List)>"
"<java.security.cert.Certificate: java.lang.String getType()>","<java.security.cert.Certificate: java.lang.String getType()>"
"<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>","<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>"
"<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>"
"<android.content.pm.PackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>","<android.content.pm.PackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>"
"<android.os.Messenger: void send(android.os.Message)>","<android.os.Messenger: void send(android.os.Message)>"
"<java.lang.Character: char toTitleCase(char)>","<java.lang.Character: char toTitleCase(char)>"
"<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>","<android.view.contentcapture.ContentCaptureSessionId: int describeContents()>"
"<android.widget.Button: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.Button: java.lang.CharSequence getAccessibilityClassName()>"
"<android.graphics.drawable.LayerDrawable: void setAutoMirrored(boolean)>","<android.graphics.drawable.LayerDrawable: void setAutoMirrored(boolean)>"
"<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>"
"<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addOval(float,float,float,float,android.graphics.Path$Direction)>"
"<android.graphics.Bitmap: int getRowBytes()>","<android.graphics.Bitmap: int getRowBytes()>"
"<android.media.metrics.LogSessionId: java.lang.String getStringId()>","<android.media.metrics.LogSessionId: java.lang.String getStringId()>"
"<android.view.ContentInfo: int getFlags()>","<android.view.ContentInfo: int getFlags()>"
"<java.time.zone.ZoneRules: boolean isFixedOffset()>","<java.time.zone.ZoneRules: boolean isFixedOffset()>"
"<android.view.autofill.AutofillValue: boolean isDate()>","<android.view.autofill.AutofillValue: boolean isDate()>"
"<java.time.temporal.ChronoField: java.lang.String getDisplayName(java.util.Locale)>","<java.time.temporal.ChronoField: java.lang.String getDisplayName(java.util.Locale)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setContentType(int)>"
"<android.content.res.TypedArray: int getType(int)>","<android.content.res.TypedArray: int getType(int)>"
"<android.widget.TextView: void setLineHeight(int)>","<android.widget.TextView: void setLineHeight(int)>"
"<java.time.temporal.ChronoUnit: boolean isSupportedBy(java.time.temporal.Temporal)>","<java.time.temporal.ChronoUnit: boolean isSupportedBy(java.time.temporal.Temporal)>"
"<android.app.ActionBar: java.lang.CharSequence getTitle()>","<android.app.ActionBar: java.lang.CharSequence getTitle()>"
"<android.net.IpSecAlgorithm: java.lang.String getName()>","<android.net.IpSecAlgorithm: java.lang.String getName()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithFilePath(java.lang.String)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithFilePath(java.lang.String)>"
"<javax.security.auth.Subject: java.lang.String toString()>","<javax.security.auth.Subject: java.lang.String toString()>"
"<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>","<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>"
"<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>","<java.lang.Class: java.lang.reflect.Constructor getEnclosingConstructor()>"
"<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>","<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.Object)>"
"<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>","<java.nio.channels.FileChannel: long transferTo(long,long,java.nio.channels.WritableByteChannel)>"
"<android.content.pm.InstallSourceInfo: int describeContents()>","<android.content.pm.InstallSourceInfo: int describeContents()>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)>"
"<android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()>","<android.telephony.data.ApnSetting: java.lang.String getProxyAddressAsString()>"
"<android.media.AudioManager: boolean isHapticPlaybackSupported()>","<android.media.AudioManager: boolean isHapticPlaybackSupported()>"
"<java.util.stream.DoubleStream: long count()>","<java.util.stream.DoubleStream: long count()>"
"<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)>","<android.widget.TextView: void setSpannableFactory(android.text.Spannable$Factory)>"
"<android.app.Activity: boolean isFinishing()>","<android.app.Activity: boolean isFinishing()>"
"<java.lang.StringBuffer: void ensureCapacity(int)>","<java.lang.StringBuffer: void ensureCapacity(int)>"
"<android.media.VolumeShaper$Configuration$Builder: void <init>()>","<android.media.VolumeShaper$Configuration$Builder: void <init>()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.Class lookupClass()>","<java.lang.invoke.MethodHandles$Lookup: java.lang.Class lookupClass()>"
"<java.security.PermissionCollection: void <init>()>","<java.security.PermissionCollection: void <init>()>"
"<android.net.Uri: java.lang.String decode(java.lang.String)>","<android.net.Uri: java.lang.String decode(java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clearExtensions()>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clearExtensions()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIcon(android.graphics.drawable.Drawable)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIcon(android.graphics.drawable.Drawable)>"
"<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>","<org.xmlpull.v1.XmlPullParser: int getNamespaceCount(int)>"
"<android.content.pm.PackageItemInfo: void <init>()>","<android.content.pm.PackageItemInfo: void <init>()>"
"<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>","<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>"
"<java.lang.Throwable: java.lang.String getLocalizedMessage()>","<java.lang.Throwable: java.lang.String getLocalizedMessage()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultDataSpace(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultDataSpace(int)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer duplicate()>","<java.nio.ShortBuffer: java.nio.ShortBuffer duplicate()>"
"<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>","<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>"
"<android.app.ActivityManager: void setProcessStateSummary(byte[])>","<android.app.ActivityManager: void setProcessStateSummary(byte[])>"
"<java.lang.NegativeArraySizeException: void <init>()>","<java.lang.NegativeArraySizeException: void <init>()>"
"<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>","<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>"
"<android.media.MediaPlayer$TrackInfo: void writeToParcel(android.os.Parcel,int)>","<android.media.MediaPlayer$TrackInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ViewGroup: void setTransitionGroup(boolean)>","<android.view.ViewGroup: void setTransitionGroup(boolean)>"
"<java.lang.String: void <init>(byte[],int)>","<java.lang.String: void <init>(byte[],int)>"
"<android.media.AudioTrack: int write(short[],int,int)>","<android.media.AudioTrack: int write(short[],int,int)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>","<android.hardware.Camera$Parameters: java.util.List getSupportedAntibanding()>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>","<java.nio.IntBuffer: java.nio.IntBuffer put(int,int)>"
"<android.graphics.drawable.ColorDrawable: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.ColorDrawable: void setTintList(android.content.res.ColorStateList)>"
"<android.media.AudioTrack: int write(byte[],int,int)>","<android.media.AudioTrack: int write(byte[],int,int)>"
"<android.content.SyncAdapterType: void <clinit>()>","<android.content.SyncAdapterType: void <clinit>()>"
"<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>","<android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)>"
"<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener)>","<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener)>"
"<java.util.Collections: java.util.Comparator reverseOrder()>","<java.util.Collections: java.util.Comparator reverseOrder()>"
"<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>","<java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>"
"<android.graphics.Rect: void <init>()>","<android.graphics.Rect: void <init>()>"
"<android.graphics.Canvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>","<android.graphics.Canvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>"
"<android.view.ViewParent: void focusableViewAvailable(android.view.View)>","<android.view.ViewParent: void focusableViewAvailable(android.view.View)>"
"<android.widget.Toolbar: void setCollapseContentDescription(int)>","<android.widget.Toolbar: void setCollapseContentDescription(int)>"
"<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>","<android.widget.AbsListView: void setRemoteViewsAdapter(android.content.Intent)>"
"<android.util.SparseArray: int keyAt(int)>","<android.util.SparseArray: int keyAt(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream flatMap(java.util.function.DoubleFunction)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream flatMap(java.util.function.DoubleFunction)>"
"<android.content.OperationApplicationException: void <init>(java.lang.String)>","<android.content.OperationApplicationException: void <init>(java.lang.String)>"
"<android.graphics.NinePatch: int getHeight()>","<android.graphics.NinePatch: int getHeight()>"
"<android.graphics.Matrix: void setRotate(float,float,float)>","<android.graphics.Matrix: void setRotate(float,float,float)>"
"<android.app.Activity: void setShowWhenLocked(boolean)>","<android.app.Activity: void setShowWhenLocked(boolean)>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerTop()>"
"<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>","<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>"
"<java.time.Month: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.Month: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.widget.AbsListView: boolean isPaddingOffsetRequired()>","<android.widget.AbsListView: boolean isPaddingOffsetRequired()>"
"<android.app.FragmentManager: boolean popBackStackImmediate()>","<android.app.FragmentManager: boolean popBackStackImmediate()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)>"
"<android.media.AudioTrack: void addOnCodecFormatChangedListener(java.util.concurrent.Executor,android.media.AudioTrack$OnCodecFormatChangedListener)>","<android.media.AudioTrack: void addOnCodecFormatChangedListener(java.util.concurrent.Executor,android.media.AudioTrack$OnCodecFormatChangedListener)>"
"<java.lang.Math: float min(float,float)>","<java.lang.Math: float min(float,float)>"
"<android.widget.AbsListView: void setSelectionFromTop(int,int)>","<android.widget.AbsListView: void setSelectionFromTop(int,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction detach(android.app.Fragment)>"
"<android.text.PrecomputedText$Params$Builder: void <init>(android.text.PrecomputedText$Params)>","<android.text.PrecomputedText$Params$Builder: void <init>(android.text.PrecomputedText$Params)>"
"<java.lang.StringBuilder: void setLength(int)>","<java.lang.StringBuilder: void setLength(int)>"
"<android.app.PictureInPictureParams: java.lang.CharSequence getTitle()>","<android.app.PictureInPictureParams: java.lang.CharSequence getTitle()>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String[] getEntityTypes()>"
"<java.net.Socket: void <init>(java.lang.String,int,boolean)>","<java.net.Socket: void <init>(java.lang.String,int,boolean)>"
"<java.security.AccessControlException: java.security.Permission getPermission()>","<java.security.AccessControlException: java.security.Permission getPermission()>"
"<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>","<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>"
"<android.graphics.ColorSpace$Rgb: float[] getPrimaries(float[])>","<android.graphics.ColorSpace$Rgb: float[] getPrimaries(float[])>"
"<android.hardware.display.VirtualDisplay: void <init>()>","<android.hardware.display.VirtualDisplay: void <init>()>"
"<android.media.AudioDeviceCallback: void onAudioDevicesAdded(android.media.AudioDeviceInfo[])>","<android.media.AudioDeviceCallback: void onAudioDevicesAdded(android.media.AudioDeviceInfo[])>"
"<android.telephony.TelephonyCallback$UserMobileDataStateListener: void onUserMobileDataStateChanged(boolean)>","<android.telephony.TelephonyCallback$UserMobileDataStateListener: void onUserMobileDataStateChanged(boolean)>"
"<android.view.KeyEvent: boolean isScrollLockOn()>","<android.view.KeyEvent: boolean isScrollLockOn()>"
"<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>","<java.net.DatagramSocketImpl: int peekData(java.net.DatagramPacket)>"
"<android.graphics.Bitmap: int getScaledHeight(int)>","<android.graphics.Bitmap: int getScaledHeight(int)>"
"<android.graphics.Rect: int centerY()>","<android.graphics.Rect: int centerY()>"
"<android.app.PendingIntent: java.lang.String getCreatorPackage()>","<android.app.PendingIntent: java.lang.String getCreatorPackage()>"
"<android.hardware.Sensor: int getFifoMaxEventCount()>","<android.hardware.Sensor: int getFifoMaxEventCount()>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>"
"<android.view.InputDevice$MotionRange: float getRange()>","<android.view.InputDevice$MotionRange: float getRange()>"
"<android.content.ContentProvider: int delete(android.net.Uri,android.os.Bundle)>","<android.content.ContentProvider: int delete(android.net.Uri,android.os.Bundle)>"
"<android.media.session.MediaSession$Callback: boolean onMediaButtonEvent(android.content.Intent)>","<android.media.session.MediaSession$Callback: boolean onMediaButtonEvent(android.content.Intent)>"
"<java.util.Arrays: boolean equals(int[],int,int,int[],int,int)>","<java.util.Arrays: boolean equals(int[],int,int,int[],int,int)>"
"<java.net.InetAddress: java.lang.String getHostName()>","<java.net.InetAddress: java.lang.String getHostName()>"
"<java.net.Socket: java.lang.String toString()>","<java.net.Socket: java.lang.String toString()>"
"<java.util.ArrayList: java.util.List subList(int,int)>","<java.util.ArrayList: java.util.List subList(int,int)>"
"<java.time.ZoneId: java.time.ZoneId 'from'(java.time.temporal.TemporalAccessor)>","<java.time.ZoneId: java.time.ZoneId 'from'(java.time.temporal.TemporalAccessor)>"
"<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>","<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)>"
"<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()>","<android.media.session.MediaController: android.media.session.MediaController$TransportControls getTransportControls()>"
"<android.text.InputFilter$LengthFilter: void <init>(int)>","<android.text.InputFilter$LengthFilter: void <init>(int)>"
"<android.app.ActivityManager: void appNotResponding(java.lang.String)>","<android.app.ActivityManager: void appNotResponding(java.lang.String)>"
"<android.view.View: void postInvalidateOnAnimation()>","<android.view.View: void postInvalidateOnAnimation()>"
"<android.telephony.TelephonyManager: int getSupportedModemCount()>","<android.telephony.TelephonyManager: int getSupportedModemCount()>"
"<java.lang.Integer: java.lang.Integer valueOf(int)>","<java.lang.Integer: java.lang.Integer valueOf(int)>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace match(float[],android.graphics.ColorSpace$Rgb$TransferParameters)>","<android.graphics.ColorSpace: android.graphics.ColorSpace match(float[],android.graphics.ColorSpace$Rgb$TransferParameters)>"
"<android.widget.MediaController$MediaPlayerControl: int getDuration()>","<android.widget.MediaController$MediaPlayerControl: int getDuration()>"
"<java.lang.Math: void <init>()>","<java.lang.Math: void <init>()>"
"<java.time.chrono.Era: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.chrono.Era: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<java.time.Period: int getYears()>","<java.time.Period: int getYears()>"
"<android.util.LongSparseArray: void removeAt(int)>","<android.util.LongSparseArray: void removeAt(int)>"
"<android.graphics.Insets: void <init>()>","<android.graphics.Insets: void <init>()>"
"<android.widget.RemoteViews: void setViewOutlinePreferredRadiusDimen(int,int)>","<android.widget.RemoteViews: void setViewOutlinePreferredRadiusDimen(int,int)>"
"<android.view.KeyEvent: java.lang.String keyCodeToString(int)>","<android.view.KeyEvent: java.lang.String keyCodeToString(int)>"
"<java.time.LocalDate: java.time.chrono.Era getEra()>","<java.time.LocalDate: java.time.chrono.Era getEra()>"
"<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse addSharedElement(int,java.lang.String)>","<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse addSharedElement(int,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.OffsetDateTime toOffsetDateTime()>","<java.time.ZonedDateTime: java.time.OffsetDateTime toOffsetDateTime()>"
"<android.view.View: int getId()>","<android.view.View: int getId()>"
"<android.content.IntentFilter: java.lang.String getDataScheme(int)>","<android.content.IntentFilter: java.lang.String getDataScheme(int)>"
"<android.view.Window: android.transition.Transition getExitTransition()>","<android.view.Window: android.transition.Transition getExitTransition()>"
"<java.util.HashMap: java.util.Set entrySet()>","<java.util.HashMap: java.util.Set entrySet()>"
"<android.widget.TextView: void setLinksClickable(boolean)>","<android.widget.TextView: void setLinksClickable(boolean)>"
"<android.util.DisplayMetrics: int hashCode()>","<android.util.DisplayMetrics: int hashCode()>"
"<android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>","<android.widget.TextView: void setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)>"
"<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>","<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>"
"<android.media.audiofx.AudioEffect$OnControlStatusChangeListener: void onControlStatusChange(android.media.audiofx.AudioEffect,boolean)>","<android.media.audiofx.AudioEffect$OnControlStatusChangeListener: void onControlStatusChange(android.media.audiofx.AudioEffect,boolean)>"
"<android.widget.TextView: boolean getFreezesText()>","<android.widget.TextView: boolean getFreezesText()>"
"<android.content.pm.InstrumentationInfo: void <init>()>","<android.content.pm.InstrumentationInfo: void <init>()>"
"<java.nio.DoubleBuffer: double get(int)>","<java.nio.DoubleBuffer: double get(int)>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>","<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>"
"<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>","<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>"
"<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>","<android.content.SharedPreferences: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>"
"<java.lang.Character: boolean isAlphabetic(int)>","<java.lang.Character: boolean isAlphabetic(int)>"
"<android.os.PersistableBundle: void <init>(int)>","<android.os.PersistableBundle: void <init>(int)>"
"<android.widget.TextView$BufferType: void <clinit>()>","<android.widget.TextView$BufferType: void <clinit>()>"
"<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>","<android.widget.AbsListView: void setFastScrollAlwaysVisible(boolean)>"
"<java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>","<java.util.Collections: java.util.Queue asLifoQueue(java.util.Deque)>"
"<android.net.NetworkCapabilities: boolean hasCapability(int)>","<android.net.NetworkCapabilities: boolean hasCapability(int)>"
"<android.util.SparseBooleanArray: boolean valueAt(int)>","<android.util.SparseBooleanArray: boolean valueAt(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)>"
"<java.net.ServerSocket: java.lang.String toString()>","<java.net.ServerSocket: java.lang.String toString()>"
"<java.util.OptionalInt: java.lang.String toString()>","<java.util.OptionalInt: java.lang.String toString()>"
"<android.view.SurfaceControl: void <clinit>()>","<android.view.SurfaceControl: void <clinit>()>"
"<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>","<android.content.Context: android.graphics.drawable.Drawable peekWallpaper()>"
"<android.media.session.MediaSession: boolean isActive()>","<android.media.session.MediaSession: boolean isActive()>"
"<android.view.textclassifier.TextSelection$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextSelection$Request: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>","<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>"
"<android.content.pm.VersionedPackage: int hashCode()>","<android.content.pm.VersionedPackage: int hashCode()>"
"<android.database.Cursor: android.net.Uri getNotificationUri()>","<android.database.Cursor: android.net.Uri getNotificationUri()>"
"<android.media.AudioManager$AudioPlaybackCallback: void onPlaybackConfigChanged(java.util.List)>","<android.media.AudioManager$AudioPlaybackCallback: void onPlaybackConfigChanged(java.util.List)>"
"<android.content.SharedPreferences$Editor: void apply()>","<android.content.SharedPreferences$Editor: void apply()>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface build()>","<android.graphics.Typeface$Builder: android.graphics.Typeface build()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int,boolean)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType genericMethodType(int,boolean)>"
"<android.app.Fragment: void onLowMemory()>","<android.app.Fragment: void onLowMemory()>"
"<android.media.session.MediaController: android.os.Bundle getSessionInfo()>","<android.media.session.MediaController: android.os.Bundle getSessionInfo()>"
"<java.lang.Character: boolean isLetterOrDigit(char)>","<java.lang.Character: boolean isLetterOrDigit(char)>"
"<java.lang.InternalError: void <init>()>","<java.lang.InternalError: void <init>()>"
"<android.hardware.Camera$Parameters: void setRecordingHint(boolean)>","<android.hardware.Camera$Parameters: void setRecordingHint(boolean)>"
"<java.util.Optional: java.lang.Object orElse(java.lang.Object)>","<java.util.Optional: java.lang.Object orElse(java.lang.Object)>"
"<java.lang.invoke.MethodType: int parameterCount()>","<java.lang.invoke.MethodType: int parameterCount()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findSpecial(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findSpecial(java.lang.Class,java.lang.String,java.lang.invoke.MethodType,java.lang.Class)>"
"<java.security.cert.CertificateEncodingException: void <init>(java.lang.Throwable)>","<java.security.cert.CertificateEncodingException: void <init>(java.lang.Throwable)>"
"<java.time.chrono.Chronology: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.chrono.Chronology: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>","<android.os.Parcel: android.os.PersistableBundle readPersistableBundle()>"
"<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>","<android.app.TaskStackBuilder: android.content.Intent editIntentAt(int)>"
"<java.util.Hashtable: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Hashtable: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.app.TaskStackBuilder: int getIntentCount()>","<android.app.TaskStackBuilder: int getIntentCount()>"
"<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>","<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>"
"<java.time.ZonedDateTime: int hashCode()>","<java.time.ZonedDateTime: int hashCode()>"
"<java.lang.InterruptedException: void <init>(java.lang.String)>","<java.lang.InterruptedException: void <init>(java.lang.String)>"
"<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar: android.widget.Toolbar$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.content.res.Resources: float getDimension(int)>","<android.content.res.Resources: float getDimension(int)>"
"<android.view.ViewStructure: void setTextLines(int[],int[])>","<android.view.ViewStructure: void setTextLines(int[],int[])>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType erase()>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType erase()>"
"<javax.security.auth.Subject: void setReadOnly()>","<javax.security.auth.Subject: void setReadOnly()>"
"<java.nio.Buffer: boolean hasArray()>","<java.nio.Buffer: boolean hasArray()>"
"<android.icu.util.ULocale: java.lang.String[] getISOLanguages()>","<android.icu.util.ULocale: java.lang.String[] getISOLanguages()>"
"<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>","<android.view.PixelCopy: void request(android.view.SurfaceView,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>"
"<android.os.Parcel: void unmarshall(byte[],int,int)>","<android.os.Parcel: void unmarshall(byte[],int,int)>"
"<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>"
"<android.view.Window: void setDimAmount(float)>","<android.view.Window: void setDimAmount(float)>"
"<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>","<android.media.PlaybackParams: android.media.PlaybackParams setPitch(float)>"
"<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>","<android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>"
"<android.view.ActionMode$Callback2: void <init>()>","<android.view.ActionMode$Callback2: void <init>()>"
"<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>","<android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)>"
"<android.media.Session2Token: java.lang.String getServiceName()>","<android.media.Session2Token: java.lang.String getServiceName()>"
"<android.view.DisplayCutout$Builder: void <init>()>","<android.view.DisplayCutout$Builder: void <init>()>"
"<android.view.ActionMode: void setSubtitle(int)>","<android.view.ActionMode: void setSubtitle(int)>"
"<android.app.PictureInPictureParams$Builder: void <init>(android.app.PictureInPictureParams)>","<android.app.PictureInPictureParams$Builder: void <init>(android.app.PictureInPictureParams)>"
"<android.animation.ValueAnimator: void setStartDelay(long)>","<android.animation.ValueAnimator: void setStartDelay(long)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>","<java.nio.charset.CharsetDecoder: java.nio.charset.Charset detectedCharset()>"
"<java.util.HashSet: java.lang.Object clone()>","<java.util.HashSet: java.lang.Object clone()>"
"<android.content.pm.PackageManager: void getPlatformPermissionsForGroup(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>","<android.content.pm.PackageManager: void getPlatformPermissionsForGroup(java.lang.String,java.util.concurrent.Executor,java.util.function.Consumer)>"
"<java.util.List: java.util.List copyOf(java.util.Collection)>","<java.util.List: java.util.List copyOf(java.util.Collection)>"
"<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>","<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
"<java.lang.Class: java.lang.Class forName(java.lang.String)>","<java.lang.Class: java.lang.Class forName(java.lang.String)>"
"<java.lang.Thread: void setName(java.lang.String)>","<java.lang.Thread: void setName(java.lang.String)>"
"<java.util.Arrays: java.lang.String toString(byte[])>","<java.util.Arrays: java.lang.String toString(byte[])>"
"<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<java.util.stream.IntStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)>","<java.util.stream.IntStream: java.lang.Object collect(java.util.function.Supplier,java.util.function.ObjIntConsumer,java.util.function.BiConsumer)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
"<android.util.ArrayMap: void ensureCapacity(int)>","<android.util.ArrayMap: void ensureCapacity(int)>"
"<android.media.ImageReader$OnImageAvailableListener: void onImageAvailable(android.media.ImageReader)>","<android.media.ImageReader$OnImageAvailableListener: void onImageAvailable(android.media.ImageReader)>"
"<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>","<android.app.ActivityManager$AppTask: android.app.ActivityManager$RecentTaskInfo getTaskInfo()>"
"<android.content.ContextWrapper: boolean isUiContext()>","<android.content.ContextWrapper: boolean isUiContext()>"
"<android.media.AudioTrack: boolean setPreferredDevice(android.media.AudioDeviceInfo)>","<android.media.AudioTrack: boolean setPreferredDevice(android.media.AudioDeviceInfo)>"
"<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>","<java.net.URLStreamHandler: boolean hostsEqual(java.net.URL,java.net.URL)>"
"<java.time.Clock: java.time.Clock offset(java.time.Clock,java.time.Duration)>","<java.time.Clock: java.time.Clock offset(java.time.Clock,java.time.Duration)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>","<android.content.pm.PackageInstaller$SessionInfo: int getSessionId()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>","<java.nio.charset.CharsetEncoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>"
"<java.lang.Exception: void <init>(java.lang.String)>","<java.lang.Exception: void <init>(java.lang.String)>"
"<android.app.VoiceInteractor: java.lang.String getPackageName()>","<android.app.VoiceInteractor: java.lang.String getPackageName()>"
"<android.graphics.Bitmap: int describeContents()>","<android.graphics.Bitmap: int describeContents()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)>"
"<android.telephony.TelephonyScanManager$NetworkScanCallback: void onComplete()>","<android.telephony.TelephonyScanManager$NetworkScanCallback: void onComplete()>"
"<android.widget.RemoteViews: void setBlendMode(int,java.lang.String,android.graphics.BlendMode)>","<android.widget.RemoteViews: void setBlendMode(int,java.lang.String,android.graphics.BlendMode)>"
"<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoList()>","<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoList()>"
"<android.content.pm.PackageManager$ApplicationInfoFlags: long getValue()>","<android.content.pm.PackageManager$ApplicationInfoFlags: long getValue()>"
"<android.graphics.Canvas: int getSaveCount()>","<android.graphics.Canvas: int getSaveCount()>"
"<android.app.Dialog: void openContextMenu(android.view.View)>","<android.app.Dialog: void openContextMenu(android.view.View)>"
"<android.text.Layout: float getLineMax(int)>","<android.text.Layout: float getLineMax(int)>"
"<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>","<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>"
"<android.view.Window: void setFormat(int)>","<android.view.Window: void setFormat(int)>"
"<android.telephony.BarringInfo$BarringServiceInfo: boolean equals(java.lang.Object)>","<android.telephony.BarringInfo$BarringServiceInfo: boolean equals(java.lang.Object)>"
"<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.lang.Package: java.lang.String getSpecificationVendor()>","<java.lang.Package: java.lang.String getSpecificationVendor()>"
"<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>","<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>"
"<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>","<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>"
"<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>","<android.widget.AbsListView: void setSelector(android.graphics.drawable.Drawable)>"
"<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getUpperBound()>","<android.view.WindowInsetsAnimation$Bounds: android.graphics.Insets getUpperBound()>"
"<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>","<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>"
"<android.view.accessibility.AccessibilityWindowInfo: void getRegionInScreen(android.graphics.Region)>","<android.view.accessibility.AccessibilityWindowInfo: void getRegionInScreen(android.graphics.Region)>"
"<android.view.animation.Transformation: float getAlpha()>","<android.view.animation.Transformation: float getAlpha()>"
"<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)>","<android.view.SubMenu: android.view.SubMenu setHeaderView(android.view.View)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(int,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
"<java.lang.String: java.lang.String valueOf(long)>","<java.lang.String: java.lang.String valueOf(long)>"
"<java.util.Arrays: int binarySearch(long[],int,int,long)>","<java.util.Arrays: int binarySearch(long[],int,int,long)>"
"<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>","<java.net.DatagramSocket: void connect(java.net.InetAddress,int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getRowIndex()>"
"<android.content.SharedPreferences: boolean contains(java.lang.String)>","<android.content.SharedPreferences: boolean contains(java.lang.String)>"
"<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>","<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>"
"<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withLaterOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.ZonedDateTime withLaterOffsetAtOverlap()>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>"
"<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>","<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>"
"<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>","<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.ZonedDateTime: java.time.ZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>"
"<java.util.List: void replaceAll(java.util.function.UnaryOperator)>","<java.util.List: void replaceAll(java.util.function.UnaryOperator)>"
"<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>","<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>"
"<java.util.Arrays: java.lang.String toString(long[])>","<java.util.Arrays: java.lang.String toString(long[])>"
"<android.view.View: void setOnContextClickListener(android.view.View$OnContextClickListener)>","<android.view.View: void setOnContextClickListener(android.view.View$OnContextClickListener)>"
"<java.net.DatagramSocketImpl: void <init>()>","<java.net.DatagramSocketImpl: void <init>()>"
"<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>","<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>"
"<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>","<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>"
"<android.hardware.BatteryState: boolean isPresent()>","<android.hardware.BatteryState: boolean isPresent()>"
"<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>","<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>"
"<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey block(java.net.InetAddress)>","<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey block(java.net.InetAddress)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewCreated(android.app.FragmentManager,android.app.Fragment,android.view.View,android.os.Bundle)>"
"<android.view.View: void setY(float)>","<android.view.View: void setY(float)>"
"<android.app.ActivityManager$AppTask: void finishAndRemoveTask()>","<android.app.ActivityManager$AppTask: void finishAndRemoveTask()>"
"<java.lang.Deprecated: java.lang.String since()>","<java.lang.Deprecated: java.lang.String since()>"
"<java.time.ZonedDateTime: java.time.ZoneId getZone()>","<java.time.ZonedDateTime: java.time.ZoneId getZone()>"
"<java.net.Socket: void setSoTimeout(int)>","<java.net.Socket: void setSoTimeout(int)>"
"<android.view.ViewGroup: java.lang.CharSequence getAccessibilityClassName()>","<android.view.ViewGroup: java.lang.CharSequence getAccessibilityClassName()>"
"<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,android.os.Parcelable$Creator,int[])>","<android.os.Parcel: java.lang.Object createFixedArray(java.lang.Class,android.os.Parcelable$Creator,int[])>"
"<android.net.IpSecManager: void applyTransportModeTransform(java.net.Socket,int,android.net.IpSecTransform)>","<android.net.IpSecManager: void applyTransportModeTransform(java.net.Socket,int,android.net.IpSecTransform)>"
"<java.util.stream.LongStream: java.util.stream.LongStream sequential()>","<java.util.stream.LongStream: java.util.stream.LongStream sequential()>"
"<java.net.Socket: int getSoTimeout()>","<java.net.Socket: int getSoTimeout()>"
"<android.view.View: void setSelected(boolean)>","<android.view.View: void setSelected(boolean)>"
"<android.hardware.Camera$Parameters: void setGpsLatitude(double)>","<android.hardware.Camera$Parameters: void setGpsLatitude(double)>"
"<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)>","<java.util.concurrent.TimeUnit: void timedWait(java.lang.Object,long)>"
"<android.graphics.fonts.FontVariationAxis: boolean equals(java.lang.Object)>","<android.graphics.fonts.FontVariationAxis: boolean equals(java.lang.Object)>"
"<android.hardware.camera2.params.OutputConfiguration: void addSensorPixelModeUsed(int)>","<android.hardware.camera2.params.OutputConfiguration: void addSensorPixelModeUsed(int)>"
"<android.app.ActionBar: void setTitle(int)>","<android.app.ActionBar: void setTitle(int)>"
"<java.time.Duration: int toNanosPart()>","<java.time.Duration: int toNanosPart()>"
"<android.net.RouteInfo: java.lang.String toString()>","<android.net.RouteInfo: java.lang.String toString()>"
"<android.content.ContentValues: java.lang.String toString()>","<android.content.ContentValues: java.lang.String toString()>"
"<android.view.MotionEvent: float getHistoricalSize(int)>","<android.view.MotionEvent: float getHistoricalSize(int)>"
"<java.util.UUID: int hashCode()>","<java.util.UUID: int hashCode()>"
"<android.app.Activity: void finishAfterTransition()>","<android.app.Activity: void finishAfterTransition()>"
"<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>","<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,boolean)>"
"<android.content.pm.PackageManager$ComponentInfoFlags: long getValue()>","<android.content.pm.PackageManager$ComponentInfoFlags: long getValue()>"
"<android.view.Display$Mode: int hashCode()>","<android.view.Display$Mode: int hashCode()>"
"<android.graphics.Path: void addArc(float,float,float,float,float,float)>","<android.graphics.Path: void addArc(float,float,float,float,float,float)>"
"<android.view.Menu: boolean performIdentifierAction(int,int)>","<android.view.Menu: boolean performIdentifierAction(int,int)>"
"<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>","<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>"
"<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>","<java.nio.LongBuffer: java.nio.LongBuffer wrap(long[])>"
"<android.net.LinkProperties: void setDhcpServerAddress(java.net.Inet4Address)>","<android.net.LinkProperties: void setDhcpServerAddress(java.net.Inet4Address)>"
"<android.view.KeyEvent: boolean isLongPress()>","<android.view.KeyEvent: boolean isLongPress()>"
"<android.view.View: void setScrollIndicators(int)>","<android.view.View: void setScrollIndicators(int)>"
"<android.media.MediaPlayer: void restoreKeys(byte[])>","<android.media.MediaPlayer: void restoreKeys(byte[])>"
"<java.lang.Character: int compareTo(java.lang.Character)>","<java.lang.Character: int compareTo(java.lang.Character)>"
"<android.media.session.PlaybackState$CustomAction: int getIcon()>","<android.media.session.PlaybackState$CustomAction: int getIcon()>"
"<android.telephony.TelephonyManager$NetworkSlicingException: void <init>()>","<android.telephony.TelephonyManager$NetworkSlicingException: void <init>()>"
"<android.content.pm.ApplicationInfo: void <clinit>()>","<android.content.pm.ApplicationInfo: void <clinit>()>"
"<android.view.ViewStructure: android.view.ViewStructure asyncNewChild(int)>","<android.view.ViewStructure: android.view.ViewStructure asyncNewChild(int)>"
"<java.net.SocketOption: java.lang.Class type()>","<java.net.SocketOption: java.lang.Class type()>"
"<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()>","<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()>"
"<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>","<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback)>"
"<android.icu.util.ULocale: java.lang.String toString()>","<android.icu.util.ULocale: java.lang.String toString()>"
"<java.util.stream.DoubleStream: double reduce(double,java.util.function.DoubleBinaryOperator)>","<java.util.stream.DoubleStream: double reduce(double,java.util.function.DoubleBinaryOperator)>"
"<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalField,long)>","<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.reflect.Executable: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Executable: java.lang.Class getDeclaringClass()>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextClassification)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionModifiedEvent(int,int,android.view.textclassifier.TextClassification)>"
"<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>","<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>"
"<android.os.VibrationAttributes: void writeToParcel(android.os.Parcel,int)>","<android.os.VibrationAttributes: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>","<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)>"
"<android.hardware.camera2.CaptureResult: void <init>()>","<android.hardware.camera2.CaptureResult: void <init>()>"
"<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>","<android.hardware.camera2.CameraDevice: void createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder includeTypesFromTextClassifier(boolean)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder includeTypesFromTextClassifier(boolean)>"
"<android.os.Parcel: byte readByte()>","<android.os.Parcel: byte readByte()>"
"<android.widget.RelativeLayout: void requestLayout()>","<android.widget.RelativeLayout: void requestLayout()>"
"<android.transition.PathMotion: void <init>(android.content.Context,android.util.AttributeSet)>","<android.transition.PathMotion: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<java.time.Duration: long toMillis()>","<java.time.Duration: long toMillis()>"
"<java.util.Comparator: java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction)>","<java.util.Comparator: java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction)>"
"<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeType(int)>"
"<android.graphics.RecordingCanvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>"
"<android.view.SurfaceControlViewHost: void setView(android.view.View,int,int)>","<android.view.SurfaceControlViewHost: void setView(android.view.View,int,int)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.graphics.Paint$Cap: void <clinit>()>","<android.graphics.Paint$Cap: void <clinit>()>"
"<android.content.ClipData: void <clinit>()>","<android.content.ClipData: void <clinit>()>"
"<android.media.AudioDeviceInfo: void <init>()>","<android.media.AudioDeviceInfo: void <init>()>"
"<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>"
"<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<android.media.MediaPlayer: int getCurrentPosition()>","<android.media.MediaPlayer: int getCurrentPosition()>"
"<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>","<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>"
"<android.app.FragmentManager: void enableDebugLogging(boolean)>","<android.app.FragmentManager: void enableDebugLogging(boolean)>"
"<android.view.Window: void setDefaultWindowFormat(int)>","<android.view.Window: void setDefaultWindowFormat(int)>"
"<android.content.pm.PackageInstaller$SessionInfo: void <init>()>","<android.content.pm.PackageInstaller$SessionInfo: void <init>()>"
"<android.view.View: int getSuggestedMinimumWidth()>","<android.view.View: int getSuggestedMinimumWidth()>"
"<android.telephony.SignalStrengthUpdateRequest: void writeToParcel(android.os.Parcel,int)>","<android.telephony.SignalStrengthUpdateRequest: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageInfo: long getLongVersionCode()>","<android.content.pm.PackageInfo: long getLongVersionCode()>"
"<android.content.Intent: int getFlags()>","<android.content.Intent: int getFlags()>"
"<android.content.res.AssetFileDescriptor: long getDeclaredLength()>","<android.content.res.AssetFileDescriptor: long getDeclaredLength()>"
"<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>","<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>"
"<android.content.pm.PackageManager$Property: boolean getBoolean()>","<android.content.pm.PackageManager$Property: boolean getBoolean()>"
"<android.content.Intent: android.os.Bundle getExtras()>","<android.content.Intent: android.os.Bundle getExtras()>"
"<android.media.NotProvisionedException: void <init>(java.lang.String)>","<android.media.NotProvisionedException: void <init>(java.lang.String)>"
"<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator$OfInt: boolean tryAdvance(java.util.function.Consumer)>"
"<android.widget.AbsListView: android.view.View getSelectedView()>","<android.widget.AbsListView: android.view.View getSelectedView()>"
"<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>","<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>"
"<java.util.stream.LongStream: java.util.OptionalLong min()>","<java.util.stream.LongStream: java.util.OptionalLong min()>"
"<java.time.Period: int getDays()>","<java.time.Period: int getDays()>"
"<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>","<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>"
"<android.media.AudioManager: int getVibrateSetting(int)>","<android.media.AudioManager: int getVibrateSetting(int)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getRequireUserAction()>","<android.content.pm.PackageInstaller$SessionInfo: int getRequireUserAction()>"
"<android.view.textclassifier.TextLinks$TextLink: void <init>()>","<android.view.textclassifier.TextLinks$TextLink: void <init>()>"
"<android.media.session.MediaSession$Callback: void onStop()>","<android.media.session.MediaSession$Callback: void onStop()>"
"<android.graphics.drawable.ColorDrawable: void setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.ColorDrawable: void setTintBlendMode(android.graphics.BlendMode)>"
"<android.hardware.SensorManager: void <init>()>","<android.hardware.SensorManager: void <init>()>"
"<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>","<android.hardware.camera2.params.StreamConfigurationMap: boolean isOutputSupportedFor(java.lang.Class)>"
"<android.os.Parcel: void readCharArray(char[])>","<android.os.Parcel: void readCharArray(char[])>"
"<java.util.Locale: java.util.Set getExtensionKeys()>","<java.util.Locale: java.util.Set getExtensionKeys()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>"
"<android.graphics.Matrix: boolean preSkew(float,float)>","<android.graphics.Matrix: boolean preSkew(float,float)>"
"<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>","<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>"
"<java.lang.LinkageError: void <init>()>","<java.lang.LinkageError: void <init>()>"
"<android.view.View: java.lang.Object getTag()>","<android.view.View: java.lang.Object getTag()>"
"<android.hardware.Camera$Parameters: boolean isVideoSnapshotSupported()>","<android.hardware.Camera$Parameters: boolean isVideoSnapshotSupported()>"
"<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader,java.lang.Class)>"
"<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>","<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>"
"<android.view.View: int getFocusable()>","<android.view.View: int getFocusable()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setLanguageTag(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setLanguageTag(java.lang.String)>"
"<android.media.session.MediaSession: void setQueue(java.util.List)>","<android.media.session.MediaSession: void setQueue(java.util.List)>"
"<android.media.VolumeShaper$Configuration: int describeContents()>","<android.media.VolumeShaper$Configuration: int describeContents()>"
"<android.widget.ListView: void <init>(android.content.Context)>","<android.widget.ListView: void <init>(android.content.Context)>"
"<android.view.translation.TranslationResponseValue: void <init>()>","<android.view.translation.TranslationResponseValue: void <init>()>"
"<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>","<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>"
"<android.view.KeyCharacterMap: int getKeyboardType()>","<android.view.KeyCharacterMap: int getKeyboardType()>"
"<android.media.audiofx.AudioEffect$OnEnableStatusChangeListener: void onEnableStatusChange(android.media.audiofx.AudioEffect,boolean)>","<android.media.audiofx.AudioEffect$OnEnableStatusChangeListener: void onEnableStatusChange(android.media.audiofx.AudioEffect,boolean)>"
"<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>","<android.view.Window: boolean performPanelShortcut(int,int,android.view.KeyEvent,int)>"
"<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void comment(java.lang.String)>"
"<android.view.SurfaceView: android.os.IBinder getHostToken()>","<android.view.SurfaceView: android.os.IBinder getHostToken()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>","<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction()>"
"<android.view.inputmethod.EditorBoundsInfo: void <init>()>","<android.view.inputmethod.EditorBoundsInfo: void <init>()>"
"<android.view.KeyCharacterMap$KeyData: void <init>()>","<android.view.KeyCharacterMap$KeyData: void <init>()>"
"<android.view.View: float getPivotX()>","<android.view.View: float getPivotX()>"
"<java.util.stream.IntStream: java.util.stream.IntStream sorted()>","<java.util.stream.IntStream: java.util.stream.IntStream sorted()>"
"<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>","<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>"
"<android.media.MediaDrm: void clearOnKeyStatusChangeListener()>","<android.media.MediaDrm: void clearOnKeyStatusChangeListener()>"
"<android.media.ImageReader: void close()>","<android.media.ImageReader: void close()>"
"<android.content.ContentProvider$CallingIdentity: void <init>(android.content.ContentProvider)>","<android.content.ContentProvider$CallingIdentity: void <init>(android.content.ContentProvider)>"
"<java.util.Arrays: void fill(float[],float)>","<java.util.Arrays: void fill(float[],float)>"
"<java.time.Month: java.time.Month minus(long)>","<java.time.Month: java.time.Month minus(long)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])>","<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])>"
"<android.media.AudioRecord: int read(short[],int,int,int)>","<android.media.AudioRecord: int read(short[],int,int,int)>"
"<java.util.Set: void clear()>","<java.util.Set: void clear()>"
"<android.net.NetworkInfo$DetailedState: void <clinit>()>","<android.net.NetworkInfo$DetailedState: void <clinit>()>"
"<android.view.WindowInsetsController: void setSystemBarsBehavior(int)>","<android.view.WindowInsetsController: void setSystemBarsBehavior(int)>"
"<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList,android.content.res.ColorStateList)>","<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList,android.content.res.ColorStateList)>"
"<java.nio.file.FileStore: long getBlockSize()>","<java.nio.file.FileStore: long getBlockSize()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.WindowManager: boolean isCrossWindowBlurEnabled()>","<android.view.WindowManager: boolean isCrossWindowBlurEnabled()>"
"<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()>","<android.hardware.display.DeviceProductInfo: java.lang.String getManufacturerPnpId()>"
"<java.util.Deque: boolean add(java.lang.Object)>","<java.util.Deque: boolean add(java.lang.Object)>"
"<android.icu.util.ULocale: java.lang.String canonicalize(java.lang.String)>","<android.icu.util.ULocale: java.lang.String canonicalize(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)>","<java.time.LocalDateTime: java.time.LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)>"
"<android.widget.MediaController: void setEnabled(boolean)>","<android.widget.MediaController: void setEnabled(boolean)>"
"<android.graphics.Paint$Join: android.graphics.Paint$Join[] values()>","<android.graphics.Paint$Join: android.graphics.Paint$Join[] values()>"
"<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()>","<android.view.inputmethod.CursorAnchorInfo: int getInsertionMarkerFlags()>"
"<android.content.ContentProvider: android.content.Context getContext()>","<android.content.ContentProvider: android.content.Context getContext()>"
"<android.hardware.display.DeviceProductInfo: int hashCode()>","<android.hardware.display.DeviceProductInfo: int hashCode()>"
"<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.chrono.Era,int,int,int)>"
"<android.content.ContextParams: void <init>()>","<android.content.ContextParams: void <init>()>"
"<java.net.Socket: int getSendBufferSize()>","<java.net.Socket: int getSendBufferSize()>"
"<android.window.OnBackInvokedCallback: void onBackInvoked()>","<android.window.OnBackInvokedCallback: void onBackInvoked()>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>"
"<android.graphics.Region: void setEmpty()>","<android.graphics.Region: void setEmpty()>"
"<java.security.cert.Certificate: void verify(java.security.PublicKey,java.security.Provider)>","<java.security.cert.Certificate: void verify(java.security.PublicKey,java.security.Provider)>"
"<android.media.MediaPlayer$TrackInfo: void <init>()>","<android.media.MediaPlayer$TrackInfo: void <init>()>"
"<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>","<java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>"
"<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>","<android.content.ContextWrapper: android.content.Context createConfigurationContext(android.content.res.Configuration)>"
"<android.text.style.URLSpan: void <init>(java.lang.String)>","<android.text.style.URLSpan: void <init>(java.lang.String)>"
"<android.graphics.Matrix: void setScale(float,float,float,float)>","<android.graphics.Matrix: void setScale(float,float,float,float)>"
"<android.view.inputmethod.InputMethodSubtype: void <clinit>()>","<android.view.inputmethod.InputMethodSubtype: void <clinit>()>"
"<android.graphics.Paint: void getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)>","<android.graphics.Paint: void getTextBounds(java.lang.CharSequence,int,int,android.graphics.Rect)>"
"<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>","<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>"
"<android.app.Fragment: void onDestroyView()>","<android.app.Fragment: void onDestroyView()>"
"<android.content.pm.PackageManager: java.lang.String[] getSystemSharedLibraryNames()>","<android.content.pm.PackageManager: java.lang.String[] getSystemSharedLibraryNames()>"
"<java.net.URI: boolean isAbsolute()>","<java.net.URI: boolean isAbsolute()>"
"<android.widget.TextView: int getMinHeight()>","<android.widget.TextView: int getMinHeight()>"
"<java.time.Instant: long getLong(java.time.temporal.TemporalField)>","<java.time.Instant: long getLong(java.time.temporal.TemporalField)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount)>"
"<java.util.ArrayList: void clear()>","<java.util.ArrayList: void clear()>"
"<java.lang.reflect.Executable: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.Executable: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.media.MediaDrm$LogMessage: java.lang.String getMessage()>","<android.media.MediaDrm$LogMessage: java.lang.String getMessage()>"
"<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)>","<android.media.PlaybackParams: android.media.PlaybackParams setAudioFallbackMode(int)>"
"<java.time.ZoneOffset: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.ZoneOffset: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>"
"<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>"
"<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float,float)>"
"<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>","<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>"
"<android.content.res.ColorStateList: int getChangingConfigurations()>","<android.content.res.ColorStateList: int getChangingConfigurations()>"
"<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>","<android.widget.RemoteViews: void setViewPadding(int,int,int,int,int)>"
"<android.graphics.drawable.LayerDrawable: void getHotspotBounds(android.graphics.Rect)>","<android.graphics.drawable.LayerDrawable: void getHotspotBounds(android.graphics.Rect)>"
"<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>","<android.widget.AbsListView: void onTextChanged(java.lang.CharSequence,int,int,int)>"
"<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>","<java.nio.charset.CharsetEncoder: void <init>(java.nio.charset.Charset,float,float)>"
"<android.content.pm.VersionedPackage: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.VersionedPackage: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Context: java.io.File getNoBackupFilesDir()>","<android.content.Context: java.io.File getNoBackupFilesDir()>"
"<android.media.MediaPlayer$ProvisioningNetworkErrorException: void <init>(java.lang.String)>","<android.media.MediaPlayer$ProvisioningNetworkErrorException: void <init>(java.lang.String)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout build()>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout build()>"
"<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>","<android.database.sqlite.SQLiteDatabase: void execPerConnectionSQL(java.lang.String,java.lang.Object[])>"
"<android.view.View: boolean requestFocusFromTouch()>","<android.view.View: boolean requestFocusFromTouch()>"
"<android.view.MotionEvent: void setAction(int)>","<android.view.MotionEvent: void setAction(int)>"
"<android.content.pm.ActivityInfo: int getThemeResource()>","<android.content.pm.ActivityInfo: int getThemeResource()>"
"<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener)>","<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener)>"
"<android.telephony.CellLocation: void requestLocationUpdate()>","<android.telephony.CellLocation: void requestLocationUpdate()>"
"<android.view.MotionEvent: float getOrientation()>","<android.view.MotionEvent: float getOrientation()>"
"<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>","<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>"
"<java.nio.IntBuffer: java.lang.String toString()>","<java.nio.IntBuffer: java.lang.String toString()>"
"<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>","<android.util.AttributeSet: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>"
"<android.content.pm.ApplicationInfo: boolean isProfileableByShell()>","<android.content.pm.ApplicationInfo: boolean isProfileableByShell()>"
"<android.content.ContextParams$Builder: android.content.ContextParams$Builder setNextAttributionSource(android.content.AttributionSource)>","<android.content.ContextParams$Builder: android.content.ContextParams$Builder setNextAttributionSource(android.content.AttributionSource)>"
"<android.widget.TextView: int getBreakStrategy()>","<android.widget.TextView: int getBreakStrategy()>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>"
"<android.widget.Toolbar: int getContentInsetRight()>","<android.widget.Toolbar: int getContentInsetRight()>"
"<java.net.ServerSocket: void close()>","<java.net.ServerSocket: void close()>"
"<java.net.NetworkInterface: int hashCode()>","<java.net.NetworkInterface: int hashCode()>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledState()>","<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledState()>"
"<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.util.Rational: int compareTo(android.util.Rational)>","<android.util.Rational: int compareTo(android.util.Rational)>"
"<android.app.PictureInPictureParams: android.util.Rational getAspectRatio()>","<android.app.PictureInPictureParams: android.util.Rational getAspectRatio()>"
"<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)>","<android.view.WindowManager: void addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,java.util.function.Consumer)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onBadgingChanged(int)>","<android.content.pm.PackageInstaller$SessionCallback: void onBadgingChanged(int)>"
"<java.util.HashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>","<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>"
"<android.content.Context: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>","<android.content.Context: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View,int)>"
"<android.media.VolumeShaper$Configuration: void <clinit>()>","<android.media.VolumeShaper$Configuration: void <clinit>()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setInsetsIgnoringVisibility(int,android.graphics.Insets)>"
"<android.app.RemoteAction: boolean shouldShowIcon()>","<android.app.RemoteAction: boolean shouldShowIcon()>"
"<android.content.AttributionSource: int hashCode()>","<android.content.AttributionSource: int hashCode()>"
"<android.content.pm.PackageManager: boolean canRequestPackageInstalls()>","<android.content.pm.PackageManager: boolean canRequestPackageInstalls()>"
"<java.time.format.DateTimeFormatter: void <init>()>","<java.time.format.DateTimeFormatter: void <init>()>"
"<android.view.WindowInsetsAnimationController: float getCurrentFraction()>","<android.view.WindowInsetsAnimationController: float getCurrentFraction()>"
"<android.app.Dialog: boolean requestWindowFeature(int)>","<android.app.Dialog: boolean requestWindowFeature(int)>"
"<android.graphics.Region: boolean quickContains(android.graphics.Rect)>","<android.graphics.Region: boolean quickContains(android.graphics.Rect)>"
"<java.time.Period: long toTotalMonths()>","<java.time.Period: long toTotalMonths()>"
"<java.util.Date: java.lang.String toLocaleString()>","<java.util.Date: java.lang.String toLocaleString()>"
"<android.widget.RemoteViews: void setDisplayedChild(int,int)>","<android.widget.RemoteViews: void setDisplayedChild(int,int)>"
"<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>","<android.telecom.PhoneAccountHandle: android.content.ComponentName getComponentName()>"
"<java.util.Arrays: void parallelSort(float[])>","<java.util.Arrays: void parallelSort(float[])>"
"<android.app.TaskStackBuilder: void <init>()>","<android.app.TaskStackBuilder: void <init>()>"
"<android.hardware.Camera: void <init>()>","<android.hardware.Camera: void <init>()>"
"<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>","<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>"
"<java.lang.IllegalAccessError: void <init>()>","<java.lang.IllegalAccessError: void <init>()>"
"<android.net.NetworkCapabilities: android.net.TransportInfo getTransportInfo()>","<android.net.NetworkCapabilities: android.net.TransportInfo getTransportInfo()>"
"<java.time.Duration: java.time.Duration ofMinutes(long)>","<java.time.Duration: java.time.Duration ofMinutes(long)>"
"<android.os.Vibrator: int[] areEffectsSupported(int[])>","<android.os.Vibrator: int[] areEffectsSupported(int[])>"
"<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()>","<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getReferrerUri()>"
"<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.net.URLConnection: void setDefaultUseCaches(boolean)>","<java.net.URLConnection: void setDefaultUseCaches(boolean)>"
"<android.view.View: void setAccessibilityHeading(boolean)>","<android.view.View: void setAccessibilityHeading(boolean)>"
"<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>","<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>"
"<android.util.Rational: android.util.Rational parseRational(java.lang.String)>","<android.util.Rational: android.util.Rational parseRational(java.lang.String)>"
"<android.util.ArrayMap: java.util.Set entrySet()>","<android.util.ArrayMap: java.util.Set entrySet()>"
"<java.util.Locale: java.util.Locale stripExtensions()>","<java.util.Locale: java.util.Locale stripExtensions()>"
"<java.net.URI: boolean isOpaque()>","<java.net.URI: boolean isOpaque()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setRoundedCorner(int,android.view.RoundedCorner)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setRoundedCorner(int,android.view.RoundedCorner)>"
"<android.os.Process: int[] getExclusiveCores()>","<android.os.Process: int[] getExclusiveCores()>"
"<java.net.URISyntaxException: java.lang.String getInput()>","<java.net.URISyntaxException: java.lang.String getInput()>"
"<android.view.ViewGroup: int getLayoutMode()>","<android.view.ViewGroup: int getLayoutMode()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>","<android.view.accessibility.AccessibilityNodeInfo: int getMovementGranularities()>"
"<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>","<android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)>"
"<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>","<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>"
"<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>","<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>"
"<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>"
"<android.view.inputmethod.CursorAnchorInfo: void <clinit>()>","<android.view.inputmethod.CursorAnchorInfo: void <clinit>()>"
"<android.view.Window: boolean hasSoftInputMode()>","<android.view.Window: boolean hasSoftInputMode()>"
"<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.content.ClipboardManager: void setText(java.lang.CharSequence)>","<android.content.ClipboardManager: void setText(java.lang.CharSequence)>"
"<android.icu.util.ULocale: boolean equals(java.lang.Object)>","<android.icu.util.ULocale: boolean equals(java.lang.Object)>"
"<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)>"
"<android.media.AudioManager: int getDirectPlaybackSupport(android.media.AudioFormat,android.media.AudioAttributes)>","<android.media.AudioManager: int getDirectPlaybackSupport(android.media.AudioFormat,android.media.AudioAttributes)>"
"<android.view.View: boolean isTextAlignmentResolved()>","<android.view.View: boolean isTextAlignmentResolved()>"
"<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[],java.util.Comparator)>"
"<java.time.LocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>"
"<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationRepeat(android.animation.Animator)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.DatagramChannel openDatagramChannel(java.net.ProtocolFamily)>"
"<android.view.View: void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>"
"<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>","<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])>"
"<android.view.textclassifier.TextLinks$TextLink: int getEntityCount()>","<android.view.textclassifier.TextLinks$TextLink: int getEntityCount()>"
"<android.media.SyncParams: void <init>()>","<android.media.SyncParams: void <init>()>"
"<java.security.Provider: java.util.Set entrySet()>","<java.security.Provider: java.util.Set entrySet()>"
"<android.os.HandlerThread: void run()>","<android.os.HandlerThread: void run()>"
"<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)>","<android.media.AudioTrack: boolean getTimestamp(android.media.AudioTimestamp)>"
"<java.util.HashSet: java.util.Iterator iterator()>","<java.util.HashSet: java.util.Iterator iterator()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream sequential()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream sequential()>"
"<java.util.stream.LongStream: java.util.Spliterator spliterator()>","<java.util.stream.LongStream: java.util.Spliterator spliterator()>"
"<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>","<android.content.ContextWrapper: boolean moveDatabaseFrom(android.content.Context,java.lang.String)>"
"<android.content.pm.PackageInstaller$SessionParams: void setAppIcon(android.graphics.Bitmap)>","<android.content.pm.PackageInstaller$SessionParams: void setAppIcon(android.graphics.Bitmap)>"
"<java.lang.Integer: int lowestOneBit(int)>","<java.lang.Integer: int lowestOneBit(int)>"
"<android.app.Activity: void onActivityReenter(int,android.content.Intent)>","<android.app.Activity: void onActivityReenter(int,android.content.Intent)>"
"<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>","<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>"
"<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>","<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>"
"<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.net.Network: void <clinit>()>","<android.net.Network: void <clinit>()>"
"<android.content.ComponentName: void <init>(android.os.Parcel)>","<android.content.ComponentName: void <init>(android.os.Parcel)>"
"<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>","<android.widget.TextView: void setFontFeatureSettings(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>","<android.view.accessibility.AccessibilityNodeInfo: int getLiveRegion()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isActive()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isActive()>"
"<android.hardware.Camera$Parameters: float getFocalLength()>","<android.hardware.Camera$Parameters: float getFocalLength()>"
"<android.content.pm.PackageInstaller$Session: int getParentSessionId()>","<android.content.pm.PackageInstaller$Session: int getParentSessionId()>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,android.content.pm.PackageManager$ResolveInfoFlags)>"
"<android.view.translation.TranslationCapability: void <clinit>()>","<android.view.translation.TranslationCapability: void <clinit>()>"
"<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>","<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(int,long)>"
"<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>"
"<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)>","<android.view.SubMenu: android.view.SubMenu setHeaderTitle(int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withYear(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withYear(int)>"
"<android.widget.TextView: int getTotalPaddingLeft()>","<android.widget.TextView: int getTotalPaddingLeft()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: void <init>()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: void <init>()>"
"<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>","<android.view.ViewGroup: void childDrawableStateChanged(android.view.View)>"
"<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.Channel inheritedChannel()>"
"<android.media.Image: void close()>","<android.media.Image: void close()>"
"<java.lang.SecurityException: void <init>(java.lang.Throwable)>","<java.lang.SecurityException: void <init>(java.lang.Throwable)>"
"<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>","<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>"
"<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()>","<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()>"
"<java.time.Duration: java.time.Duration ofDays(long)>","<java.time.Duration: java.time.Duration ofDays(long)>"
"<android.view.SurfaceView: void <init>(android.content.Context)>","<android.view.SurfaceView: void <init>(android.content.Context)>"
"<android.content.pm.PackageInstaller$SessionParams: void setInstallScenario(int)>","<android.content.pm.PackageInstaller$SessionParams: void setInstallScenario(int)>"
"<java.util.AbstractQueue: boolean add(java.lang.Object)>","<java.util.AbstractQueue: boolean add(java.lang.Object)>"
"<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)>","<android.util.DisplayMetrics: boolean equals(android.util.DisplayMetrics)>"
"<android.view.WindowId$FocusObserver: void onFocusGained(android.view.WindowId)>","<android.view.WindowId$FocusObserver: void onFocusGained(android.view.WindowId)>"
"<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>","<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>"
"<android.text.Layout: boolean getLineContainsTab(int)>","<android.text.Layout: boolean getLineContainsTab(int)>"
"<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>"
"<java.nio.ByteBuffer: double getDouble(int)>","<java.nio.ByteBuffer: double getDouble(int)>"
"<java.nio.charset.Charset: java.lang.String name()>","<java.nio.charset.Charset: java.lang.String name()>"
"<android.widget.RemoteViews$RemoteCollectionItems: long getItemId(int)>","<android.widget.RemoteViews$RemoteCollectionItems: long getItemId(int)>"
"<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>","<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>"
"<android.view.View: void onOverScrolled(int,int,boolean,boolean)>","<android.view.View: void onOverScrolled(int,int,boolean,boolean)>"
"<android.telephony.TelephonyManager: java.lang.String getNai()>","<android.telephony.TelephonyManager: java.lang.String getNai()>"
"<android.view.inputmethod.ExtractedTextRequest: int describeContents()>","<android.view.inputmethod.ExtractedTextRequest: int describeContents()>"
"<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>","<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>"
"<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<android.view.textclassifier.TextLanguage: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLanguage: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>","<java.util.Collections: java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet)>"
"<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setLogo(android.graphics.drawable.Drawable)>"
"<android.content.ContextWrapper: android.content.res.Resources getResources()>","<android.content.ContextWrapper: android.content.res.Resources getResources()>"
"<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>","<android.graphics.Paint: int getTextRunCursor(char[],int,int,boolean,int,int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>","<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>"
"<android.graphics.Matrix: boolean postScale(float,float,float,float)>","<android.graphics.Matrix: boolean postScale(float,float,float,float)>"
"<java.lang.invoke.MethodType: java.lang.Class[] parameterArray()>","<java.lang.invoke.MethodType: java.lang.Class[] parameterArray()>"
"<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.media.AudioManager: boolean isBluetoothA2dpOn()>","<android.media.AudioManager: boolean isBluetoothA2dpOn()>"
"<android.graphics.RecordingCanvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawGlyphs(int[],int,float[],int,int,android.graphics.fonts.Font,android.graphics.Paint)>"
"<android.content.res.Resources: java.lang.String getResourcePackageName(int)>","<android.content.res.Resources: java.lang.String getResourcePackageName(int)>"
"<android.content.BroadcastReceiver: int getResultCode()>","<android.content.BroadcastReceiver: int getResultCode()>"
"<java.lang.Short: short reverseBytes(short)>","<java.lang.Short: short reverseBytes(short)>"
"<android.widget.ListView: void onMeasure(int,int)>","<android.widget.ListView: void onMeasure(int,int)>"
"<java.util.SortedMap: java.util.Collection values()>","<java.util.SortedMap: java.util.Collection values()>"
"<android.view.View$BaseSavedState: void <clinit>()>","<android.view.View$BaseSavedState: void <clinit>()>"
"<android.os.Looper: void setMessageLogging(android.util.Printer)>","<android.os.Looper: void setMessageLogging(android.util.Printer)>"
"<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>","<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>"
"<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)>","<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)>"
"<android.view.View: void onScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>","<android.view.View: void onScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>"
"<android.os.Debug: void stopNativeTracing()>","<android.os.Debug: void stopNativeTracing()>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setPrivacySensitive(boolean)>","<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setPrivacySensitive(boolean)>"
"<android.app.Fragment: void setUserVisibleHint(boolean)>","<android.app.Fragment: void setUserVisibleHint(boolean)>"
"<java.security.Provider: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.security.Provider: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.Locale: java.lang.String getDisplayCountry()>","<java.util.Locale: java.lang.String getDisplayCountry()>"
"<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>"
"<android.media.Image: android.hardware.SyncFence getFence()>","<android.media.Image: android.hardware.SyncFence getFence()>"
"<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.drawable.ColorDrawable: android.graphics.ColorFilter getColorFilter()>","<android.graphics.drawable.ColorDrawable: android.graphics.ColorFilter getColorFilter()>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)>"
"<java.io.PrintStream: void <init>(java.lang.String)>","<java.io.PrintStream: void <init>(java.lang.String)>"
"<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.Consumer)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createSocketPair()>"
"<java.util.function.LongPredicate: java.util.function.LongPredicate and(java.util.function.LongPredicate)>","<java.util.function.LongPredicate: java.util.function.LongPredicate and(java.util.function.LongPredicate)>"
"<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>","<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>"
"<android.util.SizeF: int describeContents()>","<android.util.SizeF: int describeContents()>"
"<java.util.concurrent.Semaphore: void acquire(int)>","<java.util.concurrent.Semaphore: void acquire(int)>"
"<android.os.Message: void setAsynchronous(boolean)>","<android.os.Message: void setAsynchronous(boolean)>"
"<android.widget.TextView: int getMaxEms()>","<android.widget.TextView: int getMaxEms()>"
"<java.lang.Character: int getType(char)>","<java.lang.Character: int getType(char)>"
"<android.content.ClipDescription: void <clinit>()>","<android.content.ClipDescription: void <clinit>()>"
"<java.nio.LongBuffer: java.nio.Buffer reset()>","<java.nio.LongBuffer: java.nio.Buffer reset()>"
"<android.os.Debug: int getThreadAllocSize()>","<android.os.Debug: int getThreadAllocSize()>"
"<android.animation.ValueAnimator: int getRepeatCount()>","<android.animation.ValueAnimator: int getRepeatCount()>"
"<java.util.Map: java.util.Set keySet()>","<java.util.Map: java.util.Set keySet()>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float)>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float,float)>"
"<android.view.View: void cancelPendingInputEvents()>","<android.view.View: void cancelPendingInputEvents()>"
"<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>","<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>"
"<java.util.stream.DoubleStream: java.util.Spliterator$OfDouble spliterator()>","<java.util.stream.DoubleStream: java.util.Spliterator$OfDouble spliterator()>"
"<android.os.Debug: void <init>()>","<android.os.Debug: void <init>()>"
"<java.util.ArrayList: void forEach(java.util.function.Consumer)>","<java.util.ArrayList: void forEach(java.util.function.Consumer)>"
"<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>","<android.content.Intent: short[] getShortArrayExtra(java.lang.String)>"
"<android.net.NetworkInfo: java.lang.String getSubtypeName()>","<android.net.NetworkInfo: java.lang.String getSubtypeName()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>"
"<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>","<android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>"
"<android.graphics.RecordingCanvas: boolean isOpaque()>","<android.graphics.RecordingCanvas: boolean isOpaque()>"
"<android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener,android.os.Handler)>","<android.view.Window: void addOnFrameMetricsAvailableListener(android.view.Window$OnFrameMetricsAvailableListener,android.os.Handler)>"
"<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[])>"
"<android.media.Spatializer$OnSpatializerStateChangedListener: void onSpatializerEnabledChanged(android.media.Spatializer,boolean)>","<android.media.Spatializer$OnSpatializerStateChangedListener: void onSpatializerEnabledChanged(android.media.Spatializer,boolean)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>"
"<android.graphics.drawable.LayerDrawable: int findIndexByLayerId(int)>","<android.graphics.drawable.LayerDrawable: int findIndexByLayerId(int)>"
"<java.io.PrintWriter: void <init>(java.lang.String,java.nio.charset.Charset)>","<java.io.PrintWriter: void <init>(java.lang.String,java.nio.charset.Charset)>"
"<android.util.TypedValue: boolean isColorType()>","<android.util.TypedValue: boolean isColorType()>"
"<android.os.ResultReceiver: void <clinit>()>","<android.os.ResultReceiver: void <clinit>()>"
"<android.os.BaseBundle: double getDouble(java.lang.String)>","<android.os.BaseBundle: double getDouble(java.lang.String)>"
"<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>","<android.content.pm.PackageManager: boolean hasSigningCertificate(java.lang.String,byte[],int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)>"
"<android.os.Parcel: java.lang.Object readParcelable(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object readParcelable(java.lang.ClassLoader,java.lang.Class)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>"
"<android.content.ContentResolver: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>"
"<android.view.PointerIcon: void <init>()>","<android.view.PointerIcon: void <init>()>"
"<java.time.format.DecimalStyle: void <clinit>()>","<java.time.format.DecimalStyle: void <clinit>()>"
"<android.graphics.RenderNode: boolean getClipToOutline()>","<android.graphics.RenderNode: boolean getClipToOutline()>"
"<android.view.View: int computeVerticalScrollOffset()>","<android.view.View: int computeVerticalScrollOffset()>"
"<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.util.Map: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.content.pm.ComponentInfo: void <init>()>","<android.content.pm.ComponentInfo: void <init>()>"
"<android.view.textclassifier.TextClassificationSessionId: int describeContents()>","<android.view.textclassifier.TextClassificationSessionId: int describeContents()>"
"<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.telephony.PreciseDataConnectionState: java.lang.String toString()>","<android.telephony.PreciseDataConnectionState: java.lang.String toString()>"
"<android.content.pm.ApplicationInfo: java.lang.String toString()>","<android.content.pm.ApplicationInfo: java.lang.String toString()>"
"<java.lang.AssertionError: void <init>(boolean)>","<java.lang.AssertionError: void <init>(boolean)>"
"<android.media.AudioManager: boolean isVolumeFixed()>","<android.media.AudioManager: boolean isVolumeFixed()>"
"<android.app.Activity: java.lang.String getCallingPackage()>","<android.app.Activity: java.lang.String getCallingPackage()>"
"<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>","<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer duplicate()>","<java.nio.FloatBuffer: java.nio.FloatBuffer duplicate()>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: int getTextSizeUnit()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: int getTextSizeUnit()>"
"<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>","<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>"
"<android.graphics.BlendMode: void <init>(java.lang.String,int)>","<android.graphics.BlendMode: void <init>(java.lang.String,int)>"
"<android.content.pm.PackageInstaller: java.util.List getMySessions()>","<android.content.pm.PackageInstaller: java.util.List getMySessions()>"
"<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>","<android.content.Context: int checkUriPermission(android.net.Uri,int,int,int)>"
"<java.lang.AssertionError: void <init>(int)>","<java.lang.AssertionError: void <init>(int)>"
"<android.telephony.data.ApnSetting: boolean isPersistent()>","<android.telephony.data.ApnSetting: boolean isPersistent()>"
"<java.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void lock(long,long,boolean,java.lang.Object,java.nio.channels.CompletionHandler)>"
"<android.media.Rating: android.media.Rating newUnratedRating(int)>","<android.media.Rating: android.media.Rating newUnratedRating(int)>"
"<android.view.View: void setElevation(float)>","<android.view.View: void setElevation(float)>"
"<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)>","<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.animation.Animation: boolean getFillBefore()>","<android.view.animation.Animation: boolean getFillBefore()>"
"<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.hardware.camera2.CameraManager: void registerTorchCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$TorchCallback)>","<android.hardware.camera2.CameraManager: void registerTorchCallback(java.util.concurrent.Executor,android.hardware.camera2.CameraManager$TorchCallback)>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'from'(java.time.temporal.TemporalAccessor)>"
"<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()>","<android.view.textclassifier.ConversationActions$Message: java.time.ZonedDateTime getReferenceTime()>"
"<java.time.Duration: java.time.Duration plusHours(long)>","<java.time.Duration: java.time.Duration plusHours(long)>"
"<android.database.Cursor: boolean isAfterLast()>","<android.database.Cursor: boolean isAfterLast()>"
"<java.util.Hashtable: void rehash()>","<java.util.Hashtable: void rehash()>"
"<android.app.Activity: void onPostResume()>","<android.app.Activity: void onPostResume()>"
"<android.media.AudioRecordingConfiguration: java.util.List getEffects()>","<android.media.AudioRecordingConfiguration: java.util.List getEffects()>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>","<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>"
"<android.hardware.camera2.params.ExtensionSessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$StateCallback)>","<android.hardware.camera2.params.ExtensionSessionConfiguration: void <init>(int,java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraExtensionSession$StateCallback)>"
"<android.view.textclassifier.ConversationActions: int describeContents()>","<android.view.textclassifier.ConversationActions: int describeContents()>"
"<java.io.File: boolean mkdir()>","<java.io.File: boolean mkdir()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View,int)>"
"<android.content.pm.ProviderInfo: java.lang.String toString()>","<android.content.pm.ProviderInfo: java.lang.String toString()>"
"<java.nio.ByteBuffer: float getFloat()>","<java.nio.ByteBuffer: float getFloat()>"
"<android.app.Dialog: void setTitle(java.lang.CharSequence)>","<android.app.Dialog: void setTitle(java.lang.CharSequence)>"
"<android.view.Window: void setReenterTransition(android.transition.Transition)>","<android.view.Window: void setReenterTransition(android.transition.Transition)>"
"<android.graphics.drawable.Drawable: boolean isAutoMirrored()>","<android.graphics.drawable.Drawable: boolean isAutoMirrored()>"
"<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>","<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>"
"<java.time.ZoneOffset: void <init>()>","<java.time.ZoneOffset: void <init>()>"
"<android.os.BaseBundle: java.lang.String getString(java.lang.String)>","<android.os.BaseBundle: java.lang.String getString(java.lang.String)>"
"<android.telephony.ServiceState: void setRoaming(boolean)>","<android.telephony.ServiceState: void setRoaming(boolean)>"
"<java.net.Socket: java.net.InetAddress getInetAddress()>","<java.net.Socket: java.net.InetAddress getInetAddress()>"
"<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>","<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>"
"<android.transition.Transition: java.lang.String toString()>","<android.transition.Transition: java.lang.String toString()>"
"<android.telephony.NetworkScanRequest: boolean getIncrementalResults()>","<android.telephony.NetworkScanRequest: boolean getIncrementalResults()>"
"<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>","<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>"
"<java.util.regex.Matcher: java.lang.String toString()>","<java.util.regex.Matcher: java.lang.String toString()>"
"<java.security.InvalidKeyException: void <init>()>","<java.security.InvalidKeyException: void <init>()>"
"<android.media.SubtitleData: int getTrackIndex()>","<android.media.SubtitleData: int getTrackIndex()>"
"<android.media.session.MediaSession$Callback: void onSkipToQueueItem(long)>","<android.media.session.MediaSession$Callback: void onSkipToQueueItem(long)>"
"<android.view.ViewGroup: void suppressLayout(boolean)>","<android.view.ViewGroup: void suppressLayout(boolean)>"
"<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>","<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>"
"<android.animation.ValueAnimator: void setRepeatMode(int)>","<android.animation.ValueAnimator: void setRepeatMode(int)>"
"<android.telephony.ServiceState: int getChannelNumber()>","<android.telephony.ServiceState: int getChannelNumber()>"
"<android.widget.MediaController: void setPrevNextListeners(android.view.View$OnClickListener,android.view.View$OnClickListener)>","<android.widget.MediaController: void setPrevNextListeners(android.view.View$OnClickListener,android.view.View$OnClickListener)>"
"<android.view.View: boolean getClipToOutline()>","<android.view.View: boolean getClipToOutline()>"
"<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)>","<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)>"
"<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()>","<android.media.AudioManager: boolean isBluetoothScoAvailableOffCall()>"
"<android.transition.Transition: android.transition.Transition removeTarget(int)>","<android.transition.Transition: android.transition.Transition removeTarget(int)>"
"<android.content.pm.PackageInstaller$SessionInfo: long getSize()>","<android.content.pm.PackageInstaller$SessionInfo: long getSize()>"
"<android.media.AudioManager: void setBluetoothScoOn(boolean)>","<android.media.AudioManager: void setBluetoothScoOn(boolean)>"
"<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.RelativeLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.hardware.SyncFence: void writeToParcel(android.os.Parcel,int)>","<android.hardware.SyncFence: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Thread: int activeCount()>","<java.lang.Thread: int activeCount()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer compact()>","<java.nio.ShortBuffer: java.nio.ShortBuffer compact()>"
"<android.view.KeyEvent: void <clinit>()>","<android.view.KeyEvent: void <clinit>()>"
"<java.util.Enumeration: java.lang.Object nextElement()>","<java.util.Enumeration: java.lang.Object nextElement()>"
"<java.util.Optional: void ifPresent(java.util.function.Consumer)>","<java.util.Optional: void ifPresent(java.util.function.Consumer)>"
"<android.widget.Scroller: int getFinalX()>","<android.widget.Scroller: int getFinalX()>"
"<java.net.URLConnection: java.net.URL getURL()>","<java.net.URLConnection: java.net.URL getURL()>"
"<android.media.MediaDrm: void setPropertyByteArray(java.lang.String,byte[])>","<android.media.MediaDrm: void setPropertyByteArray(java.lang.String,byte[])>"
"<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()>","<android.view.textclassifier.ConversationActions$Message: android.app.Person getAuthor()>"
"<android.view.KeyEvent$Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.content.ContentProviderClient: int delete(android.net.Uri,android.os.Bundle)>","<android.content.ContentProviderClient: int delete(android.net.Uri,android.os.Bundle)>"
"<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>","<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)>"
"<android.media.MediaDrm: void closeSession(byte[])>","<android.media.MediaDrm: void closeSession(byte[])>"
"<java.time.temporal.ChronoUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>","<java.time.temporal.ChronoUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
"<java.util.Deque: int size()>","<java.util.Deque: int size()>"
"<android.widget.AbsListView: void onNestedScrollAccepted(android.view.View,android.view.View,int)>","<android.widget.AbsListView: void onNestedScrollAccepted(android.view.View,android.view.View,int)>"
"<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>","<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>"
"<java.time.LocalDate: java.time.LocalDate of(int,int,int)>","<java.time.LocalDate: java.time.LocalDate of(int,int,int)>"
"<android.util.Log: int println(int,java.lang.String,java.lang.String)>","<android.util.Log: int println(int,java.lang.String,java.lang.String)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle whileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle whileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>","<android.view.inputmethod.InputMethodManager: void showSoftInputFromInputMethod(android.os.IBinder,int)>"
"<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>","<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>"
"<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>","<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()>"
"<android.content.pm.PackageManager: boolean isSafeMode()>","<android.content.pm.PackageManager: boolean isSafeMode()>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent build()>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent build()>"
"<android.media.AudioManager: int getAllowedCapturePolicy()>","<android.media.AudioManager: int getAllowedCapturePolicy()>"
"<android.widget.TextView: android.text.style.URLSpan[] getUrls()>","<android.widget.TextView: android.text.style.URLSpan[] getUrls()>"
"<android.app.Person: android.graphics.drawable.Icon getIcon()>","<android.app.Person: android.graphics.drawable.Icon getIcon()>"
"<android.graphics.Paint: float getWordSpacing()>","<android.graphics.Paint: float getWordSpacing()>"
"<java.lang.reflect.Executable: java.lang.String toGenericString()>","<java.lang.reflect.Executable: java.lang.String toGenericString()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult implFlush(java.nio.ByteBuffer)>"
"<java.lang.NoClassDefFoundError: void <init>()>","<java.lang.NoClassDefFoundError: void <init>()>"
"<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>","<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>"
"<android.view.View: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>","<android.view.View: android.view.ContentInfo onReceiveContent(android.view.ContentInfo)>"
"<android.net.LinkProperties: void <clinit>()>","<android.net.LinkProperties: void <clinit>()>"
"<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>","<android.view.MenuItem: android.view.MenuItem setShortcut(char,char)>"
"<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>","<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)>"
"<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>","<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>"
"<android.media.session.MediaController: long getFlags()>","<android.media.session.MediaController: long getFlags()>"
"<java.lang.reflect.Field: char getChar(java.lang.Object)>","<java.lang.reflect.Field: char getChar(java.lang.Object)>"
"<java.util.UUID: long node()>","<java.util.UUID: long node()>"
"<android.app.Fragment: android.app.Activity getActivity()>","<android.app.Fragment: android.app.Activity getActivity()>"
"<java.util.List: java.util.Spliterator spliterator()>","<java.util.List: java.util.Spliterator spliterator()>"
"<java.util.ListIterator: int nextIndex()>","<java.util.ListIterator: int nextIndex()>"
"<android.app.ActionBar: void setCustomView(android.view.View)>","<android.app.ActionBar: void setCustomView(android.view.View)>"
"<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()>","<android.view.inputmethod.InputMethodManager: void showInputMethodPicker()>"
"<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)>","<android.telephony.TelephonyManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)>"
"<android.widget.AbsListView: void onMeasure(int,int)>","<android.widget.AbsListView: void onMeasure(int,int)>"
"<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>","<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)>"
"<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener,android.os.Handler)>","<android.media.MediaDrm: void setOnEventListener(android.media.MediaDrm$OnEventListener,android.os.Handler)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)>"
"<android.view.MotionEvent: void recycle()>","<android.view.MotionEvent: void recycle()>"
"<java.nio.DoubleBuffer: int compareTo(java.lang.Object)>","<java.nio.DoubleBuffer: int compareTo(java.lang.Object)>"
"<java.net.DatagramSocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>","<java.net.DatagramSocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.View: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>","<android.view.View: void onVirtualViewTranslationResponses(android.util.LongSparseArray)>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asSpreader(int,java.lang.Class,int)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asSpreader(int,java.lang.Class,int)>"
"<java.util.DoubleSummaryStatistics: void <init>()>","<java.util.DoubleSummaryStatistics: void <init>()>"
"<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>","<android.content.SharedPreferences: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>"
"<android.telephony.IccOpenLogicalChannelResponse: void <init>()>","<android.telephony.IccOpenLogicalChannelResponse: void <init>()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreStarted(android.app.Activity)>"
"<android.media.session.MediaSession$QueueItem: int describeContents()>","<android.media.session.MediaSession$QueueItem: int describeContents()>"
"<android.media.TimedMetaData: void <init>(long,byte[])>","<android.media.TimedMetaData: void <init>(long,byte[])>"
"<android.media.MediaSyncEvent: int hashCode()>","<android.media.MediaSyncEvent: int hashCode()>"
"<android.os.Bundle: void <init>(android.os.Bundle)>","<android.os.Bundle: void <init>(android.os.Bundle)>"
"<java.text.FieldPosition: void setEndIndex(int)>","<java.text.FieldPosition: void setEndIndex(int)>"
"<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float,int)>","<android.os.VibrationEffect$Composition: android.os.VibrationEffect$Composition addPrimitive(int,float,int)>"
"<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>","<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>"
"<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>","<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>"
"<android.graphics.Rect: java.lang.String toString()>","<android.graphics.Rect: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List getAvailableExtraData()>"
"<android.telephony.TelephonyManager: java.lang.String getManualNetworkSelectionPlmn()>","<android.telephony.TelephonyManager: java.lang.String getManualNetworkSelectionPlmn()>"
"<java.lang.Character: boolean isTitleCase(char)>","<java.lang.Character: boolean isTitleCase(char)>"
"<android.media.MediaDrm: byte[] openSession()>","<android.media.MediaDrm: byte[] openSession()>"
"<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>"
"<android.media.AudioManager: android.media.Spatializer getSpatializer()>","<android.media.AudioManager: android.media.Spatializer getSpatializer()>"
"<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>","<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>"
"<java.util.Comparator: boolean equals(java.lang.Object)>","<java.util.Comparator: boolean equals(java.lang.Object)>"
"<android.widget.AbsListView: void setChoiceMode(int)>","<android.widget.AbsListView: void setChoiceMode(int)>"
"<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources$Theme)>","<android.view.ContextThemeWrapper: void setTheme(android.content.res.Resources$Theme)>"
"<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>","<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>"
"<java.util.Deque: java.lang.Object element()>","<java.util.Deque: java.lang.Object element()>"
"<java.time.LocalDate: int getYear()>","<java.time.LocalDate: int getYear()>"
"<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>","<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>"
"<java.util.Arrays: int hashCode(float[])>","<java.util.Arrays: int hashCode(float[])>"
"<java.nio.channels.SeekableByteChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.SeekableByteChannel: int read(java.nio.ByteBuffer)>"
"<android.graphics.Outline: boolean isEmpty()>","<android.graphics.Outline: boolean isEmpty()>"
"<java.util.Hashtable: java.util.Set keySet()>","<java.util.Hashtable: java.util.Set keySet()>"
"<android.media.session.MediaController$Callback: void onMetadataChanged(android.media.MediaMetadata)>","<android.media.session.MediaController$Callback: void onMetadataChanged(android.media.MediaMetadata)>"
"<android.view.View: void setRotationX(float)>","<android.view.View: void setRotationX(float)>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getOutputSizes(java.lang.Class)>"
"<android.widget.MediaController: boolean onTrackballEvent(android.view.MotionEvent)>","<android.widget.MediaController: boolean onTrackballEvent(android.view.MotionEvent)>"
"<android.app.AlertDialog$Builder: android.content.Context getContext()>","<android.app.AlertDialog$Builder: android.content.Context getContext()>"
"<android.net.Uri: java.lang.String getScheme()>","<android.net.Uri: java.lang.String getScheme()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>"
"<android.content.ContextWrapper: java.io.File getObbDir()>","<android.content.ContextWrapper: java.io.File getObbDir()>"
"<android.icu.util.ULocale: java.lang.String getISO3Language(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getISO3Language(java.lang.String)>"
"<android.app.Activity: boolean onSearchRequested()>","<android.app.Activity: boolean onSearchRequested()>"
"<android.view.WindowManager$LayoutParams: int getBlurBehindRadius()>","<android.view.WindowManager$LayoutParams: int getBlurBehindRadius()>"
"<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void <init>()>","<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void <init>()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>"
"<android.media.AudioManager: int getStreamMaxVolume(int)>","<android.media.AudioManager: int getStreamMaxVolume(int)>"
"<java.net.InetAddress: java.lang.String toString()>","<java.net.InetAddress: java.lang.String toString()>"
"<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>","<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>"
"<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>","<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>","<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void notifyConfigurationChanged(android.content.res.Configuration)>","<android.view.SurfaceControlViewHost$SurfacePackage: void notifyConfigurationChanged(android.content.res.Configuration)>"
"<android.view.contentcapture.ContentCaptureContext: void <clinit>()>","<android.view.contentcapture.ContentCaptureContext: void <clinit>()>"
"<android.util.Property: boolean isReadOnly()>","<android.util.Property: boolean isReadOnly()>"
"<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>","<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean,int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: void <init>(int,int,boolean,int)>"
"<android.media.AudioManager: boolean isRampingRingerEnabled()>","<android.media.AudioManager: boolean isRampingRingerEnabled()>"
"<android.net.Uri: boolean isRelative()>","<android.net.Uri: boolean isRelative()>"
"<android.view.textclassifier.TextClassification$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextClassification$Request: android.os.Bundle getExtras()>"
"<android.app.FragmentTransaction: boolean isEmpty()>","<android.app.FragmentTransaction: boolean isEmpty()>"
"<android.app.Activity: void postponeEnterTransition()>","<android.app.Activity: void postponeEnterTransition()>"
"<android.media.RemoteControlClient$MetadataEditor: void <init>(android.media.RemoteControlClient)>","<android.media.RemoteControlClient$MetadataEditor: void <init>(android.media.RemoteControlClient)>"
"<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence)>","<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence)>"
"<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)>","<java.lang.SecurityManager: void checkConnect(java.lang.String,int,java.lang.Object)>"
"<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>","<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>"
"<android.app.Activity: void onTrimMemory(int)>","<android.app.Activity: void onTrimMemory(int)>"
"<android.graphics.Bitmap: void <init>()>","<android.graphics.Bitmap: void <init>()>"
"<android.content.Context: java.lang.Object getSystemService(java.lang.String)>","<android.content.Context: java.lang.Object getSystemService(java.lang.String)>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>"
"<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>","<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int)>"
"<android.net.SocketKeepalive: void stop()>","<android.net.SocketKeepalive: void stop()>"
"<android.content.pm.PackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>","<android.content.pm.PackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>"
"<java.util.Collections: void <clinit>()>","<java.util.Collections: void <clinit>()>"
"<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.ContextWrapper: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType valueOf(java.lang.String)>","<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType valueOf(java.lang.String)>"
"<android.content.IntentFilter: java.util.Iterator typesIterator()>","<android.content.IntentFilter: java.util.Iterator typesIterator()>"
"<android.app.ActionBar: void setHomeActionContentDescription(int)>","<android.app.ActionBar: void setHomeActionContentDescription(int)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>"
"<java.util.Arrays: java.util.List asList(java.lang.Object[])>","<java.util.Arrays: java.util.List asList(java.lang.Object[])>"
"<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>","<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>"
"<java.net.DatagramSocket: void setSendBufferSize(int)>","<java.net.DatagramSocket: void setSendBufferSize(int)>"
"<java.time.chrono.ChronoLocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.ChronoLocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.animation.LayoutTransition: java.util.List getTransitionListeners()>","<android.animation.LayoutTransition: java.util.List getTransitionListeners()>"
"<android.telephony.data.ApnSetting: int getNetworkTypeBitmask()>","<android.telephony.data.ApnSetting: int getNetworkTypeBitmask()>"
"<java.util.Comparator: java.util.Comparator thenComparingInt(java.util.function.ToIntFunction)>","<java.util.Comparator: java.util.Comparator thenComparingInt(java.util.function.ToIntFunction)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectSetter(java.lang.reflect.Field)>"
"<android.telephony.TelephonyCallback$RegistrationFailedListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)>","<android.telephony.TelephonyCallback$RegistrationFailedListener: void onRegistrationFailed(android.telephony.CellIdentity,java.lang.String,int,int,int)>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>"
"<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>"
"<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>","<android.widget.ListView: void setRemoteViewsAdapter(android.content.Intent)>"
"<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>","<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>"
"<android.os.Debug: int getGlobalExternalAllocCount()>","<android.os.Debug: int getGlobalExternalAllocCount()>"
"<android.graphics.RenderNode: boolean setCameraDistance(float)>","<android.graphics.RenderNode: boolean setCameraDistance(float)>"
"<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>","<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>"
"<android.view.View: int getLeft()>","<android.view.View: int getLeft()>"
"<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>","<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>"
"<android.graphics.drawable.LayerDrawable: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.LayerDrawable: void setTintList(android.content.res.ColorStateList)>"
"<android.graphics.drawable.LayerDrawable: int getRightPadding()>","<android.graphics.drawable.LayerDrawable: int getRightPadding()>"
"<android.view.View: void setX(float)>","<android.view.View: void setX(float)>"
"<android.widget.ListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>","<android.widget.ListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>"
"<android.hardware.Sensor: float getMaximumRange()>","<android.hardware.Sensor: float getMaximumRange()>"
"<java.lang.ClassCircularityError: void <init>()>","<java.lang.ClassCircularityError: void <init>()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(int)>"
"<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>","<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>"
"<android.app.ActivityManager: java.util.List getRunningServices(int)>","<android.app.ActivityManager: java.util.List getRunningServices(int)>"
"<android.os.Build$VERSION: void <init>()>","<android.os.Build$VERSION: void <init>()>"
"<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>","<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>"
"<android.os.Debug: void resetGlobalClassInitTime()>","<android.os.Debug: void resetGlobalClassInitTime()>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)>"
"<android.os.UserHandle: void <init>(android.os.Parcel)>","<android.os.UserHandle: void <init>(android.os.Parcel)>"
"<java.lang.invoke.VarHandle: java.lang.Object compareAndExchangeRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object compareAndExchangeRelease(java.lang.Object[])>"
"<java.util.Collection: boolean retainAll(java.util.Collection)>","<java.util.Collection: boolean retainAll(java.util.Collection)>"
"<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>","<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>"
"<android.view.ViewGroup: void bringChildToFront(android.view.View)>","<android.view.ViewGroup: void bringChildToFront(android.view.View)>"
"<android.view.SurfaceControl$Transaction: void writeToParcel(android.os.Parcel,int)>","<android.view.SurfaceControl$Transaction: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>","<android.view.accessibility.AccessibilityNodeInfo: boolean refresh()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotSize()>","<android.database.sqlite.SQLiteDatabase$OpenParams: int getLookasideSlotSize()>"
"<android.media.MediaDrm: void restoreKeys(byte[],byte[])>","<android.media.MediaDrm: void restoreKeys(byte[],byte[])>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>"
"<android.os.Messenger: void <clinit>()>","<android.os.Messenger: void <clinit>()>"
"<android.graphics.RenderNode: boolean hasOverlappingRendering()>","<android.graphics.RenderNode: boolean hasOverlappingRendering()>"
"<android.view.View: void setBottom(int)>","<android.view.View: void setBottom(int)>"
"<android.util.Range: java.lang.Comparable getLower()>","<android.util.Range: java.lang.Comparable getLower()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor wrap(android.os.ParcelFileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor wrap(android.os.ParcelFileDescriptor,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>"
"<android.view.WindowInsetsAnimation$Callback: int getDispatchMode()>","<android.view.WindowInsetsAnimation$Callback: int getDispatchMode()>"
"<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>","<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedExceptionAction)>"
"<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>","<android.app.ActivityManager$TaskDescription: android.graphics.Bitmap getIcon()>"
"<android.content.pm.ChangedPackages: void <clinit>()>","<android.content.pm.ChangedPackages: void <clinit>()>"
"<java.nio.LongBuffer: java.nio.ByteOrder order()>","<java.nio.LongBuffer: java.nio.ByteOrder order()>"
"<android.telephony.TelephonyCallback$DisplayInfoListener: void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)>","<android.telephony.TelephonyCallback$DisplayInfoListener: void onDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)>"
"<android.transition.Scene: void setEnterAction(java.lang.Runnable)>","<android.transition.Scene: void setEnterAction(java.lang.Runnable)>"
"<java.nio.CharBuffer: char charAt(int)>","<java.nio.CharBuffer: char charAt(int)>"
"<android.telephony.TelephonyManager: boolean isRadioInterfaceCapabilitySupported(java.lang.String)>","<android.telephony.TelephonyManager: boolean isRadioInterfaceCapabilitySupported(java.lang.String)>"
"<java.lang.Class: boolean isSynthetic()>","<java.lang.Class: boolean isSynthetic()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,long)>"
"<android.telephony.RadioAccessSpecifier: int[] getBands()>","<android.telephony.RadioAccessSpecifier: int[] getBands()>"
"<java.util.Date: void setHours(int)>","<java.util.Date: void setHours(int)>"
"<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>","<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>"
"<java.lang.reflect.Modifier: boolean isVolatile(int)>","<java.lang.reflect.Modifier: boolean isVolatile(int)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(java.lang.CharSequence,int,int,android.os.LocaleList)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(java.lang.CharSequence,int,int,android.os.LocaleList)>"
"<android.content.res.TypedArray: int getChangingConfigurations()>","<android.content.res.TypedArray: int getChangingConfigurations()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>"
"<android.graphics.drawable.LayerDrawable: int getLayerWidth(int)>","<android.graphics.drawable.LayerDrawable: int getLayerWidth(int)>"
"<android.os.Looper: android.os.MessageQueue getQueue()>","<android.os.Looper: android.os.MessageQueue getQueue()>"
"<java.net.Socket: void connect(java.net.SocketAddress)>","<java.net.Socket: void connect(java.net.SocketAddress)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(java.nio.FloatBuffer)>"
"<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>","<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>"
"<java.util.HashMap: void clear()>","<java.util.HashMap: void clear()>"
"<android.content.ClipData: int getItemCount()>","<android.content.ClipData: int getItemCount()>"
"<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>","<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(long)>","<java.lang.StringBuffer: java.lang.StringBuffer append(long)>"
"<java.io.PrintStream: void print(char)>","<java.io.PrintStream: void print(char)>"
"<android.os.Looper: void quitSafely()>","<android.os.Looper: void quitSafely()>"
"<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>","<java.nio.LongBuffer: java.nio.LongBuffer get(long[])>"
"<android.media.AudioTrack: int setLoopPoints(int,int,int)>","<android.media.AudioTrack: int setLoopPoints(int,int,int)>"
"<java.util.Date: java.lang.String toString()>","<java.util.Date: java.lang.String toString()>"
"<android.media.MediaPlayer$OnInfoListener: boolean onInfo(android.media.MediaPlayer,int,int)>","<android.media.MediaPlayer$OnInfoListener: boolean onInfo(android.media.MediaPlayer,int,int)>"
"<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>","<java.security.CodeSource: void <init>(java.net.URL,java.security.CodeSigner[])>"
"<android.icu.util.ULocale$Builder: void <init>()>","<android.icu.util.ULocale$Builder: void <init>()>"
"<java.util.stream.LongStream: java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction)>","<java.util.stream.LongStream: java.util.stream.IntStream mapToInt(java.util.function.LongToIntFunction)>"
"<android.content.Intent: int filterHashCode()>","<android.content.Intent: int filterHashCode()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentViewDestroyed(android.app.FragmentManager,android.app.Fragment)>"
"<android.util.Range: android.util.Range extend(android.util.Range)>","<android.util.Range: android.util.Range extend(android.util.Range)>"
"<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>"
"<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>","<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>"
"<java.util.Arrays: void setAll(int[],java.util.function.IntUnaryOperator)>","<java.util.Arrays: void setAll(int[],java.util.function.IntUnaryOperator)>"
"<android.transition.Transition: android.transition.Transition addTarget(int)>","<android.transition.Transition: android.transition.Transition addTarget(int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()>","<android.database.sqlite.SQLiteDatabase$OpenParams: android.database.DatabaseErrorHandler getErrorHandler()>"
"<android.view.MenuItem: android.graphics.BlendMode getIconTintBlendMode()>","<android.view.MenuItem: android.graphics.BlendMode getIconTintBlendMode()>"
"<android.view.View$OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>","<android.view.View$OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>"
"<java.nio.ByteOrder: void <init>()>","<java.nio.ByteOrder: void <init>()>"
"<android.media.DeniedByServerException: void <init>(java.lang.String)>","<android.media.DeniedByServerException: void <init>(java.lang.String)>"
"<android.media.MediaPlayer: void setDataSource(android.media.MediaDataSource)>","<android.media.MediaPlayer: void setDataSource(android.media.MediaDataSource)>"
"<android.widget.AbsListView: void setTopEdgeEffectColor(int)>","<android.widget.AbsListView: void setTopEdgeEffectColor(int)>"
"<android.util.SparseArray: void clear()>","<android.util.SparseArray: void clear()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProfileId(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProfileId(int)>"
"<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>","<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>"
"<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>","<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>"
"<android.telephony.TelephonyScanManager$NetworkScanCallback: void onError(int)>","<android.telephony.TelephonyScanManager$NetworkScanCallback: void onError(int)>"
"<java.util.function.Predicate: java.util.function.Predicate negate()>","<java.util.function.Predicate: java.util.function.Predicate negate()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator z(float)>"
"<android.net.NetworkRequest: int describeContents()>","<android.net.NetworkRequest: int describeContents()>"
"<android.media.session.MediaSession$Callback: void onRewind()>","<android.media.session.MediaSession$Callback: void onRewind()>"
"<android.widget.RemoteViews: void setColor(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColor(int,java.lang.String,int)>"
"<android.view.KeyEvent: boolean isCapsLockOn()>","<android.view.KeyEvent: boolean isCapsLockOn()>"
"<java.lang.'annotation'.Retention: java.lang.'annotation'.RetentionPolicy value()>","<java.lang.'annotation'.Retention: java.lang.'annotation'.RetentionPolicy value()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabelFor()>"
"<android.graphics.Color: float[] getComponents()>","<android.graphics.Color: float[] getComponents()>"
"<android.view.View: void dispatchSetSelected(boolean)>","<android.view.View: void dispatchSetSelected(boolean)>"
"<android.media.Spatializer: void <init>()>","<android.media.Spatializer: void <init>()>"
"<android.icu.util.ULocale: java.lang.String getVariant()>","<android.icu.util.ULocale: java.lang.String getVariant()>"
"<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)>","<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)>"
"<android.hardware.HardwareBuffer: void <init>()>","<android.hardware.HardwareBuffer: void <init>()>"
"<java.util.UUID: int compareTo(java.lang.Object)>","<java.util.UUID: int compareTo(java.lang.Object)>"
"<android.app.Person$Builder: android.app.Person$Builder setBot(boolean)>","<android.app.Person$Builder: android.app.Person$Builder setBot(boolean)>"
"<android.content.Loader: void onReset()>","<android.content.Loader: void onReset()>"
"<android.net.LinkProperties: int getMtu()>","<android.net.LinkProperties: int getMtu()>"
"<android.view.Window: void clearFlags(int)>","<android.view.Window: void clearFlags(int)>"
"<android.widget.TextView: android.text.Layout getLayout()>","<android.widget.TextView: android.text.Layout getLayout()>"
"<java.net.InetSocketAddress: void <init>(int)>","<java.net.InetSocketAddress: void <init>(int)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)>"
"<android.app.RemoteAction: android.app.PendingIntent getActionIntent()>","<android.app.RemoteAction: android.app.PendingIntent getActionIntent()>"
"<java.util.Arrays: java.util.stream.DoubleStream stream(double[],int,int)>","<java.util.Arrays: java.util.stream.DoubleStream stream(double[],int,int)>"
"<android.hardware.camera2.CameraManager: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)>","<android.hardware.camera2.CameraManager: void unregisterAvailabilityCallback(android.hardware.camera2.CameraManager$AvailabilityCallback)>"
"<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>","<android.view.DragEvent: void writeToParcel(android.os.Parcel,int)>"
"<java.security.Timestamp: int hashCode()>","<java.security.Timestamp: int hashCode()>"
"<android.os.Bundle: void putFloat(java.lang.String,float)>","<android.os.Bundle: void putFloat(java.lang.String,float)>"
"<android.view.animation.LayoutAnimationController: void start()>","<android.view.animation.LayoutAnimationController: void start()>"
"<java.io.PrintStream: void println(java.lang.Object)>","<java.io.PrintStream: void println(java.lang.Object)>"
"<android.view.ViewStructure: int getTextSelectionStart()>","<android.view.ViewStructure: int getTextSelectionStart()>"
"<android.app.PictureInPictureParams: int hashCode()>","<android.app.PictureInPictureParams: int hashCode()>"
"<java.time.chrono.ChronoLocalDate: int compareTo(java.lang.Object)>","<java.time.chrono.ChronoLocalDate: int compareTo(java.lang.Object)>"
"<android.app.Activity: int getChangingConfigurations()>","<android.app.Activity: int getChangingConfigurations()>"
"<android.view.SurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>","<android.view.SurfaceHolder: android.graphics.Canvas lockHardwareCanvas()>"
"<android.widget.TextView: void setTextSelectHandleLeft(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextSelectHandleLeft(android.graphics.drawable.Drawable)>"
"<android.graphics.drawable.ColorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.ColorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<java.lang.SecurityManager: void checkExec(java.lang.String)>","<java.lang.SecurityManager: void checkExec(java.lang.String)>"
"<java.security.SignatureException: void <init>()>","<java.security.SignatureException: void <init>()>"
"<android.content.pm.PackageManager$Property: int getResourceId()>","<android.content.pm.PackageManager$Property: int getResourceId()>"
"<android.graphics.Paint: int getShadowLayerColor()>","<android.graphics.Paint: int getShadowLayerColor()>"
"<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>","<android.view.SubMenu: android.view.SubMenu setIcon(android.graphics.drawable.Drawable)>"
"<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()>","<android.app.Fragment: android.view.LayoutInflater getLayoutInflater()>"
"<android.app.Dialog: android.os.Bundle onSaveInstanceState()>","<android.app.Dialog: android.os.Bundle onSaveInstanceState()>"
"<android.view.View: android.view.WindowId getWindowId()>","<android.view.View: android.view.WindowId getWindowId()>"
"<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.content.pm.PermissionInfo: int describeContents()>","<android.content.pm.PermissionInfo: int describeContents()>"
"<android.hardware.camera2.CameraCaptureSession: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>","<android.hardware.camera2.CameraCaptureSession: int captureBurstRequests(java.util.List,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession$CaptureCallback)>"
"<android.view.inputmethod.InputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>","<android.view.inputmethod.InputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>"
"<android.view.View: android.os.Parcelable onSaveInstanceState()>","<android.view.View: android.os.Parcelable onSaveInstanceState()>"
"<android.app.Activity: void <clinit>()>","<android.app.Activity: void <clinit>()>"
"<java.lang.Math: double exp(double)>","<java.lang.Math: double exp(double)>"
"<android.icu.util.ULocale: java.util.Collection getAvailableLocalesByType(android.icu.util.ULocale$AvailableType)>","<android.icu.util.ULocale: java.util.Collection getAvailableLocalesByType(android.icu.util.ULocale$AvailableType)>"
"<android.view.textclassifier.TextLinks: int describeContents()>","<android.view.textclassifier.TextLinks: int describeContents()>"
"<java.io.PrintWriter: void println(java.lang.Object)>","<java.io.PrintWriter: void println(java.lang.Object)>"
"<java.nio.file.FileStore: long getTotalSpace()>","<java.nio.file.FileStore: long getTotalSpace()>"
"<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>","<android.content.IntentSender: android.os.UserHandle getCreatorUserHandle()>"
"<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>","<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>"
"<android.os.MemoryFile: java.io.InputStream getInputStream()>","<android.os.MemoryFile: java.io.InputStream getInputStream()>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>"
"<java.util.AbstractMap: void putAll(java.util.Map)>","<java.util.AbstractMap: void putAll(java.util.Map)>"
"<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>","<java.net.ServerSocket: void setSocketFactory(java.net.SocketImplFactory)>"
"<android.net.ConnectivityManager$NetworkCallback: void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)>","<android.net.ConnectivityManager$NetworkCallback: void onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)>"
"<android.telephony.data.ApnSetting: int getProfileId()>","<android.telephony.data.ApnSetting: int getProfileId()>"
"<android.os.Parcel: boolean hasFileDescriptors(int,int)>","<android.os.Parcel: boolean hasFileDescriptors(int,int)>"
"<android.app.Activity: android.content.Intent getIntent()>","<android.app.Activity: android.content.Intent getIntent()>"
"<android.content.pm.PackageInstaller$SessionParams: void setSize(long)>","<android.content.pm.PackageInstaller$SessionParams: void setSize(long)>"
"<java.util.Map: java.util.Set entrySet()>","<java.util.Map: java.util.Set entrySet()>"
"<android.app.Activity: android.app.Activity getParent()>","<android.app.Activity: android.app.Activity getParent()>"
"<android.view.textclassifier.TextSelection: int getEntityCount()>","<android.view.textclassifier.TextSelection: int getEntityCount()>"
"<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>","<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>"
"<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)>","<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)>"
"<java.util.stream.IntStream: boolean anyMatch(java.util.function.IntPredicate)>","<java.util.stream.IntStream: boolean anyMatch(java.util.function.IntPredicate)>"
"<java.nio.charset.Charset: java.lang.String toString()>","<java.nio.charset.Charset: java.lang.String toString()>"
"<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>","<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>"
"<java.lang.Character: int getNumericValue(char)>","<java.lang.Character: int getNumericValue(char)>"
"<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>","<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>"
"<android.app.ActionBar$Tab: android.graphics.drawable.Drawable getIcon()>","<android.app.ActionBar$Tab: android.graphics.drawable.Drawable getIcon()>"
"<java.util.List: int indexOf(java.lang.Object)>","<java.util.List: int indexOf(java.lang.Object)>"
"<android.widget.TextView: int getShadowColor()>","<android.widget.TextView: int getShadowColor()>"
"<android.graphics.drawable.LayerDrawable: int getLayerInsetBottom(int)>","<android.graphics.drawable.LayerDrawable: int getLayerInsetBottom(int)>"
"<android.view.WindowInsetsController: void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)>","<android.view.WindowInsetsController: void controlWindowInsetsAnimation(int,long,android.view.animation.Interpolator,android.os.CancellationSignal,android.view.WindowInsetsAnimationControlListener)>"
"<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>","<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>"
"<android.graphics.drawable.LayerDrawable: void getOutline(android.graphics.Outline)>","<android.graphics.drawable.LayerDrawable: void getOutline(android.graphics.Outline)>"
"<java.nio.IntBuffer: java.nio.Buffer position(int)>","<java.nio.IntBuffer: java.nio.Buffer position(int)>"
"<java.util.Spliterator$OfPrimitive: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfPrimitive: java.util.Spliterator$OfPrimitive trySplit()>"
"<android.telephony.TelephonyManager: long getAllowedNetworkTypesForReason(int)>","<android.telephony.TelephonyManager: long getAllowedNetworkTypesForReason(int)>"
"<android.media.AudioRecord: int getAudioSource()>","<android.media.AudioRecord: int getAudioSource()>"
"<android.view.ViewGroup: android.view.View findFocus()>","<android.view.ViewGroup: android.view.View findFocus()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>","<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>"
"<java.util.Dictionary: int size()>","<java.util.Dictionary: int size()>"
"<java.nio.DoubleBuffer: java.lang.Object array()>","<java.nio.DoubleBuffer: java.lang.Object array()>"
"<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.file.spi.FileSystemProvider: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()>","<android.app.Fragment: android.transition.Transition getSharedElementEnterTransition()>"
"<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>","<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>"
"<android.hardware.camera2.CameraOfflineSession: void close()>","<android.hardware.camera2.CameraOfflineSession: void close()>"
"<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>","<java.util.AbstractCollection: boolean containsAll(java.util.Collection)>"
"<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>","<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>"
"<android.view.Display: int getDisplayId()>","<android.view.Display: int getDisplayId()>"
"<android.util.SparseArray: java.lang.String toString()>","<android.util.SparseArray: java.lang.String toString()>"
"<android.content.Intent: int getIntExtra(java.lang.String,int)>","<android.content.Intent: int getIntExtra(java.lang.String,int)>"
"<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.View: boolean canScrollHorizontally(int)>","<android.view.View: boolean canScrollHorizontally(int)>"
"<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()>","<android.hardware.lights.LightsManager: android.hardware.lights.LightsManager$LightsSession openSession()>"
"<android.animation.Animator: void addPauseListener(android.animation.Animator$AnimatorPauseListener)>","<android.animation.Animator: void addPauseListener(android.animation.Animator$AnimatorPauseListener)>"
"<android.widget.AbsListView: void addTouchables(java.util.ArrayList)>","<android.widget.AbsListView: void addTouchables(java.util.ArrayList)>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAcceptsDelayedFocusGain(boolean)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setAcceptsDelayedFocusGain(boolean)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setPrimaryColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setPrimaryColor(int)>"
"<android.os.Debug: int setAllocationLimit(int)>","<android.os.Debug: int setAllocationLimit(int)>"
"<java.time.Month: java.time.Month plus(long)>","<java.time.Month: java.time.Month plus(long)>"
"<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View onCreateView(java.lang.String,android.util.AttributeSet)>"
"<android.view.ViewDebug: void stopHierarchyTracing()>","<android.view.ViewDebug: void stopHierarchyTracing()>"
"<java.lang.invoke.MethodHandleInfo: java.lang.Class getDeclaringClass()>","<java.lang.invoke.MethodHandleInfo: java.lang.Class getDeclaringClass()>"
"<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)>","<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId,int)>"
"<android.content.pm.InstrumentationInfo: int describeContents()>","<android.content.pm.InstrumentationInfo: int describeContents()>"
"<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>","<android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActions(long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActions(long)>"
"<java.util.regex.Matcher: boolean hitEnd()>","<java.util.regex.Matcher: boolean hitEnd()>"
"<java.net.URL: java.lang.String getPath()>","<java.net.URL: java.lang.String getPath()>"
"<android.media.session.MediaController$TransportControls: void seekTo(long)>","<android.media.session.MediaController$TransportControls: void seekTo(long)>"
"<android.media.MediaDrm$PlaybackComponent: android.media.metrics.LogSessionId getLogSessionId()>","<android.media.MediaDrm$PlaybackComponent: android.media.metrics.LogSessionId getLogSessionId()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()>"
"<java.util.concurrent.ExecutorService: boolean isShutdown()>","<java.util.concurrent.ExecutorService: boolean isShutdown()>"
"<java.lang.String: java.lang.String substring(int,int)>","<java.lang.String: java.lang.String substring(int,int)>"
"<android.view.View: void clearFocus()>","<android.view.View: void clearFocus()>"
"<android.widget.TextView: boolean setFrame(int,int,int,int)>","<android.widget.TextView: boolean setFrame(int,int,int,int)>"
"<java.lang.Character: byte getDirectionality(int)>","<java.lang.Character: byte getDirectionality(int)>"
"<android.view.MotionEvent: int getPointerId(int)>","<android.view.MotionEvent: int getPointerId(int)>"
"<java.lang.String: java.lang.String toUpperCase()>","<java.lang.String: java.lang.String toUpperCase()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>","<org.xmlpull.v1.XmlPullParser: java.lang.Object getProperty(java.lang.String)>"
"<java.time.ZoneId: void <clinit>()>","<java.time.ZoneId: void <clinit>()>"
"<java.util.stream.IntStream: int reduce(int,java.util.function.IntBinaryOperator)>","<java.util.stream.IntStream: int reduce(int,java.util.function.IntBinaryOperator)>"
"<java.util.Arrays: void parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)>","<java.util.Arrays: void parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)>"
"<android.graphics.Matrix: float mapRadius(float)>","<android.graphics.Matrix: float mapRadius(float)>"
"<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>"
"<java.security.SignatureException: void <init>(java.lang.String)>","<java.security.SignatureException: void <init>(java.lang.String)>"
"<android.telephony.SignalStrength: java.lang.String toString()>","<android.telephony.SignalStrength: java.lang.String toString()>"
"<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>","<java.util.regex.Pattern: boolean matches(java.lang.String,java.lang.CharSequence)>"
"<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>","<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>"
"<java.net.URLConnection: java.security.Permission getPermission()>","<java.net.URLConnection: java.security.Permission getPermission()>"
"<java.net.UnknownHostException: void <init>()>","<java.net.UnknownHostException: void <init>()>"
"<android.widget.Adapter: java.lang.Object getItem(int)>","<android.widget.Adapter: java.lang.Object getItem(int)>"
"<java.net.DatagramSocket: void disconnect()>","<java.net.DatagramSocket: void disconnect()>"
"<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)>","<android.content.pm.PackageManager: java.util.Set getMimeGroup(java.lang.String)>"
"<android.app.Activity: void onUserInteraction()>","<android.app.Activity: void onUserInteraction()>"
"<android.animation.Animator: void removeAllListeners()>","<android.animation.Animator: void removeAllListeners()>"
"<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>","<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator zBy(float)>"
"<java.net.URL: java.io.InputStream openStream()>","<java.net.URL: java.io.InputStream openStream()>"
"<android.graphics.drawable.Drawable: int[] getState()>","<android.graphics.drawable.Drawable: int[] getState()>"
"<android.content.ContentProviderResult: java.lang.String toString()>","<android.content.ContentProviderResult: java.lang.String toString()>"
"<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>","<android.os.BaseBundle: boolean getBoolean(java.lang.String,boolean)>"
"<android.view.WindowInsetsAnimationController: void setInsetsAndAlpha(android.graphics.Insets,float,float)>","<android.view.WindowInsetsAnimationController: void setInsetsAndAlpha(android.graphics.Insets,float,float)>"
"<java.lang.Math: float copySign(float,float)>","<java.lang.Math: float copySign(float,float)>"
"<java.lang.Number: short shortValue()>","<java.lang.Number: short shortValue()>"
"<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>","<java.util.Spliterator$OfDouble: boolean tryAdvance(java.util.function.DoubleConsumer)>"
"<android.content.IntentFilter: void <init>()>","<android.content.IntentFilter: void <init>()>"
"<android.content.res.TypedArray: int getSourceResourceId(int,int)>","<android.content.res.TypedArray: int getSourceResourceId(int,int)>"
"<java.util.OptionalLong: boolean equals(java.lang.Object)>","<java.util.OptionalLong: boolean equals(java.lang.Object)>"
"<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>","<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>"
"<java.util.Collection: boolean containsAll(java.util.Collection)>","<java.util.Collection: boolean containsAll(java.util.Collection)>"
"<android.graphics.Paint: float getFontSpacing()>","<android.graphics.Paint: float getFontSpacing()>"
"<android.view.ViewGroup: int getChildCount()>","<android.view.ViewGroup: int getChildCount()>"
"<java.util.regex.Matcher: int start()>","<java.util.regex.Matcher: int start()>"
"<java.lang.ref.Reference: boolean refersTo(java.lang.Object)>","<java.lang.ref.Reference: boolean refersTo(java.lang.Object)>"
"<android.view.View: void onWindowSystemUiVisibilityChanged(int)>","<android.view.View: void onWindowSystemUiVisibilityChanged(int)>"
"<android.hardware.camera2.CaptureRequest$Builder: void removeTarget(android.view.Surface)>","<android.hardware.camera2.CaptureRequest$Builder: void removeTarget(android.view.Surface)>"
"<android.os.PatternMatcher: void <clinit>()>","<android.os.PatternMatcher: void <clinit>()>"
"<android.view.View: boolean isVisibleToUserForAutofill(int)>","<android.view.View: boolean isVisibleToUserForAutofill(int)>"
"<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>","<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>"
"<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>","<android.content.Context: java.io.File[] getExternalFilesDirs(java.lang.String)>"
"<java.net.URL: int hashCode()>","<java.net.URL: int hashCode()>"
"<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>","<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>"
"<android.content.Context: java.io.File getObbDir()>","<android.content.Context: java.io.File getObbDir()>"
"<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>","<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>"
"<android.app.assist.AssistContent: void setClipData(android.content.ClipData)>","<android.app.assist.AssistContent: void setClipData(android.content.ClipData)>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>","<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>"
"<java.time.LocalDate: java.time.OffsetDateTime atTime(java.time.OffsetTime)>","<java.time.LocalDate: java.time.OffsetDateTime atTime(java.time.OffsetTime)>"
"<java.lang.ClassCastException: void <init>()>","<java.lang.ClassCastException: void <init>()>"
"<android.view.animation.Animation: boolean willChangeTransformationMatrix()>","<android.view.animation.Animation: boolean willChangeTransformationMatrix()>"
"<java.time.chrono.ChronoZonedDateTime: long toEpochSecond()>","<java.time.chrono.ChronoZonedDateTime: long toEpochSecond()>"
"<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>","<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>"
"<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>","<java.lang.Long: java.lang.Long valueOf(java.lang.String,int)>"
"<android.hardware.camera2.params.SessionConfiguration: boolean equals(java.lang.Object)>","<android.hardware.camera2.params.SessionConfiguration: boolean equals(java.lang.Object)>"
"<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()>","<android.media.session.PlaybackState: java.lang.CharSequence getErrorMessage()>"
"<android.view.View: int getBottomPaddingOffset()>","<android.view.View: int getBottomPaddingOffset()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)>"
"<java.net.URLConnection: void <init>(java.net.URL)>","<java.net.URLConnection: void <init>(java.net.URL)>"
"<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>","<android.view.MenuItem: android.view.MenuItem setEnabled(boolean)>"
"<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.util.ArrayMap: void forEach(java.util.function.BiConsumer)>","<android.util.ArrayMap: void forEach(java.util.function.BiConsumer)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)>"
"<android.view.textclassifier.SelectionEvent: int getSmartStart()>","<android.view.textclassifier.SelectionEvent: int getSmartStart()>"
"<android.media.AudioMetadataReadMap: int size()>","<android.media.AudioMetadataReadMap: int size()>"
"<android.view.Window$Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.view.Window$Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.widget.AbsListView: void onTouchModeChanged(boolean)>","<android.widget.AbsListView: void onTouchModeChanged(boolean)>"
"<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>","<android.view.ViewOverlay: void remove(android.graphics.drawable.Drawable)>"
"<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>","<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>"
"<android.hardware.SensorManager: float getInclination(float[])>","<android.hardware.SensorManager: float getInclination(float[])>"
"<android.os.Parcel: void setDataCapacity(int)>","<android.os.Parcel: void setDataCapacity(int)>"
"<java.lang.Double: short shortValue()>","<java.lang.Double: short shortValue()>"
"<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>","<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>"
"<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader,java.lang.Class)>"
"<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>","<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>"
"<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>","<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>"
"<android.graphics.RenderNode: boolean setScaleX(float)>","<android.graphics.RenderNode: boolean setScaleX(float)>"
"<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>","<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>"
"<android.text.style.ClickableSpan: void onClick(android.view.View)>","<android.text.style.ClickableSpan: void onClick(android.view.View)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>","<android.content.res.Configuration: void setLayoutDirection(java.util.Locale)>"
"<android.app.Activity: boolean isInPictureInPictureMode()>","<android.app.Activity: boolean isInPictureInPictureMode()>"
"<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>","<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawablesRelative()>"
"<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>","<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>"
"<java.lang.ref.Reference: void reachabilityFence(java.lang.Object)>","<java.lang.ref.Reference: void reachabilityFence(java.lang.Object)>"
"<android.hardware.Camera$OnZoomChangeListener: void onZoomChange(int,boolean,android.hardware.Camera)>","<android.hardware.Camera$OnZoomChangeListener: void onZoomChange(int,boolean,android.hardware.Camera)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>","<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>"
"<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>","<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)>"
"<java.util.Locale: java.lang.String getDisplayLanguage()>","<java.util.Locale: java.lang.String getDisplayLanguage()>"
"<android.hardware.Camera$Parameters: int getInt(java.lang.String)>","<android.hardware.Camera$Parameters: int getInt(java.lang.String)>"
"<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>","<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()>","<android.hardware.Camera$Parameters: java.util.List getSupportedPictureFormats()>"
"<java.lang.Enum: java.lang.Object clone()>","<java.lang.Enum: java.lang.Object clone()>"
"<java.lang.String: java.lang.String valueOf(int)>","<java.lang.String: java.lang.String valueOf(int)>"
"<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>","<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>"
"<android.util.LongSparseArray: java.lang.Object clone()>","<android.util.LongSparseArray: java.lang.Object clone()>"
"<android.graphics.drawable.LayerDrawable: boolean getPadding(android.graphics.Rect)>","<android.graphics.drawable.LayerDrawable: boolean getPadding(android.graphics.Rect)>"
"<java.net.Proxy: java.net.Proxy$Type type()>","<java.net.Proxy: java.net.Proxy$Type type()>"
"<java.util.OptionalInt: int hashCode()>","<java.util.OptionalInt: int hashCode()>"
"<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>","<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>"
"<java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)>","<java.util.Collections: int lastIndexOfSubList(java.util.List,java.util.List)>"
"<android.view.textclassifier.TextLinks: void <init>()>","<android.view.textclassifier.TextLinks: void <init>()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)>"
"<android.view.translation.ViewTranslationResponse: int hashCode()>","<android.view.translation.ViewTranslationResponse: int hashCode()>"
"<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEvent(int)>","<android.view.accessibility.AccessibilityEventSource: void sendAccessibilityEvent(int)>"
"<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.ListView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>","<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>"
"<android.content.Context: boolean deleteDatabase(java.lang.String)>","<android.content.Context: boolean deleteDatabase(java.lang.String)>"
"<java.util.Collections: void shuffle(java.util.List)>","<java.util.Collections: void shuffle(java.util.List)>"
"<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>","<java.nio.CharBuffer: java.nio.CharBuffer put(char[])>"
"<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()>","<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()>"
"<android.media.MediaPlayer: void setOnTimedMetaDataAvailableListener(android.media.MediaPlayer$OnTimedMetaDataAvailableListener)>","<android.media.MediaPlayer: void setOnTimedMetaDataAvailableListener(android.media.MediaPlayer$OnTimedMetaDataAvailableListener)>"
"<java.time.chrono.ChronoZonedDateTime: java.util.Comparator timeLineOrder()>","<java.time.chrono.ChronoZonedDateTime: java.util.Comparator timeLineOrder()>"
"<android.app.AlertDialog: void <init>(android.content.Context)>","<android.app.AlertDialog: void <init>(android.content.Context)>"
"<android.graphics.Path: void <init>()>","<android.graphics.Path: void <init>()>"
"<android.telephony.TelephonyManager: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>","<android.telephony.TelephonyManager: android.telecom.PhoneAccountHandle getPhoneAccountHandle()>"
"<android.view.View: void autofill(android.util.SparseArray)>","<android.view.View: void autofill(android.util.SparseArray)>"
"<android.view.View: int getMinimumWidth()>","<android.view.View: int getMinimumWidth()>"
"<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>","<android.view.inputmethod.InputMethodManager: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerBaseline()>"
"<android.media.MediaMetadataEditor: android.graphics.Bitmap getBitmap(int,android.graphics.Bitmap)>","<android.media.MediaMetadataEditor: android.graphics.Bitmap getBitmap(int,android.graphics.Bitmap)>"
"<android.widget.RelativeLayout: void setGravity(int)>","<android.widget.RelativeLayout: void setGravity(int)>"
"<android.view.Window: void setGravity(int)>","<android.view.Window: void setGravity(int)>"
"<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>"
"<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>","<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>"
"<android.content.BroadcastReceiver$PendingResult: int getResultCode()>","<android.content.BroadcastReceiver$PendingResult: int getResultCode()>"
"<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>","<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>"
"<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,int)>","<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,int)>"
"<android.net.ConnectivityManager: int getRestrictBackgroundStatus()>","<android.net.ConnectivityManager: int getRestrictBackgroundStatus()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getValidOutputFormatsForInput(int)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getValidOutputFormatsForInput(int)>"
"<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>","<android.media.AudioTrack: void setOffloadDelayPadding(int,int)>"
"<java.time.chrono.Chronology: java.time.chrono.Chronology of(java.lang.String)>","<java.time.chrono.Chronology: java.time.chrono.Chronology of(java.lang.String)>"
"<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>","<android.telephony.CellLocation: android.telephony.CellLocation getEmpty()>"
"<android.view.Display$HdrCapabilities: boolean equals(java.lang.Object)>","<android.view.Display$HdrCapabilities: boolean equals(java.lang.Object)>"
"<java.util.Arrays: void <init>()>","<java.util.Arrays: void <init>()>"
"<android.content.ContextWrapper: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.ContextWrapper: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>","<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>"
"<android.telephony.TelephonyManager: void setNetworkSelectionModeAutomatic()>","<android.telephony.TelephonyManager: void setNetworkSelectionModeAutomatic()>"
"<android.accounts.Account: int hashCode()>","<android.accounts.Account: int hashCode()>"
"<android.view.View: void setFocusable(int)>","<android.view.View: void setFocusable(int)>"
"<android.content.res.loader.ResourcesLoader: void <init>()>","<android.content.res.loader.ResourcesLoader: void <init>()>"
"<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>","<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>"
"<android.hardware.camera2.params.SessionConfiguration: int hashCode()>","<android.hardware.camera2.params.SessionConfiguration: int hashCode()>"
"<android.graphics.Path: boolean isRect(android.graphics.RectF)>","<android.graphics.Path: boolean isRect(android.graphics.RectF)>"
"<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>","<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>"
"<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>","<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>"
"<android.os.Handler: boolean hasMessages(int)>","<android.os.Handler: boolean hasMessages(int)>"
"<android.hardware.display.VirtualDisplay$Callback: void <init>()>","<android.hardware.display.VirtualDisplay$Callback: void <init>()>"
"<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void processingInstruction(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFallback(java.lang.String)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFallback(java.lang.String)>"
"<android.view.textclassifier.ConversationActions$Request: void <clinit>()>","<android.view.textclassifier.ConversationActions$Request: void <clinit>()>"
"<android.view.View: boolean performClick()>","<android.view.View: boolean performClick()>"
"<android.app.ActivityManager$TaskDescription$Builder: void <init>()>","<android.app.ActivityManager$TaskDescription$Builder: void <init>()>"
"<android.database.sqlite.SQLiteTransactionListener: void onCommit()>","<android.database.sqlite.SQLiteTransactionListener: void onCommit()>"
"<android.content.Context: android.os.Looper getMainLooper()>","<android.content.Context: android.os.Looper getMainLooper()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View)>"
"<java.util.OptionalLong: java.util.OptionalLong of(long)>","<java.util.OptionalLong: java.util.OptionalLong of(long)>"
"<android.hardware.camera2.MultiResolutionImageReader: android.view.Surface getSurface()>","<android.hardware.camera2.MultiResolutionImageReader: android.view.Surface getSurface()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(java.lang.Class)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputSizes(java.lang.Class)>"
"<java.time.ZoneOffset: int compareTo(java.lang.Object)>","<java.time.ZoneOffset: int compareTo(java.lang.Object)>"
"<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>"
"<android.view.ViewTreeObserver$OnScrollChangedListener: void onScrollChanged()>","<android.view.ViewTreeObserver$OnScrollChangedListener: void onScrollChanged()>"
"<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>","<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
"<java.net.ServerSocket: java.util.Set supportedOptions()>","<java.net.ServerSocket: java.util.Set supportedOptions()>"
"<android.media.AudioRecord: int read(byte[],int,int,int)>","<android.media.AudioRecord: int read(byte[],int,int,int)>"
"<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>","<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>"
"<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>","<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])>"
"<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>","<android.hardware.Camera$Parameters: void setJpegThumbnailSize(int,int)>"
"<android.view.ViewGroup: int getChildDrawingOrder(int)>","<android.view.ViewGroup: int getChildDrawingOrder(int)>"
"<java.net.NetworkInterface: java.lang.String toString()>","<java.net.NetworkInterface: java.lang.String toString()>"
"<java.time.chrono.IsoEra: void <clinit>()>","<java.time.chrono.IsoEra: void <clinit>()>"
"<java.net.DatagramSocketImpl: java.util.Set supportedOptions()>","<java.net.DatagramSocketImpl: java.util.Set supportedOptions()>"
"<android.view.View: boolean isScrollbarFadingEnabled()>","<android.view.View: boolean isScrollbarFadingEnabled()>"
"<android.content.ContentProviderResult: void <init>(int)>","<android.content.ContentProviderResult: void <init>(int)>"
"<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)>","<android.telephony.TelephonyManager: boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)>"
"<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>","<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>"
"<android.media.metrics.LogSessionId: java.lang.String toString()>","<android.media.metrics.LogSessionId: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>","<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>"
"<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.view.View: int getBottom()>","<android.view.View: int getBottom()>"
"<java.nio.ByteBuffer: java.nio.Buffer reset()>","<java.nio.ByteBuffer: java.nio.Buffer reset()>"
"<android.media.AudioTrack: void setState(int)>","<android.media.AudioTrack: void setState(int)>"
"<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList)>","<android.widget.RemoteViews: void setColorStateList(int,java.lang.String,android.content.res.ColorStateList)>"
"<android.content.Intent: boolean hasExtra(java.lang.String)>","<android.content.Intent: boolean hasExtra(java.lang.String)>"
"<android.widget.RemoteViews: void setCompoundButtonChecked(int,boolean)>","<android.widget.RemoteViews: void setCompoundButtonChecked(int,boolean)>"
"<java.net.URL: java.lang.String getQuery()>","<java.net.URL: java.lang.String getQuery()>"
"<android.widget.Button: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.widget.Button: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<java.lang.invoke.MethodHandleInfo: java.lang.String getName()>","<java.lang.invoke.MethodHandleInfo: java.lang.String getName()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)>"
"<android.app.Activity: void onLowMemory()>","<android.app.Activity: void onLowMemory()>"
"<java.security.PermissionCollection: java.util.Enumeration elements()>","<java.security.PermissionCollection: java.util.Enumeration elements()>"
"<android.hardware.Camera: void lock()>","<android.hardware.Camera: void lock()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findSetter(java.lang.Class,java.lang.String,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findSetter(java.lang.Class,java.lang.String,java.lang.Class)>"
"<android.content.pm.ResolveInfo: void <init>()>","<android.content.pm.ResolveInfo: void <init>()>"
"<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor[] queryEffects()>","<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor[] queryEffects()>"
"<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<android.os.Parcel: void setDataPosition(int)>","<android.os.Parcel: void setDataPosition(int)>"
"<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>","<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>"
"<android.text.PrecomputedText: int getParagraphEnd(int)>","<android.text.PrecomputedText: int getParagraphEnd(int)>"
"<android.app.FragmentManager: java.util.List getFragments()>","<android.app.FragmentManager: java.util.List getFragments()>"
"<android.media.MediaPlayer$TrackInfo: java.lang.String toString()>","<android.media.MediaPlayer$TrackInfo: java.lang.String toString()>"
"<java.time.LocalDateTime: boolean equals(java.lang.Object)>","<java.time.LocalDateTime: boolean equals(java.lang.Object)>"
"<android.util.ArrayMap: void <init>(android.util.ArrayMap)>","<android.util.ArrayMap: void <init>(android.util.ArrayMap)>"
"<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>"
"<android.content.ClipDescription: int describeContents()>","<android.content.ClipDescription: int describeContents()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
"<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>","<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>"
"<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>","<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>"
"<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>","<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>"
"<android.graphics.RuntimeShader: void <init>(java.lang.String)>","<android.graphics.RuntimeShader: void <init>(java.lang.String)>"
"<java.time.Period: java.time.Period plusDays(long)>","<java.time.Period: java.time.Period plusDays(long)>"
"<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>"
"<java.util.AbstractList: boolean addAll(int,java.util.Collection)>","<java.util.AbstractList: boolean addAll(int,java.util.Collection)>"
"<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>","<java.lang.Class: java.lang.reflect.Type getGenericSuperclass()>"
"<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.SignatureException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.Long: long min(long,long)>","<java.lang.Long: long min(long,long)>"
"<android.graphics.drawable.BitmapDrawable: void onBoundsChange(android.graphics.Rect)>","<android.graphics.drawable.BitmapDrawable: void onBoundsChange(android.graphics.Rect)>"
"<java.lang.Float: float max(float,float)>","<java.lang.Float: float max(float,float)>"
"<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>","<android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()>"
"<android.view.DragEvent: java.lang.Object getLocalState()>","<android.view.DragEvent: java.lang.Object getLocalState()>"
"<android.view.InputEvent: int getSource()>","<android.view.InputEvent: int getSource()>"
"<android.graphics.BlendMode: android.graphics.BlendMode valueOf(java.lang.String)>","<android.graphics.BlendMode: android.graphics.BlendMode valueOf(java.lang.String)>"
"<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>","<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>"
"<android.text.method.MovementMethod: boolean canSelectArbitrarily()>","<android.text.method.MovementMethod: boolean canSelectArbitrarily()>"
"<android.app.ActivityManager$TaskDescription: void <clinit>()>","<android.app.ActivityManager$TaskDescription: void <clinit>()>"
"<java.lang.Math: double scalb(double,int)>","<java.lang.Math: double scalb(double,int)>"
"<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: void validateSql(java.lang.String,android.os.CancellationSignal)>"
"<java.net.URI: java.lang.String getAuthority()>","<java.net.URI: java.lang.String getAuthority()>"
"<java.nio.file.WatchEvent$Modifier: java.lang.String name()>","<java.nio.file.WatchEvent$Modifier: java.lang.String name()>"
"<java.lang.Integer: java.lang.String toBinaryString(int)>","<java.lang.Integer: java.lang.String toBinaryString(int)>"
"<android.media.AudioFormat$Builder: void <init>(android.media.AudioFormat)>","<android.media.AudioFormat$Builder: void <init>(android.media.AudioFormat)>"
"<android.app.PictureInPictureParams: boolean isSeamlessResizeEnabled()>","<android.app.PictureInPictureParams: boolean isSeamlessResizeEnabled()>"
"<android.media.RemoteControlClient: void setPlaybackPositionUpdateListener(android.media.RemoteControlClient$OnPlaybackPositionUpdateListener)>","<android.media.RemoteControlClient: void setPlaybackPositionUpdateListener(android.media.RemoteControlClient$OnPlaybackPositionUpdateListener)>"
"<android.database.sqlite.SQLiteDatabase: void setVersion(int)>","<android.database.sqlite.SQLiteDatabase: void setVersion(int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncOnce()>"
"<android.app.Fragment: android.view.View getView()>","<android.app.Fragment: android.view.View getView()>"
"<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>","<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>"
"<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList(int)>","<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList(int)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"
"<android.view.View: void setOnReceiveContentListener(java.lang.String[],android.view.OnReceiveContentListener)>","<android.view.View: void setOnReceiveContentListener(java.lang.String[],android.view.OnReceiveContentListener)>"
"<android.hardware.camera2.CameraExtensionCharacteristics: java.util.Set getAvailableCaptureRequestKeys(int)>","<android.hardware.camera2.CameraExtensionCharacteristics: java.util.Set getAvailableCaptureRequestKeys(int)>"
"<android.media.AudioDeviceInfo: java.util.List getAudioDescriptors()>","<android.media.AudioDeviceInfo: java.util.List getAudioDescriptors()>"
"<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>"
"<android.media.Session2Token: void <clinit>()>","<android.media.Session2Token: void <clinit>()>"
"<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>","<android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)>"
"<java.net.Socket: java.net.Socket setOption(java.net.SocketOption,java.lang.Object)>","<java.net.Socket: java.net.Socket setOption(java.net.SocketOption,java.lang.Object)>"
"<java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>","<java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>"
"<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig build()>","<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig build()>"
"<android.content.res.AssetFileDescriptor: void close()>","<android.content.res.AssetFileDescriptor: void close()>"
"<android.media.RemoteControlClient$MetadataEditor: void apply()>","<android.media.RemoteControlClient$MetadataEditor: void apply()>"
"<android.app.Fragment: void setSharedElementEnterTransition(android.transition.Transition)>","<android.app.Fragment: void setSharedElementEnterTransition(android.transition.Transition)>"
"<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>","<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>"
"<android.view.MenuItem: android.view.MenuItem setIcon(int)>","<android.view.MenuItem: android.view.MenuItem setIcon(int)>"
"<android.graphics.Paint: float getUnderlinePosition()>","<android.graphics.Paint: float getUnderlinePosition()>"
"<android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>","<android.view.inputmethod.InputConnection: boolean commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)>"
"<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>","<android.view.ViewGroup$MarginLayoutParams: int getMarginEnd()>"
"<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>","<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup)>"
"<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.content.Context: void setWallpaper(java.io.InputStream)>","<android.content.Context: void setWallpaper(java.io.InputStream)>"
"<android.media.AudioManager: java.util.List getDirectProfilesForAttributes(android.media.AudioAttributes)>","<android.media.AudioManager: java.util.List getDirectProfilesForAttributes(android.media.AudioAttributes)>"
"<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>","<android.database.Cursor: void unregisterContentObserver(android.database.ContentObserver)>"
"<java.text.AttributedCharacterIterator: int getRunLimit()>","<java.text.AttributedCharacterIterator: int getRunLimit()>"
"<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>","<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>"
"<android.app.Activity: void setResult(int)>","<android.app.Activity: void setResult(int)>"
"<android.view.contentcapture.ContentCaptureContext: int describeContents()>","<android.view.contentcapture.ContentCaptureContext: int describeContents()>"
"<java.util.Iterator: java.lang.Object next()>","<java.util.Iterator: java.lang.Object next()>"
"<java.nio.DoubleBuffer: double[] array()>","<java.nio.DoubleBuffer: double[] array()>"
"<android.text.ClipboardManager: void setText(java.lang.CharSequence)>","<android.text.ClipboardManager: void setText(java.lang.CharSequence)>"
"<android.widget.TextView: void onWindowFocusChanged(boolean)>","<android.widget.TextView: void onWindowFocusChanged(boolean)>"
"<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator compose(java.util.function.LongUnaryOperator)>","<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator compose(java.util.function.LongUnaryOperator)>"
"<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)>","<android.content.ClipDescription: void setExtras(android.os.PersistableBundle)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)>"
"<java.util.HashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.HashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.nio.IntBuffer: java.nio.IntBuffer put(int)>","<java.nio.IntBuffer: java.nio.IntBuffer put(int)>"
"<android.telephony.TelephonyManager: void clearSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)>","<android.telephony.TelephonyManager: void clearSignalStrengthUpdateRequest(android.telephony.SignalStrengthUpdateRequest)>"
"<java.util.regex.MatchResult: int start()>","<java.util.regex.MatchResult: int start()>"
"<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>","<android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>"
"<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener)>","<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener)>"
"<java.time.Clock: java.time.Clock tick(java.time.Clock,java.time.Duration)>","<java.time.Clock: java.time.Clock tick(java.time.Clock,java.time.Duration)>"
"<android.view.KeyCharacterMap: char getDisplayLabel(int)>","<android.view.KeyCharacterMap: char getDisplayLabel(int)>"
"<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUids()>","<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUids()>"
"<android.hardware.camera2.CameraExtensionSession$StateCallback: void onClosed(android.hardware.camera2.CameraExtensionSession)>","<android.hardware.camera2.CameraExtensionSession$StateCallback: void onClosed(android.hardware.camera2.CameraExtensionSession)>"
"<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<android.widget.TextView: void setTextSize(int,float)>","<android.widget.TextView: void setTextSize(int,float)>"
"<java.util.Collections: java.util.List singletonList(java.lang.Object)>","<java.util.Collections: java.util.List singletonList(java.lang.Object)>"
"<android.media.AudioTrack: int setStartThresholdInFrames(int)>","<android.media.AudioTrack: int setStartThresholdInFrames(int)>"
"<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>","<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>"
"<android.animation.ValueAnimator: void end()>","<android.animation.ValueAnimator: void end()>"
"<android.media.VolumeShaper$Configuration: void <init>()>","<android.media.VolumeShaper$Configuration: void <init>()>"
"<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.view.View: void <clinit>()>","<android.view.View: void <clinit>()>"
"<android.animation.PropertyValuesHolder: void setFloatValues(float[])>","<android.animation.PropertyValuesHolder: void setFloatValues(float[])>"
"<android.net.IpPrefix: byte[] getRawAddress()>","<android.net.IpPrefix: byte[] getRawAddress()>"
"<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.locks.Lock: boolean tryLock(long,java.util.concurrent.TimeUnit)>"
"<java.time.temporal.TemporalUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>","<java.time.temporal.TemporalUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
"<android.graphics.Rect: void offsetTo(int,int)>","<android.graphics.Rect: void offsetTo(int,int)>"
"<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>","<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>"
"<java.io.PrintWriter: void print(long)>","<java.io.PrintWriter: void print(long)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,android.os.UserHandle,android.graphics.Rect,int)>"
"<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>","<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>"
"<android.provider.Settings$NameValueTable: void <init>()>","<android.provider.Settings$NameValueTable: void <init>()>"
"<android.net.Uri$Builder: void <init>()>","<android.net.Uri$Builder: void <init>()>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setWeight(int)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setWeight(int)>"
"<android.graphics.Paint: float measureText(java.lang.String)>","<android.graphics.Paint: float measureText(java.lang.String)>"
"<android.widget.RemoteViews: void <init>(android.os.Parcel)>","<android.widget.RemoteViews: void <init>(android.os.Parcel)>"
"<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.time.LocalTime: java.time.LocalTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.LocalTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.media.audiofx.AudioEffect: void release()>","<android.media.audiofx.AudioEffect: void release()>"
"<android.net.ConnectivityManager$NetworkCallback: void onLost(android.net.Network)>","<android.net.ConnectivityManager$NetworkCallback: void onLost(android.net.Network)>"
"<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>","<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>"
"<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)>","<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)>"
"<android.app.RemoteAction: java.lang.CharSequence getTitle()>","<android.app.RemoteAction: java.lang.CharSequence getTitle()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseAnd(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseAnd(java.lang.Object[])>"
"<android.telephony.RadioAccessSpecifier: int[] getChannels()>","<android.telephony.RadioAccessSpecifier: int[] getChannels()>"
"<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>","<android.hardware.camera2.CameraCaptureSession: int capture(android.hardware.camera2.CaptureRequest,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>"
"<android.widget.AbsListView: int computeVerticalScrollRange()>","<android.widget.AbsListView: int computeVerticalScrollRange()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>"
"<android.view.ViewStructure: void setDataIsSensitive(boolean)>","<android.view.ViewStructure: void setDataIsSensitive(boolean)>"
"<android.view.View: void onLayout(boolean,int,int,int,int)>","<android.view.View: void onLayout(boolean,int,int,int,int)>"
"<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>","<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>"
"<java.time.chrono.IsoEra: java.time.chrono.IsoEra of(int)>","<java.time.chrono.IsoEra: java.time.chrono.IsoEra of(int)>"
"<java.util.stream.Stream: java.util.Optional reduce(java.util.function.BinaryOperator)>","<java.util.stream.Stream: java.util.Optional reduce(java.util.function.BinaryOperator)>"
"<android.view.View: int resolveSize(int,int)>","<android.view.View: int resolveSize(int,int)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.media.VolumeShaper$Operation: void <init>()>","<android.media.VolumeShaper$Operation: void <init>()>"
"<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.widget.Toolbar: android.view.Menu getMenu()>","<android.widget.Toolbar: android.view.Menu getMenu()>"
"<android.content.ContextWrapper: android.content.Context createAttributionContext(java.lang.String)>","<android.content.ContextWrapper: android.content.Context createAttributionContext(java.lang.String)>"
"<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>","<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>"
"<android.view.inputmethod.EditorInfo: void <clinit>()>","<android.view.inputmethod.EditorInfo: void <clinit>()>"
"<android.icu.util.ULocale: java.lang.String getFallback(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getFallback(java.lang.String)>"
"<android.util.SparseArray: void remove(int)>","<android.util.SparseArray: void remove(int)>"
"<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>","<java.lang.ClassLoader: java.lang.String findLibrary(java.lang.String)>"
"<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.widget.AdapterView: void removeViewAt(int)>","<android.widget.AdapterView: void removeViewAt(int)>"
"<java.lang.SecurityManager: int classDepth(java.lang.String)>","<java.lang.SecurityManager: int classDepth(java.lang.String)>"
"<java.io.File: int compareTo(java.io.File)>","<java.io.File: int compareTo(java.io.File)>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setClip(android.content.ClipData)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setClip(android.content.ClipData)>"
"<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>","<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>"
"<android.hardware.SensorListener: void onAccuracyChanged(int,int)>","<android.hardware.SensorListener: void onAccuracyChanged(int,int)>"
"<android.view.View: android.view.View findViewById(int)>","<android.view.View: android.view.View findViewById(int)>"
"<android.app.ActionBar: void setSubtitle(int)>","<android.app.ActionBar: void setSubtitle(int)>"
"<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>","<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>"
"<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.Consumer)>"
"<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>","<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>"
"<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>","<android.view.inputmethod.InputMethodManager: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>"
"<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>","<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListener(android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setOnAudioFocusChangeListener(android.media.AudioManager$OnAudioFocusChangeListener,android.os.Handler)>"
"<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>","<android.widget.Adapter: android.view.View getView(int,android.view.View,android.view.ViewGroup)>"
"<android.animation.Animator: void resume()>","<android.animation.Animator: void resume()>"
"<java.lang.Long: long parseUnsignedLong(java.lang.CharSequence,int,int,int)>","<java.lang.Long: long parseUnsignedLong(java.lang.CharSequence,int,int,int)>"
"<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>","<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>"
"<java.lang.StackTraceElement: java.lang.String toString()>","<java.lang.StackTraceElement: java.lang.String toString()>"
"<android.telephony.SignalStrengthUpdateRequest: void <init>()>","<android.telephony.SignalStrengthUpdateRequest: void <init>()>"
"<android.content.pm.ResolveInfo: boolean isCrossProfileIntentForwarderActivity()>","<android.content.pm.ResolveInfo: boolean isCrossProfileIntentForwarderActivity()>"
"<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>","<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()>","<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()>"
"<android.view.View: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>","<android.view.View: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>"
"<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener)>","<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener)>"
"<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>","<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction hide(android.app.Fragment)>"
"<android.content.ComponentName: java.lang.String flattenToString()>","<android.content.ComponentName: java.lang.String flattenToString()>"
"<java.util.stream.Stream: java.util.stream.Stream generate(java.util.function.Supplier)>","<java.util.stream.Stream: java.util.stream.Stream generate(java.util.function.Supplier)>"
"<android.media.AudioTrack: int getStartThresholdInFrames()>","<android.media.AudioTrack: int getStartThresholdInFrames()>"
"<android.widget.Toolbar: java.lang.CharSequence getSubtitle()>","<android.widget.Toolbar: java.lang.CharSequence getSubtitle()>"
"<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void attachViewToParent(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<android.widget.RemoteViews: void setEmptyView(int,int)>","<android.widget.RemoteViews: void setEmptyView(int,int)>"
"<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)>","<android.view.ViewGroup: void dispatchVisibilityChanged(android.view.View,int)>"
"<android.view.LayoutInflater$Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.view.LayoutInflater$Factory: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<android.os.Message: void recycle()>","<android.os.Message: void recycle()>"
"<java.nio.channels.SocketChannel: java.net.Socket socket()>","<java.nio.channels.SocketChannel: java.net.Socket socket()>"
"<android.content.Loader: void onStartLoading()>","<android.content.Loader: void onStartLoading()>"
"<android.util.SparseBooleanArray: int indexOfValue(boolean)>","<android.util.SparseBooleanArray: int indexOfValue(boolean)>"
"<java.security.InvalidKeyException: void <init>(java.lang.String)>","<java.security.InvalidKeyException: void <init>(java.lang.String)>"
"<java.io.File: java.io.File getCanonicalFile()>","<java.io.File: java.io.File getCanonicalFile()>"
"<android.util.LongSparseArray: void append(long,java.lang.Object)>","<android.util.LongSparseArray: void append(long,java.lang.Object)>"
"<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.SocketChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<android.widget.AbsListView: int computeVerticalScrollOffset()>","<android.widget.AbsListView: int computeVerticalScrollOffset()>"
"<java.nio.ShortBuffer: java.nio.Buffer reset()>","<java.nio.ShortBuffer: java.nio.Buffer reset()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(int)>"
"<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>","<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>"
"<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)>","<android.telephony.TelephonyManager: void setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)>"
"<android.util.LongSparseArray: void clear()>","<android.util.LongSparseArray: void clear()>"
"<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>","<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>"
"<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>","<android.app.ActionBar: void setDisplayHomeAsUpEnabled(boolean)>"
"<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)>","<android.view.contentcapture.ContentCaptureContext: android.view.contentcapture.ContentCaptureContext forLocusId(java.lang.String)>"
"<android.media.AudioDeviceInfo: int[] getChannelCounts()>","<android.media.AudioDeviceInfo: int[] getChannelCounts()>"
"<android.view.View: int getWidth()>","<android.view.View: int getWidth()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>"
"<android.view.animation.Animation: void scaleCurrentDuration(float)>","<android.view.animation.Animation: void scaleCurrentDuration(float)>"
"<android.view.ViewGroup: void removeViewAt(int)>","<android.view.ViewGroup: void removeViewAt(int)>"
"<java.nio.charset.Charset: java.lang.String displayName()>","<java.nio.charset.Charset: java.lang.String displayName()>"
"<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>","<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>"
"<android.media.MediaPlayer: int getDuration()>","<android.media.MediaPlayer: int getDuration()>"
"<android.view.InputDevice: int getControllerNumber()>","<android.view.InputDevice: int getControllerNumber()>"
"<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>","<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<java.time.OffsetDateTime: long toEpochSecond()>","<java.time.OffsetDateTime: long toEpochSecond()>"
"<android.widget.AbsListView: void onGlobalLayout()>","<android.widget.AbsListView: void onGlobalLayout()>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress,int)>"
"<android.hardware.Camera$Parameters: int getZoom()>","<android.hardware.Camera$Parameters: int getZoom()>"
"<android.hardware.camera2.CaptureRequest: void <clinit>()>","<android.hardware.camera2.CaptureRequest: void <clinit>()>"
"<android.os.Handler: android.os.Handler createAsync(android.os.Looper)>","<android.os.Handler: android.os.Handler createAsync(android.os.Looper)>"
"<java.lang.ClassLoader: void resolveClass(java.lang.Class)>","<java.lang.ClassLoader: void resolveClass(java.lang.Class)>"
"<android.app.ActionBar: void setNavigationMode(int)>","<android.app.ActionBar: void setNavigationMode(int)>"
"<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()>","<android.hardware.SensorManager: boolean isDynamicSensorDiscoverySupported()>"
"<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraAvailable(java.lang.String,java.lang.String)>","<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraAvailable(java.lang.String,java.lang.String)>"
"<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)>","<android.widget.RemoteViews: void setTextViewCompoundDrawablesRelative(int,int,int,int,int)>"
"<android.content.pm.Signature: void <init>(java.lang.String)>","<android.content.pm.Signature: void <init>(java.lang.String)>"
"<java.io.Writer: void write(char[],int,int)>","<java.io.Writer: void write(char[],int,int)>"
"<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>","<java.util.Spliterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>"
"<android.graphics.RecordingCanvas: void drawLines(float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawLines(float[],android.graphics.Paint)>"
"<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>","<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>"
"<android.content.ContentProviderResult: void <init>(android.net.Uri)>","<android.content.ContentProviderResult: void <init>(android.net.Uri)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.SelectableChannel: java.nio.channels.spi.SelectorProvider provider()>"
"<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>","<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>"
"<java.net.Socket: void setOOBInline(boolean)>","<java.net.Socket: void setOOBInline(boolean)>"
"<android.media.MediaDrm$LogMessage: void <init>()>","<android.media.MediaDrm$LogMessage: void <init>()>"
"<java.util.stream.IntStream: java.util.OptionalInt min()>","<java.util.stream.IntStream: java.util.OptionalInt min()>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>"
"<android.app.PictureInPictureParams: void <clinit>()>","<android.app.PictureInPictureParams: void <clinit>()>"
"<android.util.ArrayMap: void replaceAll(java.util.function.BiFunction)>","<android.util.ArrayMap: void replaceAll(java.util.function.BiFunction)>"
"<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>","<android.content.Context: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>"
"<android.util.TypedValue: void setTo(android.util.TypedValue)>","<android.util.TypedValue: void setTo(android.util.TypedValue)>"
"<android.app.VoiceInteractor$CommandRequest: void onCommandResult(boolean,android.os.Bundle)>","<android.app.VoiceInteractor$CommandRequest: void onCommandResult(boolean,android.os.Bundle)>"
"<java.time.LocalDate: long toEpochDay()>","<java.time.LocalDate: long toEpochDay()>"
"<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.view.MenuItem: java.lang.CharSequence getTooltipText()>","<android.view.MenuItem: java.lang.CharSequence getTooltipText()>"
"<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>","<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>"
"<java.lang.reflect.Field: void <init>()>","<java.lang.reflect.Field: void <init>()>"
"<android.hardware.Camera: void addCallbackBuffer(byte[])>","<android.hardware.Camera: void addCallbackBuffer(byte[])>"
"<android.graphics.Rect: void union(int,int)>","<android.graphics.Rect: void union(int,int)>"
"<android.media.MediaPlayer$OnPreparedListener: void onPrepared(android.media.MediaPlayer)>","<android.media.MediaPlayer$OnPreparedListener: void onPrepared(android.media.MediaPlayer)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: void <init>()>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: void <init>()>"
"<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>","<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>"
"<android.media.projection.MediaProjection$Callback: void onStop()>","<android.media.projection.MediaProjection$Callback: void onStop()>"
"<android.os.Bundle: boolean hasFileDescriptors()>","<android.os.Bundle: boolean hasFileDescriptors()>"
"<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)>","<android.app.ActionBar: void setListNavigationCallbacks(android.widget.SpinnerAdapter,android.app.ActionBar$OnNavigationListener)>"
"<android.content.res.AssetManager$AssetInputStream: void mark(int)>","<android.content.res.AssetManager$AssetInputStream: void mark(int)>"
"<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void sendCustomAction(java.lang.String,android.os.Bundle)>"
"<java.lang.InstantiationException: void <init>(java.lang.String)>","<java.lang.InstantiationException: void <init>(java.lang.String)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setEditorBoundsInfo(android.view.inputmethod.EditorBoundsInfo)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setEditorBoundsInfo(android.view.inputmethod.EditorBoundsInfo)>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>"
"<android.view.Window$Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.view.Window$Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>","<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>"
"<android.widget.TextView: void setLineSpacing(float,float)>","<android.widget.TextView: void setLineSpacing(float,float)>"
"<android.telephony.TelephonyManager$NetworkSlicingException: java.lang.String toString()>","<android.telephony.TelephonyManager$NetworkSlicingException: java.lang.String toString()>"
"<android.icu.util.ULocale: java.lang.String getName(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getName(java.lang.String)>"
"<android.net.Uri: java.lang.String getHost()>","<android.net.Uri: java.lang.String getHost()>"
"<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>","<android.graphics.fonts.Font$Builder: void <init>(java.nio.ByteBuffer)>"
"<java.lang.Float: float parseFloat(java.lang.String)>","<java.lang.Float: float parseFloat(java.lang.String)>"
"<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>","<android.graphics.fonts.FontFamily: android.graphics.fonts.Font getFont(int)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)>"
"<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)>","<android.widget.TextView: void invalidateDrawable(android.graphics.drawable.Drawable)>"
"<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>","<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>"
"<java.lang.invoke.VarHandle: void releaseFence()>","<java.lang.invoke.VarHandle: void releaseFence()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,int,boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,int,boolean)>"
"<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>"
"<android.icu.util.ULocale: int hashCode()>","<android.icu.util.ULocale: int hashCode()>"
"<android.animation.StateListAnimator: void jumpToCurrentState()>","<android.animation.StateListAnimator: void jumpToCurrentState()>"
"<java.net.DatagramSocketImpl: void disconnect()>","<java.net.DatagramSocketImpl: void disconnect()>"
"<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>","<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>"
"<java.net.DatagramSocket: int getPort()>","<java.net.DatagramSocket: int getPort()>"
"<java.lang.Character: boolean isLowSurrogate(char)>","<java.lang.Character: boolean isLowSurrogate(char)>"
"<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>","<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>"
"<android.content.AttributionSource: android.content.AttributionSource myAttributionSource()>","<android.content.AttributionSource: android.content.AttributionSource myAttributionSource()>"
"<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.String)>","<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.String)>"
"<android.graphics.Canvas: int getMaximumBitmapHeight()>","<android.graphics.Canvas: int getMaximumBitmapHeight()>"
"<android.graphics.Paint: void setLinearText(boolean)>","<android.graphics.Paint: void setLinearText(boolean)>"
"<android.app.FragmentManager$BackStackEntry: int getId()>","<android.app.FragmentManager$BackStackEntry: int getId()>"
"<android.os.Parcel: void enforceNoDataAvail()>","<android.os.Parcel: void enforceNoDataAvail()>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedJpegThumbnailSizes()>"
"<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraUnavailable(java.lang.String)>","<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraUnavailable(java.lang.String)>"
"<android.util.LongSparseArray: void <init>(int)>","<android.util.LongSparseArray: void <init>(int)>"
"<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>","<java.lang.ClassLoader: void setSigners(java.lang.Class,java.lang.Object[])>"
"<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>","<android.media.MediaTimestamp: long getAnchorSytemNanoTime()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)>"
"<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>","<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>"
"<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>","<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>"
"<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[])>","<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[])>"
"<android.content.SyncRequest: void <init>()>","<android.content.SyncRequest: void <init>()>"
"<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()>","<android.view.inputmethod.CursorAnchorInfo: float getInsertionMarkerHorizontal()>"
"<android.view.ViewStructure: int getTextSelectionEnd()>","<android.view.ViewStructure: int getTextSelectionEnd()>"
"<android.hardware.camera2.CameraDevice$StateCallback: void onError(android.hardware.camera2.CameraDevice,int)>","<android.hardware.camera2.CameraDevice$StateCallback: void onError(android.hardware.camera2.CameraDevice,int)>"
"<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>","<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>"
"<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>","<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>"
"<android.graphics.ColorSpace$Rgb: float[] fromXyz(float[])>","<android.graphics.ColorSpace$Rgb: float[] fromXyz(float[])>"
"<android.hardware.Camera$Parameters: boolean getAutoExposureLock()>","<android.hardware.Camera$Parameters: boolean getAutoExposureLock()>"
"<java.util.stream.Stream: java.util.stream.IntStream flatMapToInt(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.IntStream flatMapToInt(java.util.function.Function)>"
"<android.hardware.camera2.params.OutputConfiguration: int getSurfaceGroupId()>","<android.hardware.camera2.params.OutputConfiguration: int getSurfaceGroupId()>"
"<java.nio.channels.FileChannel$MapMode: void <clinit>()>","<java.nio.channels.FileChannel$MapMode: void <clinit>()>"
"<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()>","<android.content.ContextWrapper: java.io.File[] getExternalCacheDirs()>"
"<java.net.DatagramSocket: void send(java.net.DatagramPacket)>","<java.net.DatagramSocket: void send(java.net.DatagramPacket)>"
"<android.hardware.camera2.CameraManager$AvailabilityCallback: void <init>()>","<android.hardware.camera2.CameraManager$AvailabilityCallback: void <init>()>"
"<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>","<android.text.method.KeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>"
"<android.widget.TextView: int getCompoundDrawablePadding()>","<android.widget.TextView: int getCompoundDrawablePadding()>"
"<android.content.Intent: void <init>(java.lang.String)>","<android.content.Intent: void <init>(java.lang.String)>"
"<android.telephony.PhoneStateListener: void onCellInfoChanged(java.util.List)>","<android.telephony.PhoneStateListener: void onCellInfoChanged(java.util.List)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<java.util.LongSummaryStatistics: long getMax()>","<java.util.LongSummaryStatistics: long getMax()>"
"<android.app.Fragment: boolean getUserVisibleHint()>","<android.app.Fragment: boolean getUserVisibleHint()>"
"<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>","<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>"
"<android.database.sqlite.SQLiteDatabase: java.lang.String toString()>","<android.database.sqlite.SQLiteDatabase: java.lang.String toString()>"
"<android.media.session.MediaController$PlaybackInfo: void <clinit>()>","<android.media.session.MediaController$PlaybackInfo: void <clinit>()>"
"<android.text.Layout$Alignment: void <clinit>()>","<android.text.Layout$Alignment: void <clinit>()>"
"<android.view.WindowInsetsController$OnControllableInsetsChangedListener: void onControllableInsetsChanged(android.view.WindowInsetsController,int)>","<android.view.WindowInsetsController$OnControllableInsetsChangedListener: void onControllableInsetsChanged(android.view.WindowInsetsController,int)>"
"<java.util.Spliterator$OfLong: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfLong: java.util.Spliterator$OfPrimitive trySplit()>"
"<android.net.SocketKeepalive: void <init>()>","<android.net.SocketKeepalive: void <init>()>"
"<java.util.function.Predicate: java.util.function.Predicate and(java.util.function.Predicate)>","<java.util.function.Predicate: java.util.function.Predicate and(java.util.function.Predicate)>"
"<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>","<android.content.ContextWrapper: java.lang.String getSystemServiceName(java.lang.Class)>"
"<android.view.View: void addFocusables(java.util.ArrayList,int,int)>","<android.view.View: void addFocusables(java.util.ArrayList,int,int)>"
"<android.os.Message: void <init>()>","<android.os.Message: void <init>()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setIcon(int)>"
"<java.lang.Character: int digit(char,int)>","<java.lang.Character: int digit(char,int)>"
"<android.widget.RemoteViews: void setViewOutlinePreferredRadiusAttr(int,int)>","<android.widget.RemoteViews: void setViewOutlinePreferredRadiusAttr(int,int)>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledFlags()>","<android.content.pm.PackageManager$ComponentEnabledSetting: int getEnabledFlags()>"
"<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.content.OperationApplicationException: void <init>()>","<android.content.OperationApplicationException: void <init>()>"
"<android.widget.TextView: void setLineBreakWordStyle(int)>","<android.widget.TextView: void setLineBreakWordStyle(int)>"
"<android.content.ContentValues: void <init>()>","<android.content.ContentValues: void <init>()>"
"<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>","<java.lang.Short: java.lang.Short valueOf(java.lang.String,int)>"
"<java.net.URLConnection: int getContentLength()>","<java.net.URLConnection: int getContentLength()>"
"<android.media.AudioTrack: int getPositionNotificationPeriod()>","<android.media.AudioTrack: int getPositionNotificationPeriod()>"
"<android.app.ActionBar: boolean isHideOnContentScrollEnabled()>","<android.app.ActionBar: boolean isHideOnContentScrollEnabled()>"
"<java.lang.Integer: int rotateRight(int,int)>","<java.lang.Integer: int rotateRight(int,int)>"
"<android.content.pm.ApplicationInfo: int getNativeHeapZeroInitialized()>","<android.content.pm.ApplicationInfo: int getNativeHeapZeroInitialized()>"
"<android.window.SplashScreenView: void onLayout(boolean,int,int,int,int)>","<android.window.SplashScreenView: void onLayout(boolean,int,int,int,int)>"
"<android.app.ActivityManager$TaskDescription: java.lang.String toString()>","<android.app.ActivityManager$TaskDescription: java.lang.String toString()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)>"
"<java.nio.file.Path: boolean isAbsolute()>","<java.nio.file.Path: boolean isAbsolute()>"
"<android.content.ClipDescription: int getClassificationStatus()>","<android.content.ClipDescription: int getClassificationStatus()>"
"<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>","<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>"
"<android.view.inputmethod.TextSnapshot: int getSelectionEnd()>","<android.view.inputmethod.TextSnapshot: int getSelectionEnd()>"
"<java.nio.CharBuffer: boolean equals(java.lang.Object)>","<java.nio.CharBuffer: boolean equals(java.lang.Object)>"
"<java.net.Socket: void <init>(java.net.Proxy)>","<java.net.Socket: void <init>(java.net.Proxy)>"
"<java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>","<java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setHeading(boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setHeading(boolean)>"
"<java.lang.System: void setOut(java.io.PrintStream)>","<java.lang.System: void setOut(java.io.PrintStream)>"
"<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.FileChannel: long read(java.nio.ByteBuffer[])>"
"<android.net.Network: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>","<android.net.Network: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>"
"<android.content.IntentSender: java.lang.String toString()>","<android.content.IntentSender: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.text.Format toFormat()>","<java.time.format.DateTimeFormatter: java.text.Format toFormat()>"
"<android.content.res.Resources: android.content.res.AssetManager getAssets()>","<android.content.res.Resources: android.content.res.AssetManager getAssets()>"
"<java.time.temporal.ChronoField: long getFrom(java.time.temporal.TemporalAccessor)>","<java.time.temporal.ChronoField: long getFrom(java.time.temporal.TemporalAccessor)>"
"<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.GatheringByteChannel: long write(java.nio.ByteBuffer[])>"
"<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>","<java.util.concurrent.locks.Lock: java.util.concurrent.locks.Condition newCondition()>"
"<android.os.Process: android.os.UserHandle myUserHandle()>","<android.os.Process: android.os.UserHandle myUserHandle()>"
"<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>","<android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedFocusModes()>"
"<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>","<java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)>"
"<java.nio.LongBuffer: java.lang.Object array()>","<java.nio.LongBuffer: java.lang.Object array()>"
"<android.content.pm.PackageInstaller$SessionParams: void setAppPackageName(java.lang.String)>","<android.content.pm.PackageInstaller$SessionParams: void setAppPackageName(java.lang.String)>"
"<java.util.IntSummaryStatistics: int getMin()>","<java.util.IntSummaryStatistics: int getMin()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType wrap()>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType wrap()>"
"<android.media.AudioTrack: int getOffloadPadding()>","<android.media.AudioTrack: int getOffloadPadding()>"
"<android.widget.AdapterView: void setFocusable(int)>","<android.widget.AdapterView: void setFocusable(int)>"
"<android.icu.util.ULocale: boolean isRightToLeft()>","<android.icu.util.ULocale: boolean isRightToLeft()>"
"<java.lang.SecurityManager: void checkAwtEventQueueAccess()>","<java.lang.SecurityManager: void checkAwtEventQueueAccess()>"
"<android.media.UnsupportedSchemeException: void <init>(java.lang.String)>","<android.media.UnsupportedSchemeException: void <init>(java.lang.String)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem getFileSystem(java.net.URI)>"
"<android.view.translation.TranslationSpec: android.icu.util.ULocale getLocale()>","<android.view.translation.TranslationSpec: android.icu.util.ULocale getLocale()>"
"<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>","<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>"
"<java.time.zone.ZoneRules: boolean equals(java.lang.Object)>","<java.time.zone.ZoneRules: boolean equals(java.lang.Object)>"
"<android.telephony.NetworkScanRequest: int getScanType()>","<android.telephony.NetworkScanRequest: int getScanType()>"
"<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createRuntimeShaderEffect(android.graphics.RuntimeShader,java.lang.String)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createRuntimeShaderEffect(android.graphics.RuntimeShader,java.lang.String)>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setWeight(int)>"
"<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>","<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setEncoding(int)>"
"<android.graphics.Point: java.lang.String toString()>","<android.graphics.Point: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>","<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>"
"<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>","<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>"
"<java.util.Arrays: float[] copyOfRange(float[],int,int)>","<java.util.Arrays: float[] copyOfRange(float[],int,int)>"
"<android.content.res.AssetFileDescriptor: int describeContents()>","<android.content.res.AssetFileDescriptor: int describeContents()>"
"<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader,java.lang.Class)>"
"<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getBaseUnit()>","<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getBaseUnit()>"
"<java.lang.ArrayStoreException: void <init>()>","<java.lang.ArrayStoreException: void <init>()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText build()>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText build()>"
"<java.lang.Math: long floorMod(long,long)>","<java.lang.Math: long floorMod(long,long)>"
"<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)>","<javax.security.auth.Subject: java.util.Set getPublicCredentials(java.lang.Class)>"
"<android.graphics.Color: float blue(long)>","<android.graphics.Color: float blue(long)>"
"<java.util.Arrays: void parallelSort(byte[],int,int)>","<java.util.Arrays: void parallelSort(byte[],int,int)>"
"<android.content.pm.PackageManager$Property: java.lang.String getClassName()>","<android.content.pm.PackageManager$Property: java.lang.String getClassName()>"
"<android.graphics.drawable.Drawable: boolean setState(int[])>","<android.graphics.drawable.Drawable: boolean setState(int[])>"
"<java.util.stream.Stream: java.util.stream.Stream skip(long)>","<java.util.stream.Stream: java.util.stream.Stream skip(long)>"
"<java.nio.channels.spi.SelectorProvider: void <init>()>","<java.nio.channels.spi.SelectorProvider: void <init>()>"
"<java.nio.channels.SelectionKey: void cancel()>","<java.nio.channels.SelectionKey: void cancel()>"
"<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>","<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>"
"<android.view.inputmethod.InputMethodInfo: boolean supportsStylusHandwriting()>","<android.view.inputmethod.InputMethodInfo: boolean supportsStylusHandwriting()>"
"<android.graphics.drawable.LayerDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>","<android.graphics.drawable.LayerDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>"
"<android.graphics.Paint: void setFakeBoldText(boolean)>","<android.graphics.Paint: void setFakeBoldText(boolean)>"
"<android.animation.Keyframe: void <init>()>","<android.animation.Keyframe: void <init>()>"
"<android.os.Message: void <clinit>()>","<android.os.Message: void <clinit>()>"
"<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>","<java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>"
"<android.transition.Transition: android.transition.Transition setStartDelay(long)>","<android.transition.Transition: android.transition.Transition setStartDelay(long)>"
"<android.widget.TextView: int computeVerticalScrollExtent()>","<android.widget.TextView: int computeVerticalScrollExtent()>"
"<java.util.function.Consumer: void accept(java.lang.Object)>","<java.util.function.Consumer: void accept(java.lang.Object)>"
"<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<android.content.res.Resources$Theme: void applyStyle(int,boolean)>","<android.content.res.Resources$Theme: void applyStyle(int,boolean)>"
"<android.media.AudioFormat: int getChannelIndexMask()>","<android.media.AudioFormat: int getChannelIndexMask()>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addTransportType(int)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addTransportType(int)>"
"<android.media.MediaPlayer: void prepareAsync()>","<android.media.MediaPlayer: void prepareAsync()>"
"<android.net.NetworkInfo$DetailedState: void <init>(java.lang.String,int)>","<android.net.NetworkInfo$DetailedState: void <init>(java.lang.String,int)>"
"<android.widget.AbsListView: void dispatchDrawableHotspotChanged(float,float)>","<android.widget.AbsListView: void dispatchDrawableHotspotChanged(float,float)>"
"<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>","<android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)>"
"<android.widget.Scroller: void setFinalY(int)>","<android.widget.Scroller: void setFinalY(int)>"
"<android.media.MediaFormat: android.media.MediaFormat createSubtitleFormat(java.lang.String,java.lang.String)>","<android.media.MediaFormat: android.media.MediaFormat createSubtitleFormat(java.lang.String,java.lang.String)>"
"<android.view.contentcapture.ContentCaptureSessionId: void writeToParcel(android.os.Parcel,int)>","<android.view.contentcapture.ContentCaptureSessionId: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteDatabase: int getVersion()>","<android.database.sqlite.SQLiteDatabase: int getVersion()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>"
"<java.lang.Character: boolean isIdentifierIgnorable(int)>","<java.lang.Character: boolean isIdentifierIgnorable(int)>"
"<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<android.text.Layout: int getOffsetForHorizontal(int,float)>","<android.text.Layout: int getOffsetForHorizontal(int,float)>"
"<java.security.Provider: void removeService(java.security.Provider$Service)>","<java.security.Provider: void removeService(java.security.Provider$Service)>"
"<android.telephony.IccOpenLogicalChannelResponse: java.lang.String toString()>","<android.telephony.IccOpenLogicalChannelResponse: java.lang.String toString()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespaceUri(int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>"
"<android.text.Editable: android.text.InputFilter[] getFilters()>","<android.text.Editable: android.text.InputFilter[] getFilters()>"
"<java.util.Map$Entry: java.util.Comparator comparingByValue()>","<java.util.Map$Entry: java.util.Comparator comparingByValue()>"
"<java.time.chrono.ChronoLocalDateTime: java.lang.String toString()>","<java.time.chrono.ChronoLocalDateTime: java.lang.String toString()>"
"<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()>","<android.media.session.MediaSessionManager: java.util.List getSession2Tokens()>"
"<android.media.session.MediaSession$Callback: void onPlay()>","<android.media.session.MediaSession$Callback: void onPlay()>"
"<android.widget.MediaController$MediaPlayerControl: int getAudioSessionId()>","<android.widget.MediaController$MediaPlayerControl: int getAudioSessionId()>"
"<android.view.autofill.AutofillValue: void writeToParcel(android.os.Parcel,int)>","<android.view.autofill.AutofillValue: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ViewGroup$LayoutParams: void <init>(int,int)>","<android.view.ViewGroup$LayoutParams: void <init>(int,int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream limit(long)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream limit(long)>"
"<android.os.Debug: int getGlobalClassInitTime()>","<android.os.Debug: int getGlobalClassInitTime()>"
"<java.time.Instant: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.content.res.XmlResourceParser: void close()>","<android.content.res.XmlResourceParser: void close()>"
"<android.content.pm.PackageManager: void setMimeGroup(java.lang.String,java.util.Set)>","<android.content.pm.PackageManager: void setMimeGroup(java.lang.String,java.util.Set)>"
"<java.nio.Buffer: boolean hasRemaining()>","<java.nio.Buffer: boolean hasRemaining()>"
"<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>","<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()>"
"<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>","<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>"
"<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()>","<android.content.pm.InstallSourceInfo: java.lang.String getOriginatingPackageName()>"
"<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator identity()>","<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator identity()>"
"<android.graphics.MaskFilter: void finalize()>","<android.graphics.MaskFilter: void finalize()>"
"<android.graphics.fonts.FontVariationAxis: void <init>(java.lang.String,float)>","<android.graphics.fonts.FontVariationAxis: void <init>(java.lang.String,float)>"
"<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>","<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>"
"<android.media.AudioTrack: int reloadStaticData()>","<android.media.AudioTrack: int reloadStaticData()>"
"<java.time.LocalTime: java.time.LocalTime plusNanos(long)>","<java.time.LocalTime: java.time.LocalTime plusNanos(long)>"
"<android.media.RemoteControlClient: void setPlaybackState(int,long,float)>","<android.media.RemoteControlClient: void setPlaybackState(int,long,float)>"
"<android.widget.Toolbar: void collapseActionView()>","<android.widget.Toolbar: void collapseActionView()>"
"<android.app.Dialog: void openOptionsMenu()>","<android.app.Dialog: void openOptionsMenu()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder replaceWith(byte[])>"
"<android.widget.TextView: void getFocusedRect(android.graphics.Rect)>","<android.widget.TextView: void getFocusedRect(android.graphics.Rect)>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentAttached(android.app.FragmentManager,android.app.Fragment,android.content.Context)>"
"<android.app.ActionBar: int getHideOffset()>","<android.app.ActionBar: int getHideOffset()>"
"<java.net.InetAddress: int hashCode()>","<java.net.InetAddress: int hashCode()>"
"<java.io.PrintWriter: void clearError()>","<java.io.PrintWriter: void clearError()>"
"<android.app.Dialog: void setFeatureDrawableResource(int,int)>","<android.app.Dialog: void setFeatureDrawableResource(int,int)>"
"<java.util.ArrayList: void <init>(int)>","<java.util.ArrayList: void <init>(int)>"
"<java.util.concurrent.Executor: void execute(java.lang.Runnable)>","<java.util.concurrent.Executor: void execute(java.lang.Runnable)>"
"<java.lang.Character: int getType(int)>","<java.lang.Character: int getType(int)>"
"<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProviderClient)>","<android.content.ContentResolver: android.content.ContentResolver wrap(android.content.ContentProviderClient)>"
"<java.time.zone.ZoneRules: java.util.List getTransitionRules()>","<java.time.zone.ZoneRules: java.util.List getTransitionRules()>"
"<android.widget.AbsListView: int getListPaddingTop()>","<android.widget.AbsListView: int getListPaddingTop()>"
"<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>","<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>"
"<android.view.inputmethod.InputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>","<android.view.inputmethod.InputConnection: android.view.inputmethod.TextSnapshot takeSnapshot()>"
"<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>","<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>"
"<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>","<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>"
"<android.hardware.camera2.CaptureRequest: void <init>()>","<android.hardware.camera2.CaptureRequest: void <init>()>"
"<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>","<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>"
"<android.database.Cursor: boolean isFirst()>","<android.database.Cursor: boolean isFirst()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.view.RoundedCorner: int getPosition()>","<android.view.RoundedCorner: int getPosition()>"
"<android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])>","<android.os.BaseBundle: void putDoubleArray(java.lang.String,double[])>"
"<android.view.View: java.util.Map getAttributeSourceResourceMap()>","<android.view.View: java.util.Map getAttributeSourceResourceMap()>"
"<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[])>","<java.util.Arrays: int mismatch(java.lang.Object[],java.lang.Object[])>"
"<android.app.Activity: void setTitle(java.lang.CharSequence)>","<android.app.Activity: void setTitle(java.lang.CharSequence)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>","<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>"
"<java.util.Collection: int size()>","<java.util.Collection: int size()>"
"<java.time.LocalDate: java.time.LocalDate minusWeeks(long)>","<java.time.LocalDate: java.time.LocalDate minusWeeks(long)>"
"<android.view.inputmethod.CursorAnchorInfo: int describeContents()>","<android.view.inputmethod.CursorAnchorInfo: int describeContents()>"
"<android.view.textclassifier.TextLinks$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextLinks$Request: java.lang.CharSequence getText()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void <init>(java.lang.CharSequence,int)>","<android.app.VoiceInteractor$PickOptionRequest$Option: void <init>(java.lang.CharSequence,int)>"
"<android.widget.Toolbar: void setPopupTheme(int)>","<android.widget.Toolbar: void setPopupTheme(int)>"
"<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request build()>","<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request build()>"
"<android.app.LoaderManager: void enableDebugLogging(boolean)>","<android.app.LoaderManager: void enableDebugLogging(boolean)>"
"<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>","<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>"
"<java.lang.Byte: float floatValue()>","<java.lang.Byte: float floatValue()>"
"<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>","<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>"
"<java.util.HashSet: boolean contains(java.lang.Object)>","<java.util.HashSet: boolean contains(java.lang.Object)>"
"<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>","<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>","<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)>"
"<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()>","<android.view.textclassifier.ConversationActions$Request: java.util.List getHints()>"
"<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>","<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>"
"<java.lang.invoke.MethodHandles: void <init>()>","<java.lang.invoke.MethodHandles: void <init>()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle collectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)>"
"<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator compose(java.util.function.DoubleUnaryOperator)>","<java.util.function.DoubleUnaryOperator: java.util.function.DoubleUnaryOperator compose(java.util.function.DoubleUnaryOperator)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: float getCurrent()>"
"<android.graphics.Path: float[] approximate(float)>","<android.graphics.Path: float[] approximate(float)>"
"<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)>"
"<java.lang.Object: java.lang.Object clone()>","<java.lang.Object: java.lang.Object clone()>"
"<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>","<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>"
"<android.graphics.Matrix: void setTranslate(float,float)>","<android.graphics.Matrix: void setTranslate(float,float)>"
"<android.util.Rational: boolean isZero()>","<android.util.Rational: boolean isZero()>"
"<java.util.NavigableMap: java.util.Map$Entry floorEntry(java.lang.Object)>","<java.util.NavigableMap: java.util.Map$Entry floorEntry(java.lang.Object)>"
"<android.media.TimedText: android.graphics.Rect getBounds()>","<android.media.TimedText: android.graphics.Rect getBounds()>"
"<java.time.LocalDate: java.time.LocalDate of(int,java.time.Month,int)>","<java.time.LocalDate: java.time.LocalDate of(int,java.time.Month,int)>"
"<java.util.stream.LongStream: long sum()>","<java.util.stream.LongStream: long sum()>"
"<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode()>","<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode()>"
"<java.lang.Integer: int compareTo(java.lang.Integer)>","<java.lang.Integer: int compareTo(java.lang.Integer)>"
"<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>","<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>"
"<java.lang.Float: int compare(float,float)>","<java.lang.Float: int compare(float,float)>"
"<android.view.View$OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>","<android.view.View$OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle doWhileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle doWhileLoop(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.telephony.ServiceState: int[] getCellBandwidths()>","<android.telephony.ServiceState: int[] getCellBandwidths()>"
"<android.os.BaseBundle: boolean getBoolean(java.lang.String)>","<android.os.BaseBundle: boolean getBoolean(java.lang.String)>"
"<android.app.VoiceInteractor$Request: void cancel()>","<android.app.VoiceInteractor$Request: void cancel()>"
"<android.content.res.TypedArray: android.graphics.Typeface getFont(int)>","<android.content.res.TypedArray: android.graphics.Typeface getFont(int)>"
"<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>","<java.lang.ReflectiveOperationException: void <init>(java.lang.String)>"
"<android.view.View: void measure(int,int)>","<android.view.View: void measure(int,int)>"
"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>","<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime 'from'(long,java.util.concurrent.TimeUnit)>"
"<java.security.Principal: java.lang.String toString()>","<java.security.Principal: java.lang.String toString()>"
"<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>","<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>"
"<java.util.Set: int size()>","<java.util.Set: int size()>"
"<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>","<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>"
"<java.nio.charset.Charset: boolean isSupported(java.lang.String)>","<java.nio.charset.Charset: boolean isSupported(java.lang.String)>"
"<java.lang.Iterable: java.util.Spliterator spliterator()>","<java.lang.Iterable: java.util.Spliterator spliterator()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>"
"<java.nio.LongBuffer: java.nio.LongBuffer compact()>","<java.nio.LongBuffer: java.nio.LongBuffer compact()>"
"<java.time.OffsetTime: void <init>()>","<java.time.OffsetTime: void <init>()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>"
"<android.content.pm.ActivityInfo: void <clinit>()>","<android.content.pm.ActivityInfo: void <clinit>()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.accessibility.AccessibilityWindowInfo: int describeContents()>","<android.view.accessibility.AccessibilityWindowInfo: int describeContents()>"
"<android.database.sqlite.SQLiteClosable: void acquireReference()>","<android.database.sqlite.SQLiteClosable: void acquireReference()>"
"<java.util.SortedMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>","<java.util.SortedMap: java.util.SortedMap subMap(java.lang.Object,java.lang.Object)>"
"<android.view.InputDevice: int getProductId()>","<android.view.InputDevice: int getProductId()>"
"<android.util.Range: boolean contains(java.lang.Comparable)>","<android.util.Range: boolean contains(java.lang.Comparable)>"
"<java.lang.Float: float floatValue()>","<java.lang.Float: float floatValue()>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutes(int,int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutes(int,int)>"
"<android.app.ActivityManager: void moveTaskToFront(int,int)>","<android.app.ActivityManager: void moveTaskToFront(int,int)>"
"<java.net.URI: java.lang.String getUserInfo()>","<java.net.URI: java.lang.String getUserInfo()>"
"<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,boolean)>"
"<android.view.LayoutInflater: android.view.View onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>"
"<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)>","<android.app.PendingIntent$CanceledException: void <init>(java.lang.String)>"
"<android.view.View: boolean hasOverlappingRendering()>","<android.view.View: boolean hasOverlappingRendering()>"
"<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>","<android.os.Vibrator: void vibrate(long,android.media.AudioAttributes)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>","<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[])>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View,int)>"
"<java.lang.Integer: java.lang.String toOctalString(int)>","<java.lang.Integer: java.lang.String toOctalString(int)>"
"<android.view.View: void setFocusableInTouchMode(boolean)>","<android.view.View: void setFocusableInTouchMode(boolean)>"
"<android.telephony.TelephonyManager: int getDataActivity()>","<android.telephony.TelephonyManager: int getDataActivity()>"
"<android.widget.RemoteViews$RemoteViewOutlineProvider: float getRadius()>","<android.widget.RemoteViews$RemoteViewOutlineProvider: float getRadius()>"
"<android.graphics.ColorSpace$Rgb: float[] fromLinear(float[])>","<android.graphics.ColorSpace$Rgb: float[] fromLinear(float[])>"
"<java.net.SocketImpl: void sendUrgentData(int)>","<java.net.SocketImpl: void sendUrgentData(int)>"
"<android.content.IntentFilter: java.lang.String getAction(int)>","<android.content.IntentFilter: java.lang.String getAction(int)>"
"<android.view.ViewStructure: void setLongClickable(boolean)>","<android.view.ViewStructure: void setLongClickable(boolean)>"
"<android.telephony.PhoneStateListener: void onUserMobileDataStateChanged(boolean)>","<android.telephony.PhoneStateListener: void onUserMobileDataStateChanged(boolean)>"
"<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>","<android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>"
"<android.os.ResultReceiver: void <init>(android.os.Handler)>","<android.os.ResultReceiver: void <init>(android.os.Handler)>"
"<java.net.DatagramPacket: void <init>(byte[],int,int)>","<java.net.DatagramPacket: void <init>(byte[],int,int)>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void <init>()>","<android.app.ActivityManager$ProcessErrorStateInfo: void <init>()>"
"<java.util.Collection: void clear()>","<java.util.Collection: void clear()>"
"<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int,java.util.Set)>","<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int,java.util.Set)>"
"<android.widget.TextView: boolean isAllCaps()>","<android.widget.TextView: boolean isAllCaps()>"
"<android.media.VolumeAutomation: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>","<android.media.VolumeAutomation: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>"
"<java.lang.Character: char toLowerCase(char)>","<java.lang.Character: char toLowerCase(char)>"
"<java.net.DatagramSocket: boolean isClosed()>","<java.net.DatagramSocket: boolean isClosed()>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>","<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>"
"<java.util.Deque: boolean remove(java.lang.Object)>","<java.util.Deque: boolean remove(java.lang.Object)>"
"<android.os.Parcel: void writeStringArray(java.lang.String[])>","<android.os.Parcel: void writeStringArray(java.lang.String[])>"
"<android.widget.TextView: android.text.Editable getEditableText()>","<android.widget.TextView: android.text.Editable getEditableText()>"
"<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>","<android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)>"
"<android.view.SurfaceControl$TransactionCommittedListener: void onTransactionCommitted()>","<android.view.SurfaceControl$TransactionCommittedListener: void onTransactionCommitted()>"
"<android.graphics.drawable.LayerDrawable: void setLayerGravity(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerGravity(int,int)>"
"<android.telephony.PhoneStateListener: void onCallDisconnectCauseChanged(int,int)>","<android.telephony.PhoneStateListener: void onCallDisconnectCauseChanged(int,int)>"
"<android.graphics.PorterDuff$Mode: void <clinit>()>","<android.graphics.PorterDuff$Mode: void <clinit>()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>"
"<android.widget.AbsListView: int getChoiceMode()>","<android.widget.AbsListView: int getChoiceMode()>"
"<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>","<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>"
"<android.telephony.data.ApnSetting: boolean isEnabled()>","<android.telephony.data.ApnSetting: boolean isEnabled()>"
"<android.media.session.MediaController: java.util.List getQueue()>","<android.media.session.MediaController: java.util.List getQueue()>"
"<android.content.Context: android.content.res.Resources getResources()>","<android.content.Context: android.content.res.Resources getResources()>"
"<java.nio.channels.AsynchronousCloseException: void <init>()>","<java.nio.channels.AsynchronousCloseException: void <init>()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationBanner(android.content.pm.ApplicationInfo)>"
"<java.lang.Throwable: void printStackTrace()>","<java.lang.Throwable: void printStackTrace()>"
"<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>","<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>"
"<android.view.View: void setOutlineAmbientShadowColor(int)>","<android.view.View: void setOutlineAmbientShadowColor(int)>"
"<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>","<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.drawable.Icon: void <init>()>","<android.graphics.drawable.Icon: void <init>()>"
"<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>","<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>"
"<java.net.SocketException: void <init>(java.lang.String)>","<java.net.SocketException: void <init>(java.lang.String)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
"<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>","<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>"
"<android.hardware.Camera$Parameters: void setExposureCompensation(int)>","<android.hardware.Camera$Parameters: void setExposureCompensation(int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setNoRetry(boolean)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setNoRetry(boolean)>"
"<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleLeft()>","<android.widget.TextView: android.graphics.drawable.Drawable getTextSelectHandleLeft()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(java.lang.String)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(java.lang.String)>"
"<android.content.ContentProviderResult: void <clinit>()>","<android.content.ContentProviderResult: void <clinit>()>"
"<android.hardware.lights.LightState: void <init>()>","<android.hardware.lights.LightState: void <init>()>"
"<android.icu.util.ULocale: java.lang.String setKeywordValue(java.lang.String,java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String setKeywordValue(java.lang.String,java.lang.String,java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>()>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: void <init>()>"
"<android.net.NetworkCapabilities: void <init>()>","<android.net.NetworkCapabilities: void <init>()>"
"<android.widget.AdapterView: android.view.View getEmptyView()>","<android.widget.AdapterView: android.view.View getEmptyView()>"
"<android.view.KeyEvent$DispatcherState: void reset()>","<android.view.KeyEvent$DispatcherState: void reset()>"
"<java.lang.reflect.Modifier: int fieldModifiers()>","<java.lang.reflect.Modifier: int fieldModifiers()>"
"<java.util.UUID: void <init>(long,long)>","<java.util.UUID: void <init>(long,long)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>"
"<android.media.AudioAttributes: int getUsage()>","<android.media.AudioAttributes: int getUsage()>"
"<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>","<android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>"
"<android.hardware.Camera$AutoFocusMoveCallback: void onAutoFocusMoving(boolean,android.hardware.Camera)>","<android.hardware.Camera$AutoFocusMoveCallback: void onAutoFocusMoving(boolean,android.hardware.Camera)>"
"<android.graphics.Path: void reset()>","<android.graphics.Path: void reset()>"
"<android.media.session.MediaSession$Callback: void onSeekTo(long)>","<android.media.session.MediaSession$Callback: void onSeekTo(long)>"
"<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener,android.os.Handler)>","<android.media.MediaPlayer: void setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer$OnMediaTimeDiscontinuityListener,android.os.Handler)>"
"<android.app.Fragment: void registerForContextMenu(android.view.View)>","<android.app.Fragment: void registerForContextMenu(android.view.View)>"
"<android.text.Layout: int getLineTop(int)>","<android.text.Layout: int getLineTop(int)>"
"<android.view.Window: void setVolumeControlStream(int)>","<android.view.Window: void setVolumeControlStream(int)>"
"<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>","<android.util.AttributeSet: int getAttributeUnsignedIntValue(int,int)>"
"<java.util.Random: void <init>()>","<java.util.Random: void <init>()>"
"<android.text.PrecomputedText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>","<android.text.PrecomputedText: void getFontMetricsInt(int,int,android.graphics.Paint$FontMetricsInt)>"
"<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>","<android.content.Context: android.content.Context createDeviceProtectedStorageContext()>"
"<java.lang.Boolean: java.lang.String toString()>","<java.lang.Boolean: java.lang.String toString()>"
"<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>","<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>"
"<android.net.IpSecManager$UdpEncapsulationSocket: void <init>()>","<android.net.IpSecManager$UdpEncapsulationSocket: void <init>()>"
"<java.lang.Math: double tanh(double)>","<java.lang.Math: double tanh(double)>"
"<android.database.Cursor: void close()>","<android.database.Cursor: void close()>"
"<java.util.Arrays: int mismatch(long[],long[])>","<java.util.Arrays: int mismatch(long[],long[])>"
"<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(android.net.Network)>","<android.net.ConnectivityManager: boolean setProcessDefaultNetwork(android.net.Network)>"
"<android.app.Fragment: int hashCode()>","<android.app.Fragment: int hashCode()>"
"<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>","<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>"
"<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromFillInIntent(android.content.Intent)>","<android.widget.RemoteViews$RemoteResponse: android.widget.RemoteViews$RemoteResponse fromFillInIntent(android.content.Intent)>"
"<java.lang.reflect.Method: int hashCode()>","<java.lang.reflect.Method: int hashCode()>"
"<java.util.function.Function: java.util.function.Function andThen(java.util.function.Function)>","<java.util.function.Function: java.util.function.Function andThen(java.util.function.Function)>"
"<android.content.pm.ActivityInfo: java.util.Set getKnownActivityEmbeddingCerts()>","<android.content.pm.ActivityInfo: java.util.Set getKnownActivityEmbeddingCerts()>"
"<android.icu.util.ULocale: java.lang.String toLanguageTag()>","<android.icu.util.ULocale: java.lang.String toLanguageTag()>"
"<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.view.ViewGroupOverlay: void <init>()>","<android.view.ViewGroupOverlay: void <init>()>"
"<java.util.Arrays: int binarySearch(short[],short)>","<java.util.Arrays: int binarySearch(short[],short)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder removeUnicodeLocaleAttribute(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder removeUnicodeLocaleAttribute(java.lang.String)>"
"<java.lang.StringBuilder: int indexOf(java.lang.String)>","<java.lang.StringBuilder: int indexOf(java.lang.String)>"
"<android.media.AudioTrack: void pause()>","<android.media.AudioTrack: void pause()>"
"<android.os.Message: android.os.Bundle getData()>","<android.os.Message: android.os.Bundle getData()>"
"<android.content.pm.PackageManager: boolean isPackageSuspended()>","<android.content.pm.PackageManager: boolean isPackageSuspended()>"
"<android.media.RemoteController$OnClientUpdateListener: void onClientMetadataUpdate(android.media.RemoteController$MetadataEditor)>","<android.media.RemoteController$OnClientUpdateListener: void onClientMetadataUpdate(android.media.RemoteController$MetadataEditor)>"
"<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>","<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>"
"<android.view.translation.TranslationResponseValue: android.view.translation.TranslationResponseValue forError()>","<android.view.translation.TranslationResponseValue: android.view.translation.TranslationResponseValue forError()>"
"<android.media.VolumeShaper$Configuration: int getInterpolatorType()>","<android.media.VolumeShaper$Configuration: int getInterpolatorType()>"
"<android.view.View: boolean isFocusedByDefault()>","<android.view.View: boolean isFocusedByDefault()>"
"<android.graphics.Color: int argb(int,int,int,int)>","<android.graphics.Color: int argb(int,int,int,int)>"
"<java.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>","<java.nio.channels.AsynchronousFileChannel: void read(java.nio.ByteBuffer,long,java.lang.Object,java.nio.channels.CompletionHandler)>"
"<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.widget.ListView: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<java.net.Proxy: void <clinit>()>","<java.net.Proxy: void <clinit>()>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asFixedArity()>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asFixedArity()>"
"<android.util.SizeF: float getWidth()>","<android.util.SizeF: float getWidth()>"
"<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>","<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>"
"<android.media.MediaPlayer: boolean isLooping()>","<android.media.MediaPlayer: boolean isLooping()>"
"<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>","<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>"
"<android.telephony.TelephonyManager: void rebootModem()>","<android.telephony.TelephonyManager: void rebootModem()>"
"<java.security.KeyException: void <init>()>","<java.security.KeyException: void <init>()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>","<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>"
"<java.lang.LinkageError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.LinkageError: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.telephony.data.ApnSetting: java.lang.String getApnName()>","<android.telephony.data.ApnSetting: java.lang.String getApnName()>"
"<android.view.WindowInsetsAnimation$Bounds: java.lang.String toString()>","<android.view.WindowInsetsAnimation$Bounds: java.lang.String toString()>"
"<android.content.ContentProvider: java.lang.String getCallingAttributionTag()>","<android.content.ContentProvider: java.lang.String getCallingAttributionTag()>"
"<android.app.Activity: void onProvideAssistContent(android.app.assist.AssistContent)>","<android.app.Activity: void onProvideAssistContent(android.app.assist.AssistContent)>"
"<android.content.AttributionSource: void <init>()>","<android.content.AttributionSource: void <init>()>"
"<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>","<android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()>"
"<android.app.RemoteAction: void writeToParcel(android.os.Parcel,int)>","<android.app.RemoteAction: void writeToParcel(android.os.Parcel,int)>"
"<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>","<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>"
"<android.content.IntentFilter: int countDataSchemeSpecificParts()>","<android.content.IntentFilter: int countDataSchemeSpecificParts()>"
"<android.telephony.ServiceState: void setStateOutOfService()>","<android.telephony.ServiceState: void setStateOutOfService()>"
"<java.io.FileInputStream: long skip(long)>","<java.io.FileInputStream: long skip(long)>"
"<android.media.Image: android.media.Image$Plane[] getPlanes()>","<android.media.Image: android.media.Image$Plane[] getPlanes()>"
"<java.security.PermissionCollection: boolean isReadOnly()>","<java.security.PermissionCollection: boolean isReadOnly()>"
"<android.content.ContextWrapper: java.io.File getDataDir()>","<android.content.ContextWrapper: java.io.File getDataDir()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setTitle(java.lang.CharSequence)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setTitle(java.lang.CharSequence)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle loop(java.lang.invoke.MethodHandle[][])>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle loop(java.lang.invoke.MethodHandle[][])>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isHeading()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: boolean isHeading()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsc(android.net.Uri)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMmsc(android.net.Uri)>"
"<android.os.Parcel: void writeBinderList(java.util.List)>","<android.os.Parcel: void writeBinderList(java.util.List)>"
"<android.media.AudioFormat: int hashCode()>","<android.media.AudioFormat: int hashCode()>"
"<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>"
"<java.time.ZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.ZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>","<android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)>"
"<android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)>","<android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)>"
"<android.view.inputmethod.EditorInfo: android.view.inputmethod.SurroundingText getInitialSurroundingText(int,int,int)>","<android.view.inputmethod.EditorInfo: android.view.inputmethod.SurroundingText getInitialSurroundingText(int,int,int)>"
"<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>","<android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)>"
"<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)>","<android.hardware.Camera$Parameters: void setFocusAreas(java.util.List)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getInstallLocation()>","<android.content.pm.PackageInstaller$SessionInfo: int getInstallLocation()>"
"<android.widget.AbsListView: void requestDisallowInterceptTouchEvent(boolean)>","<android.widget.AbsListView: void requestDisallowInterceptTouchEvent(boolean)>"
"<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>"
"<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>","<java.text.AttributedCharacterIterator: java.util.Map getAttributes()>"
"<android.app.Fragment: void setReturnTransition(android.transition.Transition)>","<android.app.Fragment: void setReturnTransition(android.transition.Transition)>"
"<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)>","<android.app.RemoteAction: void dump(java.lang.String,java.io.PrintWriter)>"
"<android.graphics.Canvas: void disableZ()>","<android.graphics.Canvas: void disableZ()>"
"<android.view.MotionEvent: float getPressure()>","<android.view.MotionEvent: float getPressure()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer slice()>","<java.nio.FloatBuffer: java.nio.FloatBuffer slice()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusMonths(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusMonths(long)>"
"<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>","<android.os.PersistableBundle: android.os.PersistableBundle getPersistableBundle(java.lang.String)>"
"<android.view.View: void onRtlPropertiesChanged(int)>","<android.view.View: void onRtlPropertiesChanged(int)>"
"<java.nio.channels.Selector: java.nio.channels.Selector wakeup()>","<java.nio.channels.Selector: java.nio.channels.Selector wakeup()>"
"<java.util.concurrent.Semaphore: void acquire()>","<java.util.concurrent.Semaphore: void acquire()>"
"<android.app.ActivityManager: boolean isRunningInTestHarness()>","<android.app.ActivityManager: boolean isRunningInTestHarness()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>","<android.media.VolumeProvider: void <init>(int,int,int,java.lang.String)>"
"<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()>","<java.util.concurrent.locks.ReentrantLock: java.lang.Thread getOwner()>"
"<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>","<android.app.Activity: boolean navigateUpToFromChild(android.app.Activity,android.content.Intent)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setActions(java.util.List)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setActions(java.util.List)>"
"<android.view.DragEvent: java.lang.String toString()>","<android.view.DragEvent: java.lang.String toString()>"
"<android.graphics.Color: long pack(int)>","<android.graphics.Color: long pack(int)>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request build()>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request build()>"
"<java.net.Inet4Address: void <init>()>","<java.net.Inet4Address: void <init>()>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)>"
"<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>","<android.content.pm.PackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>"
"<android.view.WindowInsetsAnimation: void <init>(int,android.view.animation.Interpolator,long)>","<android.view.WindowInsetsAnimation: void <init>(int,android.view.animation.Interpolator,long)>"
"<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.cert.CertificateException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.Class: java.lang.Class getComponentType()>","<java.lang.Class: java.lang.Class getComponentType()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase createInMemory(android.database.sqlite.SQLiteDatabase$OpenParams)>"
"<android.media.Spatializer: void addOnHeadTrackerAvailableListener(java.util.concurrent.Executor,android.media.Spatializer$OnHeadTrackerAvailableListener)>","<android.media.Spatializer: void addOnHeadTrackerAvailableListener(java.util.concurrent.Executor,android.media.Spatializer$OnHeadTrackerAvailableListener)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>"
"<android.widget.TextView: void onVisibilityChanged(android.view.View,int)>","<android.widget.TextView: void onVisibilityChanged(android.view.View,int)>"
"<android.hardware.HardwareBuffer: int describeContents()>","<android.hardware.HardwareBuffer: int describeContents()>"
"<android.view.ViewGroup: void jumpDrawablesToCurrentState()>","<android.view.ViewGroup: void jumpDrawablesToCurrentState()>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>"
"<android.hardware.Camera$FaceDetectionListener: void onFaceDetection(android.hardware.Camera$Face[],android.hardware.Camera)>","<android.hardware.Camera$FaceDetectionListener: void onFaceDetection(android.hardware.Camera$Face[],android.hardware.Camera)>"
"<java.lang.Integer: int reverseBytes(int)>","<java.lang.Integer: int reverseBytes(int)>"
"<java.io.PrintStream: void println(char)>","<java.io.PrintStream: void println(char)>"
"<java.lang.Character: int codePointBefore(char[],int,int)>","<java.lang.Character: int codePointBefore(char[],int,int)>"
"<android.view.MenuItem: android.content.Intent getIntent()>","<android.view.MenuItem: android.content.Intent getIntent()>"
"<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>","<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>"
"<android.content.Loader$OnLoadCanceledListener: void onLoadCanceled(android.content.Loader)>","<android.content.Loader$OnLoadCanceledListener: void onLoadCanceled(android.content.Loader)>"
"<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>","<android.view.accessibility.AccessibilityNodeProvider: java.util.List findAccessibilityNodeInfosByText(java.lang.String,int)>"
"<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>","<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getRowTitle()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: java.lang.String getRowTitle()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View$BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>","<android.view.View$BaseSavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>"
"<android.text.style.URLSpan: java.lang.String getURL()>","<android.text.style.URLSpan: java.lang.String getURL()>"
"<android.view.autofill.AutofillValue: int hashCode()>","<android.view.autofill.AutofillValue: int hashCode()>"
"<android.telephony.data.ApnSetting$Builder: void <init>()>","<android.telephony.data.ApnSetting$Builder: void <init>()>"
"<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>","<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>"
"<java.util.stream.DoubleStream: java.util.Spliterator spliterator()>","<java.util.stream.DoubleStream: java.util.Spliterator spliterator()>"
"<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)>","<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable,java.lang.String)>"
"<android.net.Uri: java.lang.String getQuery()>","<android.net.Uri: java.lang.String getQuery()>"
"<java.lang.Thread$State: void <clinit>()>","<java.lang.Thread$State: void <clinit>()>"
"<android.widget.EditText: boolean getFreezesText()>","<android.widget.EditText: boolean getFreezesText()>"
"<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>","<android.view.Display: android.graphics.ColorSpace getPreferredWideGamutColorSpace()>"
"<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMtuV6(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMtuV6(int)>"
"<java.nio.channels.SocketChannel: boolean finishConnect()>","<java.nio.channels.SocketChannel: boolean finishConnect()>"
"<java.util.UUID: java.util.UUID fromString(java.lang.String)>","<java.util.UUID: java.util.UUID fromString(java.lang.String)>"
"<android.media.MediaFormat: void <init>(android.media.MediaFormat)>","<android.media.MediaFormat: void <init>(android.media.MediaFormat)>"
"<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>","<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)>"
"<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>","<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>"
"<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode valueOf(java.lang.String)>","<java.util.Locale$FilteringMode: java.util.Locale$FilteringMode valueOf(java.lang.String)>"
"<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)>","<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)>"
"<android.graphics.fonts.Font: void <init>()>","<android.graphics.fonts.Font: void <init>()>"
"<android.view.inputmethod.InputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>","<android.view.inputmethod.InputConnection: boolean deleteSurroundingTextInCodePoints(int,int)>"
"<android.os.Parcel: void writeInterfaceList(java.util.List)>","<android.os.Parcel: void writeInterfaceList(java.util.List)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>"
"<android.animation.ValueAnimator: void setFloatValues(float[])>","<android.animation.ValueAnimator: void setFloatValues(float[])>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeConverter,android.animation.TypeEvaluator,java.lang.Object[])>"
"<java.lang.Package: boolean isSealed()>","<java.lang.Package: boolean isSealed()>"
"<java.security.Provider: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.security.Provider: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.view.textclassifier.SelectionEvent: int getEventIndex()>","<android.view.textclassifier.SelectionEvent: int getEventIndex()>"
"<android.window.SplashScreenView: android.view.View getIconView()>","<android.window.SplashScreenView: android.view.View getIconView()>"
"<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>","<android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)>"
"<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>","<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>"
"<android.os.Debug: void dumpHprofData(java.lang.String)>","<android.os.Debug: void dumpHprofData(java.lang.String)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock()>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future lock()>"
"<android.view.ActionMode: void hide(long)>","<android.view.ActionMode: void hide(long)>"
"<android.icu.util.ULocale: void <init>(java.lang.String)>","<android.icu.util.ULocale: void <init>(java.lang.String)>"
"<java.lang.Package: java.lang.Package[] getPackages()>","<java.lang.Package: java.lang.Package[] getPackages()>"
"<android.graphics.Paint: float getLetterSpacing()>","<android.graphics.Paint: float getLetterSpacing()>"
"<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>","<android.media.AudioTrack: void <init>(android.media.AudioAttributes,android.media.AudioFormat,int,int,int)>"
"<java.util.ListIterator: java.lang.Object next()>","<java.util.ListIterator: java.lang.Object next()>"
"<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>","<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>"
"<android.telephony.TelephonyManager: int getDataNetworkType()>","<android.telephony.TelephonyManager: int getDataNetworkType()>"
"<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>","<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>"
"<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>","<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>"
"<android.widget.TextView: void setTextSelectHandleRight(android.graphics.drawable.Drawable)>","<android.widget.TextView: void setTextSelectHandleRight(android.graphics.drawable.Drawable)>"
"<java.lang.System: void setIn(java.io.InputStream)>","<java.lang.System: void setIn(java.io.InputStream)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype build()>"
"<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.os.VibratorManager: int[] getVibratorIds()>","<android.os.VibratorManager: int[] getVibratorIds()>"
"<android.view.View: boolean requestFocus(int)>","<android.view.View: boolean requestFocus(int)>"
"<android.content.res.TypedArray: void <init>()>","<android.content.res.TypedArray: void <init>()>"
"<java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>","<java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>"
"<android.view.WindowInsetsAnimationControlListener: void onCancelled(android.view.WindowInsetsAnimationController)>","<android.view.WindowInsetsAnimationControlListener: void onCancelled(android.view.WindowInsetsAnimationController)>"
"<android.os.Process: int myPid()>","<android.os.Process: int myPid()>"
"<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>","<java.security.PrivilegedActionException: void <init>(java.lang.Exception)>"
"<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator compose(java.util.function.IntUnaryOperator)>","<java.util.function.IntUnaryOperator: java.util.function.IntUnaryOperator compose(java.util.function.IntUnaryOperator)>"
"<android.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,int)>","<android.widget.Toolbar: void setSubtitleTextAppearance(android.content.Context,int)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActiveQueueItemId(long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setActiveQueueItemId(long)>"
"<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>","<java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)>"
"<android.content.pm.ResolveInfo: java.lang.String toString()>","<android.content.pm.ResolveInfo: java.lang.String toString()>"
"<android.view.WindowInsets: boolean isRound()>","<android.view.WindowInsets: boolean isRound()>"
"<java.util.stream.LongStream: java.util.stream.Stream mapToObj(java.util.function.LongFunction)>","<java.util.stream.LongStream: java.util.stream.Stream mapToObj(java.util.function.LongFunction)>"
"<android.net.ConnectivityManager: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)>","<android.net.ConnectivityManager: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)>"
"<android.graphics.drawable.Drawable: int getAlpha()>","<android.graphics.drawable.Drawable: int getAlpha()>"
"<android.media.Rating: void <init>()>","<android.media.Rating: void <init>()>"
"<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextLanguage$Request: java.lang.CharSequence getText()>"
"<android.telephony.data.ApnSetting: java.lang.String getPassword()>","<android.telephony.data.ApnSetting: java.lang.String getPassword()>"
"<android.view.inputmethod.TextAttribute: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.TextAttribute: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>"
"<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.os.Parcel: java.util.ArrayList createStringArrayList()>","<android.os.Parcel: java.util.ArrayList createStringArrayList()>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setSource(int)>","<android.view.ContentInfo$Builder: android.view.ContentInfo$Builder setSource(int)>"
"<android.media.AudioManager: void setVibrateSetting(int,int)>","<android.media.AudioManager: void setVibrateSetting(int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setTextEntryKey(boolean)>"
"<android.widget.TextView: int getLineCount()>","<android.widget.TextView: int getLineCount()>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>","<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>"
"<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>","<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>"
"<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>","<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>"
"<java.io.PrintWriter: void println(char)>","<java.io.PrintWriter: void println(char)>"
"<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>","<android.graphics.drawable.Drawable: android.graphics.ColorFilter getColorFilter()>"
"<android.graphics.Bitmap: boolean isPremultiplied()>","<android.graphics.Bitmap: boolean isPremultiplied()>"
"<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>"
"<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>","<android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)>"
"<java.util.concurrent.Semaphore: int availablePermits()>","<java.util.concurrent.Semaphore: int availablePermits()>"
"<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>","<android.view.inputmethod.InputMethodManager: void setInputMethod(android.os.IBinder,java.lang.String)>"
"<android.os.BaseBundle: void <init>()>","<android.os.BaseBundle: void <init>()>"
"<android.content.ClipData: void addItem(android.content.ContentResolver,android.content.ClipData$Item)>","<android.content.ClipData: void addItem(android.content.ContentResolver,android.content.ClipData$Item)>"
"<java.net.URLConnection: java.lang.String getHeaderField(int)>","<java.net.URLConnection: java.lang.String getHeaderField(int)>"
"<android.content.ContextParams$Builder: android.content.ContextParams build()>","<android.content.ContextParams$Builder: android.content.ContextParams build()>"
"<android.database.Cursor: boolean moveToNext()>","<android.database.Cursor: boolean moveToNext()>"
"<android.media.ImageReader$Builder: void <init>(int,int)>","<android.media.ImageReader$Builder: void <init>(int,int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime now()>","<java.time.OffsetDateTime: java.time.OffsetDateTime now()>"
"<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)>","<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)>"
"<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>","<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>"
"<android.view.PixelCopy$OnPixelCopyFinishedListener: void onPixelCopyFinished(int)>","<android.view.PixelCopy$OnPixelCopyFinishedListener: void onPixelCopyFinished(int)>"
"<android.view.ViewGroup: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>","<android.view.ViewGroup: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>"
"<android.media.AudioTrack$OnPlaybackPositionUpdateListener: void onPeriodicNotification(android.media.AudioTrack)>","<android.media.AudioTrack$OnPlaybackPositionUpdateListener: void onPeriodicNotification(android.media.AudioTrack)>"
"<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel truncate(long)>","<java.nio.channels.SeekableByteChannel: java.nio.channels.SeekableByteChannel truncate(long)>"
"<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>","<android.view.inputmethod.InputConnection: java.lang.CharSequence getTextBeforeCursor(int,int)>"
"<android.media.session.PlaybackState: int getState()>","<android.media.session.PlaybackState: int getState()>"
"<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)>"
"<android.telephony.NetworkScanRequest: void writeToParcel(android.os.Parcel,int)>","<android.telephony.NetworkScanRequest: void writeToParcel(android.os.Parcel,int)>"
"<java.time.LocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)>","<android.hardware.SensorManager: java.util.List getDynamicSensorList(int)>"
"<android.view.Window: android.view.Window$Callback getCallback()>","<android.view.Window: android.view.Window$Callback getCallback()>"
"<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.Package: boolean isAnnotationPresent(java.lang.Class)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>"
"<android.view.ViewStructure: void setOpaque(boolean)>","<android.view.ViewStructure: void setOpaque(boolean)>"
"<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>","<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>"
"<android.view.Display: android.hardware.display.DeviceProductInfo getDeviceProductInfo()>","<android.view.Display: android.hardware.display.DeviceProductInfo getDeviceProductInfo()>"
"<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()>","<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()>"
"<java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>","<java.util.concurrent.locks.ReentrantLock: java.lang.String toString()>"
"<java.text.CharacterIterator: int getBeginIndex()>","<java.text.CharacterIterator: int getBeginIndex()>"
"<java.util.Arrays: int binarySearch(short[],int,int,short)>","<java.util.Arrays: int binarySearch(short[],int,int,short)>"
"<android.content.LocusId: java.lang.String toString()>","<android.content.LocusId: java.lang.String toString()>"
"<android.database.Cursor: int getInt(int)>","<android.database.Cursor: int getInt(int)>"
"<java.lang.SecurityException: void <init>()>","<java.lang.SecurityException: void <init>()>"
"<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>","<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>"
"<java.lang.Character: int codePointBefore(char[],int)>","<java.lang.Character: int codePointBefore(char[],int)>"
"<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>","<android.view.View: void postInvalidateOnAnimation(int,int,int,int)>"
"<java.security.NoSuchProviderException: void <init>(java.lang.String)>","<java.security.NoSuchProviderException: void <init>(java.lang.String)>"
"<android.os.Parcel: void readFixedArray(java.lang.Object)>","<android.os.Parcel: void readFixedArray(java.lang.Object)>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectLeft()>"
"<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>","<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)>"
"<android.widget.AbsListView: void onSizeChanged(int,int,int,int)>","<android.widget.AbsListView: void onSizeChanged(int,int,int,int)>"
"<android.app.Activity: void startLocalVoiceInteraction(android.os.Bundle)>","<android.app.Activity: void startLocalVoiceInteraction(android.os.Bundle)>"
"<java.lang.invoke.VarHandle: void loadLoadFence()>","<java.lang.invoke.VarHandle: void loadLoadFence()>"
"<java.util.stream.DoubleStream: boolean anyMatch(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: boolean anyMatch(java.util.function.DoublePredicate)>"
"<android.view.ViewDebug$HierarchyTraceType: void <clinit>()>","<android.view.ViewDebug$HierarchyTraceType: void <clinit>()>"
"<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>","<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>"
"<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()>","<android.view.textclassifier.TextClassification: android.view.View$OnClickListener getOnClickListener()>"
"<android.view.Window$Callback: android.view.View onCreatePanelView(int)>","<android.view.Window$Callback: android.view.View onCreatePanelView(int)>"
"<java.util.OptionalDouble: java.util.OptionalDouble of(double)>","<java.util.OptionalDouble: java.util.OptionalDouble of(double)>"
"<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)>","<android.util.AttributeSet: java.lang.String getAttributeNamespace(int)>"
"<android.view.PixelCopy: void <init>()>","<android.view.PixelCopy: void <init>()>"
"<java.util.OptionalInt: java.util.stream.IntStream stream()>","<java.util.OptionalInt: java.util.stream.IntStream stream()>"
"<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()>","<android.view.textclassifier.TextClassificationSessionId: java.lang.String getValue()>"
"<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>","<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>"
"<android.content.pm.ProviderInfo: int describeContents()>","<android.content.pm.ProviderInfo: int describeContents()>"
"<java.net.URL: void <init>(java.lang.String)>","<java.net.URL: void <init>(java.lang.String)>"
"<java.time.temporal.TemporalField: boolean isTimeBased()>","<java.time.temporal.TemporalField: boolean isTimeBased()>"
"<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()>","<android.telephony.TelephonyManager: java.lang.String getMmsUAProfUrl()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[])>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[])>"
"<android.telephony.TelephonyCallback$PreciseDataConnectionStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>","<android.telephony.TelephonyCallback$PreciseDataConnectionStateListener: void onPreciseDataConnectionStateChanged(android.telephony.PreciseDataConnectionState)>"
"<android.media.AudioRecord: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>","<android.media.AudioRecord: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>"
"<android.view.View: boolean showContextMenu(float,float)>","<android.view.View: boolean showContextMenu(float,float)>"
"<android.media.AudioFormat: java.lang.String toString()>","<android.media.AudioFormat: java.lang.String toString()>"
"<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>","<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>"
"<android.view.ActionProvider: boolean hasSubMenu()>","<android.view.ActionProvider: boolean hasSubMenu()>"
"<android.content.Context: android.content.Context createContext(android.content.ContextParams)>","<android.content.Context: android.content.Context createContext(android.content.ContextParams)>"
"<java.util.Arrays: void parallelSort(java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: void parallelSort(java.lang.Object[],java.util.Comparator)>"
"<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>","<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>"
"<android.animation.LayoutTransition: void <init>()>","<android.animation.LayoutTransition: void <init>()>"
"<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>","<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.util.Map: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>"
"<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>","<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>"
"<android.animation.ValueAnimator: boolean registerDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>","<android.animation.ValueAnimator: boolean registerDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>"
"<org.xmlpull.v1.XmlSerializer: java.lang.String getName()>","<org.xmlpull.v1.XmlSerializer: java.lang.String getName()>"
"<android.view.Window: int getStatusBarColor()>","<android.view.Window: int getStatusBarColor()>"
"<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>","<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>"
"<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>","<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>"
"<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])>","<android.view.ViewGroup: void onNestedPreScroll(android.view.View,int,int,int[])>"
"<android.view.View: void onCancelPendingInputEvents()>","<android.view.View: void onCancelPendingInputEvents()>"
"<android.app.Activity: void setTurnScreenOn(boolean)>","<android.app.Activity: void setTurnScreenOn(boolean)>"
"<android.app.Activity: void onBackPressed()>","<android.app.Activity: void onBackPressed()>"
"<java.nio.FloatBuffer: java.lang.String toString()>","<java.nio.FloatBuffer: java.lang.String toString()>"
"<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>","<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>"
"<android.graphics.ColorSpace: float[] toXyz(float[])>","<android.graphics.ColorSpace: float[] toXyz(float[])>"
"<java.util.concurrent.TimeUnit: long toMicros(long)>","<java.util.concurrent.TimeUnit: long toMicros(long)>"
"<android.telephony.CellIdentity: boolean equals(java.lang.Object)>","<android.telephony.CellIdentity: boolean equals(java.lang.Object)>"
"<java.lang.Math: int floorMod(int,int)>","<java.lang.Math: int floorMod(int,int)>"
"<android.view.ViewDebug: void stopRecyclerTracing()>","<android.view.ViewDebug: void stopRecyclerTracing()>"
"<android.os.Debug$MemoryInfo: java.lang.String getMemoryStat(java.lang.String)>","<android.os.Debug$MemoryInfo: java.lang.String getMemoryStat(java.lang.String)>"
"<java.nio.ShortBuffer: short get(int)>","<java.nio.ShortBuffer: short get(int)>"
"<java.time.chrono.ChronoPeriod: long get(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoPeriod: long get(java.time.temporal.TemporalUnit)>"
"<android.media.session.MediaSession$QueueItem: void writeToParcel(android.os.Parcel,int)>","<android.media.session.MediaSession$QueueItem: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)>","<android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)>"
"<android.telephony.SignalStrength: int getEvdoDbm()>","<android.telephony.SignalStrength: int getEvdoDbm()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.temporal.TemporalAccessor)>"
"<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder excludeUid(int)>","<android.media.AudioPlaybackCaptureConfiguration$Builder: android.media.AudioPlaybackCaptureConfiguration$Builder excludeUid(int)>"
"<android.transition.Transition$TransitionListener: void onTransitionEnd(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionEnd(android.transition.Transition)>"
"<android.content.ClipData$Item: android.net.Uri getUri()>","<android.content.ClipData$Item: android.net.Uri getUri()>"
"<android.graphics.drawable.Drawable: boolean isFilterBitmap()>","<android.graphics.drawable.Drawable: boolean isFilterBitmap()>"
"<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>","<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence)>"
"<android.widget.AbsListView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.AbsListView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>"
"<java.lang.Math: double abs(double)>","<java.lang.Math: double abs(double)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)>"
"<android.view.MotionEvent: java.lang.String axisToString(int)>","<android.view.MotionEvent: java.lang.String axisToString(int)>"
"<android.view.View: void setPivotX(float)>","<android.view.View: void setPivotX(float)>"
"<android.graphics.Color: int red(int)>","<android.graphics.Color: int red(int)>"
"<android.content.Intent: long getLongExtra(java.lang.String,long)>","<android.content.Intent: long getLongExtra(java.lang.String,long)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.invoke.MethodType)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.pm.PathPermission: java.lang.String getWritePermission()>","<android.content.pm.PathPermission: java.lang.String getWritePermission()>"
"<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection,long,java.util.concurrent.TimeUnit)>"
"<android.content.pm.ComponentInfo: int getBannerResource()>","<android.content.pm.ComponentInfo: int getBannerResource()>"
"<android.hardware.Camera$Parameters: boolean getVideoStabilization()>","<android.hardware.Camera$Parameters: boolean getVideoStabilization()>"
"<android.view.View: int computeHorizontalScrollExtent()>","<android.view.View: int computeHorizontalScrollExtent()>"
"<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>","<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)>"
"<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>","<android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)>"
"<java.nio.file.WatchKey: boolean reset()>","<java.nio.file.WatchKey: boolean reset()>"
"<android.graphics.Paint: void setEndHyphenEdit(int)>","<android.graphics.Paint: void setEndHyphenEdit(int)>"
"<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>","<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>"
"<android.util.AttributeSet: int getAttributeResourceValue(int,int)>","<android.util.AttributeSet: int getAttributeResourceValue(int,int)>"
"<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()>","<android.telephony.TelephonyManager: int getPreferredOpportunisticDataSubscription()>"
"<java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)>","<java.util.Collections: java.util.Collection checkedCollection(java.util.Collection,java.lang.Class)>"
"<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>"
"<java.util.OptionalLong: void ifPresent(java.util.function.LongConsumer)>","<java.util.OptionalLong: void ifPresent(java.util.function.LongConsumer)>"
"<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>","<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>"
"<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)>","<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)>"
"<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>","<android.widget.Toolbar: void setContentInsetsAbsolute(int,int)>"
"<java.util.List: java.util.ListIterator listIterator(int)>","<java.util.List: java.util.ListIterator listIterator(int)>"
"<android.view.ViewGroup: void onAttachedToWindow()>","<android.view.ViewGroup: void onAttachedToWindow()>"
"<android.view.SurfaceControlViewHost: void finalize()>","<android.view.SurfaceControlViewHost: void finalize()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseAndAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseAndAcquire(java.lang.Object[])>"
"<java.util.concurrent.locks.Condition: long awaitNanos(long)>","<java.util.concurrent.locks.Condition: long awaitNanos(long)>"
"<android.os.Parcel: void finalize()>","<android.os.Parcel: void finalize()>"
"<android.app.ActivityManager: boolean isLowRamDevice()>","<android.app.ActivityManager: boolean isLowRamDevice()>"
"<android.hardware.camera2.params.InputConfiguration: void <init>(java.util.Collection,int)>","<android.hardware.camera2.params.InputConfiguration: void <init>(java.util.Collection,int)>"
"<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>","<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>"
"<java.util.List: java.util.List of(java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object)>"
"<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.time.LocalDateTime: java.lang.String toString()>","<java.time.LocalDateTime: java.lang.String toString()>"
"<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.content.Context: android.content.Context getApplicationContext()>","<android.content.Context: android.content.Context getApplicationContext()>"
"<android.widget.MediaController$MediaPlayerControl: int getBufferPercentage()>","<android.widget.MediaController$MediaPlayerControl: int getBufferPercentage()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>"
"<android.os.Debug$MemoryInfo: void <init>()>","<android.os.Debug$MemoryInfo: void <init>()>"
"<java.lang.Long: java.lang.Long valueOf(long)>","<java.lang.Long: java.lang.Long valueOf(long)>"
"<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID)>","<android.media.MediaDrm: boolean isCryptoSchemeSupported(java.util.UUID)>"
"<android.text.Editable: android.text.Editable delete(int,int)>","<android.text.Editable: android.text.Editable delete(int,int)>"
"<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>","<java.nio.charset.CoderResult: java.nio.charset.CoderResult unmappableForLength(int)>"
"<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)>","<android.media.MediaPlayer: void setOnTimedTextListener(android.media.MediaPlayer$OnTimedTextListener)>"
"<java.lang.Short: short parseShort(java.lang.String,int)>","<java.lang.Short: short parseShort(java.lang.String,int)>"
"<java.time.Period: java.time.chrono.IsoChronology getChronology()>","<java.time.Period: java.time.chrono.IsoChronology getChronology()>"
"<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableSessionKeys()>","<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableSessionKeys()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>"
"<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()>","<android.view.textclassifier.TextClassifierEvent: android.view.textclassifier.TextClassificationContext getEventContext()>"
"<android.app.Activity: void closeContextMenu()>","<android.app.Activity: void closeContextMenu()>"
"<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>","<java.net.DatagramSocket: java.nio.channels.DatagramChannel getChannel()>"
"<java.util.Arrays: int hashCode(int[])>","<java.util.Arrays: int hashCode(int[])>"
"<android.content.ComponentName: android.content.ComponentName createRelative(android.content.Context,java.lang.String)>","<android.content.ComponentName: android.content.ComponentName createRelative(android.content.Context,java.lang.String)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream filter(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream filter(java.util.function.DoublePredicate)>"
"<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)>","<android.text.PrecomputedText: int getSpanEnd(java.lang.Object)>"
"<java.time.LocalDate: java.time.LocalDate withYear(int)>","<java.time.LocalDate: java.time.LocalDate withYear(int)>"
"<android.graphics.Rect: void set(int,int,int,int)>","<android.graphics.Rect: void set(int,int,int,int)>"
"<android.content.res.AssetManager: void <init>()>","<android.content.res.AssetManager: void <init>()>"
"<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>","<android.os.Parcel: android.util.SparseArray createTypedSparseArray(android.os.Parcelable$Creator)>"
"<java.lang.Character: int codePointAt(char[],int)>","<java.lang.Character: int codePointAt(char[],int)>"
"<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>","<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>"
"<java.lang.Long: byte byteValue()>","<java.lang.Long: byte byteValue()>"
"<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>","<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.GroupPrincipal lookupPrincipalByGroupName(java.lang.String)>"
"<android.view.accessibility.AccessibilityEvent: long getEventTime()>","<android.view.accessibility.AccessibilityEvent: long getEventTime()>"
"<java.time.temporal.ValueRange: long getMinimum()>","<java.time.temporal.ValueRange: long getMinimum()>"
"<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>","<android.app.RemoteAction: android.graphics.drawable.Icon getIcon()>"
"<android.database.Cursor: float getFloat(int)>","<android.database.Cursor: float getFloat(int)>"
"<java.lang.Character: boolean isIdeographic(int)>","<java.lang.Character: boolean isIdeographic(int)>"
"<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)>","<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)>"
"<android.graphics.Canvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.lang.Class: java.net.URL getResource(java.lang.String)>","<java.lang.Class: java.net.URL getResource(java.lang.String)>"
"<java.util.SortedMap: java.util.Set keySet()>","<java.util.SortedMap: java.util.Set keySet()>"
"<android.view.View: void setFocusedByDefault(boolean)>","<android.view.View: void setFocusedByDefault(boolean)>"
"<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>","<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>"
"<android.content.res.Resources$Theme: java.lang.String toString()>","<android.content.res.Resources$Theme: java.lang.String toString()>"
"<java.net.Socket: void shutdownInput()>","<java.net.Socket: void shutdownInput()>"
"<android.content.Intent: boolean hasFileDescriptors()>","<android.content.Intent: boolean hasFileDescriptors()>"
"<android.widget.TextView: void setCompoundDrawablePadding(int)>","<android.widget.TextView: void setCompoundDrawablePadding(int)>"
"<java.time.Period: java.time.chrono.Chronology getChronology()>","<java.time.Period: java.time.chrono.Chronology getChronology()>"
"<android.view.View: void setForegroundGravity(int)>","<android.view.View: void setForegroundGravity(int)>"
"<android.graphics.Path: void rewind()>","<android.graphics.Path: void rewind()>"
"<android.app.Activity: void setRequestedOrientation(int)>","<android.app.Activity: void setRequestedOrientation(int)>"
"<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.io.Writer: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Secure: float getFloat(android.content.ContentResolver,java.lang.String,float)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setUnicodeLocaleKeyword(java.lang.String,java.lang.String)>"
"<android.view.DragEvent: android.content.ClipDescription getClipDescription()>","<android.view.DragEvent: android.content.ClipDescription getClipDescription()>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>","<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>"
"<java.lang.Integer: void <init>(java.lang.String)>","<java.lang.Integer: void <init>(java.lang.String)>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.app.PictureInPictureUiState: void writeToParcel(android.os.Parcel,int)>","<android.app.PictureInPictureUiState: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementSetter(java.lang.Class)>"
"<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<java.lang.Long: double doubleValue()>","<java.lang.Long: double doubleValue()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
"<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>","<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>"
"<java.lang.Number: long longValue()>","<java.lang.Number: long longValue()>"
"<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>","<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>"
"<android.media.MediaPlayer: void <init>()>","<android.media.MediaPlayer: void <init>()>"
"<android.net.IpSecManager$UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()>","<android.net.IpSecManager$UdpEncapsulationSocket: java.io.FileDescriptor getFileDescriptor()>"
"<android.graphics.drawable.LayerDrawable: void setOpacity(int)>","<android.graphics.drawable.LayerDrawable: void setOpacity(int)>"
"<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.Method: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>","<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>"
"<android.widget.Adapter: int getItemViewType(int)>","<android.widget.Adapter: int getItemViewType(int)>"
"<java.time.OffsetDateTime: int hashCode()>","<java.time.OffsetDateTime: int hashCode()>"
"<android.graphics.fonts.FontStyle: int getSlant()>","<android.graphics.fonts.FontStyle: int getSlant()>"
"<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeProvider: void addExtraDataToAccessibilityNodeInfo(int,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>"
"<java.net.URLConnection: void setConnectTimeout(int)>","<java.net.URLConnection: void setConnectTimeout(int)>"
"<android.view.KeyEvent: void setSource(int)>","<android.view.KeyEvent: void setSource(int)>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean contains(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean contains(java.lang.Object)>"
"<java.io.File: java.nio.file.Path toPath()>","<java.io.File: java.nio.file.Path toPath()>"
"<android.media.MediaTimestamp: java.lang.String toString()>","<android.media.MediaTimestamp: java.lang.String toString()>"
"<android.view.View: boolean performHapticFeedback(int,int)>","<android.view.View: boolean performHapticFeedback(int,int)>"
"<java.lang.Float: boolean isNaN()>","<java.lang.Float: boolean isNaN()>"
"<java.util.AbstractCollection: boolean remove(java.lang.Object)>","<java.util.AbstractCollection: boolean remove(java.lang.Object)>"
"<android.view.autofill.AutofillValue: int describeContents()>","<android.view.autofill.AutofillValue: int describeContents()>"
"<android.os.VibrationEffect: int describeContents()>","<android.os.VibrationEffect: int describeContents()>"
"<java.nio.IntBuffer: java.nio.IntBuffer slice()>","<java.nio.IntBuffer: java.nio.IntBuffer slice()>"
"<android.view.View: boolean isHapticFeedbackEnabled()>","<android.view.View: boolean isHapticFeedbackEnabled()>"
"<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>","<android.view.MenuItem: android.view.MenuItem setVisible(boolean)>"
"<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>","<android.view.View: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>"
"<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)>","<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)>"
"<android.app.Dialog: void setCancelable(boolean)>","<android.app.Dialog: void setCancelable(boolean)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectLeft(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectLeft(android.graphics.Rect)>"
"<java.util.Deque: void push(java.lang.Object)>","<java.util.Deque: void push(java.lang.Object)>"
"<android.transition.Transition: android.transition.TransitionPropagation getPropagation()>","<android.transition.Transition: android.transition.TransitionPropagation getPropagation()>"
"<android.view.InputEvent: boolean isFromSource(int)>","<android.view.InputEvent: boolean isFromSource(int)>"
"<java.time.format.ResolverStyle: void <init>(java.lang.String,int)>","<java.time.format.ResolverStyle: void <init>(java.lang.String,int)>"
"<java.lang.Double: byte byteValue()>","<java.lang.Double: byte byteValue()>"
"<java.nio.channels.SelectableChannel: int validOps()>","<java.nio.channels.SelectableChannel: int validOps()>"
"<android.widget.RelativeLayout$LayoutParams: int[] getRules()>","<android.widget.RelativeLayout$LayoutParams: int[] getRules()>"
"<android.app.ActionBar: void setCustomView(int)>","<android.app.ActionBar: void setCustomView(int)>"
"<android.view.ActionMode: void finish()>","<android.view.ActionMode: void finish()>"
"<android.content.SyncAdapterType: boolean allowParallelSyncs()>","<android.content.SyncAdapterType: boolean allowParallelSyncs()>"
"<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()>","<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()>"
"<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int)>","<android.telephony.TelephonyManager: boolean iccCloseLogicalChannel(int)>"
"<android.content.SyncAdapterType: void <init>(android.os.Parcel)>","<android.content.SyncAdapterType: void <init>(android.os.Parcel)>"
"<android.database.sqlite.SQLiteClosable: void close()>","<android.database.sqlite.SQLiteClosable: void close()>"
"<android.net.NetworkRequest: int[] getTransportTypes()>","<android.net.NetworkRequest: int[] getTransportTypes()>"
"<android.hardware.display.DeviceProductInfo: void <clinit>()>","<android.hardware.display.DeviceProductInfo: void <clinit>()>"
"<android.media.MediaMetadata: int describeContents()>","<android.media.MediaMetadata: int describeContents()>"
"<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>","<java.net.DatagramSocket: void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory)>"
"<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>"
"<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.view.View: boolean isInEditMode()>","<android.view.View: boolean isInEditMode()>"
"<android.hardware.display.VirtualDisplay: void release()>","<android.hardware.display.VirtualDisplay: void release()>"
"<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>","<android.app.ActivityManager$TaskDescription: int getStatusBarColor()>"
"<java.lang.Thread$State: java.lang.Thread$State[] values()>","<java.lang.Thread$State: java.lang.Thread$State[] values()>"
"<android.view.View: boolean startNestedScroll(int)>","<android.view.View: boolean startNestedScroll(int)>"
"<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object ceilingKey(java.lang.Object)>"
"<java.lang.String: char charAt(int)>","<java.lang.String: char charAt(int)>"
"<android.view.InputDevice$MotionRange: int getSource()>","<android.view.InputDevice$MotionRange: int getSource()>"
"<android.media.session.MediaController: java.lang.String getPackageName()>","<android.media.session.MediaController: java.lang.String getPackageName()>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getSynonymAt(int)>","<android.app.VoiceInteractor$PickOptionRequest$Option: java.lang.CharSequence getSynonymAt(int)>"
"<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>","<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>"
"<java.net.SocketImpl: java.lang.Object getOption(java.net.SocketOption)>","<java.net.SocketImpl: java.lang.Object getOption(java.net.SocketOption)>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>","<java.util.concurrent.ConcurrentLinkedQueue: java.util.Iterator iterator()>"
"<java.util.List: void add(int,java.lang.Object)>","<java.util.List: void add(int,java.lang.Object)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<android.widget.RemoteViews: int getViewId()>","<android.widget.RemoteViews: int getViewId()>"
"<android.content.ComponentName: java.lang.String getShortClassName()>","<android.content.ComponentName: java.lang.String getShortClassName()>"
"<android.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()>","<android.widget.Toolbar: java.lang.CharSequence getCollapseContentDescription()>"
"<android.view.textclassifier.TextClassification$Request: int getStartIndex()>","<android.view.textclassifier.TextClassification$Request: int getStartIndex()>"
"<java.util.regex.Matcher: java.util.regex.Pattern pattern()>","<java.util.regex.Matcher: java.util.regex.Pattern pattern()>"
"<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<java.net.DatagramPacket: java.net.InetAddress getAddress()>","<java.net.DatagramPacket: java.net.InetAddress getAddress()>"
"<android.app.Person$Builder: android.app.Person$Builder setImportant(boolean)>","<android.app.Person$Builder: android.app.Person$Builder setImportant(boolean)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)>"
"<java.util.SortedMap: java.util.SortedMap headMap(java.lang.Object)>","<java.util.SortedMap: java.util.SortedMap headMap(java.lang.Object)>"
"<android.view.textclassifier.SelectionEvent: int getSmartEnd()>","<android.view.textclassifier.SelectionEvent: int getSmartEnd()>"
"<android.widget.Toolbar$LayoutParams: void <init>(int,int,int)>","<android.widget.Toolbar$LayoutParams: void <init>(int,int,int)>"
"<android.graphics.Path: void rQuadTo(float,float,float,float)>","<android.graphics.Path: void rQuadTo(float,float,float,float)>"
"<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>","<android.database.sqlite.SQLiteDatabase: long getMaximumSize()>"
"<android.view.autofill.AutofillId: int hashCode()>","<android.view.autofill.AutofillId: int hashCode()>"
"<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>","<java.util.regex.Matcher: java.util.regex.Matcher useTransparentBounds(boolean)>"
"<android.graphics.Path: void incReserve(int)>","<android.graphics.Path: void incReserve(int)>"
"<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)>","<android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.ComponentName)>"
"<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>","<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>"
"<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.PorterDuff$Mode)>","<android.graphics.RecordingCanvas: void drawColor(int,android.graphics.PorterDuff$Mode)>"
"<java.lang.String: java.util.stream.IntStream chars()>","<java.lang.String: java.util.stream.IntStream chars()>"
"<android.media.Session2Token: java.lang.String toString()>","<android.media.Session2Token: java.lang.String toString()>"
"<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>","<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>"
"<android.view.ViewStructure: void setActivated(boolean)>","<android.view.ViewStructure: void setActivated(boolean)>"
"<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>","<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericExceptionTypes()>"
"<android.app.Fragment: boolean isStateSaved()>","<android.app.Fragment: boolean isStateSaved()>"
"<android.hardware.Camera: void startSmoothZoom(int)>","<android.hardware.Camera: void startSmoothZoom(int)>"
"<java.lang.Thread: void stop()>","<java.lang.Thread: void stop()>"
"<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>","<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>"
"<android.media.MediaPlayer: void setSyncParams(android.media.SyncParams)>","<android.media.MediaPlayer: void setSyncParams(android.media.SyncParams)>"
"<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>","<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>"
"<java.util.Date: int getTimezoneOffset()>","<java.util.Date: int getTimezoneOffset()>"
"<android.os.Parcel: void writeParcelableList(java.util.List,int)>","<android.os.Parcel: void writeParcelableList(java.util.List,int)>"
"<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>","<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>","<android.content.pm.PackageManager: android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)>"
"<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>"
"<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>","<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void onViewAdded(android.view.View)>","<android.view.ViewGroup: void onViewAdded(android.view.View)>"
"<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()>","<android.hardware.camera2.params.SessionConfiguration: java.util.concurrent.Executor getExecutor()>"
"<java.lang.Math: double sqrt(double)>","<java.lang.Math: double sqrt(double)>"
"<android.util.LongSparseArray: java.lang.String toString()>","<android.util.LongSparseArray: java.lang.String toString()>"
"<android.os.Looper: android.os.Looper getMainLooper()>","<android.os.Looper: android.os.Looper getMainLooper()>"
"<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>","<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>"
"<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()>","<android.content.ContextWrapper: android.content.Context createDeviceProtectedStorageContext()>"
"<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>","<android.hardware.camera2.CameraCaptureSession: int setRepeatingBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>"
"<java.lang.Package: java.lang.String getImplementationVendor()>","<java.lang.Package: java.lang.String getImplementationVendor()>"
"<android.graphics.Outline: void setRect(android.graphics.Rect)>","<android.graphics.Outline: void setRect(android.graphics.Rect)>"
"<android.media.MediaPlayer: void clearOnSubtitleDataListener()>","<android.media.MediaPlayer: void clearOnSubtitleDataListener()>"
"<org.xmlpull.v1.XmlSerializer: void endDocument()>","<org.xmlpull.v1.XmlSerializer: void endDocument()>"
"<java.net.InetAddress: boolean isSiteLocalAddress()>","<java.net.InetAddress: boolean isSiteLocalAddress()>"
"<java.util.Properties: void <init>()>","<java.util.Properties: void <init>()>"
"<java.util.stream.DoubleStream: java.util.Iterator iterator()>","<java.util.stream.DoubleStream: java.util.Iterator iterator()>"
"<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>","<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)>"
"<android.widget.RelativeLayout: int getBaseline()>","<android.widget.RelativeLayout: int getBaseline()>"
"<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>","<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>"
"<android.net.ConnectivityManager: void removeDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)>","<android.net.ConnectivityManager: void removeDefaultNetworkActiveListener(android.net.ConnectivityManager$OnNetworkActiveListener)>"
"<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)>","<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)>"
"<android.view.textclassifier.SelectionEvent: int hashCode()>","<android.view.textclassifier.SelectionEvent: int hashCode()>"
"<android.view.WindowInsetsAnimation$Bounds: android.view.WindowInsetsAnimation$Bounds inset(android.graphics.Insets)>","<android.view.WindowInsetsAnimation$Bounds: android.view.WindowInsetsAnimation$Bounds inset(android.graphics.Insets)>"
"<android.view.textclassifier.TextSelection$Request: int getStartIndex()>","<android.view.textclassifier.TextSelection$Request: int getStartIndex()>"
"<java.util.ArrayList: int size()>","<java.util.ArrayList: int size()>"
"<java.lang.String: java.lang.String valueOf(java.lang.Object)>","<java.lang.String: java.lang.String valueOf(java.lang.Object)>"
"<android.graphics.drawable.LayerDrawable: boolean isProjected()>","<android.graphics.drawable.LayerDrawable: boolean isProjected()>"
"<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)>","<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)>"
"<java.lang.invoke.MethodType: boolean hasPrimitives()>","<java.lang.invoke.MethodType: boolean hasPrimitives()>"
"<java.io.OutputStream: void write(byte[])>","<java.io.OutputStream: void write(byte[])>"
"<android.view.textclassifier.TextLinks$TextLinkSpan: android.view.textclassifier.TextLinks$TextLink getTextLink()>","<android.view.textclassifier.TextLinks$TextLinkSpan: android.view.textclassifier.TextLinks$TextLink getTextLink()>"
"<android.view.View: void onViewTranslationResponse(android.view.translation.ViewTranslationResponse)>","<android.view.View: void onViewTranslationResponse(android.view.translation.ViewTranslationResponse)>"
"<android.net.Uri: java.lang.String getLastPathSegment()>","<android.net.Uri: java.lang.String getLastPathSegment()>"
"<android.net.RouteInfo: int describeContents()>","<android.net.RouteInfo: int describeContents()>"
"<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$ConversationActionsEvent$Builder: void <init>(int)>"
"<android.database.sqlite.SQLiteProgram: void <init>()>","<android.database.sqlite.SQLiteProgram: void <init>()>"
"<android.hardware.lights.LightsManager$LightsSession: void close()>","<android.hardware.lights.LightsManager$LightsSession: void close()>"
"<android.content.AttributionSource$Builder: void <init>(android.content.AttributionSource)>","<android.content.AttributionSource$Builder: void <init>(android.content.AttributionSource)>"
"<android.content.Context: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.Context: boolean bindIsolatedService(android.content.Intent,int,java.lang.String,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<android.os.MemoryFile: int length()>","<android.os.MemoryFile: int length()>"
"<java.net.Socket: boolean isOutputShutdown()>","<java.net.Socket: boolean isOutputShutdown()>"
"<java.lang.reflect.Field: java.lang.String toGenericString()>","<java.lang.reflect.Field: java.lang.String toGenericString()>"
"<android.graphics.drawable.LayerDrawable: int getIntrinsicWidth()>","<android.graphics.drawable.LayerDrawable: int getIntrinsicWidth()>"
"<android.telephony.BarringInfo: void <init>()>","<android.telephony.BarringInfo: void <init>()>"
"<android.content.Context: android.content.ContextParams getParams()>","<android.content.Context: android.content.ContextParams getParams()>"
"<java.lang.Math: int floorDiv(int,int)>","<java.lang.Math: int floorDiv(int,int)>"
"<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>","<android.media.AudioManager: boolean isOffloadedPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>"
"<android.view.inputmethod.EditorBoundsInfo: void <clinit>()>","<android.view.inputmethod.EditorBoundsInfo: void <clinit>()>"
"<android.app.Dialog: void onWindowFocusChanged(boolean)>","<android.app.Dialog: void onWindowFocusChanged(boolean)>"
"<android.view.accessibility.AccessibilityWindowInfo: void writeToParcel(android.os.Parcel,int)>","<android.view.accessibility.AccessibilityWindowInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.KeyEvent$Callback: boolean onKeyLongPress(int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyLongPress(int,android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View)>"
"<android.widget.TextView: int getLeftPaddingOffset()>","<android.widget.TextView: int getLeftPaddingOffset()>"
"<java.util.regex.Matcher: int regionEnd()>","<java.util.regex.Matcher: int regionEnd()>"
"<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()>","<android.media.AudioTrack: android.media.AudioDeviceInfo getPreferredDevice()>"
"<android.view.ViewGroup$MarginLayoutParams: void setMarginStart(int)>","<android.view.ViewGroup$MarginLayoutParams: void setMarginStart(int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)>"
"<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>"
"<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)>","<android.hardware.camera2.params.StreamConfigurationMap: int[] getValidOutputFormatsForInput(int)>"
"<android.view.KeyCharacterMap: int getDeadChar(int,int)>","<android.view.KeyCharacterMap: int getDeadChar(int,int)>"
"<android.graphics.RenderNode: float getCameraDistance()>","<android.graphics.RenderNode: float getCameraDistance()>"
"<android.view.textclassifier.TextLinks$TextLink: float getConfidenceScore(java.lang.String)>","<android.view.textclassifier.TextLinks$TextLink: float getConfidenceScore(java.lang.String)>"
"<java.nio.channels.SelectionKey: java.lang.Object attachment()>","<java.nio.channels.SelectionKey: java.lang.Object attachment()>"
"<android.view.View: void setStateDescription(java.lang.CharSequence)>","<android.view.View: void setStateDescription(java.lang.CharSequence)>"
"<android.view.Window: android.view.LayoutInflater getLayoutInflater()>","<android.view.Window: android.view.LayoutInflater getLayoutInflater()>"
"<android.os.Looper: void loop()>","<android.os.Looper: void loop()>"
"<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>","<java.nio.DoubleBuffer: boolean equals(java.lang.Object)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>","<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>","<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>"
"<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchRestoreInstanceState(android.util.SparseArray)>"
"<android.content.ComponentName: int compareTo(java.lang.Object)>","<android.content.ComponentName: int compareTo(java.lang.Object)>"
"<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>","<android.content.pm.ComponentInfo: void <init>(android.os.Parcel)>"
"<android.app.LoaderManager$LoaderCallbacks: android.content.Loader onCreateLoader(int,android.os.Bundle)>","<android.app.LoaderManager$LoaderCallbacks: android.content.Loader onCreateLoader(int,android.os.Bundle)>"
"<android.animation.ValueAnimator: void setFrameDelay(long)>","<android.animation.ValueAnimator: void setFrameDelay(long)>"
"<android.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)>","<android.widget.Toolbar: void setLogoDescription(java.lang.CharSequence)>"
"<android.view.View: int getExplicitStyle()>","<android.view.View: int getExplicitStyle()>"
"<java.util.Locale: java.lang.String getLanguage()>","<java.util.Locale: java.lang.String getLanguage()>"
"<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>","<android.hardware.camera2.CameraDevice: android.hardware.camera2.CaptureRequest$Builder createCaptureRequest(int)>"
"<java.util.concurrent.locks.Lock: void unlock()>","<java.util.concurrent.locks.Lock: void unlock()>"
"<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>","<android.hardware.camera2.params.MeteringRectangle: android.graphics.Rect getRect()>"
"<android.widget.TextView: void endBatchEdit()>","<android.widget.TextView: void endBatchEdit()>"
"<java.util.stream.LongStream: java.util.stream.DoubleStream asDoubleStream()>","<java.util.stream.LongStream: java.util.stream.DoubleStream asDoubleStream()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>"
"<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>","<android.util.AttributeSet: boolean getAttributeBooleanValue(int,boolean)>"
"<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>","<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>"
"<android.view.KeyEvent: boolean isMediaSessionKey(int)>","<android.view.KeyEvent: boolean isMediaSessionKey(int)>"
"<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)>","<android.os.BaseBundle: double[] getDoubleArray(java.lang.String)>"
"<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>","<android.graphics.Color: long pack(float,float,float,float,android.graphics.ColorSpace)>"
"<java.util.Arrays: void fill(short[],int,int,short)>","<java.util.Arrays: void fill(short[],int,int,short)>"
"<android.graphics.drawable.ColorDrawable: void applyTheme(android.content.res.Resources$Theme)>","<android.graphics.drawable.ColorDrawable: void applyTheme(android.content.res.Resources$Theme)>"
"<android.media.MediaPlayer$DrmInfo: java.util.UUID[] getSupportedSchemes()>","<android.media.MediaPlayer$DrmInfo: java.util.UUID[] getSupportedSchemes()>"
"<android.os.Debug: int getThreadAllocCount()>","<android.os.Debug: int getThreadAllocCount()>"
"<android.hardware.camera2.params.OutputConfiguration: int describeContents()>","<android.hardware.camera2.params.OutputConfiguration: int describeContents()>"
"<android.view.View: int getScrollCaptureHint()>","<android.view.View: int getScrollCaptureHint()>"
"<android.content.ContextWrapper: java.lang.String[] databaseList()>","<android.content.ContextWrapper: java.lang.String[] databaseList()>"
"<java.nio.file.WatchService: java.nio.file.WatchKey poll()>","<java.nio.file.WatchService: java.nio.file.WatchKey poll()>"
"<java.util.stream.Stream: java.util.Optional min(java.util.Comparator)>","<java.util.stream.Stream: java.util.Optional min(java.util.Comparator)>"
"<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>","<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>"
"<android.app.Activity: boolean hasWindowFocus()>","<android.app.Activity: boolean hasWindowFocus()>"
"<android.view.View: boolean performContextClick()>","<android.view.View: boolean performContextClick()>"
"<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()>","<android.graphics.fonts.Font: java.nio.ByteBuffer getBuffer()>"
"<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>","<android.widget.ListView: void addFooterView(android.view.View,java.lang.Object,boolean)>"
"<android.hardware.Camera$Parameters: void setJpegQuality(int)>","<android.hardware.Camera$Parameters: void setJpegQuality(int)>"
"<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>","<android.os.BaseBundle: java.lang.String[] getStringArray(java.lang.String)>"
"<android.media.session.MediaSession: void setSessionActivity(android.app.PendingIntent)>","<android.media.session.MediaSession: void setSessionActivity(android.app.PendingIntent)>"
"<java.lang.Math: double ulp(double)>","<java.lang.Math: double ulp(double)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnTitle(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setColumnTitle(java.lang.String)>"
"<android.app.ActionBar: void setSelectedNavigationItem(int)>","<android.app.ActionBar: void setSelectedNavigationItem(int)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder setExtras(android.os.Bundle)>"
"<android.content.pm.PackageManager: java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: java.util.List getInstalledPackages(android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>","<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>"
"<android.media.MediaDrm$CryptoSession: void <init>(android.media.MediaDrm)>","<android.media.MediaDrm$CryptoSession: void <init>(android.media.MediaDrm)>"
"<android.app.Activity: void onMultiWindowModeChanged(boolean)>","<android.app.Activity: void onMultiWindowModeChanged(boolean)>"
"<android.media.AudioTrack: void unregisterStreamEventCallback(android.media.AudioTrack$StreamEventCallback)>","<android.media.AudioTrack: void unregisterStreamEventCallback(android.media.AudioTrack$StreamEventCallback)>"
"<android.telephony.RadioAccessSpecifier: void writeToParcel(android.os.Parcel,int)>","<android.telephony.RadioAccessSpecifier: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Canvas: void restoreToCount(int)>","<android.graphics.Canvas: void restoreToCount(int)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
"<android.graphics.fonts.Font: float getGlyphBounds(int,android.graphics.Paint,android.graphics.RectF)>","<android.graphics.fonts.Font: float getGlyphBounds(int,android.graphics.Paint,android.graphics.RectF)>"
"<android.graphics.RecordingCanvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>"
"<android.graphics.Path: boolean isEmpty()>","<android.graphics.Path: boolean isEmpty()>"
"<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>"
"<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>","<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>"
"<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>","<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>"
"<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>","<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>"
"<java.util.ArrayList: void removeRange(int,int)>","<java.util.ArrayList: void removeRange(int,int)>"
"<java.net.UnknownHostException: void <init>(java.lang.String)>","<java.net.UnknownHostException: void <init>(java.lang.String)>"
"<android.os.ParcelFileDescriptor: void finalize()>","<android.os.ParcelFileDescriptor: void finalize()>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>","<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>"
"<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>","<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>"
"<android.view.textclassifier.TextLinks: void <clinit>()>","<android.view.textclassifier.TextLinks: void <clinit>()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)>"
"<android.media.AudioTrack: void setOffloadEndOfStream()>","<android.media.AudioTrack: void setOffloadEndOfStream()>"
"<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()>","<android.hardware.camera2.TotalCaptureResult: java.util.Map getPhysicalCameraResults()>"
"<java.net.Inet4Address: int hashCode()>","<java.net.Inet4Address: int hashCode()>"
"<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>","<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>"
"<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>","<android.content.Intent: android.content.Intent setDataAndTypeAndNormalize(android.net.Uri,java.lang.String)>"
"<android.widget.ListView: void onSizeChanged(int,int,int,int)>","<android.widget.ListView: void onSizeChanged(int,int,int,int)>"
"<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>","<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>"
"<java.util.OptionalLong: void ifPresentOrElse(java.util.function.LongConsumer,java.lang.Runnable)>","<java.util.OptionalLong: void ifPresentOrElse(java.util.function.LongConsumer,java.lang.Runnable)>"
"<java.time.Period: java.time.Period ofYears(int)>","<java.time.Period: java.time.Period ofYears(int)>"
"<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>","<android.view.MenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>"
"<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()>","<android.content.pm.PackageInstaller$Session: int[] getChildSessionIds()>"
"<android.graphics.RectF: boolean intersects(float,float,float,float)>","<android.graphics.RectF: boolean intersects(float,float,float,float)>"
"<android.view.WindowInsets$Type: int captionBar()>","<android.view.WindowInsets$Type: int captionBar()>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighSpeedVideoSizesFor(android.util.Range)>"
"<android.widget.Toolbar: void setSubtitle(java.lang.CharSequence)>","<android.widget.Toolbar: void setSubtitle(java.lang.CharSequence)>"
"<java.util.UUID: long getLeastSignificantBits()>","<java.util.UUID: long getLeastSignificantBits()>"
"<java.util.stream.LongStream: java.util.OptionalLong max()>","<java.util.stream.LongStream: java.util.OptionalLong max()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>"
"<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>"
"<java.nio.channels.Pipe: java.nio.channels.Pipe open()>","<java.nio.channels.Pipe: java.nio.channels.Pipe open()>"
"<android.content.res.Resources: int getInteger(int)>","<android.content.res.Resources: int getInteger(int)>"
"<android.widget.MediaController$MediaPlayerControl: void seekTo(int)>","<android.widget.MediaController$MediaPlayerControl: void seekTo(int)>"
"<java.util.Arrays: int binarySearch(int[],int)>","<java.util.Arrays: int binarySearch(int[],int)>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)>"
"<java.util.stream.Stream: java.util.stream.Stream limit(long)>","<java.util.stream.Stream: java.util.stream.Stream limit(long)>"
"<android.database.sqlite.SQLiteClosable: void releaseReference()>","<android.database.sqlite.SQLiteClosable: void releaseReference()>"
"<java.security.Permission: void <init>(java.lang.String)>","<java.security.Permission: void <init>(java.lang.String)>"
"<android.view.MotionEvent: long getDownTime()>","<android.view.MotionEvent: long getDownTime()>"
"<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<android.view.Window: boolean isActive()>","<android.view.Window: boolean isActive()>"
"<java.lang.String: java.lang.String valueOf(char[])>","<java.lang.String: java.lang.String valueOf(char[])>"
"<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.Class: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>","<java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>"
"<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)>","<android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)>"
"<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<java.util.Arrays: java.lang.String toString(float[])>","<java.util.Arrays: java.lang.String toString(float[])>"
"<android.view.ContentInfo$Builder: void <init>(android.view.ContentInfo)>","<android.view.ContentInfo$Builder: void <init>(android.view.ContentInfo)>"
"<java.lang.InternalError: void <init>(java.lang.Throwable)>","<java.lang.InternalError: void <init>(java.lang.Throwable)>"
"<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes)>","<android.os.VibrationAttributes$Builder: void <init>(android.media.AudioAttributes)>"
"<android.telecom.PhoneAccountHandle: int describeContents()>","<android.telecom.PhoneAccountHandle: int describeContents()>"
"<android.util.SparseArray: void <init>()>","<android.util.SparseArray: void <init>()>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String toString()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String toString()>"
"<android.icu.util.ULocale: java.lang.String toUnicodeLocaleType(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String toUnicodeLocaleType(java.lang.String,java.lang.String)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setVisibility(android.view.SurfaceControl,boolean)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setVisibility(android.view.SurfaceControl,boolean)>"
"<java.util.Arrays: void fill(byte[],byte)>","<java.util.Arrays: void fill(byte[],byte)>"
"<java.lang.invoke.VarHandle$AccessMode: java.lang.String methodName()>","<java.lang.invoke.VarHandle$AccessMode: java.lang.String methodName()>"
"<java.nio.channels.SelectableChannel: void <init>()>","<java.nio.channels.SelectableChannel: void <init>()>"
"<java.security.Provider: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.security.Provider: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<java.time.format.DateTimeFormatter: java.text.Format toFormat(java.time.temporal.TemporalQuery)>","<java.time.format.DateTimeFormatter: java.text.Format toFormat(java.time.temporal.TemporalQuery)>"
"<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>","<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>"
"<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>","<android.hardware.Camera$Parameters: int getMaxNumMeteringAreas()>"
"<android.app.Fragment: boolean isInLayout()>","<android.app.Fragment: boolean isInLayout()>"
"<android.os.Looper: void dump(android.util.Printer,java.lang.String)>","<android.os.Looper: void dump(android.util.Printer,java.lang.String)>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.TextClassification classifyText(android.view.textclassifier.TextClassification$Request)>"
"<android.view.inputmethod.SurroundingText: int getSelectionEnd()>","<android.view.inputmethod.SurroundingText: int getSelectionEnd()>"
"<java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>","<java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>"
"<android.net.IpSecManager: android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress,int)>","<android.net.IpSecManager: android.net.IpSecManager$SecurityParameterIndex allocateSecurityParameterIndex(java.net.InetAddress,int)>"
"<android.media.AudioRecordingConfiguration: int getClientAudioSessionId()>","<android.media.AudioRecordingConfiguration: int getClientAudioSessionId()>"
"<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>","<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>"
"<android.media.MediaDrm: java.util.List getLogMessages()>","<android.media.MediaDrm: java.util.List getLogMessages()>"
"<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()>","<android.app.Activity: android.transition.TransitionManager getContentTransitionManager()>"
"<android.view.ViewStructure: android.view.ViewStructure newChild(int)>","<android.view.ViewStructure: android.view.ViewStructure newChild(int)>"
"<java.net.DatagramSocket: void setBroadcast(boolean)>","<java.net.DatagramSocket: void setBroadcast(boolean)>"
"<android.telephony.TelephonyDisplayInfo: int hashCode()>","<android.telephony.TelephonyDisplayInfo: int hashCode()>"
"<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<java.util.stream.IntStream: long count()>","<java.util.stream.IntStream: long count()>"
"<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>","<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>"
"<android.os.Looper: java.lang.Thread getThread()>","<android.os.Looper: java.lang.Thread getThread()>"
"<android.net.NetworkInfo: int describeContents()>","<android.net.NetworkInfo: int describeContents()>"
"<java.net.DatagramSocketImpl: int getTimeToLive()>","<java.net.DatagramSocketImpl: int getTimeToLive()>"
"<android.view.InputDevice: int[] getDeviceIds()>","<android.view.InputDevice: int[] getDeviceIds()>"
"<android.view.MotionEvent: float getAxisValue(int,int)>","<android.view.MotionEvent: float getAxisValue(int,int)>"
"<android.widget.AbsListView$MultiChoiceModeListener: void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)>","<android.widget.AbsListView$MultiChoiceModeListener: void onItemCheckedStateChanged(android.view.ActionMode,int,long,boolean)>"
"<android.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>","<android.app.ActionBar$OnMenuVisibilityListener: void onMenuVisibilityChanged(boolean)>"
"<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>","<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>"
"<android.hardware.camera2.params.OutputConfiguration: void addSurface(android.view.Surface)>","<android.hardware.camera2.params.OutputConfiguration: void addSurface(android.view.Surface)>"
"<android.graphics.fonts.FontFamily: int getSize()>","<android.graphics.fonts.FontFamily: int getSize()>"
"<java.time.ZoneId: java.time.ZoneId of(java.lang.String)>","<java.time.ZoneId: java.time.ZoneId of(java.lang.String)>"
"<android.net.LinkProperties: java.lang.String getPrivateDnsServerName()>","<android.net.LinkProperties: java.lang.String getPrivateDnsServerName()>"
"<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>","<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>"
"<android.util.SparseBooleanArray: java.lang.Object clone()>","<android.util.SparseBooleanArray: java.lang.Object clone()>"
"<android.widget.TextView: int getFirstBaselineToTopHeight()>","<android.widget.TextView: int getFirstBaselineToTopHeight()>"
"<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>"
"<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>","<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])>"
"<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>","<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>"
"<android.widget.Scroller: float getCurrVelocity()>","<android.widget.Scroller: float getCurrVelocity()>"
"<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setViewTypeCount(int)>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems$Builder setViewTypeCount(int)>"
"<java.lang.Math: double min(double,double)>","<java.lang.Math: double min(double,double)>"
"<android.app.Activity: void finishActivity(int)>","<android.app.Activity: void finishActivity(int)>"
"<android.text.Layout: int getEllipsisCount(int)>","<android.text.Layout: int getEllipsisCount(int)>"
"<java.lang.Float: java.lang.String toString()>","<java.lang.Float: java.lang.String toString()>"
"<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>"
"<android.app.AlertDialog: boolean onKeyUp(int,android.view.KeyEvent)>","<android.app.AlertDialog: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.util.stream.IntStream: boolean allMatch(java.util.function.IntPredicate)>","<java.util.stream.IntStream: boolean allMatch(java.util.function.IntPredicate)>"
"<java.time.temporal.TemporalAmount: java.util.List getUnits()>","<java.time.temporal.TemporalAmount: java.util.List getUnits()>"
"<java.security.Provider$Service: java.lang.String getClassName()>","<java.security.Provider$Service: java.lang.String getClassName()>"
"<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>","<android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>"
"<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()>","<android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()>"
"<android.util.Range: boolean contains(android.util.Range)>","<android.util.Range: boolean contains(android.util.Range)>"
"<java.net.Socket: void setReuseAddress(boolean)>","<java.net.Socket: void setReuseAddress(boolean)>"
"<android.view.View: void setWillNotCacheDrawing(boolean)>","<android.view.View: void setWillNotCacheDrawing(boolean)>"
"<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>","<java.util.DoubleSummaryStatistics: void combine(java.util.DoubleSummaryStatistics)>"
"<android.widget.AdapterView: int getFirstVisiblePosition()>","<android.widget.AdapterView: int getFirstVisiblePosition()>"
"<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>","<android.app.FragmentManager: boolean popBackStackImmediate(java.lang.String,int)>"
"<android.widget.MediaController: void setAnchorView(android.view.View)>","<android.widget.MediaController: void setAnchorView(android.view.View)>"
"<android.util.SparseArray: void removeAtRange(int,int)>","<android.util.SparseArray: void removeAtRange(int,int)>"
"<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>","<android.transition.Transition: android.transition.Transition excludeTarget(android.view.View,boolean)>"
"<java.nio.LongBuffer: java.nio.Buffer flip()>","<java.nio.LongBuffer: java.nio.Buffer flip()>"
"<java.net.URI: java.lang.String getRawQuery()>","<java.net.URI: java.lang.String getRawQuery()>"
"<java.io.File: boolean createNewFile()>","<java.io.File: boolean createNewFile()>"
"<java.util.function.DoublePredicate: boolean test(double)>","<java.util.function.DoublePredicate: boolean test(double)>"
"<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>","<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>"
"<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>","<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>"
"<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>","<android.media.MediaPlayer: void setAudioAttributes(android.media.AudioAttributes)>"
"<android.app.RemoteAction: void setShouldShowIcon(boolean)>","<android.app.RemoteAction: void setShouldShowIcon(boolean)>"
"<android.app.TaskStackBuilder: void startActivities()>","<android.app.TaskStackBuilder: void startActivities()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)>"
"<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int[],int)>","<android.os.VibrationEffect: android.os.VibrationEffect createWaveform(long[],int[],int)>"
"<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>","<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>"
"<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>","<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>","<android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)>"
"<java.nio.CharBuffer: java.nio.ByteOrder order()>","<java.nio.CharBuffer: java.nio.ByteOrder order()>"
"<java.util.UUID: long timestamp()>","<java.util.UUID: long timestamp()>"
"<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>","<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>"
"<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)>"
"<java.time.format.TextStyle: java.time.format.TextStyle valueOf(java.lang.String)>","<java.time.format.TextStyle: java.time.format.TextStyle valueOf(java.lang.String)>"
"<android.graphics.Matrix: boolean postRotate(float)>","<android.graphics.Matrix: boolean postRotate(float)>"
"<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>","<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>"
"<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getTargetSpec()>","<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getTargetSpec()>"
"<android.os.Process: int getUidForName(java.lang.String)>","<android.os.Process: int getUidForName(java.lang.String)>"
"<android.content.ClipDescription: java.lang.String toString()>","<android.content.ClipDescription: java.lang.String toString()>"
"<android.view.translation.TranslationSpec: int describeContents()>","<android.view.translation.TranslationSpec: int describeContents()>"
"<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)>","<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)>"
"<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>","<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>"
"<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>","<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>"
"<java.time.OffsetTime: java.time.OffsetTime plusHours(long)>","<java.time.OffsetTime: java.time.OffsetTime plusHours(long)>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectTop()>"
"<android.media.AudioFormat: int getSampleRate()>","<android.media.AudioFormat: int getSampleRate()>"
"<android.hardware.Sensor: int getId()>","<android.hardware.Sensor: int getId()>"
"<android.os.VibratorManager: android.os.Vibrator getVibrator(int)>","<android.os.VibratorManager: android.os.Vibrator getVibrator(int)>"
"<android.view.Window: void setDecorCaptionShade(int)>","<android.view.Window: void setDecorCaptionShade(int)>"
"<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>","<android.view.Window: boolean superDispatchTouchEvent(android.view.MotionEvent)>"
"<android.net.IpSecManager$SecurityParameterIndex: void <init>()>","<android.net.IpSecManager$SecurityParameterIndex: void <init>()>"
"<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>","<java.util.concurrent.ExecutorService: java.util.List invokeAll(java.util.Collection)>"
"<android.widget.TextView: void onLayout(boolean,int,int,int,int)>","<android.widget.TextView: void onLayout(boolean,int,int,int,int)>"
"<java.lang.String: void <init>(char[],int,int)>","<java.lang.String: void <init>(char[],int,int)>"
"<android.app.Activity: void setIntent(android.content.Intent)>","<android.app.Activity: void setIntent(android.content.Intent)>"
"<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>","<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>"
"<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()>","<java.util.concurrent.locks.ReentrantLock: java.util.Collection getQueuedThreads()>"
"<android.os.BaseBundle: int getInt(java.lang.String)>","<android.os.BaseBundle: int getInt(java.lang.String)>"
"<java.util.stream.LongStream: void forEach(java.util.function.LongConsumer)>","<java.util.stream.LongStream: void forEach(java.util.function.LongConsumer)>"
"<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>","<android.app.Fragment: void startActivityForResult(android.content.Intent,int)>"
"<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>"
"<android.view.MotionEvent: float getHistoricalToolMajor(int)>","<android.view.MotionEvent: float getHistoricalToolMajor(int)>"
"<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.content.IntentSender: int hashCode()>","<android.content.IntentSender: int hashCode()>"
"<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()>","<android.media.session.MediaController: android.app.PendingIntent getSessionActivity()>"
"<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>"
"<android.graphics.RuntimeShader: void setInputShader(java.lang.String,android.graphics.Shader)>","<android.graphics.RuntimeShader: void setInputShader(java.lang.String,android.graphics.Shader)>"
"<java.lang.invoke.MethodHandle: java.lang.String toString()>","<java.lang.invoke.MethodHandle: java.lang.String toString()>"
"<java.util.Arrays: void sort(short[])>","<java.util.Arrays: void sort(short[])>"
"<android.app.ActionBar: void removeAllTabs()>","<android.app.ActionBar: void removeAllTabs()>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent build()>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent build()>"
"<android.content.ContextWrapper: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.ContextWrapper: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<java.lang.StringBuilder: int length()>","<java.lang.StringBuilder: int length()>"
"<android.widget.Toolbar: int getContentInsetLeft()>","<android.widget.Toolbar: int getContentInsetLeft()>"
"<java.time.OffsetDateTime: java.util.Comparator timeLineOrder()>","<java.time.OffsetDateTime: java.util.Comparator timeLineOrder()>"
"<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>","<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation[][] getParameterAnnotations()>"
"<java.util.OptionalLong: boolean isPresent()>","<java.util.OptionalLong: boolean isPresent()>"
"<android.util.ArrayMap: int size()>","<android.util.ArrayMap: int size()>"
"<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>","<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>"
"<java.lang.ThreadDeath: void <init>()>","<java.lang.ThreadDeath: void <init>()>"
"<android.view.Window: android.view.View getCurrentFocus()>","<android.view.Window: android.view.View getCurrentFocus()>"
"<android.view.inputmethod.InputConnection: boolean clearMetaKeyStates(int)>","<android.view.inputmethod.InputConnection: boolean clearMetaKeyStates(int)>"
"<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>","<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>"
"<java.lang.Class: boolean isEnum()>","<java.lang.Class: boolean isEnum()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle throwException(java.lang.Class,java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle throwException(java.lang.Class,java.lang.Class)>"
"<java.nio.charset.CoderResult: boolean isUnmappable()>","<java.nio.charset.CoderResult: boolean isUnmappable()>"
"<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>","<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>"
"<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>","<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>"
"<android.app.ActionBar$Tab: android.view.View getCustomView()>","<android.app.ActionBar$Tab: android.view.View getCustomView()>"
"<android.util.Log: void <init>()>","<android.util.Log: void <init>()>"
"<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>","<android.content.Context: int checkCallingOrSelfUriPermission(android.net.Uri,int)>"
"<android.app.Dialog: android.view.View onCreatePanelView(int)>","<android.app.Dialog: android.view.View onCreatePanelView(int)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setRoamingProtocol(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setRoamingProtocol(int)>"
"<android.telecom.PhoneAccountHandle: void writeToParcel(android.os.Parcel,int)>","<android.telecom.PhoneAccountHandle: void writeToParcel(android.os.Parcel,int)>"
"<java.io.PrintWriter: void println(java.lang.String)>","<java.io.PrintWriter: void println(java.lang.String)>"
"<java.util.AbstractCollection: java.lang.String toString()>","<java.util.AbstractCollection: java.lang.String toString()>"
"<android.view.translation.ViewTranslationResponse: boolean equals(java.lang.Object)>","<android.view.translation.ViewTranslationResponse: boolean equals(java.lang.Object)>"
"<java.net.SocketImpl: java.lang.String toString()>","<java.net.SocketImpl: java.lang.String toString()>"
"<java.time.Clock: int hashCode()>","<java.time.Clock: int hashCode()>"
"<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>","<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>"
"<android.hardware.Camera: void unlock()>","<android.hardware.Camera: void unlock()>"
"<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.Class)>","<java.nio.file.FileStore: boolean supportsFileAttributeView(java.lang.Class)>"
"<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>","<android.provider.Settings: boolean canDrawOverlays(android.content.Context)>"
"<android.widget.TextView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>","<android.widget.TextView: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>"
"<android.graphics.drawable.BitmapDrawable: void applyTheme(android.content.res.Resources$Theme)>","<android.graphics.drawable.BitmapDrawable: void applyTheme(android.content.res.Resources$Theme)>"
"<android.hardware.display.VirtualDisplay: void resize(int,int,int)>","<android.hardware.display.VirtualDisplay: void resize(int,int,int)>"
"<android.view.SurfaceControl: void writeToParcel(android.os.Parcel,int)>","<android.view.SurfaceControl: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizes()>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getHighSpeedVideoSizes()>"
"<android.widget.ListView: boolean areFooterDividersEnabled()>","<android.widget.ListView: boolean areFooterDividersEnabled()>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,android.graphics.Bitmap)>"
"<android.os.Process: void setThreadPriority(int)>","<android.os.Process: void setThreadPriority(int)>"
"<android.graphics.Rect: float exactCenterX()>","<android.graphics.Rect: float exactCenterX()>"
"<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassificationSessionId: void writeToParcel(android.os.Parcel,int)>"
"<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>","<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>"
"<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>","<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>"
"<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()>","<android.content.pm.InstallSourceInfo: android.content.pm.SigningInfo getInitiatingPackageSigningInfo()>"
"<android.os.Parcel: void writeNoException()>","<android.os.Parcel: void writeNoException()>"
"<android.view.ViewGroup: int getPersistentDrawingCache()>","<android.view.ViewGroup: int getPersistentDrawingCache()>"
"<android.animation.Animator: void setTarget(java.lang.Object)>","<android.animation.Animator: void setTarget(java.lang.Object)>"
"<android.view.inputmethod.EditorInfo: void makeCompatible(int)>","<android.view.inputmethod.EditorInfo: void makeCompatible(int)>"
"<android.view.Window: android.view.Window getContainer()>","<android.view.Window: android.view.Window getContainer()>"
"<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>","<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>"
"<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>","<android.os.Parcel: java.util.List readParcelableList(java.util.List,java.lang.ClassLoader)>"
"<android.animation.ValueAnimator: void removeAllUpdateListeners()>","<android.animation.ValueAnimator: void removeAllUpdateListeners()>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostStarted(android.app.Activity)>"
"<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)>"
"<android.view.MenuItem: boolean hasSubMenu()>","<android.view.MenuItem: boolean hasSubMenu()>"
"<android.content.ClipboardManager: void <init>()>","<android.content.ClipboardManager: void <init>()>"
"<android.app.ActivityManager: boolean isInLockTaskMode()>","<android.app.ActivityManager: boolean isInLockTaskMode()>"
"<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>","<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>"
"<android.os.Parcel: void readBinderList(java.util.List)>","<android.os.Parcel: void readBinderList(java.util.List)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaId(java.lang.String)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaId(java.lang.String)>"
"<android.media.MediaDrm: java.util.List getSecureStops()>","<android.media.MediaDrm: java.util.List getSecureStops()>"
"<android.graphics.Region: void translate(int,int)>","<android.graphics.Region: void translate(int,int)>"
"<java.time.Instant: java.time.Instant plus(java.time.temporal.TemporalAmount)>","<java.time.Instant: java.time.Instant plus(java.time.temporal.TemporalAmount)>"
"<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>","<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>"
"<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)>"
"<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>","<android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)>"
"<java.util.NavigableSet: java.lang.Object pollLast()>","<java.util.NavigableSet: java.lang.Object pollLast()>"
"<android.view.SurfaceView: void setSecure(boolean)>","<android.view.SurfaceView: void setSecure(boolean)>"
"<android.content.res.TypedArray: float getDimension(int,float)>","<android.content.res.TypedArray: float getDimension(int,float)>"
"<android.os.IBinder: java.lang.String getInterfaceDescriptor()>","<android.os.IBinder: java.lang.String getInterfaceDescriptor()>"
"<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>","<android.app.ActivityManager: void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)>"
"<android.content.pm.PackageInstaller$SessionCallback: void onFinished(int,boolean)>","<android.content.pm.PackageInstaller$SessionCallback: void onFinished(int,boolean)>"
"<java.lang.Double: double max(double,double)>","<java.lang.Double: double max(double,double)>"
"<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>","<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>"
"<android.util.DisplayMetrics: java.lang.String toString()>","<android.util.DisplayMetrics: java.lang.String toString()>"
"<java.util.Locale: java.util.Locale getDefault()>","<java.util.Locale: java.util.Locale getDefault()>"
"<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>","<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>"
"<android.hardware.camera2.params.SessionConfiguration: void setInputConfiguration(android.hardware.camera2.params.InputConfiguration)>","<android.hardware.camera2.params.SessionConfiguration: void setInputConfiguration(android.hardware.camera2.params.InputConfiguration)>"
"<android.view.inputmethod.EditorInfo: void <init>()>","<android.view.inputmethod.EditorInfo: void <init>()>"
"<android.view.View: int getRight()>","<android.view.View: int getRight()>"
"<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>","<android.util.AttributeSet: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>"
"<android.net.Network: java.lang.String toString()>","<android.net.Network: java.lang.String toString()>"
"<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>","<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(java.lang.Class[])>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType appendParameterTypes(java.lang.Class[])>"
"<android.os.ParcelFileDescriptor: boolean canDetectErrors()>","<android.os.ParcelFileDescriptor: boolean canDetectErrors()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.net.NetworkRequest$Builder: void <init>(android.net.NetworkRequest)>","<android.net.NetworkRequest$Builder: void <init>(android.net.NetworkRequest)>"
"<android.content.res.AssetFileDescriptor: long getLength()>","<android.content.res.AssetFileDescriptor: long getLength()>"
"<android.database.Cursor: int getColumnCount()>","<android.database.Cursor: int getColumnCount()>"
"<android.widget.Toolbar: int getContentInsetEndWithActions()>","<android.widget.Toolbar: int getContentInsetEndWithActions()>"
"<java.lang.Long: java.lang.String toUnsignedString(long)>","<java.lang.Long: java.lang.String toUnsignedString(long)>"
"<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>","<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>"
"<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>","<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>"
"<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>","<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>"
"<android.view.View: boolean isLaidOut()>","<android.view.View: boolean isLaidOut()>"
"<java.net.Socket: void <init>(java.lang.String,int)>","<java.net.Socket: void <init>(java.lang.String,int)>"
"<android.net.IpPrefix: int getPrefixLength()>","<android.net.IpPrefix: int getPrefixLength()>"
"<android.content.IntentFilter$AuthorityEntry: int getPort()>","<android.content.IntentFilter$AuthorityEntry: int getPort()>"
"<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>","<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle identity(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle identity(java.lang.Class)>"
"<android.view.animation.Animation: boolean getFillAfter()>","<android.view.animation.Animation: boolean getFillAfter()>"
"<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchThawSelfOnly(android.util.SparseArray)>"
"<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>","<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputSizes(int)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getInputSizes(int)>"
"<android.media.AudioPlaybackCaptureConfiguration: void <init>()>","<android.media.AudioPlaybackCaptureConfiguration: void <init>()>"
"<java.time.Month: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.Month: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.hardware.Camera$Parameters: int getMaxExposureCompensation()>","<android.hardware.Camera$Parameters: int getMaxExposureCompensation()>"
"<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>","<android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)>"
"<java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>","<java.time.chrono.AbstractChronology: int compareTo(java.lang.Object)>"
"<android.media.session.MediaSessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>","<android.media.session.MediaSessionManager: void removeOnMediaKeyEventSessionChangedListener(android.media.session.MediaSessionManager$OnMediaKeyEventSessionChangedListener)>"
"<android.content.Context: java.io.File getDatabasePath(java.lang.String)>","<android.content.Context: java.io.File getDatabasePath(java.lang.String)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAsciiCapable(boolean)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setIsAsciiCapable(boolean)>"
"<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>","<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>"
"<android.content.pm.PackageManager: void setComponentEnabledSettings(java.util.List)>","<android.content.pm.PackageManager: void setComponentEnabledSettings(java.util.List)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileStore getFileStore(java.nio.file.Path)>"
"<android.app.FragmentTransaction: void <init>()>","<android.app.FragmentTransaction: void <init>()>"
"<android.view.inputmethod.ExtractedText: void <init>()>","<android.view.inputmethod.ExtractedText: void <init>()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getDeclaredAnnotations()>"
"<android.widget.TextView: void setRawInputType(int)>","<android.widget.TextView: void setRawInputType(int)>"
"<android.widget.RemoteViews: void setViewVisibility(int,int)>","<android.widget.RemoteViews: void setViewVisibility(int,int)>"
"<android.view.ViewTreeObserver$OnGlobalLayoutListener: void onGlobalLayout()>","<android.view.ViewTreeObserver$OnGlobalLayoutListener: void onGlobalLayout()>"
"<android.graphics.Canvas: boolean clipOutRect(android.graphics.RectF)>","<android.graphics.Canvas: boolean clipOutRect(android.graphics.RectF)>"
"<java.nio.charset.CodingErrorAction: java.lang.String toString()>","<java.nio.charset.CodingErrorAction: java.lang.String toString()>"
"<android.content.Context: java.io.File getDataDir()>","<android.content.Context: java.io.File getDataDir()>"
"<java.util.function.Function: java.lang.Object apply(java.lang.Object)>","<java.util.function.Function: java.lang.Object apply(java.lang.Object)>"
"<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>","<java.util.stream.Stream$Builder: java.util.stream.Stream$Builder add(java.lang.Object)>"
"<java.nio.file.Path: java.net.URI toUri()>","<java.nio.file.Path: java.net.URI toUri()>"
"<android.view.Window: void setTransitionManager(android.transition.TransitionManager)>","<android.view.Window: void setTransitionManager(android.transition.TransitionManager)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo$CollectionInfo)>"
"<android.view.View: int getVisibility()>","<android.view.View: int getVisibility()>"
"<android.os.Parcel: void writeDouble(double)>","<android.os.Parcel: void writeDouble(double)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.graphics.Paint: float getTextSkewX()>","<android.graphics.Paint: float getTextSkewX()>"
"<java.lang.invoke.MethodHandleInfo: java.lang.invoke.MethodType getMethodType()>","<java.lang.invoke.MethodHandleInfo: java.lang.invoke.MethodType getMethodType()>"
"<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>","<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState build()>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState build()>"
"<java.util.function.LongToDoubleFunction: double applyAsDouble(long)>","<java.util.function.LongToDoubleFunction: double applyAsDouble(long)>"
"<java.util.stream.LongStream: java.util.stream.LongStream filter(java.util.function.LongPredicate)>","<java.util.stream.LongStream: java.util.stream.LongStream filter(java.util.function.LongPredicate)>"
"<java.io.InputStream: void close()>","<java.io.InputStream: void close()>"
"<android.animation.ValueAnimator: void setCurrentPlayTime(long)>","<android.animation.ValueAnimator: void setCurrentPlayTime(long)>"
"<android.text.Layout: int getOffsetToLeftOf(int)>","<android.text.Layout: int getOffsetToLeftOf(int)>"
"<java.net.InetAddress: boolean isReachable(int)>","<java.net.InetAddress: boolean isReachable(int)>"
"<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>","<android.text.Editable$Factory: android.text.Editable newEditable(java.lang.CharSequence)>"
"<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>","<android.app.FragmentManager: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>"
"<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>","<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>"
"<android.view.DragEvent: boolean getResult()>","<android.view.DragEvent: boolean getResult()>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onSurfacePrepared(android.hardware.camera2.CameraCaptureSession,android.view.Surface)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onSurfacePrepared(android.hardware.camera2.CameraCaptureSession,android.view.Surface)>"
"<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>","<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()>"
"<java.lang.invoke.VarHandle: java.lang.Object getOpaque(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getOpaque(java.lang.Object[])>"
"<android.graphics.fonts.FontStyle: int hashCode()>","<android.graphics.fonts.FontStyle: int hashCode()>"
"<android.graphics.fonts.FontStyle: void <init>()>","<android.graphics.fonts.FontStyle: void <init>()>"
"<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>","<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putBitmap(java.lang.String,android.graphics.Bitmap)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putBitmap(java.lang.String,android.graphics.Bitmap)>"
"<java.time.chrono.AbstractChronology: int hashCode()>","<java.time.chrono.AbstractChronology: int hashCode()>"
"<android.content.Context: void startActivity(android.content.Intent)>","<android.content.Context: void startActivity(android.content.Intent)>"
"<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>","<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>"
"<android.util.SparseBooleanArray: void <init>()>","<android.util.SparseBooleanArray: void <init>()>"
"<android.media.session.MediaController: java.lang.String getTag()>","<android.media.session.MediaController: java.lang.String getTag()>"
"<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>","<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)>"
"<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>","<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>"
"<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()>","<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CaptureRequest getSessionParameters()>"
"<java.lang.reflect.Constructor: java.lang.String toString()>","<java.lang.reflect.Constructor: java.lang.String toString()>"
"<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>","<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>"
"<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>","<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>"
"<java.lang.String: byte[] getBytes(java.lang.String)>","<java.lang.String: byte[] getBytes(java.lang.String)>"
"<java.nio.ByteOrder: void <clinit>()>","<java.nio.ByteOrder: void <clinit>()>"
"<android.view.Window: void setCallback(android.view.Window$Callback)>","<android.view.Window: void setCallback(android.view.Window$Callback)>"
"<android.net.IpSecManager$UdpEncapsulationSocket: void close()>","<android.net.IpSecManager$UdpEncapsulationSocket: void close()>"
"<java.util.stream.IntStream: java.util.stream.IntStream iterate(int,java.util.function.IntUnaryOperator)>","<java.util.stream.IntStream: java.util.stream.IntStream iterate(int,java.util.function.IntUnaryOperator)>"
"<android.telephony.data.ApnSetting: void writeToParcel(android.os.Parcel,int)>","<android.telephony.data.ApnSetting: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Duration: java.time.Duration ofSeconds(long,long)>","<java.time.Duration: java.time.Duration ofSeconds(long,long)>"
"<java.util.ArrayList: java.lang.Object[] toArray()>","<java.util.ArrayList: java.lang.Object[] toArray()>"
"<android.telephony.SignalStrength: int getGsmSignalStrength()>","<android.telephony.SignalStrength: int getGsmSignalStrength()>"
"<java.util.Spliterator$OfDouble: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfDouble: boolean tryAdvance(java.lang.Object)>"
"<android.view.accessibility.AccessibilityEvent: int getEventType()>","<android.view.accessibility.AccessibilityEvent: int getEventType()>"
"<android.content.Context: java.lang.String getAttributionTag()>","<android.content.Context: java.lang.String getAttributionTag()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,short)>"
"<java.net.SocketImpl: void shutdownInput()>","<java.net.SocketImpl: void shutdownInput()>"
"<android.view.View: void dispatchSystemUiVisibilityChanged(int)>","<android.view.View: void dispatchSystemUiVisibilityChanged(int)>"
"<android.hardware.display.DeviceProductInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>","<android.hardware.display.DeviceProductInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>"
"<android.widget.TextView: float getTextSize()>","<android.widget.TextView: float getTextSize()>"
"<java.lang.invoke.VarHandle: java.lang.invoke.MethodType accessModeType(java.lang.invoke.VarHandle$AccessMode)>","<java.lang.invoke.VarHandle: java.lang.invoke.MethodType accessModeType(java.lang.invoke.VarHandle$AccessMode)>"
"<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.content.pm.ActivityInfo: void <init>()>","<android.content.pm.ActivityInfo: void <init>()>"
"<android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>","<android.os.Debug: void attachJvmtiAgent(java.lang.String,java.lang.String,java.lang.ClassLoader)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>"
"<android.media.MediaDrm$KeyRequest: byte[] getData()>","<android.media.MediaDrm$KeyRequest: byte[] getData()>"
"<android.media.RemoteController$MetadataEditor: void apply()>","<android.media.RemoteController$MetadataEditor: void apply()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.telephony.TelephonyManager: java.lang.CharSequence getSimCarrierIdName()>","<android.telephony.TelephonyManager: java.lang.CharSequence getSimCarrierIdName()>"
"<java.util.List: java.lang.Object[] toArray()>","<java.util.List: java.lang.Object[] toArray()>"
"<android.os.Bundle: int describeContents()>","<android.os.Bundle: int describeContents()>"
"<java.util.Arrays: void sort(double[])>","<java.util.Arrays: void sort(double[])>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.app.Application: void onTrimMemory(int)>","<android.app.Application: void onTrimMemory(int)>"
"<android.app.Fragment: void startPostponedEnterTransition()>","<android.app.Fragment: void startPostponedEnterTransition()>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery[])>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery[])>"
"<android.graphics.text.LineBreakConfig: boolean equals(java.lang.Object)>","<android.graphics.text.LineBreakConfig: boolean equals(java.lang.Object)>"
"<java.lang.System: void loadLibrary(java.lang.String)>","<java.lang.System: void loadLibrary(java.lang.String)>"
"<android.graphics.NinePatch: android.graphics.Paint getPaint()>","<android.graphics.NinePatch: android.graphics.Paint getPaint()>"
"<java.lang.'annotation'.Annotation: java.lang.String toString()>","<java.lang.'annotation'.Annotation: java.lang.String toString()>"
"<android.view.Window: void closePanel(int)>","<android.view.Window: void closePanel(int)>"
"<android.view.WindowManager$InvalidDisplayException: void <init>()>","<android.view.WindowManager$InvalidDisplayException: void <init>()>"
"<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>","<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>"
"<android.media.MediaMetadata: int size()>","<android.media.MediaMetadata: int size()>"
"<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>","<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>"
"<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>","<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>"
"<java.util.stream.IntStream$Builder: java.util.stream.IntStream build()>","<java.util.stream.IntStream$Builder: java.util.stream.IntStream build()>"
"<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>","<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>"
"<android.view.inputmethod.CompletionInfo: long getId()>","<android.view.inputmethod.CompletionInfo: long getId()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: void <init>()>","<android.view.textclassifier.TextClassifier$EntityConfig: void <init>()>"
"<java.net.SocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>","<java.net.SocketImpl: void setOption(java.net.SocketOption,java.lang.Object)>"
"<android.widget.Toolbar: void setSubtitle(int)>","<android.widget.Toolbar: void setSubtitle(int)>"
"<android.view.textclassifier.TextClassification$Request: int getEndIndex()>","<android.view.textclassifier.TextClassification$Request: int getEndIndex()>"
"<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>","<android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)>"
"<android.content.IntentSender: int getCreatorUid()>","<android.content.IntentSender: int getCreatorUid()>"
"<android.os.HandlerThread: void onLooperPrepared()>","<android.os.HandlerThread: void onLooperPrepared()>"
"<android.view.Display$HdrCapabilities: void writeToParcel(android.os.Parcel,int)>","<android.view.Display$HdrCapabilities: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.RenderNode: boolean setTranslationY(float)>","<android.graphics.RenderNode: boolean setTranslationY(float)>"
"<android.media.AudioTrack: int getPerformanceMode()>","<android.media.AudioTrack: int getPerformanceMode()>"
"<java.util.Set: boolean remove(java.lang.Object)>","<java.util.Set: boolean remove(java.lang.Object)>"
"<java.lang.Thread: int countStackFrames()>","<java.lang.Thread: int countStackFrames()>"
"<android.media.MediaPlayer: java.lang.String getDrmPropertyString(java.lang.String)>","<android.media.MediaPlayer: java.lang.String getDrmPropertyString(java.lang.String)>"
"<android.graphics.Picture: int getWidth()>","<android.graphics.Picture: int getWidth()>"
"<java.lang.Thread: void join(long)>","<java.lang.Thread: void join(long)>"
"<android.widget.TextView: void setTextMetricsParams(android.text.PrecomputedText$Params)>","<android.widget.TextView: void setTextMetricsParams(android.text.PrecomputedText$Params)>"
"<android.view.View: void setHasTransientState(boolean)>","<android.view.View: void setHasTransientState(boolean)>"
"<android.content.pm.PackageManager: java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: java.util.List getSharedLibraries(android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setSelected(boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setSelected(boolean)>"
"<java.util.Arrays: void sort(char[])>","<java.util.Arrays: void sort(char[])>"
"<android.app.Fragment: void <init>()>","<android.app.Fragment: void <init>()>"
"<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>","<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>"
"<android.graphics.Color: int HSVToColor(float[])>","<android.graphics.Color: int HSVToColor(float[])>"
"<android.graphics.Canvas: void scale(float,float,float,float)>","<android.graphics.Canvas: void scale(float,float,float,float)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getPackageSource()>","<android.content.pm.PackageInstaller$SessionInfo: int getPackageSource()>"
"<java.util.Hashtable: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>","<java.util.Hashtable: java.lang.Object compute(java.lang.Object,java.util.function.BiFunction)>"
"<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture)>","<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture)>"
"<java.util.OptionalDouble: int hashCode()>","<java.util.OptionalDouble: int hashCode()>"
"<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>","<android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()>"
"<android.view.Window: android.content.Context getContext()>","<android.view.Window: android.content.Context getContext()>"
"<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>","<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>"
"<android.view.DisplayCutout: int hashCode()>","<android.view.DisplayCutout: int hashCode()>"
"<android.hardware.camera2.CameraCharacteristics: java.util.List getKeysNeedingPermission()>","<android.hardware.camera2.CameraCharacteristics: java.util.List getKeysNeedingPermission()>"
"<android.view.Display$Mode: java.lang.String toString()>","<android.view.Display$Mode: java.lang.String toString()>"
"<android.view.SurfaceHolder: boolean isCreating()>","<android.view.SurfaceHolder: boolean isCreating()>"
"<android.media.AudioTrack$OnPlaybackPositionUpdateListener: void onMarkerReached(android.media.AudioTrack)>","<android.media.AudioTrack$OnPlaybackPositionUpdateListener: void onMarkerReached(android.media.AudioTrack)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.temporal.Temporal: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.view.ViewGroup: boolean addStatesFromChildren()>","<android.view.ViewGroup: boolean addStatesFromChildren()>"
"<android.widget.TextView: void drawableHotspotChanged(float,float)>","<android.widget.TextView: void drawableHotspotChanged(float,float)>"
"<java.lang.ThreadGroup: java.lang.String getName()>","<java.lang.ThreadGroup: java.lang.String getName()>"
"<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<android.view.SurfaceControlViewHost: void <init>(android.content.Context,android.view.Display,android.os.IBinder)>","<android.view.SurfaceControlViewHost: void <init>(android.content.Context,android.view.Display,android.os.IBinder)>"
"<android.hardware.HardwareBuffer: int getWidth()>","<android.hardware.HardwareBuffer: int getWidth()>"
"<android.view.inputmethod.InputMethodInfo: boolean shouldShowInInputMethodPicker()>","<android.view.inputmethod.InputMethodInfo: boolean shouldShowInInputMethodPicker()>"
"<android.media.SyncParams: android.media.SyncParams setAudioAdjustMode(int)>","<android.media.SyncParams: android.media.SyncParams setAudioAdjustMode(int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: int getType()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setPersistent(boolean)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setPersistent(boolean)>"
"<java.net.URI: java.net.URI normalize()>","<java.net.URI: java.net.URI normalize()>"
"<android.view.MotionEvent: int getToolType(int)>","<android.view.MotionEvent: int getToolType(int)>"
"<android.media.AudioTrack: boolean isOffloadedPlayback()>","<android.media.AudioTrack: boolean isOffloadedPlayback()>"
"<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.widget.ListView: boolean isOpaque()>","<android.widget.ListView: boolean isOpaque()>"
"<android.graphics.RenderNode: boolean setRotationX(float)>","<android.graphics.RenderNode: boolean setRotationX(float)>"
"<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>","<java.lang.ClassLoader: java.lang.Class defineClass(byte[],int,int)>"
"<java.time.LocalDate: java.lang.String toString()>","<java.time.LocalDate: java.lang.String toString()>"
"<android.content.res.TypedArray: void recycle()>","<android.content.res.TypedArray: void recycle()>"
"<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>"
"<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>","<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: void <init>()>","<android.view.inputmethod.EditorBoundsInfo$Builder: void <init>()>"
"<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>","<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])>"
"<android.text.Layout$Directions: void <init>()>","<android.text.Layout$Directions: void <init>()>"
"<java.io.PrintWriter: boolean checkError()>","<java.io.PrintWriter: boolean checkError()>"
"<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>","<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>"
"<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>","<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>"
"<android.graphics.Region$Op: void <init>(java.lang.String,int)>","<android.graphics.Region$Op: void <init>(java.lang.String,int)>"
"<android.view.View: android.content.res.ColorStateList getForegroundTintList()>","<android.view.View: android.content.res.ColorStateList getForegroundTintList()>"
"<android.view.Window: void setFeatureDrawableAlpha(int,int)>","<android.view.Window: void setFeatureDrawableAlpha(int,int)>"
"<android.graphics.ColorSpace$Adaptation: void <clinit>()>","<android.graphics.ColorSpace$Adaptation: void <clinit>()>"
"<android.widget.RemoteViews: void setRemoteAdapter(int,android.widget.RemoteViews$RemoteCollectionItems)>","<android.widget.RemoteViews: void setRemoteAdapter(int,android.widget.RemoteViews$RemoteCollectionItems)>"
"<android.graphics.Point: void <clinit>()>","<android.graphics.Point: void <clinit>()>"
"<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>","<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>"
"<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>","<android.hardware.Camera$Parameters: void set(java.lang.String,java.lang.String)>"
"<android.view.contentcapture.ContentCaptureSessionId: void <clinit>()>","<android.view.contentcapture.ContentCaptureSessionId: void <clinit>()>"
"<android.view.inputmethod.CursorAnchorInfo: int getSelectionStart()>","<android.view.inputmethod.CursorAnchorInfo: int getSelectionStart()>"
"<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>","<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>"
"<android.os.Debug: int getGlobalFreedCount()>","<android.os.Debug: int getGlobalFreedCount()>"
"<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>","<android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>"
"<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>","<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>"
"<android.content.Context: java.io.File[] getExternalCacheDirs()>","<android.content.Context: java.io.File[] getExternalCacheDirs()>"
"<android.os.PersistableBundle: void <init>(android.os.PersistableBundle)>","<android.os.PersistableBundle: void <init>(android.os.PersistableBundle)>"
"<java.net.URI: java.net.URI parseServerAuthority()>","<java.net.URI: java.net.URI parseServerAuthority()>"
"<android.view.View: void dispatchPointerCaptureChanged(boolean)>","<android.view.View: void dispatchPointerCaptureChanged(boolean)>"
"<java.security.Provider: void replaceAll(java.util.function.BiFunction)>","<java.security.Provider: void replaceAll(java.util.function.BiFunction)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)>"
"<java.util.Arrays: boolean equals(float[],float[])>","<java.util.Arrays: boolean equals(float[],float[])>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class)>"
"<android.graphics.Paint: boolean setFontVariationSettings(java.lang.String)>","<android.graphics.Paint: boolean setFontVariationSettings(java.lang.String)>"
"<java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>","<java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>"
"<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()>","<android.telephony.data.ApnSetting: java.net.InetAddress getMmsProxyAddress()>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>","<java.nio.LongBuffer: java.nio.LongBuffer put(int,long)>"
"<android.os.VibrationEffect: android.os.VibrationEffect$Composition startComposition()>","<android.os.VibrationEffect: android.os.VibrationEffect$Composition startComposition()>"
"<android.view.WindowInsets: int getStableInsetTop()>","<android.view.WindowInsets: int getStableInsetTop()>"
"<android.graphics.drawable.LayerDrawable: void setDither(boolean)>","<android.graphics.drawable.LayerDrawable: void setDither(boolean)>"
"<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>","<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>"
"<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()>","<android.content.ContextWrapper: java.io.File getNoBackupFilesDir()>"
"<android.graphics.drawable.LayerDrawable: int getOpacity()>","<android.graphics.drawable.LayerDrawable: int getOpacity()>"
"<java.nio.FloatBuffer: int compareTo(java.lang.Object)>","<java.nio.FloatBuffer: int compareTo(java.lang.Object)>"
"<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,char)>"
"<android.view.Window$Callback: void onActionModeFinished(android.view.ActionMode)>","<android.view.Window$Callback: void onActionModeFinished(android.view.ActionMode)>"
"<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>","<java.security.Timestamp: void <init>(java.util.Date,java.security.cert.CertPath)>"
"<android.net.NetworkRequest: int hashCode()>","<android.net.NetworkRequest: int hashCode()>"
"<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)>","<android.content.ContextWrapper: android.content.ComponentName startForegroundService(android.content.Intent)>"
"<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>","<java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>"
"<android.view.View: void setScaleX(float)>","<android.view.View: void setScaleX(float)>"
"<android.view.View: void setOnScrollChangeListener(android.view.View$OnScrollChangeListener)>","<android.view.View: void setOnScrollChangeListener(android.view.View$OnScrollChangeListener)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(long)>","<java.nio.LongBuffer: java.nio.LongBuffer put(long)>"
"<android.widget.TextView: void <init>(android.content.Context)>","<android.widget.TextView: void <init>(android.content.Context)>"
"<android.app.Activity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onCreate(android.os.Bundle,android.os.PersistableBundle)>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>"
"<android.util.SparseArray: boolean contains(int)>","<android.util.SparseArray: boolean contains(int)>"
"<android.media.session.MediaSession: android.media.session.MediaController getController()>","<android.media.session.MediaSession: android.media.session.MediaController getController()>"
"<android.content.ContentValues: void <init>(android.content.ContentValues)>","<android.content.ContentValues: void <init>(android.content.ContentValues)>"
"<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>","<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()>"
"<android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)>","<android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>"
"<android.graphics.Color: float getComponent(int)>","<android.graphics.Color: float getComponent(int)>"
"<android.graphics.drawable.ColorDrawable: void setColor(int)>","<android.graphics.drawable.ColorDrawable: void setColor(int)>"
"<android.os.Bundle: void putCharArray(java.lang.String,char[])>","<android.os.Bundle: void putCharArray(java.lang.String,char[])>"
"<android.hardware.camera2.params.OutputConfiguration: int hashCode()>","<android.hardware.camera2.params.OutputConfiguration: int hashCode()>"
"<android.app.LoaderManager: void <init>()>","<android.app.LoaderManager: void <init>()>"
"<android.content.Intent: void setClipData(android.content.ClipData)>","<android.content.Intent: void setClipData(android.content.ClipData)>"
"<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>","<android.graphics.drawable.BitmapDrawable: void setAntiAlias(boolean)>"
"<java.lang.Character: char highSurrogate(int)>","<java.lang.Character: char highSurrogate(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>"
"<android.content.Intent: android.content.ComponentName getComponent()>","<android.content.Intent: android.content.ComponentName getComponent()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>"
"<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>","<java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>"
"<android.os.VibratorManager: void <init>()>","<android.os.VibratorManager: void <init>()>"
"<android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>"
"<java.lang.reflect.Executable: int getModifiers()>","<java.lang.reflect.Executable: int getModifiers()>"
"<android.os.Bundle: void clear()>","<android.os.Bundle: void clear()>"
"<java.time.OffsetTime: java.time.OffsetTime withMinute(int)>","<java.time.OffsetTime: java.time.OffsetTime withMinute(int)>"
"<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>","<android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>"
"<java.util.stream.LongStream: java.util.stream.LongStream$Builder builder()>","<java.util.stream.LongStream: java.util.stream.LongStream$Builder builder()>"
"<android.provider.Settings$System: void <clinit>()>","<android.provider.Settings$System: void <clinit>()>"
"<android.hardware.Camera$Parameters: java.lang.String flatten()>","<android.hardware.Camera$Parameters: java.lang.String flatten()>"
"<java.util.stream.Stream: java.util.Optional max(java.util.Comparator)>","<java.util.stream.Stream: java.util.Optional max(java.util.Comparator)>"
"<android.content.Loader: void <init>(android.content.Context)>","<android.content.Loader: void <init>(android.content.Context)>"
"<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)>"
"<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>","<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>"
"<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor)>","<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor)>"
"<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>","<java.nio.ShortBuffer: int compareTo(java.nio.ShortBuffer)>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createReliablePipe()>"
"<java.lang.Object: java.lang.String toString()>","<java.lang.Object: java.lang.String toString()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
"<java.net.URI: int compareTo(java.lang.Object)>","<java.net.URI: int compareTo(java.lang.Object)>"
"<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float[])>","<android.graphics.RuntimeShader: void setFloatUniform(java.lang.String,float[])>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguageWithDialect(java.lang.String,java.lang.String)>"
"<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>","<android.text.method.MovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>"
"<java.util.Locale: java.util.Locale lookup(java.util.List,java.util.Collection)>","<java.util.Locale: java.util.Locale lookup(java.util.List,java.util.Collection)>"
"<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>","<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>"
"<android.media.session.PlaybackState: java.lang.String toString()>","<android.media.session.PlaybackState: java.lang.String toString()>"
"<java.time.LocalTime: int getHour()>","<java.time.LocalTime: int getHour()>"
"<java.nio.channels.spi.AbstractSelectionKey: void <init>()>","<java.nio.channels.spi.AbstractSelectionKey: void <init>()>"
"<java.net.DatagramSocket: void setSoTimeout(int)>","<java.net.DatagramSocket: void setSoTimeout(int)>"
"<android.database.DataSetObserver: void <init>()>","<android.database.DataSetObserver: void <init>()>"
"<java.lang.ThreadGroup: int activeCount()>","<java.lang.ThreadGroup: int activeCount()>"
"<android.content.ContentProvider: android.content.Context requireContext()>","<android.content.ContentProvider: android.content.Context requireContext()>"
"<java.lang.Character: boolean isSpaceChar(char)>","<java.lang.Character: boolean isSpaceChar(char)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.Path readSymbolicLink(java.nio.file.Path)>"
"<java.lang.Character: boolean isLowerCase(char)>","<java.lang.Character: boolean isLowerCase(char)>"
"<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>","<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>"
"<android.widget.ListView: boolean getItemsCanFocus()>","<android.widget.ListView: boolean getItemsCanFocus()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.Path getPath(java.net.URI)>"
"<android.graphics.RectF: void set(android.graphics.RectF)>","<android.graphics.RectF: void set(android.graphics.RectF)>"
"<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>"
"<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>","<android.view.MenuItem: android.view.MenuItem setChecked(boolean)>"
"<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>","<android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>"
"<java.nio.CharBuffer: int hashCode()>","<java.nio.CharBuffer: int hashCode()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.telephony.SignalStrengthUpdateRequest: boolean isReportingRequestedWhileIdle()>","<android.telephony.SignalStrengthUpdateRequest: boolean isReportingRequestedWhileIdle()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>"
"<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>","<android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>"
"<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.LoaderManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.media.MediaPlayer: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>","<android.media.MediaPlayer: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>"
"<android.graphics.RuntimeShader: void setInputBuffer(java.lang.String,android.graphics.BitmapShader)>","<android.graphics.RuntimeShader: void setInputBuffer(java.lang.String,android.graphics.BitmapShader)>"
"<java.util.Collections: java.lang.Object min(java.util.Collection)>","<java.util.Collections: java.lang.Object min(java.util.Collection)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectSpecial(java.lang.reflect.Method,java.lang.Class)>"
"<java.lang.Math: float scalb(float,int)>","<java.lang.Math: float scalb(float,int)>"
"<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<java.util.Arrays: int compareUnsigned(long[],long[])>","<java.util.Arrays: int compareUnsigned(long[],long[])>"
"<android.content.res.Resources$Theme: int getChangingConfigurations()>","<android.content.res.Resources$Theme: int getChangingConfigurations()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.net.IpSecAlgorithm: int getTruncationLengthBits()>","<android.net.IpSecAlgorithm: int getTruncationLengthBits()>"
"<java.net.InetSocketAddress: java.lang.String getHostName()>","<java.net.InetSocketAddress: java.lang.String getHostName()>"
"<android.view.View: boolean isAccessibilityHeading()>","<android.view.View: boolean isAccessibilityHeading()>"
"<java.util.concurrent.Semaphore: int getQueueLength()>","<java.util.concurrent.Semaphore: int getQueueLength()>"
"<java.lang.String: int compareToIgnoreCase(java.lang.String)>","<java.lang.String: int compareToIgnoreCase(java.lang.String)>"
"<android.view.View: void setMinimumHeight(int)>","<android.view.View: void setMinimumHeight(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>"
"<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>","<android.view.ViewTreeObserver: void addOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>"
"<android.widget.ListView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.ListView: java.lang.CharSequence getAccessibilityClassName()>"
"<android.os.ResultReceiver: void send(int,android.os.Bundle)>","<android.os.ResultReceiver: void send(int,android.os.Bundle)>"
"<android.net.IpSecTransform: boolean equals(java.lang.Object)>","<android.net.IpSecTransform: boolean equals(java.lang.Object)>"
"<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>","<android.animation.Animator: android.animation.TimeInterpolator getInterpolator()>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>"
"<java.lang.SecurityManager: void checkRead(java.lang.String)>","<java.lang.SecurityManager: void checkRead(java.lang.String)>"
"<java.nio.IntBuffer: int compareTo(java.lang.Object)>","<java.nio.IntBuffer: int compareTo(java.lang.Object)>"
"<java.time.LocalTime: java.time.LocalTime minus(java.time.temporal.TemporalAmount)>","<java.time.LocalTime: java.time.LocalTime minus(java.time.temporal.TemporalAmount)>"
"<android.graphics.Outline: void setConvexPath(android.graphics.Path)>","<android.graphics.Outline: void setConvexPath(android.graphics.Path)>"
"<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>","<java.text.FieldPosition: void <init>(java.text.Format$Field,int)>"
"<java.net.Socket: void setTcpNoDelay(boolean)>","<java.net.Socket: void setTcpNoDelay(boolean)>"
"<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>","<java.net.ServerSocket: void setPerformancePreferences(int,int,int)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithAdaptiveBitmap(android.graphics.Bitmap)>"
"<android.net.Uri: void <clinit>()>","<android.net.Uri: void <clinit>()>"
"<java.lang.reflect.Parameter: java.lang.String toString()>","<java.lang.reflect.Parameter: java.lang.String toString()>"
"<android.net.NetworkCapabilities: int getSignalStrength()>","<android.net.NetworkCapabilities: int getSignalStrength()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>"
"<android.view.ViewTreeObserver$OnDrawListener: void onDraw()>","<android.view.ViewTreeObserver$OnDrawListener: void onDraw()>"
"<android.hardware.Sensor: int getHighestDirectReportRateLevel()>","<android.hardware.Sensor: int getHighestDirectReportRateLevel()>"
"<android.animation.Animator: android.animation.Animator setDuration(long)>","<android.animation.Animator: android.animation.Animator setDuration(long)>"
"<java.util.Deque: java.util.Iterator iterator()>","<java.util.Deque: java.util.Iterator iterator()>"
"<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>","<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericParameterTypes()>"
"<android.content.pm.ApplicationInfo: void <init>()>","<android.content.pm.ApplicationInfo: void <init>()>"
"<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>","<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>"
"<android.net.NetworkInfo: java.lang.String toString()>","<android.net.NetworkInfo: java.lang.String toString()>"
"<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>","<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>"
"<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>","<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>"
"<java.lang.reflect.Field: short getShort(java.lang.Object)>","<java.lang.reflect.Field: short getShort(java.lang.Object)>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<java.text.AttributedCharacterIterator: int getRunStart()>","<java.text.AttributedCharacterIterator: int getRunStart()>"
"<android.graphics.ColorSpace: boolean equals(java.lang.Object)>","<android.graphics.ColorSpace: boolean equals(java.lang.Object)>"
"<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.ListView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.time.OffsetDateTime: int getDayOfMonth()>","<java.time.OffsetDateTime: int getDayOfMonth()>"
"<android.widget.AbsListView: void setEdgeEffectColor(int)>","<android.widget.AbsListView: void setEdgeEffectColor(int)>"
"<android.view.View: int getOutlineAmbientShadowColor()>","<android.view.View: int getOutlineAmbientShadowColor()>"
"<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.content.res.loader.AssetsProvider: android.content.res.AssetFileDescriptor loadAssetFd(java.lang.String,int)>","<android.content.res.loader.AssetsProvider: android.content.res.AssetFileDescriptor loadAssetFd(java.lang.String,int)>"
"<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>","<android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)>"
"<java.util.Arrays: boolean equals(char[],char[])>","<java.util.Arrays: boolean equals(char[],char[])>"
"<android.telephony.RadioAccessSpecifier: int hashCode()>","<android.telephony.RadioAccessSpecifier: int hashCode()>"
"<android.content.res.XmlResourceParser: java.lang.String getAttributeNamespace(int)>","<android.content.res.XmlResourceParser: java.lang.String getAttributeNamespace(int)>"
"<android.os.Parcel: boolean readBoolean()>","<android.os.Parcel: boolean readBoolean()>"
"<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>","<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>"
"<android.os.Debug: void resetGlobalAllocSize()>","<android.os.Debug: void resetGlobalAllocSize()>"
"<android.media.MicrophoneDirection: boolean setPreferredMicrophoneFieldDimension(float)>","<android.media.MicrophoneDirection: boolean setPreferredMicrophoneFieldDimension(float)>"
"<android.view.inputmethod.InputConnection: boolean performSpellCheck()>","<android.view.inputmethod.InputConnection: boolean performSpellCheck()>"
"<java.net.InetAddress: boolean equals(java.lang.Object)>","<java.net.InetAddress: boolean equals(java.lang.Object)>"
"<java.lang.invoke.VarHandle: boolean weakCompareAndSetPlain(java.lang.Object[])>","<java.lang.invoke.VarHandle: boolean weakCompareAndSetPlain(java.lang.Object[])>"
"<android.app.ActionBar: int getDisplayOptions()>","<android.app.ActionBar: int getDisplayOptions()>"
"<android.widget.Toolbar: int getCurrentContentInsetEnd()>","<android.widget.Toolbar: int getCurrentContentInsetEnd()>"
"<java.time.Duration: int getNano()>","<java.time.Duration: int getNano()>"
"<android.view.View: boolean showContextMenu()>","<android.view.View: boolean showContextMenu()>"
"<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>","<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>"
"<java.util.AbstractList: java.lang.Object get(int)>","<java.util.AbstractList: java.lang.Object get(int)>"
"<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>","<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>"
"<android.graphics.drawable.LayerDrawable: boolean canApplyTheme()>","<android.graphics.drawable.LayerDrawable: boolean canApplyTheme()>"
"<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>","<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>"
"<java.lang.Double: boolean isInfinite(double)>","<java.lang.Double: boolean isInfinite(double)>"
"<java.util.AbstractMap: java.util.Set entrySet()>","<java.util.AbstractMap: java.util.Set entrySet()>"
"<java.nio.channels.FileLock: void close()>","<java.nio.channels.FileLock: void close()>"
"<android.content.pm.ConfigurationInfo: java.lang.String toString()>","<android.content.pm.ConfigurationInfo: java.lang.String toString()>"
"<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>","<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>"
"<android.view.ViewGroup$MarginLayoutParams: void setMarginEnd(int)>","<android.view.ViewGroup$MarginLayoutParams: void setMarginEnd(int)>"
"<android.os.Parcel: void writeBooleanArray(boolean[])>","<android.os.Parcel: void writeBooleanArray(boolean[])>"
"<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.content.pm.VersionedPackage: java.lang.String toString()>","<android.content.pm.VersionedPackage: java.lang.String toString()>"
"<android.content.pm.InstallSourceInfo: void <init>()>","<android.content.pm.InstallSourceInfo: void <init>()>"
"<android.hardware.Camera$Parameters: void setPictureFormat(int)>","<android.hardware.Camera$Parameters: void setPictureFormat(int)>"
"<java.lang.NoSuchFieldException: void <init>()>","<java.lang.NoSuchFieldException: void <init>()>"
"<android.hardware.camera2.CameraCaptureSession: void finalizeOutputConfigurations(java.util.List)>","<android.hardware.camera2.CameraCaptureSession: void finalizeOutputConfigurations(java.util.List)>"
"<java.net.URL: java.lang.String getAuthority()>","<java.net.URL: java.lang.String getAuthority()>"
"<java.lang.Math: double copySign(double,double)>","<java.lang.Math: double copySign(double,double)>"
"<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.hardware.lights.LightsRequest: java.util.List getLightStates()>","<android.hardware.lights.LightsRequest: java.util.List getLightStates()>"
"<java.io.Console: void <init>()>","<java.io.Console: void <init>()>"
"<android.content.IntentSender$SendIntentException: void <init>()>","<android.content.IntentSender$SendIntentException: void <init>()>"
"<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.nio.file.AccessMode: void <clinit>()>","<java.nio.file.AccessMode: void <clinit>()>"
"<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>","<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>"
"<java.lang.String: void <init>(byte[])>","<java.lang.String: void <init>(byte[])>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setExtras(android.os.Bundle)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String toString()>","<android.view.textclassifier.TextClassificationContext: java.lang.String toString()>"
"<java.nio.charset.CoderResult: boolean isUnderflow()>","<java.nio.charset.CoderResult: boolean isUnderflow()>"
"<java.io.FileOutputStream: void <init>(java.io.File,boolean)>","<java.io.FileOutputStream: void <init>(java.io.File,boolean)>"
"<android.util.SparseBooleanArray: int hashCode()>","<android.util.SparseBooleanArray: int hashCode()>"
"<android.app.RemoteAction: void setEnabled(boolean)>","<android.app.RemoteAction: void setEnabled(boolean)>"
"<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()>","<android.media.Image: android.hardware.HardwareBuffer getHardwareBuffer()>"
"<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>","<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.SocketAddress)>"
"<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>","<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: boolean equals(java.lang.Object)>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: boolean equals(java.lang.Object)>"
"<android.media.session.MediaController$PlaybackInfo: void writeToParcel(android.os.Parcel,int)>","<android.media.session.MediaController$PlaybackInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>","<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>"
"<android.content.pm.PackageManager$Property: void <clinit>()>","<android.content.pm.PackageManager$Property: void <clinit>()>"
"<java.lang.Thread: void yield()>","<java.lang.Thread: void yield()>"
"<android.view.WindowManager$LayoutParams: boolean isFitInsetsIgnoringVisibility()>","<android.view.WindowManager$LayoutParams: boolean isFitInsetsIgnoringVisibility()>"
"<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)>","<android.graphics.text.MeasuredText: void getBounds(int,int,android.graphics.Rect)>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>"
"<java.lang.Math: long subtractExact(long,long)>","<java.lang.Math: long subtractExact(long,long)>"
"<java.lang.invoke.VarHandle: void setRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: void setRelease(java.lang.Object[])>"
"<android.graphics.RenderNode: boolean setAlpha(float)>","<android.graphics.RenderNode: boolean setAlpha(float)>"
"<java.lang.Long: long rotateRight(long,int)>","<java.lang.Long: long rotateRight(long,int)>"
"<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>","<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>"
"<android.view.InflateException: void <init>()>","<android.view.InflateException: void <init>()>"
"<java.lang.Math: int decrementExact(int)>","<java.lang.Math: int decrementExact(int)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>"
"<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>","<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>"
"<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>","<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>"
"<java.lang.StringBuilder: void trimToSize()>","<java.lang.StringBuilder: void trimToSize()>"
"<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>","<java.nio.file.attribute.UserPrincipalLookupService: java.nio.file.attribute.UserPrincipal lookupPrincipalByName(java.lang.String)>"
"<android.content.ContentResolver: int delete(android.net.Uri,android.os.Bundle)>","<android.content.ContentResolver: int delete(android.net.Uri,android.os.Bundle)>"
"<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>","<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>"
"<android.media.AudioDeviceInfo: boolean isSink()>","<android.media.AudioDeviceInfo: boolean isSink()>"
"<java.time.LocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
"<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()>","<android.media.RemoteControlClient: android.media.session.MediaSession getMediaSession()>"
"<android.view.SurfaceControl$Transaction: void close()>","<android.view.SurfaceControl$Transaction: void close()>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.SocketChannel openSocketChannel()>"
"<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>","<java.lang.SecurityManager: void checkWrite(java.io.FileDescriptor)>"
"<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>","<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericExceptionTypes()>"
"<android.view.animation.Animation: void setFillEnabled(boolean)>","<android.view.animation.Animation: void setFillEnabled(boolean)>"
"<android.view.Window: android.transition.Transition getSharedElementEnterTransition()>","<android.view.Window: android.transition.Transition getSharedElementEnterTransition()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent build()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: android.view.textclassifier.TextClassifierEvent$TextSelectionEvent build()>"
"<java.lang.Long: long reverseBytes(long)>","<java.lang.Long: long reverseBytes(long)>"
"<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>","<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>"
"<android.util.Size: android.util.Size parseSize(java.lang.String)>","<android.util.Size: android.util.Size parseSize(java.lang.String)>"
"<android.view.textclassifier.TextClassifier$EntityConfig: boolean shouldIncludeTypesFromTextClassifier()>","<android.view.textclassifier.TextClassifier$EntityConfig: boolean shouldIncludeTypesFromTextClassifier()>"
"<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()>","<android.graphics.ColorSpace$Rgb: android.graphics.ColorSpace$Rgb$TransferParameters getTransferParameters()>"
"<java.net.Socket: boolean getOOBInline()>","<java.net.Socket: boolean getOOBInline()>"
"<android.telephony.TelephonyManager$CallComposerException: int getErrorCode()>","<android.telephony.TelephonyManager$CallComposerException: int getErrorCode()>"
"<android.content.pm.VersionedPackage: void <clinit>()>","<android.content.pm.VersionedPackage: void <clinit>()>"
"<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>","<android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)>"
"<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>","<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>"
"<android.view.WindowInsets$Side: int all()>","<android.view.WindowInsets$Side: int all()>"
"<android.app.Dialog: void dismiss()>","<android.app.Dialog: void dismiss()>"
"<java.lang.reflect.Modifier: boolean isFinal(int)>","<java.lang.reflect.Modifier: boolean isFinal(int)>"
"<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>","<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>"
"<android.content.Context: void revokeSelfPermissionsOnKill(java.util.Collection)>","<android.content.Context: void revokeSelfPermissionsOnKill(java.util.Collection)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>","<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>"
"<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>","<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>"
"<java.lang.String: int compareTo(java.lang.Object)>","<java.lang.String: int compareTo(java.lang.Object)>"
"<java.nio.file.attribute.FileTime: int compareTo(java.lang.Object)>","<java.nio.file.attribute.FileTime: int compareTo(java.lang.Object)>"
"<java.util.stream.DoubleStream: boolean noneMatch(java.util.function.DoublePredicate)>","<java.util.stream.DoubleStream: boolean noneMatch(java.util.function.DoublePredicate)>"
"<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>","<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>"
"<java.time.temporal.ChronoField: boolean isTimeBased()>","<java.time.temporal.ChronoField: boolean isTimeBased()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreSaveInstanceState(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreSaveInstanceState(android.app.Activity,android.os.Bundle)>"
"<java.util.DoubleSummaryStatistics: double getMin()>","<java.util.DoubleSummaryStatistics: double getMin()>"
"<android.view.ViewStructure: void setHint(java.lang.CharSequence)>","<android.view.ViewStructure: void setHint(java.lang.CharSequence)>"
"<java.util.OptionalInt: int orElse(int)>","<java.util.OptionalInt: int orElse(int)>"
"<java.time.Duration: int toMinutesPart()>","<java.time.Duration: int toMinutesPart()>"
"<java.time.LocalDate: java.time.LocalDate plusYears(long)>","<java.time.LocalDate: java.time.LocalDate plusYears(long)>"
"<android.os.Handler: void <init>(android.os.Looper)>","<android.os.Handler: void <init>(android.os.Looper)>"
"<android.widget.Scroller: void setFriction(float)>","<android.widget.Scroller: void setFriction(float)>"
"<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndAddRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndAddRelease(java.lang.Object[])>"
"<android.view.View: int getSolidColor()>","<android.view.View: int getSolidColor()>"
"<java.util.AbstractList: boolean add(java.lang.Object)>","<java.util.AbstractList: boolean add(java.lang.Object)>"
"<android.view.inputmethod.InputContentInfo: void <clinit>()>","<android.view.inputmethod.InputContentInfo: void <clinit>()>"
"<android.content.res.Resources: java.io.InputStream openRawResource(int)>","<android.content.res.Resources: java.io.InputStream openRawResource(int)>"
"<java.util.NavigableMap: java.util.Map$Entry firstEntry()>","<java.util.NavigableMap: java.util.Map$Entry firstEntry()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.View: void dispatchDisplayHint(int)>","<android.view.View: void dispatchDisplayHint(int)>"
"<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()>","<android.hardware.Camera$Parameters: java.lang.String getWhiteBalance()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>","<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[])>"
"<android.view.View: android.graphics.drawable.Drawable getForeground()>","<android.view.View: android.graphics.drawable.Drawable getForeground()>"
"<android.view.inputmethod.CursorAnchorInfo: android.view.inputmethod.EditorBoundsInfo getEditorBoundsInfo()>","<android.view.inputmethod.CursorAnchorInfo: android.view.inputmethod.EditorBoundsInfo getEditorBoundsInfo()>"
"<java.util.HashSet: boolean isEmpty()>","<java.util.HashSet: boolean isEmpty()>"
"<android.media.AudioTrack: int getBufferCapacityInFrames()>","<android.media.AudioTrack: int getBufferCapacityInFrames()>"
"<java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>","<java.nio.file.spi.FileSystemProvider: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])>"
"<java.time.OffsetTime: java.lang.String toString()>","<java.time.OffsetTime: java.lang.String toString()>"
"<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>","<android.graphics.Outline: void setRoundRect(int,int,int,int,float)>"
"<android.util.Size: int getWidth()>","<android.util.Size: int getWidth()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>","<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>"
"<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>","<android.media.session.MediaSession: void setPlaybackToRemote(android.media.VolumeProvider)>"
"<android.view.ContentInfo: int getSource()>","<android.view.ContentInfo: int getSource()>"
"<java.util.OptionalLong: void <init>()>","<java.util.OptionalLong: void <init>()>"
"<java.lang.Class: java.lang.Class getEnclosingClass()>","<java.lang.Class: java.lang.Class getEnclosingClass()>"
"<android.view.View: void draw(android.graphics.Canvas)>","<android.view.View: void draw(android.graphics.Canvas)>"
"<java.lang.Long: int compareTo(java.lang.Long)>","<java.lang.Long: int compareTo(java.lang.Long)>"
"<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>","<android.view.MotionEvent$PointerCoords: float getAxisValue(int)>"
"<android.widget.RemoteViews$RemoteResponse: void <init>()>","<android.widget.RemoteViews$RemoteResponse: void <init>()>"
"<java.lang.Character$Subset: void <init>(java.lang.String)>","<java.lang.Character$Subset: void <init>(java.lang.String)>"
"<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>","<android.transition.Transition: void setPropagation(android.transition.TransitionPropagation)>"
"<android.hardware.camera2.CameraCaptureSession: void prepare(android.view.Surface)>","<android.hardware.camera2.CameraCaptureSession: void prepare(android.view.Surface)>"
"<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>","<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>"
"<android.icu.util.ULocale: java.lang.String getScript(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getScript(java.lang.String)>"
"<java.util.OptionalLong: java.util.OptionalLong empty()>","<java.util.OptionalLong: java.util.OptionalLong empty()>"
"<android.graphics.Canvas: void scale(float,float)>","<android.graphics.Canvas: void scale(float,float)>"
"<java.lang.reflect.Method: java.lang.String getName()>","<java.lang.reflect.Method: java.lang.String getName()>"
"<java.util.OptionalLong: java.lang.String toString()>","<java.util.OptionalLong: java.lang.String toString()>"
"<java.util.Map$Entry: java.util.Comparator comparingByKey(java.util.Comparator)>","<java.util.Map$Entry: java.util.Comparator comparingByKey(java.util.Comparator)>"
"<android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>","<android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>"
"<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>","<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>"
"<android.content.res.TypedArray: int getIndexCount()>","<android.content.res.TypedArray: int getIndexCount()>"
"<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>","<android.app.Application: void onConfigurationChanged(android.content.res.Configuration)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: android.app.VoiceInteractor$PickOptionRequest$Option addSynonym(java.lang.CharSequence)>","<android.app.VoiceInteractor$PickOptionRequest$Option: android.app.VoiceInteractor$PickOptionRequest$Option addSynonym(java.lang.CharSequence)>"
"<java.util.HashMap: java.util.Set keySet()>","<java.util.HashMap: java.util.Set keySet()>"
"<android.hardware.camera2.MultiResolutionImageReader: void <init>(java.util.Collection,int,int)>","<android.hardware.camera2.MultiResolutionImageReader: void <init>(java.util.Collection,int,int)>"
"<android.media.VolumeProvider: void onAdjustVolume(int)>","<android.media.VolumeProvider: void onAdjustVolume(int)>"
"<android.view.Surface: void readFromParcel(android.os.Parcel)>","<android.view.Surface: void readFromParcel(android.os.Parcel)>"
"<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>","<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>"
"<java.util.Comparator: java.util.Comparator thenComparingLong(java.util.function.ToLongFunction)>","<java.util.Comparator: java.util.Comparator thenComparingLong(java.util.function.ToLongFunction)>"
"<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>","<android.app.Activity: java.lang.Object getSystemService(java.lang.String)>"
"<java.io.PrintStream: java.io.PrintStream append(char)>","<java.io.PrintStream: java.io.PrintStream append(char)>"
"<android.media.session.MediaSession$Callback: void onPlayFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPlayFromSearch(java.lang.String,android.os.Bundle)>"
"<android.graphics.Canvas: void enableZ()>","<android.graphics.Canvas: void enableZ()>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest)>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureFailed(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest)>"
"<android.net.LinkProperties: void <init>()>","<android.net.LinkProperties: void <init>()>"
"<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>"
"<android.view.accessibility.AccessibilityRecord: boolean isChecked()>","<android.view.accessibility.AccessibilityRecord: boolean isChecked()>"
"<android.app.ActionBar: android.content.Context getThemedContext()>","<android.app.ActionBar: android.content.Context getThemedContext()>"
"<android.os.Build: void <init>()>","<android.os.Build: void <init>()>"
"<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>","<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>"
"<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>","<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>"
"<android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)>","<android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)>"
"<android.view.ViewParent: void requestTransparentRegion(android.view.View)>","<android.view.ViewParent: void requestTransparentRegion(android.view.View)>"
"<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>","<android.hardware.camera2.params.StreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>"
"<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()>","<android.media.AudioRecord: android.media.AudioDeviceInfo getRoutedDevice()>"
"<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.lang.Integer: long longValue()>","<java.lang.Integer: long longValue()>"
"<java.util.Arrays: void parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)>","<java.util.Arrays: void parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)>"
"<android.view.MotionEvent: float getAxisValue(int)>","<android.view.MotionEvent: float getAxisValue(int)>"
"<android.animation.Keyframe: void setFraction(float)>","<android.animation.Keyframe: void setFraction(float)>"
"<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>","<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>"
"<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()>","<android.view.textclassifier.TextClassifierEvent: android.icu.util.ULocale getLocale()>"
"<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>","<java.util.Map: boolean remove(java.lang.Object,java.lang.Object)>"
"<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline getPreferredFrameTimeline()>","<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline getPreferredFrameTimeline()>"
"<java.time.zone.ZoneRules: boolean isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)>","<java.time.zone.ZoneRules: boolean isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)>"
"<android.view.Display$Mode: void <init>()>","<android.view.Display$Mode: void <init>()>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getLogo()>"
"<java.time.LocalTime: java.time.LocalTime of(int,int,int,int)>","<java.time.LocalTime: java.time.LocalTime of(int,int,int,int)>"
"<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>","<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>"
"<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>","<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>"
"<android.icu.util.ULocale: java.lang.String getCharacterOrientation()>","<android.icu.util.ULocale: java.lang.String getCharacterOrientation()>"
"<android.widget.Toolbar: void setTitleMarginTop(int)>","<android.widget.Toolbar: void setTitleMarginTop(int)>"
"<android.os.Debug: void enableEmulatorTraceOutput()>","<android.os.Debug: void enableEmulatorTraceOutput()>"
"<java.time.ZoneOffset: java.lang.String getId()>","<java.time.ZoneOffset: java.lang.String getId()>"
"<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns()>","<android.telephony.TelephonyManager: java.lang.String[] getForbiddenPlmns()>"
"<android.view.ViewGroup: void removeView(android.view.View)>","<android.view.ViewGroup: void removeView(android.view.View)>"
"<android.media.ImageReader: android.media.Image acquireNextImage()>","<android.media.ImageReader: android.media.Image acquireNextImage()>"
"<android.os.LocaleList: java.util.Locale get(int)>","<android.os.LocaleList: java.util.Locale get(int)>"
"<android.text.PrecomputedText: char charAt(int)>","<android.text.PrecomputedText: char charAt(int)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemGestureInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemGestureInsets(android.graphics.Insets)>"
"<java.lang.Boolean: java.lang.String toString(boolean)>","<java.lang.Boolean: java.lang.String toString(boolean)>"
"<android.media.VolumeShaper$Configuration: long getDuration()>","<android.media.VolumeShaper$Configuration: long getDuration()>"
"<android.widget.RemoteViews: int getLayoutId()>","<android.widget.RemoteViews: int getLayoutId()>"
"<android.graphics.ColorSpace$Adaptation: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$Adaptation: void <init>(java.lang.String,int)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setBufferedPosition(long)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setBufferedPosition(long)>"
"<java.lang.Long: void <clinit>()>","<java.lang.Long: void <clinit>()>"
"<java.util.stream.IntStream: java.util.OptionalInt findFirst()>","<java.util.stream.IntStream: java.util.OptionalInt findFirst()>"
"<java.nio.charset.CoderResult: boolean isError()>","<java.nio.charset.CoderResult: boolean isError()>"
"<android.app.Activity: void stopLockTask()>","<android.app.Activity: void stopLockTask()>"
"<java.lang.StringBuilder: int codePointAt(int)>","<java.lang.StringBuilder: int codePointAt(int)>"
"<java.time.temporal.ValueRange: void <init>()>","<java.time.temporal.ValueRange: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setError(java.lang.CharSequence)>"
"<java.lang.reflect.Member: java.lang.String getName()>","<java.lang.reflect.Member: java.lang.String getName()>"
"<android.transition.Transition: void captureStartValues(android.transition.TransitionValues)>","<android.transition.Transition: void captureStartValues(android.transition.TransitionValues)>"
"<java.time.LocalDateTime: int compareTo(java.lang.Object)>","<java.time.LocalDateTime: int compareTo(java.lang.Object)>"
"<android.view.InputEvent: long getEventTime()>","<android.view.InputEvent: long getEventTime()>"
"<android.view.View$MeasureSpec: int getSize(int)>","<android.view.View$MeasureSpec: int getSize(int)>"
"<android.media.session.MediaSessionManager$OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>","<android.media.session.MediaSessionManager$OnActiveSessionsChangedListener: void onActiveSessionsChanged(java.util.List)>"
"<android.view.contentcapture.ContentCaptureSessionId: boolean equals(java.lang.Object)>","<android.view.contentcapture.ContentCaptureSessionId: boolean equals(java.lang.Object)>"
"<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>","<android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireUnstableContentProviderClient(android.net.Uri)>"
"<android.content.ContextWrapper: android.content.Context createWindowContext(int,android.os.Bundle)>","<android.content.ContextWrapper: android.content.Context createWindowContext(int,android.os.Bundle)>"
"<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>","<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>"
"<android.content.res.Resources: android.content.res.Configuration getConfiguration()>","<android.content.res.Resources: android.content.res.Configuration getConfiguration()>"
"<java.util.List: boolean retainAll(java.util.Collection)>","<java.util.List: boolean retainAll(java.util.Collection)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowSpan(int)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowSpan(int)>"
"<android.content.pm.ApplicationInfo: java.lang.CharSequence getCategoryTitle(android.content.Context,int)>","<android.content.pm.ApplicationInfo: java.lang.CharSequence getCategoryTitle(android.content.Context,int)>"
"<java.lang.StringBuilder: java.lang.String substring(int,int)>","<java.lang.StringBuilder: java.lang.String substring(int,int)>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)>"
"<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)>","<android.telephony.TelephonyManager: byte[] iccExchangeSimIO(int,int,int,int,int,java.lang.String)>"
"<android.media.AudioTrack$StreamEventCallback: void onTearDown(android.media.AudioTrack)>","<android.media.AudioTrack$StreamEventCallback: void onTearDown(android.media.AudioTrack)>"
"<android.view.ViewPropertyAnimator: void cancel()>","<android.view.ViewPropertyAnimator: void cancel()>"
"<android.graphics.Matrix: void mapPoints(float[])>","<android.graphics.Matrix: void mapPoints(float[])>"
"<android.content.Context: java.io.File[] getExternalMediaDirs()>","<android.content.Context: java.io.File[] getExternalMediaDirs()>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setMasteringIndication(int)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setMasteringIndication(int)>"
"<android.os.Looper: android.os.MessageQueue myQueue()>","<android.os.Looper: android.os.MessageQueue myQueue()>"
"<android.telephony.BarringInfo: java.lang.String toString()>","<android.telephony.BarringInfo: java.lang.String toString()>"
"<java.security.Timestamp: java.util.Date getTimestamp()>","<java.security.Timestamp: java.util.Date getTimestamp()>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setEncapsulationMode(int)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setEncapsulationMode(int)>"
"<android.view.DragEvent: int getAction()>","<android.view.DragEvent: int getAction()>"
"<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)>"
"<android.widget.Toolbar: void onAttachedToWindow()>","<android.widget.Toolbar: void onAttachedToWindow()>"
"<android.view.WindowManager$LayoutParams: void <clinit>()>","<android.view.WindowManager$LayoutParams: void <clinit>()>"
"<android.graphics.Xfermode: void <init>()>","<android.graphics.Xfermode: void <init>()>"
"<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>","<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>"
"<android.view.View: void layout(int,int,int,int)>","<android.view.View: void layout(int,int,int,int)>"
"<android.text.style.ClickableSpan: void <init>()>","<android.text.style.ClickableSpan: void <init>()>"
"<java.net.Socket: void <init>(java.net.InetAddress,int)>","<java.net.Socket: void <init>(java.net.InetAddress,int)>"
"<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>","<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>"
"<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>","<android.media.MediaMetadata: android.graphics.Bitmap getBitmap(java.lang.String)>"
"<java.io.FileOutputStream: void write(int)>","<java.io.FileOutputStream: void write(int)>"
"<java.util.stream.BaseStream: void close()>","<java.util.stream.BaseStream: void close()>"
"<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>","<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>"
"<android.content.pm.PackageInstaller: void abandonSession(int)>","<android.content.pm.PackageInstaller: void abandonSession(int)>"
"<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>","<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>"
"<android.content.pm.ResolveInfo: void <clinit>()>","<android.content.pm.ResolveInfo: void <clinit>()>"
"<java.time.Period: java.time.chrono.ChronoPeriod normalized()>","<java.time.Period: java.time.chrono.ChronoPeriod normalized()>"
"<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()>","<android.content.ContextWrapper: java.io.File[] getExternalMediaDirs()>"
"<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>"
"<java.util.Spliterator$OfInt: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfInt: java.util.Spliterator$OfPrimitive trySplit()>"
"<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>","<android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>"
"<android.media.MediaDrm: java.lang.String getPropertyString(java.lang.String)>","<android.media.MediaDrm: java.lang.String getPropertyString(java.lang.String)>"
"<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)>","<android.telephony.TelephonyManager: void sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.os.Handler)>"
"<java.nio.ShortBuffer: java.nio.Buffer position(int)>","<java.nio.ShortBuffer: java.nio.Buffer position(int)>"
"<android.media.SyncParams: int getSyncSource()>","<android.media.SyncParams: int getSyncSource()>"
"<android.content.pm.PackageInstaller$Session: java.io.OutputStream openWrite(java.lang.String,long,long)>","<android.content.pm.PackageInstaller$Session: java.io.OutputStream openWrite(java.lang.String,long,long)>"
"<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>","<java.net.URLStreamHandler: void parseURL(java.net.URL,java.lang.String,int,int)>"
"<android.os.Parcel: java.lang.String[] createStringArray()>","<android.os.Parcel: java.lang.String[] createStringArray()>"
"<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>","<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>"
"<android.app.ActionBar: void setHomeActionContentDescription(java.lang.CharSequence)>","<android.app.ActionBar: void setHomeActionContentDescription(java.lang.CharSequence)>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int)>"
"<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>","<android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>"
"<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>","<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>"
"<android.content.pm.PackageInstaller: void installExistingPackage(java.lang.String,int,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void installExistingPackage(java.lang.String,int,android.content.IntentSender)>"
"<android.graphics.Color: void colorToHSV(int,float[])>","<android.graphics.Color: void colorToHSV(int,float[])>"
"<android.os.Parcel: void writeInterfaceArray(android.os.IInterface[])>","<android.os.Parcel: void writeInterfaceArray(android.os.IInterface[])>"
"<java.util.Collection: boolean equals(java.lang.Object)>","<java.util.Collection: boolean equals(java.lang.Object)>"
"<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()>","<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setHintText(java.lang.CharSequence)>"
"<android.media.MediaDrm: void setPropertyString(java.lang.String,java.lang.String)>","<android.media.MediaDrm: void setPropertyString(java.lang.String,java.lang.String)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)>"
"<java.util.function.Predicate: java.util.function.Predicate not(java.util.function.Predicate)>","<java.util.function.Predicate: java.util.function.Predicate not(java.util.function.Predicate)>"
"<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>","<android.widget.RemoteViews: void <init>(android.widget.RemoteViews)>"
"<android.telephony.SignalStrength: int describeContents()>","<android.telephony.SignalStrength: int describeContents()>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo build()>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo build()>"
"<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>","<android.media.session.MediaSession: void setCallback(android.media.session.MediaSession$Callback,android.os.Handler)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])>"
"<java.util.OptionalDouble: double orElseThrow(java.util.function.Supplier)>","<java.util.OptionalDouble: double orElseThrow(java.util.function.Supplier)>"
"<android.view.accessibility.AccessibilityEvent: void <init>(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityEvent: void <init>(android.view.accessibility.AccessibilityEvent)>"
"<android.database.sqlite.SQLiteProgram: void clearBindings()>","<android.database.sqlite.SQLiteProgram: void clearBindings()>"
"<android.view.SurfaceControlViewHost: android.view.View getView()>","<android.view.SurfaceControlViewHost: android.view.View getView()>"
"<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.widget.TextView: void setHighlightColor(int)>","<android.widget.TextView: void setHighlightColor(int)>"
"<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>","<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>"
"<java.lang.Double: void <init>(java.lang.String)>","<java.lang.Double: void <init>(java.lang.String)>"
"<java.lang.Integer: int compare(int,int)>","<java.lang.Integer: int compare(int,int)>"
"<android.view.View: void onMeasure(int,int)>","<android.view.View: void onMeasure(int,int)>"
"<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>","<android.media.ImageReader: void setOnImageAvailableListener(android.media.ImageReader$OnImageAvailableListener,android.os.Handler)>"
"<android.view.inputmethod.CompletionInfo: int describeContents()>","<android.view.inputmethod.CompletionInfo: int describeContents()>"
"<android.media.AudioRecord: int read(byte[],int,int)>","<android.media.AudioRecord: int read(byte[],int,int)>"
"<android.view.View: boolean performLongClick(float,float)>","<android.view.View: boolean performLongClick(float,float)>"
"<android.content.Intent: java.lang.Object getParcelableExtra(java.lang.String,java.lang.Class)>","<android.content.Intent: java.lang.Object getParcelableExtra(java.lang.String,java.lang.Class)>"
"<android.app.Dialog: void setContentView(int)>","<android.app.Dialog: void setContentView(int)>"
"<android.text.method.MovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>","<android.text.method.MovementMethod: boolean onGenericMotionEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>"
"<java.util.function.DoubleBinaryOperator: double applyAsDouble(double,double)>","<java.util.function.DoubleBinaryOperator: double applyAsDouble(double,double)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostPaused(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostPaused(android.app.Activity)>"
"<android.app.ActivityManager$TaskDescription: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$TaskDescription: void readFromParcel(android.os.Parcel)>"
"<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>","<android.view.View: void setVerticalFadingEdgeEnabled(boolean)>"
"<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>","<android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>"
"<java.lang.Double: java.lang.Double valueOf(java.lang.String)>","<java.lang.Double: java.lang.Double valueOf(java.lang.String)>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>"
"<java.time.chrono.IsoChronology: java.lang.String getCalendarType()>","<java.time.chrono.IsoChronology: java.lang.String getCalendarType()>"
"<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.util.stream.LongStream: java.util.stream.LongStream iterate(long,java.util.function.LongUnaryOperator)>","<java.util.stream.LongStream: java.util.stream.LongStream iterate(long,java.util.function.LongUnaryOperator)>"
"<android.media.AudioDeviceInfo: boolean equals(java.lang.Object)>","<android.media.AudioDeviceInfo: boolean equals(java.lang.Object)>"
"<android.widget.AbsListView: void setStackFromBottom(boolean)>","<android.widget.AbsListView: void setStackFromBottom(boolean)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(char)>","<java.lang.StringBuffer: java.lang.StringBuffer append(char)>"
"<android.view.View: void setLayerPaint(android.graphics.Paint)>","<android.view.View: void setLayerPaint(android.graphics.Paint)>"
"<android.graphics.Matrix: void mapVectors(float[],float[])>","<android.graphics.Matrix: void mapVectors(float[],float[])>"
"<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>","<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>()>","<android.view.accessibility.AccessibilityNodeInfo: void <init>()>"
"<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>","<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>"
"<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>","<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>"
"<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset)>","<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset)>"
"<android.text.Editable: void clearSpans()>","<android.text.Editable: void clearSpans()>"
"<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>","<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>"
"<java.util.SortedMap: java.lang.Object firstKey()>","<java.util.SortedMap: java.lang.Object firstKey()>"
"<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>"
"<android.os.Handler: java.lang.String toString()>","<android.os.Handler: java.lang.String toString()>"
"<android.animation.ValueAnimator: boolean isRunning()>","<android.animation.ValueAnimator: boolean isRunning()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>"
"<android.hardware.Camera$Size: int hashCode()>","<android.hardware.Camera$Size: int hashCode()>"
"<android.net.IpPrefix: int describeContents()>","<android.net.IpPrefix: int describeContents()>"
"<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>","<android.content.ContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>"
"<android.view.ActionMode: android.view.Menu getMenu()>","<android.view.ActionMode: android.view.Menu getMenu()>"
"<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>","<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>"
"<android.view.View: float getScaleX()>","<android.view.View: float getScaleX()>"
"<java.util.NavigableSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>","<java.util.NavigableSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>"
"<android.widget.Toolbar: int getTitleMarginTop()>","<android.widget.Toolbar: int getTitleMarginTop()>"
"<android.view.AbsSavedState: void <init>(android.os.Parcel)>","<android.view.AbsSavedState: void <init>(android.os.Parcel)>"
"<android.graphics.Paint$Align: void <clinit>()>","<android.graphics.Paint$Align: void <clinit>()>"
"<java.time.Duration: long toNanos()>","<java.time.Duration: long toNanos()>"
"<android.widget.TextView: int getMaxHeight()>","<android.widget.TextView: int getMaxHeight()>"
"<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>"
"<java.util.stream.Stream: java.util.stream.Stream distinct()>","<java.util.stream.Stream: java.util.stream.Stream distinct()>"
"<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>","<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>"
"<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>","<java.util.stream.Stream: java.util.stream.LongStream mapToLong(java.util.function.ToLongFunction)>"
"<android.os.Parcel: void readInterfaceList(java.util.List,java.util.function.Function)>","<android.os.Parcel: void readInterfaceList(java.util.List,java.util.function.Function)>"
"<android.telephony.CellIdentity: int describeContents()>","<android.telephony.CellIdentity: int describeContents()>"
"<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>","<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>"
"<java.security.cert.CertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.cert.CertificateEncodingException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>","<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>"
"<android.os.Bundle: void remove(java.lang.String)>","<android.os.Bundle: void remove(java.lang.String)>"
"<android.content.pm.PackageInstaller$Session: void abandon()>","<android.content.pm.PackageInstaller$Session: void abandon()>"
"<java.lang.invoke.MethodHandle: java.lang.Object invokeWithArguments(java.lang.Object[])>","<java.lang.invoke.MethodHandle: java.lang.Object invokeWithArguments(java.lang.Object[])>"
"<android.content.ContextWrapper: boolean deleteSharedPreferences(java.lang.String)>","<android.content.ContextWrapper: boolean deleteSharedPreferences(java.lang.String)>"
"<java.time.Month: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.Month: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>","<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(int,android.util.Size)>"
"<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>","<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>"
"<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>","<android.content.res.TypedArray: java.lang.String getNonResourceString(int)>"
"<java.lang.ThreadGroup: void interrupt()>","<java.lang.ThreadGroup: void interrupt()>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedFlashModes()>"
"<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementReturnTransition(android.transition.Transition)>"
"<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>","<android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)>"
"<android.util.ArrayMap: java.lang.Object removeAt(int)>","<android.util.ArrayMap: java.lang.Object removeAt(int)>"
"<java.io.Writer: void flush()>","<java.io.Writer: void flush()>"
"<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>","<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>"
"<android.view.InputDevice: android.hardware.SensorManager getSensorManager()>","<android.view.InputDevice: android.hardware.SensorManager getSensorManager()>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>","<android.hardware.Camera$Parameters: java.util.List getSupportedColorEffects()>"
"<java.net.InetAddress: void <init>()>","<java.net.InetAddress: void <init>()>"
"<android.media.AudioTrack: boolean setDualMonoMode(int)>","<android.media.AudioTrack: boolean setDualMonoMode(int)>"
"<java.time.Month: void <clinit>()>","<java.time.Month: void <clinit>()>"
"<android.telephony.data.ApnSetting: int getId()>","<android.telephony.data.ApnSetting: int getId()>"
"<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>","<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>"
"<android.view.ViewParent: boolean canResolveLayoutDirection()>","<android.view.ViewParent: boolean canResolveLayoutDirection()>"
"<android.content.pm.PackageManager$Property: java.lang.String getString()>","<android.content.pm.PackageManager$Property: java.lang.String getString()>"
"<java.lang.Integer: java.lang.Integer decode(java.lang.String)>","<java.lang.Integer: java.lang.Integer decode(java.lang.String)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>"
"<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>","<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>"
"<java.util.regex.Matcher: int regionStart()>","<java.util.regex.Matcher: int regionStart()>"
"<android.media.AudioTrack$Builder: void <init>()>","<android.media.AudioTrack$Builder: void <init>()>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureResult)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureProgressed(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.CaptureResult)>"
"<java.net.Inet4Address: boolean isAnyLocalAddress()>","<java.net.Inet4Address: boolean isAnyLocalAddress()>"
"<android.widget.EditText: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.EditText: java.lang.CharSequence getAccessibilityClassName()>"
"<android.net.NetworkRequest: boolean canBeSatisfiedBy(android.net.NetworkCapabilities)>","<android.net.NetworkRequest: boolean canBeSatisfiedBy(android.net.NetworkCapabilities)>"
"<java.util.HashSet: boolean add(java.lang.Object)>","<java.util.HashSet: boolean add(java.lang.Object)>"
"<android.graphics.Path$Op: void <clinit>()>","<android.graphics.Path$Op: void <clinit>()>"
"<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>","<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>"
"<android.view.View: java.lang.String[] getReceiveContentMimeTypes()>","<android.view.View: java.lang.String[] getReceiveContentMimeTypes()>"
"<android.widget.RemoteViews: void setFloatDimenAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setFloatDimenAttr(int,java.lang.String,int)>"
"<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>","<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>"
"<android.view.View: void setImportantForAccessibility(int)>","<android.view.View: void setImportantForAccessibility(int)>"
"<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.graphics.drawable.LayerDrawable: int getLayerInsetTop(int)>","<android.graphics.drawable.LayerDrawable: int getLayerInsetTop(int)>"
"<android.media.MediaDrm: int getOfflineLicenseState(byte[])>","<android.media.MediaDrm: int getOfflineLicenseState(byte[])>"
"<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowDetached()>","<android.view.ViewTreeObserver$OnWindowAttachListener: void onWindowDetached()>"
"<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>","<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>"
"<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighResolutionOutputSizes(int)>","<android.hardware.camera2.params.StreamConfigurationMap: android.util.Size[] getHighResolutionOutputSizes(int)>"
"<android.hardware.camera2.params.OutputConfiguration: int getMirrorMode()>","<android.hardware.camera2.params.OutputConfiguration: int getMirrorMode()>"
"<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator)>","<java.util.stream.Stream: java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator)>"
"<java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>","<java.util.LongSummaryStatistics: void combine(java.util.LongSummaryStatistics)>"
"<java.util.function.DoubleConsumer: java.util.function.DoubleConsumer andThen(java.util.function.DoubleConsumer)>","<java.util.function.DoubleConsumer: java.util.function.DoubleConsumer andThen(java.util.function.DoubleConsumer)>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession)>"
"<android.hardware.lights.LightsRequest: java.util.List getLights()>","<android.hardware.lights.LightsRequest: java.util.List getLights()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<java.util.function.Predicate: java.util.function.Predicate or(java.util.function.Predicate)>","<java.util.function.Predicate: java.util.function.Predicate or(java.util.function.Predicate)>"
"<android.net.IpSecAlgorithm: java.util.Set getSupportedAlgorithms()>","<android.net.IpSecAlgorithm: java.util.Set getSupportedAlgorithms()>"
"<android.view.View: boolean onSetAlpha(int)>","<android.view.View: boolean onSetAlpha(int)>"
"<java.nio.channels.DatagramChannel: boolean isConnected()>","<java.nio.channels.DatagramChannel: boolean isConnected()>"
"<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>","<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>"
"<android.view.contentcapture.ContentCaptureSession: void notifySessionResumed()>","<android.view.contentcapture.ContentCaptureSession: void notifySessionResumed()>"
"<android.net.RouteInfo: int hashCode()>","<android.net.RouteInfo: int hashCode()>"
"<android.media.RemoteControlClient$OnPlaybackPositionUpdateListener: void onPlaybackPositionUpdate(long)>","<android.media.RemoteControlClient$OnPlaybackPositionUpdateListener: void onPlaybackPositionUpdate(long)>"
"<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>","<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>"
"<java.lang.Boolean: boolean getBoolean(java.lang.String)>","<java.lang.Boolean: boolean getBoolean(java.lang.String)>"
"<android.content.ContextWrapper: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>","<android.content.ContextWrapper: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>"
"<android.os.Parcel: void writeArray(java.lang.Object[])>","<android.os.Parcel: void writeArray(java.lang.Object[])>"
"<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>","<java.util.NavigableMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>"
"<android.view.View: void setLongClickable(boolean)>","<android.view.View: void setLongClickable(boolean)>"
"<java.lang.Enum: java.lang.String name()>","<java.lang.Enum: java.lang.String name()>"
"<java.io.OutputStream: void <init>()>","<java.io.OutputStream: void <init>()>"
"<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>","<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>"
"<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>","<android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)>"
"<java.lang.Character: int hashCode(char)>","<java.lang.Character: int hashCode(char)>"
"<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>","<java.nio.charset.CharsetEncoder: float maxBytesPerChar()>"
"<android.text.PrecomputedText: float getWidth(int,int)>","<android.text.PrecomputedText: float getWidth(int,int)>"
"<android.view.ViewStructure: void setTextStyle(float,int,int,int)>","<android.view.ViewStructure: void setTextStyle(float,int,int,int)>"
"<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>","<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>"
"<java.lang.Float: boolean isFinite(float)>","<java.lang.Float: boolean isFinite(float)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>","<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>"
"<java.util.Arrays: void sort(java.lang.Object[])>","<java.util.Arrays: void sort(java.lang.Object[])>"
"<android.view.MotionEvent: float getX()>","<android.view.MotionEvent: float getX()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(int)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder setComputeHyphenation(int)>"
"<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>","<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>"
"<java.lang.Float: void <init>(double)>","<java.lang.Float: void <init>(double)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain(android.view.accessibility.AccessibilityWindowInfo)>"
"<android.animation.Keyframe: java.lang.Object getValue()>","<android.animation.Keyframe: java.lang.Object getValue()>"
"<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String)>"
"<android.hardware.camera2.params.InputConfiguration: java.lang.String toString()>","<android.hardware.camera2.params.InputConfiguration: java.lang.String toString()>"
"<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.Button: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.util.ArrayMap: void putAll(java.util.Map)>","<android.util.ArrayMap: void putAll(java.util.Map)>"
"<android.widget.TextView: void onVisibilityAggregated(boolean)>","<android.widget.TextView: void onVisibilityAggregated(boolean)>"
"<android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>","<android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>"
"<android.animation.Animator: void end()>","<android.animation.Animator: void end()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setDismissable(boolean)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityBanner(android.content.Intent)>"
"<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>","<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>"
"<java.security.PermissionCollection: boolean implies(java.security.Permission)>","<java.security.PermissionCollection: boolean implies(java.security.Permission)>"
"<java.time.Instant: boolean isAfter(java.time.Instant)>","<java.time.Instant: boolean isAfter(java.time.Instant)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPaneTitle()>"
"<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator$OfDouble: void forEachRemaining(java.util.function.Consumer)>"
"<java.util.concurrent.locks.Lock: void lock()>","<java.util.concurrent.locks.Lock: void lock()>"
"<android.app.ActivityManager: java.util.List getRunningTasks(int)>","<android.app.ActivityManager: java.util.List getRunningTasks(int)>"
"<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>","<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.content.Context: void setWallpaper(android.graphics.Bitmap)>","<android.content.Context: void setWallpaper(android.graphics.Bitmap)>"
"<android.widget.MediaController$MediaPlayerControl: boolean canPause()>","<android.widget.MediaController$MediaPlayerControl: boolean canPause()>"
"<android.view.MotionEvent: float getTouchMinor()>","<android.view.MotionEvent: float getTouchMinor()>"
"<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
"<java.time.chrono.ChronoLocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)>"
"<android.media.AudioTrack: void setLogSessionId(android.media.metrics.LogSessionId)>","<android.media.AudioTrack: void setLogSessionId(android.media.metrics.LogSessionId)>"
"<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>","<android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>"
"<java.nio.LongBuffer: java.nio.LongBuffer slice()>","<java.nio.LongBuffer: java.nio.LongBuffer slice()>"
"<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>","<java.nio.channels.FileLock: java.nio.channels.Channel acquiredBy()>"
"<java.util.NavigableMap: java.util.NavigableSet descendingKeySet()>","<java.util.NavigableMap: java.util.NavigableSet descendingKeySet()>"
"<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>","<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>"
"<android.content.res.Resources$Theme: int hashCode()>","<android.content.res.Resources$Theme: int hashCode()>"
"<android.graphics.ColorSpace: java.lang.String toString()>","<android.graphics.ColorSpace: java.lang.String toString()>"
"<java.io.Reader: void close()>","<java.io.Reader: void close()>"
"<android.telephony.TelephonyManager$CellInfoCallback: void onCellInfo(java.util.List)>","<android.telephony.TelephonyManager$CellInfoCallback: void onCellInfo(java.util.List)>"
"<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>","<android.view.MenuItem: android.view.MenuItem setCheckable(boolean)>"
"<java.util.Arrays: void fill(boolean[],boolean)>","<java.util.Arrays: void fill(boolean[],boolean)>"
"<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator identity()>","<java.util.function.LongUnaryOperator: java.util.function.LongUnaryOperator identity()>"
"<android.os.BaseBundle: boolean isEmpty()>","<android.os.BaseBundle: boolean isEmpty()>"
"<java.net.URLConnection: long getIfModifiedSince()>","<java.net.URLConnection: long getIfModifiedSince()>"
"<android.graphics.Insets: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Insets: void writeToParcel(android.os.Parcel,int)>"
"<android.media.AudioAttributes: int getSpatializationBehavior()>","<android.media.AudioAttributes: int getSpatializationBehavior()>"
"<java.security.CodeSource: java.net.URL getLocation()>","<java.security.CodeSource: java.net.URL getLocation()>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String)>"
"<android.media.MediaPlayer$OnTimedMetaDataAvailableListener: void onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)>","<android.media.MediaPlayer$OnTimedMetaDataAvailableListener: void onTimedMetaDataAvailable(android.media.MediaPlayer,android.media.TimedMetaData)>"
"<android.animation.Animator: void setupStartValues()>","<android.animation.Animator: void setupStartValues()>"
"<java.util.HashMap: void <init>(int)>","<java.util.HashMap: void <init>(int)>"
"<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>","<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>"
"<android.widget.Scroller: void startScroll(int,int,int,int)>","<android.widget.Scroller: void startScroll(int,int,int,int)>"
"<android.widget.Scroller: int getCurrX()>","<android.widget.Scroller: int getCurrX()>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed()>"
"<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()>","<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()>"
"<android.app.PendingIntent: void send()>","<android.app.PendingIntent: void send()>"
"<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>","<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>"
"<android.hardware.display.DeviceProductInfo: int getConnectionToSinkType()>","<android.hardware.display.DeviceProductInfo: int getConnectionToSinkType()>"
"<android.view.KeyEvent: int getModifierMetaStateMask()>","<android.view.KeyEvent: int getModifierMetaStateMask()>"
"<java.lang.System: java.lang.String getenv(java.lang.String)>","<java.lang.System: java.lang.String getenv(java.lang.String)>"
"<android.media.PlaybackParams: void <clinit>()>","<android.media.PlaybackParams: void <clinit>()>"
"<android.net.ConnectivityManager: android.net.Network getProcessDefaultNetwork()>","<android.net.ConnectivityManager: android.net.Network getProcessDefaultNetwork()>"
"<android.graphics.RecordingCanvas: void drawLines(float[],int,int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawLines(float[],int,int,android.graphics.Paint)>"
"<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>","<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource build()>","<android.content.AttributionSource$Builder: android.content.AttributionSource build()>"
"<android.content.res.Resources: java.lang.String getString(int)>","<android.content.res.Resources: java.lang.String getString(int)>"
"<java.time.Period: java.time.Period 'from'(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.Period 'from'(java.time.temporal.TemporalAmount)>"
"<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey unblock(java.net.InetAddress)>","<java.nio.channels.MembershipKey: java.nio.channels.MembershipKey unblock(java.net.InetAddress)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod negated()>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod negated()>"
"<java.net.URI: int getPort()>","<java.net.URI: int getPort()>"
"<java.nio.DoubleBuffer: boolean isDirect()>","<java.nio.DoubleBuffer: boolean isDirect()>"
"<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>","<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>"
"<android.media.MediaDrm$PlaybackComponent: void <init>(android.media.MediaDrm)>","<android.media.MediaDrm$PlaybackComponent: void <init>(android.media.MediaDrm)>"
"<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addRoundRect(float,float,float,float,float,float,android.graphics.Path$Direction)>"
"<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>","<android.app.AlertDialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>"
"<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>","<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>"
"<android.app.ActivityManager: java.util.List getAppTasks()>","<android.app.ActivityManager: java.util.List getAppTasks()>"
"<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener)>","<android.media.MediaPlayer: void setOnDrmInfoListener(android.media.MediaPlayer$OnDrmInfoListener)>"
"<android.view.MotionEvent: void setLocation(float,float)>","<android.view.MotionEvent: void setLocation(float,float)>"
"<android.content.Context: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>","<android.content.Context: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>"
"<android.media.AudioAttributes$Builder: void <init>()>","<android.media.AudioAttributes$Builder: void <init>()>"
"<android.view.accessibility.AccessibilityRecord: void <init>()>","<android.view.accessibility.AccessibilityRecord: void <init>()>"
"<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>","<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>"
"<java.util.Arrays: void parallelSetAll(double[],java.util.function.IntToDoubleFunction)>","<java.util.Arrays: void parallelSetAll(double[],java.util.function.IntToDoubleFunction)>"
"<java.util.Arrays: java.util.stream.DoubleStream stream(double[])>","<java.util.Arrays: java.util.stream.DoubleStream stream(double[])>"
"<android.media.MediaDrm$SessionException: boolean isTransient()>","<android.media.MediaDrm$SessionException: boolean isTransient()>"
"<android.content.Context: android.content.res.AssetManager getAssets()>","<android.content.Context: android.content.res.AssetManager getAssets()>"
"<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],android.icu.util.ULocale[],boolean[])>","<android.icu.util.ULocale: android.icu.util.ULocale acceptLanguage(android.icu.util.ULocale[],android.icu.util.ULocale[],boolean[])>"
"<android.view.textclassifier.TextClassification$Request: java.lang.CharSequence getText()>","<android.view.textclassifier.TextClassification$Request: java.lang.CharSequence getText()>"
"<android.graphics.RenderNode: boolean setTranslationX(float)>","<android.graphics.RenderNode: boolean setTranslationX(float)>"
"<android.content.ContextWrapper: java.lang.String getPackageName()>","<android.content.ContextWrapper: java.lang.String getPackageName()>"
"<android.view.textclassifier.TextClassificationContext: void <clinit>()>","<android.view.textclassifier.TextClassificationContext: void <clinit>()>"
"<java.lang.System: java.util.Map getenv()>","<java.lang.System: java.util.Map getenv()>"
"<android.view.ViewTreeObserver: boolean isAlive()>","<android.view.ViewTreeObserver: boolean isAlive()>"
"<java.util.Arrays: int mismatch(float[],int,int,float[],int,int)>","<java.util.Arrays: int mismatch(float[],int,int,float[],int,int)>"
"<android.media.AudioTrack: float getMinVolume()>","<android.media.AudioTrack: float getMinVolume()>"
"<java.net.URLConnection: boolean getUseCaches()>","<java.net.URLConnection: boolean getUseCaches()>"
"<android.media.AudioMetadataMap: java.lang.Object set(android.media.AudioMetadata$Key,java.lang.Object)>","<android.media.AudioMetadataMap: java.lang.Object set(android.media.AudioMetadata$Key,java.lang.Object)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup privateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles$Lookup)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup privateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles$Lookup)>"
"<java.util.Arrays: int compare(boolean[],boolean[])>","<java.util.Arrays: int compare(boolean[],boolean[])>"
"<android.widget.Scroller: int getFinalY()>","<android.widget.Scroller: int getFinalY()>"
"<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>","<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>"
"<android.hardware.camera2.params.ExtensionSessionConfiguration: android.hardware.camera2.CameraExtensionSession$StateCallback getStateCallback()>","<android.hardware.camera2.params.ExtensionSessionConfiguration: android.hardware.camera2.CameraExtensionSession$StateCallback getStateCallback()>"
"<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>","<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>"
"<java.util.function.ToLongFunction: long applyAsLong(java.lang.Object)>","<java.util.function.ToLongFunction: long applyAsLong(java.lang.Object)>"
"<java.lang.String: java.lang.String replace(char,char)>","<java.lang.String: java.lang.String replace(char,char)>"
"<android.view.View: boolean hasExplicitFocusable()>","<android.view.View: boolean hasExplicitFocusable()>"
"<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)>","<java.nio.charset.Charset: boolean contains(java.nio.charset.Charset)>"
"<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>","<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>"
"<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>","<android.view.Display: void getCurrentSizeRange(android.graphics.Point,android.graphics.Point)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusWeeks(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusWeeks(long)>"
"<android.media.MediaDrm: byte[] provideKeyResponse(byte[],byte[])>","<android.media.MediaDrm: byte[] provideKeyResponse(byte[],byte[])>"
"<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>","<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>"
"<android.graphics.ColorSpace$Rgb: int hashCode()>","<android.graphics.ColorSpace$Rgb: int hashCode()>"
"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>","<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.app.VoiceInteractor$Prompt: void <clinit>()>","<android.app.VoiceInteractor$Prompt: void <clinit>()>"
"<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)>","<android.media.AudioManager: int abandonAudioFocus(android.media.AudioManager$OnAudioFocusChangeListener)>"
"<java.util.Hashtable: java.util.Collection values()>","<java.util.Hashtable: java.util.Collection values()>"
"<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>","<android.telephony.TelephonyManager: android.telephony.NetworkScan requestNetworkScan(int,android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager$NetworkScanCallback)>"
"<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>","<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>"
"<android.os.BaseBundle: double getDouble(java.lang.String,double)>","<android.os.BaseBundle: double getDouble(java.lang.String,double)>"
"<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.content.AttributionSource: boolean equals(java.lang.Object)>","<android.content.AttributionSource: boolean equals(java.lang.Object)>"
"<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>","<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>"
"<android.widget.Scroller: int getDuration()>","<android.widget.Scroller: int getDuration()>"
"<java.net.ServerSocket: int getLocalPort()>","<java.net.ServerSocket: int getLocalPort()>"
"<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>","<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>"
"<android.media.MediaDrm$LogMessage: java.lang.String toString()>","<android.media.MediaDrm$LogMessage: java.lang.String toString()>"
"<android.graphics.RectF: boolean equals(java.lang.Object)>","<android.graphics.RectF: boolean equals(java.lang.Object)>"
"<android.hardware.Camera$Parameters: void setGpsLongitude(double)>","<android.hardware.Camera$Parameters: void setGpsLongitude(double)>"
"<android.hardware.camera2.CaptureFailure: long getFrameNumber()>","<android.hardware.camera2.CaptureFailure: long getFrameNumber()>"
"<android.app.Activity: void onNewIntent(android.content.Intent)>","<android.app.Activity: void onNewIntent(android.content.Intent)>"
"<android.app.Fragment: java.lang.String getString(int)>","<android.app.Fragment: java.lang.String getString(int)>"
"<android.view.displayhash.DisplayHash: void <clinit>()>","<android.view.displayhash.DisplayHash: void <clinit>()>"
"<java.io.PrintWriter: void println()>","<java.io.PrintWriter: void println()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)>"
"<android.view.accessibility.AccessibilityEvent: void <clinit>()>","<android.view.accessibility.AccessibilityEvent: void <clinit>()>"
"<java.nio.IntBuffer: int get()>","<java.nio.IntBuffer: int get()>"
"<android.hardware.camera2.MultiResolutionImageReader: void flush()>","<android.hardware.camera2.MultiResolutionImageReader: void flush()>"
"<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)>","<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)>"
"<android.view.View: boolean isDrawingCacheEnabled()>","<android.view.View: boolean isDrawingCacheEnabled()>"
"<android.content.res.Resources: int getColor(int)>","<android.content.res.Resources: int getColor(int)>"
"<java.util.AbstractQueue: void <init>()>","<java.util.AbstractQueue: void <init>()>"
"<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.io.PrintStream: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.app.Activity: void startManagingCursor(android.database.Cursor)>","<android.app.Activity: void startManagingCursor(android.database.Cursor)>"
"<android.view.View: float getTranslationZ()>","<android.view.View: float getTranslationZ()>"
"<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>","<android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>"
"<android.os.CombinedVibration$ParallelCombination: void <init>()>","<android.os.CombinedVibration$ParallelCombination: void <init>()>"
"<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>","<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>"
"<java.nio.IntBuffer: java.nio.Buffer rewind()>","<java.nio.IntBuffer: java.nio.Buffer rewind()>"
"<android.content.pm.ProviderInfo: void <init>()>","<android.content.pm.ProviderInfo: void <init>()>"
"<android.telephony.PhoneStateListener: void onActiveDataSubscriptionIdChanged(int)>","<android.telephony.PhoneStateListener: void onActiveDataSubscriptionIdChanged(int)>"
"<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>","<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)>"
"<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>","<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.Instant toInstant()>","<java.time.chrono.ChronoZonedDateTime: java.time.Instant toInstant()>"
"<android.media.session.PlaybackState: void writeToParcel(android.os.Parcel,int)>","<android.media.session.PlaybackState: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: void parallelSort(char[])>","<java.util.Arrays: void parallelSort(char[])>"
"<android.app.Activity: boolean requestWindowFeature(int)>","<android.app.Activity: boolean requestWindowFeature(int)>"
"<android.view.Choreographer$VsyncCallback: void onVsync(android.view.Choreographer$FrameData)>","<android.view.Choreographer$VsyncCallback: void onVsync(android.view.Choreographer$FrameData)>"
"<android.app.Application: void <init>()>","<android.app.Application: void <init>()>"
"<android.content.ContextWrapper: void <init>(android.content.Context)>","<android.content.ContextWrapper: void <init>(android.content.Context)>"
"<java.lang.StringBuffer: void trimToSize()>","<java.lang.StringBuffer: void trimToSize()>"
"<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>","<java.io.PrintWriter: void <init>(java.lang.String,java.lang.String)>"
"<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.view.KeyEvent: void <init>(int,int)>","<android.view.KeyEvent: void <init>(int,int)>"
"<android.view.View: float getRotationX()>","<android.view.View: float getRotationX()>"
"<android.os.Vibrator: void vibrate(long)>","<android.os.Vibrator: void vibrate(long)>"
"<android.view.textclassifier.ConversationActions$Message$Builder: void <init>(android.app.Person)>","<android.view.textclassifier.ConversationActions$Message$Builder: void <init>(android.app.Person)>"
"<java.util.stream.Collector$Characteristics: void <init>(java.lang.String,int)>","<java.util.stream.Collector$Characteristics: void <init>(java.lang.String,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>","<java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>"
"<android.graphics.Canvas: void translate(float,float)>","<android.graphics.Canvas: void translate(float,float)>"
"<android.media.AudioTrack: void finalize()>","<android.media.AudioTrack: void finalize()>"
"<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>","<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>"
"<android.hardware.camera2.CameraExtensionCharacteristics: java.util.Set getAvailableCaptureResultKeys(int)>","<android.hardware.camera2.CameraExtensionCharacteristics: java.util.Set getAvailableCaptureResultKeys(int)>"
"<android.util.ArrayMap: boolean containsValue(java.lang.Object)>","<android.util.ArrayMap: boolean containsValue(java.lang.Object)>"
"<android.media.VolumeShaper: void <init>()>","<android.media.VolumeShaper: void <init>()>"
"<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakWordStyle(int)>","<android.graphics.text.LineBreakConfig$Builder: android.graphics.text.LineBreakConfig$Builder setLineBreakWordStyle(int)>"
"<java.util.OptionalInt: void ifPresent(java.util.function.IntConsumer)>","<java.util.OptionalInt: void ifPresent(java.util.function.IntConsumer)>"
"<android.view.Window: void setContainer(android.view.Window)>","<android.view.Window: void setContainer(android.view.Window)>"
"<android.media.AudioDeviceInfo: int getType()>","<android.media.AudioDeviceInfo: int getType()>"
"<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,int)>","<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,int)>"
"<java.util.Date: void <init>(int,int,int,int,int,int)>","<java.util.Date: void <init>(int,int,int,int,int,int)>"
"<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession: void sendSessionEvent(java.lang.String,android.os.Bundle)>"
"<android.os.Message: java.lang.Runnable getCallback()>","<android.os.Message: java.lang.Runnable getCallback()>"
"<android.view.translation.TranslationCapability: int getSupportedTranslationFlags()>","<android.view.translation.TranslationCapability: int getSupportedTranslationFlags()>"
"<java.io.PrintStream: void print(java.lang.String)>","<java.io.PrintStream: void print(java.lang.String)>"
"<java.util.stream.Stream: java.util.stream.Stream empty()>","<java.util.stream.Stream: java.util.stream.Stream empty()>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectTop(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectTop(android.graphics.Rect)>"
"<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>","<android.media.PlaybackParams: android.media.PlaybackParams setSpeed(float)>"
"<java.util.stream.BaseStream: boolean isParallel()>","<java.util.stream.BaseStream: boolean isParallel()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setSlant(int)>"
"<android.graphics.RecordingCanvas: void disableZ()>","<android.graphics.RecordingCanvas: void disableZ()>"
"<java.util.Deque: void addLast(java.lang.Object)>","<java.util.Deque: void addLast(java.lang.Object)>"
"<android.transition.Transition: void captureEndValues(android.transition.TransitionValues)>","<android.transition.Transition: void captureEndValues(android.transition.TransitionValues)>"
"<java.util.function.IntPredicate: boolean test(int)>","<java.util.function.IntPredicate: boolean test(int)>"
"<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>","<android.text.method.KeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>"
"<java.security.Provider$Service: void <init>(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)>","<java.security.Provider$Service: void <init>(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.Map)>"
"<java.util.concurrent.TimeUnit: long toHours(long)>","<java.util.concurrent.TimeUnit: long toHours(long)>"
"<java.lang.String: java.lang.String valueOf(char[],int,int)>","<java.lang.String: java.lang.String valueOf(char[],int,int)>"
"<android.widget.TextView: int getCompoundPaddingEnd()>","<android.widget.TextView: int getCompoundPaddingEnd()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIconAttribute(int)>"
"<android.content.pm.FeatureInfo: void <init>()>","<android.content.pm.FeatureInfo: void <init>()>"
"<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()>","<android.telephony.TelephonyManager: boolean isDataRoamingEnabled()>"
"<android.widget.TextView: int getSelectionStart()>","<android.widget.TextView: int getSelectionStart()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultHardwareBufferFormat(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setDefaultHardwareBufferFormat(int)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType generic()>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType generic()>"
"<java.util.Arrays: int binarySearch(int[],int,int,int)>","<java.util.Arrays: int binarySearch(int[],int,int,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList()>","<android.telephony.TelephonyManager: java.util.Map getEmergencyNumberList()>"
"<android.app.Activity: void registerForContextMenu(android.view.View)>","<android.app.Activity: void registerForContextMenu(android.view.View)>"
"<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor,long,long)>","<android.graphics.fonts.Font$Builder: void <init>(android.os.ParcelFileDescriptor,long,long)>"
"<java.lang.StringBuffer: int length()>","<java.lang.StringBuffer: int length()>"
"<android.media.MediaPlayer$OnDrmConfigHelper: void onDrmConfig(android.media.MediaPlayer)>","<android.media.MediaPlayer$OnDrmConfigHelper: void onDrmConfig(android.media.MediaPlayer)>"
"<android.net.IpSecTransform$Builder: void <init>(android.content.Context)>","<android.net.IpSecTransform$Builder: void <init>(android.content.Context)>"
"<android.view.Window$Callback: void onActionModeStarted(android.view.ActionMode)>","<android.view.Window$Callback: void onActionModeStarted(android.view.ActionMode)>"
"<android.app.Activity: void requestShowKeyboardShortcuts()>","<android.app.Activity: void requestShowKeyboardShortcuts()>"
"<java.util.UUID: int variant()>","<java.util.UUID: int variant()>"
"<android.window.SplashScreenView: void onDetachedFromWindow()>","<android.window.SplashScreenView: void onDetachedFromWindow()>"
"<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>","<android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>"
"<java.lang.VirtualMachineError: void <init>(java.lang.String)>","<java.lang.VirtualMachineError: void <init>(java.lang.String)>"
"<android.widget.RelativeLayout: android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.RelativeLayout: android.widget.RelativeLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>","<android.view.inputmethod.InputMethodManager: java.util.Map getShortcutInputMethodsAndSubtypes()>"
"<android.view.View: int getAccessibilityTraversalBefore()>","<android.view.View: int getAccessibilityTraversalBefore()>"
"<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>","<android.media.AudioFormat$Builder: android.media.AudioFormat$Builder setChannelMask(int)>"
"<android.os.VibrationEffect$Composition: void <init>()>","<android.os.VibrationEffect$Composition: void <init>()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>","<java.nio.FloatBuffer: java.nio.FloatBuffer put(float)>"
"<android.view.InputDevice: boolean isEnabled()>","<android.view.InputDevice: boolean isEnabled()>"
"<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>","<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>"
"<android.view.View: void setLeft(int)>","<android.view.View: void setLeft(int)>"
"<java.nio.ByteBuffer: boolean hasArray()>","<java.nio.ByteBuffer: boolean hasArray()>"
"<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>","<android.graphics.Typeface$CustomFallbackBuilder: void <init>(android.graphics.fonts.FontFamily)>"
"<java.util.Arrays: boolean equals(double[],int,int,double[],int,int)>","<java.util.Arrays: boolean equals(double[],int,int,double[],int,int)>"
"<android.content.Loader: void startLoading()>","<android.content.Loader: void startLoading()>"
"<java.lang.Math: long negateExact(long)>","<java.lang.Math: long negateExact(long)>"
"<java.lang.StringBuffer: void getChars(int,int,char[],int)>","<java.lang.StringBuffer: void getChars(int,int,char[],int)>"
"<java.time.OffsetTime: java.time.OffsetTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: java.time.OffsetTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)>","<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)>"
"<android.util.AttributeSet: int getAttributeNameResource(int)>","<android.util.AttributeSet: int getAttributeNameResource(int)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>"
"<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>","<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>"
"<android.graphics.BlendMode: android.graphics.BlendMode[] values()>","<android.graphics.BlendMode: android.graphics.BlendMode[] values()>"
"<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>","<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>"
"<android.widget.ListView: boolean removeFooterView(android.view.View)>","<android.widget.ListView: boolean removeFooterView(android.view.View)>"
"<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()>","<android.view.textclassifier.TextClassificationContext: java.lang.String getWidgetVersion()>"
"<java.util.PrimitiveIterator$OfLong: java.lang.Object next()>","<java.util.PrimitiveIterator$OfLong: java.lang.Object next()>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(java.util.Map)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void <init>(java.util.Map)>"
"<java.lang.Long: int hashCode()>","<java.lang.Long: int hashCode()>"
"<java.util.Locale: int hashCode()>","<java.util.Locale: int hashCode()>"
"<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>","<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>"
"<android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>","<android.view.MenuItem: android.view.MenuItem setShortcut(char,char,int,int)>"
"<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.content.pm.PackageInfo: int describeContents()>","<android.content.pm.PackageInfo: int describeContents()>"
"<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.media.AudioManager: java.util.List getActiveRecordingConfigurations()>","<android.media.AudioManager: java.util.List getActiveRecordingConfigurations()>"
"<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>","<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>"
"<android.graphics.SurfaceTexture: void releaseTexImage()>","<android.graphics.SurfaceTexture: void releaseTexImage()>"
"<android.animation.ValueAnimator: boolean unregisterDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>","<android.animation.ValueAnimator: boolean unregisterDurationScaleChangeListener(android.animation.ValueAnimator$DurationScaleChangeListener)>"
"<android.transition.Transition: java.util.List getTargetNames()>","<android.transition.Transition: java.util.List getTargetNames()>"
"<android.widget.TextView: int getBaseline()>","<android.widget.TextView: int getBaseline()>"
"<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>","<java.nio.charset.CharsetEncoder: float averageBytesPerChar()>"
"<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>","<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>","<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>"
"<android.media.AudioManager: int getPlaybackOffloadSupport(android.media.AudioFormat,android.media.AudioAttributes)>","<android.media.AudioManager: int getPlaybackOffloadSupport(android.media.AudioFormat,android.media.AudioAttributes)>"
"<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>","<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>"
"<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence)>","<android.text.Editable: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>","<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>"
"<java.util.Set: boolean removeAll(java.util.Collection)>","<java.util.Set: boolean removeAll(java.util.Collection)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationZ(float)>"
"<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()>","<android.view.textclassifier.TextClassification: android.graphics.drawable.Drawable getIcon()>"
"<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>","<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>"
"<java.lang.SecurityManager: void checkRead(java.lang.String,java.lang.Object)>","<java.lang.SecurityManager: void checkRead(java.lang.String,java.lang.Object)>"
"<android.view.ViewGroup$MarginLayoutParams: void resolveLayoutDirection(int)>","<android.view.ViewGroup$MarginLayoutParams: void resolveLayoutDirection(int)>"
"<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()>","<android.hardware.Camera$Parameters: boolean getAutoWhiteBalanceLock()>"
"<java.security.SignatureException: void <init>(java.lang.Throwable)>","<java.security.SignatureException: void <init>(java.lang.Throwable)>"
"<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>","<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>"
"<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>","<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>"
"<android.app.ActivityManager: boolean clearApplicationUserData()>","<android.app.ActivityManager: boolean clearApplicationUserData()>"
"<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>","<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>"
"<android.media.session.MediaSession$Callback: void onPrepare()>","<android.media.session.MediaSession$Callback: void onPrepare()>"
"<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>","<android.text.method.MovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>"
"<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>","<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>"
"<android.content.pm.PackageInstaller$SessionInfo: int describeContents()>","<android.content.pm.PackageInstaller$SessionInfo: int describeContents()>"
"<android.app.ActionBar: void selectTab(android.app.ActionBar$Tab)>","<android.app.ActionBar: void selectTab(android.app.ActionBar$Tab)>"
"<android.view.WindowInsetsAnimation: float getInterpolatedFraction()>","<android.view.WindowInsetsAnimation: float getInterpolatedFraction()>"
"<android.widget.ListView: boolean areHeaderDividersEnabled()>","<android.widget.ListView: boolean areHeaderDividersEnabled()>"
"<java.nio.Buffer: boolean isReadOnly()>","<java.nio.Buffer: boolean isReadOnly()>"
"<android.view.View: int getMeasuredWidth()>","<android.view.View: int getMeasuredWidth()>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setSubtitle(java.lang.CharSequence)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setSubtitle(java.lang.CharSequence)>"
"<java.util.AbstractCollection: void <init>()>","<java.util.AbstractCollection: void <init>()>"
"<android.view.View: boolean isTemporarilyDetached()>","<android.view.View: boolean isTemporarilyDetached()>"
"<android.media.AudioTrack: int attachAuxEffect(int)>","<android.media.AudioTrack: int attachAuxEffect(int)>"
"<java.security.cert.CertPath: java.util.List getCertificates()>","<java.security.cert.CertPath: java.util.List getCertificates()>"
"<android.media.MediaDrm: int getOpenSessionCount()>","<android.media.MediaDrm: int getOpenSessionCount()>"
"<java.lang.InternalError: void <init>(java.lang.String)>","<java.lang.InternalError: void <init>(java.lang.String)>"
"<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()>","<android.view.textclassifier.ConversationActions: java.util.List getConversationActions()>"
"<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)>","<android.app.VoiceInteractor: boolean registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)>"
"<android.icu.util.ULocale: android.icu.util.ULocale setKeywordValue(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: android.icu.util.ULocale setKeywordValue(java.lang.String,java.lang.String)>"
"<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>","<android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>"
"<java.nio.FloatBuffer: java.lang.Object array()>","<java.nio.FloatBuffer: java.lang.Object array()>"
"<java.lang.Thread: boolean interrupted()>","<java.lang.Thread: boolean interrupted()>"
"<android.os.VibrationAttributes: boolean equals(java.lang.Object)>","<android.os.VibrationAttributes: boolean equals(java.lang.Object)>"
"<android.media.session.PlaybackState: long getLastPositionUpdateTime()>","<android.media.session.PlaybackState: long getLastPositionUpdateTime()>"
"<android.hardware.camera2.CameraCaptureSession: boolean isReprocessable()>","<android.hardware.camera2.CameraCaptureSession: boolean isReprocessable()>"
"<android.widget.Toolbar: void onLayout(boolean,int,int,int,int)>","<android.widget.Toolbar: void onLayout(boolean,int,int,int,int)>"
"<java.security.AccessControlContext: void checkPermission(java.security.Permission)>","<java.security.AccessControlContext: void checkPermission(java.security.Permission)>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>","<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>"
"<android.graphics.Matrix: void reset()>","<android.graphics.Matrix: void reset()>"
"<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>","<android.os.Parcel: android.util.ArrayMap createTypedArrayMap(android.os.Parcelable$Creator)>"
"<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)>","<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)>"
"<java.nio.channels.MembershipKey: java.net.InetAddress group()>","<java.nio.channels.MembershipKey: java.net.InetAddress group()>"
"<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashResult(android.view.displayhash.DisplayHash)>","<android.view.displayhash.DisplayHashResultCallback: void onDisplayHashResult(android.view.displayhash.DisplayHash)>"
"<java.nio.file.WatchKey: java.util.List pollEvents()>","<java.nio.file.WatchKey: java.util.List pollEvents()>"
"<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>","<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>"
"<java.lang.Thread: void destroy()>","<java.lang.Thread: void destroy()>"
"<android.view.View: void releasePointerCapture()>","<android.view.View: void releasePointerCapture()>"
"<android.os.Debug$InstructionCount: void <init>()>","<android.os.Debug$InstructionCount: void <init>()>"
"<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>","<android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)>"
"<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>","<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>"
"<android.os.BaseBundle: boolean containsKey(java.lang.String)>","<android.os.BaseBundle: boolean containsKey(java.lang.String)>"
"<android.transition.Transition: android.transition.Transition excludeChildren(android.view.View,boolean)>","<android.transition.Transition: android.transition.Transition excludeChildren(android.view.View,boolean)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean,android.graphics.ColorSpace)>"
"<android.app.Activity: android.app.LoaderManager getLoaderManager()>","<android.app.Activity: android.app.LoaderManager getLoaderManager()>"
"<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>","<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>"
"<android.widget.TextView: void onScreenStateChanged(int)>","<android.widget.TextView: void onScreenStateChanged(int)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture,int,int,android.graphics.Bitmap$Config)>"
"<java.security.cert.CertPath: java.lang.Object writeReplace()>","<java.security.cert.CertPath: java.lang.Object writeReplace()>"
"<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.Dictionary: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.util.Deque: java.lang.Object pollLast()>","<java.util.Deque: java.lang.Object pollLast()>"
"<java.nio.LongBuffer: java.nio.Buffer position(int)>","<java.nio.LongBuffer: java.nio.Buffer position(int)>"
"<java.util.List: boolean removeAll(java.util.Collection)>","<java.util.List: boolean removeAll(java.util.Collection)>"
"<android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)>","<android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)>"
"<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>","<android.os.BaseBundle: void putString(java.lang.String,java.lang.String)>"
"<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])>"
"<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>","<android.view.MenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>"
"<android.view.ViewStructure: void setMinTextEms(int)>","<android.view.ViewStructure: void setMinTextEms(int)>"
"<android.media.MediaMetadata: boolean equals(java.lang.Object)>","<android.media.MediaMetadata: boolean equals(java.lang.Object)>"
"<java.nio.ByteBuffer: java.nio.ByteOrder order()>","<java.nio.ByteBuffer: java.nio.ByteOrder order()>"
"<java.util.Set: java.util.Set of(java.lang.Object[])>","<java.util.Set: java.util.Set of(java.lang.Object[])>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,java.lang.String,android.icu.util.ULocale)>"
"<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>","<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>"
"<android.os.LocaleList: java.lang.String toLanguageTags()>","<android.os.LocaleList: java.lang.String toLanguageTags()>"
"<java.util.Spliterator$OfLong: java.util.Spliterator$OfLong trySplit()>","<java.util.Spliterator$OfLong: java.util.Spliterator$OfLong trySplit()>"
"<android.media.RemoteController: boolean sendMediaKeyEvent(android.view.KeyEvent)>","<android.media.RemoteController: boolean sendMediaKeyEvent(android.view.KeyEvent)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>"
"<java.nio.ShortBuffer: java.lang.String toString()>","<java.nio.ShortBuffer: java.lang.String toString()>"
"<android.text.Layout: int getLineEnd(int)>","<android.text.Layout: int getLineEnd(int)>"
"<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>","<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>"
"<android.view.InputDevice: int describeContents()>","<android.view.InputDevice: int describeContents()>"
"<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>","<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ActionProvider: void refreshVisibility()>","<android.view.ActionProvider: void refreshVisibility()>"
"<java.lang.Math: double log1p(double)>","<java.lang.Math: double log1p(double)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>"
"<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>","<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>"
"<android.app.Fragment: void onAttachFragment(android.app.Fragment)>","<android.app.Fragment: void onAttachFragment(android.app.Fragment)>"
"<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)>","<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted(java.lang.String)>"
"<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>","<android.hardware.camera2.CameraCharacteristics: java.lang.Object get(android.hardware.camera2.CameraCharacteristics$Key)>"
"<java.time.OffsetTime: java.time.OffsetTime minus(java.time.temporal.TemporalAmount)>","<java.time.OffsetTime: java.time.OffsetTime minus(java.time.temporal.TemporalAmount)>"
"<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>","<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>"
"<android.util.ArrayMap: boolean containsKey(java.lang.Object)>","<android.util.ArrayMap: boolean containsKey(java.lang.Object)>"
"<android.telephony.TelephonyManager: void setDataEnabledForReason(int,boolean)>","<android.telephony.TelephonyManager: void setDataEnabledForReason(int,boolean)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams build()>"
"<android.view.View: java.lang.CharSequence getTooltipText()>","<android.view.View: java.lang.CharSequence getTooltipText()>"
"<java.util.Hashtable: java.lang.Object clone()>","<java.util.Hashtable: java.lang.Object clone()>"
"<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setError(java.lang.CharSequence,android.graphics.drawable.Drawable)>"
"<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>","<android.content.pm.PackageInstaller: void unregisterSessionCallback(android.content.pm.PackageInstaller$SessionCallback)>"
"<android.graphics.drawable.BitmapDrawable: int getGravity()>","<android.graphics.drawable.BitmapDrawable: int getGravity()>"
"<android.graphics.Color: int toArgb(long)>","<android.graphics.Color: int toArgb(long)>"
"<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>","<android.hardware.Camera$Parameters: int getMaxNumFocusAreas()>"
"<android.view.SurfaceView: int getImportantForAccessibility()>","<android.view.SurfaceView: int getImportantForAccessibility()>"
"<android.view.Display: void getRectSize(android.graphics.Rect)>","<android.view.Display: void getRectSize(android.graphics.Rect)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.widget.Toolbar: void setTitleMarginEnd(int)>","<android.widget.Toolbar: void setTitleMarginEnd(int)>"
"<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)>","<android.hardware.Camera$Parameters: void setMeteringAreas(java.util.List)>"
"<android.telephony.TelephonyManager: long getMaximumCallComposerPictureSize()>","<android.telephony.TelephonyManager: long getMaximumCallComposerPictureSize()>"
"<android.graphics.Canvas: boolean clipOutPath(android.graphics.Path)>","<android.graphics.Canvas: boolean clipOutPath(android.graphics.Path)>"
"<android.widget.TextView: int getTopPaddingOffset()>","<android.widget.TextView: int getTopPaddingOffset()>"
"<android.graphics.drawable.ColorDrawable: void <init>()>","<android.graphics.drawable.ColorDrawable: void <init>()>"
"<java.lang.Character: int getNumericValue(int)>","<java.lang.Character: int getNumericValue(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isDismissable()>"
"<android.graphics.drawable.LayerDrawable: int getLayerInsetEnd(int)>","<android.graphics.drawable.LayerDrawable: int getLayerInsetEnd(int)>"
"<java.nio.ByteBuffer: long getLong(int)>","<java.nio.ByteBuffer: long getLong(int)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: int countSynonyms()>","<android.app.VoiceInteractor$PickOptionRequest$Option: int countSynonyms()>"
"<android.view.textclassifier.TextSelection$Request: void <clinit>()>","<android.view.textclassifier.TextSelection$Request: void <clinit>()>"
"<android.content.pm.PackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String)>"
"<java.nio.channels.MembershipKey: boolean isValid()>","<java.nio.channels.MembershipKey: boolean isValid()>"
"<android.transition.TransitionValues: void <init>()>","<android.transition.TransitionValues: void <init>()>"
"<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>","<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>"
"<java.lang.Long: void <init>(long)>","<java.lang.Long: void <init>(long)>"
"<android.view.WindowInsets$Type: int displayCutout()>","<android.view.WindowInsets$Type: int displayCutout()>"
"<java.nio.channels.Selector: int selectNow(java.util.function.Consumer)>","<java.nio.channels.Selector: int selectNow(java.util.function.Consumer)>"
"<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>","<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>"
"<android.hardware.lights.LightState: void <clinit>()>","<android.hardware.lights.LightState: void <clinit>()>"
"<android.view.Menu: android.view.MenuItem getItem(int)>","<android.view.Menu: android.view.MenuItem getItem(int)>"
"<android.app.PictureInPictureParams: boolean equals(java.lang.Object)>","<android.app.PictureInPictureParams: boolean equals(java.lang.Object)>"
"<android.os.Handler: void removeCallbacks(java.lang.Runnable)>","<android.os.Handler: void removeCallbacks(java.lang.Runnable)>"
"<java.time.Duration: java.lang.String toString()>","<java.time.Duration: java.lang.String toString()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>"
"<android.view.ViewParent: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>","<android.view.ViewParent: android.window.OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild(android.view.View,android.view.View)>"
"<android.util.LongSparseArray: java.lang.Object valueAt(int)>","<android.util.LongSparseArray: java.lang.Object valueAt(int)>"
"<java.net.DatagramSocketImpl: void setTimeToLive(int)>","<java.net.DatagramSocketImpl: void setTimeToLive(int)>"
"<java.util.Arrays: int hashCode(java.lang.Object[])>","<java.util.Arrays: int hashCode(java.lang.Object[])>"
"<java.time.LocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>"
"<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>","<java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)>"
"<java.io.Console: java.io.PrintWriter writer()>","<java.io.Console: java.io.PrintWriter writer()>"
"<android.app.Activity: void setFinishOnTouchOutside(boolean)>","<android.app.Activity: void setFinishOnTouchOutside(boolean)>"
"<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)>","<android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence,android.content.IntentSender)>"
"<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)>"
"<android.graphics.Canvas: boolean quickReject(float,float,float,float)>","<android.graphics.Canvas: boolean quickReject(float,float,float,float)>"
"<android.view.MotionEvent: float getOrientation(int)>","<android.view.MotionEvent: float getOrientation(int)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconBitmap(android.graphics.Bitmap)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconBitmap(android.graphics.Bitmap)>"
"<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>","<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer text(char[],int,int)>"
"<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>","<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setSafeInsets(android.graphics.Insets)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setSafeInsets(android.graphics.Insets)>"
"<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri)>","<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri)>"
"<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>","<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>"
"<java.io.PrintStream: void println(long)>","<java.io.PrintStream: void println(long)>"
"<android.graphics.ColorSpace$Rgb: float[] toLinear(float[])>","<android.graphics.ColorSpace$Rgb: float[] toLinear(float[])>"
"<java.time.chrono.Chronology: java.lang.String getId()>","<java.time.chrono.Chronology: java.lang.String getId()>"
"<android.widget.AbsListView: void onAttachedToWindow()>","<android.widget.AbsListView: void onAttachedToWindow()>"
"<android.content.res.Configuration: boolean isScreenHdr()>","<android.content.res.Configuration: boolean isScreenHdr()>"
"<android.content.SyncInfo: void <init>()>","<android.content.SyncInfo: void <init>()>"
"<android.telephony.SignalStrengthUpdateRequest: void <clinit>()>","<android.telephony.SignalStrengthUpdateRequest: void <clinit>()>"
"<android.graphics.Paint: void setARGB(int,int,int,int)>","<android.graphics.Paint: void setARGB(int,int,int,int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>"
"<android.content.pm.PackageInstaller$SessionCallback: void <init>()>","<android.content.pm.PackageInstaller$SessionCallback: void <init>()>"
"<java.time.chrono.ChronoLocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>"
"<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>","<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>"
"<android.media.session.MediaSession$Token: void writeToParcel(android.os.Parcel,int)>","<android.media.session.MediaSession$Token: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>"
"<android.content.DialogInterface$OnShowListener: void onShow(android.content.DialogInterface)>","<android.content.DialogInterface$OnShowListener: void onShow(android.content.DialogInterface)>"
"<android.app.ActionBar: void removeTabAt(int)>","<android.app.ActionBar: void removeTabAt(int)>"
"<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>","<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>"
"<java.lang.Float: int hashCode(float)>","<java.lang.Float: int hashCode(float)>"
"<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.spi.AbstractSelector: java.nio.channels.spi.SelectorProvider provider()>"
"<android.transition.Transition: java.lang.String[] getTransitionProperties()>","<android.transition.Transition: java.lang.String[] getTransitionProperties()>"
"<java.security.Provider: java.lang.Object remove(java.lang.Object)>","<java.security.Provider: java.lang.Object remove(java.lang.Object)>"
"<java.net.DatagramSocket: void <init>(int)>","<java.net.DatagramSocket: void <init>(int)>"
"<android.content.ClipData$Item: java.lang.String getHtmlText()>","<android.content.ClipData$Item: java.lang.String getHtmlText()>"
"<java.net.URLStreamHandler: void <init>()>","<java.net.URLStreamHandler: void <init>()>"
"<android.view.View: int[] getDrawableState()>","<android.view.View: int[] getDrawableState()>"
"<android.widget.TextView: void setEms(int)>","<android.widget.TextView: void setEms(int)>"
"<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>","<java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)>"
"<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>","<android.text.TextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>"
"<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>","<java.lang.reflect.AccessibleObject: void setAccessible(java.lang.reflect.AccessibleObject[],boolean)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.accessibility.AccessibilityNodeInfo)>","<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.accessibility.AccessibilityNodeInfo)>"
"<android.content.pm.PackageManager$ApplicationInfoFlags: void <init>()>","<android.content.pm.PackageManager$ApplicationInfoFlags: void <init>()>"
"<android.view.View: boolean performLongClick()>","<android.view.View: boolean performLongClick()>"
"<android.content.Intent: char getCharExtra(java.lang.String,char)>","<android.content.Intent: char getCharExtra(java.lang.String,char)>"
"<java.lang.SecurityManager: void checkSystemClipboardAccess()>","<java.lang.SecurityManager: void checkSystemClipboardAccess()>"
"<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.ExecutorService: java.lang.Object invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)>"
"<android.app.Fragment: android.app.LoaderManager getLoaderManager()>","<android.app.Fragment: android.app.LoaderManager getLoaderManager()>"
"<android.content.ComponentName: java.lang.String flattenToShortString()>","<android.content.ComponentName: java.lang.String flattenToShortString()>"
"<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setAuthentication(android.net.IpSecAlgorithm)>","<android.net.IpSecTransform$Builder: android.net.IpSecTransform$Builder setAuthentication(android.net.IpSecAlgorithm)>"
"<android.telephony.PreciseDataConnectionState: int getTransportType()>","<android.telephony.PreciseDataConnectionState: int getTransportType()>"
"<android.view.View: float getScaleY()>","<android.view.View: float getScaleY()>"
"<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>","<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>"
"<android.view.MotionEvent: void transform(android.graphics.Matrix)>","<android.view.MotionEvent: void transform(android.graphics.Matrix)>"
"<android.media.AudioRecord$Builder: void <init>()>","<android.media.AudioRecord$Builder: void <init>()>"
"<android.content.res.Resources: android.graphics.Typeface getFont(int)>","<android.content.res.Resources: android.graphics.Typeface getFont(int)>"
"<java.nio.file.LinkOption: void <init>(java.lang.String,int)>","<java.nio.file.LinkOption: void <init>(java.lang.String,int)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>","<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>"
"<android.media.audiofx.AudioEffect$Descriptor: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.media.audiofx.AudioEffect$Descriptor: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>"
"<java.io.PrintWriter: void println(double)>","<java.io.PrintWriter: void println(double)>"
"<android.os.BaseBundle: java.lang.Object get(java.lang.String)>","<android.os.BaseBundle: java.lang.Object get(java.lang.String)>"
"<android.text.TextDirectionHeuristic: boolean isRtl(java.lang.CharSequence,int,int)>","<android.text.TextDirectionHeuristic: boolean isRtl(java.lang.CharSequence,int,int)>"
"<android.telephony.TelephonyManager: int getNetworkType()>","<android.telephony.TelephonyManager: int getNetworkType()>"
"<android.content.pm.PackageManager: void clearInstantAppCookie()>","<android.content.pm.PackageManager: void clearInstantAppCookie()>"
"<java.lang.Class: java.lang.reflect.Field[] getFields()>","<java.lang.Class: java.lang.reflect.Field[] getFields()>"
"<android.content.SharedPreferences: int getInt(java.lang.String,int)>","<android.content.SharedPreferences: int getInt(java.lang.String,int)>"
"<android.app.Person$Builder: android.app.Person$Builder setUri(java.lang.String)>","<android.app.Person$Builder: android.app.Person$Builder setUri(java.lang.String)>"
"<android.util.SparseArray: android.util.SparseArray clone()>","<android.util.SparseArray: android.util.SparseArray clone()>"
"<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>","<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>"
"<java.io.FileOutputStream: java.io.FileDescriptor getFD()>","<java.io.FileOutputStream: java.io.FileDescriptor getFD()>"
"<android.widget.Scroller: void startScroll(int,int,int,int,int)>","<android.widget.Scroller: void startScroll(int,int,int,int,int)>"
"<android.app.Activity: boolean releaseInstance()>","<android.app.Activity: boolean releaseInstance()>"
"<android.content.res.AssetManager$AssetInputStream: void reset()>","<android.content.res.AssetManager$AssetInputStream: void reset()>"
"<android.net.Network: long getNetworkHandle()>","<android.net.Network: long getNetworkHandle()>"
"<android.graphics.Bitmap: android.graphics.Color getColor(int,int)>","<android.graphics.Bitmap: android.graphics.Color getColor(int,int)>"
"<android.media.MediaPlayer: int getAudioSessionId()>","<android.media.MediaPlayer: int getAudioSessionId()>"
"<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)>","<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)>"
"<android.view.View: void setTranslationY(float)>","<android.view.View: void setTranslationY(float)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent$Builder: void <init>(int)>"
"<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute build()>","<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute build()>"
"<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Constructor: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.view.Window: void onActive()>","<android.view.Window: void onActive()>"
"<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>","<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>"
"<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>","<android.widget.ListView: void setAdapter(android.widget.ListAdapter)>"
"<java.security.Provider: java.lang.Object get(java.lang.Object)>","<java.security.Provider: java.lang.Object get(java.lang.Object)>"
"<android.view.textclassifier.TextLinks$Request: android.os.LocaleList getDefaultLocales()>","<android.view.textclassifier.TextLinks$Request: android.os.LocaleList getDefaultLocales()>"
"<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)>","<android.os.LocaleList: boolean isPseudoLocale(android.icu.util.ULocale)>"
"<java.nio.charset.CoderResult: void <clinit>()>","<java.nio.charset.CoderResult: void <clinit>()>"
"<java.util.Date: void setMinutes(int)>","<java.util.Date: void setMinutes(int)>"
"<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Fragment: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.text.ClipboardManager: boolean hasText()>","<android.text.ClipboardManager: boolean hasText()>"
"<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.translation.ViewTranslationResponse: java.util.Set getKeys()>","<android.view.translation.ViewTranslationResponse: java.util.Set getKeys()>"
"<java.lang.invoke.MethodHandle: java.lang.Object invokeExact(java.lang.Object[])>","<java.lang.invoke.MethodHandle: java.lang.Object invokeExact(java.lang.Object[])>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.view.ViewParent: void bringChildToFront(android.view.View)>","<android.view.ViewParent: void bringChildToFront(android.view.View)>"
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>","<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit[] values()>"
"<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>","<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>"
"<java.time.OffsetTime: java.time.OffsetTime of(int,int,int,int,java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime of(int,int,int,int,java.time.ZoneOffset)>"
"<java.lang.NoSuchMethodException: void <init>()>","<java.lang.NoSuchMethodException: void <init>()>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>"
"<java.util.Deque: boolean removeFirstOccurrence(java.lang.Object)>","<java.util.Deque: boolean removeFirstOccurrence(java.lang.Object)>"
"<java.net.ServerSocket: void <init>(int)>","<java.net.ServerSocket: void <init>(int)>"
"<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>","<android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources$Theme)>"
"<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>","<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>"
"<android.widget.RemoteViews: void setViewLayoutWidthAttr(int,int)>","<android.widget.RemoteViews: void setViewLayoutWidthAttr(int,int)>"
"<java.net.ServerSocket: java.lang.Object getOption(java.net.SocketOption)>","<java.net.ServerSocket: java.lang.Object getOption(java.net.SocketOption)>"
"<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>","<android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)>"
"<android.graphics.drawable.ColorDrawable: int getAlpha()>","<android.graphics.drawable.ColorDrawable: int getAlpha()>"
"<android.view.Surface: void <init>(android.view.SurfaceControl)>","<android.view.Surface: void <init>(android.view.SurfaceControl)>"
"<android.app.Activity: void <init>()>","<android.app.Activity: void <init>()>"
"<android.view.textclassifier.TextLanguage: java.lang.String toString()>","<android.view.textclassifier.TextLanguage: java.lang.String toString()>"
"<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)>","<android.telephony.TelephonyManager: java.lang.String sendEnvelopeWithStatus(java.lang.String)>"
"<java.util.stream.BaseStream: java.util.Spliterator spliterator()>","<java.util.stream.BaseStream: java.util.Spliterator spliterator()>"
"<android.view.LayoutInflater: void <init>(android.content.Context)>","<android.view.LayoutInflater: void <init>(android.content.Context)>"
"<android.view.Menu: android.view.SubMenu addSubMenu(int)>","<android.view.Menu: android.view.SubMenu addSubMenu(int)>"
"<android.telephony.CellIdentity: void <clinit>()>","<android.telephony.CellIdentity: void <clinit>()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>"
"<android.view.ViewGroup: void clearChildFocus(android.view.View)>","<android.view.ViewGroup: void clearChildFocus(android.view.View)>"
"<android.transition.Transition: android.graphics.Rect getEpicenter()>","<android.transition.Transition: android.graphics.Rect getEpicenter()>"
"<android.view.Window: void setUiOptions(int,int)>","<android.view.Window: void setUiOptions(int,int)>"
"<android.content.IntentFilter: int countDataPaths()>","<android.content.IntentFilter: int countDataPaths()>"
"<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>","<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>"
"<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.os.Message)>","<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.os.Message)>"
"<java.util.regex.Matcher: java.lang.String group()>","<java.util.regex.Matcher: java.lang.String group()>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseXorAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndBitwiseXorAcquire(java.lang.Object[])>"
"<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)>","<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)>"
"<android.view.View: void setLabelFor(int)>","<android.view.View: void setLabelFor(int)>"
"<android.widget.TextView: java.lang.String getPrivateImeOptions()>","<android.widget.TextView: java.lang.String getPrivateImeOptions()>"
"<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>","<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)>"
"<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)>","<android.graphics.Typeface$Builder: void <init>(java.io.FileDescriptor)>"
"<android.view.Choreographer$FrameTimeline: long getDeadlineNanos()>","<android.view.Choreographer$FrameTimeline: long getDeadlineNanos()>"
"<android.widget.TextView: void setHorizontallyScrolling(boolean)>","<android.widget.TextView: void setHorizontallyScrolling(boolean)>"
"<java.lang.Number: int intValue()>","<java.lang.Number: int intValue()>"
"<java.lang.StackTraceElement: java.lang.String getMethodName()>","<java.lang.StackTraceElement: java.lang.String getMethodName()>"
"<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket()>","<android.net.IpSecManager: android.net.IpSecManager$UdpEncapsulationSocket openUdpEncapsulationSocket()>"
"<android.media.MediaFormat: long getLong(java.lang.String,long)>","<android.media.MediaFormat: long getLong(java.lang.String,long)>"
"<java.time.temporal.ValueRange: boolean isValidValue(long)>","<java.time.temporal.ValueRange: boolean isValidValue(long)>"
"<android.widget.FrameLayout: void onMeasure(int,int)>","<android.widget.FrameLayout: void onMeasure(int,int)>"
"<java.util.Arrays: int[] copyOfRange(int[],int,int)>","<java.util.Arrays: int[] copyOfRange(int[],int,int)>"
"<android.text.Layout: int getOffsetToRightOf(int)>","<android.text.Layout: int getOffsetToRightOf(int)>"
"<java.security.Permission: java.lang.String getName()>","<java.security.Permission: java.lang.String getName()>"
"<android.view.Display: void <init>()>","<android.view.Display: void <init>()>"
"<java.security.Key: java.lang.String getFormat()>","<java.security.Key: java.lang.String getFormat()>"
"<android.media.session.MediaSession$Token: int hashCode()>","<android.media.session.MediaSession$Token: int hashCode()>"
"<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)>","<android.content.ContentProviderClient: android.net.Uri uncanonicalize(android.net.Uri)>"
"<android.graphics.Path$FillType: android.graphics.Path$FillType[] values()>","<android.graphics.Path$FillType: android.graphics.Path$FillType[] values()>"
"<java.util.Set: boolean retainAll(java.util.Collection)>","<java.util.Set: boolean retainAll(java.util.Collection)>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle withVarargs(boolean)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle withVarargs(boolean)>"
"<java.nio.ShortBuffer: java.nio.Buffer limit(int)>","<java.nio.ShortBuffer: java.nio.Buffer limit(int)>"
"<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>","<android.text.method.TransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>"
"<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: void <init>(int)>","<android.view.textclassifier.TextClassifierEvent$LanguageDetectionEvent$Builder: void <init>(int)>"
"<android.view.WindowInsetsAnimationControlListener: void onFinished(android.view.WindowInsetsAnimationController)>","<android.view.WindowInsetsAnimationControlListener: void onFinished(android.view.WindowInsetsAnimationController)>"
"<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>","<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>"
"<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>","<android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>"
"<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>","<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>"
"<java.io.FileOutputStream: void write(byte[],int,int)>","<java.io.FileOutputStream: void write(byte[],int,int)>"
"<android.util.ArrayMap: int indexOfKey(java.lang.Object)>","<android.util.ArrayMap: int indexOfKey(java.lang.Object)>"
"<android.content.Intent$ShortcutIconResource: void <clinit>()>","<android.content.Intent$ShortcutIconResource: void <clinit>()>"
"<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.widget.AbsListView$LayoutParams: void <init>(int,int)>","<android.widget.AbsListView$LayoutParams: void <init>(int,int)>"
"<java.lang.invoke.VarHandle: void <init>()>","<java.lang.invoke.VarHandle: void <init>()>"
"<android.media.Spatializer: void addOnSpatializerStateChangedListener(java.util.concurrent.Executor,android.media.Spatializer$OnSpatializerStateChangedListener)>","<android.media.Spatializer: void addOnSpatializerStateChangedListener(java.util.concurrent.Executor,android.media.Spatializer$OnSpatializerStateChangedListener)>"
"<android.view.ViewManager: void removeView(android.view.View)>","<android.view.ViewManager: void removeView(android.view.View)>"
"<android.media.Session2Token: int getType()>","<android.media.Session2Token: int getType()>"
"<android.widget.Adapter: boolean hasStableIds()>","<android.widget.Adapter: boolean hasStableIds()>"
"<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()>","<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri getOriginatingUri()>"
"<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>","<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>"
"<java.io.File: java.io.File[] listRoots()>","<java.io.File: java.io.File[] listRoots()>"
"<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>","<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>"
"<android.view.InputEvent: android.view.InputDevice getDevice()>","<android.view.InputEvent: android.view.InputDevice getDevice()>"
"<android.view.accessibility.AccessibilityEvent: void setSpeechStateChangeTypes(int)>","<android.view.accessibility.AccessibilityEvent: void setSpeechStateChangeTypes(int)>"
"<android.telephony.ServiceState: void <init>(android.os.Parcel)>","<android.telephony.ServiceState: void <init>(android.os.Parcel)>"
"<android.content.Intent: int fillIn(android.content.Intent,int)>","<android.content.Intent: int fillIn(android.content.Intent,int)>"
"<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>","<android.util.AttributeSet: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTextSelectable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setTextSelectable(boolean)>"
"<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()>","<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()>"
"<android.graphics.drawable.LayerDrawable: int getAlpha()>","<android.graphics.drawable.LayerDrawable: int getAlpha()>"
"<android.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)>","<android.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)>"
"<java.time.zone.ZoneOffsetTransition: long toEpochSecond()>","<java.time.zone.ZoneOffsetTransition: long toEpochSecond()>"
"<android.content.IntentFilter: boolean hasCategory(java.lang.String)>","<android.content.IntentFilter: boolean hasCategory(java.lang.String)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setBreadCrumbShortTitle(int)>"
"<android.view.WindowInsets: void <init>(android.view.WindowInsets)>","<android.view.WindowInsets: void <init>(android.view.WindowInsets)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusWeeks(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusWeeks(long)>"
"<android.app.PictureInPictureParams: void <init>()>","<android.app.PictureInPictureParams: void <init>()>"
"<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>","<android.content.pm.PackageManager: java.util.List getSharedLibraries(int)>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setSelectionRange(int,int)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder setSelectionRange(int,int)>"
"<java.util.function.DoubleFunction: java.lang.Object apply(double)>","<java.util.function.DoubleFunction: java.lang.Object apply(double)>"
"<android.widget.AdapterView: void removeAllViews()>","<android.widget.AdapterView: void removeAllViews()>"
"<android.graphics.fonts.Font: java.io.File getFile()>","<android.graphics.fonts.Font: java.io.File getFile()>"
"<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>","<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>"
"<java.lang.System: java.lang.String getProperty(java.lang.String)>","<java.lang.System: java.lang.String getProperty(java.lang.String)>"
"<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>","<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>"
"<android.app.Activity: int getVolumeControlStream()>","<android.app.Activity: int getVolumeControlStream()>"
"<java.nio.channels.SocketChannel: boolean isConnectionPending()>","<java.nio.channels.SocketChannel: boolean isConnectionPending()>"
"<android.view.accessibility.AccessibilityEvent: int getSpeechStateChangeTypes()>","<android.view.accessibility.AccessibilityEvent: int getSpeechStateChangeTypes()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>"
"<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getRangeUnit()>","<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getRangeUnit()>"
"<android.content.ClipData: void <init>(android.content.ClipData)>","<android.content.ClipData: void <init>(android.content.ClipData)>"
"<android.view.textclassifier.TextSelection$Request: int describeContents()>","<android.view.textclassifier.TextSelection$Request: int describeContents()>"
"<java.util.List: java.util.List of()>","<java.util.List: java.util.List of()>"
"<android.view.View: void setRight(int)>","<android.view.View: void setRight(int)>"
"<java.net.URL: java.lang.String toExternalForm()>","<java.net.URL: java.lang.String toExternalForm()>"
"<java.time.LocalDateTime: int getNano()>","<java.time.LocalDateTime: int getNano()>"
"<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>","<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>"
"<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>","<android.view.View: void setBackgroundTintList(android.content.res.ColorStateList)>"
"<java.lang.Character: boolean isDefined(char)>","<java.lang.Character: boolean isDefined(char)>"
"<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.hardware.Camera$Parameters: void setRotation(int)>","<android.hardware.Camera$Parameters: void setRotation(int)>"
"<android.view.ViewGroup: void setLayoutMode(int)>","<android.view.ViewGroup: void setLayoutMode(int)>"
"<android.telephony.BarringInfo: android.telephony.BarringInfo$BarringServiceInfo getBarringServiceInfo(int)>","<android.telephony.BarringInfo: android.telephony.BarringInfo$BarringServiceInfo getBarringServiceInfo(int)>"
"<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>","<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>"
"<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()>","<android.view.SurfaceControlViewHost: android.view.SurfaceControlViewHost$SurfacePackage getSurfacePackage()>"
"<android.app.ActivityManager$AppTask: void moveToFront()>","<android.app.ActivityManager$AppTask: void moveToFront()>"
"<android.widget.AbsListView: boolean isTextFilterEnabled()>","<android.widget.AbsListView: boolean isTextFilterEnabled()>"
"<android.telecom.PhoneAccountHandle: void <clinit>()>","<android.telecom.PhoneAccountHandle: void <clinit>()>"
"<java.lang.ref.Reference: void <init>()>","<java.lang.ref.Reference: void <init>()>"
"<android.view.KeyEvent: char getDisplayLabel()>","<android.view.KeyEvent: char getDisplayLabel()>"
"<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>"
"<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>","<java.util.Collections: java.util.SortedMap synchronizedSortedMap(java.util.SortedMap)>"
"<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>","<java.nio.charset.CharsetEncoder: boolean canEncode(java.lang.CharSequence)>"
"<android.graphics.Path: void <init>(android.graphics.Path)>","<android.graphics.Path: void <init>(android.graphics.Path)>"
"<java.lang.ThreadGroup: void resume()>","<java.lang.ThreadGroup: void resume()>"
"<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>","<android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>"
"<android.view.View: boolean isInTouchMode()>","<android.view.View: boolean isInTouchMode()>"
"<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named valueOf(java.lang.String)>","<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named valueOf(java.lang.String)>"
"<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Secure: boolean isLocationProviderEnabled(android.content.ContentResolver,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>","<android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int,android.os.Bundle)>"
"<android.media.AudioManager: void unregisterRemoteController(android.media.RemoteController)>","<android.media.AudioManager: void unregisterRemoteController(android.media.RemoteController)>"
"<android.view.accessibility.AccessibilityRecord: int getFromIndex()>","<android.view.accessibility.AccessibilityRecord: int getFromIndex()>"
"<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>","<java.net.Socket: void setSocketImplFactory(java.net.SocketImplFactory)>"
"<android.view.accessibility.AccessibilityRecord: java.util.List getText()>","<android.view.accessibility.AccessibilityRecord: java.util.List getText()>"
"<java.time.temporal.TemporalUnit: java.time.Duration getDuration()>","<java.time.temporal.TemporalUnit: java.time.Duration getDuration()>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>"
"<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>","<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>"
"<android.hardware.Camera$PictureCallback: void onPictureTaken(byte[],android.hardware.Camera)>","<android.hardware.Camera$PictureCallback: void onPictureTaken(byte[],android.hardware.Camera)>"
"<java.io.FileInputStream: java.io.FileDescriptor getFD()>","<java.io.FileInputStream: java.io.FileDescriptor getFD()>"
"<android.app.Person$Builder: android.app.Person$Builder setKey(java.lang.String)>","<android.app.Person$Builder: android.app.Person$Builder setKey(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>","<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>"
"<java.net.Socket: java.nio.channels.SocketChannel getChannel()>","<java.net.Socket: java.nio.channels.SocketChannel getChannel()>"
"<android.net.IpSecAlgorithm: void <init>(java.lang.String,byte[])>","<android.net.IpSecAlgorithm: void <init>(java.lang.String,byte[])>"
"<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>","<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>"
"<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera)>","<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera)>"
"<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>","<android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)>"
"<android.net.Uri: java.lang.String getEncodedUserInfo()>","<android.net.Uri: java.lang.String getEncodedUserInfo()>"
"<java.lang.Thread: void setPriority(int)>","<java.lang.Thread: void setPriority(int)>"
"<android.media.VolumeShaper$Configuration: boolean equals(java.lang.Object)>","<android.media.VolumeShaper$Configuration: boolean equals(java.lang.Object)>"
"<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>","<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>"
"<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()>","<android.media.AudioTrack: android.media.AudioAttributes getAudioAttributes()>"
"<java.util.stream.DoubleStream: double[] toArray()>","<java.util.stream.DoubleStream: double[] toArray()>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: void <init>(android.content.ComponentName,int,int)>","<android.content.pm.PackageManager$ComponentEnabledSetting: void <init>(android.content.ComponentName,int,int)>"
"<android.media.MediaDrm: void setOnKeyStatusChangeListener(java.util.concurrent.Executor,android.media.MediaDrm$OnKeyStatusChangeListener)>","<android.media.MediaDrm: void setOnKeyStatusChangeListener(java.util.concurrent.Executor,android.media.MediaDrm$OnKeyStatusChangeListener)>"
"<java.security.Provider: java.util.Collection values()>","<java.security.Provider: java.util.Collection values()>"
"<android.view.textclassifier.TextLinks$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLinks$Request: android.os.Bundle getExtras()>"
"<android.view.MotionEvent: float getHistoricalTouchMinor(int)>","<android.view.MotionEvent: float getHistoricalTouchMinor(int)>"
"<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>","<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>"
"<android.graphics.Paint: long getColorLong()>","<android.graphics.Paint: long getColorLong()>"
"<android.util.SparseBooleanArray: java.lang.String toString()>","<android.util.SparseBooleanArray: java.lang.String toString()>"
"<java.lang.String: java.lang.String valueOf(float)>","<java.lang.String: java.lang.String valueOf(float)>"
"<android.app.Activity: int getTaskId()>","<android.app.Activity: int getTaskId()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double)>","<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double)>"
"<java.nio.Buffer: int remaining()>","<java.nio.Buffer: int remaining()>"
"<java.util.Spliterator: boolean tryAdvance(java.util.function.Consumer)>","<java.util.Spliterator: boolean tryAdvance(java.util.function.Consumer)>"
"<android.view.PointerIcon: int describeContents()>","<android.view.PointerIcon: int describeContents()>"
"<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequest()>","<android.media.MediaDrm: android.media.MediaDrm$ProvisionRequest getProvisionRequest()>"
"<java.util.Iterator: void remove()>","<java.util.Iterator: void remove()>"
"<android.view.Window: android.view.View peekDecorView()>","<android.view.Window: android.view.View peekDecorView()>"
"<java.time.OffsetTime: void <clinit>()>","<java.time.OffsetTime: void <clinit>()>"
"<java.util.Date: int compareTo(java.util.Date)>","<java.util.Date: int compareTo(java.util.Date)>"
"<java.net.URL: int getPort()>","<java.net.URL: int getPort()>"
"<java.lang.String: java.lang.String valueOf(double)>","<java.lang.String: java.lang.String valueOf(double)>"
"<android.view.View: void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)>"
"<android.view.View: void postInvalidateDelayed(long)>","<android.view.View: void postInvalidateDelayed(long)>"
"<java.util.stream.Collector: java.util.Set characteristics()>","<java.util.stream.Collector: java.util.Set characteristics()>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>"
"<android.view.WindowInsets: boolean hasInsets()>","<android.view.WindowInsets: boolean hasInsets()>"
"<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>","<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock of(char)>"
"<android.content.pm.ConfigurationInfo: void <init>()>","<android.content.pm.ConfigurationInfo: void <init>()>"
"<android.database.Cursor: int getCount()>","<android.database.Cursor: int getCount()>"
"<android.view.ViewStructure: void setChildCount(int)>","<android.view.ViewStructure: void setChildCount(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot(int)>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getRoot(int)>"
"<java.time.LocalTime: java.time.OffsetTime atOffset(java.time.ZoneOffset)>","<java.time.LocalTime: java.time.OffsetTime atOffset(java.time.ZoneOffset)>"
"<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>","<java.util.PrimitiveIterator$OfInt: java.lang.Integer next()>"
"<java.nio.ByteBuffer: double getDouble()>","<java.nio.ByteBuffer: double getDouble()>"
"<java.time.OffsetDateTime: java.lang.String toString()>","<java.time.OffsetDateTime: java.lang.String toString()>"
"<android.widget.RelativeLayout: int getGravity()>","<android.widget.RelativeLayout: int getGravity()>"
"<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>","<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>"
"<java.text.FieldPosition: void <init>(int)>","<java.text.FieldPosition: void <init>(int)>"
"<java.net.Socket: java.lang.Object getOption(java.net.SocketOption)>","<java.net.Socket: java.lang.Object getOption(java.net.SocketOption)>"
"<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>","<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setExtras(android.os.Bundle)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setExtras(android.os.Bundle)>"
"<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.widget.ListView: void onFinishInflate()>","<android.widget.ListView: void onFinishInflate()>"
"<java.time.LocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>"
"<android.view.View: void setWillNotDraw(boolean)>","<android.view.View: void setWillNotDraw(boolean)>"
"<android.view.Window: boolean getSharedElementsUseOverlay()>","<android.view.Window: boolean getSharedElementsUseOverlay()>"
"<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>","<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>"
"<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>","<java.nio.file.attribute.BasicFileAttributes: boolean isDirectory()>"
"<android.content.res.loader.ResourcesProvider: void <init>()>","<android.content.res.loader.ResourcesProvider: void <init>()>"
"<java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>","<java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>"
"<android.app.ActionBar: int getNavigationItemCount()>","<android.app.ActionBar: int getNavigationItemCount()>"
"<java.util.NavigableMap: java.lang.Object higherKey(java.lang.Object)>","<java.util.NavigableMap: java.lang.Object higherKey(java.lang.Object)>"
"<android.hardware.camera2.TotalCaptureResult: void <init>()>","<android.hardware.camera2.TotalCaptureResult: void <init>()>"
"<java.io.PrintStream: void println(char[])>","<java.io.PrintStream: void println(char[])>"
"<android.view.View: void setPreferKeepClearRects(java.util.List)>","<android.view.View: void setPreferKeepClearRects(java.util.List)>"
"<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>","<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>"
"<android.view.ViewPropertyAnimator: long getDuration()>","<android.view.ViewPropertyAnimator: long getDuration()>"
"<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>","<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()>","<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()>"
"<android.widget.TextView: android.view.autofill.AutofillValue getAutofillValue()>","<android.widget.TextView: android.view.autofill.AutofillValue getAutofillValue()>"
"<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>","<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>"
"<android.content.Intent$ShortcutIconResource: int describeContents()>","<android.content.Intent$ShortcutIconResource: int describeContents()>"
"<android.graphics.SurfaceTexture: void finalize()>","<android.graphics.SurfaceTexture: void finalize()>"
"<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>","<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>"
"<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.app.PictureInPictureUiState: boolean equals(java.lang.Object)>","<android.app.PictureInPictureUiState: boolean equals(java.lang.Object)>"
"<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>","<android.text.method.MovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>"
"<android.telephony.PreciseDataConnectionState: android.telephony.data.ApnSetting getApnSetting()>","<android.telephony.PreciseDataConnectionState: android.telephony.data.ApnSetting getApnSetting()>"
"<android.app.AlertDialog: void onCreate(android.os.Bundle)>","<android.app.AlertDialog: void onCreate(android.os.Bundle)>"
"<android.content.pm.PackageManager: boolean setAutoRevokeWhitelisted(java.lang.String,boolean)>","<android.content.pm.PackageManager: boolean setAutoRevokeWhitelisted(java.lang.String,boolean)>"
"<android.view.Window$Callback: boolean onSearchRequested(android.view.SearchEvent)>","<android.view.Window$Callback: boolean onSearchRequested(android.view.SearchEvent)>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
"<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>","<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)>"
"<android.app.Fragment: void onPause()>","<android.app.Fragment: void onPause()>"
"<android.graphics.drawable.LayerDrawable: boolean hasFocusStateSpecified()>","<android.graphics.drawable.LayerDrawable: boolean hasFocusStateSpecified()>"
"<android.os.Vibrator: void <init>()>","<android.os.Vibrator: void <init>()>"
"<android.view.ViewGroup: boolean getClipChildren()>","<android.view.ViewGroup: boolean getClipChildren()>"
"<android.view.ViewGroup: void debug(int)>","<android.view.ViewGroup: void debug(int)>"
"<android.media.MediaDrm$CryptoSession: byte[] decrypt(byte[],byte[],byte[])>","<android.media.MediaDrm$CryptoSession: byte[] decrypt(byte[],byte[],byte[])>"
"<android.widget.AbsListView: int getLeftPaddingOffset()>","<android.widget.AbsListView: int getLeftPaddingOffset()>"
"<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.ScatteringByteChannel: long read(java.nio.ByteBuffer[])>"
"<android.graphics.BitmapFactory$Options: void requestCancelDecode()>","<android.graphics.BitmapFactory$Options: void requestCancelDecode()>"
"<android.media.MediaDrm: boolean requiresSecureDecoder(java.lang.String,int)>","<android.media.MediaDrm: boolean requiresSecureDecoder(java.lang.String,int)>"
"<android.view.MenuItem: android.view.MenuItem setTitle(int)>","<android.view.MenuItem: android.view.MenuItem setTitle(int)>"
"<android.view.View: void requestFitSystemWindows()>","<android.view.View: void requestFitSystemWindows()>"
"<android.net.Network: void bindSocket(java.net.DatagramSocket)>","<android.net.Network: void bindSocket(java.net.DatagramSocket)>"
"<android.media.AudioPlaybackCaptureConfiguration$Builder: void <init>(android.media.projection.MediaProjection)>","<android.media.AudioPlaybackCaptureConfiguration$Builder: void <init>(android.media.projection.MediaProjection)>"
"<java.nio.channels.SelectionKey: int interestOpsAnd(int)>","<java.nio.channels.SelectionKey: int interestOpsAnd(int)>"
"<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>","<android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)>"
"<java.lang.AutoCloseable: void close()>","<java.lang.AutoCloseable: void close()>"
"<java.lang.Character: int toCodePoint(char,char)>","<java.lang.Character: int toCodePoint(char,char)>"
"<java.time.LocalDateTime: int getMonthValue()>","<java.time.LocalDateTime: int getMonthValue()>"
"<android.view.View: float getElevation()>","<android.view.View: float getElevation()>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setText(java.lang.CharSequence)>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue$Builder setText(java.lang.CharSequence)>"
"<java.net.DatagramSocket: int getReceiveBufferSize()>","<java.net.DatagramSocket: int getReceiveBufferSize()>"
"<android.content.AttributionSource: android.content.AttributionSource getNext()>","<android.content.AttributionSource: android.content.AttributionSource getNext()>"
"<java.io.FileInputStream: int read(byte[])>","<java.io.FileInputStream: int read(byte[])>"
"<android.database.ContentObserver: void dispatchChange(boolean)>","<android.database.ContentObserver: void dispatchChange(boolean)>"
"<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)>","<android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)>"
"<android.graphics.Paint: void getFontMetricsInt(java.lang.CharSequence,int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>","<android.graphics.Paint: void getFontMetricsInt(java.lang.CharSequence,int,int,int,int,boolean,android.graphics.Paint$FontMetricsInt)>"
"<java.time.chrono.Chronology: int compareTo(java.time.chrono.Chronology)>","<java.time.chrono.Chronology: int compareTo(java.time.chrono.Chronology)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(double)>","<java.lang.StringBuilder: java.lang.StringBuilder append(double)>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetRelative(int,int,int,int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetRelative(int,int,int,int,int)>"
"<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>","<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>"
"<android.net.LinkProperties: java.util.List getDnsServers()>","<android.net.LinkProperties: java.util.List getDnsServers()>"
"<android.media.AudioAttributes: boolean equals(java.lang.Object)>","<android.media.AudioAttributes: boolean equals(java.lang.Object)>"
"<java.util.Collections: java.util.ListIterator emptyListIterator()>","<java.util.Collections: java.util.ListIterator emptyListIterator()>"
"<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>","<java.lang.SecurityManager: void checkPackageDefinition(java.lang.String)>"
"<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>","<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>"
"<android.transition.TransitionManager: void go(android.transition.Scene)>","<android.transition.TransitionManager: void go(android.transition.Scene)>"
"<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>","<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>"
"<java.io.Reader: boolean ready()>","<java.io.Reader: boolean ready()>"
"<android.os.Build: java.lang.String getRadioVersion()>","<android.os.Build: java.lang.String getRadioVersion()>"
"<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>","<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>"
"<android.widget.TextView: int getOffsetForPosition(float,float)>","<android.widget.TextView: int getOffsetForPosition(float,float)>"
"<android.view.InputDevice: int getId()>","<android.view.InputDevice: int getId()>"
"<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>","<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>"
"<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()>","<android.view.textclassifier.TextLinks$Request: android.view.textclassifier.TextClassifier$EntityConfig getEntityConfig()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>","<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>"
"<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue build()>","<android.view.translation.TranslationResponseValue$Builder: android.view.translation.TranslationResponseValue build()>"
"<android.view.animation.Animation: void setStartOffset(long)>","<android.view.animation.Animation: void setStartOffset(long)>"
"<android.net.IpSecManager$UdpEncapsulationSocket: java.lang.String toString()>","<android.net.IpSecManager$UdpEncapsulationSocket: java.lang.String toString()>"
"<android.content.Context: java.lang.String getOpPackageName()>","<android.content.Context: java.lang.String getOpPackageName()>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,java.time.Month,int,int,int,int,int)>"
"<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>","<android.view.inputmethod.InputContentInfo: android.content.ClipDescription getDescription()>"
"<java.io.Reader: int read()>","<java.io.Reader: int read()>"
"<android.media.MediaDrm: void removeOfflineLicense(byte[])>","<android.media.MediaDrm: void removeOfflineLicense(byte[])>"
"<android.view.textclassifier.TextLanguage$Request: void <clinit>()>","<android.view.textclassifier.TextLanguage$Request: void <clinit>()>"
"<android.graphics.ColorSpace$Rgb: float[] getInverseTransform(float[])>","<android.graphics.ColorSpace$Rgb: float[] getInverseTransform(float[])>"
"<android.widget.TextView: void onDraw(android.graphics.Canvas)>","<android.widget.TextView: void onDraw(android.graphics.Canvas)>"
"<java.nio.ByteBuffer: int compareTo(java.lang.Object)>","<java.nio.ByteBuffer: int compareTo(java.lang.Object)>"
"<android.graphics.RectF: void set(android.graphics.Rect)>","<android.graphics.RectF: void set(android.graphics.Rect)>"
"<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void <init>(android.view.View,int)>"
"<java.util.stream.LongStream$Builder: java.util.stream.LongStream$Builder add(long)>","<java.util.stream.LongStream$Builder: java.util.stream.LongStream$Builder add(long)>"
"<java.time.OffsetDateTime: int getMinute()>","<java.time.OffsetDateTime: int getMinute()>"
"<android.window.SplashScreenView: java.time.Instant getIconAnimationStart()>","<android.window.SplashScreenView: java.time.Instant getIconAnimationStart()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace(java.lang.String)>"
"<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>","<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>"
"<android.media.session.PlaybackState: android.os.Bundle getExtras()>","<android.media.session.PlaybackState: android.os.Bundle getExtras()>"
"<android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>","<android.graphics.Canvas: boolean clipOutRect(android.graphics.Rect)>"
"<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>","<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>"
"<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>","<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>"
"<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>","<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>","<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>"
"<android.view.View: java.lang.Object getTag(int)>","<android.view.View: java.lang.Object getTag(int)>"
"<android.app.ActivityManager$TaskDescription: int describeContents()>","<android.app.ActivityManager$TaskDescription: int describeContents()>"
"<android.app.ActivityManager: int getLargeMemoryClass()>","<android.app.ActivityManager: int getLargeMemoryClass()>"
"<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named[] values()>","<android.graphics.ColorSpace$Named: android.graphics.ColorSpace$Named[] values()>"
"<android.app.Dialog: android.app.ActionBar getActionBar()>","<android.app.Dialog: android.app.ActionBar getActionBar()>"
"<android.media.VolumeProvider: int getCurrentVolume()>","<android.media.VolumeProvider: int getCurrentVolume()>"
"<android.os.Bundle: void putSize(java.lang.String,android.util.Size)>","<android.os.Bundle: void putSize(java.lang.String,android.util.Size)>"
"<android.media.MediaPlayer: void setOnDrmConfigHelper(android.media.MediaPlayer$OnDrmConfigHelper)>","<android.media.MediaPlayer: void setOnDrmConfigHelper(android.media.MediaPlayer$OnDrmConfigHelper)>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>"
"<android.content.ClipDescription: long getTimestamp()>","<android.content.ClipDescription: long getTimestamp()>"
"<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>","<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>"
"<java.lang.Math: long abs(long)>","<java.lang.Math: long abs(long)>"
"<java.util.Hashtable: void replaceAll(java.util.function.BiFunction)>","<java.util.Hashtable: void replaceAll(java.util.function.BiFunction)>"
"<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>"
"<android.media.ImageReader: android.view.Surface getSurface()>","<android.media.ImageReader: android.view.Surface getSurface()>"
"<java.time.chrono.Era: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.chrono.Era: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()>","<android.widget.Toolbar: android.graphics.drawable.Drawable getOverflowIcon()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getStateDescription()>"
"<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()>","<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()>"
"<android.view.MotionEvent: int getPointerCount()>","<android.view.MotionEvent: int getPointerCount()>"
"<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>","<java.nio.file.spi.FileSystemProvider: void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])>"
"<java.util.Collections: java.util.List nCopies(int,java.lang.Object)>","<java.util.Collections: java.util.List nCopies(int,java.lang.Object)>"
"<java.lang.Float: void <init>(java.lang.String)>","<java.lang.Float: void <init>(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: boolean isHierarchical()>"
"<android.view.DragAndDropPermissions: void release()>","<android.view.DragAndDropPermissions: void release()>"
"<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.hardware.camera2.CameraDevice$StateCallback: void <init>()>","<android.hardware.camera2.CameraDevice$StateCallback: void <init>()>"
"<java.util.stream.LongStream: java.util.stream.LongStream concat(java.util.stream.LongStream,java.util.stream.LongStream)>","<java.util.stream.LongStream: java.util.stream.LongStream concat(java.util.stream.LongStream,java.util.stream.LongStream)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)>"
"<android.view.ViewTreeObserver$OnTouchModeChangeListener: void onTouchModeChanged(boolean)>","<android.view.ViewTreeObserver$OnTouchModeChangeListener: void onTouchModeChanged(boolean)>"
"<android.content.ContentResolver: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(android.view.autofill.AutofillId)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewDisappeared(android.view.autofill.AutofillId)>"
"<android.os.Parcel: void writeSize(android.util.Size)>","<android.os.Parcel: void writeSize(android.util.Size)>"
"<java.util.Arrays: void parallelSort(double[],int,int)>","<java.util.Arrays: void parallelSort(double[],int,int)>"
"<android.media.Image$Plane: int getRowStride()>","<android.media.Image$Plane: int getRowStride()>"
"<android.icu.util.ULocale: android.icu.util.ULocale forLanguageTag(java.lang.String)>","<android.icu.util.ULocale: android.icu.util.ULocale forLanguageTag(java.lang.String)>"
"<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>","<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>"
"<android.app.ActionBar$LayoutParams: void <init>(int,int)>","<android.app.ActionBar$LayoutParams: void <init>(int,int)>"
"<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>","<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>"
"<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setPlayerId(int)>","<android.hardware.lights.LightState$Builder: android.hardware.lights.LightState$Builder setPlayerId(int)>"
"<java.nio.IntBuffer: java.nio.Buffer limit(int)>","<java.nio.IntBuffer: java.nio.Buffer limit(int)>"
"<java.io.File: void <init>(java.io.File,java.lang.String)>","<java.io.File: void <init>(java.io.File,java.lang.String)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setHapticChannelsMuted(boolean)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setHapticChannelsMuted(boolean)>"
"<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>","<java.lang.reflect.Executable: java.lang.reflect.Parameter[] getParameters()>"
"<java.lang.Boolean: void <clinit>()>","<java.lang.Boolean: void <clinit>()>"
"<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>","<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)>"
"<android.animation.LayoutTransition: void disableTransitionType(int)>","<android.animation.LayoutTransition: void disableTransitionType(int)>"
"<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>","<android.transition.Transition: android.transition.Transition removeListener(android.transition.Transition$TransitionListener)>"
"<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>","<java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>"
"<android.graphics.NinePatch: void finalize()>","<android.graphics.NinePatch: void finalize()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>"
"<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>","<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path$Op)>"
"<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>","<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>"
"<android.util.Rational: void <clinit>()>","<android.util.Rational: void <clinit>()>"
"<java.nio.charset.Charset: int compareTo(java.lang.Object)>","<java.nio.charset.Charset: int compareTo(java.lang.Object)>"
"<android.widget.TextView: void onEditorAction(int)>","<android.widget.TextView: void onEditorAction(int)>"
"<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>","<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>"
"<java.net.Socket: boolean getReuseAddress()>","<java.net.Socket: boolean getReuseAddress()>"
"<java.net.ServerSocket: boolean isBound()>","<java.net.ServerSocket: boolean isBound()>"
"<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>","<java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit valueOf(java.lang.String)>"
"<android.media.MediaPlayer: void reset()>","<android.media.MediaPlayer: void reset()>"
"<android.media.AudioRecord: void finalize()>","<android.media.AudioRecord: void finalize()>"
"<android.app.Person: java.lang.String getKey()>","<android.app.Person: java.lang.String getKey()>"
"<java.security.Provider: java.lang.String getInfo()>","<java.security.Provider: java.lang.String getInfo()>"
"<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>","<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>"
"<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>","<java.lang.reflect.Array: void setByte(java.lang.Object,int,byte)>"
"<android.graphics.Picture: void <init>(android.graphics.Picture)>","<android.graphics.Picture: void <init>(android.graphics.Picture)>"
"<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>","<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>"
"<java.lang.Math: long multiplyExact(long,long)>","<java.lang.Math: long multiplyExact(long,long)>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>"
"<android.os.Handler: void removeMessages(int,java.lang.Object)>","<android.os.Handler: void removeMessages(int,java.lang.Object)>"
"<java.net.URI: java.lang.String getQuery()>","<java.net.URI: java.lang.String getQuery()>"
"<java.net.ServerSocket: void setReceiveBufferSize(int)>","<java.net.ServerSocket: void setReceiveBufferSize(int)>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>"
"<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>","<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>"
"<java.util.stream.DoubleStream: java.util.stream.Stream mapToObj(java.util.function.DoubleFunction)>","<java.util.stream.DoubleStream: java.util.stream.Stream mapToObj(java.util.function.DoubleFunction)>"
"<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>","<java.net.URLStreamHandler: boolean equals(java.net.URL,java.net.URL)>"
"<android.view.Window: android.transition.Scene getContentScene()>","<android.view.Window: android.transition.Scene getContentScene()>"
"<android.widget.AbsListView$OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>","<android.widget.AbsListView$OnScrollListener: void onScrollStateChanged(android.widget.AbsListView,int)>"
"<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>","<java.util.Spliterator$OfInt: void forEachRemaining(java.util.function.IntConsumer)>"
"<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>","<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>"
"<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>"
"<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.os.VibrationAttributes)>","<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.os.VibrationAttributes)>"
"<android.media.AudioAttributes: void <clinit>()>","<android.media.AudioAttributes: void <clinit>()>"
"<java.net.Inet4Address: boolean isMulticastAddress()>","<java.net.Inet4Address: boolean isMulticastAddress()>"
"<android.view.View: android.os.Handler getHandler()>","<android.view.View: android.os.Handler getHandler()>"
"<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>","<android.view.PixelCopy: void request(android.view.Surface,android.graphics.Rect,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>"
"<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float,float,android.graphics.RectF,float,float,android.graphics.Paint)>"
"<android.graphics.Canvas: void drawColor(int)>","<android.graphics.Canvas: void drawColor(int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>","<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>"
"<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>","<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>"
"<android.app.Dialog: void onStop()>","<android.app.Dialog: void onStop()>"
"<java.io.FileDescriptor: void <clinit>()>","<java.io.FileDescriptor: void <clinit>()>"
"<java.time.LocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>","<java.time.LocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>"
"<java.util.Map: java.lang.Object remove(java.lang.Object)>","<java.util.Map: java.lang.Object remove(java.lang.Object)>"
"<java.time.LocalTime: long toNanoOfDay()>","<java.time.LocalTime: long toNanoOfDay()>"
"<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,float[][])>"
"<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)>","<android.telephony.TelephonyManager: java.lang.String getTypeAllocationCode(int)>"
"<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>","<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>"
"<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.Context: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>"
"<java.io.PrintWriter: void print(boolean)>","<java.io.PrintWriter: void print(boolean)>"
"<android.view.contentcapture.ContentCaptureSession: android.view.autofill.AutofillId newAutofillId(android.view.autofill.AutofillId,long)>","<android.view.contentcapture.ContentCaptureSession: android.view.autofill.AutofillId newAutofillId(android.view.autofill.AutofillId,long)>"
"<android.view.inputmethod.EditorInfo: void setInitialSurroundingText(java.lang.CharSequence)>","<android.view.inputmethod.EditorInfo: void setInitialSurroundingText(java.lang.CharSequence)>"
"<android.content.pm.ModuleInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ModuleInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>"
"<java.time.LocalTime: java.time.LocalTime now(java.time.ZoneId)>","<java.time.LocalTime: java.time.LocalTime now(java.time.ZoneId)>"
"<android.view.Window: long getTransitionBackgroundFadeDuration()>","<android.view.Window: long getTransitionBackgroundFadeDuration()>"
"<java.time.format.FormatStyle: void <clinit>()>","<java.time.format.FormatStyle: void <clinit>()>"
"<android.os.Debug: void resetGlobalFreedSize()>","<android.os.Debug: void resetGlobalFreedSize()>"
"<java.net.DatagramSocket: java.util.Set supportedOptions()>","<java.net.DatagramSocket: java.util.Set supportedOptions()>"
"<android.app.ActivityManager$RunningServiceInfo: void <init>()>","<android.app.ActivityManager$RunningServiceInfo: void <init>()>"
"<android.database.Cursor: short getShort(int)>","<android.database.Cursor: short getShort(int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostSaveInstanceState(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostSaveInstanceState(android.app.Activity,android.os.Bundle)>"
"<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>","<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>"
"<java.util.AbstractList: void <init>()>","<java.util.AbstractList: void <init>()>"
"<java.time.Duration: java.time.Duration minusSeconds(long)>","<java.time.Duration: java.time.Duration minusSeconds(long)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setTransition(int)>"
"<android.widget.TextView: void setImeOptions(int)>","<android.widget.TextView: void setImeOptions(int)>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>"
"<java.util.stream.Collector: java.util.function.Function finisher()>","<java.util.stream.Collector: java.util.function.Function finisher()>"
"<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.widget.RemoteViews: void setViewLayoutMarginAttr(int,int,int)>","<android.widget.RemoteViews: void setViewLayoutMarginAttr(int,int,int)>"
"<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>","<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>"
"<android.util.ArrayMap: void <init>(int)>","<android.util.ArrayMap: void <init>(int)>"
"<android.view.Window: void setFeatureDrawableResource(int,int)>","<android.view.Window: void setFeatureDrawableResource(int,int)>"
"<java.lang.String: boolean isBlank()>","<java.lang.String: boolean isBlank()>"
"<android.content.ContextParams$Builder: android.content.ContextParams$Builder setAttributionTag(java.lang.String)>","<android.content.ContextParams$Builder: android.content.ContextParams$Builder setAttributionTag(java.lang.String)>"
"<android.content.IntentFilter: int countDataSchemes()>","<android.content.IntentFilter: int countDataSchemes()>"
"<java.io.PrintWriter: java.io.PrintWriter append(char)>","<java.io.PrintWriter: java.io.PrintWriter append(char)>"
"<java.security.Timestamp: boolean equals(java.lang.Object)>","<java.security.Timestamp: boolean equals(java.lang.Object)>"
"<android.app.PictureInPictureParams: android.util.Rational getExpandedAspectRatio()>","<android.app.PictureInPictureParams: android.util.Rational getExpandedAspectRatio()>"
"<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>","<android.util.AttributeSet: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>"
"<android.view.View$DragShadowBuilder: android.view.View getView()>","<android.view.View$DragShadowBuilder: android.view.View getView()>"
"<android.view.View: void setTranslationZ(float)>","<android.view.View: void setTranslationZ(float)>"
"<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()>","<android.app.PictureInPictureParams: android.graphics.Rect getSourceRectHint()>"
"<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponse(android.telephony.TelephonyManager,java.lang.String,java.lang.CharSequence)>","<android.telephony.TelephonyManager$UssdResponseCallback: void onReceiveUssdResponse(android.telephony.TelephonyManager,java.lang.String,java.lang.CharSequence)>"
"<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>","<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>"
"<android.graphics.Matrix: java.lang.String toString()>","<android.graphics.Matrix: java.lang.String toString()>"
"<java.lang.System: long nanoTime()>","<java.lang.System: long nanoTime()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeConverter,android.graphics.Path)>"
"<android.telephony.SignalStrength: int getEvdoSnr()>","<android.telephony.SignalStrength: int getEvdoSnr()>"
"<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>","<android.database.Cursor: void unregisterDataSetObserver(android.database.DataSetObserver)>"
"<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeChanged(java.lang.String,boolean)>","<android.hardware.camera2.CameraManager$TorchCallback: void onTorchModeChanged(java.lang.String,boolean)>"
"<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>","<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>"
"<android.graphics.fonts.Font: int hashCode()>","<android.graphics.fonts.Font: int hashCode()>"
"<android.graphics.BitmapShader: int getFilterMode()>","<android.graphics.BitmapShader: int getFilterMode()>"
"<android.media.AudioRecordingConfiguration: void writeToParcel(android.os.Parcel,int)>","<android.media.AudioRecordingConfiguration: void writeToParcel(android.os.Parcel,int)>"
"<java.nio.file.Path: java.nio.file.Path normalize()>","<java.nio.file.Path: java.nio.file.Path normalize()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>","<java.nio.channels.FileChannel: java.nio.channels.FileLock lock(long,long,boolean)>"
"<android.telephony.TelephonyManager: boolean isWorldPhone()>","<android.telephony.TelephonyManager: boolean isWorldPhone()>"
"<android.app.VoiceInteractor$Request: void onCancel()>","<android.app.VoiceInteractor$Request: void onCancel()>"
"<java.util.AbstractCollection: int size()>","<java.util.AbstractCollection: int size()>"
"<android.app.PictureInPictureParams: java.lang.String toString()>","<android.app.PictureInPictureParams: java.lang.String toString()>"
"<android.media.AudioRecordingConfiguration: int hashCode()>","<android.media.AudioRecordingConfiguration: int hashCode()>"
"<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>","<android.content.ContentResolver: void requestSync(android.content.SyncRequest)>"
"<android.view.inputmethod.EditorBoundsInfo: int describeContents()>","<android.view.inputmethod.EditorBoundsInfo: int describeContents()>"
"<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>","<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>"
"<android.net.Uri: android.net.Uri fromFile(java.io.File)>","<android.net.Uri: android.net.Uri fromFile(java.io.File)>"
"<java.nio.channels.MembershipKey: void <init>()>","<java.nio.channels.MembershipKey: void <init>()>"
"<android.os.Parcel: int[] createIntArray()>","<android.os.Parcel: int[] createIntArray()>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>"
"<android.hardware.Camera$Parameters: int getExposureCompensation()>","<android.hardware.Camera$Parameters: int getExposureCompensation()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>"
"<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>","<android.view.View: android.view.ViewOutlineProvider getOutlineProvider()>"
"<android.transition.TransitionPropagation: void captureValues(android.transition.TransitionValues)>","<android.transition.TransitionPropagation: void captureValues(android.transition.TransitionValues)>"
"<java.time.Month: int length(boolean)>","<java.time.Month: int length(boolean)>"
"<android.view.View: void setTextDirection(int)>","<android.view.View: void setTextDirection(int)>"
"<android.media.MediaPlayer: void pause()>","<android.media.MediaPlayer: void pause()>"
"<java.lang.Package: int hashCode()>","<java.lang.Package: int hashCode()>"
"<android.view.WindowInsets: int hashCode()>","<android.view.WindowInsets: int hashCode()>"
"<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>","<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>"
"<android.view.View: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>","<android.view.View: void onCreateViewTranslationRequest(int[],java.util.function.Consumer)>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureImageRequest(android.view.ScrollCaptureSession,android.os.CancellationSignal,android.graphics.Rect,java.util.function.Consumer)>","<android.view.ScrollCaptureCallback: void onScrollCaptureImageRequest(android.view.ScrollCaptureSession,android.os.CancellationSignal,android.graphics.Rect,java.util.function.Consumer)>"
"<java.util.concurrent.TimeUnit: long toMillis(long)>","<java.util.concurrent.TimeUnit: long toMillis(long)>"
"<android.graphics.drawable.Drawable: int getMinimumHeight()>","<android.graphics.drawable.Drawable: int getMinimumHeight()>"
"<android.view.WindowInsets$Type: int ime()>","<android.view.WindowInsets$Type: int ime()>"
"<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>","<android.app.Activity: boolean onMenuOpened(int,android.view.Menu)>"
"<android.os.Looper: void quit()>","<android.os.Looper: void quit()>"
"<android.hardware.Sensor: int getMaxDelay()>","<android.hardware.Sensor: int getMaxDelay()>"
"<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>","<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>"
"<android.view.inputmethod.EditorInfo: void setInitialSurroundingSubText(java.lang.CharSequence,int)>","<android.view.inputmethod.EditorInfo: void setInitialSurroundingSubText(java.lang.CharSequence,int)>"
"<android.media.ImageReader: int getImageFormat()>","<android.media.ImageReader: int getImageFormat()>"
"<java.nio.file.FileStore: long getUsableSpace()>","<java.nio.file.FileStore: long getUsableSpace()>"
"<android.os.Process: boolean isIsolated()>","<android.os.Process: boolean isIsolated()>"
"<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedAction)>","<javax.security.auth.Subject: java.lang.Object doAs(javax.security.auth.Subject,java.security.PrivilegedAction)>"
"<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>","<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>"
"<java.util.regex.Pattern: java.lang.String toString()>","<java.util.regex.Pattern: java.lang.String toString()>"
"<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>","<android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>"
"<android.hardware.camera2.CaptureRequest$Builder: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>","<android.hardware.camera2.CaptureRequest$Builder: java.lang.Object get(android.hardware.camera2.CaptureRequest$Key)>"
"<java.util.ListIterator: java.lang.Object previous()>","<java.util.ListIterator: java.lang.Object previous()>"
"<android.content.pm.VersionedPackage: boolean equals(java.lang.Object)>","<android.content.pm.VersionedPackage: boolean equals(java.lang.Object)>"
"<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>","<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>"
"<android.content.Loader: boolean isAbandoned()>","<android.content.Loader: boolean isAbandoned()>"
"<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>","<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.Instant toInstant(java.time.ZoneOffset)>","<java.time.chrono.ChronoLocalDateTime: java.time.Instant toInstant(java.time.ZoneOffset)>"
"<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>","<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>"
"<android.os.ParcelFileDescriptor: long getStatSize()>","<android.os.ParcelFileDescriptor: long getStatSize()>"
"<android.hardware.camera2.CaptureRequest: void writeToParcel(android.os.Parcel,int)>","<android.hardware.camera2.CaptureRequest: void writeToParcel(android.os.Parcel,int)>"
"<android.view.animation.Transformation: void setTransformationType(int)>","<android.view.animation.Transformation: void setTransformationType(int)>"
"<java.lang.Double: long doubleToRawLongBits(double)>","<java.lang.Double: long doubleToRawLongBits(double)>"
"<java.nio.CharBuffer: java.nio.Buffer reset()>","<java.nio.CharBuffer: java.nio.Buffer reset()>"
"<java.time.LocalTime: java.time.LocalTime withMinute(int)>","<java.time.LocalTime: java.time.LocalTime withMinute(int)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle findStaticVarHandle(java.lang.Class,java.lang.String,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.VarHandle findStaticVarHandle(java.lang.Class,java.lang.String,java.lang.Class)>"
"<java.lang.reflect.Modifier: boolean isPublic(int)>","<java.lang.reflect.Modifier: boolean isPublic(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setInverseBackgroundForced(boolean)>"
"<java.net.SocketAddress: void <init>()>","<java.net.SocketAddress: void <init>()>"
"<java.util.Locale: java.lang.String getCountry()>","<java.util.Locale: java.lang.String getCountry()>"
"<android.app.Activity: void onProvideAssistData(android.os.Bundle)>","<android.app.Activity: void onProvideAssistData(android.os.Bundle)>"
"<android.graphics.RectF: java.lang.String toString()>","<android.graphics.RectF: java.lang.String toString()>"
"<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>","<android.view.MenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>"
"<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)>","<android.content.IntentFilter: boolean hasDataSchemeSpecificPart(java.lang.String)>"
"<android.media.session.MediaController$TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void playFromUri(android.net.Uri,android.os.Bundle)>"
"<java.lang.Integer: int parseUnsignedInt(java.lang.String,int)>","<java.lang.Integer: int parseUnsignedInt(java.lang.String,int)>"
"<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.RemoteViews: void setAccessibilityTraversalBefore(int,int)>","<android.widget.RemoteViews: void setAccessibilityTraversalBefore(int,int)>"
"<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLanguage$Request: android.os.Bundle getExtras()>"
"<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>","<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>"
"<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentContentProviders(android.content.Intent,int)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLocale(android.icu.util.ULocale)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLocale(android.icu.util.ULocale)>"
"<java.util.regex.MatchResult: java.lang.String group(int)>","<java.util.regex.MatchResult: java.lang.String group(int)>"
"<java.lang.Thread: void sleep(long,int)>","<java.lang.Thread: void sleep(long,int)>"
"<android.hardware.camera2.params.OutputConfiguration: void <init>(android.util.Size,java.lang.Class)>","<android.hardware.camera2.params.OutputConfiguration: void <init>(android.util.Size,java.lang.Class)>"
"<java.nio.channels.spi.AbstractSelector: void end()>","<java.nio.channels.spi.AbstractSelector: void end()>"
"<android.view.ViewGroup: void setDescendantFocusability(int)>","<android.view.ViewGroup: void setDescendantFocusability(int)>"
"<android.view.autofill.AutofillValue: long getDateValue()>","<android.view.autofill.AutofillValue: long getDateValue()>"
"<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>","<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>","<android.view.View: void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)>"
"<android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>","<android.graphics.Color: android.graphics.ColorSpace colorSpace(long)>"
"<java.util.concurrent.Semaphore: java.util.Collection getQueuedThreads()>","<java.util.concurrent.Semaphore: java.util.Collection getQueuedThreads()>"
"<android.widget.Toolbar: void setNavigationIcon(int)>","<android.widget.Toolbar: void setNavigationIcon(int)>"
"<android.graphics.RectF: boolean contains(android.graphics.RectF)>","<android.graphics.RectF: boolean contains(android.graphics.RectF)>"
"<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int)>","<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int)>"
"<android.content.Intent: android.graphics.Rect getSourceBounds()>","<android.content.Intent: android.graphics.Rect getSourceBounds()>"
"<java.nio.Buffer: java.nio.Buffer clear()>","<java.nio.Buffer: java.nio.Buffer clear()>"
"<android.widget.TextView: void setMaxHeight(int)>","<android.widget.TextView: void setMaxHeight(int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setIdleConnectionTimeout(long)>"
"<android.hardware.Camera: void stopPreview()>","<android.hardware.Camera: void stopPreview()>"
"<java.util.Map: void clear()>","<java.util.Map: void clear()>"
"<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>","<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>"
"<android.app.Fragment: boolean isDetached()>","<android.app.Fragment: boolean isDetached()>"
"<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)>","<android.os.UserHandle: void writeToParcel(android.os.UserHandle,android.os.Parcel)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSourceRectHint(android.graphics.Rect)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSourceRectHint(android.graphics.Rect)>"
"<android.telephony.BarringInfo$BarringServiceInfo: int describeContents()>","<android.telephony.BarringInfo$BarringServiceInfo: int describeContents()>"
"<android.app.ActivityManager$RunningAppProcessInfo: void <clinit>()>","<android.app.ActivityManager$RunningAppProcessInfo: void <clinit>()>"
"<android.media.AudioTrack: android.media.metrics.LogSessionId getLogSessionId()>","<android.media.AudioTrack: android.media.metrics.LogSessionId getLogSessionId()>"
"<android.app.Activity: void setEnterSharedElementCallback(android.app.SharedElementCallback)>","<android.app.Activity: void setEnterSharedElementCallback(android.app.SharedElementCallback)>"
"<android.content.ContextWrapper: java.lang.String[] fileList()>","<android.content.ContextWrapper: java.lang.String[] fileList()>"
"<android.graphics.Path: void rLineTo(float,float)>","<android.graphics.Path: void rLineTo(float,float)>"
"<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>","<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>"
"<android.graphics.Paint$Join: void <clinit>()>","<android.graphics.Paint$Join: void <clinit>()>"
"<android.text.PrecomputedText$Params: android.graphics.text.LineBreakConfig getLineBreakConfig()>","<android.text.PrecomputedText$Params: android.graphics.text.LineBreakConfig getLineBreakConfig()>"
"<java.net.Proxy$Type: void <init>(java.lang.String,int)>","<java.net.Proxy$Type: void <init>(java.lang.String,int)>"
"<android.view.Display$Mode: void writeToParcel(android.os.Parcel,int)>","<android.view.Display$Mode: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Math: float nextUp(float)>","<java.lang.Math: float nextUp(float)>"
"<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>","<java.lang.reflect.Array: byte getByte(java.lang.Object,int)>"
"<java.util.Arrays: int compare(boolean[],int,int,boolean[],int,int)>","<java.util.Arrays: int compare(boolean[],int,int,boolean[],int,int)>"
"<android.widget.MediaController$MediaPlayerControl: boolean canSeekForward()>","<android.widget.MediaController$MediaPlayerControl: boolean canSeekForward()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(double)>"
"<java.io.FileInputStream: int available()>","<java.io.FileInputStream: int available()>"
"<android.util.AttributeSet: int getStyleAttribute()>","<android.util.AttributeSet: int getStyleAttribute()>"
"<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>","<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>"
"<java.util.Arrays: long[] copyOfRange(long[],int,int)>","<java.util.Arrays: long[] copyOfRange(long[],int,int)>"
"<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>","<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setSynchronousMode(java.lang.String)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setSynchronousMode(java.lang.String)>"
"<java.time.chrono.AbstractChronology: void <init>()>","<java.time.chrono.AbstractChronology: void <init>()>"
"<java.net.NetworkInterface: boolean isPointToPoint()>","<java.net.NetworkInterface: boolean isPointToPoint()>"
"<java.time.format.DecimalStyle: boolean equals(java.lang.Object)>","<java.time.format.DecimalStyle: boolean equals(java.lang.Object)>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock(long,long,boolean)>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.Insets getOpticalInsets()>","<android.graphics.drawable.BitmapDrawable: android.graphics.Insets getOpticalInsets()>"
"<android.graphics.RenderEffect: void <init>()>","<android.graphics.RenderEffect: void <init>()>"
"<android.view.ViewGroup: boolean canAnimate()>","<android.view.ViewGroup: boolean canAnimate()>"
"<android.media.MediaPlayer$DrmInfo: void <init>()>","<android.media.MediaPlayer$DrmInfo: void <init>()>"
"<android.os.MemoryFile: boolean allowPurging(boolean)>","<android.os.MemoryFile: boolean allowPurging(boolean)>"
"<java.util.stream.LongStream: java.util.OptionalLong findAny()>","<java.util.stream.LongStream: java.util.OptionalLong findAny()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>"
"<android.app.Fragment: void setAllowEnterTransitionOverlap(boolean)>","<android.app.Fragment: void setAllowEnterTransitionOverlap(boolean)>"
"<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>","<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>"
"<android.view.View: void setScrollBarStyle(int)>","<android.view.View: void setScrollBarStyle(int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>"
"<java.lang.ClassNotFoundException: void <init>(java.lang.String)>","<java.lang.ClassNotFoundException: void <init>(java.lang.String)>"
"<android.view.MotionEvent: int getSource()>","<android.view.MotionEvent: int getSource()>"
"<android.media.MediaFormat: void setFloat(java.lang.String,float)>","<android.media.MediaFormat: void setFloat(java.lang.String,float)>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>"
"<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.widget.RemoteViews: void setCharSequenceAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setCharSequenceAttr(int,java.lang.String,int)>"
"<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace$Connector)>","<android.graphics.Color: long convert(float,float,float,float,android.graphics.ColorSpace$Connector)>"
"<android.content.ContentProviderClient: void <init>()>","<android.content.ContentProviderClient: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>"
"<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>","<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>"
"<android.media.session.MediaController$TransportControls: void skipToQueueItem(long)>","<android.media.session.MediaController$TransportControls: void skipToQueueItem(long)>"
"<android.media.Image: int getFormat()>","<android.media.Image: int getFormat()>"
"<android.database.Cursor: int getType(int)>","<android.database.Cursor: int getType(int)>"
"<android.widget.TextView: int computeHorizontalScrollRange()>","<android.widget.TextView: int computeHorizontalScrollRange()>"
"<android.media.MediaMetadataEditor: void clear()>","<android.media.MediaMetadataEditor: void clear()>"
"<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>","<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>"
"<android.os.BaseBundle: int size()>","<android.os.BaseBundle: int size()>"
"<java.util.Locale: void <init>(java.lang.String,java.lang.String)>","<java.util.Locale: void <init>(java.lang.String,java.lang.String)>"
"<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>","<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>"
"<java.lang.Error: void <init>()>","<java.lang.Error: void <init>()>"
"<java.net.NetworkInterface: int getIndex()>","<java.net.NetworkInterface: int getIndex()>"
"<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>","<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>"
"<android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>","<android.content.Context: android.content.ComponentName startForegroundService(android.content.Intent)>"
"<java.util.stream.Collector: java.util.function.Supplier supplier()>","<java.util.stream.Collector: java.util.function.Supplier supplier()>"
"<java.lang.NoSuchFieldError: void <init>()>","<java.lang.NoSuchFieldError: void <init>()>"
"<android.widget.TextView: void setScroller(android.widget.Scroller)>","<android.widget.TextView: void setScroller(android.widget.Scroller)>"
"<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>","<android.content.ContentResolver: android.net.Uri uncanonicalize(android.net.Uri)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.lang.invoke.VarHandle$AccessMode: java.lang.invoke.VarHandle$AccessMode valueOf(java.lang.String)>","<java.lang.invoke.VarHandle$AccessMode: java.lang.invoke.VarHandle$AccessMode valueOf(java.lang.String)>"
"<android.view.animation.Transformation: java.lang.String toString()>","<android.view.animation.Transformation: java.lang.String toString()>"
"<java.lang.Integer: int sum(int,int)>","<java.lang.Integer: int sum(int,int)>"
"<java.lang.String: int compareTo(java.lang.String)>","<java.lang.String: int compareTo(java.lang.String)>"
"<android.graphics.Rect: void offset(int,int)>","<android.graphics.Rect: void offset(int,int)>"
"<android.view.ViewGroup: void dispatchSetPressed(boolean)>","<android.view.ViewGroup: void dispatchSetPressed(boolean)>"
"<java.util.List: java.lang.Object get(int)>","<java.util.List: java.lang.Object get(int)>"
"<android.view.InputEvent: int getDeviceId()>","<android.view.InputEvent: int getDeviceId()>"
"<java.util.Date: long getTime()>","<java.util.Date: long getTime()>"
"<android.media.AudioManager: void setParameters(java.lang.String)>","<android.media.AudioManager: void setParameters(java.lang.String)>"
"<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>","<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncPeriodic(long,long)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder syncPeriodic(long,long)>"
"<android.content.Context: java.lang.String getPackageResourcePath()>","<android.content.Context: java.lang.String getPackageResourcePath()>"
"<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>","<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>"
"<java.time.Instant: java.time.Instant now()>","<java.time.Instant: java.time.Instant now()>"
"<java.time.OffsetDateTime: int getMonthValue()>","<java.time.OffsetDateTime: int getMonthValue()>"
"<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.lang.String: void <init>(byte[],int,int)>","<java.lang.String: void <init>(byte[],int,int)>"
"<android.content.ServiceConnection: void onNullBinding(android.content.ComponentName)>","<android.content.ServiceConnection: void onNullBinding(android.content.ComponentName)>"
"<android.net.NetworkCapabilities: void writeToParcel(android.os.Parcel,int)>","<android.net.NetworkCapabilities: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>","<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>"
"<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder addCharacterBounds(int,float,float,float,float,int)>","<android.view.inputmethod.CursorAnchorInfo$Builder: android.view.inputmethod.CursorAnchorInfo$Builder addCharacterBounds(int,float,float,float,float,int)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setLabel(java.lang.String)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setLabel(java.lang.String)>"
"<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>","<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording()>"
"<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>","<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>"
"<android.view.KeyEvent: boolean isSystem()>","<android.view.KeyEvent: boolean isSystem()>"
"<android.widget.TextView: void setText(int)>","<android.widget.TextView: void setText(int)>"
"<java.nio.ByteBuffer: java.nio.Buffer rewind()>","<java.nio.ByteBuffer: java.nio.Buffer rewind()>"
"<android.graphics.Rect: int width()>","<android.graphics.Rect: int width()>"
"<android.media.MediaMetadata: java.util.Set keySet()>","<android.media.MediaMetadata: java.util.Set keySet()>"
"<android.media.AudioManager: int getStreamVolume(int)>","<android.media.AudioManager: int getStreamVolume(int)>"
"<android.net.Uri: boolean isAbsolute()>","<android.net.Uri: boolean isAbsolute()>"
"<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.view.KeyEvent: boolean isFunctionPressed()>","<android.view.KeyEvent: boolean isFunctionPressed()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)>"
"<android.graphics.Region: boolean isEmpty()>","<android.graphics.Region: boolean isEmpty()>"
"<java.lang.Throwable: java.lang.String toString()>","<java.lang.Throwable: java.lang.String toString()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setRegion(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setRegion(java.lang.String)>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasAudioDescription(boolean)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setHasAudioDescription(boolean)>"
"<android.content.Intent: void removeFlags(int)>","<android.content.Intent: void removeFlags(int)>"
"<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>","<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>"
"<java.nio.file.FileSystem: java.lang.String getSeparator()>","<java.nio.file.FileSystem: java.lang.String getSeparator()>"
"<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)>","<android.os.Debug: void startMethodTracingSampling(java.lang.String,int,int)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>"
"<android.view.View: void setScrollBarSize(int)>","<android.view.View: void setScrollBarSize(int)>"
"<java.util.stream.LongStream: java.util.Spliterator$OfLong spliterator()>","<java.util.stream.LongStream: java.util.Spliterator$OfLong spliterator()>"
"<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<android.view.AttachedSurfaceControl: void addOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>","<android.view.AttachedSurfaceControl: void addOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>"
"<android.view.Display: float getRefreshRate()>","<android.view.Display: float getRefreshRate()>"
"<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>","<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>"
"<android.media.MediaPlayer: void setVideoScalingMode(int)>","<android.media.MediaPlayer: void setVideoScalingMode(int)>"
"<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>","<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>"
"<android.view.MotionEvent: float getYPrecision()>","<android.view.MotionEvent: float getYPrecision()>"
"<java.lang.Double: int intValue()>","<java.lang.Double: int intValue()>"
"<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraUnavailable(java.lang.String,java.lang.String)>","<android.hardware.camera2.CameraManager$AvailabilityCallback: void onPhysicalCameraUnavailable(java.lang.String,java.lang.String)>"
"<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.ReflectiveOperationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<java.lang.Character: int digit(int,int)>","<java.lang.Character: int digit(int,int)>"
"<java.lang.ref.Reference: boolean isEnqueued()>","<java.lang.ref.Reference: boolean isEnqueued()>"
"<android.widget.Toolbar: void setTitleMarginStart(int)>","<android.widget.Toolbar: void setTitleMarginStart(int)>"
"<android.media.Spatializer: boolean isHeadTrackerAvailable()>","<android.media.Spatializer: boolean isHeadTrackerAvailable()>"
"<java.lang.Thread$State: void <init>(java.lang.String,int)>","<java.lang.Thread$State: void <init>(java.lang.String,int)>"
"<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>"
"<java.time.ZoneId: java.time.ZoneId normalized()>","<java.time.ZoneId: java.time.ZoneId normalized()>"
"<java.util.List: java.util.Iterator iterator()>","<java.util.List: java.util.Iterator iterator()>"
"<android.media.AudioTrack$StreamEventCallback: void <init>()>","<android.media.AudioTrack$StreamEventCallback: void <init>()>"
"<android.view.textclassifier.TextClassification$Request$Builder: void <init>(java.lang.CharSequence,int,int)>","<android.view.textclassifier.TextClassification$Request$Builder: void <init>(java.lang.CharSequence,int,int)>"
"<android.hardware.display.DeviceProductInfo: int describeContents()>","<android.hardware.display.DeviceProductInfo: int describeContents()>"
"<java.io.Writer: java.lang.Appendable append(char)>","<java.io.Writer: java.lang.Appendable append(char)>"
"<java.net.ServerSocket: int getReceiveBufferSize()>","<java.net.ServerSocket: int getReceiveBufferSize()>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>"
"<android.hardware.Sensor: boolean isAdditionalInfoSupported()>","<android.hardware.Sensor: boolean isAdditionalInfoSupported()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: boolean equals(java.lang.Object)>","<android.graphics.ColorSpace$Rgb$TransferParameters: boolean equals(java.lang.Object)>"
"<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>","<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>"
"<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>","<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>"
"<android.widget.Toolbar: int getContentInsetStartWithNavigation()>","<android.widget.Toolbar: int getContentInsetStartWithNavigation()>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>","<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>"
"<android.app.Fragment$SavedState: void <init>()>","<android.app.Fragment$SavedState: void <init>()>"
"<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.nio.CharBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.view.View: boolean isClickable()>","<android.view.View: boolean isClickable()>"
"<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.util.stream.LongStream: java.util.stream.Stream boxed()>","<java.util.stream.LongStream: java.util.stream.Stream boxed()>"
"<java.lang.StringBuilder: java.lang.StringBuilder reverse()>","<java.lang.StringBuilder: java.lang.StringBuilder reverse()>"
"<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>","<android.view.LayoutInflater: android.view.LayoutInflater cloneInContext(android.content.Context)>"
"<java.nio.file.FileStore: boolean isReadOnly()>","<java.nio.file.FileStore: boolean isReadOnly()>"
"<android.widget.Toolbar: int getTitleMarginStart()>","<android.widget.Toolbar: int getTitleMarginStart()>"
"<android.graphics.RectF: void set(float,float,float,float)>","<android.graphics.RectF: void set(float,float,float,float)>"
"<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>","<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>"
"<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.ByteBuffer encode(java.nio.CharBuffer)>"
"<android.media.session.PlaybackState$CustomAction: void writeToParcel(android.os.Parcel,int)>","<android.media.session.PlaybackState$CustomAction: void writeToParcel(android.os.Parcel,int)>"
"<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>"
"<android.view.AttachedSurfaceControl: void removeOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>","<android.view.AttachedSurfaceControl: void removeOnBufferTransformHintChangedListener(android.view.AttachedSurfaceControl$OnBufferTransformHintChangedListener)>"
"<java.time.OffsetTime: java.time.OffsetDateTime atDate(java.time.LocalDate)>","<java.time.OffsetTime: java.time.OffsetDateTime atDate(java.time.LocalDate)>"
"<java.time.Period: java.time.Period withYears(int)>","<java.time.Period: java.time.Period withYears(int)>"
"<android.hardware.Sensor: java.lang.String getName()>","<android.hardware.Sensor: java.lang.String getName()>"
"<android.content.pm.ModuleInfo: int describeContents()>","<android.content.pm.ModuleInfo: int describeContents()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,android.graphics.Path)>"
"<android.media.session.MediaController$TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)>","<android.media.session.MediaController$TransportControls: void playFromMediaId(java.lang.String,android.os.Bundle)>"
"<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int)>","<android.app.ActivityManager$TaskDescription: void <init>(java.lang.String,int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(int,double)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putDouble(int,double)>"
"<android.icu.util.ULocale: java.lang.String getExtension(char)>","<android.icu.util.ULocale: java.lang.String getExtension(char)>"
"<android.graphics.Path: void quadTo(float,float,float,float)>","<android.graphics.Path: void quadTo(float,float,float,float)>"
"<android.animation.Animator: boolean isRunning()>","<android.animation.Animator: boolean isRunning()>"
"<android.graphics.Point: void set(int,int)>","<android.graphics.Point: void set(int,int)>"
"<android.os.Debug: void resetThreadExternalAllocCount()>","<android.os.Debug: void resetThreadExternalAllocCount()>"
"<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>","<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>"
"<java.time.temporal.ValueRange: boolean isIntValue()>","<java.time.temporal.ValueRange: boolean isIntValue()>"
"<android.telephony.TelephonyManager: void getNetworkSlicingConfiguration(java.util.concurrent.Executor,android.os.OutcomeReceiver)>","<android.telephony.TelephonyManager: void getNetworkSlicingConfiguration(java.util.concurrent.Executor,android.os.OutcomeReceiver)>"
"<android.view.inputmethod.InputMethodManager: boolean isInputMethodSuppressingSpellChecker()>","<android.view.inputmethod.InputMethodManager: boolean isInputMethodSuppressingSpellChecker()>"
"<android.os.HandlerThread: boolean quitSafely()>","<android.os.HandlerThread: boolean quitSafely()>"
"<java.time.zone.ZoneRules: void <init>()>","<java.time.zone.ZoneRules: void <init>()>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setExpandedAspectRatio(android.util.Rational)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setExpandedAspectRatio(android.util.Rational)>"
"<android.view.View$MeasureSpec: java.lang.String toString(int)>","<android.view.View$MeasureSpec: java.lang.String toString(int)>"
"<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>"
"<java.time.ZonedDateTime: int getNano()>","<java.time.ZonedDateTime: int getNano()>"
"<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)>"
"<java.util.Date: boolean equals(java.lang.Object)>","<java.util.Date: boolean equals(java.lang.Object)>"
"<java.time.Duration: java.time.Duration plus(java.time.Duration)>","<java.time.Duration: java.time.Duration plus(java.time.Duration)>"
"<android.view.inputmethod.CursorAnchorInfo: boolean equals(java.lang.Object)>","<android.view.inputmethod.CursorAnchorInfo: boolean equals(java.lang.Object)>"
"<android.media.AudioTrack$StreamEventCallback: void onDataRequest(android.media.AudioTrack,int)>","<android.media.AudioTrack$StreamEventCallback: void onDataRequest(android.media.AudioTrack,int)>"
"<java.nio.channels.SelectableChannel: boolean isRegistered()>","<java.nio.channels.SelectableChannel: boolean isRegistered()>"
"<android.app.AlertDialog: void setCustomTitle(android.view.View)>","<android.app.AlertDialog: void setCustomTitle(android.view.View)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float,android.graphics.RenderEffect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float,android.graphics.RenderEffect)>"
"<android.graphics.Outline: void setOval(android.graphics.Rect)>","<android.graphics.Outline: void setOval(android.graphics.Rect)>"
"<java.util.HashMap: java.lang.Object clone()>","<java.util.HashMap: java.lang.Object clone()>"
"<android.view.ActionMode: java.lang.CharSequence getTitle()>","<android.view.ActionMode: java.lang.CharSequence getTitle()>"
"<android.graphics.Picture: void draw(android.graphics.Canvas)>","<android.graphics.Picture: void draw(android.graphics.Canvas)>"
"<android.graphics.drawable.Icon: int getResId()>","<android.graphics.drawable.Icon: int getResId()>"
"<android.view.inputmethod.InputConnection: boolean performEditorAction(int)>","<android.view.inputmethod.InputConnection: boolean performEditorAction(int)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.chrono.Era,int,int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.chrono.Era,int,int,int)>"
"<java.lang.Math: long min(long,long)>","<java.lang.Math: long min(long,long)>"
"<android.view.ViewGroup: void removeViews(int,int)>","<android.view.ViewGroup: void removeViews(int,int)>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>","<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>"
"<java.util.stream.IntStream: java.util.stream.BaseStream parallel()>","<java.util.stream.IntStream: java.util.stream.BaseStream parallel()>"
"<java.util.Set: int hashCode()>","<java.util.Set: int hashCode()>"
"<java.lang.Short: java.lang.String toString()>","<java.lang.Short: java.lang.String toString()>"
"<android.util.Property: java.lang.Class getType()>","<android.util.Property: java.lang.Class getType()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByViewId(java.lang.String)>"
"<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)>","<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)>"
"<android.os.Parcel: void writeSerializable(java.io.Serializable)>","<android.os.Parcel: void writeSerializable(java.io.Serializable)>"
"<java.lang.invoke.VarHandle: boolean weakCompareAndSet(java.lang.Object[])>","<java.lang.invoke.VarHandle: boolean weakCompareAndSet(java.lang.Object[])>"
"<android.view.InputDevice: android.os.VibratorManager getVibratorManager()>","<android.view.InputDevice: android.os.VibratorManager getVibratorManager()>"
"<java.lang.Character: boolean isIdentifierIgnorable(char)>","<java.lang.Character: boolean isIdentifierIgnorable(char)>"
"<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>","<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>"
"<android.view.KeyEvent: long getEventTime()>","<android.view.KeyEvent: long getEventTime()>"
"<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)>","<android.content.ContextWrapper: java.io.File[] getExternalFilesDirs(java.lang.String)>"
"<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>","<android.view.LayoutInflater: android.view.View onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: void <init>()>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: void <init>()>"
"<java.time.Duration: java.time.Duration minus(long,java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration minus(long,java.time.temporal.TemporalUnit)>"
"<android.media.Session2Token: boolean equals(java.lang.Object)>","<android.media.Session2Token: boolean equals(java.lang.Object)>"
"<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>","<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>"
"<android.view.View: boolean canResolveLayoutDirection()>","<android.view.View: boolean canResolveLayoutDirection()>"
"<java.io.InputStream: void mark(int)>","<java.io.InputStream: void mark(int)>"
"<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>","<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>"
"<android.media.AudioMetadata: void <init>()>","<android.media.AudioMetadata: void <init>()>"
"<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)>","<android.content.ContentProvider: android.net.Uri canonicalize(android.net.Uri)>"
"<java.io.PrintWriter: void <init>(java.io.File)>","<java.io.PrintWriter: void <init>(java.io.File)>"
"<java.util.Arrays: void parallelSort(short[],int,int)>","<java.util.Arrays: void parallelSort(short[],int,int)>"
"<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>","<android.graphics.drawable.LayerDrawable: void jumpToCurrentState()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,double)>"
"<android.hardware.SensorManager: float getAltitude(float,float)>","<android.hardware.SensorManager: float getAltitude(float,float)>"
"<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>","<android.app.VoiceInteractor: boolean[] supportsCommands(java.lang.String[])>"
"<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>","<android.transition.TransitionManager: void beginDelayedTransition(android.view.ViewGroup,android.transition.Transition)>"
"<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setReferenceTime(java.time.ZonedDateTime)>","<android.view.textclassifier.TextLinks$Request$Builder: android.view.textclassifier.TextLinks$Request$Builder setReferenceTime(java.time.ZonedDateTime)>"
"<android.widget.RemoteViews$RemoteCollectionItems: boolean hasStableIds()>","<android.widget.RemoteViews$RemoteCollectionItems: boolean hasStableIds()>"
"<android.content.pm.ModuleInfo: void <clinit>()>","<android.content.pm.ModuleInfo: void <clinit>()>"
"<android.content.pm.ResolveInfo: int getIconResource()>","<android.content.pm.ResolveInfo: int getIconResource()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setShowingHintText(boolean)>"
"<android.app.Activity: void onContentChanged()>","<android.app.Activity: void onContentChanged()>"
"<android.view.View: void setScaleY(float)>","<android.view.View: void setScaleY(float)>"
"<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getSourceSpec()>","<android.view.translation.TranslationCapability: android.view.translation.TranslationSpec getSourceSpec()>"
"<android.net.NetworkInfo: void <clinit>()>","<android.net.NetworkInfo: void <clinit>()>"
"<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>","<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>"
"<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>","<android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()>","<android.view.Display$HdrCapabilities: float getDesiredMinLuminance()>"
"<android.hardware.camera2.CaptureResult$Key: void <init>(java.lang.String,java.lang.Class)>","<android.hardware.camera2.CaptureResult$Key: void <init>(java.lang.String,java.lang.Class)>"
"<android.animation.Animator: void pause()>","<android.animation.Animator: void pause()>"
"<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUids()>","<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUids()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)>"
"<java.time.Instant: void <clinit>()>","<java.time.Instant: void <clinit>()>"
"<android.os.Parcel: void readInterfaceArray(android.os.IInterface[],java.util.function.Function)>","<android.os.Parcel: void readInterfaceArray(android.os.IInterface[],java.util.function.Function)>"
"<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>","<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>"
"<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>","<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>"
"<java.util.Locale: java.lang.String toLanguageTag()>","<java.util.Locale: java.lang.String toLanguageTag()>"
"<java.util.Arrays: void fill(long[],int,int,long)>","<java.util.Arrays: void fill(long[],int,int,long)>"
"<java.nio.charset.CharsetEncoder: boolean canEncode(char)>","<java.nio.charset.CharsetEncoder: boolean canEncode(char)>"
"<java.nio.channels.DatagramChannel: java.net.SocketAddress getRemoteAddress()>","<java.nio.channels.DatagramChannel: java.net.SocketAddress getRemoteAddress()>"
"<java.text.Format$Field: void <init>(java.lang.String)>","<java.text.Format$Field: void <init>(java.lang.String)>"
"<java.time.Instant: java.lang.String toString()>","<java.time.Instant: java.lang.String toString()>"
"<android.graphics.Color: long pack(float,float,float,float)>","<android.graphics.Color: long pack(float,float,float,float)>"
"<android.widget.AbsListView: boolean isStackFromBottom()>","<android.widget.AbsListView: boolean isStackFromBottom()>"
"<android.view.animation.Animation: void setRepeatCount(int)>","<android.view.animation.Animation: void setRepeatCount(int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>"
"<android.widget.AbsListView: void <init>(android.content.Context)>","<android.widget.AbsListView: void <init>(android.content.Context)>"
"<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()>","<android.view.DisplayCutout: android.graphics.Rect getBoundingRectRight()>"
"<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.List getOutputConfigurations()>","<android.hardware.camera2.params.ExtensionSessionConfiguration: java.util.List getOutputConfigurations()>"
"<java.util.Random: java.util.stream.DoubleStream doubles(double,double)>","<java.util.Random: java.util.stream.DoubleStream doubles(double,double)>"
"<java.net.InetSocketAddress: boolean isUnresolved()>","<java.net.InetSocketAddress: boolean isUnresolved()>"
"<java.lang.invoke.MethodHandleInfo: int getReferenceKind()>","<java.lang.invoke.MethodHandleInfo: int getReferenceKind()>"
"<android.util.Log: boolean isLoggable(java.lang.String,int)>","<android.util.Log: boolean isLoggable(java.lang.String,int)>"
"<java.lang.Character: boolean isUnicodeIdentifierStart(char)>","<java.lang.Character: boolean isUnicodeIdentifierStart(char)>"
"<android.telephony.TelephonyManager: int getVoiceNetworkType()>","<android.telephony.TelephonyManager: int getVoiceNetworkType()>"
"<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.widget.TextView: void setPadding(int,int,int,int)>","<android.widget.TextView: void setPadding(int,int,int,int)>"
"<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>","<java.util.concurrent.Semaphore: boolean hasQueuedThreads()>"
"<java.nio.channels.Selector: boolean isOpen()>","<java.nio.channels.Selector: boolean isOpen()>"
"<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>","<java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>"
"<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String,java.lang.Number)>","<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String,java.lang.Number)>"
"<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>","<android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int,android.os.Bundle)>"
"<android.view.View: boolean isForceDarkAllowed()>","<android.view.View: boolean isForceDarkAllowed()>"
"<android.database.sqlite.SQLiteStatement: void execute()>","<android.database.sqlite.SQLiteStatement: void execute()>"
"<android.telephony.SignalStrengthUpdateRequest: int describeContents()>","<android.telephony.SignalStrengthUpdateRequest: int describeContents()>"
"<android.view.View: boolean isTextDirectionResolved()>","<android.view.View: boolean isTextDirectionResolved()>"
"<android.graphics.drawable.LayerDrawable: int getLayerInsetRight(int)>","<android.graphics.drawable.LayerDrawable: int getLayerInsetRight(int)>"
"<android.app.Dialog: void show()>","<android.app.Dialog: void show()>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setBufferSizeInBytes(int)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setBufferSizeInBytes(int)>"
"<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>","<android.app.Activity: void startActivity(android.content.Intent,android.os.Bundle)>"
"<java.io.File: boolean canExecute()>","<java.io.File: boolean canExecute()>"
"<android.media.AudioManager: boolean isCallScreeningModeSupported()>","<android.media.AudioManager: boolean isCallScreeningModeSupported()>"
"<java.time.Duration: int compareTo(java.lang.Object)>","<java.time.Duration: int compareTo(java.lang.Object)>"
"<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>","<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>"
"<android.view.View: int getImportantForAccessibility()>","<android.view.View: int getImportantForAccessibility()>"
"<android.media.AudioFocusRequest: void <init>()>","<android.media.AudioFocusRequest: void <init>()>"
"<java.lang.reflect.Parameter: boolean isNamePresent()>","<java.lang.reflect.Parameter: boolean isNamePresent()>"
"<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>","<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>"
"<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>","<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>"
"<android.telephony.SignalStrength: void <init>(android.telephony.SignalStrength)>","<android.telephony.SignalStrength: void <init>(android.telephony.SignalStrength)>"
"<android.media.MediaDrm$KeyStatus: byte[] getKeyId()>","<android.media.MediaDrm$KeyStatus: byte[] getKeyId()>"
"<java.nio.charset.CoderResult: void <init>()>","<java.nio.charset.CoderResult: void <init>()>"
"<android.graphics.Region: boolean set(android.graphics.Rect)>","<android.graphics.Region: boolean set(android.graphics.Rect)>"
"<java.lang.Exception: void <init>()>","<java.lang.Exception: void <init>()>"
"<java.lang.String: int indexOf(java.lang.String,int)>","<java.lang.String: int indexOf(java.lang.String,int)>"
"<java.lang.invoke.MethodHandle: void <init>()>","<java.lang.invoke.MethodHandle: void <init>()>"
"<android.widget.TextView: void onScrollChanged(int,int,int,int)>","<android.widget.TextView: void onScrollChanged(int,int,int,int)>"
"<android.app.Activity: void overridePendingTransition(int,int,int)>","<android.app.Activity: void overridePendingTransition(int,int,int)>"
"<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(java.lang.String,java.lang.String)>","<android.telephony.TelephonyManager: boolean setLine1NumberForDisplay(java.lang.String,java.lang.String)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>","<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>"
"<android.media.MediaFormat: void setInteger(java.lang.String,int)>","<android.media.MediaFormat: void setInteger(java.lang.String,int)>"
"<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>","<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>"
"<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>","<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>"
"<android.hardware.display.VirtualDisplay: java.lang.String toString()>","<android.hardware.display.VirtualDisplay: java.lang.String toString()>"
"<android.media.MediaMetadata: int hashCode()>","<android.media.MediaMetadata: int hashCode()>"
"<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>"
"<android.telephony.ServiceState: void setState(int)>","<android.telephony.ServiceState: void setState(int)>"
"<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>","<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>"
"<java.nio.FloatBuffer: int arrayOffset()>","<java.nio.FloatBuffer: int arrayOffset()>"
"<android.media.AudioDeviceInfo: int[] getEncapsulationModes()>","<android.media.AudioDeviceInfo: int[] getEncapsulationModes()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: long getIdleConnectionTimeout()>","<android.database.sqlite.SQLiteDatabase$OpenParams: long getIdleConnectionTimeout()>"
"<android.os.Parcel: float readFloat()>","<android.os.Parcel: float readFloat()>"
"<java.time.chrono.ChronoLocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.Package: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<java.util.concurrent.locks.ReentrantLock: void lock()>","<java.util.concurrent.locks.ReentrantLock: void lock()>"
"<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>","<android.view.Surface: void unlockCanvas(android.graphics.Canvas)>"
"<java.lang.Character: boolean isSpace(char)>","<java.lang.Character: boolean isSpace(char)>"
"<java.util.function.ObjIntConsumer: void accept(java.lang.Object,int)>","<java.util.function.ObjIntConsumer: void accept(java.lang.Object,int)>"
"<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>","<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>"
"<java.util.Date: void <init>()>","<java.util.Date: void <init>()>"
"<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>","<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>"
"<android.graphics.RenderNode: boolean setScaleY(float)>","<android.graphics.RenderNode: boolean setScaleY(float)>"
"<java.lang.reflect.AccessibleObject: void <init>()>","<java.lang.reflect.AccessibleObject: void <init>()>"
"<java.time.Month: int getValue()>","<java.time.Month: int getValue()>"
"<java.util.Arrays: int mismatch(byte[],byte[])>","<java.util.Arrays: int mismatch(byte[],byte[])>"
"<android.view.View: int getOverScrollMode()>","<android.view.View: int getOverScrollMode()>"
"<android.graphics.Matrix: void <init>(android.graphics.Matrix)>","<android.graphics.Matrix: void <init>(android.graphics.Matrix)>"
"<android.view.SurfaceView: void onAttachedToWindow()>","<android.view.SurfaceView: void onAttachedToWindow()>"
"<android.media.RemoteController: boolean clearArtworkConfiguration()>","<android.media.RemoteController: boolean clearArtworkConfiguration()>"
"<android.net.IpSecAlgorithm: void <init>(java.lang.String,byte[],int)>","<android.net.IpSecAlgorithm: void <init>(java.lang.String,byte[],int)>"
"<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>","<java.nio.file.WatchService: java.nio.file.WatchKey poll(long,java.util.concurrent.TimeUnit)>"
"<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.net.ProxyInfo: boolean equals(java.lang.Object)>","<android.net.ProxyInfo: boolean equals(java.lang.Object)>"
"<android.app.ActionBar: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)>","<android.app.ActionBar: void setCustomView(android.view.View,android.app.ActionBar$LayoutParams)>"
"<android.graphics.Matrix: void dump(java.io.PrintWriter)>","<android.graphics.Matrix: void dump(java.io.PrintWriter)>"
"<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>"
"<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>","<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>"
"<android.view.MotionEvent: int getActionIndex()>","<android.view.MotionEvent: int getActionIndex()>"
"<android.view.Surface$OutOfResourcesException: void <init>()>","<android.view.Surface$OutOfResourcesException: void <init>()>"
"<java.io.File: boolean setLastModified(long)>","<java.io.File: boolean setLastModified(long)>"
"<java.nio.channels.Selector: int select()>","<java.nio.channels.Selector: int select()>"
"<android.graphics.Region: boolean set(android.graphics.Region)>","<android.graphics.Region: boolean set(android.graphics.Region)>"
"<java.util.Collection: java.lang.Object[] toArray()>","<java.util.Collection: java.lang.Object[] toArray()>"
"<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>","<android.view.ViewGroup: boolean isChildrenDrawnWithCacheEnabled()>"
"<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>","<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>"
"<android.util.Range: boolean equals(java.lang.Object)>","<android.util.Range: boolean equals(java.lang.Object)>"
"<java.util.HashSet: java.util.Spliterator spliterator()>","<java.util.HashSet: java.util.Spliterator spliterator()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>"
"<android.telephony.TelephonyManager: java.lang.String getDeviceId()>","<android.telephony.TelephonyManager: java.lang.String getDeviceId()>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)>","<android.content.ContextWrapper: android.content.Context createContextForSplit(java.lang.String)>"
"<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>","<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>"
"<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>","<android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>","<android.view.View: void setForegroundTintMode(android.graphics.PorterDuff$Mode)>"
"<android.hardware.camera2.CameraCharacteristics: java.util.Set getPhysicalCameraIds()>","<android.hardware.camera2.CameraCharacteristics: java.util.Set getPhysicalCameraIds()>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>","<java.nio.FloatBuffer: java.nio.FloatBuffer asReadOnlyBuffer()>"
"<java.nio.file.FileStore: java.lang.Object getAttribute(java.lang.String)>","<java.nio.file.FileStore: java.lang.Object getAttribute(java.lang.String)>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.app.Activity)>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>"
"<java.lang.InstantiationError: void <init>()>","<java.lang.InstantiationError: void <init>()>"
"<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>","<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>"
"<android.media.AudioDeviceInfo: int[] getEncapsulationMetadataTypes()>","<android.media.AudioDeviceInfo: int[] getEncapsulationMetadataTypes()>"
"<android.os.Parcel: void writeLongArray(long[])>","<android.os.Parcel: void writeLongArray(long[])>"
"<android.view.View: boolean callOnClick()>","<android.view.View: boolean callOnClick()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)>","<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)>"
"<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>","<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>"
"<android.view.View: void setImportantForContentCapture(int)>","<android.view.View: void setImportantForContentCapture(int)>"
"<java.time.chrono.Chronology: java.lang.String getCalendarType()>","<java.time.chrono.Chronology: java.lang.String getCalendarType()>"
"<java.util.function.LongConsumer: java.util.function.LongConsumer andThen(java.util.function.LongConsumer)>","<java.util.function.LongConsumer: java.util.function.LongConsumer andThen(java.util.function.LongConsumer)>"
"<android.content.pm.FeatureInfo: void <clinit>()>","<android.content.pm.FeatureInfo: void <clinit>()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()>","<android.view.textclassifier.SelectionEvent: java.lang.String getResultId()>"
"<java.util.concurrent.locks.Condition: void signal()>","<java.util.concurrent.locks.Condition: void signal()>"
"<android.view.ViewGroup: void removeAllViews()>","<android.view.ViewGroup: void removeAllViews()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)>"
"<android.os.Debug: int getLoadedClassCount()>","<android.os.Debug: int getLoadedClassCount()>"
"<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>","<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.LongConsumer)>"
"<java.nio.channels.spi.AbstractSelector: void close()>","<java.nio.channels.spi.AbstractSelector: void close()>"
"<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndAdd(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndAdd(java.lang.Object[])>"
"<java.lang.Byte: int hashCode()>","<java.lang.Byte: int hashCode()>"
"<android.view.animation.LayoutAnimationController: int getOrder()>","<android.view.animation.LayoutAnimationController: int getOrder()>"
"<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>","<android.media.session.MediaController: boolean dispatchMediaButtonEvent(android.view.KeyEvent)>"
"<android.app.SharedElementCallback: void onRejectSharedElements(java.util.List)>","<android.app.SharedElementCallback: void onRejectSharedElements(java.util.List)>"
"<java.nio.channels.FileLock: java.lang.String toString()>","<java.nio.channels.FileLock: java.lang.String toString()>"
"<java.lang.ExceptionInInitializerError: void <init>()>","<java.lang.ExceptionInInitializerError: void <init>()>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(long)>","<java.lang.StringBuilder: java.lang.StringBuilder append(long)>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration build()>"
"<android.view.textclassifier.TextLinks$TextLink: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLinks$TextLink: void writeToParcel(android.os.Parcel,int)>"
"<java.util.List: boolean contains(java.lang.Object)>","<java.util.List: boolean contains(java.lang.Object)>"
"<android.view.View: boolean isPaddingRelative()>","<android.view.View: boolean isPaddingRelative()>"
"<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>","<java.lang.reflect.Array: void set(java.lang.Object,int,java.lang.Object)>"
"<android.transition.Transition: java.util.List getTargetIds()>","<android.transition.Transition: java.util.List getTargetIds()>"
"<android.content.res.Configuration: java.lang.String toString()>","<android.content.res.Configuration: java.lang.String toString()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(short[])>"
"<java.time.chrono.Chronology: java.util.Set getAvailableChronologies()>","<java.time.chrono.Chronology: java.util.Set getAvailableChronologies()>"
"<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>","<android.hardware.Camera$Parameters: void setVideoStabilization(boolean)>"
"<android.view.SubMenu: android.view.MenuItem getItem()>","<android.view.SubMenu: android.view.MenuItem getItem()>"
"<android.net.LinkProperties: boolean isWakeOnLanSupported()>","<android.net.LinkProperties: boolean isWakeOnLanSupported()>"
"<android.os.Parcel: void readException(int,java.lang.String)>","<android.os.Parcel: void readException(int,java.lang.String)>"
"<android.graphics.Canvas: void drawRenderNode(android.graphics.RenderNode)>","<android.graphics.Canvas: void drawRenderNode(android.graphics.RenderNode)>"
"<android.hardware.Camera$Parameters: int getMaxZoom()>","<android.hardware.Camera$Parameters: int getMaxZoom()>"
"<android.graphics.ColorSpace: boolean isSrgb()>","<android.graphics.ColorSpace: boolean isSrgb()>"
"<java.lang.Object: void notify()>","<java.lang.Object: void notify()>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setExtras(android.os.Bundle)>"
"<java.util.concurrent.locks.Condition: void signalAll()>","<java.util.concurrent.locks.Condition: void signalAll()>"
"<java.security.Permission: java.lang.String getActions()>","<java.security.Permission: java.lang.String getActions()>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofHours(int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofHours(int)>"
"<android.hardware.camera2.params.OutputConfiguration: void removeSurface(android.view.Surface)>","<android.hardware.camera2.params.OutputConfiguration: void removeSurface(android.view.Surface)>"
"<java.util.function.Supplier: java.lang.Object get()>","<java.util.function.Supplier: java.lang.Object get()>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface build()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)>"
"<java.time.ZoneId: java.lang.String toString()>","<java.time.ZoneId: java.lang.String toString()>"
"<java.lang.reflect.Constructor: int hashCode()>","<java.lang.reflect.Constructor: int hashCode()>"
"<java.nio.channels.Pipe: java.nio.channels.Pipe$SourceChannel source()>","<java.nio.channels.Pipe: java.nio.channels.Pipe$SourceChannel source()>"
"<java.util.Collections: int indexOfSubList(java.util.List,java.util.List)>","<java.util.Collections: int indexOfSubList(java.util.List,java.util.List)>"
"<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)>","<android.widget.AdapterView: void setOnItemLongClickListener(android.widget.AdapterView$OnItemLongClickListener)>"
"<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>","<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>"
"<java.lang.reflect.Method: int getParameterCount()>","<java.lang.reflect.Method: int getParameterCount()>"
"<android.content.pm.PackageInstaller$Session: boolean isStaged()>","<android.content.pm.PackageInstaller$Session: boolean isStaged()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View,int)>"
"<android.icu.util.ULocale: java.lang.String getBaseName()>","<android.icu.util.ULocale: java.lang.String getBaseName()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction disallowAddToBackStack()>","<android.app.FragmentTransaction: android.app.FragmentTransaction disallowAddToBackStack()>"
"<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>","<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>"
"<android.app.PendingIntent: boolean isImmutable()>","<android.app.PendingIntent: boolean isImmutable()>"
"<android.telephony.TelephonyDisplayInfo: void writeToParcel(android.os.Parcel,int)>","<android.telephony.TelephonyDisplayInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.hardware.camera2.CameraCharacteristics: void <clinit>()>","<android.hardware.camera2.CameraCharacteristics: void <clinit>()>"
"<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>","<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>"
"<java.time.Duration: void <init>()>","<java.time.Duration: void <init>()>"
"<java.util.NavigableMap: java.util.SortedMap headMap(java.lang.Object)>","<java.util.NavigableMap: java.util.SortedMap headMap(java.lang.Object)>"
"<java.nio.IntBuffer: boolean hasArray()>","<java.nio.IntBuffer: boolean hasArray()>"
"<java.lang.Math: int min(int,int)>","<java.lang.Math: int min(int,int)>"
"<android.app.Activity: void setContentTransitionManager(android.transition.TransitionManager)>","<android.app.Activity: void setContentTransitionManager(android.transition.TransitionManager)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future read(java.nio.ByteBuffer,long)>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future read(java.nio.ByteBuffer,long)>"
"<java.util.stream.LongStream: boolean anyMatch(java.util.function.LongPredicate)>","<java.util.stream.LongStream: boolean anyMatch(java.util.function.LongPredicate)>"
"<android.content.ContextWrapper: int[] checkCallingUriPermissions(java.util.List,int)>","<android.content.ContextWrapper: int[] checkCallingUriPermissions(java.util.List,int)>"
"<android.media.AudioRecord: int getChannelCount()>","<android.media.AudioRecord: int getChannelCount()>"
"<java.lang.Short: short shortValue()>","<java.lang.Short: short shortValue()>"
"<android.media.MediaDrm: void finalize()>","<android.media.MediaDrm: void finalize()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object[])>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object[])>"
"<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>","<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>"
"<android.telephony.TelephonyManager: int getNetworkSelectionMode()>","<android.telephony.TelephonyManager: int getNetworkSelectionMode()>"
"<android.view.Window: void setBackgroundDrawableResource(int)>","<android.view.Window: void setBackgroundDrawableResource(int)>"
"<android.view.ViewDebug$FlagToString: java.lang.String name()>","<android.view.ViewDebug$FlagToString: java.lang.String name()>"
"<android.content.ClipData$Item: java.lang.CharSequence getText()>","<android.content.ClipData$Item: java.lang.CharSequence getText()>"
"<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()>","<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()>"
"<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>","<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>"
"<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>","<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>"
"<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>","<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>"
"<android.telephony.SignalStrengthUpdateRequest: java.util.Collection getSignalThresholdInfos()>","<android.telephony.SignalStrengthUpdateRequest: java.util.Collection getSignalThresholdInfos()>"
"<java.lang.Class: boolean isAnnotation()>","<java.lang.Class: boolean isAnnotation()>"
"<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void <init>()>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void <init>()>"
"<java.lang.Byte: long toUnsignedLong(byte)>","<java.lang.Byte: long toUnsignedLong(byte)>"
"<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>","<android.view.View: void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>"
"<android.view.View: void onProvideStructure(android.view.ViewStructure)>","<android.view.View: void onProvideStructure(android.view.ViewStructure)>"
"<android.view.textclassifier.TextLanguage: java.lang.String getId()>","<android.view.textclassifier.TextLanguage: java.lang.String getId()>"
"<android.app.Person$Builder: android.app.Person build()>","<android.app.Person$Builder: android.app.Person build()>"
"<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>","<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>"
"<android.view.Window: void setMediaController(android.media.session.MediaController)>","<android.view.Window: void setMediaController(android.media.session.MediaController)>"
"<android.text.Layout: android.text.TextPaint getPaint()>","<android.text.Layout: android.text.TextPaint getPaint()>"
"<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<java.lang.reflect.Field: boolean isSynthetic()>","<java.lang.reflect.Field: boolean isSynthetic()>"
"<java.util.HashMap: boolean containsKey(java.lang.Object)>","<java.util.HashMap: boolean containsKey(java.lang.Object)>"
"<java.util.stream.Stream$Builder: java.util.stream.Stream build()>","<java.util.stream.Stream$Builder: java.util.stream.Stream build()>"
"<java.util.Locale$Category: void <clinit>()>","<java.util.Locale$Category: void <clinit>()>"
"<android.media.AudioPresentation: java.util.Locale getLocale()>","<android.media.AudioPresentation: java.util.Locale getLocale()>"
"<javax.security.auth.Subject: void <init>()>","<javax.security.auth.Subject: void <init>()>"
"<android.content.ContentResolver: void <init>(android.content.Context)>","<android.content.ContentResolver: void <init>(android.content.Context)>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream unordered()>","<java.util.stream.BaseStream: java.util.stream.BaseStream unordered()>"
"<android.view.View: void requestPointerCapture()>","<android.view.View: void requestPointerCapture()>"
"<android.media.AudioRecord: java.util.List getActiveMicrophones()>","<android.media.AudioRecord: java.util.List getActiveMicrophones()>"
"<java.lang.StringBuilder: void setCharAt(int,char)>","<java.lang.StringBuilder: void setCharAt(int,char)>"
"<android.view.textclassifier.ConversationActions$Request: void <init>()>","<android.view.textclassifier.ConversationActions$Request: void <init>()>"
"<java.io.IOException: void <init>(java.lang.String)>","<java.io.IOException: void <init>(java.lang.String)>"
"<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<java.time.temporal.TemporalUnit: boolean isSupportedBy(java.time.temporal.Temporal)>","<java.time.temporal.TemporalUnit: boolean isSupportedBy(java.time.temporal.Temporal)>"
"<android.view.View: void setAllowClickWhenDisabled(boolean)>","<android.view.View: void setAllowClickWhenDisabled(boolean)>"
"<java.lang.Boolean: boolean booleanValue()>","<java.lang.Boolean: boolean booleanValue()>"
"<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.content.pm.PackageInstaller$SessionInfo: void <clinit>()>","<android.content.pm.PackageInstaller$SessionInfo: void <clinit>()>"
"<java.io.PrintStream: boolean checkError()>","<java.io.PrintStream: boolean checkError()>"
"<android.view.Display: boolean isWideColorGamut()>","<android.view.Display: boolean isWideColorGamut()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setEntryName(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setEntryName(java.lang.String)>"
"<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)>","<android.view.ViewGroup$MarginLayoutParams: void setLayoutDirection(int)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler)>","<android.os.Message: android.os.Message obtain(android.os.Handler)>"
"<android.media.MediaPlayer: void setNextMediaPlayer(android.media.MediaPlayer)>","<android.media.MediaPlayer: void setNextMediaPlayer(android.media.MediaPlayer)>"
"<java.nio.channels.Pipe$SinkChannel: int validOps()>","<java.nio.channels.Pipe$SinkChannel: int validOps()>"
"<android.os.Debug: void changeDebugPort(int)>","<android.os.Debug: void changeDebugPort(int)>"
"<android.widget.Scroller: void abortAnimation()>","<android.widget.Scroller: void abortAnimation()>"
"<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>","<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>"
"<java.util.OptionalInt: java.util.OptionalInt empty()>","<java.util.OptionalInt: java.util.OptionalInt empty()>"
"<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>","<android.view.textclassifier.SelectionEvent: long getDurationSincePreviousEvent()>"
"<java.util.Deque: java.lang.Object removeFirst()>","<java.util.Deque: java.lang.Object removeFirst()>"
"<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>","<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>"
"<org.xmlpull.v1.XmlPullParser: boolean isWhitespace()>","<org.xmlpull.v1.XmlPullParser: boolean isWhitespace()>"
"<android.app.Activity: android.app.Dialog onCreateDialog(int)>","<android.app.Activity: android.app.Dialog onCreateDialog(int)>"
"<java.net.InetSocketAddress: java.lang.String getHostString()>","<java.net.InetSocketAddress: java.lang.String getHostString()>"
"<java.net.Socket: void connect(java.net.SocketAddress,int)>","<java.net.Socket: void connect(java.net.SocketAddress,int)>"
"<android.content.ClipDescription: android.os.PersistableBundle getExtras()>","<android.content.ClipDescription: android.os.PersistableBundle getExtras()>"
"<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setNext(android.content.AttributionSource)>","<android.content.AttributionSource$Builder: android.content.AttributionSource$Builder setNext(android.content.AttributionSource)>"
"<android.media.MediaFormat: boolean containsKey(java.lang.String)>","<android.media.MediaFormat: boolean containsKey(java.lang.String)>"
"<android.view.ViewGroup: void removeViewInLayout(android.view.View)>","<android.view.ViewGroup: void removeViewInLayout(android.view.View)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityNodeInfo getAnchor()>"
"<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>","<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>"
"<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface)>","<java.nio.channels.MulticastChannel: java.nio.channels.MembershipKey join(java.net.InetAddress,java.net.NetworkInterface)>"
"<android.widget.AbsListView: int getSolidColor()>","<android.widget.AbsListView: int getSolidColor()>"
"<android.content.ContextWrapper: java.lang.String getOpPackageName()>","<android.content.ContextWrapper: java.lang.String getOpPackageName()>"
"<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)>","<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.app.PendingIntent)>"
"<java.time.OffsetTime: java.time.ZoneOffset getOffset()>","<java.time.OffsetTime: java.time.ZoneOffset getOffset()>"
"<android.os.Debug: int getThreadExternalAllocCount()>","<android.os.Debug: int getThreadExternalAllocCount()>"
"<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>","<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>"
"<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>","<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>"
"<android.view.Display: boolean isHdr()>","<android.view.Display: boolean isHdr()>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraExtensionSession,int)>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureSequenceCompleted(android.hardware.camera2.CameraExtensionSession,int)>"
"<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextAfterCursor(int,int)>","<android.view.inputmethod.EditorInfo: java.lang.CharSequence getInitialTextAfterCursor(int,int)>"
"<java.io.PrintWriter: void print(float)>","<java.io.PrintWriter: void print(float)>"
"<android.widget.Toolbar: void setTitle(java.lang.CharSequence)>","<android.widget.Toolbar: void setTitle(java.lang.CharSequence)>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forList(int)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forList(int)>"
"<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>","<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>"
"<android.view.WindowInsetsAnimation: android.view.animation.Interpolator getInterpolator()>","<android.view.WindowInsetsAnimation: android.view.animation.Interpolator getInterpolator()>"
"<java.util.OptionalDouble: boolean isPresent()>","<java.util.OptionalDouble: boolean isPresent()>"
"<java.util.stream.IntStream: java.util.stream.LongStream asLongStream()>","<java.util.stream.IntStream: java.util.stream.LongStream asLongStream()>"
"<android.os.Parcel: void readBooleanArray(boolean[])>","<android.os.Parcel: void readBooleanArray(boolean[])>"
"<java.time.Month: int maxLength()>","<java.time.Month: int maxLength()>"
"<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>","<java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)>"
"<android.app.AlertDialog$Builder: void <init>(android.content.Context)>","<android.app.AlertDialog$Builder: void <init>(android.content.Context)>"
"<android.media.SyncParams: android.media.SyncParams allowDefaults()>","<android.media.SyncParams: android.media.SyncParams allowDefaults()>"
"<java.nio.IntBuffer: int[] array()>","<java.nio.IntBuffer: int[] array()>"
"<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>","<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>"
"<android.graphics.RenderNode: boolean setPosition(int,int,int,int)>","<android.graphics.RenderNode: boolean setPosition(int,int,int,int)>"
"<android.view.View: void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>","<android.view.View: void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)>"
"<android.view.MenuItem: char getNumericShortcut()>","<android.view.MenuItem: char getNumericShortcut()>"
"<java.lang.Double: boolean isInfinite()>","<java.lang.Double: boolean isInfinite()>"
"<android.view.WindowInsetsAnimation: void setFraction(float)>","<android.view.WindowInsetsAnimation: void setFraction(float)>"
"<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>","<java.util.Locale: java.lang.String getUnicodeLocaleType(java.lang.String)>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock()>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.FileLock tryLock()>"
"<android.media.MediaPlayer: void prepareDrm(java.util.UUID)>","<android.media.MediaPlayer: void prepareDrm(java.util.UUID)>"
"<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>","<java.nio.file.Path: boolean startsWith(java.nio.file.Path)>"
"<android.view.Display$Mode: int getModeId()>","<android.view.Display$Mode: int getModeId()>"
"<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()>","<android.graphics.fonts.Font: android.os.LocaleList getLocaleList()>"
"<java.lang.Long: long rotateLeft(long,int)>","<java.lang.Long: long rotateLeft(long,int)>"
"<java.util.Arrays: int compareUnsigned(short[],short[])>","<java.util.Arrays: int compareUnsigned(short[],short[])>"
"<android.hardware.Camera: int getNumberOfCameras()>","<android.hardware.Camera: int getNumberOfCameras()>"
"<java.time.OffsetTime: int get(java.time.temporal.TemporalField)>","<java.time.OffsetTime: int get(java.time.temporal.TemporalField)>"
"<android.telephony.TelephonyManager: int getActiveModemCount()>","<android.telephony.TelephonyManager: int getActiveModemCount()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
"<android.media.AudioRecordingMonitor: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>","<android.media.AudioRecordingMonitor: void unregisterAudioRecordingCallback(android.media.AudioManager$AudioRecordingCallback)>"
"<android.view.ViewStructure: void asyncCommit()>","<android.view.ViewStructure: void asyncCommit()>"
"<android.os.Vibrator: void vibrate(android.os.VibrationEffect)>","<android.os.Vibrator: void vibrate(android.os.VibrationEffect)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setText(java.lang.String)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setText(java.lang.String)>"
"<java.lang.reflect.Array: long getLong(java.lang.Object,int)>","<java.lang.reflect.Array: long getLong(java.lang.Object,int)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>","<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>"
"<java.lang.Thread: void dumpStack()>","<java.lang.Thread: void dumpStack()>"
"<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>","<android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)>"
"<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>"
"<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>","<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getSelectionMode()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: int getSelectionMode()>"
"<java.nio.file.FileStore: void <init>()>","<java.nio.file.FileStore: void <init>()>"
"<java.util.stream.LongStream: java.util.stream.LongStream sorted()>","<java.util.stream.LongStream: java.util.stream.LongStream sorted()>"
"<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>","<android.app.ActivityManager: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message$Builder setExtras(android.os.Bundle)>"
"<android.os.ParcelFileDescriptor: void <clinit>()>","<android.os.ParcelFileDescriptor: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>","<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>"
"<android.view.textclassifier.TextClassifier: void onSelectionEvent(android.view.textclassifier.SelectionEvent)>","<android.view.textclassifier.TextClassifier: void onSelectionEvent(android.view.textclassifier.SelectionEvent)>"
"<android.app.Activity: void setVisible(boolean)>","<android.app.Activity: void setVisible(boolean)>"
"<android.view.Display$HdrCapabilities: void <clinit>()>","<android.view.Display$HdrCapabilities: void <clinit>()>"
"<android.view.View: void buildLayer()>","<android.view.View: void buildLayer()>"
"<android.app.VoiceInteractor$AbortVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>","<android.app.VoiceInteractor$AbortVoiceRequest: void <init>(android.app.VoiceInteractor$Prompt,android.os.Bundle)>"
"<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>","<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>"
"<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>","<android.view.SurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>"
"<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>","<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>"
"<java.time.LocalDate: int get(java.time.temporal.TemporalField)>","<java.time.LocalDate: int get(java.time.temporal.TemporalField)>"
"<android.os.Parcel: java.io.Serializable readSerializable()>","<android.os.Parcel: java.io.Serializable readSerializable()>"
"<java.nio.LongBuffer: long get(int)>","<java.nio.LongBuffer: long get(int)>"
"<java.io.File: long lastModified()>","<java.io.File: long lastModified()>"
"<android.graphics.RecordingCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>"
"<android.media.session.MediaSession$Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>","<android.media.session.MediaSession$Callback: void onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
"<android.media.VolumeShaper$Configuration: java.lang.String toString()>","<android.media.VolumeShaper$Configuration: java.lang.String toString()>"
"<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>","<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>"
"<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>","<android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>","<java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
"<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>","<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>"
"<java.time.Duration: java.time.Duration ofMillis(long)>","<java.time.Duration: java.time.Duration ofMillis(long)>"
"<android.net.Uri: android.net.Uri normalizeScheme()>","<android.net.Uri: android.net.Uri normalizeScheme()>"
"<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>","<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>"
"<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>","<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>"
"<java.time.LocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<java.time.Duration: int toSecondsPart()>","<java.time.Duration: int toSecondsPart()>"
"<android.view.textclassifier.TextClassifierEvent: float[] getScores()>","<android.view.textclassifier.TextClassifierEvent: float[] getScores()>"
"<android.widget.Toolbar: void setContentInsetStartWithNavigation(int)>","<android.widget.Toolbar: void setContentInsetStartWithNavigation(int)>"
"<java.lang.Double: float floatValue()>","<java.lang.Double: float floatValue()>"
"<java.time.LocalTime: java.time.LocalTime of(int,int)>","<java.time.LocalTime: java.time.LocalTime of(int,int)>"
"<java.lang.reflect.Parameter: boolean equals(java.lang.Object)>","<java.lang.reflect.Parameter: boolean equals(java.lang.Object)>"
"<android.os.Parcel: java.util.ArrayList createBinderArrayList()>","<android.os.Parcel: java.util.ArrayList createBinderArrayList()>"
"<android.view.View: boolean onCheckIsTextEditor()>","<android.view.View: boolean onCheckIsTextEditor()>"
"<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>","<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>"
"<android.view.View: void setAutofillId(android.view.autofill.AutofillId)>","<android.view.View: void setAutofillId(android.view.autofill.AutofillId)>"
"<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>","<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>"
"<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.nio.ByteBuffer: short getShort(int)>","<java.nio.ByteBuffer: short getShort(int)>"
"<android.view.WindowInsets$Type: int navigationBars()>","<android.view.WindowInsets$Type: int navigationBars()>"
"<java.nio.ShortBuffer: int hashCode()>","<java.nio.ShortBuffer: int hashCode()>"
"<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>","<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>"
"<android.graphics.SurfaceTexture: void updateTexImage()>","<android.graphics.SurfaceTexture: void updateTexImage()>"
"<android.view.textclassifier.TextClassificationSessionId: int hashCode()>","<android.view.textclassifier.TextClassificationSessionId: int hashCode()>"
"<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
"<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>","<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>","<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>"
"<android.media.MediaDrmException: void <init>(java.lang.String)>","<android.media.MediaDrmException: void <init>(java.lang.String)>"
"<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>"
"<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>","<android.view.Window: void setSharedElementEnterTransition(android.transition.Transition)>"
"<java.time.temporal.ChronoUnit: void <clinit>()>","<java.time.temporal.ChronoUnit: void <clinit>()>"
"<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>","<java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>"
"<android.media.MediaDrm$PlaybackComponent: void setLogSessionId(android.media.metrics.LogSessionId)>","<android.media.MediaDrm$PlaybackComponent: void setLogSessionId(android.media.metrics.LogSessionId)>"
"<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>","<android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)>"
"<android.os.Debug: void startMethodTracing(java.lang.String)>","<android.os.Debug: void startMethodTracing(java.lang.String)>"
"<android.view.ContentInfo: android.net.Uri getLinkUri()>","<android.view.ContentInfo: android.net.Uri getLinkUri()>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>"
"<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>","<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence)>","<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence)>"
"<java.util.regex.Matcher: boolean matches()>","<java.util.regex.Matcher: boolean matches()>"
"<android.media.AudioMetadata$Format: void <clinit>()>","<android.media.AudioMetadata$Format: void <clinit>()>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>","<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>"
"<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>","<java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>"
"<android.content.ContextWrapper: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>","<android.content.ContextWrapper: android.content.Context createWindowContext(android.view.Display,int,android.os.Bundle)>"
"<java.util.Spliterator$OfDouble: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfDouble: java.util.Spliterator trySplit()>"
"<java.util.Hashtable: void clear()>","<java.util.Hashtable: void clear()>"
"<android.database.sqlite.SQLiteProgram: void bindNull(int)>","<android.database.sqlite.SQLiteProgram: void bindNull(int)>"
"<android.telephony.SignalStrength: int getLevel()>","<android.telephony.SignalStrength: int getLevel()>"
"<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>","<android.media.AudioManager: java.lang.String getProperty(java.lang.String)>"
"<android.widget.AdapterView: void setEmptyView(android.view.View)>","<android.widget.AdapterView: void setEmptyView(android.view.View)>"
"<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>","<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>"
"<java.security.Provider: void forEach(java.util.function.BiConsumer)>","<java.security.Provider: void forEach(java.util.function.BiConsumer)>"
"<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>","<java.util.stream.Stream: boolean noneMatch(java.util.function.Predicate)>"
"<android.view.accessibility.AccessibilityNodeProvider: void <init>()>","<android.view.accessibility.AccessibilityNodeProvider: void <init>()>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: int getRecommendedUseCase()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>","<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>"
"<android.media.session.MediaController$TransportControls: void prepare()>","<android.media.session.MediaController$TransportControls: void prepare()>"
"<android.app.ActionBar: void setDisplayOptions(int)>","<android.app.ActionBar: void setDisplayOptions(int)>"
"<android.net.Uri: java.lang.String getFragment()>","<android.net.Uri: java.lang.String getFragment()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
"<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>","<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>"
"<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setIncludeTextClassification(boolean)>","<android.view.textclassifier.TextSelection$Request$Builder: android.view.textclassifier.TextSelection$Request$Builder setIncludeTextClassification(boolean)>"
"<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>","<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>"
"<java.net.DatagramPacket: byte[] getData()>","<java.net.DatagramPacket: byte[] getData()>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.ZoneId)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.ZoneId)>"
"<org.xmlpull.v1.XmlPullParser: int getDepth()>","<org.xmlpull.v1.XmlPullParser: int getDepth()>"
"<android.widget.Filter: void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)>","<android.widget.Filter: void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults)>"
"<android.net.Uri: java.lang.String getPath()>","<android.net.Uri: java.lang.String getPath()>"
"<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(java.lang.String)>","<android.icu.util.ULocale: android.icu.util.ULocale createCanonical(java.lang.String)>"
"<java.util.Date: void <init>(java.lang.String)>","<java.util.Date: void <init>(java.lang.String)>"
"<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>","<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>"
"<android.view.textclassifier.TextLinks$Request: void <clinit>()>","<android.view.textclassifier.TextLinks$Request: void <clinit>()>"
"<java.lang.reflect.Field: void setInt(java.lang.Object,int)>","<java.lang.reflect.Field: void setInt(java.lang.Object,int)>"
"<android.os.VibrationAttributes: void <clinit>()>","<android.os.VibrationAttributes: void <clinit>()>"
"<java.io.File: int hashCode()>","<java.io.File: int hashCode()>"
"<android.view.textclassifier.ConversationActions$Message: int describeContents()>","<android.view.textclassifier.ConversationActions$Message: int describeContents()>"
"<android.view.accessibility.AccessibilityEvent: int getAction()>","<android.view.accessibility.AccessibilityEvent: int getAction()>"
"<android.graphics.Bitmap: boolean hasAlpha()>","<android.graphics.Bitmap: boolean hasAlpha()>"
"<android.content.ContextWrapper: void startActivity(android.content.Intent)>","<android.content.ContextWrapper: void startActivity(android.content.Intent)>"
"<java.lang.String: void <init>(char[])>","<java.lang.String: void <init>(char[])>"
"<android.graphics.RectF: float centerX()>","<android.graphics.RectF: float centerX()>"
"<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>","<javax.net.SocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)>"
"<android.widget.Toolbar: boolean isOverflowMenuShowing()>","<android.widget.Toolbar: boolean isOverflowMenuShowing()>"
"<android.os.Process: boolean supportsProcesses()>","<android.os.Process: boolean supportsProcesses()>"
"<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getHandwritingBounds()>","<android.view.inputmethod.EditorBoundsInfo: android.graphics.RectF getHandwritingBounds()>"
"<android.widget.ListAdapter: boolean isEnabled(int)>","<android.widget.ListAdapter: boolean isEnabled(int)>"
"<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>","<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>"
"<android.app.FragmentManager: void popBackStack(java.lang.String,int)>","<android.app.FragmentManager: void popBackStack(java.lang.String,int)>"
"<android.media.AudioRecord$OnRecordPositionUpdateListener: void onPeriodicNotification(android.media.AudioRecord)>","<android.media.AudioRecord$OnRecordPositionUpdateListener: void onPeriodicNotification(android.media.AudioRecord)>"
"<java.io.File: int compareTo(java.lang.Object)>","<java.io.File: int compareTo(java.lang.Object)>"
"<android.widget.AbsListView: void setSelectedChildViewEnabled(boolean)>","<android.widget.AbsListView: void setSelectedChildViewEnabled(boolean)>"
"<android.os.Parcel: byte[] readBlob()>","<android.os.Parcel: byte[] readBlob()>"
"<android.hardware.SensorManager: float[] getOrientation(float[],float[])>","<android.hardware.SensorManager: float[] getOrientation(float[],float[])>"
"<android.media.MediaSyncEvent: android.media.MediaSyncEvent setAudioSessionId(int)>","<android.media.MediaSyncEvent: android.media.MediaSyncEvent setAudioSessionId(int)>"
"<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>","<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>"
"<android.view.ViewStructure$HtmlInfo$Builder: void <init>()>","<android.view.ViewStructure$HtmlInfo$Builder: void <init>()>"
"<android.app.Activity: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>","<android.app.Activity: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>"
"<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.lang.Enum: java.lang.String toString()>","<java.lang.Enum: java.lang.String toString()>"
"<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>","<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>"
"<java.time.chrono.ChronoLocalDateTime: long toEpochSecond(java.time.ZoneOffset)>","<java.time.chrono.ChronoLocalDateTime: long toEpochSecond(java.time.ZoneOffset)>"
"<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>","<java.nio.charset.Charset: java.util.SortedMap availableCharsets()>"
"<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>","<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>"
"<java.util.Map: boolean isEmpty()>","<java.util.Map: boolean isEmpty()>"
"<android.view.View: void createContextMenu(android.view.ContextMenu)>","<android.view.View: void createContextMenu(android.view.ContextMenu)>"
"<android.os.ParcelFileDescriptor: void close()>","<android.os.ParcelFileDescriptor: void close()>"
"<android.view.Window$OnRestrictedCaptionAreaChangedListener: void onRestrictedCaptionAreaChanged(android.graphics.Rect)>","<android.view.Window$OnRestrictedCaptionAreaChangedListener: void onRestrictedCaptionAreaChanged(android.graphics.Rect)>"
"<android.net.ConnectivityManager: void setNetworkPreference(int)>","<android.net.ConnectivityManager: void setNetworkPreference(int)>"
"<android.view.View: java.lang.String[] getAutofillHints()>","<android.view.View: java.lang.String[] getAutofillHints()>"
"<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>"
"<java.util.regex.Pattern: java.lang.String pattern()>","<java.util.regex.Pattern: java.lang.String pattern()>"
"<android.net.Uri: java.lang.String encode(java.lang.String)>","<android.net.Uri: java.lang.String encode(java.lang.String)>"
"<android.net.NetworkRequest: java.lang.String toString()>","<android.net.NetworkRequest: java.lang.String toString()>"
"<java.util.Set: java.util.Set of()>","<java.util.Set: java.util.Set of()>"
"<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>","<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>"
"<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.telephony.PreciseDataConnectionState: void writeToParcel(android.os.Parcel,int)>","<android.telephony.PreciseDataConnectionState: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Window: void setClipToOutline(boolean)>","<android.view.Window: void setClipToOutline(boolean)>"
"<android.hardware.camera2.CaptureResult$Key: boolean equals(java.lang.Object)>","<android.hardware.camera2.CaptureResult$Key: boolean equals(java.lang.Object)>"
"<java.time.temporal.ChronoField: java.time.temporal.ChronoField valueOf(java.lang.String)>","<java.time.temporal.ChronoField: java.time.temporal.ChronoField valueOf(java.lang.String)>"
"<android.view.View: void setTransitionName(java.lang.String)>","<android.view.View: void setTransitionName(java.lang.String)>"
"<android.view.Window$OnFrameMetricsAvailableListener: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>","<android.view.Window$OnFrameMetricsAvailableListener: void onFrameMetricsAvailable(android.view.Window,android.view.FrameMetrics,int)>"
"<java.nio.IntBuffer: int get(int)>","<java.nio.IntBuffer: int get(int)>"
"<android.os.Bundle: float[] getFloatArray(java.lang.String)>","<android.os.Bundle: float[] getFloatArray(java.lang.String)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.DatagramChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.text.InputFilter$AllCaps: void <init>(java.util.Locale)>","<android.text.InputFilter$AllCaps: void <init>(java.util.Locale)>"
"<android.view.View: android.view.View findFocus()>","<android.view.View: android.view.View findFocus()>"
"<java.io.FilterOutputStream: void write(byte[],int,int)>","<java.io.FilterOutputStream: void write(byte[],int,int)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel bind(java.net.SocketAddress)>"
"<android.hardware.camera2.CameraCaptureSession: boolean supportsOfflineProcessing(android.view.Surface)>","<android.hardware.camera2.CameraCaptureSession: boolean supportsOfflineProcessing(android.view.Surface)>"
"<java.lang.Character: char forDigit(int,int)>","<java.lang.Character: char forDigit(int,int)>"
"<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: void <init>(java.lang.String,java.lang.String)>"
"<java.net.Inet4Address: java.lang.String getHostAddress()>","<java.net.Inet4Address: java.lang.String getHostAddress()>"
"<android.util.ArrayMap: java.lang.String toString()>","<android.util.ArrayMap: java.lang.String toString()>"
"<java.nio.charset.CodingErrorAction: void <init>()>","<java.nio.charset.CodingErrorAction: void <init>()>"
"<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>","<java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()>","<android.view.accessibility.AccessibilityRecord: int getScrollDeltaX()>"
"<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>","<java.lang.ClassLoader: void setClassAssertionStatus(java.lang.String,boolean)>"
"<java.time.chrono.Era: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>","<java.time.chrono.Era: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
"<android.view.View: void setFocusable(boolean)>","<android.view.View: void setFocusable(boolean)>"
"<android.view.ViewParent: void onStopNestedScroll(android.view.View)>","<android.view.ViewParent: void onStopNestedScroll(android.view.View)>"
"<android.view.animation.Animation: boolean hasEnded()>","<android.view.animation.Animation: boolean hasEnded()>"
"<android.os.LocaleList: void <clinit>()>","<android.os.LocaleList: void <clinit>()>"
"<android.view.View: boolean isPreferKeepClear()>","<android.view.View: boolean isPreferKeepClear()>"
"<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>"
"<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>","<android.widget.TextView: void setAutoSizeTextTypeUniformWithPresetSizes(int[],int)>"
"<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>","<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>"
"<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>","<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>"
"<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>","<android.hardware.SensorEventListener: void onAccuracyChanged(android.hardware.Sensor,int)>"
"<java.io.InputStream: byte[] readAllBytes()>","<java.io.InputStream: byte[] readAllBytes()>"
"<android.view.inputmethod.CorrectionInfo: void <clinit>()>","<android.view.inputmethod.CorrectionInfo: void <clinit>()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.LocalTime toLocalTime()>","<java.time.chrono.ChronoZonedDateTime: java.time.LocalTime toLocalTime()>"
"<android.app.Dialog: android.app.Activity getOwnerActivity()>","<android.app.Dialog: android.app.Activity getOwnerActivity()>"
"<java.lang.Math: int round(float)>","<java.lang.Math: int round(float)>"
"<java.text.ParsePosition: void <init>(int)>","<java.text.ParsePosition: void <init>(int)>"
"<java.io.File: boolean setWritable(boolean)>","<java.io.File: boolean setWritable(boolean)>"
"<android.net.ProxyInfo: java.lang.String getHost()>","<android.net.ProxyInfo: java.lang.String getHost()>"
"<android.telephony.TelephonyManager: java.util.List getUiccCardsInfo()>","<android.telephony.TelephonyManager: java.util.List getUiccCardsInfo()>"
"<android.content.pm.PackageManager: java.util.List queryActivityProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryActivityProperty(java.lang.String)>"
"<android.app.VoiceInteractor$Request: android.app.Activity getActivity()>","<android.app.VoiceInteractor$Request: android.app.Activity getActivity()>"
"<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>","<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>"
"<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>","<android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)>"
"<java.util.regex.MatchResult: java.lang.String group()>","<java.util.regex.MatchResult: java.lang.String group()>"
"<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>","<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>"
"<java.nio.IntBuffer: boolean equals(java.lang.Object)>","<java.nio.IntBuffer: boolean equals(java.lang.Object)>"
"<java.lang.ReflectiveOperationException: void <init>()>","<java.lang.ReflectiveOperationException: void <init>()>"
"<android.media.MediaDrm$CryptoSession: byte[] sign(byte[],byte[])>","<android.media.MediaDrm$CryptoSession: byte[] sign(byte[],byte[])>"
"<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.ConversationActions$Request: java.lang.String getCallingPackageName()>"
"<android.media.session.MediaController$PlaybackInfo: void <init>()>","<android.media.session.MediaController$PlaybackInfo: void <init>()>"
"<java.util.Arrays: int hashCode(boolean[])>","<java.util.Arrays: int hashCode(boolean[])>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureResultAvailable(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureResultAvailable(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>"
"<android.widget.AbsListView: void clearTextFilter()>","<android.widget.AbsListView: void clearTextFilter()>"
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>","<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.nio.charset.Charset)>"
"<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayCountry(java.lang.String,android.icu.util.ULocale)>"
"<java.lang.InterruptedException: void <init>()>","<java.lang.InterruptedException: void <init>()>"
"<java.time.LocalTime: int getMinute()>","<java.time.LocalTime: int getMinute()>"
"<java.util.OptionalDouble: java.util.stream.DoubleStream stream()>","<java.util.OptionalDouble: java.util.stream.DoubleStream stream()>"
"<java.time.DayOfWeek: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.DayOfWeek: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.media.MediaDrm: android.media.MediaDrm$PlaybackComponent getPlaybackComponent(byte[])>","<android.media.MediaDrm: android.media.MediaDrm$PlaybackComponent getPlaybackComponent(byte[])>"
"<java.nio.channels.Pipe$SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.Pipe$SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<android.graphics.RenderNode: boolean setRotationZ(float)>","<android.graphics.RenderNode: boolean setRotationZ(float)>"
"<android.view.textclassifier.TextClassifierEvent: int getEventCategory()>","<android.view.textclassifier.TextClassifierEvent: int getEventCategory()>"
"<java.util.IntSummaryStatistics: void <init>(long,int,int,long)>","<java.util.IntSummaryStatistics: void <init>(long,int,int,long)>"
"<android.content.ComponentName: java.lang.Object clone()>","<android.content.ComponentName: java.lang.Object clone()>"
"<android.graphics.Canvas: int save()>","<android.graphics.Canvas: int save()>"
"<android.content.IntentFilter$AuthorityEntry: boolean equals(java.lang.Object)>","<android.content.IntentFilter$AuthorityEntry: boolean equals(java.lang.Object)>"
"<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>","<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>"
"<android.hardware.SyncFence: void close()>","<android.hardware.SyncFence: void close()>"
"<android.view.SurfaceControl$Transaction: void <clinit>()>","<android.view.SurfaceControl$Transaction: void <clinit>()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>"
"<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int,android.view.inputmethod.TextAttribute)>","<android.view.inputmethod.InputConnection: boolean setComposingRegion(int,int,android.view.inputmethod.TextAttribute)>"
"<android.net.Uri: int hashCode()>","<android.net.Uri: int hashCode()>"
"<android.hardware.BatteryState: void <init>()>","<android.hardware.BatteryState: void <init>()>"
"<android.text.PrecomputedText: int length()>","<android.text.PrecomputedText: int length()>"
"<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category[] values()>","<android.icu.util.ULocale$Category: android.icu.util.ULocale$Category[] values()>"
"<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>"
"<java.net.InetSocketAddress: int hashCode()>","<java.net.InetSocketAddress: int hashCode()>"
"<android.media.AudioDeviceInfo: java.lang.String getAddress()>","<android.media.AudioDeviceInfo: java.lang.String getAddress()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: void <init>()>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: void <init>()>"
"<android.net.Uri: java.lang.String getEncodedQuery()>","<android.net.Uri: java.lang.String getEncodedQuery()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>"
"<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>","<java.net.SocketImpl: java.io.FileDescriptor getFileDescriptor()>"
"<java.time.DayOfWeek: java.time.DayOfWeek of(int)>","<java.time.DayOfWeek: java.time.DayOfWeek of(int)>"
"<android.content.res.Resources$Theme: boolean equals(java.lang.Object)>","<android.content.res.Resources$Theme: boolean equals(java.lang.Object)>"
"<android.hardware.display.DisplayManager$DisplayListener: void onDisplayAdded(int)>","<android.hardware.display.DisplayManager$DisplayListener: void onDisplayAdded(int)>"
"<android.telephony.BarringInfo$BarringServiceInfo: boolean isConditionallyBarred()>","<android.telephony.BarringInfo$BarringServiceInfo: boolean isConditionallyBarred()>"
"<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>","<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.util.Spliterator spliterator()>","<java.util.concurrent.ConcurrentLinkedQueue: java.util.Spliterator spliterator()>"
"<android.content.pm.FeatureGroupInfo: void <init>(android.content.pm.FeatureGroupInfo)>","<android.content.pm.FeatureGroupInfo: void <init>(android.content.pm.FeatureGroupInfo)>"
"<android.content.AttributionSource: void writeToParcel(android.os.Parcel,int)>","<android.content.AttributionSource: void writeToParcel(android.os.Parcel,int)>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>"
"<java.util.Arrays: int binarySearch(byte[],int,int,byte)>","<java.util.Arrays: int binarySearch(byte[],int,int,byte)>"
"<android.content.IntentFilter$MalformedMimeTypeException: void <init>()>","<android.content.IntentFilter$MalformedMimeTypeException: void <init>()>"
"<java.util.Collections: java.util.List emptyList()>","<java.util.Collections: java.util.List emptyList()>"
"<java.net.Proxy: int hashCode()>","<java.net.Proxy: int hashCode()>"
"<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>","<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>"
"<android.view.View$AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.View$AccessibilityDelegate: void addExtraDataToAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle unreflectGetter(java.lang.reflect.Field)>"
"<java.util.Arrays: void sort(float[])>","<java.util.Arrays: void sort(float[])>"
"<java.io.File: boolean isFile()>","<java.io.File: boolean isFile()>"
"<java.text.ParsePosition: java.lang.String toString()>","<java.text.ParsePosition: java.lang.String toString()>"
"<java.util.Map: void putAll(java.util.Map)>","<java.util.Map: void putAll(java.util.Map)>"
"<android.view.View: float getY()>","<android.view.View: float getY()>"
"<java.util.Hashtable: java.util.Set entrySet()>","<java.util.Hashtable: java.util.Set entrySet()>"
"<android.graphics.RectF: boolean intersect(android.graphics.RectF)>","<android.graphics.RectF: boolean intersect(android.graphics.RectF)>"
"<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>","<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>"
"<android.content.pm.SigningInfo: void <init>()>","<android.content.pm.SigningInfo: void <init>()>"
"<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>","<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.params.InputConfiguration getInputConfiguration()>"
"<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>","<java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>"
"<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>","<java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>"
"<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>","<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>"
"<android.view.Window: void setUiOptions(int)>","<android.view.Window: void setUiOptions(int)>"
"<android.media.MediaDrm: void removeAllSecureStops()>","<android.media.MediaDrm: void removeAllSecureStops()>"
"<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>","<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>"
"<android.hardware.lights.LightsRequest: void <init>()>","<android.hardware.lights.LightsRequest: void <init>()>"
"<java.time.LocalTime: java.time.LocalTime now()>","<java.time.LocalTime: java.time.LocalTime now()>"
"<android.graphics.Paint: void setColor(int)>","<android.graphics.Paint: void setColor(int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>"
"<android.view.View: int getForegroundGravity()>","<android.view.View: int getForegroundGravity()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setPrivacyIndicatorBounds(android.graphics.Rect)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setPrivacyIndicatorBounds(android.graphics.Rect)>"
"<java.time.chrono.Chronology: java.time.chrono.Chronology 'from'(java.time.temporal.TemporalAccessor)>","<java.time.chrono.Chronology: java.time.chrono.Chronology 'from'(java.time.temporal.TemporalAccessor)>"
"<android.view.View: boolean isNestedScrollingEnabled()>","<android.view.View: boolean isNestedScrollingEnabled()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>"
"<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>","<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Transition)>"
"<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>","<android.app.FragmentManager: android.app.FragmentTransaction beginTransaction()>"
"<android.content.pm.ChangedPackages: int getSequenceNumber()>","<android.content.pm.ChangedPackages: int getSequenceNumber()>"
"<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>","<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>"
"<android.app.Application: void onTerminate()>","<android.app.Application: void onTerminate()>"
"<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>","<java.nio.charset.Charset: void <init>(java.lang.String,java.lang.String[])>"
"<java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>","<java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>"
"<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSeamlessResizeEnabled(boolean)>","<android.app.PictureInPictureParams$Builder: android.app.PictureInPictureParams$Builder setSeamlessResizeEnabled(boolean)>"
"<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>","<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>"
"<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>","<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)>"
"<android.graphics.RenderNode: void discardDisplayList()>","<android.graphics.RenderNode: void discardDisplayList()>"
"<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>","<android.view.accessibility.AccessibilityRecord: int getMaxScrollY()>"
"<android.view.View: float getRotation()>","<android.view.View: float getRotation()>"
"<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>","<android.content.ContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>"
"<java.security.cert.CertPath: java.util.Iterator getEncodings()>","<java.security.cert.CertPath: java.util.Iterator getEncodings()>"
"<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>","<java.nio.CharBuffer: java.nio.CharBuffer get(char[])>"
"<android.widget.AbsListView: boolean isDrawSelectorOnTop()>","<android.widget.AbsListView: boolean isDrawSelectorOnTop()>"
"<android.media.session.MediaController$Callback: void onExtrasChanged(android.os.Bundle)>","<android.media.session.MediaController$Callback: void onExtrasChanged(android.os.Bundle)>"
"<android.view.accessibility.AccessibilityWindowInfo: void recycle()>","<android.view.accessibility.AccessibilityWindowInfo: void recycle()>"
"<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)>","<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)>"
"<java.time.Month: long getLong(java.time.temporal.TemporalField)>","<java.time.Month: long getLong(java.time.temporal.TemporalField)>"
"<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>","<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>"
"<android.animation.Animator: void removePauseListener(android.animation.Animator$AnimatorPauseListener)>","<android.animation.Animator: void removePauseListener(android.animation.Animator$AnimatorPauseListener)>"
"<android.view.WindowManager$LayoutParams: int getFitInsetsTypes()>","<android.view.WindowManager$LayoutParams: int getFitInsetsTypes()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char[])>"
"<android.util.Rational: double doubleValue()>","<android.util.Rational: double doubleValue()>"
"<java.io.PrintStream: void println(int)>","<java.io.PrintStream: void println(int)>"
"<android.app.Activity: void onGetDirectActions(android.os.CancellationSignal,java.util.function.Consumer)>","<android.app.Activity: void onGetDirectActions(android.os.CancellationSignal,java.util.function.Consumer)>"
"<android.database.sqlite.SQLiteDatabase: boolean isOpen()>","<android.database.sqlite.SQLiteDatabase: boolean isOpen()>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: void <clinit>()>"
"<java.time.chrono.ChronoPeriod: boolean isNegative()>","<java.time.chrono.ChronoPeriod: boolean isNegative()>"
"<android.os.VibrationEffect: void <clinit>()>","<android.os.VibrationEffect: void <clinit>()>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>","<android.hardware.Camera$Parameters: java.util.List getSupportedWhiteBalance()>"
"<android.content.pm.PackageInstaller$SessionInfo: int getOriginatingUid()>","<android.content.pm.PackageInstaller$SessionInfo: int getOriginatingUid()>"
"<android.graphics.RenderNode: boolean setRenderEffect(android.graphics.RenderEffect)>","<android.graphics.RenderNode: boolean setRenderEffect(android.graphics.RenderEffect)>"
"<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>","<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>"
"<android.hardware.camera2.CameraCaptureSession: android.view.Surface getInputSurface()>","<android.hardware.camera2.CameraCaptureSession: android.view.Surface getInputSurface()>"
"<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>","<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>"
"<android.net.SocketKeepalive$Callback: void onError(int)>","<android.net.SocketKeepalive$Callback: void onError(int)>"
"<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()>","<android.graphics.fonts.Font: android.graphics.fonts.FontVariationAxis[] getAxes()>"
"<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.app.FragmentManager: boolean popBackStackImmediate(int,int)>","<android.app.FragmentManager: boolean popBackStackImmediate(int,int)>"
"<java.lang.UnknownError: void <init>()>","<java.lang.UnknownError: void <init>()>"
"<android.view.KeyCharacterMap: boolean isPrintingKey(int)>","<android.view.KeyCharacterMap: boolean isPrintingKey(int)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream skip(long)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream skip(long)>"
"<java.lang.Package: void <init>()>","<java.lang.Package: void <init>()>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setImageFormat(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setImageFormat(int)>"
"<java.time.LocalDateTime: int getYear()>","<java.time.LocalDateTime: int getYear()>"
"<android.app.Activity: void setTitle(int)>","<android.app.Activity: void setTitle(int)>"
"<android.net.IpSecManager: void removeTransportModeTransforms(java.net.DatagramSocket)>","<android.net.IpSecManager: void removeTransportModeTransforms(java.net.DatagramSocket)>"
"<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayVariant(java.lang.String,java.lang.String)>"
"<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>","<java.net.URLConnection: java.lang.String getDefaultRequestProperty(java.lang.String)>"
"<android.telephony.SignalStrength: int getGsmBitErrorRate()>","<android.telephony.SignalStrength: int getGsmBitErrorRate()>"
"<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>","<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>"
"<java.lang.reflect.Constructor: int getModifiers()>","<java.lang.reflect.Constructor: int getModifiers()>"
"<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)>","<android.os.Debug: java.lang.String getRuntimeStat(java.lang.String)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>"
"<android.media.VolumeProvider: void <init>(int,int,int)>","<android.media.VolumeProvider: void <init>(int,int,int)>"
"<android.view.View: java.lang.CharSequence getStateDescription()>","<android.view.View: java.lang.CharSequence getStateDescription()>"
"<java.net.URLConnection: java.io.OutputStream getOutputStream()>","<java.net.URLConnection: java.io.OutputStream getOutputStream()>"
"<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setMandatorySystemGestureInsets(android.graphics.Insets)>","<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setMandatorySystemGestureInsets(android.graphics.Insets)>"
"<java.util.stream.DoubleStream: java.util.DoubleSummaryStatistics summaryStatistics()>","<java.util.stream.DoubleStream: java.util.DoubleSummaryStatistics summaryStatistics()>"
"<android.view.View: android.graphics.Matrix getMatrix()>","<android.view.View: android.graphics.Matrix getMatrix()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>"
"<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)>","<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)>"
"<android.view.translation.ViewTranslationResponse: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.ViewTranslationResponse: void writeToParcel(android.os.Parcel,int)>"
"<android.view.View: boolean isSelected()>","<android.view.View: boolean isSelected()>"
"<android.graphics.Matrix: void mapVectors(float[])>","<android.graphics.Matrix: void mapVectors(float[])>"
"<java.util.Locale: java.lang.String getExtension(char)>","<java.util.Locale: java.lang.String getExtension(char)>"
"<android.content.pm.Attribution: int getLabel()>","<android.content.pm.Attribution: int getLabel()>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction remove(android.app.Fragment)>"
"<android.content.ContentProvider: java.lang.String getWritePermission()>","<android.content.ContentProvider: java.lang.String getWritePermission()>"
"<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>","<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setExtras(android.os.Bundle)>"
"<android.app.Fragment: void onHiddenChanged(boolean)>","<android.app.Fragment: void onHiddenChanged(boolean)>"
"<android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>","<android.transition.TransitionManager: void endTransitions(android.view.ViewGroup)>"
"<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>","<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>"
"<android.widget.TextView: void setHint(int)>","<android.widget.TextView: void setHint(int)>"
"<android.media.AudioManager: void adjustVolume(int,int)>","<android.media.AudioManager: void adjustVolume(int,int)>"
"<android.widget.TextView: void setMinHeight(int)>","<android.widget.TextView: void setMinHeight(int)>"
"<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>","<java.util.stream.Collector: java.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector$Characteristics[])>"
"<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>","<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>"
"<java.nio.charset.CoderResult: boolean isOverflow()>","<java.nio.charset.CoderResult: boolean isOverflow()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>"
"<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>","<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>"
"<android.media.AudioDeviceInfo: int hashCode()>","<android.media.AudioDeviceInfo: int hashCode()>"
"<java.util.ArrayList: java.util.ListIterator listIterator()>","<java.util.ArrayList: java.util.ListIterator listIterator()>"
"<java.nio.channels.Selector: java.util.Set keys()>","<java.nio.channels.Selector: java.util.Set keys()>"
"<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()>","<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()>"
"<android.view.textclassifier.TextLinks$Request: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLinks$Request: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator)>","<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator)>"
"<android.view.ViewGroup: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>","<android.view.ViewGroup: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.function.Consumer)>"
"<android.app.Dialog: void onBackPressed()>","<android.app.Dialog: void onBackPressed()>"
"<java.util.Arrays: int compare(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: int compare(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setApnName(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setApnName(java.lang.String)>"
"<android.widget.TextView: boolean isPaddingOffsetRequired()>","<android.widget.TextView: boolean isPaddingOffsetRequired()>"
"<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener,android.os.Looper)>","<android.media.RemoteController: void <init>(android.content.Context,android.media.RemoteController$OnClientUpdateListener,android.os.Looper)>"
"<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayName(java.lang.String,java.lang.String)>"
"<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>","<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>"
"<android.view.KeyCharacterMap: void <init>()>","<android.view.KeyCharacterMap: void <init>()>"
"<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)>","<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)>"
"<android.content.ComponentName: java.lang.String getClassName()>","<android.content.ComponentName: java.lang.String getClassName()>"
"<android.media.session.PlaybackState$CustomAction: int describeContents()>","<android.media.session.PlaybackState$CustomAction: int describeContents()>"
"<android.transition.TransitionValues: java.lang.String toString()>","<android.transition.TransitionValues: java.lang.String toString()>"
"<java.util.Properties: void list(java.io.PrintWriter)>","<java.util.Properties: void list(java.io.PrintWriter)>"
"<java.time.ZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.view.textclassifier.TextLinks$Request$Builder: void <init>(java.lang.CharSequence)>","<android.view.textclassifier.TextLinks$Request$Builder: void <init>(java.lang.CharSequence)>"
"<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>","<android.widget.TextView: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>"
"<java.time.Clock: java.time.Clock tickMinutes(java.time.ZoneId)>","<java.time.Clock: java.time.Clock tickMinutes(java.time.ZoneId)>"
"<java.time.Duration: boolean isNegative()>","<java.time.Duration: boolean isNegative()>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>","<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandles$Lookup in(java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandles$Lookup in(java.lang.Class)>"
"<android.app.ActionBar: void setHomeAsUpIndicator(int)>","<android.app.ActionBar: void setHomeAsUpIndicator(int)>"
"<java.time.format.DecimalStyle: char getDecimalSeparator()>","<java.time.format.DecimalStyle: char getDecimalSeparator()>"
"<java.lang.reflect.Parameter: boolean isImplicit()>","<java.lang.reflect.Parameter: boolean isImplicit()>"
"<java.time.format.TextStyle: java.time.format.TextStyle asNormal()>","<java.time.format.TextStyle: java.time.format.TextStyle asNormal()>"
"<android.app.Fragment: void onDetach()>","<android.app.Fragment: void onDetach()>"
"<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)>","<android.os.Bundle: android.util.SizeF getSizeF(java.lang.String)>"
"<android.hardware.Camera: void cancelAutoFocus()>","<android.hardware.Camera: void cancelAutoFocus()>"
"<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>"
"<android.widget.RemoteViews: void addStableView(int,android.widget.RemoteViews,int)>","<android.widget.RemoteViews: void addStableView(int,android.widget.RemoteViews,int)>"
"<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>","<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>"
"<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.time.OffsetTime: int getMinute()>","<java.time.OffsetTime: int getMinute()>"
"<android.media.MediaMetadata: void <clinit>()>","<android.media.MediaMetadata: void <clinit>()>"
"<android.widget.AbsListView: void smoothScrollToPosition(int,int)>","<android.widget.AbsListView: void smoothScrollToPosition(int,int)>"
"<java.time.Month: void <init>(java.lang.String,int)>","<java.time.Month: void <init>(java.lang.String,int)>"
"<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>","<android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues,android.os.Bundle)>"
"<android.graphics.Color: int toArgb()>","<android.graphics.Color: int toArgb()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>"
"<java.util.PrimitiveIterator$OfInt: int nextInt()>","<java.util.PrimitiveIterator$OfInt: int nextInt()>"
"<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)>","<android.view.accessibility.AccessibilityRecord: void setScrollDeltaX(int)>"
"<java.util.Collection: boolean removeAll(java.util.Collection)>","<java.util.Collection: boolean removeAll(java.util.Collection)>"
"<android.media.session.PlaybackState$Builder: void <init>(android.media.session.PlaybackState)>","<android.media.session.PlaybackState$Builder: void <init>(android.media.session.PlaybackState)>"
"<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()>","<android.media.AudioRecordingConfiguration: android.media.AudioFormat getFormat()>"
"<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>","<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>"
"<android.view.View: android.view.animation.Animation getAnimation()>","<android.view.View: android.view.animation.Animation getAnimation()>"
"<java.util.stream.LongStream: java.util.stream.BaseStream parallel()>","<java.util.stream.LongStream: java.util.stream.BaseStream parallel()>"
"<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onInterceptTouchEvent(android.view.MotionEvent)>"
"<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer slice()>","<java.nio.ShortBuffer: java.nio.ShortBuffer slice()>"
"<android.os.Parcel: byte[] marshall()>","<android.os.Parcel: byte[] marshall()>"
"<android.view.InputDevice: java.lang.String getDescriptor()>","<android.view.InputDevice: java.lang.String getDescriptor()>"
"<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>","<android.view.ViewGroup: void setChildrenDrawingCacheEnabled(boolean)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.ZoneId)>"
"<java.lang.'annotation'.Annotation: int hashCode()>","<java.lang.'annotation'.Annotation: int hashCode()>"
"<android.media.MediaDrm$ErrorCodes: void <init>()>","<android.media.MediaDrm$ErrorCodes: void <init>()>"
"<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>","<android.view.ViewTreeObserver: void removeOnWindowAttachListener(android.view.ViewTreeObserver$OnWindowAttachListener)>"
"<java.nio.channels.SocketChannel: int validOps()>","<java.nio.channels.SocketChannel: int validOps()>"
"<java.util.Arrays: int mismatch(char[],char[])>","<java.util.Arrays: int mismatch(char[],char[])>"
"<android.telephony.TelephonyDisplayInfo: java.lang.String toString()>","<android.telephony.TelephonyDisplayInfo: java.lang.String toString()>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator ofArgb(int[])>","<android.animation.ValueAnimator: android.animation.ValueAnimator ofArgb(int[])>"
"<android.widget.TextView: java.util.Locale getTextLocale()>","<android.widget.TextView: java.util.Locale getTextLocale()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.CharSequence,int,int)>"
"<android.view.translation.ViewTranslationCallback: boolean onShowTranslation(android.view.View)>","<android.view.translation.ViewTranslationCallback: boolean onShowTranslation(android.view.View)>"
"<android.animation.ValueAnimator: boolean areAnimatorsEnabled()>","<android.animation.ValueAnimator: boolean areAnimatorsEnabled()>"
"<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>","<android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)>"
"<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>","<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>"
"<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>","<android.view.ViewGroup: void removeDetachedView(android.view.View,boolean)>"
"<android.app.Dialog: android.content.Context getContext()>","<android.app.Dialog: android.content.Context getContext()>"
"<android.graphics.Paint: boolean isFilterBitmap()>","<android.graphics.Paint: boolean isFilterBitmap()>"
"<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>","<android.content.Intent: android.content.Intent putExtras(android.content.Intent)>"
"<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>","<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>"
"<android.view.View: boolean isSaveEnabled()>","<android.view.View: boolean isSaveEnabled()>"
"<android.view.View: void setFitsSystemWindows(boolean)>","<android.view.View: void setFitsSystemWindows(boolean)>"
"<android.view.Window: void takeInputQueue(android.view.InputQueue$Callback)>","<android.view.Window: void takeInputQueue(android.view.InputQueue$Callback)>"
"<android.text.TextUtils: void <clinit>()>","<android.text.TextUtils: void <clinit>()>"
"<android.graphics.Canvas: boolean clipOutRect(int,int,int,int)>","<android.graphics.Canvas: boolean clipOutRect(int,int,int,int)>"
"<android.hardware.Camera$Parameters: void set(java.lang.String,int)>","<android.hardware.Camera$Parameters: void set(java.lang.String,int)>"
"<android.os.Handler: android.os.Message obtainMessage()>","<android.os.Handler: android.os.Message obtainMessage()>"
"<java.util.Map$Entry: int hashCode()>","<java.util.Map$Entry: int hashCode()>"
"<java.io.File: java.net.URL toURL()>","<java.io.File: java.net.URL toURL()>"
"<java.util.stream.IntStream: java.util.stream.Stream boxed()>","<java.util.stream.IntStream: java.util.stream.Stream boxed()>"
"<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>","<android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()>"
"<android.app.ActivityManager$RunningTaskInfo: void <init>()>","<android.app.ActivityManager$RunningTaskInfo: void <init>()>"
"<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>","<android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>"
"<android.graphics.Paint: int getFlags()>","<android.graphics.Paint: int getFlags()>"
"<java.util.Spliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfPrimitive: boolean tryAdvance(java.lang.Object)>"
"<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>","<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>"
"<java.lang.Math: float nextDown(float)>","<java.lang.Math: float nextDown(float)>"
"<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>","<android.graphics.drawable.Drawable: void getOutline(android.graphics.Outline)>"
"<java.time.temporal.ChronoField: void <init>(java.lang.String,int)>","<java.time.temporal.ChronoField: void <init>(java.lang.String,int)>"
"<android.content.ContentProvider: void setReadPermission(java.lang.String)>","<android.content.ContentProvider: void setReadPermission(java.lang.String)>"
"<java.nio.ShortBuffer: boolean isDirect()>","<java.nio.ShortBuffer: boolean isDirect()>"
"<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)>","<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,int)>"
"<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>"
"<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>","<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>"
"<android.hardware.camera2.CameraDevice: void close()>","<android.hardware.camera2.CameraDevice: void close()>"
"<android.view.WindowInsets: int getSystemWindowInsetRight()>","<android.view.WindowInsets: int getSystemWindowInsetRight()>"
"<android.graphics.text.LineBreakConfig: int hashCode()>","<android.graphics.text.LineBreakConfig: int hashCode()>"
"<android.view.View: int getScrollBarDefaultDelayBeforeFade()>","<android.view.View: int getScrollBarDefaultDelayBeforeFade()>"
"<android.widget.TextView: void onConfigurationChanged(android.content.res.Configuration)>","<android.widget.TextView: void onConfigurationChanged(android.content.res.Configuration)>"
"<java.util.regex.MatchResult: int end()>","<java.util.regex.MatchResult: int end()>"
"<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>","<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.util.Comparator: java.util.Comparator reversed()>","<java.util.Comparator: java.util.Comparator reversed()>"
"<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>","<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>"
"<android.view.Display: android.view.Display$Mode getMode()>","<android.view.Display: android.view.Display$Mode getMode()>"
"<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>","<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>"
"<android.hardware.Camera$Parameters: void getFocusDistances(float[])>","<android.hardware.Camera$Parameters: void getFocusDistances(float[])>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])>"
"<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>","<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>"
"<android.app.assist.AssistContent: void setWebUri(android.net.Uri)>","<android.app.assist.AssistContent: void setWebUri(android.net.Uri)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime now()>","<java.time.ZonedDateTime: java.time.ZonedDateTime now()>"
"<android.hardware.HardwareBuffer: int getHeight()>","<android.hardware.HardwareBuffer: int getHeight()>"
"<android.graphics.RenderNode: void <init>(java.lang.String)>","<android.graphics.RenderNode: void <init>(java.lang.String)>"
"<android.widget.Button: void <init>(android.content.Context)>","<android.widget.Button: void <init>(android.content.Context)>"
"<android.graphics.MaskFilter: void <init>()>","<android.graphics.MaskFilter: void <init>()>"
"<java.lang.IllegalAccessException: void <init>(java.lang.String)>","<java.lang.IllegalAccessException: void <init>(java.lang.String)>"
"<java.io.Console: java.io.Reader reader()>","<java.io.Console: java.io.Reader reader()>"
"<android.widget.TextView: boolean moveCursorToVisibleOffset()>","<android.widget.TextView: boolean moveCursorToVisibleOffset()>"
"<android.media.MediaFormat: boolean containsFeature(java.lang.String)>","<android.media.MediaFormat: boolean containsFeature(java.lang.String)>"
"<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)>","<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,java.util.concurrent.Executor,android.hardware.camera2.CameraDevice$StateCallback)>"
"<android.content.pm.FeatureInfo: int describeContents()>","<android.content.pm.FeatureInfo: int describeContents()>"
"<android.view.Window: void setTitleColor(int)>","<android.view.Window: void setTitleColor(int)>"
"<java.util.Collections: void shuffle(java.util.List,java.util.Random)>","<java.util.Collections: void shuffle(java.util.List,java.util.Random)>"
"<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model valueOf(java.lang.String)>","<android.graphics.ColorSpace$Model: android.graphics.ColorSpace$Model valueOf(java.lang.String)>"
"<android.graphics.drawable.Drawable: boolean setLevel(int)>","<android.graphics.drawable.Drawable: boolean setLevel(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()>"
"<android.widget.ListView: void layoutChildren()>","<android.widget.ListView: void layoutChildren()>"
"<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.os.Debug: void resetGlobalExternalAllocCount()>","<android.os.Debug: void resetGlobalExternalAllocCount()>"
"<java.lang.Integer: long toUnsignedLong(int)>","<java.lang.Integer: long toUnsignedLong(int)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(int)>"
"<android.net.ConnectivityManager: void unregisterNetworkCallback(android.app.PendingIntent)>","<android.net.ConnectivityManager: void unregisterNetworkCallback(android.app.PendingIntent)>"
"<java.time.ZonedDateTime: int getDayOfYear()>","<java.time.ZonedDateTime: int getDayOfYear()>"
"<java.util.stream.IntStream: java.util.stream.IntStream generate(java.util.function.IntSupplier)>","<java.util.stream.IntStream: java.util.stream.IntStream generate(java.util.function.IntSupplier)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isShowingHintText()>"
"<android.app.LoaderManager: android.content.Loader getLoader(int)>","<android.app.LoaderManager: android.content.Loader getLoader(int)>"
"<java.io.PrintStream: java.lang.Appendable append(char)>","<java.io.PrintStream: java.lang.Appendable append(char)>"
"<android.view.inputmethod.InputMethodSubtype: int getNameResId()>","<android.view.inputmethod.InputMethodSubtype: int getNameResId()>"
"<java.util.Collections: java.util.List unmodifiableList(java.util.List)>","<java.util.Collections: java.util.List unmodifiableList(java.util.List)>"
"<android.os.Parcel: void writeBlob(byte[],int,int)>","<android.os.Parcel: void writeBlob(byte[],int,int)>"
"<java.util.Arrays: void sort(int[],int,int)>","<java.util.Arrays: void sort(int[],int,int)>"
"<android.content.BroadcastReceiver: void clearAbortBroadcast()>","<android.content.BroadcastReceiver: void clearAbortBroadcast()>"
"<android.window.SplashScreen: void setOnExitAnimationListener(android.window.SplashScreen$OnExitAnimationListener)>","<android.window.SplashScreen: void setOnExitAnimationListener(android.window.SplashScreen$OnExitAnimationListener)>"
"<java.util.concurrent.Future: boolean isDone()>","<java.util.concurrent.Future: boolean isDone()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassifier$EntityConfig: void writeToParcel(android.os.Parcel,int)>"
"<android.content.Loader: void forceLoad()>","<android.content.Loader: void forceLoad()>"
"<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>","<android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)>"
"<android.net.IpSecManager$UdpEncapsulationSocket: void finalize()>","<android.net.IpSecManager$UdpEncapsulationSocket: void finalize()>"
"<android.media.AudioManager: void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)>","<android.media.AudioManager: void unregisterAudioDeviceCallback(android.media.AudioDeviceCallback)>"
"<android.view.View: android.view.ViewParent getParentForAccessibility()>","<android.view.View: android.view.ViewParent getParentForAccessibility()>"
"<java.util.Date: long parse(java.lang.String)>","<java.util.Date: long parse(java.lang.String)>"
"<android.graphics.Canvas: void restore()>","<android.graphics.Canvas: void restore()>"
"<java.util.Collections: java.util.SortedMap emptySortedMap()>","<java.util.Collections: java.util.SortedMap emptySortedMap()>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setDuration(long)>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.OffsetDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<java.util.concurrent.Semaphore: boolean tryAcquire()>","<java.util.concurrent.Semaphore: boolean tryAcquire()>"
"<android.media.MediaFormat: void setFeatureEnabled(java.lang.String,boolean)>","<android.media.MediaFormat: void setFeatureEnabled(java.lang.String,boolean)>"
"<android.view.MotionEvent: int getHistorySize()>","<android.view.MotionEvent: int getHistorySize()>"
"<java.net.Inet4Address: boolean isLinkLocalAddress()>","<java.net.Inet4Address: boolean isLinkLocalAddress()>"
"<android.graphics.RectF: void offsetTo(float,float)>","<android.graphics.RectF: void offsetTo(float,float)>"
"<java.util.Arrays: void parallelSort(char[],int,int)>","<java.util.Arrays: void parallelSort(char[],int,int)>"
"<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>","<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>"
"<android.app.Dialog: void invalidateOptionsMenu()>","<android.app.Dialog: void invalidateOptionsMenu()>"
"<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutesSeconds(int,int,int)>","<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutesSeconds(int,int,int)>"
"<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()>","<android.hardware.Camera$Parameters: int getJpegThumbnailQuality()>"
"<android.database.Cursor: void deactivate()>","<android.database.Cursor: void deactivate()>"
"<android.graphics.Canvas: void setDensity(int)>","<android.graphics.Canvas: void setDensity(int)>"
"<android.media.AudioManager: boolean isMicrophoneMute()>","<android.media.AudioManager: boolean isMicrophoneMute()>"
"<java.nio.charset.CoderResult: boolean isMalformed()>","<java.nio.charset.CoderResult: boolean isMalformed()>"
"<java.text.AttributedCharacterIterator: int getRunStart(java.util.Set)>","<java.text.AttributedCharacterIterator: int getRunStart(java.util.Set)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>"
"<android.view.MenuItem: boolean isCheckable()>","<android.view.MenuItem: boolean isCheckable()>"
"<android.net.RouteInfo: java.net.InetAddress getGateway()>","<android.net.RouteInfo: java.net.InetAddress getGateway()>"
"<java.nio.DoubleBuffer: int arrayOffset()>","<java.nio.DoubleBuffer: int arrayOffset()>"
"<android.hardware.camera2.params.MeteringRectangle: int getWidth()>","<android.hardware.camera2.params.MeteringRectangle: int getWidth()>"
"<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>","<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>"
"<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>","<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>"
"<android.os.BaseBundle: void putDouble(java.lang.String,double)>","<android.os.BaseBundle: void putDouble(java.lang.String,double)>"
"<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>","<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>"
"<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>","<android.app.PendingIntent: android.os.UserHandle getCreatorUserHandle()>"
"<android.media.MediaPlayer$ProvisioningServerErrorException: void <init>(java.lang.String)>","<android.media.MediaPlayer$ProvisioningServerErrorException: void <init>(java.lang.String)>"
"<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>","<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char,int)>"
"<java.util.Hashtable: void <init>(java.util.Map)>","<java.util.Hashtable: void <init>(java.util.Map)>"
"<java.net.URLConnection: java.io.InputStream getInputStream()>","<java.net.URLConnection: java.io.InputStream getInputStream()>"
"<android.content.pm.PackageManager$PackageInfoFlags: android.content.pm.PackageManager$PackageInfoFlags of(long)>","<android.content.pm.PackageManager$PackageInfoFlags: android.content.pm.PackageManager$PackageInfoFlags of(long)>"
"<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>","<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)>"
"<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>","<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>"
"<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>","<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>"
"<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>","<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>"
"<android.app.Activity: void openOptionsMenu()>","<android.app.Activity: void openOptionsMenu()>"
"<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>","<android.media.PlaybackParams: android.media.PlaybackParams allowDefaults()>"
"<android.graphics.Paint: float getTextScaleX()>","<android.graphics.Paint: float getTextScaleX()>"
"<java.util.Enumeration: boolean hasMoreElements()>","<java.util.Enumeration: boolean hasMoreElements()>"
"<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)>","<android.hardware.SensorDirectChannel: int configure(android.hardware.Sensor,int)>"
"<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>","<java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>"
"<java.lang.Class: java.lang.String getName()>","<java.lang.Class: java.lang.String getName()>"
"<java.time.Period: boolean equals(java.lang.Object)>","<java.time.Period: boolean equals(java.lang.Object)>"
"<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>","<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>"
"<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>","<android.widget.TextView: void setKeyListener(android.text.method.KeyListener)>"
"<android.content.res.Resources: int[] getIntArray(int)>","<android.content.res.Resources: int[] getIntArray(int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>","<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>"
"<android.media.SubtitleData: long getStartTimeUs()>","<android.media.SubtitleData: long getStartTimeUs()>"
"<android.media.session.MediaSession$QueueItem: boolean equals(java.lang.Object)>","<android.media.session.MediaSession$QueueItem: boolean equals(java.lang.Object)>"
"<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>","<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>"
"<android.os.Bundle: void readFromParcel(android.os.Parcel)>","<android.os.Bundle: void readFromParcel(android.os.Parcel)>"
"<android.view.InflateException: void <init>(java.lang.Throwable)>","<android.view.InflateException: void <init>(java.lang.Throwable)>"
"<android.media.AudioTrack: int getNativeOutputSampleRate(int)>","<android.media.AudioTrack: int getNativeOutputSampleRate(int)>"
"<java.time.chrono.AbstractChronology: int compareTo(java.time.chrono.Chronology)>","<java.time.chrono.AbstractChronology: int compareTo(java.time.chrono.Chronology)>"
"<android.media.MediaDrm$OnKeyStatusChangeListener: void onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)>","<android.media.MediaDrm$OnKeyStatusChangeListener: void onKeyStatusChange(android.media.MediaDrm,byte[],java.util.List,boolean)>"
"<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.app.ActivityManager$RecentTaskInfo: int describeContents()>","<android.app.ActivityManager$RecentTaskInfo: int describeContents()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findGetter(java.lang.Class,java.lang.String,java.lang.Class)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findGetter(java.lang.Class,java.lang.String,java.lang.Class)>"
"<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet)>"
"<java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>","<java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>"
"<android.content.Intent: android.content.Intent addCategory(java.lang.String)>","<android.content.Intent: android.content.Intent addCategory(java.lang.String)>"
"<android.content.ContextWrapper: void revokeSelfPermissionsOnKill(java.util.Collection)>","<android.content.ContextWrapper: void revokeSelfPermissionsOnKill(java.util.Collection)>"
"<java.lang.String: void <init>(byte[],int,int,int)>","<java.lang.String: void <init>(byte[],int,int,int)>"
"<java.util.AbstractList: boolean equals(java.lang.Object)>","<java.util.AbstractList: boolean equals(java.lang.Object)>"
"<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getLabeledBy()>"
"<java.time.LocalTime: java.time.LocalTime withNano(int)>","<java.time.LocalTime: java.time.LocalTime withNano(int)>"
"<java.net.DatagramSocket: boolean getReuseAddress()>","<java.net.DatagramSocket: boolean getReuseAddress()>"
"<android.content.BroadcastReceiver: void setResultCode(int)>","<android.content.BroadcastReceiver: void setResultCode(int)>"
"<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>","<android.view.Window: void setAllowEnterTransitionOverlap(boolean)>"
"<java.io.PrintStream: void print(int)>","<java.io.PrintStream: void print(int)>"
"<android.content.pm.PackageManager: java.util.List queryApplicationProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryApplicationProperty(java.lang.String)>"
"<android.widget.TextView: void setLinkTextColor(int)>","<android.widget.TextView: void setLinkTextColor(int)>"
"<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)>","<android.view.textclassifier.TextLanguage: float getConfidenceScore(android.icu.util.ULocale)>"
"<android.app.VoiceInteractor$Request: void onAttached(android.app.Activity)>","<android.app.VoiceInteractor$Request: void onAttached(android.app.Activity)>"
"<android.view.Window: void setElevation(float)>","<android.view.Window: void setElevation(float)>"
"<android.os.Parcel: void writeString(java.lang.String)>","<android.os.Parcel: void writeString(java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>","<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)>"
"<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>","<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()>"
"<java.util.DoubleSummaryStatistics: double getSum()>","<java.util.DoubleSummaryStatistics: double getSum()>"
"<android.graphics.Bitmap: void eraseColor(int)>","<android.graphics.Bitmap: void eraseColor(int)>"
"<android.widget.AbsListView: void setFastScrollStyle(int)>","<android.widget.AbsListView: void setFastScrollStyle(int)>"
"<android.os.Vibrator: int getId()>","<android.os.Vibrator: int getId()>"
"<android.widget.TextView: android.os.LocaleList getTextLocales()>","<android.widget.TextView: android.os.LocaleList getTextLocales()>"
"<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()>","<android.media.AudioRecordingConfiguration: android.media.AudioDeviceInfo getAudioDevice()>"
"<java.util.LongSummaryStatistics: long getSum()>","<java.util.LongSummaryStatistics: long getSum()>"
"<android.os.BaseBundle: void putLong(java.lang.String,long)>","<android.os.BaseBundle: void putLong(java.lang.String,long)>"
"<java.util.List: void clear()>","<java.util.List: void clear()>"
"<java.time.OffsetTime: int getHour()>","<java.time.OffsetTime: int getHour()>"
"<android.view.RoundedCorner: void writeToParcel(android.os.Parcel,int)>","<android.view.RoundedCorner: void writeToParcel(android.os.Parcel,int)>"
"<android.view.Display$Mode: float[] getAlternativeRefreshRates()>","<android.view.Display$Mode: float[] getAlternativeRefreshRates()>"
"<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>","<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>"
"<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>","<android.hardware.camera2.params.OutputConfiguration: void <init>(android.view.Surface)>"
"<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>","<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>"
"<java.time.Clock: java.time.ZoneId getZone()>","<java.time.Clock: java.time.ZoneId getZone()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<java.time.LocalDate: int getDayOfYear()>","<java.time.LocalDate: int getDayOfYear()>"
"<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>","<android.animation.Animator$AnimatorListener: void onAnimationStart(android.animation.Animator,boolean)>"
"<java.security.cert.Certificate: byte[] getEncoded()>","<java.security.cert.Certificate: byte[] getEncoded()>"
"<java.time.zone.ZoneOffsetTransition: boolean isValidOffset(java.time.ZoneOffset)>","<java.time.zone.ZoneOffsetTransition: boolean isValidOffset(java.time.ZoneOffset)>"
"<java.lang.Character$Subset: boolean equals(java.lang.Object)>","<java.lang.Character$Subset: boolean equals(java.lang.Object)>"
"<java.util.Arrays: boolean equals(byte[],int,int,byte[],int,int)>","<java.util.Arrays: boolean equals(byte[],int,int,byte[],int,int)>"
"<android.database.Cursor: boolean moveToPosition(int)>","<android.database.Cursor: boolean moveToPosition(int)>"
"<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>","<android.media.Image$Plane: java.nio.ByteBuffer getBuffer()>"
"<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getKeywordValue(java.lang.String,java.lang.String)>"
"<android.view.WindowInsetsAnimationController: boolean isFinished()>","<android.view.WindowInsetsAnimationController: boolean isFinished()>"
"<java.nio.ShortBuffer: boolean hasArray()>","<java.nio.ShortBuffer: boolean hasArray()>"
"<java.util.Arrays: boolean equals(char[],int,int,char[],int,int)>","<java.util.Arrays: boolean equals(char[],int,int,char[],int,int)>"
"<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>","<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>"
"<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>","<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>"
"<java.time.format.ResolverStyle: void <clinit>()>","<java.time.format.ResolverStyle: void <clinit>()>"
"<java.nio.channels.DatagramChannel: int validOps()>","<java.nio.channels.DatagramChannel: int validOps()>"
"<android.widget.TextView: void setSelected(boolean)>","<android.widget.TextView: void setSelected(boolean)>"
"<android.content.pm.PackageManager: int getPackageUid(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>","<android.content.pm.PackageManager: int getPackageUid(java.lang.String,android.content.pm.PackageManager$PackageInfoFlags)>"
"<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>","<android.transition.TransitionManager: void setTransition(android.transition.Scene,android.transition.Scene,android.transition.Transition)>"
"<android.widget.AbsListView: float getBottomFadingEdgeStrength()>","<android.widget.AbsListView: float getBottomFadingEdgeStrength()>"
"<android.widget.RemoteViews: void <clinit>()>","<android.widget.RemoteViews: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo getCollectionItemInfo()>"
"<android.view.View: void setSaveFromParentEnabled(boolean)>","<android.view.View: void setSaveFromParentEnabled(boolean)>"
"<android.animation.Keyframe: boolean hasValue()>","<android.animation.Keyframe: boolean hasValue()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>"
"<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)>","<android.view.textclassifier.SelectionEvent: boolean isTerminal(int)>"
"<android.icu.util.ULocale: java.util.Set getUnicodeLocaleAttributes()>","<android.icu.util.ULocale: java.util.Set getUnicodeLocaleAttributes()>"
"<java.util.List: boolean addAll(java.util.Collection)>","<java.util.List: boolean addAll(java.util.Collection)>"
"<android.hardware.SensorManager: boolean flush(android.hardware.SensorEventListener)>","<android.hardware.SensorManager: boolean flush(android.hardware.SensorEventListener)>"
"<java.lang.String: boolean contains(java.lang.CharSequence)>","<java.lang.String: boolean contains(java.lang.CharSequence)>"
"<android.net.IpSecAlgorithm: void <clinit>()>","<android.net.IpSecAlgorithm: void <clinit>()>"
"<java.util.AbstractList: java.util.Iterator iterator()>","<java.util.AbstractList: java.util.Iterator iterator()>"
"<java.util.stream.IntStream: java.util.stream.IntStream skip(long)>","<java.util.stream.IntStream: java.util.stream.IntStream skip(long)>"
"<java.time.OffsetTime: java.time.LocalTime toLocalTime()>","<java.time.OffsetTime: java.time.LocalTime toLocalTime()>"
"<android.hardware.camera2.CameraOfflineSession: void <init>()>","<android.hardware.camera2.CameraOfflineSession: void <init>()>"
"<java.time.chrono.ChronoLocalDate: int lengthOfMonth()>","<java.time.chrono.ChronoLocalDate: int lengthOfMonth()>"
"<android.content.IntentSender: void <clinit>()>","<android.content.IntentSender: void <clinit>()>"
"<android.content.pm.PackageInstaller: void uninstall(java.lang.String,android.content.IntentSender)>","<android.content.pm.PackageInstaller: void uninstall(java.lang.String,android.content.IntentSender)>"
"<android.view.ViewParent: boolean canResolveTextDirection()>","<android.view.ViewParent: boolean canResolveTextDirection()>"
"<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>","<android.content.pm.PackageInstaller$SessionInfo: android.os.UserHandle getUser()>"
"<java.util.stream.LongStream: java.util.Iterator iterator()>","<java.util.stream.LongStream: java.util.Iterator iterator()>"
"<android.os.VibratorManager: void cancel()>","<android.os.VibratorManager: void cancel()>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,int)>"
"<android.widget.TextView: void setAllCaps(boolean)>","<android.widget.TextView: void setAllCaps(boolean)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int,android.view.textclassifier.TextClassification)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionActionEvent(int,int,int,android.view.textclassifier.TextClassification)>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration)>","<android.media.AudioRecord$Builder: android.media.AudioRecord$Builder setAudioPlaybackCaptureConfig(android.media.AudioPlaybackCaptureConfiguration)>"
"<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>","<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>"
"<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>","<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>"
"<java.util.OptionalLong: long orElseThrow()>","<java.util.OptionalLong: long orElseThrow()>"
"<android.os.Bundle: short getShort(java.lang.String)>","<android.os.Bundle: short getShort(java.lang.String)>"
"<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)>","<android.hardware.HardwareBuffer: boolean isSupported(int,int,int,int,long)>"
"<java.time.Duration: long toDaysPart()>","<java.time.Duration: long toDaysPart()>"
"<java.util.concurrent.Callable: java.lang.Object call()>","<java.util.concurrent.Callable: java.lang.Object call()>"
"<android.content.Intent: float getFloatExtra(java.lang.String,float)>","<android.content.Intent: float getFloatExtra(java.lang.String,float)>"
"<android.net.ConnectivityManager: android.net.Network getActiveNetwork()>","<android.net.ConnectivityManager: android.net.Network getActiveNetwork()>"
"<android.telephony.TelephonyManager: int getPhoneType()>","<android.telephony.TelephonyManager: int getPhoneType()>"
"<android.app.Fragment: void onAttach(android.content.Context)>","<android.app.Fragment: void onAttach(android.content.Context)>"
"<android.view.Menu: void clear()>","<android.view.Menu: void clear()>"
"<android.view.ContextThemeWrapper: void setTheme(int)>","<android.view.ContextThemeWrapper: void setTheme(int)>"
"<android.view.View: int getLabelFor()>","<android.view.View: int getLabelFor()>"
"<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>","<android.view.View: android.view.View$AccessibilityDelegate getAccessibilityDelegate()>"
"<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>","<android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)>"
"<java.util.Arrays: int compare(java.lang.Comparable[],int,int,java.lang.Comparable[],int,int)>","<java.util.Arrays: int compare(java.lang.Comparable[],int,int,java.lang.Comparable[],int,int)>"
"<android.media.audiofx.AudioEffect: boolean getEnabled()>","<android.media.audiofx.AudioEffect: boolean getEnabled()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>"
"<android.widget.MediaController$MediaPlayerControl: void pause()>","<android.widget.MediaController$MediaPlayerControl: void pause()>"
"<java.time.format.DecimalStyle: char getNegativeSign()>","<java.time.format.DecimalStyle: char getNegativeSign()>"
"<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>","<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>"
"<java.lang.Object: void wait(long)>","<java.lang.Object: void wait(long)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>","<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])>"
"<android.view.KeyEvent: void startTracking()>","<android.view.KeyEvent: void startTracking()>"
"<android.widget.AbsListView: boolean hasTextFilter()>","<android.widget.AbsListView: boolean hasTextFilter()>"
"<android.util.Rational: int hashCode()>","<android.util.Rational: int hashCode()>"
"<java.util.AbstractList: java.util.List subList(int,int)>","<java.util.AbstractList: java.util.List subList(int,int)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder setBitmapDimensionLimit(int)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder setBitmapDimensionLimit(int)>"
"<android.media.MediaTimestamp: void <clinit>()>","<android.media.MediaTimestamp: void <clinit>()>"
"<java.util.Collections: java.util.Set emptySet()>","<java.util.Collections: java.util.Set emptySet()>"
"<android.view.ViewGroup: void removeAllViewsInLayout()>","<android.view.ViewGroup: void removeAllViewsInLayout()>"
"<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>","<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>"
"<java.net.URLConnection: void setAllowUserInteraction(boolean)>","<java.net.URLConnection: void setAllowUserInteraction(boolean)>"
"<android.app.VoiceInteractor$PickOptionRequest$Option: void writeToParcel(android.os.Parcel,int)>","<android.app.VoiceInteractor$PickOptionRequest$Option: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Parcel: void readBinderArray(android.os.IBinder[])>","<android.os.Parcel: void readBinderArray(android.os.IBinder[])>"
"<android.view.textclassifier.TextSelection: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextSelection: void writeToParcel(android.os.Parcel,int)>"
"<android.media.audiofx.AudioEffect: void <clinit>()>","<android.media.audiofx.AudioEffect: void <clinit>()>"
"<android.content.ComponentName: java.lang.String toString()>","<android.content.ComponentName: java.lang.String toString()>"
"<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.GeneralSecurityException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetEnd(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetEnd(int,int)>"
"<android.content.IntentFilter: boolean hasAction(java.lang.String)>","<android.content.IntentFilter: boolean hasAction(java.lang.String)>"
"<java.time.temporal.ValueRange: int hashCode()>","<java.time.temporal.ValueRange: int hashCode()>"
"<android.media.MediaPlayer: int getVideoWidth()>","<android.media.MediaPlayer: int getVideoWidth()>"
"<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>","<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>"
"<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>","<android.view.ViewGroup: void onLayout(boolean,int,int,int,int)>"
"<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType valueOf(java.lang.String)>","<java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType valueOf(java.lang.String)>"
"<java.util.Iterator: boolean hasNext()>","<java.util.Iterator: boolean hasNext()>"
"<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>","<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>"
"<java.lang.Character: char reverseBytes(char)>","<java.lang.Character: char reverseBytes(char)>"
"<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>","<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>"
"<java.net.ContentHandler: void <init>()>","<java.net.ContentHandler: void <init>()>"
"<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>","<android.view.MenuItem: android.view.MenuItem setNumericShortcut(char)>"
"<android.database.ContentObserver: boolean deliverSelfNotifications()>","<android.database.ContentObserver: boolean deliverSelfNotifications()>"
"<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>","<android.os.Parcel: android.os.PersistableBundle readPersistableBundle(java.lang.ClassLoader)>"
"<java.util.function.DoubleConsumer: void accept(double)>","<java.util.function.DoubleConsumer: void accept(double)>"
"<android.app.VoiceInteractor$PickOptionRequest: void onPickOptionResult(boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>","<android.app.VoiceInteractor$PickOptionRequest: void onPickOptionResult(boolean,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
"<android.widget.ListView: void setCacheColorHint(int)>","<android.widget.ListView: void setCacheColorHint(int)>"
"<java.time.temporal.ChronoField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>","<java.time.temporal.ChronoField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
"<java.nio.FloatBuffer: boolean hasArray()>","<java.nio.FloatBuffer: boolean hasArray()>"
"<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>","<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>"
"<android.media.MediaFormat: boolean getFeatureEnabled(java.lang.String)>","<android.media.MediaFormat: boolean getFeatureEnabled(java.lang.String)>"
"<android.app.Fragment: android.transition.Transition getEnterTransition()>","<android.app.Fragment: android.transition.Transition getEnterTransition()>"
"<android.app.PendingIntent: boolean isActivity()>","<android.app.PendingIntent: boolean isActivity()>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)>"
"<java.lang.System: void load(java.lang.String)>","<java.lang.System: void load(java.lang.String)>"
"<android.util.Rational: int intValue()>","<android.util.Rational: int intValue()>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioAttributes(android.media.AudioAttributes)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setAudioAttributes(android.media.AudioAttributes)>"
"<java.nio.CharBuffer: java.nio.Buffer flip()>","<java.nio.CharBuffer: java.nio.Buffer flip()>"
"<android.content.pm.ApplicationInfo: int getGwpAsanMode()>","<android.content.pm.ApplicationInfo: int getGwpAsanMode()>"
"<org.xmlpull.v1.XmlSerializer: int getDepth()>","<org.xmlpull.v1.XmlSerializer: int getDepth()>"
"<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>","<java.net.DatagramSocket: java.net.SocketAddress getRemoteSocketAddress()>"
"<android.view.Window: boolean hasFeature(int)>","<android.view.Window: boolean hasFeature(int)>"
"<java.util.AbstractList: java.lang.Object remove(int)>","<java.util.AbstractList: java.lang.Object remove(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: void <clinit>()>","<android.view.accessibility.AccessibilityWindowInfo: void <clinit>()>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setWaterfallInsets(android.graphics.Insets)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setWaterfallInsets(android.graphics.Insets)>"
"<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.transition.Transition$TransitionListener: void onTransitionResume(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionResume(android.transition.Transition)>"
"<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)>","<android.widget.Toolbar: void setCollapseContentDescription(java.lang.CharSequence)>"
"<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>","<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>"
"<java.lang.Character: boolean isSurrogatePair(char,char)>","<java.lang.Character: boolean isSurrogatePair(char,char)>"
"<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse$Builder setValue(java.lang.String,android.view.translation.TranslationResponseValue)>","<android.view.translation.ViewTranslationResponse$Builder: android.view.translation.ViewTranslationResponse$Builder setValue(java.lang.String,android.view.translation.TranslationResponseValue)>"
"<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>","<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>"
"<android.widget.TextView: int getLineHeight()>","<android.widget.TextView: int getLineHeight()>"
"<android.graphics.Matrix: boolean postTranslate(float,float)>","<android.graphics.Matrix: boolean postTranslate(float,float)>"
"<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>","<android.graphics.Color: android.graphics.ColorSpace$Model getModel()>"
"<android.content.pm.PackageInstaller$SessionParams: void setRequireUserAction(int)>","<android.content.pm.PackageInstaller$SessionParams: void setRequireUserAction(int)>"
"<android.media.AudioRouting: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>","<android.media.AudioRouting: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>"
"<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setTextConversionSuggestions(java.util.List)>","<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setTextConversionSuggestions(java.util.List)>"
"<java.lang.invoke.MethodType: java.util.List parameterList()>","<java.lang.invoke.MethodType: java.util.List parameterList()>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.media.MediaPlayer$OnBufferingUpdateListener: void onBufferingUpdate(android.media.MediaPlayer,int)>","<android.media.MediaPlayer$OnBufferingUpdateListener: void onBufferingUpdate(android.media.MediaPlayer,int)>"
"<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>","<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>"
"<java.lang.Object: void wait()>","<java.lang.Object: void wait()>"
"<android.graphics.Color: boolean equals(java.lang.Object)>","<android.graphics.Color: boolean equals(java.lang.Object)>"
"<java.util.Arrays: void fill(short[],short)>","<java.util.Arrays: void fill(short[],short)>"
"<android.media.PlaybackParams: int describeContents()>","<android.media.PlaybackParams: int describeContents()>"
"<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<java.time.Duration: boolean equals(java.lang.Object)>","<java.time.Duration: boolean equals(java.lang.Object)>"
"<java.lang.LinkageError: void <init>(java.lang.String)>","<java.lang.LinkageError: void <init>(java.lang.String)>"
"<android.view.PointerIcon: void <clinit>()>","<android.view.PointerIcon: void <clinit>()>"
"<android.telephony.TelephonyManager$CallComposerException: java.io.IOException getIOException()>","<android.telephony.TelephonyManager$CallComposerException: java.io.IOException getIOException()>"
"<android.view.ViewGroup: void onDetachedFromWindow()>","<android.view.ViewGroup: void onDetachedFromWindow()>"
"<android.widget.EditText: void extendSelection(int)>","<android.widget.EditText: void extendSelection(int)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>","<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>"
"<android.net.LinkProperties: java.lang.String getDomains()>","<android.net.LinkProperties: java.lang.String getDomains()>"
"<android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>","<android.content.ContentResolver: android.graphics.Bitmap loadThumbnail(android.net.Uri,android.util.Size,android.os.CancellationSignal)>"
"<android.media.MediaDescription: boolean equals(java.lang.Object)>","<android.media.MediaDescription: boolean equals(java.lang.Object)>"
"<android.content.pm.SigningInfo: int describeContents()>","<android.content.pm.SigningInfo: int describeContents()>"
"<java.nio.DoubleBuffer: java.lang.String toString()>","<java.nio.DoubleBuffer: java.lang.String toString()>"
"<android.view.ViewTreeObserver: void removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>","<android.view.ViewTreeObserver: void removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer)>"
"<android.view.KeyEvent: int getMaxKeyCode()>","<android.view.KeyEvent: int getMaxKeyCode()>"
"<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener,android.os.Handler)>","<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRecord$OnRoutingChangedListener,android.os.Handler)>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.view.ActionMode: void <init>()>","<android.view.ActionMode: void <init>()>"
"<java.util.NavigableMap: java.util.Map$Entry lastEntry()>","<java.util.NavigableMap: java.util.Map$Entry lastEntry()>"
"<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>","<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Locale: void <clinit>()>","<java.util.Locale: void <clinit>()>"
"<android.view.textclassifier.TextClassifier: void onTextClassifierEvent(android.view.textclassifier.TextClassifierEvent)>","<android.view.textclassifier.TextClassifier: void onTextClassifierEvent(android.view.textclassifier.TextClassifierEvent)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putRating(java.lang.String,android.media.Rating)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putRating(java.lang.String,android.media.Rating)>"
"<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>","<android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>"
"<android.graphics.drawable.LayerDrawable: void setPaddingMode(int)>","<android.graphics.drawable.LayerDrawable: void setPaddingMode(int)>"
"<java.security.cert.Certificate: int hashCode()>","<java.security.cert.Certificate: int hashCode()>"
"<android.graphics.Bitmap: void setPixel(int,int,int)>","<android.graphics.Bitmap: void setPixel(int,int,int)>"
"<android.widget.TextView: boolean getShowSoftInputOnFocus()>","<android.widget.TextView: boolean getShowSoftInputOnFocus()>"
"<android.content.IntentFilter: int countActions()>","<android.content.IntentFilter: int countActions()>"
"<android.media.AudioDeviceInfo: int[] getEncodings()>","<android.media.AudioDeviceInfo: int[] getEncodings()>"
"<java.util.Spliterator$OfLong: void forEachRemaining(java.lang.Object)>","<java.util.Spliterator$OfLong: void forEachRemaining(java.lang.Object)>"
"<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setBreakStrategy(int)>","<android.text.PrecomputedText$Params$Builder: android.text.PrecomputedText$Params$Builder setBreakStrategy(int)>"
"<android.content.res.Resources$Theme: void rebase()>","<android.content.res.Resources$Theme: void rebase()>"
"<android.os.Parcel: void <init>()>","<android.os.Parcel: void <init>()>"
"<java.time.OffsetDateTime: java.time.Instant toInstant()>","<java.time.OffsetDateTime: java.time.Instant toInstant()>"
"<java.util.Random: java.util.stream.LongStream longs(long)>","<java.util.Random: java.util.stream.LongStream longs(long)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class[])>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class[])>"
"<android.view.animation.Animation: boolean willChangeBounds()>","<android.view.animation.Animation: boolean willChangeBounds()>"
"<android.media.PlaybackParams: int getAudioFallbackMode()>","<android.media.PlaybackParams: int getAudioFallbackMode()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.util.List)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.util.List)>"
"<android.media.MediaFormat: float getFloat(java.lang.String)>","<android.media.MediaFormat: float getFloat(java.lang.String)>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createOffsetEffect(float,float)>"
"<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>","<android.graphics.Paint: float getRunAdvance(char[],int,int,int,int,boolean,int)>"
"<android.content.pm.Signature: java.lang.String toCharsString()>","<android.content.pm.Signature: java.lang.String toCharsString()>"
"<android.os.HandlerThread: void <init>(java.lang.String,int)>","<android.os.HandlerThread: void <init>(java.lang.String,int)>"
"<android.graphics.Typeface: boolean isBold()>","<android.graphics.Typeface: boolean isBold()>"
"<android.app.Activity: boolean isChangingConfigurations()>","<android.app.Activity: boolean isChangingConfigurations()>"
"<android.graphics.Matrix: boolean postSkew(float,float,float,float)>","<android.graphics.Matrix: boolean postSkew(float,float,float,float)>"
"<java.util.Collections: java.lang.Object max(java.util.Collection)>","<java.util.Collections: java.lang.Object max(java.util.Collection)>"
"<android.widget.ListView: void addFooterView(android.view.View)>","<android.widget.ListView: void addFooterView(android.view.View)>"
"<android.content.pm.PathPermission: java.lang.String getReadPermission()>","<android.content.pm.PathPermission: java.lang.String getReadPermission()>"
"<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>","<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>"
"<android.graphics.RecordingCanvas: int getWidth()>","<android.graphics.RecordingCanvas: int getWidth()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: int getColumnSpan()>"
"<android.util.SparseBooleanArray: boolean get(int,boolean)>","<android.util.SparseBooleanArray: boolean get(int,boolean)>"
"<android.graphics.drawable.LayerDrawable: void setLayerWidth(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerWidth(int,int)>"
"<android.view.View: void forceLayout()>","<android.view.View: void forceLayout()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>","<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>"
"<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>","<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>"
"<java.io.PrintWriter: void setError()>","<java.io.PrintWriter: void setError()>"
"<android.hardware.display.DeviceProductInfo: java.lang.String toString()>","<android.hardware.display.DeviceProductInfo: java.lang.String toString()>"
"<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>","<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>"
"<android.app.assist.AssistContent: java.lang.String getStructuredData()>","<android.app.assist.AssistContent: java.lang.String getStructuredData()>"
"<java.net.InetAddress: boolean isMCLinkLocal()>","<java.net.InetAddress: boolean isMCLinkLocal()>"
"<android.graphics.Canvas: boolean clipRect(float,float,float,float)>","<android.graphics.Canvas: boolean clipRect(float,float,float,float)>"
"<java.lang.StringBuilder: int codePointCount(int,int)>","<java.lang.StringBuilder: int codePointCount(int,int)>"
"<java.lang.StringBuffer: void <init>(java.lang.CharSequence)>","<java.lang.StringBuffer: void <init>(java.lang.CharSequence)>"
"<android.media.AudioAttributes: int getAllowedCapturePolicy()>","<android.media.AudioAttributes: int getAllowedCapturePolicy()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setScript(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setScript(java.lang.String)>"
"<java.lang.Character: int toTitleCase(int)>","<java.lang.Character: int toTitleCase(int)>"
"<java.time.chrono.Era: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.chrono.Era: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)>","<android.hardware.Camera$Parameters: void setAutoWhiteBalanceLock(boolean)>"
"<android.app.PictureInPictureParams: void writeToParcel(android.os.Parcel,int)>","<android.app.PictureInPictureParams: void writeToParcel(android.os.Parcel,int)>"
"<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>","<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>"
"<android.net.NetworkInfo: boolean isAvailable()>","<android.net.NetworkInfo: boolean isAvailable()>"
"<android.text.method.KeyListener: int getInputType()>","<android.text.method.KeyListener: int getInputType()>"
"<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>","<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>"
"<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>","<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>"
"<android.view.Window: void setExitTransition(android.transition.Transition)>","<android.view.Window: void setExitTransition(android.transition.Transition)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble findFirst()>","<java.util.stream.DoubleStream: java.util.OptionalDouble findFirst()>"
"<android.graphics.drawable.BitmapDrawable: boolean canApplyTheme()>","<android.graphics.drawable.BitmapDrawable: boolean canApplyTheme()>"
"<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>","<java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])>"
"<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>","<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>"
"<java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>","<java.time.chrono.ChronoZonedDateTime: int compareTo(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asType(java.lang.invoke.MethodType)>"
"<android.view.View: void computeScroll()>","<android.view.View: void computeScroll()>"
"<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)>","<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)>"
"<android.graphics.RenderNode: long getUniqueId()>","<android.graphics.RenderNode: long getUniqueId()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>","<android.view.accessibility.AccessibilityNodeInfo: boolean canOpenPopup()>"
"<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>","<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: long getOutputStallDuration(java.lang.Class,android.util.Size)>"
"<android.graphics.Paint: int getEndHyphenEdit()>","<android.graphics.Paint: int getEndHyphenEdit()>"
"<android.view.KeyCharacterMap: char getMatch(int,char[],int)>","<android.view.KeyCharacterMap: char getMatch(int,char[],int)>"
"<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>","<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>"
"<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>","<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>"
"<android.media.VolumeShaper$Operation: int hashCode()>","<android.media.VolumeShaper$Operation: int hashCode()>"
"<android.net.NetworkRequest: void <init>()>","<android.net.NetworkRequest: void <init>()>"
"<android.view.AbsSavedState: void <clinit>()>","<android.view.AbsSavedState: void <clinit>()>"
"<java.util.DoubleSummaryStatistics: java.lang.String toString()>","<java.util.DoubleSummaryStatistics: java.lang.String toString()>"
"<android.content.pm.ModuleInfo: boolean isHidden()>","<android.content.pm.ModuleInfo: boolean isHidden()>"
"<android.widget.TextView: int getMinEms()>","<android.widget.TextView: int getMinEms()>"
"<android.transition.TransitionPropagation: java.lang.String[] getPropagationProperties()>","<android.transition.TransitionPropagation: java.lang.String[] getPropagationProperties()>"
"<android.widget.TextView: boolean setFontVariationSettings(java.lang.String)>","<android.widget.TextView: boolean setFontVariationSettings(java.lang.String)>"
"<java.time.Instant: int get(java.time.temporal.TemporalField)>","<java.time.Instant: int get(java.time.temporal.TemporalField)>"
"<android.view.Display$HdrCapabilities: java.lang.String toString()>","<android.view.Display$HdrCapabilities: java.lang.String toString()>"
"<android.content.IntentSender: java.lang.String getTargetPackage()>","<android.content.IntentSender: java.lang.String getTargetPackage()>"
"<java.lang.reflect.Constructor: boolean isVarArgs()>","<java.lang.reflect.Constructor: boolean isVarArgs()>"
"<android.graphics.Bitmap: void eraseColor(long)>","<android.graphics.Bitmap: void eraseColor(long)>"
"<android.os.Bundle: void <init>(java.lang.ClassLoader)>","<android.os.Bundle: void <init>(java.lang.ClassLoader)>"
"<java.net.URL: java.lang.String getHost()>","<java.net.URL: java.lang.String getHost()>"
"<android.app.Activity: void onStart()>","<android.app.Activity: void onStart()>"
"<java.lang.Short: java.lang.String toString(short)>","<java.lang.Short: java.lang.String toString(short)>"
"<java.security.Permission: void checkGuard(java.lang.Object)>","<java.security.Permission: void checkGuard(java.lang.Object)>"
"<java.io.File: boolean isDirectory()>","<java.io.File: boolean isDirectory()>"
"<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>","<android.widget.TextView: void onCommitCorrection(android.view.inputmethod.CorrectionInfo)>"
"<java.util.stream.IntStream: java.util.Spliterator$OfInt spliterator()>","<java.util.stream.IntStream: java.util.Spliterator$OfInt spliterator()>"
"<java.time.zone.ZoneOffsetTransition: int hashCode()>","<java.time.zone.ZoneOffsetTransition: int hashCode()>"
"<android.util.Rational: boolean isNaN()>","<android.util.Rational: boolean isNaN()>"
"<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>","<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>"
"<android.net.ConnectivityManager: int getMultipathPreference(android.net.Network)>","<android.net.ConnectivityManager: int getMultipathPreference(android.net.Network)>"
"<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Rect,int)>","<android.hardware.camera2.params.MeteringRectangle: void <init>(android.graphics.Rect,int)>"
"<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>","<android.app.ActivityManager: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>"
"<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>","<android.content.Intent: android.content.Intent setTypeAndNormalize(java.lang.String)>"
"<android.hardware.display.VirtualDisplay$Callback: void onPaused()>","<android.hardware.display.VirtualDisplay$Callback: void onPaused()>"
"<java.net.URI: java.lang.String getRawFragment()>","<java.net.URI: java.lang.String getRawFragment()>"
"<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.FileChannel: long write(java.nio.ByteBuffer[])>"
"<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>","<android.content.BroadcastReceiver$PendingResult: void setResultCode(int)>"
"<java.util.Locale$FilteringMode: void <init>(java.lang.String,int)>","<java.util.Locale$FilteringMode: void <init>(java.lang.String,int)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction addSharedElement(android.view.View,java.lang.String)>"
"<java.nio.ByteBuffer: java.nio.Buffer clear()>","<java.nio.ByteBuffer: java.nio.Buffer clear()>"
"<java.util.Random: java.util.stream.LongStream longs(long,long)>","<java.util.Random: java.util.stream.LongStream longs(long,long)>"
"<java.lang.Float: int floatToRawIntBits(float)>","<java.lang.Float: int floatToRawIntBits(float)>"
"<java.lang.Short: boolean equals(java.lang.Object)>","<java.lang.Short: boolean equals(java.lang.Object)>"
"<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>","<android.app.ActionBar: void setDisplayShowTitleEnabled(boolean)>"
"<java.lang.reflect.Executable: boolean isSynthetic()>","<java.lang.reflect.Executable: boolean isSynthetic()>"
"<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>","<android.content.Intent: long[] getLongArrayExtra(java.lang.String)>"
"<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)>","<javax.security.auth.Subject: java.util.Set getPrivateCredentials(java.lang.Class)>"
"<android.graphics.ColorSpace$RenderIntent: void <clinit>()>","<android.graphics.ColorSpace$RenderIntent: void <clinit>()>"
"<android.view.textclassifier.SelectionEvent: int describeContents()>","<android.view.textclassifier.SelectionEvent: int describeContents()>"
"<android.content.ContextWrapper: android.view.Display getDisplay()>","<android.content.ContextWrapper: android.view.Display getDisplay()>"
"<android.widget.TextView: android.content.res.ColorStateList getTextColors()>","<android.widget.TextView: android.content.res.ColorStateList getTextColors()>"
"<android.view.PixelCopy: void request(android.view.Window,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>","<android.view.PixelCopy: void request(android.view.Window,android.graphics.Bitmap,android.view.PixelCopy$OnPixelCopyFinishedListener,android.os.Handler)>"
"<android.view.translation.TranslationSpec: int getDataFormat()>","<android.view.translation.TranslationSpec: int getDataFormat()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType unwrap()>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType unwrap()>"
"<android.hardware.camera2.params.OutputConfiguration: long getDynamicRangeProfile()>","<android.hardware.camera2.params.OutputConfiguration: long getDynamicRangeProfile()>"
"<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>","<android.view.accessibility.AccessibilityRecord: int getMaxScrollX()>"
"<android.app.ActivityManager$RunningTaskInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RunningTaskInfo: void readFromParcel(android.os.Parcel)>"
"<android.view.View: int getVerticalScrollbarWidth()>","<android.view.View: int getVerticalScrollbarWidth()>"
"<android.view.View: void dispatchWindowVisibilityChanged(int)>","<android.view.View: void dispatchWindowVisibilityChanged(int)>"
"<android.hardware.Camera$Parameters: void setPictureSize(int,int)>","<android.hardware.Camera$Parameters: void setPictureSize(int,int)>"
"<java.io.ObjectStreamException: void <init>()>","<java.io.ObjectStreamException: void <init>()>"
"<android.app.Fragment: boolean isResumed()>","<android.app.Fragment: boolean isResumed()>"
"<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>","<android.view.ContextThemeWrapper: void applyOverrideConfiguration(android.content.res.Configuration)>"
"<android.net.IpSecManager$SecurityParameterIndex: java.lang.String toString()>","<android.net.IpSecManager$SecurityParameterIndex: java.lang.String toString()>"
"<android.view.View: void jumpDrawablesToCurrentState()>","<android.view.View: void jumpDrawablesToCurrentState()>"
"<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[],int,int)>"
"<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>","<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>"
"<java.lang.String: void <init>(java.lang.String)>","<java.lang.String: void <init>(java.lang.String)>"
"<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<android.hardware.HardwareBuffer: int getLayers()>","<android.hardware.HardwareBuffer: int getLayers()>"
"<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>","<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>"
"<android.graphics.NinePatch: int getWidth()>","<android.graphics.NinePatch: int getWidth()>"
"<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onClosed(android.hardware.camera2.CameraOfflineSession)>","<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onClosed(android.hardware.camera2.CameraOfflineSession)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: int getOpenFlags()>","<android.database.sqlite.SQLiteDatabase$OpenParams: int getOpenFlags()>"
"<android.view.ActionMode: void setTitle(java.lang.CharSequence)>","<android.view.ActionMode: void setTitle(java.lang.CharSequence)>"
"<android.text.Layout: float getSpacingAdd()>","<android.text.Layout: float getSpacingAdd()>"
"<android.app.Fragment: void setMenuVisibility(boolean)>","<android.app.Fragment: void setMenuVisibility(boolean)>"
"<android.view.View: boolean isLayoutRequested()>","<android.view.View: boolean isLayoutRequested()>"
"<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest$Builder setReportingRequestedWhileIdle(boolean)>","<android.telephony.SignalStrengthUpdateRequest$Builder: android.telephony.SignalStrengthUpdateRequest$Builder setReportingRequestedWhileIdle(boolean)>"
"<android.hardware.camera2.CameraExtensionSession$StateCallback: void <init>()>","<android.hardware.camera2.CameraExtensionSession$StateCallback: void <init>()>"
"<android.media.MediaPlayer: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.Map)>","<android.media.MediaPlayer: android.media.MediaDrm$KeyRequest getKeyRequest(byte[],byte[],java.lang.String,int,java.util.Map)>"
"<android.view.textclassifier.SelectionEvent: int getInvocationMethod()>","<android.view.textclassifier.SelectionEvent: int getInvocationMethod()>"
"<android.media.AudioManager: boolean setEncodedSurroundMode(int)>","<android.media.AudioManager: boolean setEncodedSurroundMode(int)>"
"<android.media.ImageReader: void finalize()>","<android.media.ImageReader: void finalize()>"
"<android.content.Intent: void <init>(android.content.Intent)>","<android.content.Intent: void <init>(android.content.Intent)>"
"<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>","<android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()>"
"<android.graphics.RecordingCanvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawTextRun(android.graphics.text.MeasuredText,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>","<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>"
"<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()>","<android.hardware.camera2.CaptureResult: android.hardware.camera2.CaptureRequest getRequest()>"
"<java.lang.Long: int compareUnsigned(long,long)>","<java.lang.Long: int compareUnsigned(long,long)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)>"
"<java.lang.RuntimeException: void <init>(java.lang.String)>","<java.lang.RuntimeException: void <init>(java.lang.String)>"
"<android.media.AudioRecord: android.os.PersistableBundle getMetrics()>","<android.media.AudioRecord: android.os.PersistableBundle getMetrics()>"
"<android.animation.LayoutTransition: void setDuration(int,long)>","<android.animation.LayoutTransition: void setDuration(int,long)>"
"<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>"
"<android.view.View: void requestUnbufferedDispatch(android.view.MotionEvent)>","<android.view.View: void requestUnbufferedDispatch(android.view.MotionEvent)>"
"<android.media.VolumeShaper$Configuration: int getMaximumCurvePoints()>","<android.media.VolumeShaper$Configuration: int getMaximumCurvePoints()>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putObject(int,java.lang.Object)>","<android.media.RemoteControlClient$MetadataEditor: android.media.RemoteControlClient$MetadataEditor putObject(int,java.lang.Object)>"
"<android.content.pm.PackageManager$Property: boolean isResourceId()>","<android.content.pm.PackageManager$Property: boolean isResourceId()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)>"
"<android.transition.Transition: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>","<android.transition.Transition: android.animation.Animator createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)>"
"<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>","<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>"
"<android.telephony.TelephonyManager: int getCallComposerStatus()>","<android.telephony.TelephonyManager: int getCallComposerStatus()>"
"<android.app.assist.AssistContent: android.content.ClipData getClipData()>","<android.app.assist.AssistContent: android.content.ClipData getClipData()>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()>"
"<android.icu.util.ULocale: java.lang.String getUnicodeLocaleType(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getUnicodeLocaleType(java.lang.String)>"
"<java.time.ZoneOffset: int get(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: int get(java.time.temporal.TemporalField)>"
"<android.widget.AbsListView: boolean isFastScrollEnabled()>","<android.widget.AbsListView: boolean isFastScrollEnabled()>"
"<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>","<android.content.pm.PackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,android.content.pm.PackageManager$ComponentInfoFlags)>"
"<android.graphics.Region: void <init>(android.graphics.Region)>","<android.graphics.Region: void <init>(android.graphics.Region)>"
"<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>","<android.app.ActionBar: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>"
"<java.lang.Thread: java.lang.Thread$State getState()>","<java.lang.Thread: java.lang.Thread$State getState()>"
"<android.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>","<android.app.ActionBar$OnNavigationListener: boolean onNavigationItemSelected(int,long)>"
"<android.telephony.ServiceState: void <clinit>()>","<android.telephony.ServiceState: void <clinit>()>"
"<android.graphics.RectF: void union(android.graphics.RectF)>","<android.graphics.RectF: void union(android.graphics.RectF)>"
"<java.util.Locale: void setDefault(java.util.Locale)>","<java.util.Locale: void setDefault(java.util.Locale)>"
"<android.os.Message: android.os.Message obtain(android.os.Message)>","<android.os.Message: android.os.Message obtain(android.os.Message)>"
"<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>","<android.os.Bundle: void writeToParcel(android.os.Parcel,int)>"
"<android.media.MediaPlayer: int getVideoHeight()>","<android.media.MediaPlayer: int getVideoHeight()>"
"<java.nio.channels.ServerSocketChannel: java.net.SocketAddress getLocalAddress()>","<java.nio.channels.ServerSocketChannel: java.net.SocketAddress getLocalAddress()>"
"<android.graphics.Path$FillType: void <init>(java.lang.String,int)>","<android.graphics.Path$FillType: void <init>(java.lang.String,int)>"
"<android.view.ContentInfo$Builder: android.view.ContentInfo build()>","<android.view.ContentInfo$Builder: android.view.ContentInfo build()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>"
"<android.graphics.Outline: void setAlpha(float)>","<android.graphics.Outline: void setAlpha(float)>"
"<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>","<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo obtain()>"
"<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)>","<android.content.ClipData$Item: java.lang.String coerceToHtmlText(android.content.Context)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setMaxTextLength(int)>"
"<android.media.TimedText: void <init>()>","<android.media.TimedText: void <init>()>"
"<java.lang.Byte: java.lang.Byte decode(java.lang.String)>","<java.lang.Byte: java.lang.Byte decode(java.lang.String)>"
"<android.hardware.Camera$PreviewCallback: void onPreviewFrame(byte[],android.hardware.Camera)>","<android.hardware.Camera$PreviewCallback: void onPreviewFrame(byte[],android.hardware.Camera)>"
"<android.widget.FrameLayout: void setForegroundGravity(int)>","<android.widget.FrameLayout: void setForegroundGravity(int)>"
"<android.content.ContextWrapper: void revokeUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.ContextWrapper: void revokeUriPermission(java.lang.String,android.net.Uri,int)>"
"<java.util.ArrayList: java.util.Spliterator spliterator()>","<java.util.ArrayList: java.util.Spliterator spliterator()>"
"<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)>"
"<java.net.Socket: java.io.OutputStream getOutputStream()>","<java.net.Socket: java.io.OutputStream getOutputStream()>"
"<android.content.res.Resources: android.content.res.Resources getSystem()>","<android.content.res.Resources: android.content.res.Resources getSystem()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentDetached(android.app.FragmentManager,android.app.Fragment)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer compact()>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer compact()>"
"<android.os.Debug: void resetThreadGcInvocationCount()>","<android.os.Debug: void resetThreadGcInvocationCount()>"
"<android.widget.TextView: void setHintTextColor(int)>","<android.widget.TextView: void setHintTextColor(int)>"
"<android.os.Parcel: android.os.Bundle readBundle()>","<android.os.Parcel: android.os.Bundle readBundle()>"
"<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>","<android.os.LocaleList: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>"
"<java.util.stream.BaseStream: java.util.Iterator iterator()>","<java.util.stream.BaseStream: java.util.Iterator iterator()>"
"<android.view.View: int getScrollBarFadeDuration()>","<android.view.View: int getScrollBarFadeDuration()>"
"<java.util.Collections: void rotate(java.util.List,int)>","<java.util.Collections: void rotate(java.util.List,int)>"
"<android.graphics.RecordingCanvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>"
"<android.content.Context: boolean isRestricted()>","<android.content.Context: boolean isRestricted()>"
"<android.media.AudioManager: java.util.List getActivePlaybackConfigurations()>","<android.media.AudioManager: java.util.List getActivePlaybackConfigurations()>"
"<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>","<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>"
"<android.graphics.ColorFilter: void <init>()>","<android.graphics.ColorFilter: void <init>()>"
"<android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>","<android.app.RemoteAction: void <init>(android.graphics.drawable.Icon,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>"
"<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>","<android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)>"
"<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>","<java.nio.channels.SelectableChannel: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int,java.lang.Object)>"
"<android.view.View: boolean isImportantForContentCapture()>","<android.view.View: boolean isImportantForContentCapture()>"
"<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.view.View: void setPadding(int,int,int,int)>","<android.view.View: void setPadding(int,int,int,int)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>"
"<android.os.HandlerThread: int getThreadId()>","<android.os.HandlerThread: int getThreadId()>"
"<java.net.SocketImpl: java.net.InetAddress getInetAddress()>","<java.net.SocketImpl: java.net.InetAddress getInetAddress()>"
"<java.util.regex.Matcher: int end(java.lang.String)>","<java.util.regex.Matcher: int end(java.lang.String)>"
"<java.nio.charset.CoderResult: java.lang.String toString()>","<java.nio.charset.CoderResult: java.lang.String toString()>"
"<android.app.RemoteAction: java.lang.Object clone()>","<android.app.RemoteAction: java.lang.Object clone()>"
"<android.content.Context: java.io.File getDir(java.lang.String,int)>","<android.content.Context: java.io.File getDir(java.lang.String,int)>"
"<java.lang.Character: boolean isJavaLetter(char)>","<java.lang.Character: boolean isJavaLetter(char)>"
"<android.view.SurfaceControl: java.lang.String toString()>","<android.view.SurfaceControl: java.lang.String toString()>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence,java.text.ParsePosition)>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence,java.text.ParsePosition)>"
"<java.util.Date: java.util.Date 'from'(java.time.Instant)>","<java.util.Date: java.util.Date 'from'(java.time.Instant)>"
"<android.view.ViewGroup: void drawableStateChanged()>","<android.view.ViewGroup: void drawableStateChanged()>"
"<android.app.Activity: void setImmersive(boolean)>","<android.app.Activity: void setImmersive(boolean)>"
"<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>","<android.view.ViewTreeObserver: void removeOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>"
"<java.io.Reader: void <init>()>","<java.io.Reader: void <init>()>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,android.icu.util.ULocale)>"
"<android.media.AudioPresentation: int hashCode()>","<android.media.AudioPresentation: int hashCode()>"
"<android.app.RemoteAction: java.lang.CharSequence getContentDescription()>","<android.app.RemoteAction: java.lang.CharSequence getContentDescription()>"
"<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>","<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>"
"<android.widget.TextView: void setFirstBaselineToTopHeight(int)>","<android.widget.TextView: void setFirstBaselineToTopHeight(int)>"
"<java.util.stream.DoubleStream: void forEachOrdered(java.util.function.DoubleConsumer)>","<java.util.stream.DoubleStream: void forEachOrdered(java.util.function.DoubleConsumer)>"
"<java.lang.reflect.Modifier: boolean isStatic(int)>","<java.lang.reflect.Modifier: boolean isStatic(int)>"
"<android.os.BaseBundle: void clear()>","<android.os.BaseBundle: void clear()>"
"<android.view.View: void clearAnimation()>","<android.view.View: void clearAnimation()>"
"<android.os.Debug: int getGlobalExternalFreedCount()>","<android.os.Debug: int getGlobalExternalFreedCount()>"
"<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>","<java.net.InetAddress: java.net.InetAddress getLoopbackAddress()>"
"<java.net.URI: java.lang.String getHost()>","<java.net.URI: java.lang.String getHost()>"
"<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>"
"<android.graphics.drawable.Drawable: void setHotspot(float,float)>","<android.graphics.drawable.Drawable: void setHotspot(float,float)>"
"<android.database.sqlite.SQLiteStatement: java.lang.String toString()>","<android.database.sqlite.SQLiteStatement: java.lang.String toString()>"
"<android.app.Activity: void setActionBar(android.widget.Toolbar)>","<android.app.Activity: void setActionBar(android.widget.Toolbar)>"
"<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>","<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>"
"<android.graphics.Canvas: void rotate(float)>","<android.graphics.Canvas: void rotate(float)>"
"<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.util.NavigableSet: java.util.Iterator iterator()>","<java.util.NavigableSet: java.util.Iterator iterator()>"
"<java.time.chrono.Chronology: java.time.chrono.Chronology ofLocale(java.util.Locale)>","<java.time.chrono.Chronology: java.time.chrono.Chronology ofLocale(java.util.Locale)>"
"<android.view.ViewGroupOverlay: void remove(android.view.View)>","<android.view.ViewGroupOverlay: void remove(android.view.View)>"
"<android.content.pm.PackageInstaller$Session: void setChecksums(java.lang.String,java.util.List,byte[])>","<android.content.pm.PackageInstaller$Session: void setChecksums(java.lang.String,java.util.List,byte[])>"
"<android.view.View: void setClipToOutline(boolean)>","<android.view.View: void setClipToOutline(boolean)>"
"<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>"
"<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()>","<android.view.accessibility.AccessibilityWindowInfo: java.lang.String toString()>"
"<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>","<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>"
"<android.os.Parcel: void readDoubleArray(double[])>","<android.os.Parcel: void readDoubleArray(double[])>"
"<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>","<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(java.lang.CharSequence[],android.content.DialogInterface$OnClickListener)>"
"<java.nio.channels.SelectionKey: boolean isValid()>","<java.nio.channels.SelectionKey: boolean isValid()>"
"<android.net.NetworkCapabilities: int getOwnerUid()>","<android.net.NetworkCapabilities: int getOwnerUid()>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionInfo: android.view.accessibility.AccessibilityNodeInfo$CollectionInfo obtain(int,int,boolean)>"
"<java.nio.ByteBuffer: int getInt(int)>","<java.nio.ByteBuffer: int getInt(int)>"
"<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)>","<android.content.IntentFilter: android.os.PatternMatcher getDataSchemeSpecificPart(int)>"
"<android.content.ContextWrapper: android.content.Context getApplicationContext()>","<android.content.ContextWrapper: android.content.Context getApplicationContext()>"
"<android.app.Activity: void onPictureInPictureModeChanged(boolean)>","<android.app.Activity: void onPictureInPictureModeChanged(boolean)>"
"<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>","<android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setErrorMessage(java.lang.CharSequence)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder setErrorMessage(java.lang.CharSequence)>"
"<android.widget.TextView: void onMeasure(int,int)>","<android.widget.TextView: void onMeasure(int,int)>"
"<java.nio.charset.Charset: java.util.Set aliases()>","<java.nio.charset.Charset: java.util.Set aliases()>"
"<android.os.Debug: java.util.Map getRuntimeStats()>","<android.os.Debug: java.util.Map getRuntimeStats()>"
"<android.app.ActionBar$Tab: void select()>","<android.app.ActionBar$Tab: void select()>"
"<java.net.URLConnection: boolean getDoOutput()>","<java.net.URLConnection: boolean getDoOutput()>"
"<android.database.sqlite.SQLiteTransactionListener: void onRollback()>","<android.database.sqlite.SQLiteTransactionListener: void onRollback()>"
"<java.time.format.DecimalStyle: java.util.Set getAvailableLocales()>","<java.time.format.DecimalStyle: java.util.Set getAvailableLocales()>"
"<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>","<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>"
"<java.util.Deque: boolean offer(java.lang.Object)>","<java.util.Deque: boolean offer(java.lang.Object)>"
"<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>"
"<java.util.Dictionary: java.lang.Object remove(java.lang.Object)>","<java.util.Dictionary: java.lang.Object remove(java.lang.Object)>"
"<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()>","<android.content.pm.PackageInstaller$SessionInfo: int getParentSessionId()>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel truncate(long)>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel truncate(long)>"
"<android.view.ViewDebug$ExportedProperty: java.lang.String category()>","<android.view.ViewDebug$ExportedProperty: java.lang.String category()>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: void <init>(java.lang.String,int,int)>","<android.media.session.MediaSessionManager$RemoteUserInfo: void <init>(java.lang.String,int,int)>"
"<android.animation.Animator: java.util.ArrayList getListeners()>","<android.animation.Animator: java.util.ArrayList getListeners()>"
"<android.view.MotionEvent: float getTouchMajor()>","<android.view.MotionEvent: float getTouchMajor()>"
"<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()>","<android.view.inputmethod.InputMethodSubtype: boolean isAsciiCapable()>"
"<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<java.util.ArrayList: java.lang.Object remove(int)>","<java.util.ArrayList: java.lang.Object remove(int)>"
"<android.view.SurfaceHolder: android.view.Surface getSurface()>","<android.view.SurfaceHolder: android.view.Surface getSurface()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>"
"<android.view.View: boolean hasNestedScrollingParent()>","<android.view.View: boolean hasNestedScrollingParent()>"
"<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>","<android.widget.AbsListView: android.os.Parcelable onSaveInstanceState()>"
"<android.transition.Scene: android.view.ViewGroup getSceneRoot()>","<android.transition.Scene: android.view.ViewGroup getSceneRoot()>"
"<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUsages()>","<android.media.AudioPlaybackCaptureConfiguration: int[] getExcludeUsages()>"
"<android.hardware.Sensor: boolean isDynamicSensor()>","<android.hardware.Sensor: boolean isDynamicSensor()>"
"<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean)>","<android.telephony.TelephonyManager: boolean setNetworkSelectionModeManual(java.lang.String,boolean)>"
"<android.telephony.NetworkScan: void stopScan()>","<android.telephony.NetworkScan: void stopScan()>"
"<android.app.ActivityManager$ProcessErrorStateInfo: int describeContents()>","<android.app.ActivityManager$ProcessErrorStateInfo: int describeContents()>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript[] values()>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript[] values()>"
"<android.app.Fragment: boolean equals(java.lang.Object)>","<android.app.Fragment: boolean equals(java.lang.Object)>"
"<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)>"
"<java.nio.charset.CoderResult: void throwException()>","<java.nio.charset.CoderResult: void throwException()>"
"<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>","<android.content.pm.PackageManager: java.util.List getAllPermissionGroups(int)>"
"<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>","<android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>"
"<java.lang.Long: java.lang.String toString()>","<java.lang.Long: java.lang.String toString()>"
"<android.media.MediaPlayer: void setLooping(boolean)>","<android.media.MediaPlayer: void setLooping(boolean)>"
"<java.time.chrono.ChronoLocalDateTime: int compareTo(java.lang.Object)>","<java.time.chrono.ChronoLocalDateTime: int compareTo(java.lang.Object)>"
"<android.content.ClipData$Item: android.view.textclassifier.TextLinks getTextLinks()>","<android.content.ClipData$Item: android.view.textclassifier.TextLinks getTextLinks()>"
"<android.content.pm.PackageManager: void removePermission(java.lang.String)>","<android.content.pm.PackageManager: void removePermission(java.lang.String)>"
"<android.hardware.Sensor: int getReportingMode()>","<android.hardware.Sensor: int getReportingMode()>"
"<android.app.ActivityManager: void <init>()>","<android.app.ActivityManager: void <init>()>"
"<android.media.AudioPresentation: java.util.Map getLabels()>","<android.media.AudioPresentation: java.util.Map getLabels()>"
"<android.view.inputmethod.InputConnection: boolean setImeConsumesInput(boolean)>","<android.view.inputmethod.InputConnection: boolean setImeConsumesInput(boolean)>"
"<java.lang.Character: boolean isLetter(int)>","<java.lang.Character: boolean isLetter(int)>"
"<android.animation.ValueAnimator: float getDurationScale()>","<android.animation.ValueAnimator: float getDurationScale()>"
"<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)>"
"<android.view.MotionEvent$PointerProperties: boolean equals(java.lang.Object)>","<android.view.MotionEvent$PointerProperties: boolean equals(java.lang.Object)>"
"<java.lang.Float: int hashCode()>","<java.lang.Float: int hashCode()>"
"<org.xmlpull.v1.XmlPullParser: int next()>","<org.xmlpull.v1.XmlPullParser: int next()>"
"<android.util.TypedValue: float complexToFloat(int)>","<android.util.TypedValue: float complexToFloat(int)>"
"<android.content.pm.SigningInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.SigningInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.media.AudioTrack: int getPlaybackRate()>","<android.media.AudioTrack: int getPlaybackRate()>"
"<java.lang.ReflectiveOperationException: void <init>(java.lang.Throwable)>","<java.lang.ReflectiveOperationException: void <init>(java.lang.Throwable)>"
"<android.view.translation.TranslationResponseValue: void <clinit>()>","<android.view.translation.TranslationResponseValue: void <clinit>()>"
"<android.app.Fragment: void requestPermissions(java.lang.String[],int)>","<android.app.Fragment: void requestPermissions(java.lang.String[],int)>"
"<android.widget.AdapterView: int getSelectedItemPosition()>","<android.widget.AdapterView: int getSelectedItemPosition()>"
"<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[])>","<java.util.Arrays: java.util.Spliterator spliterator(java.lang.Object[])>"
"<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.media.SubtitleData: byte[] getData()>","<android.media.SubtitleData: byte[] getData()>"
"<android.graphics.Movie: boolean setTime(int)>","<android.graphics.Movie: boolean setTime(int)>"
"<javax.security.auth.Subject: javax.security.auth.Subject getSubject(java.security.AccessControlContext)>","<javax.security.auth.Subject: javax.security.auth.Subject getSubject(java.security.AccessControlContext)>"
"<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>"
"<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()>","<android.media.session.PlaybackState$CustomAction: android.os.Bundle getExtras()>"
"<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()>","<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()>"
"<android.app.Fragment: java.lang.String getTag()>","<android.app.Fragment: java.lang.String getTag()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>"
"<android.net.IpSecManager$SecurityParameterIndex: void finalize()>","<android.net.IpSecManager$SecurityParameterIndex: void finalize()>"
"<android.content.IntentSender: int describeContents()>","<android.content.IntentSender: int describeContents()>"
"<android.content.SyncAdapterType: java.lang.String toString()>","<android.content.SyncAdapterType: java.lang.String toString()>"
"<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>","<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>"
"<android.view.accessibility.AccessibilityEvent: void <init>()>","<android.view.accessibility.AccessibilityEvent: void <init>()>"
"<java.nio.Buffer: int capacity()>","<java.nio.Buffer: int capacity()>"
"<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme)>","<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources,android.content.res.Resources$Theme)>"
"<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>","<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>"
"<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState(int)>","<android.telephony.TelephonyManager: android.telephony.ServiceState getServiceState(int)>"
"<android.provider.Settings: void <init>()>","<android.provider.Settings: void <init>()>"
"<android.view.View: boolean getClipBounds(android.graphics.Rect)>","<android.view.View: boolean getClipBounds(android.graphics.Rect)>"
"<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)>","<android.net.IpSecManager: void applyTransportModeTransform(java.io.FileDescriptor,int,android.net.IpSecTransform)>"
"<android.content.AttributionSource: java.lang.String getPackageName()>","<android.content.AttributionSource: java.lang.String getPackageName()>"
"<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>","<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>"
"<java.lang.Class: java.lang.String getPackageName()>","<java.lang.Class: java.lang.String getPackageName()>"
"<android.view.RoundedCorner: void <clinit>()>","<android.view.RoundedCorner: void <clinit>()>"
"<java.util.stream.IntStream: java.util.stream.DoubleStream asDoubleStream()>","<java.util.stream.IntStream: java.util.stream.DoubleStream asDoubleStream()>"
"<android.view.animation.Animation: int getRepeatCount()>","<android.view.animation.Animation: int getRepeatCount()>"
"<android.view.View: void setVisibility(int)>","<android.view.View: void setVisibility(int)>"
"<java.lang.VirtualMachineError: void <init>(java.lang.Throwable)>","<java.lang.VirtualMachineError: void <init>(java.lang.Throwable)>"
"<android.view.KeyEvent$Callback: boolean onKeyUp(int,android.view.KeyEvent)>","<android.view.KeyEvent$Callback: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraDevice getDevice()>","<android.hardware.camera2.CameraCaptureSession: android.hardware.camera2.CameraDevice getDevice()>"
"<java.lang.StringBuffer: void <init>(java.lang.String)>","<java.lang.StringBuffer: void <init>(java.lang.String)>"
"<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>","<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>"
"<android.widget.AbsListView: void smoothScrollToPosition(int)>","<android.widget.AbsListView: void smoothScrollToPosition(int)>"
"<android.database.Cursor: boolean moveToLast()>","<android.database.Cursor: boolean moveToLast()>"
"<android.os.Parcel: void readFixedArray(java.lang.Object,java.util.function.Function)>","<android.os.Parcel: void readFixedArray(java.lang.Object,java.util.function.Function)>"
"<java.security.GeneralSecurityException: void <init>(java.lang.String)>","<java.security.GeneralSecurityException: void <init>(java.lang.String)>"
"<java.util.stream.IntStream: java.util.Iterator iterator()>","<java.util.stream.IntStream: java.util.Iterator iterator()>"
"<android.content.ContextWrapper: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>","<android.content.ContextWrapper: boolean bindService(android.content.Intent,int,java.util.concurrent.Executor,android.content.ServiceConnection)>"
"<android.view.View: void offsetTopAndBottom(int)>","<android.view.View: void offsetTopAndBottom(int)>"
"<android.media.RemoteControlClient$OnGetPlaybackPositionListener: long onGetPlaybackPosition()>","<android.media.RemoteControlClient$OnGetPlaybackPositionListener: long onGetPlaybackPosition()>"
"<android.graphics.drawable.BitmapDrawable: boolean hasFocusStateSpecified()>","<android.graphics.drawable.BitmapDrawable: boolean hasFocusStateSpecified()>"
"<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>","<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>"
"<android.widget.ListView: void smoothScrollToPosition(int)>","<android.widget.ListView: void smoothScrollToPosition(int)>"
"<java.lang.InstantiationException: void <init>()>","<java.lang.InstantiationException: void <init>()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>"
"<android.widget.AdapterView: boolean canAnimate()>","<android.widget.AdapterView: boolean canAnimate()>"
"<android.database.Cursor: void setExtras(android.os.Bundle)>","<android.database.Cursor: void setExtras(android.os.Bundle)>"
"<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>","<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>"
"<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>","<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>"
"<android.os.Debug$MemoryInfo: int getTotalSwappablePss()>","<android.os.Debug$MemoryInfo: int getTotalSwappablePss()>"
"<java.nio.Buffer: int arrayOffset()>","<java.nio.Buffer: int arrayOffset()>"
"<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>","<android.widget.SpinnerAdapter: android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup)>"
"<android.media.VolumeShaper$Operation: void writeToParcel(android.os.Parcel,int)>","<android.media.VolumeShaper$Operation: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>","<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTint(int)>"
"<android.graphics.Color: long pack(float,float,float)>","<android.graphics.Color: long pack(float,float,float)>"
"<android.hardware.camera2.CameraDevice: void createCaptureSessionByOutputConfigurations(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>","<android.hardware.camera2.CameraDevice: void createCaptureSessionByOutputConfigurations(java.util.List,android.hardware.camera2.CameraCaptureSession$StateCallback,android.os.Handler)>"
"<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>","<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>"
"<java.util.Arrays: void parallelPrefix(double[],java.util.function.DoubleBinaryOperator)>","<java.util.Arrays: void parallelPrefix(double[],java.util.function.DoubleBinaryOperator)>"
"<java.util.Arrays: void parallelPrefix(int[],java.util.function.IntBinaryOperator)>","<java.util.Arrays: void parallelPrefix(int[],java.util.function.IntBinaryOperator)>"
"<android.view.LayoutInflater: android.content.Context getContext()>","<android.view.LayoutInflater: android.content.Context getContext()>"
"<android.content.res.loader.ResourcesProvider: void close()>","<android.content.res.loader.ResourcesProvider: void close()>"
"<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()>","<java.lang.reflect.Parameter: java.lang.reflect.Executable getDeclaringExecutable()>"
"<android.net.LinkProperties: java.net.Inet4Address getDhcpServerAddress()>","<android.net.LinkProperties: java.net.Inet4Address getDhcpServerAddress()>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String,android.os.Bundle)>"
"<android.icu.util.ULocale: java.util.Set getUnicodeLocaleKeys()>","<android.icu.util.ULocale: java.util.Set getUnicodeLocaleKeys()>"
"<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>","<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>"
"<android.view.accessibility.AccessibilityEvent: int describeContents()>","<android.view.accessibility.AccessibilityEvent: int describeContents()>"
"<java.lang.Double: void <init>(double)>","<java.lang.Double: void <init>(double)>"
"<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>","<java.util.Map: java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction)>"
"<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()>","<android.os.Debug$MemoryInfo: java.util.Map getMemoryStats()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle catchException(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>"
"<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>","<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>"
"<java.net.Socket: void setSoLinger(boolean,int)>","<java.net.Socket: void setSoLinger(boolean,int)>"
"<android.view.ActionMode: void invalidateContentRect()>","<android.view.ActionMode: void invalidateContentRect()>"
"<android.content.res.Configuration: void setToDefaults()>","<android.content.res.Configuration: void setToDefaults()>"
"<android.view.View: int getLayoutDirection()>","<android.view.View: int getLayoutDirection()>"
"<java.io.FileInputStream: void finalize()>","<java.io.FileInputStream: void finalize()>"
"<android.media.MediaSyncEvent: int getType()>","<android.media.MediaSyncEvent: int getType()>"
"<java.nio.charset.CodingErrorAction: void <clinit>()>","<java.nio.charset.CodingErrorAction: void <clinit>()>"
"<android.media.AudioTrack: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>","<android.media.AudioTrack: android.media.VolumeShaper createVolumeShaper(android.media.VolumeShaper$Configuration)>"
"<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()>","<java.lang.reflect.Executable: java.lang.reflect.Type[] getGenericExceptionTypes()>"
"<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[],int,int)>","<java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[],int,int)>"
"<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>","<android.content.Context: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>"
"<android.app.Activity: boolean moveTaskToBack(boolean)>","<android.app.Activity: boolean moveTaskToBack(boolean)>"
"<java.lang.Math: int incrementExact(int)>","<java.lang.Math: int incrementExact(int)>"
"<android.view.View: float getTranslationY()>","<android.view.View: float getTranslationY()>"
"<android.transition.TransitionValues: void <init>(android.view.View)>","<android.transition.TransitionValues: void <init>(android.view.View)>"
"<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>","<java.nio.channels.DatagramChannel: long write(java.nio.ByteBuffer[])>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
"<android.view.autofill.AutofillId: void <init>()>","<android.view.autofill.AutofillId: void <init>()>"
"<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>","<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>"
"<android.view.inputmethod.TextAttribute: android.os.PersistableBundle getExtras()>","<android.view.inputmethod.TextAttribute: android.os.PersistableBundle getExtras()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream generate(java.util.function.DoubleSupplier)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream generate(java.util.function.DoubleSupplier)>"
"<android.hardware.camera2.params.MeteringRectangle: int getHeight()>","<android.hardware.camera2.params.MeteringRectangle: int getHeight()>"
"<android.content.pm.PackageManager: boolean isDeviceUpgrading()>","<android.content.pm.PackageManager: boolean isDeviceUpgrading()>"
"<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()>","<android.view.View: android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()>"
"<android.view.View: int getMeasuredHeightAndState()>","<android.view.View: int getMeasuredHeightAndState()>"
"<java.time.LocalTime: boolean equals(java.lang.Object)>","<java.time.LocalTime: boolean equals(java.lang.Object)>"
"<android.media.Image: void setDataSpace(int)>","<android.media.Image: void setDataSpace(int)>"
"<android.util.DisplayMetrics: void <clinit>()>","<android.util.DisplayMetrics: void <clinit>()>"
"<android.os.Handler: java.lang.String getMessageName(android.os.Message)>","<android.os.Handler: java.lang.String getMessageName(android.os.Message)>"
"<java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()>","<java.lang.reflect.Executable: java.lang.Class[] getParameterTypes()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>","<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>"
"<android.content.IntentFilter: int getPriority()>","<android.content.IntentFilter: int getPriority()>"
"<java.lang.Character: boolean isDigit(char)>","<java.lang.Character: boolean isDigit(char)>"
"<android.view.inputmethod.InputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>","<android.view.inputmethod.InputConnection: android.view.inputmethod.SurroundingText getSurroundingText(int,int,int)>"
"<android.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)>","<android.widget.Toolbar: void setOverflowIcon(android.graphics.drawable.Drawable)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>","<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel setOption(java.net.SocketOption,java.lang.Object)>"
"<android.view.inputmethod.EditorInfo: int describeContents()>","<android.view.inputmethod.EditorInfo: int describeContents()>"
"<android.widget.AbsListView: int getBottomEdgeEffectColor()>","<android.widget.AbsListView: int getBottomEdgeEffectColor()>"
"<java.security.cert.CertPath: int hashCode()>","<java.security.cert.CertPath: int hashCode()>"
"<android.app.ActionBar: void setSubtitle(java.lang.CharSequence)>","<android.app.ActionBar: void setSubtitle(java.lang.CharSequence)>"
"<android.view.ViewGroup: boolean restoreDefaultFocus()>","<android.view.ViewGroup: boolean restoreDefaultFocus()>"
"<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forToggle(boolean)>","<android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forToggle(boolean)>"
"<android.hardware.lights.Light: int describeContents()>","<android.hardware.lights.Light: int describeContents()>"
"<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>","<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>"
"<android.widget.TextView: void setCustomInsertionActionModeCallback(android.view.ActionMode$Callback)>","<android.widget.TextView: void setCustomInsertionActionModeCallback(android.view.ActionMode$Callback)>"
"<android.media.metrics.LogSessionId: void <init>()>","<android.media.metrics.LogSessionId: void <init>()>"
"<java.net.URL: void <init>(java.net.URL,java.lang.String)>","<java.net.URL: void <init>(java.net.URL,java.lang.String)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>"
"<android.view.MenuItem: char getAlphabeticShortcut()>","<android.view.MenuItem: char getAlphabeticShortcut()>"
"<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.Constructor: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.LayerDrawable: void setColorFilter(android.graphics.ColorFilter)>"
"<android.view.translation.TranslationResponseValue: android.os.Bundle getExtras()>","<android.view.translation.TranslationResponseValue: android.os.Bundle getExtras()>"
"<android.hardware.lights.Light: boolean hasRgbControl()>","<android.hardware.lights.Light: boolean hasRgbControl()>"
"<java.lang.Character: java.lang.Character valueOf(char)>","<java.lang.Character: java.lang.Character valueOf(char)>"
"<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>","<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>"
"<java.util.Random: int nextInt()>","<java.util.Random: int nextInt()>"
"<java.net.URLConnection: boolean getDefaultUseCaches()>","<java.net.URLConnection: boolean getDefaultUseCaches()>"
"<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>","<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>"
"<android.os.Bundle: char getChar(java.lang.String)>","<android.os.Bundle: char getChar(java.lang.String)>"
"<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>","<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>"
"<android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>","<android.widget.TextView: void setImeHintLocales(android.os.LocaleList)>"
"<android.net.LinkProperties: boolean isPrivateDnsActive()>","<android.net.LinkProperties: boolean isPrivateDnsActive()>"
"<android.content.res.loader.ResourcesProvider: void finalize()>","<android.content.res.loader.ResourcesProvider: void finalize()>"
"<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>","<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>"
"<android.net.Uri: java.util.Set getQueryParameterNames()>","<android.net.Uri: java.util.Set getQueryParameterNames()>"
"<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>","<android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)>"
"<java.util.AbstractCollection: boolean add(java.lang.Object)>","<java.util.AbstractCollection: boolean add(java.lang.Object)>"
"<android.media.AudioRecord: boolean setPreferredMicrophoneDirection(int)>","<android.media.AudioRecord: boolean setPreferredMicrophoneDirection(int)>"
"<android.view.translation.TranslationSpec: void writeToParcel(android.os.Parcel,int)>","<android.view.translation.TranslationSpec: void writeToParcel(android.os.Parcel,int)>"
"<android.content.res.TypedArray: boolean hasValue(int)>","<android.content.res.TypedArray: boolean hasValue(int)>"
"<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>","<java.net.FileNameMap: java.lang.String getContentTypeFor(java.lang.String)>"
"<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>","<java.nio.channels.FileChannel$MapMode: java.lang.String toString()>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)>","<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putObject(int,java.lang.Object)>"
"<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>","<java.lang.reflect.Method: java.lang.reflect.TypeVariable[] getTypeParameters()>"
"<android.net.ConnectivityManager$NetworkCallback: void onUnavailable()>","<android.net.ConnectivityManager$NetworkCallback: void onUnavailable()>"
"<android.telephony.RadioAccessSpecifier: void <init>(int,int[],int[])>","<android.telephony.RadioAccessSpecifier: void <init>(int,int[],int[])>"
"<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>","<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>"
"<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.lang.Long: long parseUnsignedLong(java.lang.String,int)>","<java.lang.Long: long parseUnsignedLong(java.lang.String,int)>"
"<android.icu.util.ULocale$AvailableType: void <clinit>()>","<android.icu.util.ULocale$AvailableType: void <clinit>()>"
"<java.time.ZoneId: java.time.ZoneId ofOffset(java.lang.String,java.time.ZoneOffset)>","<java.time.ZoneId: java.time.ZoneId ofOffset(java.lang.String,java.time.ZoneOffset)>"
"<android.content.Context: java.io.File getFilesDir()>","<android.content.Context: java.io.File getFilesDir()>"
"<android.media.MediaSyncEvent: int getAudioSessionId()>","<android.media.MediaSyncEvent: int getAudioSessionId()>"
"<java.lang.Short: long toUnsignedLong(short)>","<java.lang.Short: long toUnsignedLong(short)>"
"<android.view.View: int getSourceLayoutResId()>","<android.view.View: int getSourceLayoutResId()>"
"<java.time.temporal.TemporalUnit: java.lang.String toString()>","<java.time.temporal.TemporalUnit: java.lang.String toString()>"
"<android.net.ConnectivityManager: int getNetworkPreference()>","<android.net.ConnectivityManager: int getNetworkPreference()>"
"<android.media.MediaDrm: android.os.PersistableBundle getMetrics()>","<android.media.MediaDrm: android.os.PersistableBundle getMetrics()>"
"<java.text.CharacterIterator: char first()>","<java.text.CharacterIterator: char first()>"
"<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>","<android.media.session.MediaSessionManager: void addOnSession2TokensChangedListener(android.media.session.MediaSessionManager$OnSession2TokensChangedListener,android.os.Handler)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintList(android.content.res.ColorStateList)>"
"<android.content.AttributionSource: boolean checkCallingUid()>","<android.content.AttributionSource: boolean checkCallingUid()>"
"<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantLock: boolean hasWaiters(java.util.concurrent.locks.Condition)>"
"<java.util.Hashtable: int size()>","<java.util.Hashtable: int size()>"
"<android.media.session.MediaSession: void setFlags(int)>","<android.media.session.MediaSession: void setFlags(int)>"
"<android.graphics.Paint: float measureText(java.lang.String,int,int)>","<android.graphics.Paint: float measureText(java.lang.String,int,int)>"
"<android.graphics.Canvas: void drawColor(int,android.graphics.BlendMode)>","<android.graphics.Canvas: void drawColor(int,android.graphics.BlendMode)>"
"<android.view.Window: void setTransitionBackgroundFadeDuration(long)>","<android.view.Window: void setTransitionBackgroundFadeDuration(long)>"
"<android.hardware.SyncFence: boolean isValid()>","<android.hardware.SyncFence: boolean isValid()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config,boolean)>"
"<java.nio.channels.Selector: int select(long)>","<java.nio.channels.Selector: int select(long)>"
"<android.telephony.VisualVoicemailSmsFilterSettings: void <clinit>()>","<android.telephony.VisualVoicemailSmsFilterSettings: void <clinit>()>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setTransferMode(int)>","<android.media.AudioTrack$Builder: android.media.AudioTrack$Builder setTransferMode(int)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconUri(android.net.Uri)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setIconUri(android.net.Uri)>"
"<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaUri(android.net.Uri)>","<android.media.MediaDescription$Builder: android.media.MediaDescription$Builder setMediaUri(android.net.Uri)>"
"<android.util.SparseBooleanArray: void setValueAt(int,boolean)>","<android.util.SparseBooleanArray: void setValueAt(int,boolean)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayElementGetter(java.lang.Class)>"
"<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<android.widget.RelativeLayout$LayoutParams: void <init>(int,int)>","<android.widget.RelativeLayout$LayoutParams: void <init>(int,int)>"
"<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>","<android.text.Layout: float getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)>"
"<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>","<android.content.pm.PackageInstaller: void registerSessionCallback(android.content.pm.PackageInstaller$SessionCallback,android.os.Handler)>"
"<java.util.function.ObjDoubleConsumer: void accept(java.lang.Object,double)>","<java.util.function.ObjDoubleConsumer: void accept(java.lang.Object,double)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMtuV4(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setMtuV4(int)>"
"<android.widget.MediaController: boolean isShowing()>","<android.widget.MediaController: boolean isShowing()>"
"<android.view.Window: boolean isStatusBarContrastEnforced()>","<android.view.Window: boolean isStatusBarContrastEnforced()>"
"<java.lang.Thread: void join(long,int)>","<java.lang.Thread: void join(long,int)>"
"<java.lang.Runnable: void run()>","<java.lang.Runnable: void run()>"
"<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.util.Collections: java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet)>","<java.util.Collections: java.util.NavigableSet synchronizedNavigableSet(java.util.NavigableSet)>"
"<android.hardware.camera2.params.OutputConfiguration: void setTimestampBase(int)>","<android.hardware.camera2.params.OutputConfiguration: void setTimestampBase(int)>"
"<android.graphics.drawable.LayerDrawable: int getIntrinsicHeight()>","<android.graphics.drawable.LayerDrawable: int getIntrinsicHeight()>"
"<android.graphics.RecordingCanvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>"
"<java.util.NavigableSet: java.lang.Object floor(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object floor(java.lang.Object)>"
"<java.util.Set: java.util.Set of(java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object)>"
"<java.util.OptionalLong: java.util.stream.LongStream stream()>","<java.util.OptionalLong: java.util.stream.LongStream stream()>"
"<android.view.WindowInsetsAnimation: void setAlpha(float)>","<android.view.WindowInsetsAnimation: void setAlpha(float)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<java.lang.Character: boolean equals(java.lang.Object)>","<java.lang.Character: boolean equals(java.lang.Object)>"
"<android.os.Parcel: void writeByte(byte)>","<android.os.Parcel: void writeByte(byte)>"
"<java.nio.charset.CharacterCodingException: void <init>()>","<java.nio.charset.CharacterCodingException: void <init>()>"
"<android.view.textclassifier.TextSelection: void <init>()>","<android.view.textclassifier.TextSelection: void <init>()>"
"<android.telecom.PhoneAccountHandle: java.lang.String getId()>","<android.telecom.PhoneAccountHandle: java.lang.String getId()>"
"<android.view.MotionEvent: void <init>()>","<android.view.MotionEvent: void <init>()>"
"<android.telephony.PhoneStateListener: void onEmergencyNumberListChanged(java.util.Map)>","<android.telephony.PhoneStateListener: void onEmergencyNumberListChanged(java.util.Map)>"
"<android.widget.AbsListView: void setScrollBarStyle(int)>","<android.widget.AbsListView: void setScrollBarStyle(int)>"
"<java.io.PrintStream: void <init>(java.io.File)>","<java.io.PrintStream: void <init>(java.io.File)>"
"<android.widget.TextView: void setPaintFlags(int)>","<android.widget.TextView: void setPaintFlags(int)>"
"<android.graphics.drawable.Drawable$ConstantState: void <init>()>","<android.graphics.drawable.Drawable$ConstantState: void <init>()>"
"<android.view.inputmethod.InputContentInfo: void releasePermission()>","<android.view.inputmethod.InputContentInfo: void releasePermission()>"
"<android.hardware.camera2.CameraCaptureSession: int captureBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>","<android.hardware.camera2.CameraCaptureSession: int captureBurst(java.util.List,android.hardware.camera2.CameraCaptureSession$CaptureCallback,android.os.Handler)>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: boolean removeChild(android.view.View,int)>"
"<android.view.Window: int getVolumeControlStream()>","<android.view.Window: int getVolumeControlStream()>"
"<java.time.ZoneOffset: int getTotalSeconds()>","<java.time.ZoneOffset: int getTotalSeconds()>"
"<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter,android.graphics.RenderEffect)>","<android.graphics.RenderEffect: android.graphics.RenderEffect createColorFilterEffect(android.graphics.ColorFilter,android.graphics.RenderEffect)>"
"<android.view.Display: void getSize(android.graphics.Point)>","<android.view.Display: void getSize(android.graphics.Point)>"
"<java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>","<java.util.Collections: java.util.Comparator reverseOrder(java.util.Comparator)>"
"<android.widget.RemoteViews: void setViewLayoutWidth(int,float,int)>","<android.widget.RemoteViews: void setViewLayoutWidth(int,float,int)>"
"<java.time.chrono.Era: long getLong(java.time.temporal.TemporalField)>","<java.time.chrono.Era: long getLong(java.time.temporal.TemporalField)>"
"<android.widget.RelativeLayout$LayoutParams: java.lang.String debug(java.lang.String)>","<android.widget.RelativeLayout$LayoutParams: java.lang.String debug(java.lang.String)>"
"<android.media.session.PlaybackState: boolean isActive()>","<android.media.session.PlaybackState: boolean isActive()>"
"<java.util.Map: java.lang.Object get(java.lang.Object)>","<java.util.Map: java.lang.Object get(java.lang.Object)>"
"<java.util.HashSet: void clear()>","<java.util.HashSet: void clear()>"
"<android.widget.RelativeLayout: void onMeasure(int,int)>","<android.widget.RelativeLayout: void onMeasure(int,int)>"
"<android.view.SurfaceHolder: void setFormat(int)>","<android.view.SurfaceHolder: void setFormat(int)>"
"<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>","<android.widget.Adapter: void registerDataSetObserver(android.database.DataSetObserver)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>"
"<java.lang.reflect.Field: java.lang.String getName()>","<java.lang.reflect.Field: java.lang.String getName()>"
"<android.view.ViewGroup: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>","<android.view.ViewGroup: void dispatchCreateViewTranslationRequest(java.util.Map,int[],android.view.translation.TranslationCapability,java.util.List)>"
"<android.os.LocaleList: android.os.LocaleList getDefault()>","<android.os.LocaleList: android.os.LocaleList getDefault()>"
"<android.text.TextPaint: float getUnderlineThickness()>","<android.text.TextPaint: float getUnderlineThickness()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithHints(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig: android.view.textclassifier.TextClassifier$EntityConfig createWithHints(java.util.Collection)>"
"<android.content.pm.Signature: int describeContents()>","<android.content.pm.Signature: int describeContents()>"
"<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>","<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>"
"<android.app.Activity: void onPanelClosed(int,android.view.Menu)>","<android.app.Activity: void onPanelClosed(int,android.view.Menu)>"
"<java.lang.Number: float floatValue()>","<java.lang.Number: float floatValue()>"
"<java.time.zone.ZoneOffsetTransition: boolean isOverlap()>","<java.time.zone.ZoneOffsetTransition: boolean isOverlap()>"
"<android.view.inputmethod.InputMethodManager: boolean isActive()>","<android.view.inputmethod.InputMethodManager: boolean isActive()>"
"<java.util.Spliterator$OfDouble: java.util.Spliterator$OfPrimitive trySplit()>","<java.util.Spliterator$OfDouble: java.util.Spliterator$OfPrimitive trySplit()>"
"<android.os.Handler: android.os.Message obtainMessage(int,int,int)>","<android.os.Handler: android.os.Message obtainMessage(int,int,int)>"
"<android.app.Activity: void onLocalVoiceInteractionStarted()>","<android.app.Activity: void onLocalVoiceInteractionStarted()>"
"<android.transition.Transition: void <init>()>","<android.transition.Transition: void <init>()>"
"<android.view.inputmethod.InputMethodInfo: int describeContents()>","<android.view.inputmethod.InputMethodInfo: int describeContents()>"
"<android.app.ActivityManager: int getLauncherLargeIconSize()>","<android.app.ActivityManager: int getLauncherLargeIconSize()>"
"<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>"
"<android.content.pm.PackageManager: java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags)>","<android.content.pm.PackageManager: java.util.List getInstalledApplications(android.content.pm.PackageManager$ApplicationInfoFlags)>"
"<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>","<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>"
"<android.provider.Settings$Panel: void <init>()>","<android.provider.Settings$Panel: void <init>()>"
"<android.widget.RelativeLayout: void setVerticalGravity(int)>","<android.widget.RelativeLayout: void setVerticalGravity(int)>"
"<android.media.session.MediaController: void setVolumeTo(int,int)>","<android.media.session.MediaController: void setVolumeTo(int,int)>"
"<android.content.Intent: android.content.Intent getSelector()>","<android.content.Intent: android.content.Intent getSelector()>"
"<android.telephony.BarringInfo$BarringServiceInfo: void <clinit>()>","<android.telephony.BarringInfo$BarringServiceInfo: void <clinit>()>"
"<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)>","<android.view.MenuItem: android.view.MenuItem setShowAsActionFlags(int)>"
"<android.app.Activity: void startActivity(android.content.Intent)>","<android.app.Activity: void startActivity(android.content.Intent)>"
"<android.content.IntentFilter: void addAction(java.lang.String)>","<android.content.IntentFilter: void addAction(java.lang.String)>"
"<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)>","<android.content.pm.ProviderInfo: void dump(android.util.Printer,java.lang.String)>"
"<java.util.concurrent.TimeUnit: long toMinutes(long)>","<java.util.concurrent.TimeUnit: long toMinutes(long)>"
"<android.content.res.AssetManager$AssetInputStream: void finalize()>","<android.content.res.AssetManager$AssetInputStream: void finalize()>"
"<android.view.View: void onScrollChanged(int,int,int,int)>","<android.view.View: void onScrollChanged(int,int,int,int)>"
"<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>","<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>"
"<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>","<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>"
"<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>","<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>"
"<android.text.TextPaint: void <init>(android.graphics.Paint)>","<android.text.TextPaint: void <init>(android.graphics.Paint)>"
"<android.view.textclassifier.SelectionEvent: boolean equals(java.lang.Object)>","<android.view.textclassifier.SelectionEvent: boolean equals(java.lang.Object)>"
"<java.util.ArrayList: java.util.ListIterator listIterator(int)>","<java.util.ArrayList: java.util.ListIterator listIterator(int)>"
"<android.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.Toolbar: boolean onTouchEvent(android.view.MotionEvent)>"
"<android.media.session.MediaController$PlaybackInfo: int describeContents()>","<android.media.session.MediaController$PlaybackInfo: int describeContents()>"
"<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>","<android.text.PrecomputedText$Params: android.text.TextPaint getTextPaint()>"
"<java.lang.StringBuilder: java.lang.String substring(int)>","<java.lang.StringBuilder: java.lang.String substring(int)>"
"<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>","<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>"
"<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>","<android.content.ClipboardManager: void addPrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>"
"<android.hardware.camera2.CameraExtensionSession: void <init>()>","<android.hardware.camera2.CameraExtensionSession: void <init>()>"
"<java.util.Locale: java.lang.String getVariant()>","<java.util.Locale: java.lang.String getVariant()>"
"<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>","<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>"
"<java.net.URISyntaxException: int getIndex()>","<java.net.URISyntaxException: int getIndex()>"
"<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>","<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.util.LongSparseArray: int indexOfKey(long)>","<android.util.LongSparseArray: int indexOfKey(long)>"
"<java.util.AbstractList: int hashCode()>","<java.util.AbstractList: int hashCode()>"
"<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>","<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>"
"<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()>","<android.telephony.TelephonyManager: boolean isHearingAidCompatibilitySupported()>"
"<android.os.BaseBundle: java.util.Set keySet()>","<android.os.BaseBundle: java.util.Set keySet()>"
"<java.lang.reflect.Executable: void <init>()>","<java.lang.reflect.Executable: void <init>()>"
"<android.net.NetworkInfo$State: void <init>(java.lang.String,int)>","<android.net.NetworkInfo$State: void <init>(java.lang.String,int)>"
"<java.util.Arrays: void sort(byte[])>","<java.util.Arrays: void sort(byte[])>"
"<java.util.HashSet: void <init>(int,float)>","<java.util.HashSet: void <init>(int,float)>"
"<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>"
"<android.view.View: int resolveSizeAndState(int,int,int)>","<android.view.View: int resolveSizeAndState(int,int,int)>"
"<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>","<android.app.ActivityManager: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>"
"<android.content.SyncAdapterType: boolean isAlwaysSyncable()>","<android.content.SyncAdapterType: boolean isAlwaysSyncable()>"
"<java.nio.ShortBuffer: short get()>","<java.nio.ShortBuffer: short get()>"
"<android.content.LocusId: int hashCode()>","<android.content.LocusId: int hashCode()>"
"<android.os.Debug: int getGlobalAllocCount()>","<android.os.Debug: int getGlobalAllocCount()>"
"<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)>","<android.net.IpSecManager: void removeTransportModeTransforms(java.io.FileDescriptor)>"
"<android.content.ContentProviderResult: int describeContents()>","<android.content.ContentProviderResult: int describeContents()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font$Builder setFontVariationSettings(java.lang.String)>"
"<android.graphics.ColorSpace$Connector: float[] transform(float[])>","<android.graphics.ColorSpace$Connector: float[] transform(float[])>"
"<java.time.OffsetDateTime: void <clinit>()>","<java.time.OffsetDateTime: void <clinit>()>"
"<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>","<java.nio.channels.Selector: java.nio.channels.spi.SelectorProvider provider()>"
"<android.widget.TextView: float getLetterSpacing()>","<android.widget.TextView: float getLetterSpacing()>"
"<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>","<android.graphics.fonts.FontFamily$Builder: android.graphics.fonts.FontFamily$Builder addFont(android.graphics.fonts.Font)>"
"<android.view.Window$Callback: void onPointerCaptureChanged(boolean)>","<android.view.Window$Callback: void onPointerCaptureChanged(boolean)>"
"<android.hardware.camera2.CameraManager: void <init>()>","<android.hardware.camera2.CameraManager: void <init>()>"
"<java.text.CharacterIterator: java.lang.Object clone()>","<java.text.CharacterIterator: java.lang.Object clone()>"
"<java.util.HashSet: int size()>","<java.util.HashSet: int size()>"
"<java.lang.Thread: java.lang.Thread currentThread()>","<java.lang.Thread: java.lang.Thread currentThread()>"
"<android.view.ViewGroup: void detachAllViewsFromParent()>","<android.view.ViewGroup: void detachAllViewsFromParent()>"
"<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()>","<android.view.textclassifier.SelectionEvent: long getDurationSinceSessionStart()>"
"<android.view.textclassifier.TextSelection$Request$Builder: void <init>(java.lang.CharSequence,int,int)>","<android.view.textclassifier.TextSelection$Request$Builder: void <init>(java.lang.CharSequence,int,int)>"
"<java.time.Period: java.time.chrono.ChronoPeriod negated()>","<java.time.Period: java.time.chrono.ChronoPeriod negated()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle$AccessMode,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle varHandleExactInvoker(java.lang.invoke.VarHandle$AccessMode,java.lang.invoke.MethodType)>"
"<java.util.Arrays: int mismatch(boolean[],int,int,boolean[],int,int)>","<java.util.Arrays: int mismatch(boolean[],int,int,boolean[],int,int)>"
"<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)>","<android.media.session.MediaSessionManager: boolean isTrustedForMediaControl(android.media.session.MediaSessionManager$RemoteUserInfo)>"
"<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>","<android.hardware.Camera$Parameters: java.lang.String get(java.lang.String)>"
"<android.app.ActivityManager$MemoryInfo: void <init>()>","<android.app.ActivityManager$MemoryInfo: void <init>()>"
"<android.view.MotionEvent: float getRawX(int)>","<android.view.MotionEvent: float getRawX(int)>"
"<java.lang.Integer: int intValue()>","<java.lang.Integer: int intValue()>"
"<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>","<android.media.session.MediaController: void sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)>"
"<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>","<android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)>"
"<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.AbsListView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>","<java.lang.reflect.Array: void setFloat(java.lang.Object,int,float)>"
"<android.view.Surface: void writeToParcel(android.os.Parcel,int)>","<android.view.Surface: void writeToParcel(android.os.Parcel,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiFloat(java.lang.String,android.graphics.Path)>"
"<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>","<android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)>"
"<android.telephony.VisualVoicemailSmsFilterSettings: int describeContents()>","<android.telephony.VisualVoicemailSmsFilterSettings: int describeContents()>"
"<java.lang.System: void setProperties(java.util.Properties)>","<java.lang.System: void setProperties(java.util.Properties)>"
"<java.time.OffsetDateTime: int compareTo(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: int compareTo(java.time.OffsetDateTime)>"
"<java.util.Map: boolean containsValue(java.lang.Object)>","<java.util.Map: boolean containsValue(java.lang.Object)>"
"<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo,android.content.res.Configuration)>","<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo,android.content.res.Configuration)>"
"<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request$Builder setExtras(android.os.Bundle)>","<android.view.textclassifier.TextLanguage$Request$Builder: android.view.textclassifier.TextLanguage$Request$Builder setExtras(android.os.Bundle)>"
"<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>","<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer,long)>"
"<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>","<android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)>"
"<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>","<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>"
"<android.content.res.Resources: void removeLoaders(android.content.res.loader.ResourcesLoader[])>","<android.content.res.Resources: void removeLoaders(android.content.res.loader.ResourcesLoader[])>"
"<android.hardware.camera2.params.SessionConfiguration: void writeToParcel(android.os.Parcel,int)>","<android.hardware.camera2.params.SessionConfiguration: void writeToParcel(android.os.Parcel,int)>"
"<java.net.DatagramPacket: void <init>(byte[],int)>","<java.net.DatagramPacket: void <init>(byte[],int)>"
"<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>","<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>"
"<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>","<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>"
"<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)>","<android.os.Bundle: void putSizeF(java.lang.String,android.util.SizeF)>"
"<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence)>","<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>","<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)>"
"<android.widget.TextView: void setTextAppearance(int)>","<android.widget.TextView: void setTextAppearance(int)>"
"<java.util.regex.Matcher: int groupCount()>","<java.util.regex.Matcher: int groupCount()>"
"<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>","<android.text.Editable: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)>"
"<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>"
"<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()>","<android.media.session.MediaController$PlaybackInfo: java.lang.String getVolumeControlId()>"
"<android.telephony.TelephonyManager: java.lang.String getMeid(int)>","<android.telephony.TelephonyManager: java.lang.String getMeid(int)>"
"<android.hardware.camera2.params.MeteringRectangle: java.lang.String toString()>","<android.hardware.camera2.params.MeteringRectangle: java.lang.String toString()>"
"<java.lang.reflect.Field: void setShort(java.lang.Object,short)>","<java.lang.reflect.Field: void setShort(java.lang.Object,short)>"
"<android.widget.Toolbar: void setTitleMargin(int,int,int,int)>","<android.widget.Toolbar: void setTitleMargin(int,int,int,int)>"
"<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>","<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()>"
"<android.widget.TextView: float getRightFadingEdgeStrength()>","<android.widget.TextView: float getRightFadingEdgeStrength()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)>"
"<java.io.PrintWriter: void print(java.lang.Object)>","<java.io.PrintWriter: void print(java.lang.Object)>"
"<android.media.MediaDrm: void clearOnExpirationUpdateListener()>","<android.media.MediaDrm: void clearOnExpirationUpdateListener()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setFrameRate(android.view.SurfaceControl,float,int)>"
"<android.view.View: float getX()>","<android.view.View: float getX()>"
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.widget.AbsListView: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>","<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>"
"<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)>","<android.media.AudioManager: boolean registerRemoteController(android.media.RemoteController)>"
"<java.lang.reflect.Field: int hashCode()>","<java.lang.reflect.Field: int hashCode()>"
"<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>","<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>"
"<android.content.Context: java.io.File getCacheDir()>","<android.content.Context: java.io.File getCacheDir()>"
"<java.lang.Throwable: java.lang.Throwable getCause()>","<java.lang.Throwable: java.lang.Throwable getCause()>"
"<java.lang.System: java.lang.String clearProperty(java.lang.String)>","<java.lang.System: java.lang.String clearProperty(java.lang.String)>"
"<android.view.View: void setAnimationMatrix(android.graphics.Matrix)>","<android.view.View: void setAnimationMatrix(android.graphics.Matrix)>"
"<android.graphics.Paint: float getStrokeMiter()>","<android.graphics.Paint: float getStrokeMiter()>"
"<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>"
"<android.os.Parcel: void writeList(java.util.List)>","<android.os.Parcel: void writeList(java.util.List)>"
"<android.widget.TextView: void setBreakStrategy(int)>","<android.widget.TextView: void setBreakStrategy(int)>"
"<android.view.Window: android.transition.Transition getSharedElementReenterTransition()>","<android.view.Window: android.transition.Transition getSharedElementReenterTransition()>"
"<android.view.inputmethod.CompletionInfo: java.lang.String toString()>","<android.view.inputmethod.CompletionInfo: java.lang.String toString()>"
"<java.util.concurrent.locks.ReentrantLock: boolean isFair()>","<java.util.concurrent.locks.ReentrantLock: boolean isFair()>"
"<android.graphics.RecordingCanvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)>"
"<java.util.Date: int getMinutes()>","<java.util.Date: int getMinutes()>"
"<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.NetworkChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[],int,int)>","<java.util.Arrays: java.util.Spliterator$OfLong spliterator(long[],int,int)>"
"<android.content.Loader$OnLoadCompleteListener: void onLoadComplete(android.content.Loader,java.lang.Object)>","<android.content.Loader$OnLoadCompleteListener: void onLoadComplete(android.content.Loader,java.lang.Object)>"
"<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>","<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>"
"<android.graphics.Rect: float exactCenterY()>","<android.graphics.Rect: float exactCenterY()>"
"<java.util.regex.Pattern: java.util.stream.Stream splitAsStream(java.lang.CharSequence)>","<java.util.regex.Pattern: java.util.stream.Stream splitAsStream(java.lang.CharSequence)>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayScript(java.lang.String,java.lang.String)>"
"<java.lang.Float: java.lang.String toString(float)>","<java.lang.Float: java.lang.String toString(float)>"
"<java.util.Arrays: long[] copyOf(long[],int)>","<java.util.Arrays: long[] copyOf(long[],int)>"
"<android.widget.TextView: void onCreateContextMenu(android.view.ContextMenu)>","<android.widget.TextView: void onCreateContextMenu(android.view.ContextMenu)>"
"<android.os.Parcel: void writeInt(int)>","<android.os.Parcel: void writeInt(int)>"
"<android.text.PrecomputedText: int getSpanStart(java.lang.Object)>","<android.text.PrecomputedText: int getSpanStart(java.lang.Object)>"
"<android.widget.Scroller: int getCurrY()>","<android.widget.Scroller: int getCurrY()>"
"<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)>","<android.view.ViewGroup: void onNestedScroll(android.view.View,int,int,int,int)>"
"<android.content.pm.Signature: boolean equals(java.lang.Object)>","<android.content.pm.Signature: boolean equals(java.lang.Object)>"
"<android.media.VolumeShaper$Operation: java.lang.String toString()>","<android.media.VolumeShaper$Operation: java.lang.String toString()>"
"<java.util.List: int hashCode()>","<java.util.List: int hashCode()>"
"<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>","<android.hardware.camera2.params.StreamConfigurationMap: long getOutputMinFrameDuration(java.lang.Class,android.util.Size)>"
"<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>","<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>"
"<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>","<android.hardware.display.DisplayManager: android.view.Display[] getDisplays(java.lang.String)>"
"<java.time.chrono.Chronology: int hashCode()>","<java.time.chrono.Chronology: int hashCode()>"
"<android.view.WindowInsetsController: void hide(int)>","<android.view.WindowInsetsController: void hide(int)>"
"<android.graphics.Paint: float getShadowLayerRadius()>","<android.graphics.Paint: float getShadowLayerRadius()>"
"<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType[] values()>","<android.icu.util.ULocale$AvailableType: android.icu.util.ULocale$AvailableType[] values()>"
"<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>"
"<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>","<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>"
"<android.hardware.HardwareBuffer: boolean isClosed()>","<android.hardware.HardwareBuffer: boolean isClosed()>"
"<android.widget.AbsListView: void draw(android.graphics.Canvas)>","<android.widget.AbsListView: void draw(android.graphics.Canvas)>"
"<android.view.animation.Animation: int getBackgroundColor()>","<android.view.animation.Animation: int getBackgroundColor()>"
"<android.view.View: int getNextFocusDownId()>","<android.view.View: int getNextFocusDownId()>"
"<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>"
"<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>","<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)>"
"<android.media.AudioTrack: int write(short[],int,int,int)>","<android.media.AudioTrack: int write(short[],int,int,int)>"
"<java.util.Locale: java.util.Locale[] getAvailableLocales()>","<java.util.Locale: java.util.Locale[] getAvailableLocales()>"
"<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)>"
"<java.time.OffsetTime: java.time.OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.OffsetTime: java.time.OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<java.lang.reflect.Modifier: java.lang.String toString(int)>","<java.lang.reflect.Modifier: java.lang.String toString(int)>"
"<android.hardware.BatteryState: int getStatus()>","<android.hardware.BatteryState: int getStatus()>"
"<android.os.Debug: int getBinderProxyObjectCount()>","<android.os.Debug: int getBinderProxyObjectCount()>"
"<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>"
"<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>","<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>"
"<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()>","<android.view.textclassifier.TextClassifierEvent: int[] getActionIndices()>"
"<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Parcelable$Creator readParcelableCreator(java.lang.ClassLoader)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguage(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setLanguage(java.lang.String)>"
"<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>","<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>"
"<java.io.FileInputStream: int read()>","<java.io.FileInputStream: int read()>"
"<android.view.View: android.view.Display getDisplay()>","<android.view.View: android.view.Display getDisplay()>"
"<android.hardware.Camera: void reconnect()>","<android.hardware.Camera: void reconnect()>"
"<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>","<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>"
"<android.content.DialogInterface$OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>","<android.content.DialogInterface$OnMultiChoiceClickListener: void onClick(android.content.DialogInterface,int,boolean)>"
"<android.view.ViewDebug$FlagToString: int mask()>","<android.view.ViewDebug$FlagToString: int mask()>"
"<android.telephony.PreciseDataConnectionState: int describeContents()>","<android.telephony.PreciseDataConnectionState: int describeContents()>"
"<android.graphics.RectF: void readFromParcel(android.os.Parcel)>","<android.graphics.RectF: void readFromParcel(android.os.Parcel)>"
"<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>","<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>"
"<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>","<android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)>"
"<android.net.NetworkInfo: boolean isConnected()>","<android.net.NetworkInfo: boolean isConnected()>"
"<android.net.ConnectivityManager$NetworkCallback: void onAvailable(android.net.Network)>","<android.net.ConnectivityManager$NetworkCallback: void onAvailable(android.net.Network)>"
"<java.net.ServerSocket: java.net.InetAddress getInetAddress()>","<java.net.ServerSocket: java.net.InetAddress getInetAddress()>"
"<android.app.Fragment: void onDestroyOptionsMenu()>","<android.app.Fragment: void onDestroyOptionsMenu()>"
"<android.media.MediaTimestamp: void <init>(long,long,float)>","<android.media.MediaTimestamp: void <init>(long,long,float)>"
"<java.time.Duration: java.time.Duration ofNanos(long)>","<java.time.Duration: java.time.Duration ofNanos(long)>"
"<android.graphics.Picture: int getHeight()>","<android.graphics.Picture: int getHeight()>"
"<android.view.View: int getSystemUiVisibility()>","<android.view.View: int getSystemUiVisibility()>"
"<android.util.TypedValue: float getFraction(float,float)>","<android.util.TypedValue: float getFraction(float,float)>"
"<android.util.LongSparseArray: android.util.LongSparseArray clone()>","<android.util.LongSparseArray: android.util.LongSparseArray clone()>"
"<java.util.Locale: java.lang.String[] getISOLanguages()>","<java.util.Locale: java.lang.String[] getISOLanguages()>"
"<android.view.Window: void setNavigationBarColor(int)>","<android.view.Window: void setNavigationBarColor(int)>"
"<android.view.animation.Animation: boolean isFillEnabled()>","<android.view.animation.Animation: boolean isFillEnabled()>"
"<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>","<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>"
"<android.view.SearchEvent: void <init>(android.view.InputDevice)>","<android.view.SearchEvent: void <init>(android.view.InputDevice)>"
"<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>","<android.content.ClipboardManager: void setPrimaryClip(android.content.ClipData)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(short)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(short)>"
"<android.hardware.camera2.params.OutputConfiguration: void setStreamUseCase(long)>","<android.hardware.camera2.params.OutputConfiguration: void setStreamUseCase(long)>"
"<android.os.BaseBundle: long getLong(java.lang.String,long)>","<android.os.BaseBundle: long getLong(java.lang.String,long)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>"
"<android.hardware.camera2.params.MultiResolutionStreamInfo: int getHeight()>","<android.hardware.camera2.params.MultiResolutionStreamInfo: int getHeight()>"
"<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>","<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>"
"<java.lang.Math: long multiplyExact(long,int)>","<java.lang.Math: long multiplyExact(long,int)>"
"<android.os.Parcel: boolean hasFileDescriptors()>","<android.os.Parcel: boolean hasFileDescriptors()>"
"<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>","<android.view.Choreographer: void postFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>"
"<android.view.View: android.view.ContentInfo performReceiveContent(android.view.ContentInfo)>","<android.view.View: android.view.ContentInfo performReceiveContent(android.view.ContentInfo)>"
"<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>","<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>"
"<java.io.PrintWriter: void write(java.lang.String,int,int)>","<java.io.PrintWriter: void write(java.lang.String,int,int)>"
"<android.media.session.MediaSession$Callback: void onSetRating(android.media.Rating)>","<android.media.session.MediaSession$Callback: void onSetRating(android.media.Rating)>"
"<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>","<android.media.AudioTrack: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>"
"<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>","<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>"
"<java.util.Collection: boolean contains(java.lang.Object)>","<java.util.Collection: boolean contains(java.lang.Object)>"
"<android.graphics.Paint: void setStrokeMiter(float)>","<android.graphics.Paint: void setStrokeMiter(float)>"
"<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>","<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>"
"<java.util.Arrays: void parallelPrefix(long[],java.util.function.LongBinaryOperator)>","<java.util.Arrays: void parallelPrefix(long[],java.util.function.LongBinaryOperator)>"
"<android.view.animation.Transformation: java.lang.String toShortString()>","<android.view.animation.Transformation: java.lang.String toShortString()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
"<java.util.Date: java.lang.String toGMTString()>","<java.util.Date: java.lang.String toGMTString()>"
"<java.time.LocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>","<java.time.LocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>"
"<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>","<android.view.inputmethod.InputMethodInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>"
"<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>","<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>"
"<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>","<java.lang.System: void setSecurityManager(java.lang.SecurityManager)>"
"<java.time.LocalDate: void <init>()>","<java.time.LocalDate: void <init>()>"
"<android.view.textclassifier.TextLinks$Builder: void <init>(java.lang.String)>","<android.view.textclassifier.TextLinks$Builder: void <init>(java.lang.String)>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>"
"<java.net.DatagramSocket: boolean isBound()>","<java.net.DatagramSocket: boolean isBound()>"
"<android.view.KeyEvent: java.lang.String getCharacters()>","<android.view.KeyEvent: java.lang.String getCharacters()>"
"<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>","<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>"
"<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>","<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>"
"<android.util.Range: android.util.Range intersect(java.lang.Comparable,java.lang.Comparable)>","<android.util.Range: android.util.Range intersect(java.lang.Comparable,java.lang.Comparable)>"
"<java.io.PrintWriter: void write(char[],int,int)>","<java.io.PrintWriter: void write(char[],int,int)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,int[][])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofMultiInt(java.lang.String,int[][])>"
"<android.media.MediaPlayer: void seekTo(int)>","<android.media.MediaPlayer: void seekTo(int)>"
"<java.lang.Integer: int reverse(int)>","<java.lang.Integer: int reverse(int)>"
"<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)>","<android.os.PersistableBundle: void writeToStream(java.io.OutputStream)>"
"<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>","<java.nio.file.spi.FileSystemProvider: java.util.List installedProviders()>"
"<android.content.Context: android.content.res.Resources$Theme getTheme()>","<android.content.Context: android.content.res.Resources$Theme getTheme()>"
"<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>","<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>"
"<java.util.ArrayList: boolean contains(java.lang.Object)>","<java.util.ArrayList: boolean contains(java.lang.Object)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.content.pm.PackageManager$ComponentInfoFlags: android.content.pm.PackageManager$ComponentInfoFlags of(long)>","<android.content.pm.PackageManager$ComponentInfoFlags: android.content.pm.PackageManager$ComponentInfoFlags of(long)>"
"<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>","<android.graphics.RecordingCanvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>"
"<java.lang.Enum: int compareTo(java.lang.Object)>","<java.lang.Enum: int compareTo(java.lang.Object)>"
"<android.animation.Animator: boolean isPaused()>","<android.animation.Animator: boolean isPaused()>"
"<android.os.Debug: int getGlobalExternalAllocSize()>","<android.os.Debug: int getGlobalExternalAllocSize()>"
"<java.util.Arrays: int[] copyOf(int[],int)>","<java.util.Arrays: int[] copyOf(int[],int)>"
"<android.icu.util.ULocale: android.icu.util.ULocale getDefault()>","<android.icu.util.ULocale: android.icu.util.ULocale getDefault()>"
"<android.app.Activity: void onDetachedFromWindow()>","<android.app.Activity: void onDetachedFromWindow()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>"
"<android.view.Window$Callback: void onWindowFocusChanged(boolean)>","<android.view.Window$Callback: void onWindowFocusChanged(boolean)>"
"<android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>","<android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>"
"<android.app.Activity: android.view.MenuInflater getMenuInflater()>","<android.app.Activity: android.view.MenuInflater getMenuInflater()>"
"<android.content.ContextWrapper: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>","<android.content.ContextWrapper: int[] checkCallingOrSelfUriPermissions(java.util.List,int)>"
"<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>","<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>"
"<android.view.View: void invalidate(int,int,int,int)>","<android.view.View: void invalidate(int,int,int,int)>"
"<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>","<android.content.ContextWrapper: boolean moveSharedPreferencesFrom(android.content.Context,java.lang.String)>"
"<java.io.File: boolean canWrite()>","<java.io.File: boolean canWrite()>"
"<java.nio.file.FileSystem: boolean isOpen()>","<java.nio.file.FileSystem: boolean isOpen()>"
"<android.media.Rating: float getPercentRating()>","<android.media.Rating: float getPercentRating()>"
"<java.net.DatagramSocket: java.net.DatagramSocket setOption(java.net.SocketOption,java.lang.Object)>","<java.net.DatagramSocket: java.net.DatagramSocket setOption(java.net.SocketOption,java.lang.Object)>"
"<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>","<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>"
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.content.pm.Signature: char[] toChars(char[],int[])>","<android.content.pm.Signature: char[] toChars(char[],int[])>"
"<android.os.Build$Partition: java.lang.String getName()>","<android.os.Build$Partition: java.lang.String getName()>"
"<java.util.stream.IntStream: java.util.stream.IntStream empty()>","<java.util.stream.IntStream: java.util.stream.IntStream empty()>"
"<java.nio.Buffer: int position()>","<java.nio.Buffer: int position()>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>","<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>"
"<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>","<android.database.Cursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>"
"<java.nio.IntBuffer: java.nio.Buffer mark()>","<java.nio.IntBuffer: java.nio.Buffer mark()>"
"<android.media.VolumeShaper: void close()>","<android.media.VolumeShaper: void close()>"
"<android.view.View: boolean isHardwareAccelerated()>","<android.view.View: boolean isHardwareAccelerated()>"
"<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>","<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>"
"<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>","<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>"
"<android.animation.ValueAnimator: void start()>","<android.animation.ValueAnimator: void start()>"
"<android.content.pm.Signature: void <clinit>()>","<android.content.pm.Signature: void <clinit>()>"
"<android.content.pm.PackageInstaller$SessionParams: void setInstallReason(int)>","<android.content.pm.PackageInstaller$SessionParams: void setInstallReason(int)>"
"<java.time.OffsetDateTime: boolean isEqual(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: boolean isEqual(java.time.OffsetDateTime)>"
"<android.view.View: void setForeground(android.graphics.drawable.Drawable)>","<android.view.View: void setForeground(android.graphics.drawable.Drawable)>"
"<android.transition.Transition$TransitionListener: void onTransitionCancel(android.transition.Transition)>","<android.transition.Transition$TransitionListener: void onTransitionCancel(android.transition.Transition)>"
"<java.net.URLConnection: java.lang.String toString()>","<java.net.URLConnection: java.lang.String toString()>"
"<java.lang.invoke.MethodType: void <init>()>","<java.lang.invoke.MethodType: void <init>()>"
"<android.view.ActionMode$Callback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>","<android.view.ActionMode$Callback: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>"
"<android.telephony.TelephonyCallback$DataConnectionStateListener: void onDataConnectionStateChanged(int,int)>","<android.telephony.TelephonyCallback$DataConnectionStateListener: void onDataConnectionStateChanged(int,int)>"
"<java.nio.CharBuffer: void <init>()>","<java.nio.CharBuffer: void <init>()>"
"<android.widget.EditText: void onSizeChanged(int,int,int,int)>","<android.widget.EditText: void onSizeChanged(int,int,int,int)>"
"<java.net.SocketImpl: void shutdownOutput()>","<java.net.SocketImpl: void shutdownOutput()>"
"<java.time.LocalTime: java.time.LocalTime withSecond(int)>","<java.time.LocalTime: java.time.LocalTime withSecond(int)>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int,int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setLookasideConfig(int,int)>"
"<java.lang.UnknownError: void <init>(java.lang.String)>","<java.lang.UnknownError: void <init>(java.lang.String)>"
"<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>","<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>"
"<android.view.MotionEvent: int getEdgeFlags()>","<android.view.MotionEvent: int getEdgeFlags()>"
"<android.content.LocusId: java.lang.String getId()>","<android.content.LocusId: java.lang.String getId()>"
"<android.view.View: void setClickable(boolean)>","<android.view.View: void setClickable(boolean)>"
"<android.app.VoiceInteractor$Request: java.lang.String toString()>","<android.app.VoiceInteractor$Request: java.lang.String toString()>"
"<android.content.pm.SigningInfo: void <init>(android.content.pm.SigningInfo)>","<android.content.pm.SigningInfo: void <init>(android.content.pm.SigningInfo)>"
"<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>","<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>"
"<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>","<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>"
"<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()>","<android.content.IntentFilter: java.util.Iterator schemeSpecificPartsIterator()>"
"<android.graphics.drawable.Drawable: boolean isStateful()>","<android.graphics.drawable.Drawable: boolean isStateful()>"
"<java.lang.Thread: java.util.Map getAllStackTraces()>","<java.lang.Thread: java.util.Map getAllStackTraces()>"
"<java.util.List: boolean isEmpty()>","<java.util.List: boolean isEmpty()>"
"<android.content.pm.PackageInstaller$SessionParams: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PackageInstaller$SessionParams: void writeToParcel(android.os.Parcel,int)>"
"<android.content.res.AssetManager$AssetInputStream: void close()>","<android.content.res.AssetManager$AssetInputStream: void close()>"
"<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>","<java.lang.Package: java.lang.'annotation'.Annotation[] getDeclaredAnnotationsByType(java.lang.Class)>"
"<android.app.Fragment: boolean isAdded()>","<android.app.Fragment: boolean isAdded()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>"
"<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>","<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>"
"<android.content.pm.PackageInstaller$Session: void <init>()>","<android.content.pm.PackageInstaller$Session: void <init>()>"
"<android.content.Loader: void onForceLoad()>","<android.content.Loader: void onForceLoad()>"
"<android.media.AudioRecord: int getPositionNotificationPeriod()>","<android.media.AudioRecord: int getPositionNotificationPeriod()>"
"<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>","<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>"
"<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)>","<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)>"
"<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>"
"<android.view.inputmethod.TextAttribute$Builder: void <init>()>","<android.view.inputmethod.TextAttribute$Builder: void <init>()>"
"<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>","<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>"
"<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>","<android.graphics.Color: android.graphics.ColorSpace getColorSpace()>"
"<java.net.InetAddress: boolean isMCGlobal()>","<java.net.InetAddress: boolean isMCGlobal()>"
"<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>","<android.view.Display: void getRealMetrics(android.util.DisplayMetrics)>"
"<android.view.View: int getImportantForAutofill()>","<android.view.View: int getImportantForAutofill()>"
"<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>","<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>"
"<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.view.View: boolean willNotDraw()>","<android.view.View: boolean willNotDraw()>"
"<android.content.pm.PackageInstaller$SessionInfo: int getMode()>","<android.content.pm.PackageInstaller$SessionInfo: int getMode()>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])>"
"<java.lang.Void: void <clinit>()>","<java.lang.Void: void <clinit>()>"
"<android.content.pm.PackageManager$ComponentEnabledSetting: int describeContents()>","<android.content.pm.PackageManager$ComponentEnabledSetting: int describeContents()>"
"<android.app.PictureInPictureParams: boolean isAutoEnterEnabled()>","<android.app.PictureInPictureParams: boolean isAutoEnterEnabled()>"
"<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAvailable(java.lang.String)>","<android.hardware.camera2.CameraManager$AvailabilityCallback: void onCameraAvailable(java.lang.String)>"
"<android.widget.MediaController$MediaPlayerControl: int getCurrentPosition()>","<android.widget.MediaController$MediaPlayerControl: int getCurrentPosition()>"
"<android.view.ScrollCaptureCallback: void onScrollCaptureStart(android.view.ScrollCaptureSession,android.os.CancellationSignal,java.lang.Runnable)>","<android.view.ScrollCaptureCallback: void onScrollCaptureStart(android.view.ScrollCaptureSession,android.os.CancellationSignal,java.lang.Runnable)>"
"<java.nio.ByteBuffer: java.lang.String toString()>","<java.nio.ByteBuffer: java.lang.String toString()>"
"<java.lang.ThreadGroup: void stop()>","<java.lang.ThreadGroup: void stop()>"
"<android.text.Layout: float getSpacingMultiplier()>","<android.text.Layout: float getSpacingMultiplier()>"
"<android.content.pm.PackageManager: java.util.List queryServiceProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryServiceProperty(java.lang.String)>"
"<android.media.AudioTrack: int getSampleRate()>","<android.media.AudioTrack: int getSampleRate()>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder addUnicodeLocaleAttribute(java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder addUnicodeLocaleAttribute(java.lang.String)>"
"<android.media.Session2Token: java.lang.String getPackageName()>","<android.media.Session2Token: java.lang.String getPackageName()>"
"<android.app.Activity: java.lang.String getLocalClassName()>","<android.app.Activity: java.lang.String getLocalClassName()>"
"<java.lang.Class: java.lang.Class getDeclaringClass()>","<java.lang.Class: java.lang.Class getDeclaringClass()>"
"<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>","<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>"
"<java.lang.reflect.Method: boolean isVarArgs()>","<java.lang.reflect.Method: boolean isVarArgs()>"
"<android.view.Window: android.os.Bundle saveHierarchyState()>","<android.view.Window: android.os.Bundle saveHierarchyState()>"
"<android.os.Process: long getElapsedCpuTime()>","<android.os.Process: long getElapsedCpuTime()>"
"<android.app.PendingIntent$OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>","<android.app.PendingIntent$OnFinished: void onSendFinished(android.app.PendingIntent,android.content.Intent,int,java.lang.String,android.os.Bundle)>"
"<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>","<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>"
"<java.util.regex.Matcher: java.lang.String group(java.lang.String)>","<java.util.regex.Matcher: java.lang.String group(java.lang.String)>"
"<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>","<android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)>"
"<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)>"
"<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>","<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>"
"<android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)>","<android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)>"
"<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>","<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>"
"<java.time.LocalTime: java.lang.String toString()>","<java.time.LocalTime: java.lang.String toString()>"
"<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>","<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.Writer)>"
"<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>","<android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)>"
"<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextRun(java.lang.CharSequence,int,int,int,int,float,float,boolean,android.graphics.Paint)>"
"<java.nio.file.attribute.FileTime: long toMillis()>","<java.nio.file.attribute.FileTime: long toMillis()>"
"<java.nio.MappedByteBuffer: boolean isLoaded()>","<java.nio.MappedByteBuffer: boolean isLoaded()>"
"<android.widget.AbsListView: int getCheckedItemPosition()>","<android.widget.AbsListView: int getCheckedItemPosition()>"
"<android.graphics.Path: boolean isConvex()>","<android.graphics.Path: boolean isConvex()>"
"<android.net.ConnectivityManager: void registerBestMatchingNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>","<android.net.ConnectivityManager: void registerBestMatchingNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler)>"
"<java.lang.String: byte[] getBytes()>","<java.lang.String: byte[] getBytes()>"
"<java.net.Socket: int getTrafficClass()>","<java.net.Socket: int getTrafficClass()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setNetworkTypeBitmask(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setNetworkTypeBitmask(int)>"
"<java.util.Deque: boolean addAll(java.util.Collection)>","<java.util.Deque: boolean addAll(java.util.Collection)>"
"<java.lang.Integer: int hashCode()>","<java.lang.Integer: int hashCode()>"
"<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)>","<android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)>"
"<java.nio.file.FileSystem: void <init>()>","<java.nio.file.FileSystem: void <init>()>"
"<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)>","<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)>"
"<android.app.Fragment: void setHasOptionsMenu(boolean)>","<android.app.Fragment: void setHasOptionsMenu(boolean)>"
"<android.app.AlertDialog: boolean onKeyDown(int,android.view.KeyEvent)>","<android.app.AlertDialog: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.view.View: boolean isScrollContainer()>","<android.view.View: boolean isScrollContainer()>"
"<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>","<android.content.pm.PackageManager: int getApplicationEnabledSetting(java.lang.String)>"
"<android.icu.util.ULocale: java.lang.String getScript()>","<android.icu.util.ULocale: java.lang.String getScript()>"
"<android.widget.AbsListView: int getTopPaddingOffset()>","<android.widget.AbsListView: int getTopPaddingOffset()>"
"<android.graphics.drawable.BitmapDrawable: void <init>()>","<android.graphics.drawable.BitmapDrawable: void <init>()>"
"<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>","<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>"
"<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>","<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map,java.util.List)>"
"<android.widget.RemoteViews: void setScrollPosition(int,int)>","<android.widget.RemoteViews: void setScrollPosition(int,int)>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.view.ViewGroup: boolean hasTransientState()>","<android.view.ViewGroup: boolean hasTransientState()>"
"<android.view.ViewStructure: void setCheckable(boolean)>","<android.view.ViewStructure: void setCheckable(boolean)>"
"<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>","<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)>"
"<android.view.MotionEvent: float getY(int)>","<android.view.MotionEvent: float getY(int)>"
"<java.nio.LongBuffer: void <init>()>","<java.nio.LongBuffer: void <init>()>"
"<android.hardware.camera2.CameraCharacteristics$Key: boolean equals(java.lang.Object)>","<android.hardware.camera2.CameraCharacteristics$Key: boolean equals(java.lang.Object)>"
"<android.graphics.Canvas: void skew(float,float)>","<android.graphics.Canvas: void skew(float,float)>"
"<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>","<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>"
"<java.util.concurrent.Semaphore: void release()>","<java.util.concurrent.Semaphore: void release()>"
"<java.nio.channels.Selector: java.nio.channels.Selector open()>","<java.nio.channels.Selector: java.nio.channels.Selector open()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setLegacyStreamType(int)>"
"<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>","<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>"
"<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>","<java.util.Map: java.lang.Object replace(java.lang.Object,java.lang.Object)>"
"<java.util.Locale$FilteringMode: void <clinit>()>","<java.util.Locale$FilteringMode: void <clinit>()>"
"<android.view.ViewGroup: void startLayoutAnimation()>","<android.view.ViewGroup: void startLayoutAnimation()>"
"<android.os.MemoryFile: int readBytes(byte[],int,int,int)>","<android.os.MemoryFile: int readBytes(byte[],int,int,int)>"
"<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>","<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>"
"<android.content.res.TypedArray: int getLayoutDimension(int,int)>","<android.content.res.TypedArray: int getLayoutDimension(int,int)>"
"<java.util.Map: void replaceAll(java.util.function.BiFunction)>","<java.util.Map: void replaceAll(java.util.function.BiFunction)>"
"<android.graphics.Region: boolean equals(java.lang.Object)>","<android.graphics.Region: boolean equals(java.lang.Object)>"
"<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>","<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>"
"<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>","<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)>"
"<java.util.ArrayList: boolean addAll(int,java.util.Collection)>","<java.util.ArrayList: boolean addAll(int,java.util.Collection)>"
"<java.io.FileOutputStream: void close()>","<java.io.FileOutputStream: void close()>"
"<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>","<android.media.MediaFormat: void setString(java.lang.String,java.lang.String)>"
"<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>","<java.util.Spliterator: void forEachRemaining(java.util.function.Consumer)>"
"<android.content.res.Resources: android.graphics.Movie getMovie(int)>","<android.content.res.Resources: android.graphics.Movie getMovie(int)>"
"<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName)>","<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName)>"
"<android.net.IpSecTransform$Builder: android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress,android.net.IpSecManager$SecurityParameterIndex)>","<android.net.IpSecTransform$Builder: android.net.IpSecTransform buildTransportModeTransform(java.net.InetAddress,android.net.IpSecManager$SecurityParameterIndex)>"
"<java.lang.Double: java.lang.Double valueOf(double)>","<java.lang.Double: java.lang.Double valueOf(double)>"
"<android.provider.Settings$Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Global: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>"
"<android.app.ActionBar: android.app.ActionBar$Tab newTab()>","<android.app.ActionBar: android.app.ActionBar$Tab newTab()>"
"<java.lang.SecurityManager: void checkWrite(java.lang.String)>","<java.lang.SecurityManager: void checkWrite(java.lang.String)>"
"<java.time.LocalTime: boolean isBefore(java.time.LocalTime)>","<java.time.LocalTime: boolean isBefore(java.time.LocalTime)>"
"<android.view.inputmethod.CompletionInfo: void <clinit>()>","<android.view.inputmethod.CompletionInfo: void <clinit>()>"
"<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>","<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>"
"<android.view.Window: void setBackgroundBlurRadius(int)>","<android.view.Window: void setBackgroundBlurRadius(int)>"
"<android.app.Activity: android.view.View getCurrentFocus()>","<android.app.Activity: android.view.View getCurrentFocus()>"
"<android.view.View: void setBackgroundColor(int)>","<android.view.View: void setBackgroundColor(int)>"
"<java.util.Spliterator$OfLong: boolean tryAdvance(java.lang.Object)>","<java.util.Spliterator$OfLong: boolean tryAdvance(java.lang.Object)>"
"<android.view.View$MeasureSpec: int getMode(int)>","<android.view.View$MeasureSpec: int getMode(int)>"
"<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>","<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>"
"<android.app.Dialog: boolean isShowing()>","<android.app.Dialog: boolean isShowing()>"
"<android.content.IntentFilter: java.util.Iterator actionsIterator()>","<android.content.IntentFilter: java.util.Iterator actionsIterator()>"
"<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>","<android.os.LocaleList: android.os.LocaleList getAdjustedDefault()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>","<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>"
"<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>","<android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)>"
"<android.content.pm.PackageManager: java.util.List queryProviderProperty(java.lang.String)>","<android.content.pm.PackageManager: java.util.List queryProviderProperty(java.lang.String)>"
"<android.hardware.SensorManager$DynamicSensorCallback: void <init>()>","<android.hardware.SensorManager$DynamicSensorCallback: void <init>()>"
"<android.view.Window: boolean getAllowReturnTransitionOverlap()>","<android.view.Window: boolean getAllowReturnTransitionOverlap()>"
"<android.widget.AbsListView: void layoutChildren()>","<android.widget.AbsListView: void layoutChildren()>"
"<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setIcon(android.graphics.drawable.Drawable)>"
"<java.lang.Byte: int toUnsignedInt(byte)>","<java.lang.Byte: int toUnsignedInt(byte)>"
"<android.telephony.NetworkScanRequest: boolean equals(java.lang.Object)>","<android.telephony.NetworkScanRequest: boolean equals(java.lang.Object)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)>","<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)>"
"<android.view.View: void setNestedScrollingEnabled(boolean)>","<android.view.View: void setNestedScrollingEnabled(boolean)>"
"<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>","<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.ViewGroup)>"
"<java.nio.IntBuffer: java.nio.IntBuffer compact()>","<java.nio.IntBuffer: java.nio.IntBuffer compact()>"
"<android.widget.TextView: int getHighlightColor()>","<android.widget.TextView: int getHighlightColor()>"
"<android.app.Activity: void setContentView(int)>","<android.app.Activity: void setContentView(int)>"
"<java.util.OptionalInt: int orElseThrow()>","<java.util.OptionalInt: int orElseThrow()>"
"<java.nio.LongBuffer: java.nio.Buffer mark()>","<java.nio.LongBuffer: java.nio.Buffer mark()>"
"<java.net.MalformedURLException: void <init>(java.lang.String)>","<java.net.MalformedURLException: void <init>(java.lang.String)>"
"<java.util.Arrays: int binarySearch(long[],long)>","<java.util.Arrays: int binarySearch(long[],long)>"
"<java.net.DatagramSocketImpl: void create()>","<java.net.DatagramSocketImpl: void create()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>"
"<android.view.WindowManager$LayoutParams: int describeContents()>","<android.view.WindowManager$LayoutParams: int describeContents()>"
"<android.graphics.Rect: boolean contains(android.graphics.Rect)>","<android.graphics.Rect: boolean contains(android.graphics.Rect)>"
"<android.os.Parcelable$ClassLoaderCreator: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>","<android.os.Parcelable$ClassLoaderCreator: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>"
"<android.view.textclassifier.TextClassificationContext: int describeContents()>","<android.view.textclassifier.TextClassificationContext: int describeContents()>"
"<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>","<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>"
"<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.view.View: void postInvalidate()>","<android.view.View: void postInvalidate()>"
"<android.net.Network: java.net.InetAddress getByName(java.lang.String)>","<android.net.Network: java.net.InetAddress getByName(java.lang.String)>"
"<java.time.OffsetTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.OffsetTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<java.nio.file.WatchKey: boolean isValid()>","<java.nio.file.WatchKey: boolean isValid()>"
"<java.lang.'annotation'.RetentionPolicy: void <clinit>()>","<java.lang.'annotation'.RetentionPolicy: void <clinit>()>"
"<android.view.textclassifier.TextLanguage: void <init>()>","<android.view.textclassifier.TextLanguage: void <init>()>"
"<java.lang.String: java.util.stream.Stream lines()>","<java.lang.String: java.util.stream.Stream lines()>"
"<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.view.SurfaceView: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<java.lang.invoke.MethodType: java.lang.String toString()>","<java.lang.invoke.MethodType: java.lang.String toString()>"
"<android.app.FragmentManager: android.app.Fragment getPrimaryNavigationFragment()>","<android.app.FragmentManager: android.app.Fragment getPrimaryNavigationFragment()>"
"<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace$Adaptation)>","<android.graphics.ColorSpace: android.graphics.ColorSpace adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace$Adaptation)>"
"<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>","<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>"
"<android.graphics.RenderNode: int getLeft()>","<android.graphics.RenderNode: int getLeft()>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)>"
"<android.graphics.Paint: void setHinting(int)>","<android.graphics.Paint: void setHinting(int)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>","<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>"
"<android.media.AudioManager: void setRouting(int,int,int)>","<android.media.AudioManager: void setRouting(int,int,int)>"
"<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>","<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>"
"<android.media.AudioRecord: int getRecordingState()>","<android.media.AudioRecord: int getRecordingState()>"
"<android.view.View: void setDrawingCacheEnabled(boolean)>","<android.view.View: void setDrawingCacheEnabled(boolean)>"
"<java.util.Arrays: void parallelSort(java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: void parallelSort(java.lang.Object[],int,int,java.util.Comparator)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer get(float[],int,int)>"
"<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>","<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>"
"<java.lang.SecurityManager: void checkListen(int)>","<java.lang.SecurityManager: void checkListen(int)>"
"<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<java.text.AttributedCharacterIterator$Attribute: void <clinit>()>","<java.text.AttributedCharacterIterator$Attribute: void <clinit>()>"
"<java.time.chrono.IsoChronology: java.time.Period period(int,int,int)>","<java.time.chrono.IsoChronology: java.time.Period period(int,int,int)>"
"<java.security.NoSuchAlgorithmException: void <init>()>","<java.security.NoSuchAlgorithmException: void <init>()>"
"<android.hardware.camera2.params.InputConfiguration: int hashCode()>","<android.hardware.camera2.params.InputConfiguration: int hashCode()>"
"<java.io.Closeable: void close()>","<java.io.Closeable: void close()>"
"<android.os.Process: long getStartUptimeMillis()>","<android.os.Process: long getStartUptimeMillis()>"
"<android.content.Context: void sendStickyBroadcast(android.content.Intent)>","<android.content.Context: void sendStickyBroadcast(android.content.Intent)>"
"<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>","<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>"
"<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,float,int)>","<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,float,int)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
"<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.util.Arrays: int compare(double[],int,int,double[],int,int)>","<java.util.Arrays: int compare(double[],int,int,double[],int,int)>"
"<java.util.ArrayList: boolean removeAll(java.util.Collection)>","<java.util.ArrayList: boolean removeAll(java.util.Collection)>"
"<android.widget.Toolbar: void setOnMenuItemClickListener(android.widget.Toolbar$OnMenuItemClickListener)>","<android.widget.Toolbar: void setOnMenuItemClickListener(android.widget.Toolbar$OnMenuItemClickListener)>"
"<java.io.InputStream: int read()>","<java.io.InputStream: int read()>"
"<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>","<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withLayer()>"
"<java.lang.Math: double floor(double)>","<java.lang.Math: double floor(double)>"
"<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()>","<android.view.Display: android.view.Display$HdrCapabilities getHdrCapabilities()>"
"<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,int)>","<android.view.inputmethod.InputMethodManager: void showStatusIcon(android.os.IBinder,java.lang.String,int)>"
"<android.view.animation.Animation: android.view.animation.Animation clone()>","<android.view.animation.Animation: android.view.animation.Animation clone()>"
"<android.graphics.drawable.Icon: java.lang.String getResPackage()>","<android.graphics.drawable.Icon: java.lang.String getResPackage()>"
"<android.telephony.BarringInfo: int describeContents()>","<android.telephony.BarringInfo: int describeContents()>"
"<android.graphics.Insets: android.graphics.Insets add(android.graphics.Insets,android.graphics.Insets)>","<android.graphics.Insets: android.graphics.Insets add(android.graphics.Insets,android.graphics.Insets)>"
"<android.media.ImageReader$Builder: android.media.ImageReader$Builder setMaxImages(int)>","<android.media.ImageReader$Builder: android.media.ImageReader$Builder setMaxImages(int)>"
"<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>","<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>"
"<android.os.Debug: int getGlobalFreedSize()>","<android.os.Debug: int getGlobalFreedSize()>"
"<android.util.SizeF: void <init>(float,float)>","<android.util.SizeF: void <init>(float,float)>"
"<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>","<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>"
"<android.hardware.Camera$Parameters: int getMinExposureCompensation()>","<android.hardware.Camera$Parameters: int getMinExposureCompensation()>"
"<android.view.ViewGroup: void detachViewFromParent(int)>","<android.view.ViewGroup: void detachViewFromParent(int)>"
"<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)>","<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)>"
"<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()>","<android.hardware.camera2.params.SessionConfiguration: android.hardware.camera2.CameraCaptureSession$StateCallback getStateCallback()>"
"<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>","<android.app.Fragment: void onPictureInPictureModeChanged(boolean)>"
"<java.lang.Math: float max(float,float)>","<java.lang.Math: float max(float,float)>"
"<java.time.LocalTime: java.time.LocalTime ofSecondOfDay(long)>","<java.time.LocalTime: java.time.LocalTime ofSecondOfDay(long)>"
"<android.widget.Toolbar: void setContentInsetsRelative(int,int)>","<android.widget.Toolbar: void setContentInsetsRelative(int,int)>"
"<android.view.View: int getScrollBarStyle()>","<android.view.View: int getScrollBarStyle()>"
"<java.util.Arrays: int mismatch(char[],int,int,char[],int,int)>","<java.util.Arrays: int mismatch(char[],int,int,char[],int,int)>"
"<java.lang.Class: java.lang.Object newInstance()>","<java.lang.Class: java.lang.Object newInstance()>"
"<android.app.Activity: void onStateNotSaved()>","<android.app.Activity: void onStateNotSaved()>"
"<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>","<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>"
"<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<java.net.NetworkInterface: java.lang.String getDisplayName()>","<java.net.NetworkInterface: java.lang.String getDisplayName()>"
"<android.app.PendingIntent: boolean isBroadcast()>","<android.app.PendingIntent: boolean isBroadcast()>"
"<java.lang.StringBuilder: void <init>(java.lang.String)>","<java.lang.StringBuilder: void <init>(java.lang.String)>"
"<android.net.ConnectivityManager: byte[] getNetworkWatchlistConfigHash()>","<android.net.ConnectivityManager: byte[] getNetworkWatchlistConfigHash()>"
"<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>","<android.app.Activity: boolean shouldShowRequestPermissionRationale(java.lang.String)>"
"<android.widget.TextView: int getLineBreakWordStyle()>","<android.widget.TextView: int getLineBreakWordStyle()>"
"<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>","<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>"
"<java.lang.Object: int hashCode()>","<java.lang.Object: int hashCode()>"
"<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>","<android.view.SurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>"
"<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>","<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>"
"<android.view.ViewStructure: void setMaxTextEms(int)>","<android.view.ViewStructure: void setMaxTextEms(int)>"
"<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)>","<android.os.BaseBundle: java.lang.String getString(java.lang.String,java.lang.String)>"
"<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)>","<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[],int,int)>"
"<java.lang.String: int codePointAt(int)>","<java.lang.String: int codePointAt(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <clinit>()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: void <clinit>()>"
"<android.media.session.PlaybackState$Builder: void <init>()>","<android.media.session.PlaybackState$Builder: void <init>()>"
"<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>","<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>"
"<android.os.Parcel: void readIntArray(int[])>","<android.os.Parcel: void readIntArray(int[])>"
"<android.widget.Scroller: int timePassed()>","<android.widget.Scroller: int timePassed()>"
"<android.os.VibrationAttributes$Builder: void <init>(android.os.VibrationAttributes)>","<android.os.VibrationAttributes$Builder: void <init>(android.os.VibrationAttributes)>"
"<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>","<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>"
"<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>","<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>"
"<java.lang.Integer: int max(int,int)>","<java.lang.Integer: int max(int,int)>"
"<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.Executable: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.graphics.RectF: void roundOut(android.graphics.Rect)>","<android.graphics.RectF: void roundOut(android.graphics.Rect)>"
"<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>","<java.nio.file.PathMatcher: boolean matches(java.nio.file.Path)>"
"<android.os.MessageQueue: boolean isIdle()>","<android.os.MessageQueue: boolean isIdle()>"
"<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()>","<android.content.ContentResolver$MimeTypeInfo: java.lang.CharSequence getContentDescription()>"
"<android.view.View: boolean post(java.lang.Runnable)>","<android.view.View: boolean post(java.lang.Runnable)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setTypeConfig(android.view.textclassifier.TextClassifier$EntityConfig)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setTypeConfig(android.view.textclassifier.TextClassifier$EntityConfig)>"
"<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>","<android.widget.TextView: void setTextKeepState(java.lang.CharSequence,android.widget.TextView$BufferType)>"
"<java.lang.Byte: short shortValue()>","<java.lang.Byte: short shortValue()>"
"<android.content.ContentValues: void <init>(int)>","<android.content.ContentValues: void <init>(int)>"
"<android.view.textclassifier.TextSelection$Request: boolean shouldIncludeTextClassification()>","<android.view.textclassifier.TextSelection$Request: boolean shouldIncludeTextClassification()>"
"<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.content.ContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.view.View: float getTransitionAlpha()>","<android.view.View: float getTransitionAlpha()>"
"<java.nio.Buffer: void <init>()>","<java.nio.Buffer: void <init>()>"
"<android.view.WindowInsetsAnimationController: void finish(boolean)>","<android.view.WindowInsetsAnimationController: void finish(boolean)>"
"<android.app.Fragment: void onActivityCreated(android.os.Bundle)>","<android.app.Fragment: void onActivityCreated(android.os.Bundle)>"
"<android.view.WindowInsets: void <clinit>()>","<android.view.WindowInsets: void <clinit>()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>","<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>"
"<android.view.View: java.util.List getPreferKeepClearRects()>","<android.view.View: java.util.List getPreferKeepClearRects()>"
"<java.nio.ShortBuffer: boolean equals(java.lang.Object)>","<java.nio.ShortBuffer: boolean equals(java.lang.Object)>"
"<java.lang.Enum: void <init>(java.lang.String,int)>","<java.lang.Enum: void <init>(java.lang.String,int)>"
"<android.view.InputDevice: void <init>()>","<android.view.InputDevice: void <init>()>"
"<java.util.stream.Stream: java.util.stream.Stream sorted()>","<java.util.stream.Stream: java.util.stream.Stream sorted()>"
"<android.database.DataSetObserver: void onInvalidated()>","<android.database.DataSetObserver: void onInvalidated()>"
"<android.app.Person: void writeToParcel(android.os.Parcel,int)>","<android.app.Person: void writeToParcel(android.os.Parcel,int)>"
"<android.view.ActionMode: void invalidate()>","<android.view.ActionMode: void invalidate()>"
"<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>","<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreviewSize()>"
"<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>","<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>","<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress,byte)>"
"<java.text.CharacterIterator: int getIndex()>","<java.text.CharacterIterator: int getIndex()>"
"<android.widget.RemoteViews$RemoteCollectionItems: void writeToParcel(android.os.Parcel,int)>","<android.widget.RemoteViews$RemoteCollectionItems: void writeToParcel(android.os.Parcel,int)>"
"<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>","<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>"
"<android.view.ViewDebug$ExportedProperty: boolean resolveId()>","<android.view.ViewDebug$ExportedProperty: boolean resolveId()>"
"<android.view.Window: android.view.View getDecorView()>","<android.view.Window: android.view.View getDecorView()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>"
"<java.lang.Integer: int signum(int)>","<java.lang.Integer: int signum(int)>"
"<android.os.VibratorManager: android.os.Vibrator getDefaultVibrator()>","<android.os.VibratorManager: android.os.Vibrator getDefaultVibrator()>"
"<android.app.FragmentManager: void invalidateOptionsMenu()>","<android.app.FragmentManager: void invalidateOptionsMenu()>"
"<android.hardware.Sensor: java.lang.String getStringType()>","<android.hardware.Sensor: java.lang.String getStringType()>"
"<android.widget.TextView$BufferType: android.widget.TextView$BufferType valueOf(java.lang.String)>","<android.widget.TextView$BufferType: android.widget.TextView$BufferType valueOf(java.lang.String)>"
"<java.lang.ThreadGroup: int activeGroupCount()>","<java.lang.ThreadGroup: int activeGroupCount()>"
"<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>","<java.util.AbstractMap: java.lang.Object get(java.lang.Object)>"
"<android.os.Bundle: byte[] getByteArray(java.lang.String)>","<android.os.Bundle: byte[] getByteArray(java.lang.String)>"
"<android.os.Looper: void prepareMainLooper()>","<android.os.Looper: void prepareMainLooper()>"
"<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>","<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>"
"<android.content.Context: java.io.File[] getObbDirs()>","<android.content.Context: java.io.File[] getObbDirs()>"
"<java.nio.DoubleBuffer: java.nio.ByteOrder order()>","<java.nio.DoubleBuffer: java.nio.ByteOrder order()>"
"<java.util.Hashtable: boolean contains(java.lang.Object)>","<java.util.Hashtable: boolean contains(java.lang.Object)>"
"<android.content.IntentSender$OnFinished: void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)>","<android.content.IntentSender$OnFinished: void onSendFinished(android.content.IntentSender,android.content.Intent,int,java.lang.String,android.os.Bundle)>"
"<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>","<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>"
"<android.telephony.data.ApnSetting: int getAuthType()>","<android.telephony.data.ApnSetting: int getAuthType()>"
"<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)>","<android.media.AudioManager: void unregisterMediaButtonEventReceiver(android.content.ComponentName)>"
"<java.time.Duration: long toSeconds()>","<java.time.Duration: long toSeconds()>"
"<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.app.FragmentManager,android.app.Fragment)>","<android.app.FragmentManager$FragmentLifecycleCallbacks: void onFragmentResumed(android.app.FragmentManager,android.app.Fragment)>"
"<android.media.MediaPlayer$OnDrmPreparedListener: void onDrmPrepared(android.media.MediaPlayer,int)>","<android.media.MediaPlayer$OnDrmPreparedListener: void onDrmPrepared(android.media.MediaPlayer,int)>"
"<java.net.URLStreamHandler: int hashCode(java.net.URL)>","<java.net.URLStreamHandler: int hashCode(java.net.URL)>"
"<android.widget.AdapterView: android.view.View getSelectedView()>","<android.widget.AdapterView: android.view.View getSelectedView()>"
"<android.animation.LayoutTransition: boolean isRunning()>","<android.animation.LayoutTransition: boolean isRunning()>"
"<java.net.Proxy$Type: java.net.Proxy$Type valueOf(java.lang.String)>","<java.net.Proxy$Type: java.net.Proxy$Type valueOf(java.lang.String)>"
"<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>","<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>"
"<android.graphics.text.LineBreakConfig$Builder: void <init>()>","<android.graphics.text.LineBreakConfig$Builder: void <init>()>"
"<android.graphics.Outline: float getRadius()>","<android.graphics.Outline: float getRadius()>"
"<java.net.ServerSocket: void bind(java.net.SocketAddress)>","<java.net.ServerSocket: void bind(java.net.SocketAddress)>"
"<java.time.DayOfWeek: java.time.DayOfWeek[] values()>","<java.time.DayOfWeek: java.time.DayOfWeek[] values()>"
"<java.util.Properties: void list(java.io.PrintStream)>","<java.util.Properties: void list(java.io.PrintStream)>"
"<android.graphics.ColorSpace$Rgb: float[] getWhitePoint()>","<android.graphics.ColorSpace$Rgb: float[] getWhitePoint()>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification build()>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification build()>"
"<android.view.textclassifier.TextClassification$Builder: void <init>()>","<android.view.textclassifier.TextClassification$Builder: void <init>()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setCarrierId(int)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setCarrierId(int)>"
"<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>","<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>"
"<java.time.chrono.IsoChronology: java.time.chrono.Era eraOf(int)>","<java.time.chrono.IsoChronology: java.time.chrono.Era eraOf(int)>"
"<java.util.Optional: java.util.stream.Stream stream()>","<java.util.Optional: java.util.stream.Stream stream()>"
"<java.lang.Integer: float floatValue()>","<java.lang.Integer: float floatValue()>"
"<android.view.Window: void makeActive()>","<android.view.Window: void makeActive()>"
"<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>"
"<android.os.ParcelFileDescriptor: int getFd()>","<android.os.ParcelFileDescriptor: int getFd()>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript of(int)>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript of(int)>"
"<java.util.AbstractList: void add(int,java.lang.Object)>","<java.util.AbstractList: void add(int,java.lang.Object)>"
"<android.view.InputDevice$MotionRange: int getAxis()>","<android.view.InputDevice$MotionRange: int getAxis()>"
"<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,java.lang.String)>","<android.content.pm.PackageManager: android.content.pm.PackageManager$Property getProperty(java.lang.String,java.lang.String)>"
"<java.lang.Float: long longValue()>","<java.lang.Float: long longValue()>"
"<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>","<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>"
"<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>","<android.content.Context: java.io.File getExternalFilesDir(java.lang.String)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>"
"<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>","<java.nio.ByteBuffer: java.nio.CharBuffer asCharBuffer()>"
"<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>","<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>"
"<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>","<android.media.AudioRecord: void removeOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener)>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putLong(int,long)>","<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putLong(int,long)>"
"<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()>","<android.telephony.data.ApnSetting: java.lang.String getOperatorNumeric()>"
"<java.lang.invoke.MethodType: java.lang.Class parameterType(int)>","<java.lang.invoke.MethodType: java.lang.Class parameterType(int)>"
"<android.view.animation.Animation: int getRepeatMode()>","<android.view.animation.Animation: int getRepeatMode()>"
"<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>","<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>"
"<java.net.InetAddress: boolean isMCOrgLocal()>","<java.net.InetAddress: boolean isMCOrgLocal()>"
"<android.os.PersistableBundle: java.lang.String toString()>","<android.os.PersistableBundle: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>","<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>"
"<android.media.MediaDrm$MediaDrmStateException: int getErrorCode()>","<android.media.MediaDrm$MediaDrmStateException: int getErrorCode()>"
"<java.lang.Long: int hashCode(long)>","<java.lang.Long: int hashCode(long)>"
"<android.view.textclassifier.SelectionEvent: void <init>()>","<android.view.textclassifier.SelectionEvent: void <init>()>"
"<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)>","<android.content.pm.PackageManager: boolean isPackageSuspended(java.lang.String)>"
"<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>","<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>"
"<android.view.textclassifier.TextClassification: int getEntityCount()>","<android.view.textclassifier.TextClassification: int getEntityCount()>"
"<android.view.View: int getAccessibilityLiveRegion()>","<android.view.View: int getAccessibilityLiveRegion()>"
"<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>","<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>"
"<java.util.OptionalInt: int getAsInt()>","<java.util.OptionalInt: int getAsInt()>"
"<java.lang.String: void <init>(java.lang.StringBuffer)>","<java.lang.String: void <init>(java.lang.StringBuffer)>"
"<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>","<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>"
"<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>","<java.util.concurrent.locks.ReentrantLock: java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)>"
"<android.content.IntentFilter: void addDataType(java.lang.String)>","<android.content.IntentFilter: void addDataType(java.lang.String)>"
"<android.view.WindowId$FocusObserver: void <init>()>","<android.view.WindowId$FocusObserver: void <init>()>"
"<android.app.Activity: android.content.Intent getParentActivityIntent()>","<android.app.Activity: android.content.Intent getParentActivityIntent()>"
"<android.view.ViewGroup: void endViewTransition(android.view.View)>","<android.view.ViewGroup: void endViewTransition(android.view.View)>"
"<java.lang.Thread: java.lang.String toString()>","<java.lang.Thread: java.lang.String toString()>"
"<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>"
"<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>","<android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)>"
"<android.content.ContextWrapper: int[] checkUriPermissions(java.util.List,int,int,int)>","<android.content.ContextWrapper: int[] checkUriPermissions(java.util.List,int,int,int)>"
"<android.app.ActionBar: void removeTab(android.app.ActionBar$Tab)>","<android.app.ActionBar: void removeTab(android.app.ActionBar$Tab)>"
"<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>","<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>"
"<android.os.MemoryFile: java.io.OutputStream getOutputStream()>","<android.os.MemoryFile: java.io.OutputStream getOutputStream()>"
"<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()>","<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()>"
"<java.time.temporal.Temporal: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.temporal.Temporal: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.widget.AbsListView: void setTranscriptMode(int)>","<android.widget.AbsListView: void setTranscriptMode(int)>"
"<java.util.Arrays: byte[] copyOfRange(byte[],int,int)>","<java.util.Arrays: byte[] copyOfRange(byte[],int,int)>"
"<java.time.Month: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.Month: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.util.Rational: boolean equals(java.lang.Object)>","<android.util.Rational: boolean equals(java.lang.Object)>"
"<android.telephony.ServiceState: void <init>()>","<android.telephony.ServiceState: void <init>()>"
"<java.util.stream.Stream: java.util.stream.LongStream flatMapToLong(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.LongStream flatMapToLong(java.util.function.Function)>"
"<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()>","<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>"
"<android.graphics.drawable.LayerDrawable: int getBottomPadding()>","<android.graphics.drawable.LayerDrawable: int getBottomPadding()>"
"<android.app.Dialog: boolean onSearchRequested()>","<android.app.Dialog: boolean onSearchRequested()>"
"<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>","<android.graphics.fonts.Font$Builder: android.graphics.fonts.Font build()>"
"<android.graphics.Paint: float descent()>","<android.graphics.Paint: float descent()>"
"<java.util.IntSummaryStatistics: void accept(int)>","<java.util.IntSummaryStatistics: void accept(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>"
"<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>","<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>"
"<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[])>","<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[])>"
"<android.view.View: void postInvalidate(int,int,int,int)>","<android.view.View: void postInvalidate(int,int,int,int)>"
"<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)>","<android.media.MediaFormat: java.lang.Number getNumber(java.lang.String)>"
"<android.view.WindowInsets: boolean hasSystemWindowInsets()>","<android.view.WindowInsets: boolean hasSystemWindowInsets()>"
"<android.widget.TextView: void append(java.lang.CharSequence,int,int)>","<android.widget.TextView: void append(java.lang.CharSequence,int,int)>"
"<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>","<android.database.sqlite.SQLiteException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>","<android.media.MediaPlayer$NoDrmSchemeException: void <init>(java.lang.String)>"
"<android.util.AndroidException: void <init>()>","<android.util.AndroidException: void <init>()>"
"<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>","<android.graphics.drawable.LayerDrawable: boolean setDrawableByLayerId(int,android.graphics.drawable.Drawable)>"
"<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>","<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>"
"<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState valueOf(java.lang.String)>","<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState valueOf(java.lang.String)>"
"<java.lang.invoke.MethodHandleInfo: boolean isVarArgs()>","<java.lang.invoke.MethodHandleInfo: boolean isVarArgs()>"
"<java.time.LocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.RecordingCanvas: void drawPoints(float[],int,int,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPoints(float[],int,int,android.graphics.Paint)>"
"<java.time.Duration: long toHours()>","<java.time.Duration: long toHours()>"
"<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>","<java.lang.String: boolean contentEquals(java.lang.StringBuffer)>"
"<android.widget.TextView: void setCompoundDrawableTintBlendMode(android.graphics.BlendMode)>","<android.widget.TextView: void setCompoundDrawableTintBlendMode(android.graphics.BlendMode)>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>"
"<java.net.SocketException: void <init>()>","<java.net.SocketException: void <init>()>"
"<android.content.pm.InstallSourceInfo: void <clinit>()>","<android.content.pm.InstallSourceInfo: void <clinit>()>"
"<android.view.ViewParent: boolean isLayoutDirectionResolved()>","<android.view.ViewParent: boolean isLayoutDirectionResolved()>"
"<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>","<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>"
"<android.text.ClipboardManager: void <init>()>","<android.text.ClipboardManager: void <init>()>"
"<android.animation.Keyframe: java.lang.Object clone()>","<android.animation.Keyframe: java.lang.Object clone()>"
"<java.net.Inet4Address: boolean isSiteLocalAddress()>","<java.net.Inet4Address: boolean isSiteLocalAddress()>"
"<android.widget.RelativeLayout: void <init>(android.content.Context)>","<android.widget.RelativeLayout: void <init>(android.content.Context)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithResource(java.lang.String,int)>"
"<android.os.Debug: void resetGlobalClassInitCount()>","<android.os.Debug: void resetGlobalClassInitCount()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>"
"<java.lang.ClassLoader: boolean registerAsParallelCapable()>","<java.lang.ClassLoader: boolean registerAsParallelCapable()>"
"<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()>","<android.media.MediaPlayer: android.os.PersistableBundle getMetrics()>"
"<android.view.WindowManager: android.view.Display getDefaultDisplay()>","<android.view.WindowManager: android.view.Display getDefaultDisplay()>"
"<java.util.Optional: java.util.Optional of(java.lang.Object)>","<java.util.Optional: java.util.Optional of(java.lang.Object)>"
"<android.app.ActivityManager: boolean isRunningInUserTestHarness()>","<android.app.ActivityManager: boolean isRunningInUserTestHarness()>"
"<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>","<android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)>"
"<java.lang.reflect.Array: int getInt(java.lang.Object,int)>","<java.lang.reflect.Array: int getInt(java.lang.Object,int)>"
"<android.media.AudioManager: void stopBluetoothSco()>","<android.media.AudioManager: void stopBluetoothSco()>"
"<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()>","<android.hardware.Camera$Parameters: android.hardware.Camera$Size getPreferredPreviewSizeForVideo()>"
"<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>","<android.animation.StateListAnimator: void addState(int[],android.animation.Animator)>"
"<java.nio.LongBuffer: java.nio.LongBuffer asReadOnlyBuffer()>","<java.nio.LongBuffer: java.nio.LongBuffer asReadOnlyBuffer()>"
"<android.net.Uri: java.lang.String getEncodedAuthority()>","<android.net.Uri: java.lang.String getEncodedAuthority()>"
"<android.os.Bundle: android.util.Size getSize(java.lang.String)>","<android.os.Bundle: android.util.Size getSize(java.lang.String)>"
"<java.util.Date: boolean after(java.util.Date)>","<java.util.Date: boolean after(java.util.Date)>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)>"
"<android.content.ContextWrapper: android.content.Context getBaseContext()>","<android.content.ContextWrapper: android.content.Context getBaseContext()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandleInfo revealDirect(java.lang.invoke.MethodHandle)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandleInfo revealDirect(java.lang.invoke.MethodHandle)>"
"<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>","<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>"
"<android.view.ActionProvider: boolean isVisible()>","<android.view.ActionProvider: boolean isVisible()>"
"<android.app.Dialog: android.view.View requireViewById(int)>","<android.app.Dialog: android.view.View requireViewById(int)>"
"<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>","<android.graphics.Path: boolean op(android.graphics.Path,android.graphics.Path,android.graphics.Path$Op)>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isInPictureInPictureMode()>"
"<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>","<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>"
"<android.net.IpSecAlgorithm: int describeContents()>","<android.net.IpSecAlgorithm: int describeContents()>"
"<android.graphics.Insets: int hashCode()>","<android.graphics.Insets: int hashCode()>"
"<android.net.RouteInfo: java.lang.String getInterface()>","<android.net.RouteInfo: java.lang.String getInterface()>"
"<android.graphics.Bitmap: int getWidth()>","<android.graphics.Bitmap: int getWidth()>"
"<android.media.AudioTrack: int getStreamType()>","<android.media.AudioTrack: int getStreamType()>"
"<android.content.IntentFilter: int countDataTypes()>","<android.content.IntentFilter: int countDataTypes()>"
"<java.time.zone.ZoneOffsetTransition: boolean isGap()>","<java.time.zone.ZoneOffsetTransition: boolean isGap()>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class,java.lang.Class[])>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class,java.lang.Class[])>"
"<java.time.LocalTime: int getNano()>","<java.time.LocalTime: int getNano()>"
"<java.util.UUID: java.lang.String toString()>","<java.util.UUID: java.lang.String toString()>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>"
"<java.util.OptionalInt: java.util.OptionalInt of(int)>","<java.util.OptionalInt: java.util.OptionalInt of(int)>"
"<java.util.Arrays: int mismatch(byte[],int,int,byte[],int,int)>","<java.util.Arrays: int mismatch(byte[],int,int,byte[],int,int)>"
"<android.media.AudioTrack: int getState()>","<android.media.AudioTrack: int getState()>"
"<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>","<android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)>"
"<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>","<android.view.inputmethod.InputConnection: boolean commitText(java.lang.CharSequence,int)>"
"<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>","<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>"
"<android.app.ActivityManager$ProcessErrorStateInfo: void <clinit>()>","<android.app.ActivityManager$ProcessErrorStateInfo: void <clinit>()>"
"<java.time.chrono.Chronology: java.util.List eras()>","<java.time.chrono.Chronology: java.util.List eras()>"
"<android.media.MediaTimestamp: float getMediaClockRate()>","<android.media.MediaTimestamp: float getMediaClockRate()>"
"<java.time.ZonedDateTime: int getMinute()>","<java.time.ZonedDateTime: int getMinute()>"
"<java.util.Spliterator$OfLong: java.util.Spliterator trySplit()>","<java.util.Spliterator$OfLong: java.util.Spliterator trySplit()>"
"<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)>","<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)>"
"<android.content.ContextWrapper: android.os.Looper getMainLooper()>","<android.content.ContextWrapper: android.os.Looper getMainLooper()>"
"<android.telephony.TelephonyManager: int getCallState()>","<android.telephony.TelephonyManager: int getCallState()>"
"<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>","<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>"
"<android.telephony.data.ApnSetting: int getProxyPort()>","<android.telephony.data.ApnSetting: int getProxyPort()>"
"<android.util.SparseArray: void delete(int)>","<android.util.SparseArray: void delete(int)>"
"<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>","<android.view.ViewGroup: void measureChildWithMargins(android.view.View,int,int,int,int)>"
"<android.content.IntentSender: java.lang.String getCreatorPackage()>","<android.content.IntentSender: java.lang.String getCreatorPackage()>"
"<java.util.concurrent.Semaphore: void <init>(int,boolean)>","<java.util.concurrent.Semaphore: void <init>(int,boolean)>"
"<java.util.Collection: boolean isEmpty()>","<java.util.Collection: boolean isEmpty()>"
"<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawOval(float,float,float,float,android.graphics.Paint)>"
"<java.util.PrimitiveIterator$OfInt: java.lang.Object next()>","<java.util.PrimitiveIterator$OfInt: java.lang.Object next()>"
"<java.lang.ref.Reference: void clear()>","<java.lang.ref.Reference: void clear()>"
"<java.lang.CharSequence: java.lang.String toString()>","<java.lang.CharSequence: java.lang.String toString()>"
"<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>","<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>"
"<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>","<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>"
"<java.nio.channels.SocketChannel: java.net.SocketAddress getRemoteAddress()>","<java.nio.channels.SocketChannel: java.net.SocketAddress getRemoteAddress()>"
"<android.util.LongSparseArray: long keyAt(int)>","<android.util.LongSparseArray: long keyAt(int)>"
"<android.telephony.data.ApnSetting: void <clinit>()>","<android.telephony.data.ApnSetting: void <clinit>()>"
"<android.content.Context: int checkSelfPermission(java.lang.String)>","<android.content.Context: int checkSelfPermission(java.lang.String)>"
"<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>","<android.app.ActivityManager$TaskDescription: int getPrimaryColor()>"
"<android.view.WindowInsetsAnimation: long getDurationMillis()>","<android.view.WindowInsetsAnimation: long getDurationMillis()>"
"<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)>"
"<android.app.FragmentTransaction: boolean isAddToBackStackAllowed()>","<android.app.FragmentTransaction: boolean isAddToBackStackAllowed()>"
"<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>","<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>","<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>"
"<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>","<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)>"
"<android.os.Message: android.os.Message obtain(android.os.Handler,int)>","<android.os.Message: android.os.Message obtain(android.os.Handler,int)>"
"<android.view.textclassifier.ConversationActions$Request: int describeContents()>","<android.view.textclassifier.ConversationActions$Request: int describeContents()>"
"<android.view.View: int getHeight()>","<android.view.View: int getHeight()>"
"<android.media.MediaPlayer: void setPlaybackParams(android.media.PlaybackParams)>","<android.media.MediaPlayer: void setPlaybackParams(android.media.PlaybackParams)>"
"<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>","<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>"
"<android.view.View: android.content.Context getContext()>","<android.view.View: android.content.Context getContext()>"
"<android.app.Fragment: int getTargetRequestCode()>","<android.app.Fragment: int getTargetRequestCode()>"
"<android.view.WindowInsetsAnimation$Callback: void <init>(int)>","<android.view.WindowInsetsAnimation$Callback: void <init>(int)>"
"<java.lang.Short: void <init>(java.lang.String)>","<java.lang.Short: void <init>(java.lang.String)>"
"<android.view.inputmethod.EditorBoundsInfo: boolean equals(java.lang.Object)>","<android.view.inputmethod.EditorBoundsInfo: boolean equals(java.lang.Object)>"
"<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)>"
"<android.widget.AbsListView: boolean isSelectedChildViewEnabled()>","<android.widget.AbsListView: boolean isSelectedChildViewEnabled()>"
"<android.view.View: int getPaddingLeft()>","<android.view.View: int getPaddingLeft()>"
"<java.lang.Byte: int compare(byte,byte)>","<java.lang.Byte: int compare(byte,byte)>"
"<android.view.KeyEvent: char getMatch(char[])>","<android.view.KeyEvent: char getMatch(char[])>"
"<java.nio.CharBuffer: int compareTo(java.lang.Object)>","<java.nio.CharBuffer: int compareTo(java.lang.Object)>"
"<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>","<java.net.URLStreamHandler: java.net.URLConnection openConnection(java.net.URL,java.net.Proxy)>"
"<java.util.Set: boolean isEmpty()>","<java.util.Set: boolean isEmpty()>"
"<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>","<android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>"
"<java.lang.Boolean: int hashCode()>","<java.lang.Boolean: int hashCode()>"
"<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>","<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>"
"<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>","<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>"
"<java.lang.StackTraceElement: int getLineNumber()>","<java.lang.StackTraceElement: int getLineNumber()>"
"<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>","<java.net.URLStreamHandler: boolean sameFile(java.net.URL,java.net.URL)>"
"<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler,int)>","<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,android.os.Handler,int)>"
"<java.security.Provider: void clear()>","<java.security.Provider: void clear()>"
"<android.graphics.Paint: void <init>(int)>","<android.graphics.Paint: void <init>(int)>"
"<android.media.Rating: void writeToParcel(android.os.Parcel,int)>","<android.media.Rating: void writeToParcel(android.os.Parcel,int)>"
"<java.time.Clock: java.time.Clock withZone(java.time.ZoneId)>","<java.time.Clock: java.time.Clock withZone(java.time.ZoneId)>"
"<android.view.Window: boolean isNavigationBarContrastEnforced()>","<android.view.Window: boolean isNavigationBarContrastEnforced()>"
"<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>","<android.app.Activity: boolean shouldUpRecreateTask(android.content.Intent)>"
"<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline[] getFrameTimelines()>","<android.view.Choreographer$FrameData: android.view.Choreographer$FrameTimeline[] getFrameTimelines()>"
"<android.view.ViewGroup: void <init>(android.content.Context)>","<android.view.ViewGroup: void <init>(android.content.Context)>"
"<android.app.ActivityManager: void setVrThread(int)>","<android.app.ActivityManager: void setVrThread(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int)>"
"<java.net.URI: java.net.URI relativize(java.net.URI)>","<java.net.URI: java.net.URI relativize(java.net.URI)>"
"<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>","<android.widget.TextView: void setExtractedText(android.view.inputmethod.ExtractedText)>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>"
"<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)>","<android.hardware.Camera$Parameters: void setPreviewFrameRate(int)>"
"<java.nio.Buffer: java.nio.Buffer position(int)>","<java.nio.Buffer: java.nio.Buffer position(int)>"
"<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String toString()>","<android.hardware.camera2.params.StreamConfigurationMap: java.lang.String toString()>"
"<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>","<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>"
"<java.nio.FloatBuffer: java.nio.Buffer clear()>","<java.nio.FloatBuffer: java.nio.Buffer clear()>"
"<android.view.inputmethod.InputMethodInfo: boolean suppressesSpellChecker()>","<android.view.inputmethod.InputMethodInfo: boolean suppressesSpellChecker()>"
"<android.view.DragEvent: int describeContents()>","<android.view.DragEvent: int describeContents()>"
"<android.content.pm.PackageInstaller$SessionParams: void setMultiPackage()>","<android.content.pm.PackageInstaller$SessionParams: void setMultiPackage()>"
"<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>","<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>"
"<java.lang.invoke.VarHandle: void storeStoreFence()>","<java.lang.invoke.VarHandle: void storeStoreFence()>"
"<android.media.AudioDeviceCallback: void <init>()>","<android.media.AudioDeviceCallback: void <init>()>"
"<java.util.ArrayList: void <init>()>","<java.util.ArrayList: void <init>()>"
"<java.util.Arrays: void setAll(double[],java.util.function.IntToDoubleFunction)>","<java.util.Arrays: void setAll(double[],java.util.function.IntToDoubleFunction)>"
"<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>","<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>"
"<android.media.AudioRecordingMonitor: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>","<android.media.AudioRecordingMonitor: android.media.AudioRecordingConfiguration getActiveRecordingConfiguration()>"
"<android.view.View: void dispatchSetPressed(boolean)>","<android.view.View: void dispatchSetPressed(boolean)>"
"<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>","<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>"
"<android.view.inputmethod.SurroundingText: int getOffset()>","<android.view.inputmethod.SurroundingText: int getOffset()>"
"<android.app.Activity: int getTitleColor()>","<android.app.Activity: int getTitleColor()>"
"<android.content.res.Configuration: void <init>(android.content.res.Configuration)>","<android.content.res.Configuration: void <init>(android.content.res.Configuration)>"
"<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>","<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>"
"<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>","<java.nio.charset.CharsetDecoder: boolean isCharsetDetected()>"
"<android.content.pm.PackageInstaller$Session: void commit(android.content.IntentSender)>","<android.content.pm.PackageInstaller$Session: void commit(android.content.IntentSender)>"
"<android.hardware.Camera: void release()>","<android.hardware.Camera: void release()>"
"<android.view.View: void getLocationOnScreen(int[])>","<android.view.View: void getLocationOnScreen(int[])>"
"<android.widget.TextView: int getImeActionId()>","<android.widget.TextView: int getImeActionId()>"
"<android.graphics.Paint: boolean isAntiAlias()>","<android.graphics.Paint: boolean isAntiAlias()>"
"<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<java.lang.Integer: java.lang.String toHexString(int)>","<java.lang.Integer: java.lang.String toHexString(int)>"
"<android.graphics.Rect: void inset(int,int,int,int)>","<android.graphics.Rect: void inset(int,int,int,int)>"
"<android.view.Choreographer: void postVsyncCallback(android.view.Choreographer$VsyncCallback)>","<android.view.Choreographer: void postVsyncCallback(android.view.Choreographer$VsyncCallback)>"
"<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>","<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()>","<android.view.textclassifier.SelectionEvent: java.lang.String getEntityType()>"
"<java.util.stream.LongStream: long reduce(long,java.util.function.LongBinaryOperator)>","<java.util.stream.LongStream: long reduce(long,java.util.function.LongBinaryOperator)>"
"<java.util.Random: void <init>(long)>","<java.util.Random: void <init>(long)>"
"<java.text.ParseException: void <init>(java.lang.String,int)>","<java.text.ParseException: void <init>(java.lang.String,int)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setActionIndices(int[])>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setActionIndices(int[])>"
"<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>","<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>"
"<android.media.session.MediaSession: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>","<android.media.session.MediaSession: void setMediaButtonBroadcastReceiver(android.content.ComponentName)>"
"<android.view.Window: void setRestrictedCaptionAreaListener(android.view.Window$OnRestrictedCaptionAreaChangedListener)>","<android.view.Window: void setRestrictedCaptionAreaListener(android.view.Window$OnRestrictedCaptionAreaChangedListener)>"
"<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>","<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>"
"<android.view.WindowInsets$Type: int tappableElement()>","<android.view.WindowInsets$Type: int tappableElement()>"
"<android.os.Bundle: void putChar(java.lang.String,char)>","<android.os.Bundle: void putChar(java.lang.String,char)>"
"<android.view.animation.Animation: void setShowBackdrop(boolean)>","<android.view.animation.Animation: void setShowBackdrop(boolean)>"
"<android.view.View: android.view.TouchDelegate getTouchDelegate()>","<android.view.View: android.view.TouchDelegate getTouchDelegate()>"
"<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo$Builder addAttribute(java.lang.String,java.lang.String)>","<android.view.ViewStructure$HtmlInfo$Builder: android.view.ViewStructure$HtmlInfo$Builder addAttribute(java.lang.String,java.lang.String)>"
"<java.net.URI: java.lang.String getRawUserInfo()>","<java.net.URI: java.lang.String getRawUserInfo()>"
"<android.view.animation.Transformation: void setAlpha(float)>","<android.view.animation.Transformation: void setAlpha(float)>"
"<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>","<java.net.ServerSocket: java.nio.channels.ServerSocketChannel getChannel()>"
"<java.util.Locale: boolean hasExtensions()>","<java.util.Locale: boolean hasExtensions()>"
"<android.graphics.RecordingCanvas: void drawARGB(int,int,int,int)>","<android.graphics.RecordingCanvas: void drawARGB(int,int,int,int)>"
"<java.time.zone.ZoneOffsetTransition: java.time.Instant getInstant()>","<java.time.zone.ZoneOffsetTransition: java.time.Instant getInstant()>"
"<java.util.Hashtable: java.lang.Object get(java.lang.Object)>","<java.util.Hashtable: java.lang.Object get(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureResultKeys()>","<android.hardware.camera2.CameraCharacteristics: java.util.List getAvailableCaptureResultKeys()>"
"<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>","<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>"
"<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>","<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale build()>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale build()>"
"<android.content.ClipData: void addItem(android.content.ClipData$Item)>","<android.content.ClipData: void addItem(android.content.ClipData$Item)>"
"<java.util.Random: java.util.stream.LongStream longs(long,long,long)>","<java.util.Random: java.util.stream.LongStream longs(long,long,long)>"
"<android.content.Intent: java.lang.String toUri(int)>","<android.content.Intent: java.lang.String toUri(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setCanOpenPopup(boolean)>"
"<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>","<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri,java.util.Map)>"
"<android.content.pm.ApplicationInfo: boolean areAttributionsUserVisible()>","<android.content.pm.ApplicationInfo: boolean areAttributionsUserVisible()>"
"<java.time.chrono.IsoChronology: java.lang.String getId()>","<java.time.chrono.IsoChronology: java.lang.String getId()>"
"<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>"
"<java.time.format.ResolverStyle: java.time.format.ResolverStyle valueOf(java.lang.String)>","<java.time.format.ResolverStyle: java.time.format.ResolverStyle valueOf(java.lang.String)>"
"<android.view.View$AccessibilityDelegate: void <init>()>","<android.view.View$AccessibilityDelegate: void <init>()>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream concat(java.util.stream.DoubleStream,java.util.stream.DoubleStream)>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<android.os.CancellationSignal$OnCancelListener: void onCancel()>","<android.os.CancellationSignal$OnCancelListener: void onCancel()>"
"<android.view.DisplayCutout: java.util.List getBoundingRects()>","<android.view.DisplayCutout: java.util.List getBoundingRects()>"
"<android.graphics.Outline: void setRect(int,int,int,int)>","<android.graphics.Outline: void setRect(int,int,int,int)>"
"<android.view.View: int getTop()>","<android.view.View: int getTop()>"
"<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>","<android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()>"
"<android.media.AudioRecordingConfiguration: int getAudioSource()>","<android.media.AudioRecordingConfiguration: int getAudioSource()>"
"<java.util.ListIterator: int previousIndex()>","<java.util.ListIterator: int previousIndex()>"
"<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>","<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>"
"<java.nio.channels.AsynchronousChannel: void close()>","<java.nio.channels.AsynchronousChannel: void close()>"
"<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>","<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>"
"<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>","<android.graphics.Paint: void setTextLocales(android.os.LocaleList)>"
"<java.time.chrono.IsoEra: void <init>(java.lang.String,int)>","<java.time.chrono.IsoEra: void <init>(java.lang.String,int)>"
"<android.view.animation.Animation: void restrictDuration(long)>","<android.view.animation.Animation: void restrictDuration(long)>"
"<java.net.InetAddress: boolean isMCNodeLocal()>","<java.net.InetAddress: boolean isMCNodeLocal()>"
"<android.view.translation.ViewTranslationResponse: void <clinit>()>","<android.view.translation.ViewTranslationResponse: void <clinit>()>"
"<android.widget.AbsListView: boolean isInFilterMode()>","<android.widget.AbsListView: boolean isInFilterMode()>"
"<android.hardware.camera2.params.MeteringRectangle: android.util.Size getSize()>","<android.hardware.camera2.params.MeteringRectangle: android.util.Size getSize()>"
"<android.os.VibrationEffect: android.os.VibrationEffect createPredefined(int)>","<android.os.VibrationEffect: android.os.VibrationEffect createPredefined(int)>"
"<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>","<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>"
"<android.widget.AbsListView: void onWindowFocusChanged(boolean)>","<android.widget.AbsListView: void onWindowFocusChanged(boolean)>"
"<android.content.AttributionSource: java.lang.String toString()>","<android.content.AttributionSource: java.lang.String toString()>"
"<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>","<android.graphics.Canvas: void drawDoubleRoundRect(android.graphics.RectF,float[],android.graphics.RectF,float[],android.graphics.Paint)>"
"<java.time.OffsetTime: java.time.OffsetTime now(java.time.ZoneId)>","<java.time.OffsetTime: java.time.OffsetTime now(java.time.ZoneId)>"
"<android.graphics.drawable.Drawable: int getOpacity()>","<android.graphics.drawable.Drawable: int getOpacity()>"
"<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>","<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>"
"<java.util.Arrays: java.util.stream.IntStream stream(int[])>","<java.util.Arrays: java.util.stream.IntStream stream(int[])>"
"<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>","<android.view.inputmethod.InputMethodManager: void toggleSoftInput(int,int)>"
"<android.view.View: void clearViewTranslationCallback()>","<android.view.View: void clearViewTranslationCallback()>"
"<android.os.LocaleList: boolean matchesLanguageAndScript(java.util.Locale,java.util.Locale)>","<android.os.LocaleList: boolean matchesLanguageAndScript(java.util.Locale,java.util.Locale)>"
"<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>","<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>"
"<android.view.View: int computeHorizontalScrollOffset()>","<android.view.View: int computeHorizontalScrollOffset()>"
"<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>","<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>"
"<android.graphics.Color: int blue(int)>","<android.graphics.Color: int blue(int)>"
"<android.graphics.drawable.LayerDrawable: void setLayerInsetTop(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerInsetTop(int,int)>"
"<android.view.textclassifier.TextLinks$TextLink: java.lang.String toString()>","<android.view.textclassifier.TextLinks$TextLink: java.lang.String toString()>"
"<android.os.Looper: java.lang.String toString()>","<android.os.Looper: java.lang.String toString()>"
"<java.lang.Byte: boolean equals(java.lang.Object)>","<java.lang.Byte: boolean equals(java.lang.Object)>"
"<android.view.ViewDebug$IntToString: int 'from'()>","<android.view.ViewDebug$IntToString: int 'from'()>"
"<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>","<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>"
"<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputFormats()>","<android.hardware.camera2.params.RecommendedStreamConfigurationMap: java.util.Set getOutputFormats()>"
"<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>","<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>"
"<android.view.Window: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>","<android.view.Window: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>"
"<android.graphics.drawable.LayerDrawable: boolean isAutoMirrored()>","<android.graphics.drawable.LayerDrawable: boolean isAutoMirrored()>"
"<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>","<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>"
"<java.time.ZoneId: java.lang.String getId()>","<java.time.ZoneId: java.lang.String getId()>"
"<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>","<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>"
"<android.widget.RemoteViews: android.widget.RemoteViews clone()>","<android.widget.RemoteViews: android.widget.RemoteViews clone()>"
"<java.nio.channels.Selector: int select(java.util.function.Consumer)>","<java.nio.channels.Selector: int select(java.util.function.Consumer)>"
"<java.lang.AssertionError: void <init>(double)>","<java.lang.AssertionError: void <init>(double)>"
"<java.nio.file.Path: int getNameCount()>","<java.nio.file.Path: int getNameCount()>"
"<android.graphics.drawable.LayerDrawable: void setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.LayerDrawable: void setTintBlendMode(android.graphics.BlendMode)>"
"<java.lang.Long: long sum(long,long)>","<java.lang.Long: long sum(long,long)>"
"<java.lang.Class: boolean isPrimitive()>","<java.lang.Class: boolean isPrimitive()>"
"<android.app.Activity: void setFeatureDrawableResource(int,int)>","<android.app.Activity: void setFeatureDrawableResource(int,int)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<java.io.FileOutputStream: void finalize()>","<java.io.FileOutputStream: void finalize()>"
"<java.net.SocketImpl: int getPort()>","<java.net.SocketImpl: int getPort()>"
"<android.view.Menu: android.view.MenuItem add(int)>","<android.view.Menu: android.view.MenuItem add(int)>"
"<android.view.View: boolean isFocusable()>","<android.view.View: boolean isFocusable()>"
"<android.app.Activity: android.net.Uri onProvideReferrer()>","<android.app.Activity: android.net.Uri onProvideReferrer()>"
"<android.content.ContentProvider: android.content.ContentProvider$CallingIdentity clearCallingIdentity()>","<android.content.ContentProvider: android.content.ContentProvider$CallingIdentity clearCallingIdentity()>"
"<android.content.pm.VersionedPackage: long getLongVersionCode()>","<android.content.pm.VersionedPackage: long getLongVersionCode()>"
"<android.view.MenuItem: boolean expandActionView()>","<android.view.MenuItem: boolean expandActionView()>"
"<android.graphics.Matrix: void setSinCos(float,float)>","<android.graphics.Matrix: void setSinCos(float,float)>"
"<java.util.Spliterator: boolean hasCharacteristics(int)>","<java.util.Spliterator: boolean hasCharacteristics(int)>"
"<android.content.res.loader.ResourcesLoader: void setProviders(java.util.List)>","<android.content.res.loader.ResourcesLoader: void setProviders(java.util.List)>"
"<android.content.SharedPreferences: java.util.Map getAll()>","<android.content.SharedPreferences: java.util.Map getAll()>"
"<android.media.Spatializer$OnSpatializerStateChangedListener: void onSpatializerAvailableChanged(android.media.Spatializer,boolean)>","<android.media.Spatializer$OnSpatializerStateChangedListener: void onSpatializerAvailableChanged(android.media.Spatializer,boolean)>"
"<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()>","<android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()>"
"<android.view.View: int getScrollBarSize()>","<android.view.View: int getScrollBarSize()>"
"<java.util.function.BiConsumer: java.util.function.BiConsumer andThen(java.util.function.BiConsumer)>","<java.util.function.BiConsumer: java.util.function.BiConsumer andThen(java.util.function.BiConsumer)>"
"<android.widget.AbsListView: int getRightPaddingOffset()>","<android.widget.AbsListView: int getRightPaddingOffset()>"
"<java.util.concurrent.locks.ReentrantLock: void <init>()>","<java.util.concurrent.locks.ReentrantLock: void <init>()>"
"<java.lang.'annotation'.ElementType: void <init>(java.lang.String,int)>","<java.lang.'annotation'.ElementType: void <init>(java.lang.String,int)>"
"<java.lang.Math: double rint(double)>","<java.lang.Math: double rint(double)>"
"<java.security.Provider: java.lang.String toString()>","<java.security.Provider: java.lang.String toString()>"
"<android.graphics.drawable.Icon: java.lang.String toString()>","<android.graphics.drawable.Icon: java.lang.String toString()>"
"<java.lang.Class: java.lang.String getCanonicalName()>","<java.lang.Class: java.lang.String getCanonicalName()>"
"<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader,java.lang.Class,java.lang.Class)>","<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader,java.lang.Class,java.lang.Class)>"
"<java.security.Provider: java.util.Enumeration keys()>","<java.security.Provider: java.util.Enumeration keys()>"
"<java.util.Arrays: int compare(long[],long[])>","<java.util.Arrays: int compare(long[],long[])>"
"<java.lang.Math: int subtractExact(int,int)>","<java.lang.Math: int subtractExact(int,int)>"
"<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()>","<android.media.AudioTrack: android.media.AudioDeviceInfo getRoutedDevice()>"
"<java.nio.file.AccessMode: void <init>(java.lang.String,int)>","<java.nio.file.AccessMode: void <init>(java.lang.String,int)>"
"<java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<android.view.View: void setContextClickable(boolean)>","<android.view.View: void setContextClickable(boolean)>"
"<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>","<android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)>"
"<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>","<java.lang.UnsupportedOperationException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.app.Dialog: android.view.Window getWindow()>","<android.app.Dialog: android.view.Window getWindow()>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerAttributionTag()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerAttributionTag()>"
"<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>","<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>"
"<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>","<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>"
"<android.graphics.Color: float green(long)>","<android.graphics.Color: float green(long)>"
"<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawPoint(float,float,android.graphics.Paint)>"
"<java.nio.channels.SeekableByteChannel: int write(java.nio.ByteBuffer)>","<java.nio.channels.SeekableByteChannel: int write(java.nio.ByteBuffer)>"
"<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)>","<android.media.AudioManager: void registerRemoteControlClient(android.media.RemoteControlClient)>"
"<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>","<android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)>"
"<android.content.ContentValues: java.util.Set keySet()>","<android.content.ContentValues: java.util.Set keySet()>"
"<java.lang.reflect.Parameter: java.lang.String getName()>","<java.lang.reflect.Parameter: java.lang.String getName()>"
"<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>","<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>"
"<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int,float,float,float)>","<android.view.accessibility.AccessibilityNodeInfo$RangeInfo: android.view.accessibility.AccessibilityNodeInfo$RangeInfo obtain(int,float,float,float)>"
"<java.util.NavigableSet: java.lang.Object higher(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object higher(java.lang.Object)>"
"<android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>","<android.widget.TextView: void setAutoSizeTextTypeWithDefaults(int)>"
"<android.content.LocusId: void writeToParcel(android.os.Parcel,int)>","<android.content.LocusId: void writeToParcel(android.os.Parcel,int)>"
"<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,int)>","<android.widget.RemoteViews: void setFloatDimen(int,java.lang.String,int)>"
"<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>","<android.os.IBinder: void dump(java.io.FileDescriptor,java.lang.String[])>"
"<android.widget.ListView: boolean canAnimate()>","<android.widget.ListView: boolean canAnimate()>"
"<android.hardware.Camera: void startFaceDetection()>","<android.hardware.Camera: void startFaceDetection()>"
"<android.graphics.Typeface: boolean equals(java.lang.Object)>","<android.graphics.Typeface: boolean equals(java.lang.Object)>"
"<android.view.ViewTreeObserver$OnWindowFocusChangeListener: void onWindowFocusChanged(boolean)>","<android.view.ViewTreeObserver$OnWindowFocusChangeListener: void onWindowFocusChanged(boolean)>"
"<android.view.ViewStructure: void setMaxTextLength(int)>","<android.view.ViewStructure: void setMaxTextLength(int)>"
"<android.widget.ListView: void setSelectionAfterHeaderView()>","<android.widget.ListView: void setSelectionAfterHeaderView()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)>"
"<android.view.View: android.view.ViewOverlay getOverlay()>","<android.view.View: android.view.ViewOverlay getOverlay()>"
"<android.os.Debug: boolean isDebuggerConnected()>","<android.os.Debug: boolean isDebuggerConnected()>"
"<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri,int)>","<android.net.ProxyInfo: android.net.ProxyInfo buildPacProxy(android.net.Uri,int)>"
"<android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>","<android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[])>"
"<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>","<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>"
"<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)>","<android.view.inputmethod.CursorAnchorInfo: int getCharacterBoundsFlags(int)>"
"<android.telephony.data.ApnSetting: java.lang.String getEntryName()>","<android.telephony.data.ApnSetting: java.lang.String getEntryName()>"
"<java.util.regex.Matcher: boolean find(int)>","<java.util.regex.Matcher: boolean find(int)>"
"<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>","<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>"
"<android.text.Layout: int getParagraphLeft(int)>","<android.text.Layout: int getParagraphLeft(int)>"
"<android.view.MotionEvent: float getHistoricalY(int,int)>","<android.view.MotionEvent: float getHistoricalY(int,int)>"
"<android.view.View: void setOutlineSpotShadowColor(int)>","<android.view.View: void setOutlineSpotShadowColor(int)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>"
"<android.net.Uri: java.lang.String getEncodedFragment()>","<android.net.Uri: java.lang.String getEncodedFragment()>"
"<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>","<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)>"
"<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>","<android.content.ClipboardManager: void removePrimaryClipChangedListener(android.content.ClipboardManager$OnPrimaryClipChangedListener)>"
"<android.os.Handler: boolean sendMessage(android.os.Message)>","<android.os.Handler: boolean sendMessage(android.os.Message)>"
"<java.net.NetworkInterface: boolean equals(java.lang.Object)>","<java.net.NetworkInterface: boolean equals(java.lang.Object)>"
"<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>","<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
"<java.lang.Short: int hashCode()>","<java.lang.Short: int hashCode()>"
"<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>","<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>"
"<java.lang.Long: short shortValue()>","<java.lang.Long: short shortValue()>"
"<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getEotf()>","<android.graphics.ColorSpace$Rgb: java.util.function.DoubleUnaryOperator getEotf()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>"
"<android.view.Window: void invalidatePanelMenu(int)>","<android.view.Window: void invalidatePanelMenu(int)>"
"<android.content.res.loader.ResourcesLoader: void removeProvider(android.content.res.loader.ResourcesProvider)>","<android.content.res.loader.ResourcesLoader: void removeProvider(android.content.res.loader.ResourcesProvider)>"
"<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>","<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>"
"<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
"<java.util.OptionalDouble: double getAsDouble()>","<java.util.OptionalDouble: double getAsDouble()>"
"<android.media.AudioRecord$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>","<android.media.AudioRecord$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>"
"<java.lang.Byte: void <init>(byte)>","<java.lang.Byte: void <init>(byte)>"
"<java.time.Duration: int hashCode()>","<java.time.Duration: int hashCode()>"
"<android.hardware.Camera: android.hardware.Camera open(int)>","<android.hardware.Camera: android.hardware.Camera open(int)>"
"<android.widget.AbsListView: boolean isItemChecked(int)>","<android.widget.AbsListView: boolean isItemChecked(int)>"
"<android.view.View: int getTopPaddingOffset()>","<android.view.View: int getTopPaddingOffset()>"
"<android.view.Window: void setPreferMinimalPostProcessing(boolean)>","<android.view.Window: void setPreferMinimalPostProcessing(boolean)>"
"<android.view.ActionMode: java.lang.CharSequence getSubtitle()>","<android.view.ActionMode: java.lang.CharSequence getSubtitle()>"
"<android.widget.MediaController: void hide()>","<android.widget.MediaController: void hide()>"
"<android.media.session.MediaSession$Callback: void onPrepareFromSearch(java.lang.String,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPrepareFromSearch(java.lang.String,android.os.Bundle)>"
"<android.view.WindowInsets: android.graphics.Insets getInsets(int)>","<android.view.WindowInsets: android.graphics.Insets getInsets(int)>"
"<android.graphics.Paint: android.graphics.Paint$Style getStyle()>","<android.graphics.Paint: android.graphics.Paint$Style getStyle()>"
"<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getExtensionSupportedSizes(int,java.lang.Class)>","<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getExtensionSupportedSizes(int,java.lang.Class)>"
"<android.view.MotionEvent: float getHistoricalPressure(int,int)>","<android.view.MotionEvent: float getHistoricalPressure(int,int)>"
"<android.database.Cursor: boolean requery()>","<android.database.Cursor: boolean requery()>"
"<android.graphics.Region: void translate(int,int,android.graphics.Region)>","<android.graphics.Region: void translate(int,int,android.graphics.Region)>"
"<android.content.ContextWrapper: java.io.File getExternalCacheDir()>","<android.content.ContextWrapper: java.io.File getExternalCacheDir()>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>","<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>"
"<android.media.SubtitleData: long getDurationUs()>","<android.media.SubtitleData: long getDurationUs()>"
"<java.io.IOException: void <init>()>","<java.io.IOException: void <init>()>"
"<java.util.Arrays: void sort(long[])>","<java.util.Arrays: void sort(long[])>"
"<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>"
"<android.view.View: void getLocationInWindow(int[])>","<android.view.View: void getLocationInWindow(int[])>"
"<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>","<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>"
"<java.util.NavigableSet: java.lang.Object lower(java.lang.Object)>","<java.util.NavigableSet: java.lang.Object lower(java.lang.Object)>"
"<java.time.OffsetDateTime: java.time.Month getMonth()>","<java.time.OffsetDateTime: java.time.Month getMonth()>"
"<android.view.View: int getDefaultSize(int,int)>","<android.view.View: int getDefaultSize(int,int)>"
"<android.view.textclassifier.SelectionEvent: java.lang.String toString()>","<android.view.textclassifier.SelectionEvent: java.lang.String toString()>"
"<android.widget.AbsListView: void setSelector(int)>","<android.widget.AbsListView: void setSelector(int)>"
"<android.view.textclassifier.TextLanguage$Request$Builder: void <init>(java.lang.CharSequence)>","<android.view.textclassifier.TextLanguage$Request$Builder: void <init>(java.lang.CharSequence)>"
"<android.widget.TextView: boolean onCheckIsTextEditor()>","<android.widget.TextView: boolean onCheckIsTextEditor()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotationsByType(java.lang.Class)>"
"<android.view.View: void setKeepScreenOn(boolean)>","<android.view.View: void setKeepScreenOn(boolean)>"
"<java.lang.String: java.lang.String strip()>","<java.lang.String: java.lang.String strip()>"
"<android.widget.AdapterView: java.lang.Object getSelectedItem()>","<android.widget.AdapterView: java.lang.Object getSelectedItem()>"
"<android.view.View: boolean getDefaultFocusHighlightEnabled()>","<android.view.View: boolean getDefaultFocusHighlightEnabled()>"
"<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>","<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection)>"
"<java.util.Random: float nextFloat()>","<java.util.Random: float nextFloat()>"
"<java.util.regex.MatchResult: int end(int)>","<java.util.regex.MatchResult: int end(int)>"
"<android.view.View: void setMinimumWidth(int)>","<android.view.View: void setMinimumWidth(int)>"
"<android.view.Window: android.view.WindowManager getWindowManager()>","<android.view.Window: android.view.WindowManager getWindowManager()>"
"<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>","<android.text.method.KeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>"
"<android.hardware.camera2.CameraCharacteristics: void <init>()>","<android.hardware.camera2.CameraCharacteristics: void <init>()>"
"<java.util.OptionalDouble: java.util.OptionalDouble empty()>","<java.util.OptionalDouble: java.util.OptionalDouble empty()>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromTable(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromTable(android.os.ParcelFileDescriptor,android.content.res.loader.AssetsProvider)>"
"<android.view.WindowInsetsAnimationController: android.graphics.Insets getHiddenStateInsets()>","<android.view.WindowInsetsAnimationController: android.graphics.Insets getHiddenStateInsets()>"
"<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>","<android.app.Dialog: void <init>(android.content.Context,boolean,android.content.DialogInterface$OnCancelListener)>"
"<java.net.URL: int getDefaultPort()>","<java.net.URL: int getDefaultPort()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setOpenFlags(int)>","<android.database.sqlite.SQLiteDatabase$OpenParams$Builder: android.database.sqlite.SQLiteDatabase$OpenParams$Builder setOpenFlags(int)>"
"<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>","<android.hardware.Camera$Parameters: java.util.List getSupportedPictureSizes()>"
"<java.lang.reflect.Member: int getModifiers()>","<java.lang.reflect.Member: int getModifiers()>"
"<java.nio.FloatBuffer: java.nio.Buffer mark()>","<java.nio.FloatBuffer: java.nio.Buffer mark()>"
"<android.view.WindowInsetsAnimation$Bounds: void <init>(android.graphics.Insets,android.graphics.Insets)>","<android.view.WindowInsetsAnimation$Bounds: void <init>(android.graphics.Insets,android.graphics.Insets)>"
"<android.view.inputmethod.InputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>","<android.view.inputmethod.InputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>"
"<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextLanguage$Request: java.lang.String getCallingPackageName()>"
"<android.view.animation.Animation: void setFillBefore(boolean)>","<android.view.animation.Animation: void setFillBefore(boolean)>"
"<android.net.IpSecManager: void applyTransportModeTransform(java.net.DatagramSocket,int,android.net.IpSecTransform)>","<android.net.IpSecManager: void applyTransportModeTransform(java.net.DatagramSocket,int,android.net.IpSecTransform)>"
"<android.view.ContextMenu: android.view.ContextMenu setHeaderView(android.view.View)>","<android.view.ContextMenu: android.view.ContextMenu setHeaderView(android.view.View)>"
"<android.database.sqlite.SQLiteDatabase: void endTransaction()>","<android.database.sqlite.SQLiteDatabase: void endTransaction()>"
"<java.lang.reflect.Constructor: int getParameterCount()>","<java.lang.reflect.Constructor: int getParameterCount()>"
"<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>","<android.view.accessibility.AccessibilityWindowInfo: int getChildCount()>"
"<android.media.AudioFocusRequest$Builder: void <init>(android.media.AudioFocusRequest)>","<android.media.AudioFocusRequest$Builder: void <init>(android.media.AudioFocusRequest)>"
"<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>","<android.view.Window: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>"
"<android.content.res.loader.ResourcesLoader: java.util.List getProviders()>","<android.content.res.loader.ResourcesLoader: java.util.List getProviders()>"
"<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>","<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>"
"<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>","<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>"
"<android.text.PrecomputedText: int getParagraphStart(int)>","<android.text.PrecomputedText: int getParagraphStart(int)>"
"<android.telephony.SignalStrength: long getTimestampMillis()>","<android.telephony.SignalStrength: long getTimestampMillis()>"
"<java.util.OptionalDouble: void ifPresentOrElse(java.util.function.DoubleConsumer,java.lang.Runnable)>","<java.util.OptionalDouble: void ifPresentOrElse(java.util.function.DoubleConsumer,java.lang.Runnable)>"
"<java.nio.CharBuffer: java.lang.CharSequence subSequence(int,int)>","<java.nio.CharBuffer: java.lang.CharSequence subSequence(int,int)>"
"<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>","<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>"
"<android.app.ActionBar$LayoutParams: void <init>(int)>","<android.app.ActionBar$LayoutParams: void <init>(int)>"
"<java.nio.ByteBuffer: byte[] array()>","<java.nio.ByteBuffer: byte[] array()>"
"<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>","<android.app.TaskStackBuilder: android.app.TaskStackBuilder addParentStack(android.content.ComponentName)>"
"<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>","<android.content.Context: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>"
"<java.time.temporal.TemporalField: java.time.temporal.ValueRange range()>","<java.time.temporal.TemporalField: java.time.temporal.ValueRange range()>"
"<android.util.SparseArray: java.lang.Object clone()>","<android.util.SparseArray: java.lang.Object clone()>"
"<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.content.ContentProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<java.text.ParsePosition: void setErrorIndex(int)>","<java.text.ParsePosition: void setErrorIndex(int)>"
"<android.media.session.MediaController$TransportControls: void stop()>","<android.media.session.MediaController$TransportControls: void stop()>"
"<android.app.Activity: void setTheme(int)>","<android.app.Activity: void setTheme(int)>"
"<android.os.VibrationAttributes: int getUsageClass()>","<android.os.VibrationAttributes: int getUsageClass()>"
"<android.hardware.lights.LightState: int describeContents()>","<android.hardware.lights.LightState: int describeContents()>"
"<java.time.temporal.ChronoUnit: boolean isDateBased()>","<java.time.temporal.ChronoUnit: boolean isDateBased()>"
"<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>","<android.content.pm.PackageItemInfo: void <init>(android.os.Parcel)>"
"<android.hardware.BatteryState: float getCapacity()>","<android.hardware.BatteryState: float getCapacity()>"
"<android.widget.TextView: void setLines(int)>","<android.widget.TextView: void setLines(int)>"
"<java.lang.Long: java.lang.Long getLong(java.lang.String)>","<java.lang.Long: java.lang.Long getLong(java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
"<android.hardware.camera2.CaptureResult: void <clinit>()>","<android.hardware.camera2.CaptureResult: void <clinit>()>"
"<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>","<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>"
"<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence,int,int)>","<android.text.Editable: android.text.Editable insert(int,java.lang.CharSequence,int,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int)>","<java.time.LocalDateTime: java.time.LocalDateTime of(int,int,int,int,int,int)>"
"<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setIncludedTypes(java.util.Collection)>","<android.view.textclassifier.TextClassifier$EntityConfig$Builder: android.view.textclassifier.TextClassifier$EntityConfig$Builder setIncludedTypes(java.util.Collection)>"
"<android.graphics.drawable.Drawable: boolean onLevelChange(int)>","<android.graphics.drawable.Drawable: boolean onLevelChange(int)>"
"<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)>","<android.view.contentcapture.ContentCaptureSession: void setContentCaptureContext(android.view.contentcapture.ContentCaptureContext)>"
"<android.media.session.MediaController$TransportControls: void pause()>","<android.media.session.MediaController$TransportControls: void pause()>"
"<android.content.Context: java.lang.String getString(int)>","<android.content.Context: java.lang.String getString(int)>"
"<android.view.RoundedCorner: android.graphics.Point getCenter()>","<android.view.RoundedCorner: android.graphics.Point getCenter()>"
"<java.net.DatagramPacket: int getPort()>","<java.net.DatagramPacket: int getPort()>"
"<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>","<android.app.Fragment: boolean getAllowEnterTransitionOverlap()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double,double,double)>","<android.graphics.ColorSpace$Rgb$TransferParameters: void <init>(double,double,double,double,double,double,double)>"
"<java.nio.file.WatchService: void close()>","<java.nio.file.WatchService: void close()>"
"<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>","<java.nio.CharBuffer: int compareTo(java.nio.CharBuffer)>"
"<android.net.NetworkRequest: int[] getCapabilities()>","<android.net.NetworkRequest: int[] getCapabilities()>"
"<java.lang.Character: boolean isUnicodeIdentifierPart(char)>","<java.lang.Character: boolean isUnicodeIdentifierPart(char)>"
"<java.lang.Class: java.lang.String getSimpleName()>","<java.lang.Class: java.lang.String getSimpleName()>"
"<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>"
"<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.Consumer)>","<java.util.PrimitiveIterator$OfLong: void forEachRemaining(java.util.function.Consumer)>"
"<android.net.Uri$Builder: android.net.Uri build()>","<android.net.Uri$Builder: android.net.Uri build()>"
"<android.widget.TextView: void onBeginBatchEdit()>","<android.widget.TextView: void onBeginBatchEdit()>"
"<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>","<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>"
"<android.view.KeyEvent: int getScanCode()>","<android.view.KeyEvent: int getScanCode()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog show()>","<android.app.AlertDialog$Builder: android.app.AlertDialog show()>"
"<android.view.Window: int getColorMode()>","<android.view.Window: int getColorMode()>"
"<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>","<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>"
"<android.view.View: boolean canResolveTextAlignment()>","<android.view.View: boolean canResolveTextAlignment()>"
"<android.view.InputEvent: void <clinit>()>","<android.view.InputEvent: void <clinit>()>"
"<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setEntityType(java.lang.String,float)>","<android.view.textclassifier.TextSelection$Builder: android.view.textclassifier.TextSelection$Builder setEntityType(java.lang.String,float)>"
"<java.util.stream.IntStream: java.util.OptionalDouble average()>","<java.util.stream.IntStream: java.util.OptionalDouble average()>"
"<android.media.MediaFormat: java.lang.String getString(java.lang.String,java.lang.String)>","<android.media.MediaFormat: java.lang.String getString(java.lang.String,java.lang.String)>"
"<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>","<android.content.ServiceConnection: void onServiceDisconnected(android.content.ComponentName)>"
"<java.util.Collections: void reverse(java.util.List)>","<java.util.Collections: void reverse(java.util.List)>"
"<android.media.MediaDrm$MetricsConstants: void <init>()>","<android.media.MediaDrm$MetricsConstants: void <init>()>"
"<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>","<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>"
"<java.util.concurrent.ConcurrentLinkedQueue: void clear()>","<java.util.concurrent.ConcurrentLinkedQueue: void clear()>"
"<android.view.WindowInsetsAnimationController: boolean isCancelled()>","<android.view.WindowInsetsAnimationController: boolean isCancelled()>"
"<android.util.Rational: float floatValue()>","<android.util.Rational: float floatValue()>"
"<android.media.AudioManager: void <init>()>","<android.media.AudioManager: void <init>()>"
"<android.os.Parcel: void writeFloatArray(float[])>","<android.os.Parcel: void writeFloatArray(float[])>"
"<android.media.MediaDescription: android.net.Uri getIconUri()>","<android.media.MediaDescription: android.net.Uri getIconUri()>"
"<java.lang.Integer: int min(int,int)>","<java.lang.Integer: int min(int,int)>"
"<android.content.pm.PackageManager$ResolveInfoFlags: void <init>()>","<android.content.pm.PackageManager$ResolveInfoFlags: void <init>()>"
"<android.graphics.Point: void readFromParcel(android.os.Parcel)>","<android.graphics.Point: void readFromParcel(android.os.Parcel)>"
"<android.view.inputmethod.TextAttribute: void <clinit>()>","<android.view.inputmethod.TextAttribute: void <clinit>()>"
"<java.lang.Math: double cbrt(double)>","<java.lang.Math: double cbrt(double)>"
"<android.database.sqlite.SQLiteDatabase: void beginTransaction()>","<android.database.sqlite.SQLiteDatabase: void beginTransaction()>"
"<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>","<android.content.Context: android.content.res.ColorStateList getColorStateList(int)>"
"<android.view.accessibility.AccessibilityNodeInfo: int getActions()>","<android.view.accessibility.AccessibilityNodeInfo: int getActions()>"
"<android.view.SurfaceView: void onWindowVisibilityChanged(int)>","<android.view.SurfaceView: void onWindowVisibilityChanged(int)>"
"<android.hardware.Camera$CameraInfo: void <init>()>","<android.hardware.Camera$CameraInfo: void <init>()>"
"<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>","<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder setInterpolatorType(int)>"
"<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>","<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>"
"<java.lang.Character: boolean isWhitespace(char)>","<java.lang.Character: boolean isWhitespace(char)>"
"<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],android.graphics.ColorSpace$Rgb$TransferParameters)>","<android.graphics.ColorSpace$Rgb: void <init>(java.lang.String,float[],android.graphics.ColorSpace$Rgb$TransferParameters)>"
"<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>","<java.lang.SecurityManager: void checkPermission(java.security.Permission,java.lang.Object)>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo build()>","<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo build()>"
"<android.view.translation.TranslationSpec: java.lang.String toString()>","<android.view.translation.TranslationSpec: java.lang.String toString()>"
"<android.media.AudioRecordingConfiguration: boolean isClientSilenced()>","<android.media.AudioRecordingConfiguration: boolean isClientSilenced()>"
"<android.view.MenuInflater: void <init>(android.content.Context)>","<android.view.MenuInflater: void <init>(android.content.Context)>"
"<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectBottom(android.graphics.Rect)>","<android.view.DisplayCutout$Builder: android.view.DisplayCutout$Builder setBoundingRectBottom(android.graphics.Rect)>"
"<android.view.MotionEvent: void <clinit>()>","<android.view.MotionEvent: void <clinit>()>"
"<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>","<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>"
"<android.text.Layout: boolean isRtlCharAt(int)>","<android.text.Layout: boolean isRtlCharAt(int)>"
"<java.util.function.IntPredicate: java.util.function.IntPredicate and(java.util.function.IntPredicate)>","<java.util.function.IntPredicate: java.util.function.IntPredicate and(java.util.function.IntPredicate)>"
"<java.time.OffsetDateTime: boolean equals(java.lang.Object)>","<java.time.OffsetDateTime: boolean equals(java.lang.Object)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])>"
"<android.telephony.PhoneStateListener: void onBarringInfoChanged(android.telephony.BarringInfo)>","<android.telephony.PhoneStateListener: void onBarringInfoChanged(android.telephony.BarringInfo)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream peek(java.util.function.DoubleConsumer)>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream peek(java.util.function.DoubleConsumer)>"
"<android.net.NetworkInfo: boolean isFailover()>","<android.net.NetworkInfo: boolean isFailover()>"
"<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>","<java.nio.channels.MembershipKey: java.net.InetAddress sourceAddress()>"
"<android.hardware.camera2.params.StreamConfigurationMap: void <init>()>","<android.hardware.camera2.params.StreamConfigurationMap: void <init>()>"
"<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>","<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>"
"<java.time.temporal.ValueRange: long getMaximum()>","<java.time.temporal.ValueRange: long getMaximum()>"
"<java.time.LocalTime: java.time.LocalTime minusHours(long)>","<java.time.LocalTime: java.time.LocalTime minusHours(long)>"
"<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setExtras(android.os.PersistableBundle)>","<android.view.inputmethod.TextAttribute$Builder: android.view.inputmethod.TextAttribute$Builder setExtras(android.os.PersistableBundle)>"
"<java.nio.channels.FileLock: boolean overlaps(long,long)>","<java.nio.channels.FileLock: boolean overlaps(long,long)>"
"<android.text.PrecomputedText$Params$Builder: void <init>(android.text.TextPaint)>","<android.text.PrecomputedText$Params$Builder: void <init>(android.text.TextPaint)>"
"<android.os.Vibrator: boolean hasVibrator()>","<android.os.Vibrator: boolean hasVibrator()>"
"<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>","<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>"
"<java.lang.IllegalStateException: void <init>(java.lang.String)>","<java.lang.IllegalStateException: void <init>(java.lang.String)>"
"<android.view.View: void setHovered(boolean)>","<android.view.View: void setHovered(boolean)>"
"<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>","<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>"
"<android.media.ImageReader: long getUsage()>","<android.media.ImageReader: long getUsage()>"
"<android.hardware.lights.Light: void writeToParcel(android.os.Parcel,int)>","<android.hardware.lights.Light: void writeToParcel(android.os.Parcel,int)>"
"<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>","<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>"
"<android.view.MotionEvent: float getTouchMajor(int)>","<android.view.MotionEvent: float getTouchMajor(int)>"
"<java.lang.Boolean: boolean equals(java.lang.Object)>","<java.lang.Boolean: boolean equals(java.lang.Object)>"
"<android.widget.TextView: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>","<android.widget.TextView: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>"
"<java.lang.ClassLoader: java.lang.Package[] getPackages()>","<java.lang.ClassLoader: java.lang.Package[] getPackages()>"
"<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)>","<android.view.ViewGroup: void dispatchSaveInstanceState(android.util.SparseArray)>"
"<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()>","<android.view.inputmethod.CursorAnchorInfo: android.graphics.Matrix getMatrix()>"
"<java.time.LocalTime: java.time.LocalTime minusSeconds(long)>","<java.time.LocalTime: java.time.LocalTime minusSeconds(long)>"
"<java.util.NavigableMap: java.util.Map$Entry pollFirstEntry()>","<java.util.NavigableMap: java.util.Map$Entry pollFirstEntry()>"
"<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>","<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>"
"<java.net.SocketImpl: boolean supportsUrgentData()>","<java.net.SocketImpl: boolean supportsUrgentData()>"
"<android.graphics.Point: int hashCode()>","<android.graphics.Point: int hashCode()>"
"<android.telephony.VisualVoicemailSmsFilterSettings: void <init>()>","<android.telephony.VisualVoicemailSmsFilterSettings: void <init>()>"
"<java.time.Period: int hashCode()>","<java.time.Period: int hashCode()>"
"<java.lang.invoke.VarHandle: void set(java.lang.Object[])>","<java.lang.invoke.VarHandle: void set(java.lang.Object[])>"
"<java.nio.channels.SelectionKey: void <init>()>","<java.nio.channels.SelectionKey: void <init>()>"
"<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions$Request)>","<android.view.textclassifier.TextClassifier: android.view.textclassifier.ConversationActions suggestConversationActions(android.view.textclassifier.ConversationActions$Request)>"
"<android.util.ArrayMap: void clear()>","<android.util.ArrayMap: void clear()>"
"<android.media.MediaFormat: void <init>()>","<android.media.MediaFormat: void <init>()>"
"<android.content.BroadcastReceiver: void setResultData(java.lang.String)>","<android.content.BroadcastReceiver: void setResultData(java.lang.String)>"
"<java.net.URLConnection: void setDoOutput(boolean)>","<java.net.URLConnection: void setDoOutput(boolean)>"
"<android.view.WindowInsets: int getStableInsetLeft()>","<android.view.WindowInsets: int getStableInsetLeft()>"
"<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVoicePromptAt(int)>","<android.app.VoiceInteractor$Prompt: java.lang.CharSequence getVoicePromptAt(int)>"
"<android.view.View: boolean hasOnClickListeners()>","<android.view.View: boolean hasOnClickListeners()>"
"<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()>","<android.view.ScrollCaptureSession: android.graphics.Point getPositionInWindow()>"
"<java.time.OffsetDateTime: boolean isBefore(java.time.OffsetDateTime)>","<java.time.OffsetDateTime: boolean isBefore(java.time.OffsetDateTime)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>"
"<android.content.LocusId: boolean equals(java.lang.Object)>","<android.content.LocusId: boolean equals(java.lang.Object)>"
"<android.icu.util.ULocale: java.lang.String getISO3Country(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getISO3Country(java.lang.String)>"
"<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)>","<android.telephony.TelephonyManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(java.lang.String)>"
"<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>","<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable,boolean,boolean)>"
"<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()>","<android.hardware.Camera$Parameters: java.util.List getMeteringAreas()>"
"<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>","<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>"
"<android.view.InputQueue: void <init>()>","<android.view.InputQueue: void <init>()>"
"<java.lang.Double: void <clinit>()>","<java.lang.Double: void <clinit>()>"
"<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>","<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>"
"<android.app.Dialog: void closeOptionsMenu()>","<android.app.Dialog: void closeOptionsMenu()>"
"<android.graphics.Paint: void setStrokeWidth(float)>","<android.graphics.Paint: void setStrokeWidth(float)>"
"<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>","<android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)>"
"<android.view.accessibility.AccessibilityRecord: int getToIndex()>","<android.view.accessibility.AccessibilityRecord: int getToIndex()>"
"<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])>","<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])>"
"<android.hardware.display.DeviceProductInfo: int getManufactureYear()>","<android.hardware.display.DeviceProductInfo: int getManufactureYear()>"
"<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>","<android.hardware.Camera$Parameters: void setColorEffect(java.lang.String)>"
"<java.lang.System: void runFinalizersOnExit(boolean)>","<java.lang.System: void runFinalizersOnExit(boolean)>"
"<java.net.Proxy: boolean equals(java.lang.Object)>","<java.net.Proxy: boolean equals(java.lang.Object)>"
"<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>","<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>"
"<java.time.chrono.ChronoPeriod: java.lang.String toString()>","<java.time.chrono.ChronoPeriod: java.lang.String toString()>"
"<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()>","<android.view.ContextThemeWrapper: android.content.res.AssetManager getAssets()>"
"<android.view.textclassifier.ConversationActions$Message: android.os.Bundle getExtras()>","<android.view.textclassifier.ConversationActions$Message: android.os.Bundle getExtras()>"
"<java.time.DayOfWeek: java.time.DayOfWeek minus(long)>","<java.time.DayOfWeek: java.time.DayOfWeek minus(long)>"
"<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>","<android.content.ContextWrapper: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>"
"<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>","<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>"
"<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)>","<org.xmlpull.v1.XmlPullParser: boolean isAttributeDefault(int)>"
"<android.widget.AdapterView: android.widget.Adapter getAdapter()>","<android.widget.AdapterView: android.widget.Adapter getAdapter()>"
"<android.app.RemoteAction: boolean isEnabled()>","<android.app.RemoteAction: boolean isEnabled()>"
"<java.util.HashMap: void replaceAll(java.util.function.BiFunction)>","<java.util.HashMap: void replaceAll(java.util.function.BiFunction)>"
"<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>","<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>"
"<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>","<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>"
"<android.hardware.camera2.params.MeteringRectangle: int getX()>","<android.hardware.camera2.params.MeteringRectangle: int getX()>"
"<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>","<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
"<android.net.Uri: java.lang.String toString()>","<android.net.Uri: java.lang.String toString()>"
"<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>","<android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)>"
"<android.hardware.lights.LightsManager: void <init>()>","<android.hardware.lights.LightsManager: void <init>()>"
"<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getSupportedExtensions()>","<android.hardware.camera2.CameraExtensionCharacteristics: java.util.List getSupportedExtensions()>"
"<java.nio.DoubleBuffer: double get()>","<java.nio.DoubleBuffer: double get()>"
"<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>","<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>"
"<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordStartIndex()>","<android.view.textclassifier.TextClassifierEvent$TextSelectionEvent: int getRelativeSuggestedWordStartIndex()>"
"<android.os.Message: long getWhen()>","<android.os.Message: long getWhen()>"
"<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>","<java.nio.charset.Charset: java.lang.String displayName(java.util.Locale)>"
"<android.view.View: void setId(int)>","<android.view.View: void setId(int)>"
"<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>","<android.content.res.Resources$NotFoundException: void <init>(java.lang.String,java.lang.Exception)>"
"<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()>","<android.view.contentcapture.ContentCaptureContext: android.content.LocusId getLocusId()>"
"<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>","<android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)>"
"<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)>","<android.app.AlertDialog$Builder: void <init>(android.content.Context,int)>"
"<java.lang.invoke.VarHandle: void setOpaque(java.lang.Object[])>","<java.lang.invoke.VarHandle: void setOpaque(java.lang.Object[])>"
"<java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)>","<java.util.Collections: java.util.SortedSet checkedSortedSet(java.util.SortedSet,java.lang.Class)>"
"<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>","<android.app.SharedElementCallback: void onMapSharedElements(java.util.List,java.util.Map)>"
"<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>","<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>"
"<android.view.View: void setTooltipText(java.lang.CharSequence)>","<android.view.View: void setTooltipText(java.lang.CharSequence)>"
"<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>","<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>"
"<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)>","<android.graphics.Typeface$CustomFallbackBuilder: android.graphics.Typeface$CustomFallbackBuilder addCustomFallback(android.graphics.fonts.FontFamily)>"
"<android.view.View: android.view.View getRootView()>","<android.view.View: android.view.View getRootView()>"
"<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>","<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String,android.os.CancellationSignal)>"
"<android.view.ViewGroup: void clearDisappearingChildren()>","<android.view.ViewGroup: void clearDisappearingChildren()>"
"<java.util.stream.IntStream: java.util.stream.IntStream rangeClosed(int,int)>","<java.util.stream.IntStream: java.util.stream.IntStream rangeClosed(int,int)>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()>","<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetType()>"
"<android.net.SocketKeepalive: void start(int)>","<android.net.SocketKeepalive: void start(int)>"
"<android.telephony.NetworkScanRequest: int hashCode()>","<android.telephony.NetworkScanRequest: int hashCode()>"
"<android.util.ArrayMap: boolean retainAll(java.util.Collection)>","<android.util.ArrayMap: boolean retainAll(java.util.Collection)>"
"<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>","<android.app.ActivityManager$TaskDescription: int getBackgroundColor()>"
"<android.hardware.camera2.CameraManager: void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback,android.os.Handler)>","<android.hardware.camera2.CameraManager: void registerTorchCallback(android.hardware.camera2.CameraManager$TorchCallback,android.os.Handler)>"
"<android.app.Activity: void setDefaultKeyMode(int)>","<android.app.Activity: void setDefaultKeyMode(int)>"
"<android.telephony.TelephonyManager: int getSimState()>","<android.telephony.TelephonyManager: int getSimState()>"
"<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>","<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>"
"<java.lang.StringBuffer: int codePointAt(int)>","<java.lang.StringBuffer: int codePointAt(int)>"
"<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()>","<android.transition.Transition: android.transition.Transition$EpicenterCallback getEpicenterCallback()>"
"<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()>","<android.view.textclassifier.TextClassification$Request: java.lang.String getCallingPackageName()>"
"<android.net.IpSecManager$SecurityParameterIndex: int getSpi()>","<android.net.IpSecManager$SecurityParameterIndex: int getSpi()>"
"<android.app.Activity: void onAttachFragment(android.app.Fragment)>","<android.app.Activity: void onAttachFragment(android.app.Fragment)>"
"<java.io.File: boolean isHidden()>","<java.io.File: boolean isHidden()>"
"<android.view.View: int getNextFocusLeftId()>","<android.view.View: int getNextFocusLeftId()>"
"<android.graphics.Rect: void setEmpty()>","<android.graphics.Rect: void setEmpty()>"
"<java.lang.Package: java.lang.Package getPackage(java.lang.String)>","<java.lang.Package: java.lang.Package getPackage(java.lang.String)>"
"<java.time.Duration: long toMinutes()>","<java.time.Duration: long toMinutes()>"
"<android.content.pm.PermissionGroupInfo: void <init>()>","<android.content.pm.PermissionGroupInfo: void <init>()>"
"<android.view.InputDevice$MotionRange: float getMax()>","<android.view.InputDevice$MotionRange: float getMax()>"
"<android.view.ActionMode: boolean getTitleOptionalHint()>","<android.view.ActionMode: boolean getTitleOptionalHint()>"
"<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>","<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>"
"<android.view.ViewGroup: boolean isAnimationCacheEnabled()>","<android.view.ViewGroup: boolean isAnimationCacheEnabled()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.ZoneId getZone()>","<java.time.chrono.ChronoZonedDateTime: java.time.ZoneId getZone()>"
"<android.view.Window: android.transition.Transition getEnterTransition()>","<android.view.Window: android.transition.Transition getEnterTransition()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setAdapter(android.widget.ListAdapter,android.content.DialogInterface$OnClickListener)>"
"<android.widget.AbsListView: boolean onNestedFling(android.view.View,float,float,boolean)>","<android.widget.AbsListView: boolean onNestedFling(android.view.View,float,float,boolean)>"
"<android.widget.TextView: float getLineSpacingMultiplier()>","<android.widget.TextView: float getLineSpacingMultiplier()>"
"<java.util.concurrent.ConcurrentLinkedQueue: void forEach(java.util.function.Consumer)>","<java.util.concurrent.ConcurrentLinkedQueue: void forEach(java.util.function.Consumer)>"
"<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>","<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>"
"<android.os.LocaleList: void <init>(java.util.Locale[])>","<android.os.LocaleList: void <init>(java.util.Locale[])>"
"<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>","<android.app.TaskStackBuilder: android.content.Intent[] getIntents()>"
"<android.hardware.camera2.CameraDevice: void <init>()>","<android.hardware.camera2.CameraDevice: void <init>()>"
"<android.widget.ListAdapter: boolean areAllItemsEnabled()>","<android.widget.ListAdapter: boolean areAllItemsEnabled()>"
"<java.nio.LongBuffer: java.nio.Buffer rewind()>","<java.nio.LongBuffer: java.nio.Buffer rewind()>"
"<android.graphics.drawable.Drawable: int getLayoutDirection()>","<android.graphics.drawable.Drawable: int getLayoutDirection()>"
"<android.widget.RemoteViews: void setViewLayoutMargin(int,int,float,int)>","<android.widget.RemoteViews: void setViewLayoutMargin(int,int,float,int)>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>","<java.nio.ShortBuffer: java.nio.ShortBuffer get(short[])>"
"<android.graphics.RectF: void <init>(android.graphics.RectF)>","<android.graphics.RectF: void <init>(android.graphics.RectF)>"
"<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request,java.lang.String)>","<android.app.VoiceInteractor: boolean submitRequest(android.app.VoiceInteractor$Request,java.lang.String)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
"<android.hardware.Camera: void setDisplayOrientation(int)>","<android.hardware.Camera: void setDisplayOrientation(int)>"
"<android.widget.Toolbar: int getPopupTheme()>","<android.widget.Toolbar: int getPopupTheme()>"
"<java.time.ZoneId: java.time.zone.ZoneRules getRules()>","<java.time.ZoneId: java.time.zone.ZoneRules getRules()>"
"<java.util.stream.Collector$Characteristics: void <clinit>()>","<java.util.stream.Collector$Characteristics: void <clinit>()>"
"<android.os.VibratorManager: void vibrate(android.os.CombinedVibration,android.os.VibrationAttributes)>","<android.os.VibratorManager: void vibrate(android.os.CombinedVibration,android.os.VibrationAttributes)>"
"<java.util.Arrays: int compare(java.lang.Object[],java.lang.Object[],java.util.Comparator)>","<java.util.Arrays: int compare(java.lang.Object[],java.lang.Object[],java.util.Comparator)>"
"<java.lang.invoke.MethodHandleInfo: java.lang.String referenceKindToString(int)>","<java.lang.invoke.MethodHandleInfo: java.lang.String referenceKindToString(int)>"
"<java.util.function.IntConsumer: java.util.function.IntConsumer andThen(java.util.function.IntConsumer)>","<java.util.function.IntConsumer: java.util.function.IntConsumer andThen(java.util.function.IntConsumer)>"
"<java.io.File: java.io.File getAbsoluteFile()>","<java.io.File: java.io.File getAbsoluteFile()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>"
"<java.net.DatagramSocket: int getLocalPort()>","<java.net.DatagramSocket: int getLocalPort()>"
"<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>","<java.nio.channels.DatagramChannel: java.net.SocketAddress receive(java.nio.ByteBuffer)>"
"<android.view.displayhash.DisplayHash: void writeToParcel(android.os.Parcel,int)>","<android.view.displayhash.DisplayHash: void writeToParcel(android.os.Parcel,int)>"
"<android.app.Person: int describeContents()>","<android.app.Person: int describeContents()>"
"<java.io.PrintWriter: void <init>(java.io.OutputStream)>","<java.io.PrintWriter: void <init>(java.io.OutputStream)>"
"<java.time.chrono.IsoChronology: boolean isLeapYear(long)>","<java.time.chrono.IsoChronology: boolean isLeapYear(long)>"
"<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>","<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>"
"<java.net.URL: java.lang.String getRef()>","<java.net.URL: java.lang.String getRef()>"
"<java.util.AbstractSet: int hashCode()>","<java.util.AbstractSet: int hashCode()>"
"<java.lang.StringBuilder: java.lang.Appendable append(char)>","<java.lang.StringBuilder: java.lang.Appendable append(char)>"
"<android.os.BaseBundle: long[] getLongArray(java.lang.String)>","<android.os.BaseBundle: long[] getLongArray(java.lang.String)>"
"<android.content.res.Resources: java.lang.String getResourceTypeName(int)>","<android.content.res.Resources: java.lang.String getResourceTypeName(int)>"
"<android.hardware.camera2.params.OutputConfiguration: void setPhysicalCameraId(java.lang.String)>","<android.hardware.camera2.params.OutputConfiguration: void setPhysicalCameraId(java.lang.String)>"
"<android.telephony.SignalStrengthUpdateRequest: boolean equals(java.lang.Object)>","<android.telephony.SignalStrengthUpdateRequest: boolean equals(java.lang.Object)>"
"<android.view.View: void setScrollCaptureCallback(android.view.ScrollCaptureCallback)>","<android.view.View: void setScrollCaptureCallback(android.view.ScrollCaptureCallback)>"
"<android.graphics.RenderNode: void endRecording()>","<android.graphics.RenderNode: void endRecording()>"
"<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>","<java.util.SortedSet: java.util.SortedSet subSet(java.lang.Object,java.lang.Object)>"
"<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>","<android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)>"
"<android.app.Activity: void takeKeyEvents(boolean)>","<android.app.Activity: void takeKeyEvents(boolean)>"
"<android.telephony.TelephonyManager: java.lang.String getLine1Number()>","<android.telephony.TelephonyManager: java.lang.String getLine1Number()>"
"<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>","<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>"
"<android.view.View: boolean willNotCacheDrawing()>","<android.view.View: boolean willNotCacheDrawing()>"
"<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>","<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>"
"<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>","<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>"
"<android.net.ConnectivityManager: android.net.SocketKeepalive createSocketKeepalive(android.net.Network,android.net.IpSecManager$UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)>","<android.net.ConnectivityManager: android.net.SocketKeepalive createSocketKeepalive(android.net.Network,android.net.IpSecManager$UdpEncapsulationSocket,java.net.InetAddress,java.net.InetAddress,java.util.concurrent.Executor,android.net.SocketKeepalive$Callback)>"
"<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>","<android.view.View: void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)>"
"<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>","<java.io.PrintStream: void <init>(java.io.OutputStream,boolean,java.lang.String)>"
"<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>","<android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)>"
"<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>","<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>"
"<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>","<android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)>"
"<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes)>","<android.os.Vibrator: void vibrate(android.os.VibrationEffect,android.media.AudioAttributes)>"
"<java.io.PrintStream: void write(byte[],int,int)>","<java.io.PrintStream: void write(byte[],int,int)>"
"<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>","<android.content.pm.PackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>"
"<android.view.inputmethod.TextAttribute: int describeContents()>","<android.view.inputmethod.TextAttribute: int describeContents()>"
"<android.view.ViewStructure: void setWebDomain(java.lang.String)>","<android.view.ViewStructure: void setWebDomain(java.lang.String)>"
"<android.media.session.PlaybackState: long getBufferedPosition()>","<android.media.session.PlaybackState: long getBufferedPosition()>"
"<java.time.LocalTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider empty(android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider empty(android.content.res.loader.AssetsProvider)>"
"<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>","<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>"
"<java.util.OptionalLong: long orElse(long)>","<java.util.OptionalLong: long orElse(long)>"
"<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>","<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>"
"<android.telephony.NetworkScanRequest: android.telephony.RadioAccessSpecifier[] getSpecifiers()>","<android.telephony.NetworkScanRequest: android.telephony.RadioAccessSpecifier[] getSpecifiers()>"
"<android.app.Activity: boolean isVoiceInteraction()>","<android.app.Activity: boolean isVoiceInteraction()>"
"<android.hardware.camera2.params.MultiResolutionStreamInfo: int hashCode()>","<android.hardware.camera2.params.MultiResolutionStreamInfo: int hashCode()>"
"<android.view.FrameMetrics: void <init>(android.view.FrameMetrics)>","<android.view.FrameMetrics: void <init>(android.view.FrameMetrics)>"
"<android.view.Display$HdrCapabilities: int hashCode()>","<android.view.Display$HdrCapabilities: int hashCode()>"
"<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>","<android.graphics.fonts.Font: android.graphics.fonts.FontStyle getStyle()>"
"<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()>","<android.content.pm.PackageInstaller$SessionInfo: long getUpdatedMillis()>"
"<java.time.Period: java.lang.String toString()>","<java.time.Period: java.lang.String toString()>"
"<android.widget.RelativeLayout: void onLayout(boolean,int,int,int,int)>","<android.widget.RelativeLayout: void onLayout(boolean,int,int,int,int)>"
"<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<android.telephony.TelephonyManager: void setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer)>","<android.telephony.TelephonyManager: void setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer)>"
"<java.time.OffsetTime: java.time.OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)>","<java.time.OffsetTime: java.time.OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)>"
"<android.view.textclassifier.TextSelection: int describeContents()>","<android.view.textclassifier.TextSelection: int describeContents()>"
"<android.media.AudioRouting$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>","<android.media.AudioRouting$OnRoutingChangedListener: void onRoutingChanged(android.media.AudioRouting)>"
"<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>"
"<java.lang.String: void getBytes(int,int,byte[],int)>","<java.lang.String: void getBytes(int,int,byte[],int)>"
"<java.time.Month: java.time.Month valueOf(java.lang.String)>","<java.time.Month: java.time.Month valueOf(java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: float getTextSizeInPx()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: float getTextSizeInPx()>"
"<java.io.File: boolean renameTo(java.io.File)>","<java.io.File: boolean renameTo(java.io.File)>"
"<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>","<android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>"
"<android.view.SurfaceControlViewHost$SurfacePackage: void <clinit>()>","<android.view.SurfaceControlViewHost$SurfacePackage: void <clinit>()>"
"<android.content.ClipboardManager: boolean hasText()>","<android.content.ClipboardManager: boolean hasText()>"
"<android.telephony.SignalStrength: int getCdmaDbm()>","<android.telephony.SignalStrength: int getCdmaDbm()>"
"<android.media.MediaPlayer: void finalize()>","<android.media.MediaPlayer: void finalize()>"
"<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>","<android.app.Activity: void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder)>"
"<android.telephony.ServiceState: int hashCode()>","<android.telephony.ServiceState: int hashCode()>"
"<android.transition.Transition: long getDuration()>","<android.transition.Transition: long getDuration()>"
"<android.widget.TextView: boolean getIncludeFontPadding()>","<android.widget.TextView: boolean getIncludeFontPadding()>"
"<android.graphics.drawable.LayerDrawable: void setLayerSize(int,int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerSize(int,int,int)>"
"<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.EditText: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>","<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>"
"<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)>","<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)>"
"<android.os.Handler: void <init>()>","<android.os.Handler: void <init>()>"
"<java.io.Writer: java.io.Writer append(char)>","<java.io.Writer: java.io.Writer append(char)>"
"<android.view.autofill.AutofillValue: int getListValue()>","<android.view.autofill.AutofillValue: int getListValue()>"
"<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>","<android.widget.Toolbar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>"
"<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>","<android.content.pm.PackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>"
"<java.lang.ThreadGroup: void setMaxPriority(int)>","<java.lang.ThreadGroup: void setMaxPriority(int)>"
"<android.view.ViewStructure: void setSelected(boolean)>","<android.view.ViewStructure: void setSelected(boolean)>"
"<android.view.Window: void takeKeyEvents(boolean)>","<android.view.Window: void takeKeyEvents(boolean)>"
"<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>","<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>"
"<android.view.Surface: boolean isValid()>","<android.view.Surface: boolean isValid()>"
"<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>","<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>"
"<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)>","<android.view.textclassifier.TextSelection: java.lang.String getEntity(int)>"
"<android.content.pm.VersionedPackage: int describeContents()>","<android.content.pm.VersionedPackage: int describeContents()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>","<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction setTransitionStyle(int)>","<android.app.FragmentTransaction: android.app.FragmentTransaction setTransitionStyle(int)>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureBufferLost(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.view.Surface,long)>"
"<java.util.OptionalDouble: void <init>()>","<java.util.OptionalDouble: void <init>()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>","<java.time.LocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
"<java.util.stream.BaseStream: java.util.stream.BaseStream sequential()>","<java.util.stream.BaseStream: java.util.stream.BaseStream sequential()>"
"<android.view.accessibility.AccessibilityNodeInfo: void <clinit>()>","<android.view.accessibility.AccessibilityNodeInfo: void <clinit>()>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>"
"<android.os.BaseBundle: void putAll(android.os.PersistableBundle)>","<android.os.BaseBundle: void putAll(android.os.PersistableBundle)>"
"<android.content.Loader: android.content.Context getContext()>","<android.content.Loader: android.content.Context getContext()>"
"<android.view.DisplayCutout: int getSafeInsetLeft()>","<android.view.DisplayCutout: int getSafeInsetLeft()>"
"<android.view.SurfaceHolder: void setType(int)>","<android.view.SurfaceHolder: void setType(int)>"
"<android.widget.RemoteViews: void setColorStateListAttr(int,java.lang.String,int)>","<android.widget.RemoteViews: void setColorStateListAttr(int,java.lang.String,int)>"
"<android.content.Loader: void rollbackContentChanged()>","<android.content.Loader: void rollbackContentChanged()>"
"<android.view.MotionEvent: int getClassification()>","<android.view.MotionEvent: int getClassification()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage()>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage()>"
"<android.view.MotionEvent: void finalize()>","<android.view.MotionEvent: void finalize()>"
"<android.media.session.MediaSessionManager$OnSession2TokensChangedListener: void onSession2TokensChanged(java.util.List)>","<android.media.session.MediaSessionManager$OnSession2TokensChangedListener: void onSession2TokensChanged(java.util.List)>"
"<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener,android.os.Handler)>","<android.media.AudioTrack: void addOnRoutingChangedListener(android.media.AudioTrack$OnRoutingChangedListener,android.os.Handler)>"
"<android.view.Window: android.view.AttachedSurfaceControl getRootSurfaceControl()>","<android.view.Window: android.view.AttachedSurfaceControl getRootSurfaceControl()>"
"<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>","<android.hardware.display.DisplayManager: android.hardware.display.VirtualDisplay createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)>"
"<android.view.AbsSavedState: int describeContents()>","<android.view.AbsSavedState: int describeContents()>"
"<java.time.Clock: java.time.Clock systemUTC()>","<java.time.Clock: java.time.Clock systemUTC()>"
"<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>","<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>"
"<android.widget.AbsListView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>","<android.widget.AbsListView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>"
"<android.view.Display: android.view.RoundedCorner getRoundedCorner(int)>","<android.view.Display: android.view.RoundedCorner getRoundedCorner(int)>"
"<java.nio.FloatBuffer: java.nio.Buffer rewind()>","<java.nio.FloatBuffer: java.nio.Buffer rewind()>"
"<android.view.View: void generateDisplayHash(java.lang.String,android.graphics.Rect,java.util.concurrent.Executor,android.view.displayhash.DisplayHashResultCallback)>","<android.view.View: void generateDisplayHash(java.lang.String,android.graphics.Rect,java.util.concurrent.Executor,android.view.displayhash.DisplayHashResultCallback)>"
"<android.os.UserHandle: boolean equals(java.lang.Object)>","<android.os.UserHandle: boolean equals(java.lang.Object)>"
"<java.nio.DoubleBuffer: java.nio.Buffer flip()>","<java.nio.DoubleBuffer: java.nio.Buffer flip()>"
"<java.lang.Math: float ulp(float)>","<java.lang.Math: float ulp(float)>"
"<android.widget.Filter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>","<android.widget.Filter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>"
"<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>","<java.nio.CharBuffer: java.nio.CharBuffer subSequence(int,int)>"
"<java.lang.String: void <init>(int[],int,int)>","<java.lang.String: void <init>(int[],int,int)>"
"<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>","<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>"
"<android.widget.TextView: void setTextSelectHandle(int)>","<android.widget.TextView: void setTextSelectHandle(int)>"
"<android.media.VolumeShaper: float getVolume()>","<android.media.VolumeShaper: float getVolume()>"
"<android.widget.AbsListView: void onDisplayHint(int)>","<android.widget.AbsListView: void onDisplayHint(int)>"
"<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow()>","<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow()>"
"<android.app.Fragment: void onResume()>","<android.app.Fragment: void onResume()>"
"<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>","<android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)>"
"<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>","<java.lang.reflect.Array: void setDouble(java.lang.Object,int,double)>"
"<java.net.NetworkInterface: boolean isUp()>","<java.net.NetworkInterface: boolean isUp()>"
"<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>","<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>"
"<java.nio.channels.SelectableChannel: boolean isBlocking()>","<java.nio.channels.SelectableChannel: boolean isBlocking()>"
"<java.lang.reflect.Modifier: boolean isPrivate(int)>","<java.lang.reflect.Modifier: boolean isPrivate(int)>"
"<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>","<java.nio.LongBuffer: java.nio.LongBuffer put(java.nio.LongBuffer)>"
"<java.util.Arrays: int hashCode(byte[])>","<java.util.Arrays: int hashCode(byte[])>"
"<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>","<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>"
"<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>","<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>"
"<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>","<android.hardware.camera2.CameraManager: void openCamera(java.lang.String,android.hardware.camera2.CameraDevice$StateCallback,android.os.Handler)>"
"<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>","<android.text.Layout: void draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)>"
"<android.transition.TransitionValues: boolean equals(java.lang.Object)>","<android.transition.TransitionValues: boolean equals(java.lang.Object)>"
"<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>","<android.view.View: void setHorizontalFadingEdgeEnabled(boolean)>"
"<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>","<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setUniqueId(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo: void setUniqueId(java.lang.String)>"
"<android.view.View: void playSoundEffect(int)>","<android.view.View: void playSoundEffect(int)>"
"<android.view.KeyCharacterMap: void <clinit>()>","<android.view.KeyCharacterMap: void <clinit>()>"
"<java.util.Arrays: void parallelSort(long[])>","<java.util.Arrays: void parallelSort(long[])>"
"<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>","<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>"
"<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.content.pm.PackageInstaller$Session: void removeChildSessionId(int)>","<android.content.pm.PackageInstaller$Session: void removeChildSessionId(int)>"
"<java.io.PrintStream: void print(long)>","<java.io.PrintStream: void print(long)>"
"<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>","<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>"
"<android.hardware.lights.LightState: int getColor()>","<android.hardware.lights.LightState: int getColor()>"
"<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>","<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>"
"<android.media.VolumeProvider: java.lang.String getVolumeControlId()>","<android.media.VolumeProvider: java.lang.String getVolumeControlId()>"
"<android.view.ViewStructure: void <init>()>","<android.view.ViewStructure: void <init>()>"
"<android.os.Bundle: short getShort(java.lang.String,short)>","<android.os.Bundle: short getShort(java.lang.String,short)>"
"<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)>","<android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)>"
"<android.view.View: void restoreHierarchyState(android.util.SparseArray)>","<android.view.View: void restoreHierarchyState(android.util.SparseArray)>"
"<android.content.SyncRequest: int describeContents()>","<android.content.SyncRequest: int describeContents()>"
"<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>"
"<java.net.Proxy: java.net.SocketAddress address()>","<java.net.Proxy: java.net.SocketAddress address()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setSpatializationBehavior(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setSpatializationBehavior(int)>"
"<java.io.PrintStream: void setError()>","<java.io.PrintStream: void setError()>"
"<android.graphics.ColorSpace$Rgb$TransferParameters: int hashCode()>","<android.graphics.ColorSpace$Rgb$TransferParameters: int hashCode()>"
"<java.nio.IntBuffer: java.nio.IntBuffer duplicate()>","<java.nio.IntBuffer: java.nio.IntBuffer duplicate()>"
"<android.content.pm.PermissionInfo: java.lang.String toString()>","<android.content.pm.PermissionInfo: java.lang.String toString()>"
"<java.util.Arrays: void parallelSort(byte[])>","<java.util.Arrays: void parallelSort(byte[])>"
"<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>","<java.net.NetworkInterface: java.util.Enumeration getSubInterfaces()>"
"<android.app.assist.AssistContent: android.content.Intent getIntent()>","<android.app.assist.AssistContent: android.content.Intent getIntent()>"
"<android.widget.AbsListView: long pointToRowId(int,int)>","<android.widget.AbsListView: long pointToRowId(int,int)>"
"<android.view.WindowInsets: int getSystemWindowInsetBottom()>","<android.view.WindowInsets: int getSystemWindowInsetBottom()>"
"<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>","<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>"
"<java.time.LocalDateTime: int getHour()>","<java.time.LocalDateTime: int getHour()>"
"<java.io.PrintWriter: void print(double)>","<java.io.PrintWriter: void print(double)>"
"<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventIndex(int)>","<android.view.textclassifier.TextClassifierEvent$Builder: android.view.textclassifier.TextClassifierEvent$Builder setEventIndex(int)>"
"<java.lang.Float: java.lang.Float valueOf(java.lang.String)>","<java.lang.Float: java.lang.Float valueOf(java.lang.String)>"
"<android.widget.Adapter: long getItemId(int)>","<android.widget.Adapter: long getItemId(int)>"
"<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>","<android.app.FragmentManager: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>"
"<android.view.Window: void setNavigationBarDividerColor(int)>","<android.view.Window: void setNavigationBarDividerColor(int)>"
"<android.widget.AdapterView$OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>","<android.widget.AdapterView$OnItemLongClickListener: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)>"
"<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>","<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>"
"<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: void createLink(java.nio.file.Path,java.nio.file.Path)>"
"<android.net.LinkProperties: void clear()>","<android.net.LinkProperties: void clear()>"
"<java.util.concurrent.TimeUnit: void sleep(long)>","<java.util.concurrent.TimeUnit: void sleep(long)>"
"<android.graphics.Matrix: boolean isAffine()>","<android.graphics.Matrix: boolean isAffine()>"
"<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>","<java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>"
"<java.util.Arrays: int mismatch(double[],int,int,double[],int,int)>","<java.util.Arrays: int mismatch(double[],int,int,double[],int,int)>"
"<android.media.AudioManager$OnModeChangedListener: void onModeChanged(int)>","<android.media.AudioManager$OnModeChangedListener: void onModeChanged(int)>"
"<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()>","<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap getAppIcon()>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setLabel(java.lang.String)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setLabel(java.lang.String)>"
"<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>","<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>"
"<android.view.MotionEvent: boolean isButtonPressed(int)>","<android.view.MotionEvent: boolean isButtonPressed(int)>"
"<java.nio.channels.Pipe: void <init>()>","<java.nio.channels.Pipe: void <init>()>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>"
"<android.graphics.Outline: void offset(int,int)>","<android.graphics.Outline: void offset(int,int)>"
"<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],android.os.Bundle,android.os.CancellationSignal)>"
"<java.io.File: void deleteOnExit()>","<java.io.File: void deleteOnExit()>"
"<android.widget.EditText: void setSelection(int,int)>","<android.widget.EditText: void setSelection(int,int)>"
"<android.media.VolumeShaper$Configuration$Builder: void <init>(android.media.VolumeShaper$Configuration)>","<android.media.VolumeShaper$Configuration$Builder: void <init>(android.media.VolumeShaper$Configuration)>"
"<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>","<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>"
"<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>","<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>"
"<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>","<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>"
"<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>","<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>"
"<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>","<android.content.pm.PackageManager: java.util.List getPackagesHoldingPermissions(java.lang.String[],int)>"
"<android.app.LoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>","<android.app.LoaderManager: android.content.Loader restartLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>"
"<java.nio.file.Path: boolean equals(java.lang.Object)>","<java.nio.file.Path: boolean equals(java.lang.Object)>"
"<java.time.chrono.ChronoLocalDateTime: java.util.Comparator timeLineOrder()>","<java.time.chrono.ChronoLocalDateTime: java.util.Comparator timeLineOrder()>"
"<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()>","<android.media.MediaPlayer: android.media.AudioDeviceInfo getPreferredDevice()>"
"<android.content.IntentFilter: int countDataAuthorities()>","<android.content.IntentFilter: int countDataAuthorities()>"
"<android.hardware.Camera$Parameters: java.lang.String getSceneMode()>","<android.hardware.Camera$Parameters: java.lang.String getSceneMode()>"
"<java.util.NavigableMap: java.util.NavigableMap descendingMap()>","<java.util.NavigableMap: java.util.NavigableMap descendingMap()>"
"<android.telephony.NetworkScanRequest: int describeContents()>","<android.telephony.NetworkScanRequest: int describeContents()>"
"<java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>","<java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>"
"<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedLeapSecond()>","<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedLeapSecond()>"
"<android.graphics.RecordingCanvas: void setDensity(int)>","<android.graphics.RecordingCanvas: void setDensity(int)>"
"<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>","<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)>"
"<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>","<android.content.ClipData$Item: java.lang.CharSequence coerceToStyledText(android.content.Context)>"
"<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)>","<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)>"
"<android.media.AudioManager: void adjustStreamVolume(int,int,int)>","<android.media.AudioManager: void adjustStreamVolume(int,int,int)>"
"<java.time.Clock: java.time.Instant instant()>","<java.time.Clock: java.time.Instant instant()>"
"<android.media.MediaDrm$KeyRequest: java.lang.String getDefaultUrl()>","<android.media.MediaDrm$KeyRequest: java.lang.String getDefaultUrl()>"
"<android.view.Window: void setSystemGestureExclusionRects(java.util.List)>","<android.view.Window: void setSystemGestureExclusionRects(java.util.List)>"
"<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()>","<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence getAppLabel()>"
"<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>","<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>"
"<android.widget.Scroller: boolean computeScrollOffset()>","<android.widget.Scroller: boolean computeScrollOffset()>"
"<android.view.View: boolean postDelayed(java.lang.Runnable,long)>","<android.view.View: boolean postDelayed(java.lang.Runnable,long)>"
"<android.widget.Toolbar: void inflateMenu(int)>","<android.widget.Toolbar: void inflateMenu(int)>"
"<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>","<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)>","<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment)>"
"<android.text.TextUtils$TruncateAt: void <clinit>()>","<android.text.TextUtils$TruncateAt: void <clinit>()>"
"<android.view.Window: void <init>(android.content.Context)>","<android.view.Window: void <init>(android.content.Context)>"
"<android.util.TypedValue: int getComplexUnit()>","<android.util.TypedValue: int getComplexUnit()>"
"<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>","<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>"
"<android.os.MessageQueue: void <init>()>","<android.os.MessageQueue: void <init>()>"
"<java.util.Arrays: void fill(double[],double)>","<java.util.Arrays: void fill(double[],double)>"
"<android.app.Activity: void finishAffinity()>","<android.app.Activity: void finishAffinity()>"
"<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)>","<android.graphics.drawable.BitmapDrawable: void setTargetDensity(android.graphics.Canvas)>"
"<java.util.NavigableSet: java.util.SortedSet tailSet(java.lang.Object)>","<java.util.NavigableSet: java.util.SortedSet tailSet(java.lang.Object)>"
"<java.util.Arrays: void parallelSetAll(int[],java.util.function.IntUnaryOperator)>","<java.util.Arrays: void parallelSetAll(int[],java.util.function.IntUnaryOperator)>"
"<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>","<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>"
"<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>","<android.hardware.Camera$Parameters: java.lang.String getFocusMode()>"
"<java.util.stream.LongStream: java.util.stream.LongStream map(java.util.function.LongUnaryOperator)>","<java.util.stream.LongStream: java.util.stream.LongStream map(java.util.function.LongUnaryOperator)>"
"<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>","<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>"
"<android.app.FragmentTransaction: void commitNow()>","<android.app.FragmentTransaction: void commitNow()>"
"<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>","<java.lang.reflect.Array: void setChar(java.lang.Object,int,char)>"
"<android.graphics.RecordingCanvas: void drawColor(int)>","<android.graphics.RecordingCanvas: void drawColor(int)>"
"<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <clinit>()>","<android.view.textclassifier.TextClassifierEvent$TextLinkifyEvent: void <clinit>()>"
"<android.accounts.Account: java.lang.String toString()>","<android.accounts.Account: java.lang.String toString()>"
"<java.lang.invoke.MethodType: int hashCode()>","<java.lang.invoke.MethodType: int hashCode()>"
"<android.content.pm.PackageManager: byte[] getInstantAppCookie()>","<android.content.pm.PackageManager: byte[] getInstantAppCookie()>"
"<android.media.AudioAttributes: int getVolumeControlStream()>","<android.media.AudioAttributes: int getVolumeControlStream()>"
"<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>","<android.provider.Settings$NameValueTable: boolean putString(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String)>"
"<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>","<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>"
"<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>","<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>"
"<android.content.Context: void <init>()>","<android.content.Context: void <init>()>"
"<java.util.Hashtable: void putAll(java.util.Map)>","<java.util.Hashtable: void putAll(java.util.Map)>"
"<android.media.session.PlaybackState$CustomAction$Builder: void <init>(java.lang.String,java.lang.CharSequence,int)>","<android.media.session.PlaybackState$CustomAction$Builder: void <init>(java.lang.String,java.lang.CharSequence,int)>"
"<android.app.Dialog: void onDetachedFromWindow()>","<android.app.Dialog: void onDetachedFromWindow()>"
"<java.util.regex.Matcher: boolean requireEnd()>","<java.util.regex.Matcher: boolean requireEnd()>"
"<java.util.Arrays: char[] copyOf(char[],int)>","<java.util.Arrays: char[] copyOf(char[],int)>"
"<java.util.OptionalInt: int orElseGet(java.util.function.IntSupplier)>","<java.util.OptionalInt: int orElseGet(java.util.function.IntSupplier)>"
"<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>","<android.text.style.CharacterStyle: void updateDrawState(android.text.TextPaint)>"
"<java.io.File: java.lang.String getAbsolutePath()>","<java.io.File: java.lang.String getAbsolutePath()>"
"<android.content.ContentValues: void clear()>","<android.content.ContentValues: void clear()>"
"<android.app.VoiceInteractor: boolean isDestroyed()>","<android.app.VoiceInteractor: boolean isDestroyed()>"
"<android.animation.TimeInterpolator: float getInterpolation(float)>","<android.animation.TimeInterpolator: float getInterpolation(float)>"
"<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>","<android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)>"
"<java.security.Provider: java.util.Set getServices()>","<java.security.Provider: java.util.Set getServices()>"
"<android.app.Fragment: android.transition.Transition getReenterTransition()>","<android.app.Fragment: android.transition.Transition getReenterTransition()>"
"<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>","<android.hardware.Camera$Parameters: boolean isAutoExposureLockSupported()>"
"<android.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>","<android.animation.TypeEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>"
"<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>","<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>"
"<android.app.Activity: android.content.SharedPreferences getPreferences(int)>","<android.app.Activity: android.content.SharedPreferences getPreferences(int)>"
"<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>","<java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>"
"<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>","<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.AssertionError: void <init>(float)>","<java.lang.AssertionError: void <init>(float)>"
"<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>","<android.view.View: void postOnAnimationDelayed(java.lang.Runnable,long)>"
"<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>","<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>"
"<android.graphics.RectF: float centerY()>","<android.graphics.RectF: float centerY()>"
"<java.net.Socket: int getPort()>","<java.net.Socket: int getPort()>"
"<android.view.textclassifier.TextClassifier$EntityConfig: int describeContents()>","<android.view.textclassifier.TextClassifier$EntityConfig: int describeContents()>"
"<android.media.AudioManager: java.util.List getAvailableCommunicationDevices()>","<android.media.AudioManager: java.util.List getAvailableCommunicationDevices()>"
"<android.view.Surface: int describeContents()>","<android.view.Surface: int describeContents()>"
"<java.time.LocalDateTime: java.time.Month getMonth()>","<java.time.LocalDateTime: java.time.Month getMonth()>"
"<android.view.View: float getZ()>","<android.view.View: float getZ()>"
"<java.nio.Buffer: java.nio.Buffer flip()>","<java.nio.Buffer: java.nio.Buffer flip()>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>"
"<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>","<android.view.ActionProvider: android.view.View onCreateActionView(android.view.MenuItem)>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,int)>"
"<java.security.KeyException: void <init>(java.lang.String)>","<java.security.KeyException: void <init>(java.lang.String)>"
"<android.util.Rational: short shortValue()>","<android.util.Rational: short shortValue()>"
"<android.view.translation.TranslationCapability: void <init>()>","<android.view.translation.TranslationCapability: void <init>()>"
"<android.graphics.drawable.ColorDrawable: boolean isStateful()>","<android.graphics.drawable.ColorDrawable: boolean isStateful()>"
"<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>","<java.util.concurrent.ConcurrentLinkedQueue: void <init>(java.util.Collection)>"
"<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>","<java.util.Deque: boolean removeLastOccurrence(java.lang.Object)>"
"<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>","<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>"
"<android.os.Looper: void <init>()>","<android.os.Looper: void <init>()>"
"<java.util.Arrays: double[] copyOf(double[],int)>","<java.util.Arrays: double[] copyOf(double[],int)>"
"<java.util.function.IntPredicate: java.util.function.IntPredicate or(java.util.function.IntPredicate)>","<java.util.function.IntPredicate: java.util.function.IntPredicate or(java.util.function.IntPredicate)>"
"<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer)>"
"<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)>","<android.os.UserHandle: android.os.UserHandle readFromParcel(android.os.Parcel)>"
"<java.util.Arrays: void fill(int[],int)>","<java.util.Arrays: void fill(int[],int)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setCarrierEnabled(boolean)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setCarrierEnabled(boolean)>"
"<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>","<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>"
"<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo()>","<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo getExtraRenderingInfo()>"
"<java.util.Arrays: boolean equals(byte[],byte[])>","<java.util.Arrays: boolean equals(byte[],byte[])>"
"<android.text.TextPaint: void set(android.text.TextPaint)>","<android.text.TextPaint: void set(android.text.TextPaint)>"
"<java.util.concurrent.Semaphore: boolean tryAcquire(int)>","<java.util.concurrent.Semaphore: boolean tryAcquire(int)>"
"<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>"
"<android.util.AttributeSet: int getIdAttributeResourceValue(int)>","<android.util.AttributeSet: int getIdAttributeResourceValue(int)>"
"<android.widget.RemoteViews: void showNext(int)>","<android.widget.RemoteViews: void showNext(int)>"
"<android.media.AudioRecord$Builder: android.media.AudioRecord build()>","<android.media.AudioRecord$Builder: android.media.AudioRecord build()>"
"<android.telephony.NetworkScanRequest: java.util.ArrayList getPlmns()>","<android.telephony.NetworkScanRequest: java.util.ArrayList getPlmns()>"
"<android.widget.MediaController: boolean onTouchEvent(android.view.MotionEvent)>","<android.widget.MediaController: boolean onTouchEvent(android.view.MotionEvent)>"
"<org.xmlpull.v1.XmlPullParser: int nextTag()>","<org.xmlpull.v1.XmlPullParser: int nextTag()>"
"<android.hardware.camera2.CameraDevice: java.lang.String getId()>","<android.hardware.camera2.CameraDevice: java.lang.String getId()>"
"<java.lang.Double: int compareTo(java.lang.Double)>","<java.lang.Double: int compareTo(java.lang.Double)>"
"<android.app.Activity: void stopManagingCursor(android.database.Cursor)>","<android.app.Activity: void stopManagingCursor(android.database.Cursor)>"
"<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>","<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>"
"<android.telephony.TelephonyManager: int getSubscriptionId()>","<android.telephony.TelephonyManager: int getSubscriptionId()>"
"<android.view.SurfaceView: void setZOrderOnTop(boolean)>","<android.view.SurfaceView: void setZOrderOnTop(boolean)>"
"<android.view.View$DragShadowBuilder: void <init>(android.view.View)>","<android.view.View$DragShadowBuilder: void <init>(android.view.View)>"
"<android.content.res.Configuration: boolean isScreenRound()>","<android.content.res.Configuration: boolean isScreenRound()>"
"<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction build()>","<android.media.session.PlaybackState$CustomAction$Builder: android.media.session.PlaybackState$CustomAction build()>"
"<android.telephony.TelephonyManager: void registerTelephonyCallback(java.util.concurrent.Executor,android.telephony.TelephonyCallback)>","<android.telephony.TelephonyManager: void registerTelephonyCallback(java.util.concurrent.Executor,android.telephony.TelephonyCallback)>"
"<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)>","<java.nio.channels.AsynchronousFileChannel: java.util.concurrent.Future write(java.nio.ByteBuffer,long)>"
"<java.lang.Short: void <clinit>()>","<java.lang.Short: void <clinit>()>"
"<android.graphics.Bitmap: android.graphics.Bitmap asShared()>","<android.graphics.Bitmap: android.graphics.Bitmap asShared()>"
"<android.os.Build$Partition: boolean equals(java.lang.Object)>","<android.os.Build$Partition: boolean equals(java.lang.Object)>"
"<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onError(android.hardware.camera2.CameraOfflineSession,int)>","<android.hardware.camera2.CameraOfflineSession$CameraOfflineSessionCallback: void onError(android.hardware.camera2.CameraOfflineSession,int)>"
"<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>","<android.view.Menu: void setGroupCheckable(int,boolean,boolean)>"
"<android.view.View: void setDuplicateParentStateEnabled(boolean)>","<android.view.View: void setDuplicateParentStateEnabled(boolean)>"
"<java.util.function.DoubleToLongFunction: long applyAsLong(double)>","<java.util.function.DoubleToLongFunction: long applyAsLong(double)>"
"<android.widget.TextView: void setIncludeFontPadding(boolean)>","<android.widget.TextView: void setIncludeFontPadding(boolean)>"
"<android.content.Context: android.view.Display getDisplay()>","<android.content.Context: android.view.Display getDisplay()>"
"<android.view.Display$Mode: int getPhysicalHeight()>","<android.view.Display$Mode: int getPhysicalHeight()>"
"<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest,long)>","<android.hardware.camera2.CameraExtensionSession$ExtensionCaptureCallback: void onCaptureStarted(android.hardware.camera2.CameraExtensionSession,android.hardware.camera2.CaptureRequest,long)>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)>"
"<android.telephony.ims.ImsReasonInfo: void <clinit>()>","<android.telephony.ims.ImsReasonInfo: void <clinit>()>"
"<java.util.ArrayList: boolean addAll(java.util.Collection)>","<java.util.ArrayList: boolean addAll(java.util.Collection)>"
"<android.graphics.Matrix: void getValues(float[])>","<android.graphics.Matrix: void getValues(float[])>"
"<android.graphics.Color: int getComponentCount()>","<android.graphics.Color: int getComponentCount()>"
"<android.view.ContextThemeWrapper: void <init>()>","<android.view.ContextThemeWrapper: void <init>()>"
"<java.util.Arrays: void parallelSort(java.lang.Comparable[])>","<java.util.Arrays: void parallelSort(java.lang.Comparable[])>"
"<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>","<android.content.ContentValues: void writeToParcel(android.os.Parcel,int)>"
"<android.app.ActionBar$TabListener: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>","<android.app.ActionBar$TabListener: void onTabUnselected(android.app.ActionBar$Tab,android.app.FragmentTransaction)>"
"<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>","<java.nio.channels.AsynchronousFileChannel: java.nio.channels.AsynchronousFileChannel open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyAddress(java.net.InetAddress)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setProxyAddress(java.net.InetAddress)>"
"<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>","<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>"
"<java.net.URISyntaxException: java.lang.String getReason()>","<java.net.URISyntaxException: java.lang.String getReason()>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
"<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader,java.lang.Class)>"
"<java.lang.Character: boolean isLetterOrDigit(int)>","<java.lang.Character: boolean isLetterOrDigit(int)>"
"<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>","<android.hardware.display.DisplayManager: android.view.Display[] getDisplays()>"
"<android.app.AlertDialog: void setIcon(int)>","<android.app.AlertDialog: void setIcon(int)>"
"<android.graphics.Paint: boolean isDither()>","<android.graphics.Paint: boolean isDither()>"
"<android.app.Activity: boolean isLaunchedFromBubble()>","<android.app.Activity: boolean isLaunchedFromBubble()>"
"<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>","<android.view.Window: boolean isShortcutKey(int,android.view.KeyEvent)>"
"<java.util.List: boolean equals(java.lang.Object)>","<java.util.List: boolean equals(java.lang.Object)>"
"<java.util.Map: java.util.Map of()>","<java.util.Map: java.util.Map of()>"
"<java.util.PrimitiveIterator$OfDouble: double nextDouble()>","<java.util.PrimitiveIterator$OfDouble: double nextDouble()>"
"<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>","<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>"
"<java.time.Duration: java.time.Duration plusDays(long)>","<java.time.Duration: java.time.Duration plusDays(long)>"
"<android.graphics.Canvas: boolean clipRect(int,int,int,int)>","<android.graphics.Canvas: boolean clipRect(int,int,int,int)>"
"<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>","<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open(java.net.SocketAddress)>"
"<android.widget.TextView: void setSingleLine(boolean)>","<android.widget.TextView: void setSingleLine(boolean)>"
"<android.os.Debug: void stopAllocCounting()>","<android.os.Debug: void stopAllocCounting()>"
"<android.app.Person: java.lang.CharSequence getName()>","<android.app.Person: java.lang.CharSequence getName()>"
"<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>","<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>"
"<java.util.Arrays: void sort(java.lang.Object[],int,int)>","<java.util.Arrays: void sort(java.lang.Object[],int,int)>"
"<android.widget.TextView: int getInputType()>","<android.widget.TextView: int getInputType()>"
"<android.content.res.TypedArray: float getFloat(int,float)>","<android.content.res.TypedArray: float getFloat(int,float)>"
"<java.util.stream.DoubleStream: void forEach(java.util.function.DoubleConsumer)>","<java.util.stream.DoubleStream: void forEach(java.util.function.DoubleConsumer)>"
"<android.view.ViewParent: int getLayoutDirection()>","<android.view.ViewParent: int getLayoutDirection()>"
"<android.media.MediaMetadata: boolean containsKey(java.lang.String)>","<android.media.MediaMetadata: boolean containsKey(java.lang.String)>"
"<android.transition.Transition: android.transition.PathMotion getPathMotion()>","<android.transition.Transition: android.transition.PathMotion getPathMotion()>"
"<android.view.View: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>","<android.view.View: void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)>"
"<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>","<android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)>"
"<java.time.LocalTime: int toSecondOfDay()>","<java.time.LocalTime: int toSecondOfDay()>"
"<android.widget.FrameLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>","<android.widget.FrameLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>"
"<android.view.contentcapture.ContentCaptureSession: void notifyViewsDisappeared(android.view.autofill.AutofillId,long[])>","<android.view.contentcapture.ContentCaptureSession: void notifyViewsDisappeared(android.view.autofill.AutofillId,long[])>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>"
"<android.view.Window: int getForcedWindowFlags()>","<android.view.Window: int getForcedWindowFlags()>"
"<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>","<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>"
"<java.net.Proxy$Type: java.net.Proxy$Type[] values()>","<java.net.Proxy$Type: java.net.Proxy$Type[] values()>"
"<android.widget.TextView: void setTextColor(int)>","<android.widget.TextView: void setTextColor(int)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowTitle(java.lang.String)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder: android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo$Builder setRowTitle(java.lang.String)>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clear()>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder clear()>"
"<android.view.View: void dispatchDraw(android.graphics.Canvas)>","<android.view.View: void dispatchDraw(android.graphics.Canvas)>"
"<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>","<android.content.pm.PackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>"
"<android.hardware.camera2.params.InputConfiguration: int getFormat()>","<android.hardware.camera2.params.InputConfiguration: int getFormat()>"
"<android.content.pm.PackageInstaller: void <init>()>","<android.content.pm.PackageInstaller: void <init>()>"
"<android.hardware.Camera$Parameters: void setGpsAltitude(double)>","<android.hardware.Camera$Parameters: void setGpsAltitude(double)>"
"<android.media.MediaDataSource: void <init>()>","<android.media.MediaDataSource: void <init>()>"
"<java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: void sort(java.lang.Object[],int,int,java.util.Comparator)>"
"<java.util.SortedMap: java.lang.Object lastKey()>","<java.util.SortedMap: java.lang.Object lastKey()>"
"<android.view.textclassifier.TextClassifierEvent: void <init>()>","<android.view.textclassifier.TextClassifierEvent: void <init>()>"
"<java.nio.channels.MembershipKey: java.nio.channels.MulticastChannel channel()>","<java.nio.channels.MembershipKey: java.nio.channels.MulticastChannel channel()>"
"<java.util.Locale: java.lang.String getDisplayName()>","<java.util.Locale: java.lang.String getDisplayName()>"
"<android.widget.TextView: int getMinLines()>","<android.widget.TextView: int getMinLines()>"
"<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>","<java.nio.channels.DatagramChannel: long read(java.nio.ByteBuffer[])>"
"<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Set: java.util.Set of(java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript valueOf(java.lang.String)>","<java.lang.Character$UnicodeScript: java.lang.Character$UnicodeScript valueOf(java.lang.String)>"
"<android.util.Range: java.lang.String toString()>","<android.util.Range: java.lang.String toString()>"
"<android.util.AndroidRuntimeException: void <init>(java.lang.String)>","<android.util.AndroidRuntimeException: void <init>(java.lang.String)>"
"<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>","<android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>"
"<android.view.WindowInsets: int getStableInsetBottom()>","<android.view.WindowInsets: int getStableInsetBottom()>"
"<java.util.AbstractCollection: boolean addAll(java.util.Collection)>","<java.util.AbstractCollection: boolean addAll(java.util.Collection)>"
"<android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff$Mode)>","<android.view.MenuItem: android.view.MenuItem setIconTintMode(android.graphics.PorterDuff$Mode)>"
"<android.media.ImageReader: void discardFreeBuffers()>","<android.media.ImageReader: void discardFreeBuffers()>"
"<java.time.Duration: long getSeconds()>","<java.time.Duration: long getSeconds()>"
"<java.util.Collection: java.util.Iterator iterator()>","<java.util.Collection: java.util.Iterator iterator()>"
"<android.content.ContextWrapper: void updateServiceGroup(android.content.ServiceConnection,int,int)>","<android.content.ContextWrapper: void updateServiceGroup(android.content.ServiceConnection,int,int)>"
"<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>","<java.util.HashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>"
"<android.app.Activity: void setResult(int,android.content.Intent)>","<android.app.Activity: void setResult(int,android.content.Intent)>"
"<android.content.Context: void revokeUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.Context: void revokeUriPermission(java.lang.String,android.net.Uri,int)>"
"<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>","<android.app.Application$ActivityLifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)>"
"<android.app.LoaderManager: void destroyLoader(int)>","<android.app.LoaderManager: void destroyLoader(int)>"
"<java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>","<java.util.stream.Stream: java.util.stream.Stream peek(java.util.function.Consumer)>"
"<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)>","<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)>"
"<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>","<android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String)>"
"<java.time.ZonedDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>","<java.time.ZonedDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
"<android.widget.TextView: void setFilters(android.text.InputFilter[])>","<android.widget.TextView: void setFilters(android.text.InputFilter[])>"
"<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()>","<android.media.MediaPlayer$TrackInfo: java.lang.String getLanguage()>"
"<java.util.concurrent.ExecutorService: void shutdown()>","<java.util.concurrent.ExecutorService: void shutdown()>"
"<java.nio.CharBuffer: java.nio.Buffer clear()>","<java.nio.CharBuffer: java.nio.Buffer clear()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)>"
"<android.widget.TextView: void setHeight(int)>","<android.widget.TextView: void setHeight(int)>"
"<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.graphics.drawable.Icon$OnDrawableLoadedListener,android.os.Handler)>","<android.graphics.drawable.Icon: void loadDrawableAsync(android.content.Context,android.graphics.drawable.Icon$OnDrawableLoadedListener,android.os.Handler)>"
"<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>","<android.content.SyncRequest$Builder: android.content.SyncRequest$Builder setSyncAdapter(android.accounts.Account,java.lang.String)>"
"<android.window.SplashScreenView: void setAlpha(float)>","<android.window.SplashScreenView: void setAlpha(float)>"
"<android.media.MicrophoneDirection: boolean setPreferredMicrophoneDirection(int)>","<android.media.MicrophoneDirection: boolean setPreferredMicrophoneDirection(int)>"
"<java.util.AbstractMap: boolean containsValue(java.lang.Object)>","<java.util.AbstractMap: boolean containsValue(java.lang.Object)>"
"<java.lang.Error: void <init>(java.lang.Throwable)>","<java.lang.Error: void <init>(java.lang.Throwable)>"
"<java.util.stream.LongStream: java.util.stream.LongStream range(long,long)>","<java.util.stream.LongStream: java.util.stream.LongStream range(long,long)>"
"<android.view.ViewDebug$FlagToString: int equals()>","<android.view.ViewDebug$FlagToString: int equals()>"
"<android.provider.Settings$Secure: void <clinit>()>","<android.provider.Settings$Secure: void <clinit>()>"
"<android.widget.FrameLayout: void <init>(android.content.Context)>","<android.widget.FrameLayout: void <init>(android.content.Context)>"
"<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>","<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>"
"<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
"<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>","<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>"
"<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>","<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>"
"<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>","<java.nio.channels.spi.AbstractSelector: void <init>(java.nio.channels.spi.SelectorProvider)>"
"<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>","<java.net.URLStreamHandler: java.lang.String toExternalForm(java.net.URL)>"
"<android.view.View: void invalidate()>","<android.view.View: void invalidate()>"
"<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>","<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>"
"<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>","<android.content.Context: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>"
"<android.view.inputmethod.InputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>","<android.view.inputmethod.InputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>"
"<android.app.Activity: android.view.WindowManager getWindowManager()>","<android.app.Activity: android.view.WindowManager getWindowManager()>"
"<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>","<android.view.View: boolean dispatchNestedPreScroll(int,int,int[],int[])>"
"<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>","<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>"
"<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawPatch(android.graphics.NinePatch,android.graphics.RectF,android.graphics.Paint)>"
"<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>","<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>"
"<android.media.AudioRecordingConfiguration: int getClientAudioSource()>","<android.media.AudioRecordingConfiguration: int getClientAudioSource()>"
"<android.app.Dialog: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>","<android.app.Dialog: android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()>"
"<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>","<java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>"
"<android.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)>","<android.widget.Toolbar: void setNavigationContentDescription(java.lang.CharSequence)>"
"<java.lang.Math: double random()>","<java.lang.Math: double random()>"
"<java.lang.Integer: int rotateLeft(int,int)>","<java.lang.Integer: int rotateLeft(int,int)>"
"<android.app.assist.AssistContent: void <clinit>()>","<android.app.assist.AssistContent: void <clinit>()>"
"<android.graphics.text.LineBreakConfig: void <init>()>","<android.graphics.text.LineBreakConfig: void <init>()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>"
"<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>","<android.view.Menu: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>","<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
"<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>","<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>"
"<android.content.Loader: void commitContentChanged()>","<android.content.Loader: void commitContentChanged()>"
"<android.widget.AdapterView: void addView(android.view.View,int)>","<android.widget.AdapterView: void addView(android.view.View,int)>"
"<android.content.Intent: java.lang.String getAction()>","<android.content.Intent: java.lang.String getAction()>"
"<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)>","<android.hardware.SensorManager$DynamicSensorCallback: void onDynamicSensorDisconnected(android.hardware.Sensor)>"
"<android.widget.TextView: void setFreezesText(boolean)>","<android.widget.TextView: void setFreezesText(boolean)>"
"<android.os.ParcelFileDescriptor: java.lang.String toString()>","<android.os.ParcelFileDescriptor: java.lang.String toString()>"
"<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,android.graphics.text.LineBreakConfig,int,boolean)>","<android.graphics.text.MeasuredText$Builder: android.graphics.text.MeasuredText$Builder appendStyleRun(android.graphics.Paint,android.graphics.text.LineBreakConfig,int,boolean)>"
"<android.animation.ValueAnimator: void cancel()>","<android.animation.ValueAnimator: void cancel()>"
"<android.os.Parcel: int readInt()>","<android.os.Parcel: int readInt()>"
"<android.view.accessibility.AccessibilityRecord: boolean isPassword()>","<android.view.accessibility.AccessibilityRecord: boolean isPassword()>"
"<android.telephony.TelephonyManager$CellInfoCallback: void onError(int,java.lang.Throwable)>","<android.telephony.TelephonyManager$CellInfoCallback: void onError(int,java.lang.Throwable)>"
"<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>","<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>"
"<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>","<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>"
"<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>","<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>"
"<android.media.MediaSyncEvent: void <clinit>()>","<android.media.MediaSyncEvent: void <clinit>()>"
"<java.lang.Character$Subset: int hashCode()>","<java.lang.Character$Subset: int hashCode()>"
"<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<java.lang.Package: java.lang.String getSpecificationTitle()>","<java.lang.Package: java.lang.String getSpecificationTitle()>"
"<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()>","<android.view.textclassifier.SelectionEvent: java.lang.String getWidgetVersion()>"
"<android.app.ActionBar: void setHomeButtonEnabled(boolean)>","<android.app.ActionBar: void setHomeButtonEnabled(boolean)>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>"
"<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>","<android.media.session.MediaController: void unregisterCallback(android.media.session.MediaController$Callback)>"
"<android.view.ScrollCaptureSession: void <init>(android.view.Surface,android.graphics.Rect,android.graphics.Point)>","<android.view.ScrollCaptureSession: void <init>(android.view.Surface,android.graphics.Rect,android.graphics.Point)>"
"<java.lang.StackTraceElement: boolean isNativeMethod()>","<java.lang.StackTraceElement: boolean isNativeMethod()>"
"<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator)>","<android.animation.Animator$AnimatorListener: void onAnimationEnd(android.animation.Animator)>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>"
"<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>","<android.os.Parcel: void writeSparseArray(android.util.SparseArray)>"
"<android.widget.TextView: boolean showContextMenu()>","<android.widget.TextView: boolean showContextMenu()>"
"<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit valueOf(java.lang.String)>","<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit valueOf(java.lang.String)>"
"<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)>","<android.view.textclassifier.TextClassification: float getConfidenceScore(java.lang.String)>"
"<android.os.Debug: boolean waitingForDebugger()>","<android.os.Debug: boolean waitingForDebugger()>"
"<java.nio.DoubleBuffer: int hashCode()>","<java.nio.DoubleBuffer: int hashCode()>"
"<java.time.LocalDate: java.time.LocalDate minusMonths(long)>","<java.time.LocalDate: java.time.LocalDate minusMonths(long)>"
"<android.view.LayoutInflater$Factory2: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.view.LayoutInflater$Factory2: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<java.text.FieldPosition: int getBeginIndex()>","<java.text.FieldPosition: int getBeginIndex()>"
"<android.widget.AbsListView: boolean onKeyUp(int,android.view.KeyEvent)>","<android.widget.AbsListView: boolean onKeyUp(int,android.view.KeyEvent)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withEarlierOffsetAtOverlap()>","<java.time.ZonedDateTime: java.time.ZonedDateTime withEarlierOffsetAtOverlap()>"
"<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>","<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>"
"<android.os.Handler: void dump(android.util.Printer,java.lang.String)>","<android.os.Handler: void dump(android.util.Printer,java.lang.String)>"
"<java.util.stream.LongStream: java.util.stream.LongStream generate(java.util.function.LongSupplier)>","<java.util.stream.LongStream: java.util.stream.LongStream generate(java.util.function.LongSupplier)>"
"<android.net.NetworkSpecifier: void <init>()>","<android.net.NetworkSpecifier: void <init>()>"
"<java.nio.ShortBuffer: int compareTo(java.lang.Object)>","<java.nio.ShortBuffer: int compareTo(java.lang.Object)>"
"<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>","<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>"
"<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>","<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>"
"<android.graphics.Point: void offset(int,int)>","<android.graphics.Point: void offset(int,int)>"
"<android.widget.Scroller: void extendDuration(int)>","<android.widget.Scroller: void extendDuration(int)>"
"<android.app.Application$OnProvideAssistDataListener: void onProvideAssistData(android.app.Activity,android.os.Bundle)>","<android.app.Application$OnProvideAssistDataListener: void onProvideAssistData(android.app.Activity,android.os.Bundle)>"
"<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>","<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>"
"<android.view.accessibility.AccessibilityRecord: int getWindowId()>","<android.view.accessibility.AccessibilityRecord: int getWindowId()>"
"<java.time.temporal.TemporalUnit: boolean isTimeBased()>","<java.time.temporal.TemporalUnit: boolean isTimeBased()>"
"<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>","<java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>"
"<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>","<java.lang.reflect.Parameter: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>"
"<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>","<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndAddAcquire(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndAddAcquire(java.lang.Object[])>"
"<java.lang.SecurityManager: void checkDelete(java.lang.String)>","<java.lang.SecurityManager: void checkDelete(java.lang.String)>"
"<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.List: java.util.List of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>","<java.util.Arrays: int mismatch(java.lang.Object[],int,int,java.lang.Object[],int,int,java.util.Comparator)>"
"<java.util.stream.DoubleStream: java.util.stream.DoubleStream empty()>","<java.util.stream.DoubleStream: java.util.stream.DoubleStream empty()>"
"<java.lang.invoke.VarHandle: java.lang.invoke.MethodHandle toMethodHandle(java.lang.invoke.VarHandle$AccessMode)>","<java.lang.invoke.VarHandle: java.lang.invoke.MethodHandle toMethodHandle(java.lang.invoke.VarHandle$AccessMode)>"
"<android.graphics.drawable.Drawable: int getChangingConfigurations()>","<android.graphics.drawable.Drawable: int getChangingConfigurations()>"
"<android.net.IpPrefix: boolean equals(java.lang.Object)>","<android.net.IpPrefix: boolean equals(java.lang.Object)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction runOnCommit(java.lang.Runnable)>","<android.app.FragmentTransaction: android.app.FragmentTransaction runOnCommit(java.lang.Runnable)>"
"<java.net.URI: java.lang.String toASCIIString()>","<java.net.URI: java.lang.String toASCIIString()>"
"<android.view.textclassifier.TextClassification: java.util.List getActions()>","<android.view.textclassifier.TextClassification: java.util.List getActions()>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusMonths(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusMonths(long)>"
"<android.media.session.MediaSession$Callback: void onPrepareFromUri(android.net.Uri,android.os.Bundle)>","<android.media.session.MediaSession$Callback: void onPrepareFromUri(android.net.Uri,android.os.Bundle)>"
"<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()>","<android.content.pm.PackageManager: boolean isAutoRevokeWhitelisted()>"
"<android.view.OrientationEventListener: void onOrientationChanged(int)>","<android.view.OrientationEventListener: void onOrientationChanged(int)>"
"<android.view.Window: android.media.session.MediaController getMediaController()>","<android.view.Window: android.media.session.MediaController getMediaController()>"
"<android.graphics.text.MeasuredText: float getWidth(int,int)>","<android.graphics.text.MeasuredText: float getWidth(int,int)>"
"<java.nio.Buffer: java.nio.Buffer reset()>","<java.nio.Buffer: java.nio.Buffer reset()>"
"<android.content.pm.PackageManager: boolean isInstantApp()>","<android.content.pm.PackageManager: boolean isInstantApp()>"
"<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()>","<android.media.session.MediaController: android.media.session.MediaController$PlaybackInfo getPlaybackInfo()>"
"<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>","<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>"
"<java.lang.Math: long decrementExact(long)>","<java.lang.Math: long decrementExact(long)>"
"<android.media.MediaDrm: java.util.List getSecureStopIds()>","<android.media.MediaDrm: java.util.List getSecureStopIds()>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean removeIf(java.util.function.Predicate)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean removeIf(java.util.function.Predicate)>"
"<android.os.VibratorManager: void vibrate(android.os.CombinedVibration)>","<android.os.VibratorManager: void vibrate(android.os.CombinedVibration)>"
"<android.text.PrecomputedText$Params: java.lang.String toString()>","<android.text.PrecomputedText$Params: java.lang.String toString()>"
"<android.transition.Scene: void setExitAction(java.lang.Runnable)>","<android.transition.Scene: void setExitAction(java.lang.Runnable)>"
"<android.hardware.camera2.params.MeteringRectangle: int getY()>","<android.hardware.camera2.params.MeteringRectangle: int getY()>"
"<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>","<java.nio.ShortBuffer: java.nio.ShortBuffer put(int,short)>"
"<android.content.res.Resources$Theme: int getExplicitStyle(android.util.AttributeSet)>","<android.content.res.Resources$Theme: int getExplicitStyle(android.util.AttributeSet)>"
"<java.util.List: java.lang.Object set(int,java.lang.Object)>","<java.util.List: java.lang.Object set(int,java.lang.Object)>"
"<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message build()>","<android.view.textclassifier.ConversationActions$Message$Builder: android.view.textclassifier.ConversationActions$Message build()>"
"<android.media.AudioMetadata$Key: java.lang.String getName()>","<android.media.AudioMetadata$Key: java.lang.String getName()>"
"<android.media.AudioTrack$Builder: android.media.AudioTrack build()>","<android.media.AudioTrack$Builder: android.media.AudioTrack build()>"
"<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>","<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>"
"<android.view.View: void setMeasuredDimension(int,int)>","<android.view.View: void setMeasuredDimension(int,int)>"
"<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>","<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>"
"<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>","<android.graphics.Canvas: void drawRoundRect(float,float,float,float,float,float,android.graphics.Paint)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>","<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
"<java.time.format.TextStyle: java.time.format.TextStyle[] values()>","<java.time.format.TextStyle: java.time.format.TextStyle[] values()>"
"<android.view.View: android.view.WindowInsets getRootWindowInsets()>","<android.view.View: android.view.WindowInsets getRootWindowInsets()>"
"<android.telephony.PhoneStateListener: void <init>()>","<android.telephony.PhoneStateListener: void <init>()>"
"<java.util.stream.IntStream: java.util.OptionalInt max()>","<java.util.stream.IntStream: java.util.OptionalInt max()>"
"<android.media.AudioFormat: boolean equals(java.lang.Object)>","<android.media.AudioFormat: boolean equals(java.lang.Object)>"
"<android.view.Window: boolean isFloating()>","<android.view.Window: boolean isFloating()>"
"<android.media.MediaDescription: void <clinit>()>","<android.media.MediaDescription: void <clinit>()>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,double)>"
"<android.view.textclassifier.TextClassificationContext: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextClassificationContext: void writeToParcel(android.os.Parcel,int)>"
"<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>","<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>"
"<android.graphics.drawable.BitmapDrawable: boolean onStateChange(int[])>","<android.graphics.drawable.BitmapDrawable: boolean onStateChange(int[])>"
"<android.media.MediaMetadata: long getLong(java.lang.String)>","<android.media.MediaMetadata: long getLong(java.lang.String)>"
"<android.content.res.TypedArray: boolean getBoolean(int,boolean)>","<android.content.res.TypedArray: boolean getBoolean(int,boolean)>"
"<android.view.ViewGroup: void dispatchSetSelected(boolean)>","<android.view.ViewGroup: void dispatchSetSelected(boolean)>"
"<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>","<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>"
"<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()>","<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()>"
"<android.view.KeyEvent: int getUnicodeChar(int)>","<android.view.KeyEvent: int getUnicodeChar(int)>"
"<java.lang.reflect.Field: int getModifiers()>","<java.lang.reflect.Field: int getModifiers()>"
"<java.nio.ByteBuffer: java.lang.Object array()>","<java.nio.ByteBuffer: java.lang.Object array()>"
"<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.text.method.MovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>","<android.text.method.MovementMethod: boolean onKeyOther(android.widget.TextView,android.text.Spannable,android.view.KeyEvent)>"
"<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>","<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>"
"<android.view.Window: void setTitle(java.lang.CharSequence)>","<android.view.Window: void setTitle(java.lang.CharSequence)>"
"<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>","<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>"
"<java.time.zone.ZoneOffsetTransition: int compareTo(java.time.zone.ZoneOffsetTransition)>","<java.time.zone.ZoneOffsetTransition: int compareTo(java.time.zone.ZoneOffsetTransition)>"
"<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>","<android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>"
"<android.app.Activity: int getRequestedOrientation()>","<android.app.Activity: int getRequestedOrientation()>"
"<android.view.SurfaceHolder: void setSizeFromLayout()>","<android.view.SurfaceHolder: void setSizeFromLayout()>"
"<java.nio.CharBuffer: java.lang.String toString()>","<java.nio.CharBuffer: java.lang.String toString()>"
"<android.app.Activity: boolean isImmersive()>","<android.app.Activity: boolean isImmersive()>"
"<android.widget.RemoteViews$RemoteCollectionItems: android.widget.RemoteViews getItemView(int)>","<android.widget.RemoteViews$RemoteCollectionItems: android.widget.RemoteViews getItemView(int)>"
"<android.view.InputDevice$MotionRange: void <init>()>","<android.view.InputDevice$MotionRange: void <init>()>"
"<java.time.Period: java.time.Period negated()>","<java.time.Period: java.time.Period negated()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)>","<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)>"
"<java.lang.String: java.lang.String intern()>","<java.lang.String: java.lang.String intern()>"
"<android.hardware.SensorDirectChannel: void <init>()>","<android.hardware.SensorDirectChannel: void <init>()>"
"<android.view.MotionEvent: float getToolMinor(int)>","<android.view.MotionEvent: float getToolMinor(int)>"
"<android.app.VoiceInteractor$PickOptionRequest: void <init>(android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>","<android.app.VoiceInteractor$PickOptionRequest: void <init>(android.app.VoiceInteractor$Prompt,android.app.VoiceInteractor$PickOptionRequest$Option[],android.os.Bundle)>"
"<android.telephony.data.ApnSetting: java.lang.String getUser()>","<android.telephony.data.ApnSetting: java.lang.String getUser()>"
"<java.io.OutputStream: void flush()>","<java.io.OutputStream: void flush()>"
"<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>","<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>"
"<java.net.SocketImpl: void listen(int)>","<java.net.SocketImpl: void listen(int)>"
"<java.time.LocalDate: java.time.LocalDate 'from'(java.time.temporal.TemporalAccessor)>","<java.time.LocalDate: java.time.LocalDate 'from'(java.time.temporal.TemporalAccessor)>"
"<java.time.LocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.LocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<android.content.Context: int[] checkCallingUriPermissions(java.util.List,int)>","<android.content.Context: int[] checkCallingUriPermissions(java.util.List,int)>"
"<android.view.animation.LayoutAnimationController: float getDelay()>","<android.view.animation.LayoutAnimationController: float getDelay()>"
"<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)>","<android.telephony.TelephonyManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)>"
"<android.media.AudioFocusRequest: boolean acceptsDelayedFocusGain()>","<android.media.AudioFocusRequest: boolean acceptsDelayedFocusGain()>"
"<android.widget.AbsListView: void jumpDrawablesToCurrentState()>","<android.widget.AbsListView: void jumpDrawablesToCurrentState()>"
"<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>","<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>"
"<android.transition.TransitionPropagation: void <init>()>","<android.transition.TransitionPropagation: void <init>()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)>"
"<android.app.Activity: android.window.SplashScreen getSplashScreen()>","<android.app.Activity: android.window.SplashScreen getSplashScreen()>"
"<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>","<android.hardware.camera2.CaptureRequest: java.lang.Object getTag()>"
"<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>","<android.text.Layout: void getCursorPath(int,android.graphics.Path,java.lang.CharSequence)>"
"<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(android.media.session.PlaybackState$CustomAction)>","<android.media.session.PlaybackState$Builder: android.media.session.PlaybackState$Builder addCustomAction(android.media.session.PlaybackState$CustomAction)>"
"<android.view.MotionEvent: int getAction()>","<android.view.MotionEvent: int getAction()>"
"<android.view.textclassifier.TextLinks: void writeToParcel(android.os.Parcel,int)>","<android.view.textclassifier.TextLinks: void writeToParcel(android.os.Parcel,int)>"
"<java.time.temporal.ValueRange: java.lang.String toString()>","<java.time.temporal.ValueRange: java.lang.String toString()>"
"<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>","<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionActive()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionActive()>"
"<android.view.KeyEvent: boolean hasNoModifiers()>","<android.view.KeyEvent: boolean hasNoModifiers()>"
"<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>","<java.nio.CharBuffer: java.nio.CharBuffer duplicate()>"
"<java.lang.Long: boolean equals(java.lang.Object)>","<java.lang.Long: boolean equals(java.lang.Object)>"
"<java.time.Duration: boolean isZero()>","<java.time.Duration: boolean isZero()>"
"<android.view.textclassifier.TextLinks$Request: void <init>()>","<android.view.textclassifier.TextLinks$Request: void <init>()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.content.ContentValues: int describeContents()>","<android.content.ContentValues: int describeContents()>"
"<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>","<android.view.accessibility.AccessibilityWindowInfo: int getLayer()>"
"<android.text.PrecomputedText$Params: int getHyphenationFrequency()>","<android.text.PrecomputedText$Params: int getHyphenationFrequency()>"
"<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>","<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>"
"<android.media.Spatializer$OnHeadTrackerAvailableListener: void onHeadTrackerAvailableChanged(android.media.Spatializer,boolean)>","<android.media.Spatializer$OnHeadTrackerAvailableListener: void onHeadTrackerAvailableChanged(android.media.Spatializer,boolean)>"
"<java.time.Duration: java.time.Duration truncatedTo(java.time.temporal.TemporalUnit)>","<java.time.Duration: java.time.Duration truncatedTo(java.time.temporal.TemporalUnit)>"
"<android.graphics.Path$Op: android.graphics.Path$Op valueOf(java.lang.String)>","<android.graphics.Path$Op: android.graphics.Path$Op valueOf(java.lang.String)>"
"<java.security.cert.CertificateException: void <init>(java.lang.String)>","<java.security.cert.CertificateException: void <init>(java.lang.String)>"
"<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>","<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()>"
"<android.content.ContentProvider: boolean onCreate()>","<android.content.ContentProvider: boolean onCreate()>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onActive(android.hardware.camera2.CameraCaptureSession)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onActive(android.hardware.camera2.CameraCaptureSession)>"
"<android.app.ActionBar: void setHideOffset(int)>","<android.app.ActionBar: void setHideOffset(int)>"
"<java.io.PrintStream: void println(java.lang.String)>","<java.io.PrintStream: void println(java.lang.String)>"
"<android.graphics.SurfaceTexture: void release()>","<android.graphics.SurfaceTexture: void release()>"
"<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>","<java.lang.StringBuilder: java.lang.Appendable append(java.lang.CharSequence,int,int)>"
"<android.os.Debug: void startMethodTracing(java.lang.String,int)>","<android.os.Debug: void startMethodTracing(java.lang.String,int)>"
"<java.time.LocalTime: java.time.LocalDateTime atDate(java.time.LocalDate)>","<java.time.LocalTime: java.time.LocalDateTime atDate(java.time.LocalDate)>"
"<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems build()>","<android.widget.RemoteViews$RemoteCollectionItems$Builder: android.widget.RemoteViews$RemoteCollectionItems build()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,java.lang.String)>"
"<android.view.InputDevice: void <clinit>()>","<android.view.InputDevice: void <clinit>()>"
"<android.widget.TextView: int getTotalPaddingStart()>","<android.widget.TextView: int getTotalPaddingStart()>"
"<java.util.Collections: java.util.NavigableMap emptyNavigableMap()>","<java.util.Collections: java.util.NavigableMap emptyNavigableMap()>"
"<android.widget.TextView: void setMinEms(int)>","<android.widget.TextView: void setMinEms(int)>"
"<android.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)>","<android.app.LoaderManager$LoaderCallbacks: void onLoadFinished(android.content.Loader,java.lang.Object)>"
"<android.graphics.Path$Direction: void <clinit>()>","<android.graphics.Path$Direction: void <clinit>()>"
"<android.media.MediaDescription: java.lang.CharSequence getTitle()>","<android.media.MediaDescription: java.lang.CharSequence getTitle()>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting build()>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting build()>"
"<android.content.pm.PackageManager$ResolveInfoFlags: android.content.pm.PackageManager$ResolveInfoFlags of(long)>","<android.content.pm.PackageManager$ResolveInfoFlags: android.content.pm.PackageManager$ResolveInfoFlags of(long)>"
"<java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>","<java.util.IntSummaryStatistics: void combine(java.util.IntSummaryStatistics)>"
"<java.lang.StringBuffer: java.lang.StringBuffer append(double)>","<java.lang.StringBuffer: java.lang.StringBuffer append(double)>"
"<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>","<android.hardware.SensorManager: void registerDynamicSensorCallback(android.hardware.SensorManager$DynamicSensorCallback,android.os.Handler)>"
"<android.view.MenuItem: boolean collapseActionView()>","<android.view.MenuItem: boolean collapseActionView()>"
"<java.security.Provider: void putAll(java.util.Map)>","<java.security.Provider: void putAll(java.util.Map)>"
"<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>","<android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>"
"<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>","<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>"
"<android.net.ConnectivityManager$OnNetworkActiveListener: void onNetworkActive()>","<android.net.ConnectivityManager$OnNetworkActiveListener: void onNetworkActive()>"
"<android.view.KeyEvent: int getDeviceId()>","<android.view.KeyEvent: int getDeviceId()>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage(android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage(android.icu.util.ULocale)>"
"<android.icu.util.ULocale: java.lang.Object clone()>","<android.icu.util.ULocale: java.lang.Object clone()>"
"<android.content.SyncRequest$Builder: void <init>()>","<android.content.SyncRequest$Builder: void <init>()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>","<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>"
"<android.hardware.camera2.CaptureRequest$Key: java.lang.String toString()>","<android.hardware.camera2.CaptureRequest$Key: java.lang.String toString()>"
"<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>","<android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>"
"<android.content.Context: void setTheme(int)>","<android.content.Context: void setTheme(int)>"
"<android.view.Window$Callback: void onAttachedToWindow()>","<android.view.Window$Callback: void onAttachedToWindow()>"
"<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>","<android.widget.RemoteViews: void setTextViewTextSize(int,int,float)>"
"<java.lang.NullPointerException: void <init>(java.lang.String)>","<java.lang.NullPointerException: void <init>(java.lang.String)>"
"<java.lang.Character: int compare(char,char)>","<java.lang.Character: int compare(char,char)>"
"<android.telephony.RadioAccessSpecifier: int describeContents()>","<android.telephony.RadioAccessSpecifier: int describeContents()>"
"<android.database.CharArrayBuffer: void <init>(int)>","<android.database.CharArrayBuffer: void <init>(int)>"
"<java.lang.Class: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>","<java.lang.Class: java.lang.'annotation'.Annotation getDeclaredAnnotation(java.lang.Class)>"
"<android.view.InputDevice: android.os.Vibrator getVibrator()>","<android.view.InputDevice: android.os.Vibrator getVibrator()>"
"<java.lang.Byte: int compareTo(java.lang.Byte)>","<java.lang.Byte: int compareTo(java.lang.Byte)>"
"<java.lang.System: java.io.Console console()>","<java.lang.System: java.io.Console console()>"
"<android.app.ActivityManager$AppTask: void <init>()>","<android.app.ActivityManager$AppTask: void <init>()>"
"<android.view.KeyEvent: void <init>(android.view.KeyEvent)>","<android.view.KeyEvent: void <init>(android.view.KeyEvent)>"
"<android.net.NetworkInfo: int getSubtype()>","<android.net.NetworkInfo: int getSubtype()>"
"<java.nio.Buffer: int limit()>","<java.nio.Buffer: int limit()>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>"
"<android.app.Activity: android.app.FragmentManager getFragmentManager()>","<android.app.Activity: android.app.FragmentManager getFragmentManager()>"
"<android.content.Intent: void removeExtra(java.lang.String)>","<android.content.Intent: void removeExtra(java.lang.String)>"
"<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>","<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>"
"<android.util.Size: java.lang.String toString()>","<android.util.Size: java.lang.String toString()>"
"<android.view.accessibility.AccessibilityEvent: void <init>(int)>","<android.view.accessibility.AccessibilityEvent: void <init>(int)>"
"<android.view.View: void addTouchables(java.util.ArrayList)>","<android.view.View: void addTouchables(java.util.ArrayList)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder clearTextLinks()>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder clearTextLinks()>"
"<android.view.MotionEvent: float getSize(int)>","<android.view.MotionEvent: float getSize(int)>"
"<android.os.Parcel: float[] createFloatArray()>","<android.os.Parcel: float[] createFloatArray()>"
"<java.security.Provider: void putService(java.security.Provider$Service)>","<java.security.Provider: void putService(java.security.Provider$Service)>"
"<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>","<android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)>"
"<java.nio.CharBuffer: java.nio.Buffer limit(int)>","<java.nio.CharBuffer: java.nio.Buffer limit(int)>"
"<android.util.ArrayMap: void putAll(android.util.ArrayMap)>","<android.util.ArrayMap: void putAll(android.util.ArrayMap)>"
"<android.view.WindowInsetsAnimationController: android.graphics.Insets getCurrentInsets()>","<android.view.WindowInsetsAnimationController: android.graphics.Insets getCurrentInsets()>"
"<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()>","<android.view.textclassifier.TextClassifierEvent: java.lang.String getResultId()>"
"<android.content.pm.PackageManager$Property: int getInteger()>","<android.content.pm.PackageManager$Property: int getInteger()>"
"<android.os.Build: void <clinit>()>","<android.os.Build: void <clinit>()>"
"<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>","<android.media.AudioManager: void registerAudioPlaybackCallback(android.media.AudioManager$AudioPlaybackCallback,android.os.Handler)>"
"<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>","<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>"
"<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>","<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeIconResId(int)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeIconResId(int)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(android.view.View)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(android.view.View)>"
"<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.Toolbar: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.os.PatternMatcher: java.lang.String toString()>","<android.os.PatternMatcher: java.lang.String toString()>"
"<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()>","<android.media.session.MediaController$PlaybackInfo: android.media.AudioAttributes getAudioAttributes()>"
"<android.media.RemoteController$OnClientUpdateListener: void onClientTransportControlUpdate(int)>","<android.media.RemoteController$OnClientUpdateListener: void onClientTransportControlUpdate(int)>"
"<java.nio.CharBuffer: java.nio.CharBuffer slice()>","<java.nio.CharBuffer: java.nio.CharBuffer slice()>"
"<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>","<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>"
"<android.net.RouteInfo: int getType()>","<android.net.RouteInfo: int getType()>"
"<android.media.AudioTrack: int setPositionNotificationPeriod(int)>","<android.media.AudioTrack: int setPositionNotificationPeriod(int)>"
"<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>","<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>"
"<java.lang.Math: long floorDiv(long,long)>","<java.lang.Math: long floorDiv(long,long)>"
"<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)>"
"<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>","<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>"
"<android.graphics.RenderNode: boolean setClipToOutline(boolean)>","<android.graphics.RenderNode: boolean setClipToOutline(boolean)>"
"<android.net.Network: int describeContents()>","<android.net.Network: int describeContents()>"
"<java.lang.Math: int floorMod(long,int)>","<java.lang.Math: int floorMod(long,int)>"
"<java.time.chrono.Chronology: java.lang.String toString()>","<java.time.chrono.Chronology: java.lang.String toString()>"
"<android.view.animation.Transformation: void clear()>","<android.view.animation.Transformation: void clear()>"
"<android.os.Bundle: void <init>(android.os.PersistableBundle)>","<android.os.Bundle: void <init>(android.os.PersistableBundle)>"
"<android.app.FragmentManager: void unregisterFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks)>","<android.app.FragmentManager: void unregisterFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks)>"
"<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>","<android.view.inputmethod.InputConnection: int getCursorCapsMode(int)>"
"<android.hardware.display.VirtualDisplay$Callback: void onStopped()>","<android.hardware.display.VirtualDisplay$Callback: void onStopped()>"
"<java.net.NetworkInterface: boolean supportsMulticast()>","<java.net.NetworkInterface: boolean supportsMulticast()>"
"<android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText$Params)>","<android.text.PrecomputedText: android.text.PrecomputedText create(java.lang.CharSequence,android.text.PrecomputedText$Params)>"
"<android.graphics.RecordingCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>"
"<android.app.FragmentManager: void registerFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks,boolean)>","<android.app.FragmentManager: void registerFragmentLifecycleCallbacks(android.app.FragmentManager$FragmentLifecycleCallbacks,boolean)>"
"<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>","<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>"
"<android.media.MediaDrm: android.media.MediaDrm$CryptoSession getCryptoSession(byte[],java.lang.String,java.lang.String)>","<android.media.MediaDrm: android.media.MediaDrm$CryptoSession getCryptoSession(byte[],java.lang.String,java.lang.String)>"
"<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>","<android.app.FragmentTransaction: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object)>"
"<java.io.OutputStream: void write(byte[],int,int)>","<java.io.OutputStream: void write(byte[],int,int)>"
"<android.widget.Toolbar: void setLogoDescription(int)>","<android.widget.Toolbar: void setLogoDescription(int)>"
"<android.widget.TextView: int getGravity()>","<android.widget.TextView: int getGravity()>"
"<java.time.LocalDateTime: void <init>()>","<java.time.LocalDateTime: void <init>()>"
"<java.util.ArrayList: void <init>(java.util.Collection)>","<java.util.ArrayList: void <init>(java.util.Collection)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayLength(java.lang.Class)>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle arrayLength(java.lang.Class)>"
"<java.net.URI: java.net.URI resolve(java.net.URI)>","<java.net.URI: java.net.URI resolve(java.net.URI)>"
"<java.text.FieldPosition: int hashCode()>","<java.text.FieldPosition: int hashCode()>"
"<android.view.MenuItem: boolean isVisible()>","<android.view.MenuItem: boolean isVisible()>"
"<android.text.Layout: float getSecondaryHorizontal(int)>","<android.text.Layout: float getSecondaryHorizontal(int)>"
"<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>","<android.content.ContentResolver: java.util.List getPersistedUriPermissions()>"
"<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>","<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>"
"<android.util.SparseBooleanArray: void <init>(int)>","<android.util.SparseBooleanArray: void <init>(int)>"
"<java.io.OutputStream: void write(int)>","<java.io.OutputStream: void write(int)>"
"<android.hardware.camera2.CameraCaptureSession: void <init>()>","<android.hardware.camera2.CameraCaptureSession: void <init>()>"
"<android.app.Activity: boolean onSearchRequested(android.view.SearchEvent)>","<android.app.Activity: boolean onSearchRequested(android.view.SearchEvent)>"
"<java.time.Duration: java.time.Duration dividedBy(long)>","<java.time.Duration: java.time.Duration dividedBy(long)>"
"<java.nio.ShortBuffer: java.nio.Buffer mark()>","<java.nio.ShortBuffer: java.nio.Buffer mark()>"
"<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>","<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>"
"<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setHints(java.util.List)>","<android.view.textclassifier.ConversationActions$Request$Builder: android.view.textclassifier.ConversationActions$Request$Builder setHints(java.util.List)>"
"<java.lang.StringBuffer: java.lang.String substring(int)>","<java.lang.StringBuffer: java.lang.String substring(int)>"
"<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>","<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>"
"<android.icu.util.ULocale: android.icu.util.ULocale getFallback()>","<android.icu.util.ULocale: android.icu.util.ULocale getFallback()>"
"<android.content.pm.SigningInfo: void <clinit>()>","<android.content.pm.SigningInfo: void <clinit>()>"
"<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>","<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>"
"<android.view.accessibility.AccessibilityRecord: int getDisplayId()>","<android.view.accessibility.AccessibilityRecord: int getDisplayId()>"
"<android.content.pm.PackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>","<android.content.pm.PackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>"
"<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[],int,int)>","<java.util.Arrays: java.util.Spliterator$OfInt spliterator(int[],int,int)>"
"<android.content.res.TypedArray: java.lang.String getPositionDescription()>","<android.content.res.TypedArray: java.lang.String getPositionDescription()>"
"<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>","<android.content.Loader: void unregisterOnLoadCanceledListener(android.content.Loader$OnLoadCanceledListener)>"
"<java.lang.reflect.Modifier: int interfaceModifiers()>","<java.lang.reflect.Modifier: int interfaceModifiers()>"
"<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>","<android.media.ImageReader: android.media.ImageReader newInstance(int,int,int,int,long)>"
"<java.util.Locale: java.lang.String getDisplayVariant()>","<java.util.Locale: java.lang.String getDisplayVariant()>"
"<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>","<android.content.Context: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>"
"<java.lang.Throwable: java.lang.String getMessage()>","<java.lang.Throwable: java.lang.String getMessage()>"
"<java.util.Arrays: int hashCode(long[])>","<java.util.Arrays: int hashCode(long[])>"
"<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)>","<android.hardware.SensorManager: android.hardware.SensorDirectChannel createDirectChannel(android.hardware.HardwareBuffer)>"
"<android.content.pm.ChangedPackages: java.util.List getPackageNames()>","<android.content.pm.ChangedPackages: java.util.List getPackageNames()>"
"<android.net.NetworkCapabilities: int hashCode()>","<android.net.NetworkCapabilities: int hashCode()>"
"<android.os.Parcel: java.util.ArrayList createInterfaceArrayList(java.util.function.Function)>","<android.os.Parcel: java.util.ArrayList createInterfaceArrayList(java.util.function.Function)>"
"<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setPassword(java.lang.String)>","<android.telephony.data.ApnSetting$Builder: android.telephony.data.ApnSetting$Builder setPassword(java.lang.String)>"
"<android.graphics.drawable.LayerDrawable: void setHotspotBounds(int,int,int,int)>","<android.graphics.drawable.LayerDrawable: void setHotspotBounds(int,int,int,int)>"
"<java.lang.invoke.VarHandle: java.lang.Object getAndSetRelease(java.lang.Object[])>","<java.lang.invoke.VarHandle: java.lang.Object getAndSetRelease(java.lang.Object[])>"
"<java.time.LocalDate: java.time.Month getMonth()>","<java.time.LocalDate: java.time.Month getMonth()>"
"<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>","<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>"
"<java.util.UUID: int compareTo(java.util.UUID)>","<java.util.UUID: int compareTo(java.util.UUID)>"
"<java.time.Clock: java.time.Clock fixed(java.time.Instant,java.time.ZoneId)>","<java.time.Clock: java.time.Clock fixed(java.time.Instant,java.time.ZoneId)>"
"<android.view.Window: android.view.View requireViewById(int)>","<android.view.Window: android.view.View requireViewById(int)>"
"<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setFocusGain(int)>","<android.media.AudioFocusRequest$Builder: android.media.AudioFocusRequest$Builder setFocusGain(int)>"
"<android.media.session.MediaController$Callback: void <init>()>","<android.media.session.MediaController$Callback: void <init>()>"
"<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>","<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>"
"<java.lang.String: java.lang.String valueOf(boolean)>","<java.lang.String: java.lang.String valueOf(boolean)>"
"<android.hardware.camera2.CameraManager: int getTorchStrengthLevel(java.lang.String)>","<android.hardware.camera2.CameraManager: int getTorchStrengthLevel(java.lang.String)>"
"<java.lang.Class: java.lang.String toString()>","<java.lang.Class: java.lang.String toString()>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>","<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>"
"<android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>"
"<java.io.File: void <init>(java.lang.String)>","<java.io.File: void <init>(java.lang.String)>"
"<android.view.View: void setPointerIcon(android.view.PointerIcon)>","<android.view.View: void setPointerIcon(android.view.PointerIcon)>"
"<android.view.InputDevice$MotionRange: float getResolution()>","<android.view.InputDevice$MotionRange: float getResolution()>"
"<android.media.AudioRecord: void stop()>","<android.media.AudioRecord: void stop()>"
"<android.content.Context: void startActivities(android.content.Intent[])>","<android.content.Context: void startActivities(android.content.Intent[])>"
"<android.util.Range: android.util.Range extend(java.lang.Comparable,java.lang.Comparable)>","<android.util.Range: android.util.Range extend(java.lang.Comparable,java.lang.Comparable)>"
"<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>","<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>"
"<java.lang.Float: int compareTo(java.lang.Float)>","<java.lang.Float: int compareTo(java.lang.Float)>"
"<java.nio.CharBuffer: java.nio.CharBuffer put(int,char)>","<java.nio.CharBuffer: java.nio.CharBuffer put(int,char)>"
"<java.lang.String: java.lang.CharSequence subSequence(int,int)>","<java.lang.String: java.lang.CharSequence subSequence(int,int)>"
"<android.media.ImageReader: int getWidth()>","<android.media.ImageReader: int getWidth()>"
"<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>","<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>"
"<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean,boolean)>","<android.view.accessibility.AccessibilityNodeInfo$CollectionItemInfo: void <init>(int,int,int,int,boolean,boolean)>"
"<java.security.Provider: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>","<java.security.Provider: java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction)>"
"<java.lang.Character: boolean isDigit(int)>","<java.lang.Character: boolean isDigit(int)>"
"<android.media.MediaDescription: java.lang.CharSequence getDescription()>","<android.media.MediaDescription: java.lang.CharSequence getDescription()>"
"<java.lang.Class: java.lang.ClassLoader getClassLoader()>","<java.lang.Class: java.lang.ClassLoader getClassLoader()>"
"<android.content.pm.PackageInstaller$SessionParams: void setReferrerUri(android.net.Uri)>","<android.content.pm.PackageInstaller$SessionParams: void setReferrerUri(android.net.Uri)>"
"<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>","<android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)>"
"<java.lang.Number: byte byteValue()>","<java.lang.Number: byte byteValue()>"
"<android.content.Intent: void <clinit>()>","<android.content.Intent: void <clinit>()>"
"<android.view.Window: void setType(int)>","<android.view.Window: void setType(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withHour(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withHour(int)>"
"<java.text.Format: java.lang.String format(java.lang.Object)>","<java.text.Format: java.lang.String format(java.lang.Object)>"
"<java.util.stream.Stream: java.util.Optional findAny()>","<java.util.stream.Stream: java.util.Optional findAny()>"
"<android.widget.TextView: void setTextLocale(java.util.Locale)>","<android.widget.TextView: void setTextLocale(java.util.Locale)>"
"<android.widget.Toolbar: java.lang.CharSequence getTitle()>","<android.widget.Toolbar: java.lang.CharSequence getTitle()>"
"<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
"<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>","<android.view.ViewTreeObserver: void removeOnWindowFocusChangeListener(android.view.ViewTreeObserver$OnWindowFocusChangeListener)>"
"<java.util.OptionalInt: void <init>()>","<java.util.OptionalInt: void <init>()>"
"<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>","<android.graphics.Path: void arcTo(float,float,float,float,float,float,boolean)>"
"<android.view.accessibility.AccessibilityWindowInfo: int getId()>","<android.view.accessibility.AccessibilityWindowInfo: int getId()>"
"<android.view.textclassifier.TextClassifierEvent: int describeContents()>","<android.view.textclassifier.TextClassifierEvent: int describeContents()>"
"<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>","<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>"
"<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>","<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>"
"<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()>","<android.view.textclassifier.TextClassifier: int getMaxGenerateLinksTextLength()>"
"<android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)>","<android.view.MenuItem: android.view.MenuItem setContentDescription(java.lang.CharSequence)>"
"<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>","<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.Enum: java.lang.Class getDeclaringClass()>","<java.lang.Enum: java.lang.Class getDeclaringClass()>"
"<java.io.File: boolean setReadable(boolean,boolean)>","<java.io.File: boolean setReadable(boolean,boolean)>"
"<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>","<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>"
"<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>","<android.text.method.MovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>"
"<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>","<android.widget.AbsListView: void onRestoreInstanceState(android.os.Parcelable)>"
"<android.view.ViewGroup: boolean onNestedFling(android.view.View,float,float,boolean)>","<android.view.ViewGroup: boolean onNestedFling(android.view.View,float,float,boolean)>"
"<android.graphics.RenderNode: int getTop()>","<android.graphics.RenderNode: int getTop()>"
"<android.graphics.NinePatch: java.lang.String getName()>","<android.graphics.NinePatch: java.lang.String getName()>"
"<java.time.chrono.ChronoLocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>","<java.time.chrono.ChronoLocalDateTime: int compareTo(java.time.chrono.ChronoLocalDateTime)>"
"<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>","<java.lang.ThreadGroup: int enumerate(java.lang.Thread[])>"
"<java.io.FileNotFoundException: void <init>(java.lang.String)>","<java.io.FileNotFoundException: void <init>(java.lang.String)>"
"<android.view.textclassifier.TextLinks$TextLink: java.lang.String getEntity(int)>","<android.view.textclassifier.TextLinks$TextLink: java.lang.String getEntity(int)>"
"<android.view.View: void destroyDrawingCache()>","<android.view.View: void destroyDrawingCache()>"
"<android.app.Activity: void finishAndRemoveTask()>","<android.app.Activity: void finishAndRemoveTask()>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setNavigationBarColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setNavigationBarColor(int)>"
"<android.view.KeyCharacterMap: boolean deviceHasKey(int)>","<android.view.KeyCharacterMap: boolean deviceHasKey(int)>"
"<android.widget.AbsListView: void setItemChecked(int,boolean)>","<android.widget.AbsListView: void setItemChecked(int,boolean)>"
"<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])>","<org.xmlpull.v1.XmlPullParser: char[] getTextCharacters(int[])>"
"<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>","<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>"
"<android.hardware.camera2.CaptureRequest: int hashCode()>","<android.hardware.camera2.CaptureRequest: int hashCode()>"
"<android.graphics.fonts.FontStyle: int getWeight()>","<android.graphics.fonts.FontStyle: int getWeight()>"
"<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>","<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>"
"<android.app.PictureInPictureUiState: int hashCode()>","<android.app.PictureInPictureUiState: int hashCode()>"
"<java.time.temporal.ChronoField: java.lang.String toString()>","<java.time.temporal.ChronoField: java.lang.String toString()>"
"<java.io.FileOutputStream: void write(byte[])>","<java.io.FileOutputStream: void write(byte[])>"
"<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setExtension(char,java.lang.String)>","<android.icu.util.ULocale$Builder: android.icu.util.ULocale$Builder setExtension(char,java.lang.String)>"
"<android.hardware.lights.Light: int getType()>","<android.hardware.lights.Light: int getType()>"
"<android.graphics.Canvas: android.graphics.Rect getClipBounds()>","<android.graphics.Canvas: android.graphics.Rect getClipBounds()>"
"<java.lang.Character: int hashCode()>","<java.lang.Character: int hashCode()>"
"<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>","<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>"
"<java.util.Set: java.lang.Object[] toArray()>","<java.util.Set: java.lang.Object[] toArray()>"
"<java.lang.AssertionError: void <init>(java.lang.Object)>","<java.lang.AssertionError: void <init>(java.lang.Object)>"
"<java.security.CodeSigner: java.security.Timestamp getTimestamp()>","<java.security.CodeSigner: java.security.Timestamp getTimestamp()>"
"<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
"<android.media.Session2Token: int describeContents()>","<android.media.Session2Token: int describeContents()>"
"<android.media.MediaSyncEvent: void <init>()>","<android.media.MediaSyncEvent: void <init>()>"
"<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>","<android.media.session.MediaSessionManager$RemoteUserInfo: java.lang.String getPackageName()>"
"<android.app.Fragment: boolean isVisible()>","<android.app.Fragment: boolean isVisible()>"
"<android.view.View: boolean getRevealOnFocusHint()>","<android.view.View: boolean getRevealOnFocusHint()>"
"<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>","<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>"
"<java.security.cert.CertPath: byte[] getEncoded()>","<java.security.cert.CertPath: byte[] getEncoded()>"
"<android.widget.TextView: boolean isInputMethodTarget()>","<android.widget.TextView: boolean isInputMethodTarget()>"
"<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>","<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>"
"<android.util.SparseBooleanArray: int keyAt(int)>","<android.util.SparseBooleanArray: int keyAt(int)>"
"<android.graphics.Paint$Align: android.graphics.Paint$Align[] values()>","<android.graphics.Paint$Align: android.graphics.Paint$Align[] values()>"
"<android.app.ActionBar: void <init>()>","<android.app.ActionBar: void <init>()>"
"<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>","<android.view.accessibility.AccessibilityNodeInfo: boolean isHeading()>"
"<android.widget.AdapterView: java.lang.CharSequence getAccessibilityClassName()>","<android.widget.AdapterView: java.lang.CharSequence getAccessibilityClassName()>"
"<android.media.AudioTimestamp: void <init>()>","<android.media.AudioTimestamp: void <init>()>"
"<java.lang.Short: void <init>(short)>","<java.lang.Short: void <init>(short)>"
"<java.nio.file.WatchEvent$Kind: java.lang.String name()>","<java.nio.file.WatchEvent$Kind: java.lang.String name()>"
"<android.content.pm.PackageManager: java.util.List getInstalledModules(int)>","<android.content.pm.PackageManager: java.util.List getInstalledModules(int)>"
"<android.view.Display: java.lang.String toString()>","<android.view.Display: java.lang.String toString()>"
"<android.graphics.Color: android.graphics.Color valueOf(int)>","<android.graphics.Color: android.graphics.Color valueOf(int)>"
"<android.app.ActionBar$Tab: void <init>()>","<android.app.ActionBar$Tab: void <init>()>"
"<java.lang.System: void <clinit>()>","<java.lang.System: void <clinit>()>"
"<android.view.ContentInfo: int describeContents()>","<android.view.ContentInfo: int describeContents()>"
"<android.view.View: void onFinishInflate()>","<android.view.View: void onFinishInflate()>"
"<java.lang.Short: int hashCode(short)>","<java.lang.Short: int hashCode(short)>"
"<android.view.WindowManager$BadTokenException: void <init>()>","<android.view.WindowManager$BadTokenException: void <init>()>"
"<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>","<android.hardware.camera2.params.SessionConfiguration: int getSessionType()>"
"<android.widget.ListView: int getHeaderViewsCount()>","<android.widget.ListView: int getHeaderViewsCount()>"
"<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>","<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setIncludeOtherUidNetworks(boolean)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder setIncludeOtherUidNetworks(boolean)>"
"<android.content.res.Resources: int getDimensionPixelOffset(int)>","<android.content.res.Resources: int getDimensionPixelOffset(int)>"
"<java.util.Random: double nextGaussian()>","<java.util.Random: double nextGaussian()>"
"<android.app.FragmentManager$BackStackEntry: int getBreadCrumbShortTitleRes()>","<android.app.FragmentManager$BackStackEntry: int getBreadCrumbShortTitleRes()>"
"<android.widget.RemoteViews$RemoteCollectionItems: int describeContents()>","<android.widget.RemoteViews$RemoteCollectionItems: int describeContents()>"
"<java.nio.LongBuffer: java.nio.Buffer limit(int)>","<java.nio.LongBuffer: java.nio.Buffer limit(int)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setFontVariationSettings(android.graphics.fonts.FontVariationAxis[])>"
"<android.content.IntentFilter: void addDataScheme(java.lang.String)>","<android.content.IntentFilter: void addDataScheme(java.lang.String)>"
"<android.view.KeyEvent: boolean isNumLockOn()>","<android.view.KeyEvent: boolean isNumLockOn()>"
"<android.view.View: int combineMeasuredStates(int,int)>","<android.view.View: int combineMeasuredStates(int,int)>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setIsContentSpatialized(boolean)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setIsContentSpatialized(boolean)>"
"<java.lang.Character: boolean isMirrored(int)>","<java.lang.Character: boolean isMirrored(int)>"
"<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>","<android.hardware.Camera$Parameters: java.lang.String getFlashMode()>"
"<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>","<java.net.DatagramPacket: void <init>(byte[],int,java.net.SocketAddress)>"
"<java.util.Arrays: void parallelSort(java.lang.Comparable[],int,int)>","<java.util.Arrays: void parallelSort(java.lang.Comparable[],int,int)>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int,boolean)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,int,boolean)>"
"<android.content.res.AssetManager$AssetInputStream: long skip(long)>","<android.content.res.AssetManager$AssetInputStream: long skip(long)>"
"<android.app.Activity: void setTitleColor(int)>","<android.app.Activity: void setTitleColor(int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfMonth(int)>","<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfMonth(int)>"
"<java.util.stream.IntStream$Builder: void accept(int)>","<java.util.stream.IntStream$Builder: void accept(int)>"
"<android.app.Activity: void onPostCreate(android.os.Bundle,android.os.PersistableBundle)>","<android.app.Activity: void onPostCreate(android.os.Bundle,android.os.PersistableBundle)>"
"<android.media.MediaDrm: int getMaxSessionCount()>","<android.media.MediaDrm: int getMaxSessionCount()>"
"<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>","<android.media.session.MediaSessionManager: void addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager$OnActiveSessionsChangedListener,android.content.ComponentName,android.os.Handler)>"
"<java.lang.Integer: short shortValue()>","<java.lang.Integer: short shortValue()>"
"<android.graphics.ColorSpace: void <clinit>()>","<android.graphics.ColorSpace: void <clinit>()>"
"<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>","<java.security.CodeSigner: void <init>(java.security.cert.CertPath,java.security.Timestamp)>"
"<android.media.session.MediaController$TransportControls: void skipToNext()>","<android.media.session.MediaController$TransportControls: void skipToNext()>"
"<android.app.Dialog: void onAttachedToWindow()>","<android.app.Dialog: void onAttachedToWindow()>"
"<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence)>","<java.io.PrintWriter: java.lang.Appendable append(java.lang.CharSequence)>"
"<android.view.View: float getCameraDistance()>","<android.view.View: float getCameraDistance()>"
"<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>","<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>"
"<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>","<java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>"
"<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>","<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>"
"<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int,long,long,float)>","<android.media.RemoteController$OnClientUpdateListener: void onClientPlaybackStateUpdate(int,long,long,float)>"
"<android.view.View: void setNextClusterForwardId(int)>","<android.view.View: void setNextClusterForwardId(int)>"
"<android.net.NetworkInfo$State: android.net.NetworkInfo$State valueOf(java.lang.String)>","<android.net.NetworkInfo$State: android.net.NetworkInfo$State valueOf(java.lang.String)>"
"<android.app.Person: boolean equals(java.lang.Object)>","<android.app.Person: boolean equals(java.lang.Object)>"
"<android.widget.Adapter: int getCount()>","<android.widget.Adapter: int getCount()>"
"<android.icu.util.ULocale: java.lang.String getDisplayScript()>","<android.icu.util.ULocale: java.lang.String getDisplayScript()>"
"<java.net.Socket: void setPerformancePreferences(int,int,int)>","<java.net.Socket: void setPerformancePreferences(int,int,int)>"
"<android.content.ContentProvider$PipeDataWriter: void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object)>","<android.content.ContentProvider$PipeDataWriter: void writeDataToPipe(android.os.ParcelFileDescriptor,android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object)>"
"<java.util.Dictionary: void <init>()>","<java.util.Dictionary: void <init>()>"
"<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>","<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,java.nio.ByteBuffer,java.security.ProtectionDomain)>"
"<android.util.Property: java.lang.Object get(java.lang.Object)>","<android.util.Property: java.lang.Object get(java.lang.Object)>"
"<java.time.format.DecimalStyle: void <init>()>","<java.time.format.DecimalStyle: void <init>()>"
"<java.net.ServerSocket: java.net.ServerSocket setOption(java.net.SocketOption,java.lang.Object)>","<java.net.ServerSocket: java.net.ServerSocket setOption(java.net.SocketOption,java.lang.Object)>"
"<android.view.View: void onScreenStateChanged(int)>","<android.view.View: void onScreenStateChanged(int)>"
"<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>","<android.view.inputmethod.InputMethodManager: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>"
"<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(int,int)>","<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(int,int)>"
"<android.view.View: void setAutoHandwritingEnabled(boolean)>","<android.view.View: void setAutoHandwritingEnabled(boolean)>"
"<java.io.OutputStream: java.io.OutputStream nullOutputStream()>","<java.io.OutputStream: java.io.OutputStream nullOutputStream()>"
"<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asSpreader(java.lang.Class,int)>","<java.lang.invoke.MethodHandle: java.lang.invoke.MethodHandle asSpreader(java.lang.Class,int)>"
"<java.util.AbstractSet: boolean equals(java.lang.Object)>","<java.util.AbstractSet: boolean equals(java.lang.Object)>"
"<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder removeTransportType(int)>","<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder removeTransportType(int)>"
"<android.content.res.TypedArray: void close()>","<android.content.res.TypedArray: void close()>"
"<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>","<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>","<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespacePrefix(int)>"
"<java.util.function.LongSupplier: long getAsLong()>","<java.util.function.LongSupplier: long getAsLong()>"
"<android.view.DisplayCutout: android.graphics.Path getCutoutPath()>","<android.view.DisplayCutout: android.graphics.Path getCutoutPath()>"
"<android.widget.TextView: float getLineSpacingExtra()>","<android.widget.TextView: float getLineSpacingExtra()>"
"<java.util.Arrays: int compareUnsigned(short[],int,int,short[],int,int)>","<java.util.Arrays: int compareUnsigned(short[],int,int,short[],int,int)>"
"<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>","<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>"
"<android.graphics.drawable.Drawable: void setAlpha(int)>","<android.graphics.drawable.Drawable: void setAlpha(int)>"
"<android.view.Window: void setContentView(int)>","<android.view.Window: void setContentView(int)>"
"<android.view.inputmethod.TextSnapshot: int getCursorCapsMode()>","<android.view.inputmethod.TextSnapshot: int getCursorCapsMode()>"
"<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>","<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>"
"<android.view.ViewTreeObserver: void dispatchOnDraw()>","<android.view.ViewTreeObserver: void dispatchOnDraw()>"
"<android.app.ActionBar: android.app.ActionBar$Tab getTabAt(int)>","<android.app.ActionBar: android.app.ActionBar$Tab getTabAt(int)>"
"<android.os.RemoteException: void <init>(java.lang.String)>","<android.os.RemoteException: void <init>(java.lang.String)>"
"<android.media.Rating: boolean isRated()>","<android.media.Rating: boolean isRated()>"
"<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>","<android.widget.AbsListView: void dispatchDraw(android.graphics.Canvas)>"
"<android.content.res.Resources: java.lang.CharSequence getText(int)>","<android.content.res.Resources: java.lang.CharSequence getText(int)>"
"<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>","<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>"
"<android.hardware.camera2.CameraDevice$StateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)>","<android.hardware.camera2.CameraDevice$StateCallback: void onDisconnected(android.hardware.camera2.CameraDevice)>"
"<android.view.WindowInsetsController: int getSystemBarsAppearance()>","<android.view.WindowInsetsController: int getSystemBarsAppearance()>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon setTintBlendMode(android.graphics.BlendMode)>"
"<android.app.PendingIntent: boolean equals(java.lang.Object)>","<android.app.PendingIntent: boolean equals(java.lang.Object)>"
"<android.telephony.data.ApnSetting: int getCarrierId()>","<android.telephony.data.ApnSetting: int getCarrierId()>"
"<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>","<java.nio.channels.FileLock: void <init>(java.nio.channels.FileChannel,long,long,boolean)>"
"<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()>","<android.view.textclassifier.TextClassification: java.lang.CharSequence getLabel()>"
"<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>","<java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)>"
"<android.media.session.MediaController$TransportControls: void skipToPrevious()>","<android.media.session.MediaController$TransportControls: void skipToPrevious()>"
"<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>","<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>"
"<android.graphics.ColorSpace$Connector: void <init>()>","<android.graphics.ColorSpace$Connector: void <init>()>"
"<android.view.ViewGroup: void detachViewsFromParent(int,int)>","<android.view.ViewGroup: void detachViewsFromParent(int,int)>"
"<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>","<android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)>"
"<android.content.Intent: java.lang.Object clone()>","<android.content.Intent: java.lang.Object clone()>"
"<android.media.AudioMetadataReadMap: boolean containsKey(android.media.AudioMetadata$Key)>","<android.media.AudioMetadataReadMap: boolean containsKey(android.media.AudioMetadata$Key)>"
"<java.lang.Object: void notifyAll()>","<java.lang.Object: void notifyAll()>"
"<org.xmlpull.v1.XmlPullParser: int nextToken()>","<org.xmlpull.v1.XmlPullParser: int nextToken()>"
"<java.util.Arrays: void sort(float[],int,int)>","<java.util.Arrays: void sort(float[],int,int)>"
"<java.lang.Short: double doubleValue()>","<java.lang.Short: double doubleValue()>"
"<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int)>","<java.util.Arrays: boolean equals(java.lang.Object[],int,int,java.lang.Object[],int,int)>"
"<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)>","<android.widget.TextView: boolean onGenericMotionEvent(android.view.MotionEvent)>"
"<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>","<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>"
"<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>","<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>"
"<android.view.animation.Animation: void setStartTime(long)>","<android.view.animation.Animation: void setStartTime(long)>"
"<android.graphics.drawable.LayerDrawable: void setLayerHeight(int,int)>","<android.graphics.drawable.LayerDrawable: void setLayerHeight(int,int)>"
"<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>","<android.hardware.camera2.CameraCaptureSession$CaptureCallback: void onCaptureCompleted(android.hardware.camera2.CameraCaptureSession,android.hardware.camera2.CaptureRequest,android.hardware.camera2.TotalCaptureResult)>"
"<android.icu.util.ULocale: java.lang.String getVariant(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getVariant(java.lang.String)>"
"<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>","<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>"
"<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>","<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadBanner(android.content.pm.PackageManager)>"
"<android.content.pm.ApplicationInfo: int getRequestRawExternalStorageAccess()>","<android.content.pm.ApplicationInfo: int getRequestRawExternalStorageAccess()>"
"<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>","<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>"
"<java.time.ZoneOffset: java.time.ZoneOffset of(java.lang.String)>","<java.time.ZoneOffset: java.time.ZoneOffset of(java.lang.String)>"
"<android.widget.ListView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>","<android.widget.ListView: boolean drawChild(android.graphics.Canvas,android.view.View,long)>"
"<java.time.Instant: int compareTo(java.time.Instant)>","<java.time.Instant: int compareTo(java.time.Instant)>"
"<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>","<android.media.RemoteControlClient$MetadataEditor: android.media.MediaMetadataEditor putBitmap(int,android.graphics.Bitmap)>"
"<android.view.KeyEvent: int getAction()>","<android.view.KeyEvent: int getAction()>"
"<java.lang.Package: java.lang.String getImplementationTitle()>","<java.lang.Package: java.lang.String getImplementationTitle()>"
"<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>","<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>"
"<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int,int)>","<android.view.textclassifier.SelectionEvent: android.view.textclassifier.SelectionEvent createSelectionStartedEvent(int,int)>"
"<android.graphics.Paint: float getStrikeThruThickness()>","<android.graphics.Paint: float getStrikeThruThickness()>"
"<android.graphics.Paint: boolean isStrikeThruText()>","<android.graphics.Paint: boolean isStrikeThruText()>"
"<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>","<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>"
"<android.media.AudioTrack: void stop()>","<android.media.AudioTrack: void stop()>"
"<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>","<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)>"
"<android.media.MediaDrm: int getConnectedHdcpLevel()>","<android.media.MediaDrm: int getConnectedHdcpLevel()>"
"<java.util.Properties: void store(java.io.Writer,java.lang.String)>","<java.util.Properties: void store(java.io.Writer,java.lang.String)>"
"<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)>","<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)>"
"<java.io.FilterOutputStream: void flush()>","<java.io.FilterOutputStream: void flush()>"
"<android.view.MotionEvent: float getToolMinor()>","<android.view.MotionEvent: float getToolMinor()>"
"<java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)>","<java.util.Collections: boolean replaceAll(java.util.List,java.lang.Object,java.lang.Object)>"
"<java.net.DatagramPacket: int getLength()>","<java.net.DatagramPacket: int getLength()>"
"<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)>","<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)>"
"<java.lang.Math: int max(int,int)>","<java.lang.Math: int max(int,int)>"
"<android.view.autofill.AutofillId: boolean equals(java.lang.Object)>","<android.view.autofill.AutofillId: boolean equals(java.lang.Object)>"
"<android.view.View: void setVerticalScrollBarEnabled(boolean)>","<android.view.View: void setVerticalScrollBarEnabled(boolean)>"
"<java.time.ZoneOffset: boolean equals(java.lang.Object)>","<java.time.ZoneOffset: boolean equals(java.lang.Object)>"
"<java.lang.Math: double log(double)>","<java.lang.Math: double log(double)>"
"<android.view.Window: void setSharedElementsUseOverlay(boolean)>","<android.view.Window: void setSharedElementsUseOverlay(boolean)>"
"<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>","<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>"
"<android.view.View: int computeHorizontalScrollRange()>","<android.view.View: int computeHorizontalScrollRange()>"
"<java.time.LocalTime: boolean isAfter(java.time.LocalTime)>","<java.time.LocalTime: boolean isAfter(java.time.LocalTime)>"
"<android.content.Context: boolean deleteSharedPreferences(java.lang.String)>","<android.content.Context: boolean deleteSharedPreferences(java.lang.String)>"
"<java.io.Console: void flush()>","<java.io.Console: void flush()>"
"<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>","<android.media.AudioManager: int requestAudioFocus(android.media.AudioFocusRequest)>"
"<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>","<java.io.PrintWriter: void <init>(java.io.File,java.lang.String)>"
"<android.hardware.lights.Light: java.lang.String toString()>","<android.hardware.lights.Light: java.lang.String toString()>"
"<android.app.Activity: android.app.ActionBar getActionBar()>","<android.app.Activity: android.app.ActionBar getActionBar()>"
"<java.time.OffsetTime: boolean isAfter(java.time.OffsetTime)>","<java.time.OffsetTime: boolean isAfter(java.time.OffsetTime)>"
"<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>","<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>"
"<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()>","<android.content.ContentProvider: java.lang.String getCallingPackageUnchecked()>"
"<java.lang.Character: boolean isBmpCodePoint(int)>","<java.lang.Character: boolean isBmpCodePoint(int)>"
"<java.util.stream.LongStream: long count()>","<java.util.stream.LongStream: long count()>"
"<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>","<java.nio.file.spi.FileSystemProvider: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)>"
"<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>","<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>"
"<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>","<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>"
"<android.view.Window$Callback: void onContentChanged()>","<android.view.Window$Callback: void onContentChanged()>"
"<android.view.View: int getNextFocusUpId()>","<android.view.View: int getNextFocusUpId()>"
"<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>","<java.lang.SecurityManager: java.lang.ClassLoader currentClassLoader()>"
"<android.view.PointerIcon: boolean equals(java.lang.Object)>","<android.view.PointerIcon: boolean equals(java.lang.Object)>"
"<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>","<android.hardware.camera2.CameraAccessException: void <init>(int,java.lang.String)>"
"<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>","<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>"
"<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()>","<android.telephony.TelephonyManager: java.lang.String getMmsUserAgent()>"
"<android.view.textclassifier.TextLinks$Request: java.time.ZonedDateTime getReferenceTime()>","<android.view.textclassifier.TextLinks$Request: java.time.ZonedDateTime getReferenceTime()>"
"<android.media.AudioPresentation: int getMasteringIndication()>","<android.media.AudioPresentation: int getMasteringIndication()>"
"<android.app.VoiceInteractor$Request: java.lang.String getName()>","<android.app.VoiceInteractor$Request: java.lang.String getName()>"
"<android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()>","<android.telephony.data.ApnSetting: java.lang.String getMmsProxyAddressAsString()>"
"<java.nio.DoubleBuffer: java.nio.Buffer position(int)>","<java.nio.DoubleBuffer: java.nio.Buffer position(int)>"
"<android.content.pm.PackageInstaller$SessionParams: void setAppLabel(java.lang.CharSequence)>","<android.content.pm.PackageInstaller$SessionParams: void setAppLabel(java.lang.CharSequence)>"
"<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>","<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>"
"<android.graphics.RenderNode: boolean resetPivot()>","<android.graphics.RenderNode: boolean resetPivot()>"
"<java.util.concurrent.ConcurrentLinkedQueue: boolean remove(java.lang.Object)>","<java.util.concurrent.ConcurrentLinkedQueue: boolean remove(java.lang.Object)>"
"<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>","<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>"
"<android.graphics.ColorSpace$RenderIntent: void <init>(java.lang.String,int)>","<android.graphics.ColorSpace$RenderIntent: void <init>(java.lang.String,int)>"
"<java.io.PrintWriter: void <init>(java.io.Writer)>","<java.io.PrintWriter: void <init>(java.io.Writer)>"
"<android.media.AudioTrack: void release()>","<android.media.AudioTrack: void release()>"
"<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>","<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>"
"<android.content.pm.PackageManager: boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable)>","<android.content.pm.PackageManager: boolean isDefaultApplicationIcon(android.graphics.drawable.Drawable)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>","<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>"
"<android.view.ViewGroup: boolean shouldDelayChildPressedState()>","<android.view.ViewGroup: boolean shouldDelayChildPressedState()>"
"<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>","<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)>"
"<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setTtcIndex(int)>","<android.graphics.Typeface$Builder: android.graphics.Typeface$Builder setTtcIndex(int)>"
"<java.time.format.ResolverStyle: java.time.format.ResolverStyle[] values()>","<java.time.format.ResolverStyle: java.time.format.ResolverStyle[] values()>"
"<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>","<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>"
"<java.net.DatagramSocket: boolean isConnected()>","<java.net.DatagramSocket: boolean isConnected()>"
"<android.widget.TextView: int getMaxLines()>","<android.widget.TextView: int getMaxLines()>"
"<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>","<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>"
"<java.security.Principal: java.lang.String getName()>","<java.security.Principal: java.lang.String getName()>"
"<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,int)>","<android.content.pm.PackageManager: int[] getPackageGids(java.lang.String,int)>"
"<android.graphics.drawable.Icon: void <clinit>()>","<android.graphics.drawable.Icon: void <clinit>()>"
"<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>","<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>"
"<android.view.WindowInsetsController: void setSystemBarsAppearance(int,int)>","<android.view.WindowInsetsController: void setSystemBarsAppearance(int,int)>"
"<android.content.IntentFilter: void <init>(android.content.IntentFilter)>","<android.content.IntentFilter: void <init>(android.content.IntentFilter)>"
"<android.graphics.RenderNode: boolean setClipToBounds(boolean)>","<android.graphics.RenderNode: boolean setClipToBounds(boolean)>"
"<java.lang.Short: int compareTo(java.lang.Object)>","<java.lang.Short: int compareTo(java.lang.Object)>"
"<android.os.IBinder: boolean pingBinder()>","<android.os.IBinder: boolean pingBinder()>"
"<android.view.Display$HdrCapabilities: void <init>()>","<android.view.Display$HdrCapabilities: void <init>()>"
"<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>","<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>"
"<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>","<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>"
"<android.os.Debug: int getBinderLocalObjectCount()>","<android.os.Debug: int getBinderLocalObjectCount()>"
"<android.net.NetworkInfo: int getType()>","<android.net.NetworkInfo: int getType()>"
"<java.net.NetworkInterface: java.net.NetworkInterface getParent()>","<java.net.NetworkInterface: java.net.NetworkInterface getParent()>"
"<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)>","<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadUnbadgedIcon(android.content.pm.PackageManager)>"
"<android.widget.TextView: void clearComposingText()>","<android.widget.TextView: void clearComposingText()>"
"<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>","<android.app.Activity: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>"
"<android.media.AudioTrack: boolean isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>","<android.media.AudioTrack: boolean isDirectPlaybackSupported(android.media.AudioFormat,android.media.AudioAttributes)>"
"<android.view.View: boolean onDragEvent(android.view.DragEvent)>","<android.view.View: boolean onDragEvent(android.view.DragEvent)>"
"<java.net.Socket: boolean isInputShutdown()>","<java.net.Socket: boolean isInputShutdown()>"
"<java.util.LongSummaryStatistics: long getCount()>","<java.util.LongSummaryStatistics: long getCount()>"
"<android.icu.util.ULocale: java.lang.String[] getISOCountries()>","<android.icu.util.ULocale: java.lang.String[] getISOCountries()>"
"<java.lang.Math: int getExponent(float)>","<java.lang.Math: int getExponent(float)>"
"<java.security.cert.CertificateException: void <init>()>","<java.security.cert.CertificateException: void <init>()>"
"<android.telephony.data.ApnSetting: int getProtocol()>","<android.telephony.data.ApnSetting: int getProtocol()>"
"<java.net.DatagramSocketImpl: byte getTTL()>","<java.net.DatagramSocketImpl: byte getTTL()>"
"<android.view.View: int getNextFocusRightId()>","<android.view.View: int getNextFocusRightId()>"
"<java.lang.ThreadGroup: void destroy()>","<java.lang.ThreadGroup: void destroy()>"
"<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>","<java.nio.channels.DatagramChannel: int read(java.nio.ByteBuffer)>"
"<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>","<android.os.IBinder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>"
"<java.util.List: boolean add(java.lang.Object)>","<java.util.List: boolean add(java.lang.Object)>"
"<android.content.pm.InstallSourceInfo: int getPackageSource()>","<android.content.pm.InstallSourceInfo: int getPackageSource()>"
"<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)>","<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)>"
"<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()>","<android.view.inputmethod.InputMethodManager: boolean isAcceptingText()>"
"<java.lang.reflect.Method: boolean isDefault()>","<java.lang.reflect.Method: boolean isDefault()>"
"<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String)>","<android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder: android.view.inputmethod.InputMethodSubtype$InputMethodSubtypeBuilder setSubtypeExtraValue(java.lang.String)>"
"<android.view.View: android.view.ViewParent getParent()>","<android.view.View: android.view.ViewParent getParent()>"
"<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager)>","<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager)>"
"<java.io.Writer: void write(char[])>","<java.io.Writer: void write(char[])>"
"<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>","<java.util.Spliterator$OfLong: boolean tryAdvance(java.util.function.LongConsumer)>"
"<android.telephony.TelephonyManager: boolean hasCarrierPrivileges()>","<android.telephony.TelephonyManager: boolean hasCarrierPrivileges()>"
"<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>","<android.text.Editable: android.text.Editable append(java.lang.CharSequence)>"
"<android.provider.Settings$Global: void <init>()>","<android.provider.Settings$Global: void <init>()>"
"<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>","<android.view.accessibility.AccessibilityRecord: int getScrollDeltaY()>"
"<android.net.Uri: java.lang.String getEncodedPath()>","<android.net.Uri: java.lang.String getEncodedPath()>"
"<android.net.Network: boolean equals(java.lang.Object)>","<android.net.Network: boolean equals(java.lang.Object)>"
"<java.lang.Math: double acos(double)>","<java.lang.Math: double acos(double)>"
"<android.telephony.TelephonyManager: void setDataEnabled(boolean)>","<android.telephony.TelephonyManager: void setDataEnabled(boolean)>"
"<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeParameterType(int,java.lang.Class)>","<java.lang.invoke.MethodType: java.lang.invoke.MethodType changeParameterType(int,java.lang.Class)>"
"<android.net.ProxyInfo: void writeToParcel(android.os.Parcel,int)>","<android.net.ProxyInfo: void writeToParcel(android.os.Parcel,int)>"
"<java.lang.SecurityManager: void checkPermission(java.security.Permission)>","<java.lang.SecurityManager: void checkPermission(java.security.Permission)>"
"<java.io.File: long getUsableSpace()>","<java.io.File: long getUsableSpace()>"
"<android.view.ViewParent: boolean isLayoutRequested()>","<android.view.ViewParent: boolean isLayoutRequested()>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.ZonedDateTime: java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount)>"
"<java.security.cert.CertPath: java.lang.String toString()>","<java.security.cert.CertPath: java.lang.String toString()>"
"<java.lang.String: java.lang.String copyValueOf(char[],int,int)>","<java.lang.String: java.lang.String copyValueOf(char[],int,int)>"
"<android.media.AudioManager: int getEncodedSurroundMode()>","<android.media.AudioManager: int getEncodedSurroundMode()>"
"<java.time.DayOfWeek: void <init>(java.lang.String,int)>","<java.time.DayOfWeek: void <init>(java.lang.String,int)>"
"<android.graphics.ColorSpace$Rgb: float[] getWhitePoint(float[])>","<android.graphics.ColorSpace$Rgb: float[] getWhitePoint(float[])>"
"<android.os.Debug: int getBinderSentTransactions()>","<android.os.Debug: int getBinderSentTransactions()>"
"<java.io.File: boolean setReadOnly()>","<java.io.File: boolean setReadOnly()>"
"<android.app.Application: void onCreate()>","<android.app.Application: void onCreate()>"
"<java.lang.Byte: long longValue()>","<java.lang.Byte: long longValue()>"
"<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)>","<android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)>"
"<android.content.IntentFilter: int countCategories()>","<android.content.IntentFilter: int countCategories()>"
"<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>","<java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>"
"<java.util.concurrent.Future: boolean isCancelled()>","<java.util.concurrent.Future: boolean isCancelled()>"
"<android.graphics.Region: boolean contains(int,int)>","<android.graphics.Region: boolean contains(int,int)>"
"<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>","<android.hardware.camera2.params.OutputConfiguration: android.view.Surface getSurface()>"
"<java.util.Arrays: short[] copyOf(short[],int)>","<java.util.Arrays: short[] copyOf(short[],int)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDamageRegion(android.view.SurfaceControl,android.graphics.Region)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setDamageRegion(android.view.SurfaceControl,android.graphics.Region)>"
"<android.app.Activity: void setContentView(android.view.View)>","<android.app.Activity: void setContentView(android.view.View)>"
"<java.lang.Class: java.lang.Class getSuperclass()>","<java.lang.Class: java.lang.Class getSuperclass()>"
"<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>","<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>"
"<android.view.textclassifier.TextClassificationSessionId: void <clinit>()>","<android.view.textclassifier.TextClassificationSessionId: void <clinit>()>"
"<android.view.Display: int getHeight()>","<android.view.Display: int getHeight()>"
"<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setHandwritingBounds(android.graphics.RectF)>","<android.view.inputmethod.EditorBoundsInfo$Builder: android.view.inputmethod.EditorBoundsInfo$Builder setHandwritingBounds(android.graphics.RectF)>"
"<android.content.IntentSender: void <init>()>","<android.content.IntentSender: void <init>()>"
"<android.os.Parcel: android.os.Parcel obtain()>","<android.os.Parcel: android.os.Parcel obtain()>"
"<android.view.InputDevice$MotionRange: float getFuzz()>","<android.view.InputDevice$MotionRange: float getFuzz()>"
"<android.hardware.lights.LightState: int getPlayerId()>","<android.hardware.lights.LightState: int getPlayerId()>"
"<java.time.ZoneOffset: void <clinit>()>","<java.time.ZoneOffset: void <clinit>()>"
"<java.util.stream.Stream: java.util.stream.Stream$Builder builder()>","<java.util.stream.Stream: java.util.stream.Stream$Builder builder()>"
"<android.graphics.RenderNode: boolean setAmbientShadowColor(int)>","<android.graphics.RenderNode: boolean setAmbientShadowColor(int)>"
"<java.util.AbstractMap: java.lang.String toString()>","<java.util.AbstractMap: java.lang.String toString()>"
"<android.graphics.Canvas: android.graphics.Matrix getMatrix()>","<android.graphics.Canvas: android.graphics.Matrix getMatrix()>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.NetworkChannel bind(java.net.SocketAddress)>"
"<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromDirectory(java.lang.String,android.content.res.loader.AssetsProvider)>","<android.content.res.loader.ResourcesProvider: android.content.res.loader.ResourcesProvider loadFromDirectory(java.lang.String,android.content.res.loader.AssetsProvider)>"
"<android.graphics.Color: float luminance()>","<android.graphics.Color: float luminance()>"
"<android.database.Cursor: boolean isLast()>","<android.database.Cursor: boolean isLast()>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>"
"<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>","<android.widget.AbsListView: void onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)>"
"<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>","<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>"
"<java.util.Enumeration: java.util.Iterator asIterator()>","<java.util.Enumeration: java.util.Iterator asIterator()>"
"<android.view.textclassifier.TextClassification$Request: void <init>()>","<android.view.textclassifier.TextClassification$Request: void <init>()>"
"<java.net.DatagramSocket: int getSoTimeout()>","<java.net.DatagramSocket: int getSoTimeout()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>"
"<android.app.PictureInPictureParams: java.util.List getActions()>","<android.app.PictureInPictureParams: java.util.List getActions()>"
"<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>","<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>"
"<android.view.Window: void setEnterTransition(android.transition.Transition)>","<android.view.Window: void setEnterTransition(android.transition.Transition)>"
"<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>","<android.view.inputmethod.InputContentInfo: android.net.Uri getContentUri()>"
"<android.media.RemoteControlClient: android.media.RemoteControlClient$MetadataEditor editMetadata(boolean)>","<android.media.RemoteControlClient: android.media.RemoteControlClient$MetadataEditor editMetadata(boolean)>"
"<java.time.Duration: java.time.Duration plusMillis(long)>","<java.time.Duration: java.time.Duration plusMillis(long)>"
"<java.nio.channels.CompletionHandler: void completed(java.lang.Object,java.lang.Object)>","<java.nio.channels.CompletionHandler: void completed(java.lang.Object,java.lang.Object)>"
"<android.graphics.Point: void <init>(int,int)>","<android.graphics.Point: void <init>(int,int)>"
"<android.net.Uri: java.util.List getPathSegments()>","<android.net.Uri: java.util.List getPathSegments()>"
"<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>","<android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)>"
"<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentProviderClient: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>"
"<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setCrop(android.view.SurfaceControl,android.graphics.Rect)>","<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setCrop(android.view.SurfaceControl,android.graphics.Rect)>"
"<android.view.View: boolean isLongClickable()>","<android.view.View: boolean isLongClickable()>"
"<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>","<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>"
"<java.util.Arrays: void setAll(long[],java.util.function.IntToLongFunction)>","<java.util.Arrays: void setAll(long[],java.util.function.IntToLongFunction)>"
"<java.time.Period: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>","<java.time.Period: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
"<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()>","<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()>"
"<android.widget.FrameLayout: boolean shouldDelayChildPressedState()>","<android.widget.FrameLayout: boolean shouldDelayChildPressedState()>"
"<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>","<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>"
"<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>","<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>"
"<java.util.ArrayList: void add(int,java.lang.Object)>","<java.util.ArrayList: void add(int,java.lang.Object)>"
"<java.security.CodeSigner: boolean equals(java.lang.Object)>","<java.security.CodeSigner: boolean equals(java.lang.Object)>"
"<android.os.LocaleList: boolean isEmpty()>","<android.os.LocaleList: boolean isEmpty()>"
"<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)>"
"<java.net.InetSocketAddress: void <init>(java.lang.String,int)>","<java.net.InetSocketAddress: void <init>(java.lang.String,int)>"
"<android.media.AudioTrack: int getAudioFormat()>","<android.media.AudioTrack: int getAudioFormat()>"
"<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>","<java.nio.file.spi.FileSystemProvider: java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)>"
"<android.content.ComponentCallbacks2: void onTrimMemory(int)>","<android.content.ComponentCallbacks2: void onTrimMemory(int)>"
"<android.os.UserHandle: void <clinit>()>","<android.os.UserHandle: void <clinit>()>"
"<android.util.Log: int d(java.lang.String,java.lang.String)>","<android.util.Log: int d(java.lang.String,java.lang.String)>"
"<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>","<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>"
"<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>","<android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)>"
"<java.lang.SecurityManager: boolean getInCheck()>","<java.lang.SecurityManager: boolean getInCheck()>"
"<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)>"
"<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>","<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>"
"<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>","<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>"
"<java.util.Hashtable: boolean isEmpty()>","<java.util.Hashtable: boolean isEmpty()>"
"<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)>"
"<android.telephony.TelephonyScanManager$NetworkScanCallback: void <init>()>","<android.telephony.TelephonyScanManager$NetworkScanCallback: void <init>()>"
"<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLinks: android.os.Bundle getExtras()>"
"<android.media.MediaPlayer: android.media.SyncParams getSyncParams()>","<android.media.MediaPlayer: android.media.SyncParams getSyncParams()>"
"<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>","<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>"
"<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>","<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>"
"<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()>","<java.lang.reflect.AnnotatedElement: java.lang.'annotation'.Annotation[] getAnnotations()>"
"<android.widget.AbsListView: void setFastScrollEnabled(boolean)>","<android.widget.AbsListView: void setFastScrollEnabled(boolean)>"
"<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>","<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>"
"<java.net.NetworkInterface: java.lang.String getName()>","<java.net.NetworkInterface: java.lang.String getName()>"
"<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setProgramId(int)>","<android.media.AudioPresentation$Builder: android.media.AudioPresentation$Builder setProgramId(int)>"
"<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>","<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>"
"<android.widget.Scroller: void setFinalX(int)>","<android.widget.Scroller: void setFinalX(int)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minus(java.time.temporal.TemporalAmount)>","<java.time.LocalDateTime: java.time.LocalDateTime minus(java.time.temporal.TemporalAmount)>"
"<android.view.Choreographer$FrameCallback: void doFrame(long)>","<android.view.Choreographer$FrameCallback: void doFrame(long)>"
"<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>","<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>"
"<java.lang.Integer: int parseInt(java.lang.CharSequence,int,int,int)>","<java.lang.Integer: int parseInt(java.lang.CharSequence,int,int,int)>"
"<java.util.OptionalLong: long orElseGet(java.util.function.LongSupplier)>","<java.util.OptionalLong: long orElseGet(java.util.function.LongSupplier)>"
"<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)>","<android.hardware.camera2.CameraCaptureSession$StateCallback: void onConfigured(android.hardware.camera2.CameraCaptureSession)>"
"<java.nio.ByteBuffer: char getChar()>","<java.nio.ByteBuffer: char getChar()>"
"<android.graphics.Matrix: java.lang.String toShortString()>","<android.graphics.Matrix: java.lang.String toShortString()>"
"<android.view.View$BaseSavedState: void <init>(android.os.Parcel)>","<android.view.View$BaseSavedState: void <init>(android.os.Parcel)>"
"<android.hardware.lights.Light: java.lang.String getName()>","<android.hardware.lights.Light: java.lang.String getName()>"
"<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>","<android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)>"
"<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>","<android.view.DisplayCutout: void <init>(android.graphics.Insets,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Insets)>"
"<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()>","<android.widget.Toolbar: java.lang.CharSequence getNavigationContentDescription()>"
"<android.view.MotionEvent: float getHistoricalOrientation(int)>","<android.view.MotionEvent: float getHistoricalOrientation(int)>"
"<android.os.Bundle: java.lang.Object getParcelable(java.lang.String,java.lang.Class)>","<android.os.Bundle: java.lang.Object getParcelable(java.lang.String,java.lang.Class)>"
"<android.content.res.Resources$NotFoundException: void <init>()>","<android.content.res.Resources$NotFoundException: void <init>()>"
"<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void cdsect(java.lang.String)>"
"<java.util.ArrayList: void replaceAll(java.util.function.UnaryOperator)>","<java.util.ArrayList: void replaceAll(java.util.function.UnaryOperator)>"
"<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>","<android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)>"
"<android.provider.Settings$System: boolean canWrite(android.content.Context)>","<android.provider.Settings$System: boolean canWrite(android.content.Context)>"
"<java.net.URLConnection: long getLastModified()>","<java.net.URLConnection: long getLastModified()>"
"<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>","<android.media.AudioAttributes$Builder: android.media.AudioAttributes$Builder setFlags(int)>"
"<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>","<java.nio.channels.DatagramChannel: int send(java.nio.ByteBuffer,java.net.SocketAddress)>"
"<android.content.Context: int getColor(int)>","<android.content.Context: int getColor(int)>"
"<android.media.session.MediaSession$Token: int describeContents()>","<android.media.session.MediaSession$Token: int describeContents()>"
"<android.app.Activity: boolean isChild()>","<android.app.Activity: boolean isChild()>"
"<android.os.Parcel: java.lang.Object[] readParcelableArray(java.lang.ClassLoader,java.lang.Class)>","<android.os.Parcel: java.lang.Object[] readParcelableArray(java.lang.ClassLoader,java.lang.Class)>"
"<android.graphics.Bitmap$CompressFormat: void <clinit>()>","<android.graphics.Bitmap$CompressFormat: void <clinit>()>"
"<android.graphics.RectF: void <clinit>()>","<android.graphics.RectF: void <clinit>()>"
"<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()>","<android.content.pm.PackageInstaller: android.content.pm.PackageInstaller$SessionInfo getActiveStagedSession()>"
"<java.lang.Character: boolean isValidCodePoint(int)>","<java.lang.Character: boolean isValidCodePoint(int)>"
"<android.widget.TextView: void setTextIsSelectable(boolean)>","<android.widget.TextView: void setTextIsSelectable(boolean)>"
"<android.view.View: boolean dispatchNestedFling(float,float,boolean)>","<android.view.View: boolean dispatchNestedFling(float,float,boolean)>"
"<android.widget.ListView: boolean removeHeaderView(android.view.View)>","<android.widget.ListView: boolean removeHeaderView(android.view.View)>"
"<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>","<android.media.AudioRecord: void addOnRoutingChangedListener(android.media.AudioRouting$OnRoutingChangedListener,android.os.Handler)>"
"<java.lang.String: boolean isEmpty()>","<java.lang.String: boolean isEmpty()>"
"<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int)>","<android.graphics.RuntimeShader: void setIntUniform(java.lang.String,int,int,int)>"
"<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>","<android.widget.AdapterView: boolean performItemClick(android.view.View,int,long)>"
"<android.view.Menu: void setGroupDividerEnabled(boolean)>","<android.view.Menu: void setGroupDividerEnabled(boolean)>"
"<android.hardware.display.DisplayManager$DisplayListener: void onDisplayChanged(int)>","<android.hardware.display.DisplayManager$DisplayListener: void onDisplayChanged(int)>"
"<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putString(java.lang.String,java.lang.String)>","<android.media.MediaMetadata$Builder: android.media.MediaMetadata$Builder putString(java.lang.String,java.lang.String)>"
"<android.view.MotionEvent: float getRawY(int)>","<android.view.MotionEvent: float getRawY(int)>"
"<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>","<android.text.PrecomputedText$Params: android.text.TextDirectionHeuristic getTextDirection()>"
"<android.util.LongSparseArray: int indexOfValue(java.lang.Object)>","<android.util.LongSparseArray: int indexOfValue(java.lang.Object)>"
"<java.nio.LongBuffer: long get()>","<java.nio.LongBuffer: long get()>"
"<android.widget.Toolbar: android.os.Parcelable onSaveInstanceState()>","<android.widget.Toolbar: android.os.Parcelable onSaveInstanceState()>"
"<android.view.DisplayCutout: boolean equals(java.lang.Object)>","<android.view.DisplayCutout: boolean equals(java.lang.Object)>"
"<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>","<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>"
"<java.lang.Thread: boolean isAlive()>","<java.lang.Thread: boolean isAlive()>"
"<java.lang.reflect.Constructor: java.lang.String toGenericString()>","<java.lang.reflect.Constructor: java.lang.String toGenericString()>"
"<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>","<java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>"
"<java.nio.channels.Selector: int selectNow()>","<java.nio.channels.Selector: int selectNow()>"
"<android.view.SurfaceView: void onMeasure(int,int)>","<android.view.SurfaceView: void onMeasure(int,int)>"
"<java.time.chrono.ChronoLocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>","<java.time.chrono.ChronoLocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayKeyword(java.lang.String,android.icu.util.ULocale)>"
"<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>","<android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>","<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View,int)>"
"<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIntent(android.content.Intent)>","<android.view.textclassifier.TextClassification$Builder: android.view.textclassifier.TextClassification$Builder setIntent(android.content.Intent)>"
"<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>","<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>"
"<android.app.Fragment$SavedState: void <clinit>()>","<android.app.Fragment$SavedState: void <clinit>()>"
"<android.view.View: android.animation.StateListAnimator getStateListAnimator()>","<android.view.View: android.animation.StateListAnimator getStateListAnimator()>"
"<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()>","<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()>"
"<android.os.Looper: boolean isCurrentThread()>","<android.os.Looper: boolean isCurrentThread()>"
"<android.view.View: android.view.translation.ViewTranslationResponse getViewTranslationResponse()>","<android.view.View: android.view.translation.ViewTranslationResponse getViewTranslationResponse()>"
"<java.io.FileDescriptor: void sync()>","<java.io.FileDescriptor: void sync()>"
"<android.view.View: boolean isLayoutDirectionResolved()>","<android.view.View: boolean isLayoutDirectionResolved()>"
"<android.graphics.text.MeasuredText: void <init>()>","<android.graphics.text.MeasuredText: void <init>()>"
"<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)>","<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)>"
"<java.nio.IntBuffer: boolean isDirect()>","<java.nio.IntBuffer: boolean isDirect()>"
"<android.view.ViewPropertyAnimator: void start()>","<android.view.ViewPropertyAnimator: void start()>"
"<android.widget.AbsListView: void onRemoteAdapterDisconnected()>","<android.widget.AbsListView: void onRemoteAdapterDisconnected()>"
"<java.lang.StringBuffer: int codePointBefore(int)>","<java.lang.StringBuffer: int codePointBefore(int)>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)>","<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)>"
"<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod multipliedBy(int)>","<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod multipliedBy(int)>"
"<android.content.pm.PathPermission: void <clinit>()>","<android.content.pm.PathPermission: void <clinit>()>"
"<java.io.File: java.lang.String toString()>","<java.io.File: java.lang.String toString()>"
"<java.net.InetSocketAddress: java.net.InetAddress getAddress()>","<java.net.InetSocketAddress: java.net.InetAddress getAddress()>"
"<android.view.autofill.AutofillValue: boolean getToggleValue()>","<android.view.autofill.AutofillValue: boolean getToggleValue()>"
"<android.graphics.Rect: boolean contains(int,int,int,int)>","<android.graphics.Rect: boolean contains(int,int,int,int)>"
"<android.os.Build$Partition: int hashCode()>","<android.os.Build$Partition: int hashCode()>"
"<android.media.session.MediaSession$Token: boolean equals(java.lang.Object)>","<android.media.session.MediaSession$Token: boolean equals(java.lang.Object)>"
"<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>","<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>"
"<android.view.WindowInsetsAnimation: float getAlpha()>","<android.view.WindowInsetsAnimation: float getAlpha()>"
"<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>","<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>"
"<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>","<java.net.ContentHandler: java.lang.Object getContent(java.net.URLConnection)>"
"<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>","<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>"
"<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()>","<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getTooltipText()>"
"<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>","<android.view.View: boolean onKeyUp(int,android.view.KeyEvent)>"
"<android.graphics.Point: void <init>(android.graphics.Point)>","<android.graphics.Point: void <init>(android.graphics.Point)>"
"<java.lang.reflect.Parameter: boolean isVarArgs()>","<java.lang.reflect.Parameter: boolean isVarArgs()>"
"<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>","<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>"
"<java.util.HashMap: java.util.Collection values()>","<java.util.HashMap: java.util.Collection values()>"
"<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>","<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>"
"<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)>","<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)>"
"<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>","<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)>"
"<java.lang.SecurityManager: void checkCreateClassLoader()>","<java.lang.SecurityManager: void checkCreateClassLoader()>"
"<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,boolean)>","<android.app.ActionBar: void addTab(android.app.ActionBar$Tab,boolean)>"
"<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>","<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>"
"<android.graphics.ColorSpace: float[] fromXyz(float[])>","<android.graphics.ColorSpace: float[] fromXyz(float[])>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String)>"
"<android.media.AudioDeviceInfo: int[] getChannelMasks()>","<android.media.AudioDeviceInfo: int[] getChannelMasks()>"
"<android.widget.Toolbar: int getCurrentContentInsetStart()>","<android.widget.Toolbar: int getCurrentContentInsetStart()>"
"<java.lang.Throwable: void <init>()>","<java.lang.Throwable: void <init>()>"
"<java.io.PrintWriter: void println(long)>","<java.io.PrintWriter: void println(long)>"
"<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap$Config)>","<android.graphics.Bitmap: void setConfig(android.graphics.Bitmap$Config)>"
"<android.view.Display$Mode: int getPhysicalWidth()>","<android.view.Display$Mode: int getPhysicalWidth()>"
"<android.graphics.Rect: void inset(int,int)>","<android.graphics.Rect: void inset(int,int)>"
"<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>","<android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()>"
"<android.view.View: float getTranslationX()>","<android.view.View: float getTranslationX()>"
"<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>","<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>"
"<java.lang.RuntimeException: void <init>(java.lang.Throwable)>","<java.lang.RuntimeException: void <init>(java.lang.Throwable)>"
"<android.graphics.Matrix$ScaleToFit: void <clinit>()>","<android.graphics.Matrix$ScaleToFit: void <clinit>()>"
"<android.os.Debug: void resetThreadAllocCount()>","<android.os.Debug: void resetThreadAllocCount()>"
"<android.graphics.Matrix: boolean preScale(float,float,float,float)>","<android.graphics.Matrix: boolean preScale(float,float,float,float)>"
"<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>","<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>"
"<android.view.View: boolean isEnabled()>","<android.view.View: boolean isEnabled()>"
"<android.telephony.PhoneStateListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>","<android.telephony.PhoneStateListener: void onImsCallDisconnectCauseChanged(android.telephony.ims.ImsReasonInfo)>"
"<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>","<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>"
"<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUsages()>","<android.media.AudioPlaybackCaptureConfiguration: int[] getMatchingUsages()>"
"<android.graphics.drawable.BitmapDrawable: void setGravity(int)>","<android.graphics.drawable.BitmapDrawable: void setGravity(int)>"
"<android.graphics.RectF: boolean contains(float,float,float,float)>","<android.graphics.RectF: boolean contains(float,float,float,float)>"
"<android.view.SubMenu: void clearHeader()>","<android.view.SubMenu: void clearHeader()>"
"<android.widget.TextView: void setElegantTextHeight(boolean)>","<android.widget.TextView: void setElegantTextHeight(boolean)>"
"<java.nio.CharBuffer: char get(int)>","<java.nio.CharBuffer: char get(int)>"
"<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>","<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>"
"<android.app.Activity: void setTaskDescription(android.app.ActivityManager$TaskDescription)>","<android.app.Activity: void setTaskDescription(android.app.ActivityManager$TaskDescription)>"
"<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>","<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>"
"<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>","<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>"
"<android.view.ContentInfo$Builder: void <init>(android.content.ClipData,int)>","<android.view.ContentInfo$Builder: void <init>(android.content.ClipData,int)>"
"<android.content.ContentProvider: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>","<android.content.ContentProvider: boolean refresh(android.net.Uri,android.os.Bundle,android.os.CancellationSignal)>"
"<android.view.inputmethod.SurroundingText: void <init>(java.lang.CharSequence,int,int,int)>","<android.view.inputmethod.SurroundingText: void <init>(java.lang.CharSequence,int,int,int)>"
"<java.util.Arrays: void parallelPrefix(java.lang.Object[],java.util.function.BinaryOperator)>","<java.util.Arrays: void parallelPrefix(java.lang.Object[],java.util.function.BinaryOperator)>"
"<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>","<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>"
"<android.media.AudioTrack: boolean setAudioDescriptionMixLeveldB(float)>","<android.media.AudioTrack: boolean setAudioDescriptionMixLeveldB(float)>"
"<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle[])>","<java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandle filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle[])>"
"<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>","<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>"
"<java.net.URL: java.lang.Object getContent()>","<java.net.URL: java.lang.Object getContent()>"
"<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayKeywordValue(java.lang.String,android.icu.util.ULocale)>"
"<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>","<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>"
"<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)>","<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)>"
"<android.util.Rational: int compareTo(java.lang.Object)>","<android.util.Rational: int compareTo(java.lang.Object)>"
"<android.app.Person: boolean isBot()>","<android.app.Person: boolean isBot()>"
"<java.time.format.FormatStyle: java.time.format.FormatStyle[] values()>","<java.time.format.FormatStyle: java.time.format.FormatStyle[] values()>"
"<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()>","<android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()>"
"<android.graphics.RenderNode: float getScaleY()>","<android.graphics.RenderNode: float getScaleY()>"
"<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>","<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>"
"<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>","<android.widget.TextView: void setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>"
"<android.view.View: void sendAccessibilityEvent(int)>","<android.view.View: void sendAccessibilityEvent(int)>"
"<android.media.RemoteControlClient$MetadataEditor: void clear()>","<android.media.RemoteControlClient$MetadataEditor: void clear()>"
"<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>","<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>"
"<android.media.AudioTrack: int getBufferSizeInFrames()>","<android.media.AudioTrack: int getBufferSizeInFrames()>"
"<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)>","<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)>"
"<java.lang.reflect.Method: boolean equals(java.lang.Object)>","<java.lang.reflect.Method: boolean equals(java.lang.Object)>"
"<android.content.Loader: boolean onCancelLoad()>","<android.content.Loader: boolean onCancelLoad()>"
"<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()>","<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: java.lang.CharSequence getLabel()>"
"<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>","<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>"
"<android.util.ArrayMap: boolean removeAll(java.util.Collection)>","<android.util.ArrayMap: boolean removeAll(java.util.Collection)>"
"<java.util.stream.DoubleStream: java.util.stream.LongStream mapToLong(java.util.function.DoubleToLongFunction)>","<java.util.stream.DoubleStream: java.util.stream.LongStream mapToLong(java.util.function.DoubleToLongFunction)>"
"<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>","<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>"
"<java.nio.IntBuffer: java.nio.Buffer clear()>","<java.nio.IntBuffer: java.nio.Buffer clear()>"
"<java.time.chrono.ChronoLocalDate: java.time.chrono.Era getEra()>","<java.time.chrono.ChronoLocalDate: java.time.chrono.Era getEra()>"
"<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext build()>","<android.view.textclassifier.TextClassificationContext$Builder: android.view.textclassifier.TextClassificationContext build()>"
"<android.graphics.fonts.Font$Builder: void <init>(java.io.File)>","<android.graphics.fonts.Font$Builder: void <init>(java.io.File)>"
"<java.util.Arrays: java.util.stream.LongStream stream(long[],int,int)>","<java.util.Arrays: java.util.stream.LongStream stream(long[],int,int)>"
"<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>","<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>"
"<android.animation.PropertyValuesHolder: java.lang.Object clone()>","<android.animation.PropertyValuesHolder: java.lang.Object clone()>"
"<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>","<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>"
"<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map,android.os.Bundle)>","<android.view.textclassifier.TextLinks$Builder: android.view.textclassifier.TextLinks$Builder addLink(int,int,java.util.Map,android.os.Bundle)>"
"<android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>","<android.view.MenuItem: android.content.res.ColorStateList getIconTintList()>"
"<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>","<android.view.View: boolean dispatchNestedScroll(int,int,int,int,int[])>"
"<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)>","<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso(int)>"
"<android.media.MediaDrm: void releaseSecureStops(byte[])>","<android.media.MediaDrm: void releaseSecureStops(byte[])>"
"<android.view.ViewStructure: void setHintIdEntry(java.lang.String)>","<android.view.ViewStructure: void setHintIdEntry(java.lang.String)>"
"<java.lang.Math: float abs(float)>","<java.lang.Math: float abs(float)>"
"<android.text.Editable$Factory: void <init>()>","<android.text.Editable$Factory: void <init>()>"
"<android.view.WindowId: boolean isFocused()>","<android.view.WindowId: boolean isFocused()>"
"<android.util.Log: int i(java.lang.String,java.lang.String)>","<android.util.Log: int i(java.lang.String,java.lang.String)>"
"<android.view.ViewOutlineProvider: void <clinit>()>","<android.view.ViewOutlineProvider: void <clinit>()>"
"<java.net.Socket: void sendUrgentData(int)>","<java.net.Socket: void sendUrgentData(int)>"
"<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>","<android.hardware.camera2.CaptureResult: java.lang.Object get(android.hardware.camera2.CaptureResult$Key)>"
"<android.graphics.drawable.LayerDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>","<android.graphics.drawable.LayerDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)>"
"<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)>","<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)>"
"<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()>","<android.view.textclassifier.TextLanguage: android.os.Bundle getExtras()>"
"<android.graphics.RecordingCanvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>","<android.graphics.RecordingCanvas: void drawArc(float,float,float,float,float,float,boolean,android.graphics.Paint)>"
"<android.view.autofill.AutofillValue: boolean equals(java.lang.Object)>","<android.view.autofill.AutofillValue: boolean equals(java.lang.Object)>"
"<java.lang.Long: int intValue()>","<java.lang.Long: int intValue()>"
"<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request build()>","<android.view.textclassifier.TextClassification$Request$Builder: android.view.textclassifier.TextClassification$Request build()>"
"<java.util.Random: java.util.stream.IntStream ints()>","<java.util.Random: java.util.stream.IntStream ints()>"
"<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.util.Size getLayoutSize()>","<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.util.Size getLayoutSize()>"
"<java.time.zone.ZoneRules: java.util.List getTransitions()>","<java.time.zone.ZoneRules: java.util.List getTransitions()>"
"<android.content.Intent: double getDoubleExtra(java.lang.String,double)>","<android.content.Intent: double getDoubleExtra(java.lang.String,double)>"
"<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>","<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>"
"<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo getDrmInfo()>","<android.media.MediaPlayer: android.media.MediaPlayer$DrmInfo getDrmInfo()>"
"<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>","<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>"
"<android.content.res.Configuration: int describeContents()>","<android.content.res.Configuration: int describeContents()>"
"<android.app.ActivityManager: boolean isUserAMonkey()>","<android.app.ActivityManager: boolean isUserAMonkey()>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCustomTitle(android.view.View)>"
"<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)>","<android.widget.TextView: boolean onKeyPreIme(int,android.view.KeyEvent)>"
"<android.os.Messenger: int describeContents()>","<android.os.Messenger: int describeContents()>"
"<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>","<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>"
"<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>","<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>"
"<java.nio.file.WatchKey: java.nio.file.Watchable watchable()>","<java.nio.file.WatchKey: java.nio.file.Watchable watchable()>"
"<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>","<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>"
"<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>","<android.os.Parcel: void writePersistableBundle(android.os.PersistableBundle)>"
"<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>","<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)>"
"<android.view.animation.LayoutAnimationController: boolean isDone()>","<android.view.animation.LayoutAnimationController: boolean isDone()>"
"<android.view.autofill.AutofillId: void <clinit>()>","<android.view.autofill.AutofillId: void <clinit>()>"
"<java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>","<java.util.Locale: java.util.Locale getDefault(java.util.Locale$Category)>"
"<android.content.pm.InstrumentationInfo: void <clinit>()>","<android.content.pm.InstrumentationInfo: void <clinit>()>"
"<android.graphics.Bitmap: int getGenerationId()>","<android.graphics.Bitmap: int getGenerationId()>"
"<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>","<android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)>"
"<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress)>","<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel bind(java.net.SocketAddress)>"
"<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>","<java.nio.file.spi.FileSystemProvider: java.lang.String getScheme()>"
"<android.view.ViewGroup: void dispatchWindowSystemUiVisiblityChanged(int)>","<android.view.ViewGroup: void dispatchWindowSystemUiVisiblityChanged(int)>"
"<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()>","<android.hardware.camera2.params.SessionConfiguration: java.util.List getOutputConfigurations()>"
"<android.icu.util.ULocale: android.icu.util.ULocale forLocale(java.util.Locale)>","<android.icu.util.ULocale: android.icu.util.ULocale forLocale(java.util.Locale)>"
"<android.view.View: void setContentDescription(java.lang.CharSequence)>","<android.view.View: void setContentDescription(java.lang.CharSequence)>"
"<java.util.stream.LongStream: void forEachOrdered(java.util.function.LongConsumer)>","<java.util.stream.LongStream: void forEachOrdered(java.util.function.LongConsumer)>"
"<android.media.AudioRecordingConfiguration: void <clinit>()>","<android.media.AudioRecordingConfiguration: void <clinit>()>"
"<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>","<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>"
"<android.media.Image$Plane: int getPixelStride()>","<android.media.Image$Plane: int getPixelStride()>"
"<android.graphics.Color: void <init>()>","<android.graphics.Color: void <init>()>"
"<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>","<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>"
"<java.nio.ByteBuffer: java.nio.Buffer limit(int)>","<java.nio.ByteBuffer: java.nio.Buffer limit(int)>"
"<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>","<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>"
"<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>","<android.hardware.camera2.CaptureRequest$Builder: void set(android.hardware.camera2.CaptureRequest$Key,java.lang.Object)>"
"<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>","<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>"
"<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>","<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setItems(int,android.content.DialogInterface$OnClickListener)>"
"<android.view.ViewGroup: void startViewTransition(android.view.View)>","<android.view.ViewGroup: void startViewTransition(android.view.View)>"
"<android.widget.AbsListView: int getListPaddingLeft()>","<android.widget.AbsListView: int getListPaddingLeft()>"
"<android.media.Session2Token: int getUid()>","<android.media.Session2Token: int getUid()>"
"<java.nio.channels.FileChannel: void force(boolean)>","<java.nio.channels.FileChannel: void force(boolean)>"
"<java.util.IntSummaryStatistics: int getMax()>","<java.util.IntSummaryStatistics: int getMax()>"
"<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>","<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>"
"<android.os.CombinedVibration: void <clinit>()>","<android.os.CombinedVibration: void <clinit>()>"
"<java.lang.AbstractMethodError: void <init>(java.lang.String)>","<java.lang.AbstractMethodError: void <init>(java.lang.String)>"
"<java.time.DayOfWeek: java.time.DayOfWeek 'from'(java.time.temporal.TemporalAccessor)>","<java.time.DayOfWeek: java.time.DayOfWeek 'from'(java.time.temporal.TemporalAccessor)>"
"<java.time.zone.ZoneRules: int hashCode()>","<java.time.zone.ZoneRules: int hashCode()>"
"<android.view.InflateException: void <init>(java.lang.String)>","<android.view.InflateException: void <init>(java.lang.String)>"
"<android.graphics.drawable.BitmapDrawable: boolean isStateful()>","<android.graphics.drawable.BitmapDrawable: boolean isStateful()>"
"<java.lang.CharSequence: java.util.stream.IntStream codePoints()>","<java.lang.CharSequence: java.util.stream.IntStream codePoints()>"
"<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>","<android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])>"
"<java.time.ZonedDateTime: java.time.Month getMonth()>","<java.time.ZonedDateTime: java.time.Month getMonth()>"
"<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>","<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>"
"<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>","<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>"
"<android.view.ViewStructure: void setImportantForAutofill(int)>","<android.view.ViewStructure: void setImportantForAutofill(int)>"
"<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,android.icu.util.ULocale)>","<android.icu.util.ULocale: java.lang.String getDisplayLanguage(java.lang.String,android.icu.util.ULocale)>"
"<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>","<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>"
"<android.content.Intent: int describeContents()>","<android.content.Intent: int describeContents()>"
"<java.io.File: long length()>","<java.io.File: long length()>"
"<android.icu.util.ULocale: java.lang.String getLanguage()>","<android.icu.util.ULocale: java.lang.String getLanguage()>"
"<android.content.ClipDescription: java.lang.String getMimeType(int)>","<android.content.ClipDescription: java.lang.String getMimeType(int)>"
"<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>","<java.nio.file.spi.FileSystemProvider: void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])>"
"<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>","<android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)>"
"<android.app.VoiceInteractor: void notifyDirectActionsChanged()>","<android.app.VoiceInteractor: void notifyDirectActionsChanged()>"
"<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()>","<android.database.sqlite.SQLiteDatabase$OpenParams: java.lang.String getSynchronousMode()>"
"<android.icu.util.ULocale: java.lang.String getLineOrientation()>","<android.icu.util.ULocale: java.lang.String getLineOrientation()>"
"<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>","<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>"
"<android.os.UserHandle: java.lang.String toString()>","<android.os.UserHandle: java.lang.String toString()>"
"<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>","<java.security.ProtectionDomain: void <init>(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])>"
"<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>","<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>"
"<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)>","<android.graphics.drawable.Icon: android.graphics.drawable.Icon createWithContentUri(android.net.Uri)>"
"<java.security.cert.Certificate: java.lang.Object writeReplace()>","<java.security.cert.Certificate: java.lang.Object writeReplace()>"
"<android.media.RemoteController: boolean setSynchronizationMode(int)>","<android.media.RemoteController: boolean setSynchronizationMode(int)>"
"<android.app.Fragment: void setAllowReturnTransitionOverlap(boolean)>","<android.app.Fragment: void setAllowReturnTransitionOverlap(boolean)>"
"<android.os.Parcel: void writeParcelableCreator(android.os.Parcelable)>","<android.os.Parcel: void writeParcelableCreator(android.os.Parcelable)>"
"<android.graphics.SurfaceTexture: void <init>(int,boolean)>","<android.graphics.SurfaceTexture: void <init>(int,boolean)>"
"<java.time.Instant: java.time.Instant now(java.time.Clock)>","<java.time.Instant: java.time.Instant now(java.time.Clock)>"
"<android.view.Display: void getMetrics(android.util.DisplayMetrics)>","<android.view.Display: void getMetrics(android.util.DisplayMetrics)>"
"<java.lang.SecurityManager: java.lang.Class[] getClassContext()>","<java.lang.SecurityManager: java.lang.Class[] getClassContext()>"
"<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>","<org.xmlpull.v1.XmlSerializer: void ignorableWhitespace(java.lang.String)>"
"<java.lang.reflect.Member: boolean isSynthetic()>","<java.lang.reflect.Member: boolean isSynthetic()>"
"<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>","<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder reflectTimes()>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder reflectTimes()>"
"<android.widget.TextView: boolean isTextSelectable()>","<android.widget.TextView: boolean isTextSelectable()>"
"<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>","<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>"
"<android.telephony.TelephonyManager: int getPhoneCount()>","<android.telephony.TelephonyManager: int getPhoneCount()>"
"<android.widget.TextView: boolean isCursorVisible()>","<android.widget.TextView: boolean isCursorVisible()>"
"<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>","<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>"
"<android.view.textclassifier.TextLanguage$Request: void <init>()>","<android.view.textclassifier.TextLanguage$Request: void <init>()>"
"<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder invertVolumes()>","<android.media.VolumeShaper$Configuration$Builder: android.media.VolumeShaper$Configuration$Builder invertVolumes()>"
"<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>","<android.media.AudioTrack: int write(java.nio.ByteBuffer,int,int)>"
"<java.nio.channels.FileChannel: long size()>","<java.nio.channels.FileChannel: long size()>"
"<android.view.View: void setPressed(boolean)>","<android.view.View: void setPressed(boolean)>"
"<java.util.Arrays: java.util.stream.LongStream stream(long[])>","<java.util.Arrays: java.util.stream.LongStream stream(long[])>"
"<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>","<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>"
"<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>","<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage()>"
"<android.media.session.MediaController$PlaybackInfo: int getMaxVolume()>","<android.media.session.MediaController$PlaybackInfo: int getMaxVolume()>"
"<android.view.DisplayCutout: int getSafeInsetTop()>","<android.view.DisplayCutout: int getSafeInsetTop()>"
"<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>","<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>"
"<android.media.audiofx.AudioEffect: void finalize()>","<android.media.audiofx.AudioEffect: void finalize()>"
"<android.os.PersistableBundle: void <init>()>","<android.os.PersistableBundle: void <init>()>"
"<java.util.stream.LongStream: java.util.OptionalDouble average()>","<java.util.stream.LongStream: java.util.OptionalDouble average()>"
"<android.media.MediaFormat: long getLong(java.lang.String)>","<android.media.MediaFormat: long getLong(java.lang.String)>"
"<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>","<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>"
"<java.net.Proxy$Type: void <clinit>()>","<java.net.Proxy$Type: void <clinit>()>"
"<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function)>","<java.util.Comparator: java.util.Comparator thenComparing(java.util.function.Function)>"
"<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)>","<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)>"
"<android.graphics.Color: int HSVToColor(int,float[])>","<android.graphics.Color: int HSVToColor(int,float[])>"
"<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>","<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>"
"<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>","<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>"
"<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setBackgroundColor(int)>","<android.app.ActivityManager$TaskDescription$Builder: android.app.ActivityManager$TaskDescription$Builder setBackgroundColor(int)>"
"<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>","<java.io.Console: char[] readPassword(java.lang.String,java.lang.Object[])>"
"<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)>","<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)>"
"<android.app.ActivityManager: boolean isBackgroundRestricted()>","<android.app.ActivityManager: boolean isBackgroundRestricted()>"
"<java.time.chrono.ChronoLocalDate: java.util.Comparator timeLineOrder()>","<java.time.chrono.ChronoLocalDate: java.util.Comparator timeLineOrder()>"
"<java.lang.StringBuilder: int indexOf(java.lang.String,int)>","<java.lang.StringBuilder: int indexOf(java.lang.String,int)>"
"<android.graphics.RenderNode: boolean setSpotShadowColor(int)>","<android.graphics.RenderNode: boolean setSpotShadowColor(int)>"
"<java.util.stream.DoubleStream: java.util.OptionalDouble findAny()>","<java.util.stream.DoubleStream: java.util.OptionalDouble findAny()>"
"<android.view.View: void setPreferKeepClear(boolean)>","<android.view.View: void setPreferKeepClear(boolean)>"
"<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>","<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>"
"<android.telephony.PreciseDataConnectionState: int getId()>","<android.telephony.PreciseDataConnectionState: int getId()>"
"<java.util.stream.IntStream: java.util.stream.BaseStream sequential()>","<java.util.stream.IntStream: java.util.stream.BaseStream sequential()>"
"<android.text.InputFilter$LengthFilter: int getMax()>","<android.text.InputFilter$LengthFilter: int getMax()>"
"<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>","<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>"
"<java.util.concurrent.Semaphore: boolean isFair()>","<java.util.concurrent.Semaphore: boolean isFair()>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(int)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setCustomView(int)>"
"<java.io.Writer: void write(int)>","<java.io.Writer: void write(int)>"
"<java.util.Date: int getDay()>","<java.util.Date: int getDay()>"
"<java.util.Deque: java.lang.Object peekLast()>","<java.util.Deque: java.lang.Object peekLast()>"
"<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()>","<android.telephony.TelephonyManager: int getCardIdForDefaultEuicc()>"
"<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()>","<android.media.MediaDescription: android.graphics.Bitmap getIconBitmap()>"
"<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>","<android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>"
"<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>","<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>"
"<android.graphics.drawable.ColorDrawable: boolean onStateChange(int[])>","<android.graphics.drawable.ColorDrawable: boolean onStateChange(int[])>"
"<java.nio.file.DirectoryStream$Filter: boolean accept(java.lang.Object)>","<java.nio.file.DirectoryStream$Filter: boolean accept(java.lang.Object)>"
"<android.content.pm.ApplicationInfo: int describeContents()>","<android.content.pm.ApplicationInfo: int describeContents()>"
"<java.net.URLConnection: void setReadTimeout(int)>","<java.net.URLConnection: void setReadTimeout(int)>"
"<android.view.animation.Animation: void setZAdjustment(int)>","<android.view.animation.Animation: void setZAdjustment(int)>"
"<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>","<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>"
"<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>","<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>"
"<java.lang.Long: float floatValue()>","<java.lang.Long: float floatValue()>"
"<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()>","<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()>"
"<android.content.res.Configuration: void setTo(android.content.res.Configuration)>","<android.content.res.Configuration: void setTo(android.content.res.Configuration)>"
"<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams)>","<android.content.pm.PackageInstaller: int createSession(android.content.pm.PackageInstaller$SessionParams)>"
"<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>","<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>"
"<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>","<android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>"
"<android.content.res.loader.ResourcesLoader: void addProvider(android.content.res.loader.ResourcesProvider)>","<android.content.res.loader.ResourcesLoader: void addProvider(android.content.res.loader.ResourcesProvider)>"
"<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>","<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>"
"<java.time.LocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>","<java.time.LocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
"<android.graphics.Paint$Align: void <init>(java.lang.String,int)>","<android.graphics.Paint$Align: void <init>(java.lang.String,int)>"
"<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)>","<android.app.ActionBar$Tab: android.app.ActionBar$Tab setContentDescription(java.lang.CharSequence)>"
"<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>","<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>"
"<android.view.ActionMode: void setTag(java.lang.Object)>","<android.view.ActionMode: void setTag(java.lang.Object)>"
"<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>","<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
"<java.util.Arrays: int compare(char[],char[])>","<java.util.Arrays: int compare(char[],char[])>"
"<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>","<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>"
"<android.util.Log: int w(java.lang.String,java.lang.Throwable)>","<android.util.Log: int w(java.lang.String,java.lang.Throwable)>"
"<android.graphics.Picture: boolean requiresHardwareAcceleration()>","<android.graphics.Picture: boolean requiresHardwareAcceleration()>"
"<java.net.Socket: void setKeepAlive(boolean)>","<java.net.Socket: void setKeepAlive(boolean)>"
"<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>","<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>"
"<java.util.UUID: int version()>","<java.util.UUID: int version()>"
"<android.view.inputmethod.SurroundingText: int getSelectionStart()>","<android.view.inputmethod.SurroundingText: int getSelectionStart()>"
"<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>","<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>"
"<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()>","<android.view.View: android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()>"
"<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>","<java.lang.ClassLoader: java.lang.Package definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>"
"<java.lang.Package: boolean isSealed(java.net.URL)>","<java.lang.Package: boolean isSealed(java.net.URL)>"
"<android.hardware.camera2.CameraExtensionCharacteristics: android.util.Range getEstimatedCaptureLatencyRangeMillis(int,android.util.Size,int)>","<android.hardware.camera2.CameraExtensionCharacteristics: android.util.Range getEstimatedCaptureLatencyRangeMillis(int,android.util.Size,int)>"
"<android.graphics.drawable.LayerDrawable: int getId(int)>","<android.graphics.drawable.LayerDrawable: int getId(int)>"
"<android.graphics.Paint: void setShadowLayer(float,float,float,int)>","<android.graphics.Paint: void setShadowLayer(float,float,float,int)>"
"<android.view.View: void setAccessibilityLiveRegion(int)>","<android.view.View: void setAccessibilityLiveRegion(int)>"
"<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>","<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
"<java.time.OffsetTime: boolean equals(java.lang.Object)>","<java.time.OffsetTime: boolean equals(java.lang.Object)>"
"<java.util.Locale: void setDefault(java.util.Locale$Category,java.util.Locale)>","<java.util.Locale: void setDefault(java.util.Locale$Category,java.util.Locale)>"
"<java.util.ArrayList: void trimToSize()>","<java.util.ArrayList: void trimToSize()>"
"<android.app.Activity: void setPictureInPictureParams(android.app.PictureInPictureParams)>","<android.app.Activity: void setPictureInPictureParams(android.app.PictureInPictureParams)>"
"<android.telephony.TelephonyManager: int getSimSpecificCarrierId()>","<android.telephony.TelephonyManager: int getSimSpecificCarrierId()>"
"<android.view.InputDevice: android.hardware.BatteryState getBatteryState()>","<android.view.InputDevice: android.hardware.BatteryState getBatteryState()>"
"<android.content.ContentProvider: void setWritePermission(java.lang.String)>","<android.content.ContentProvider: void setWritePermission(java.lang.String)>"
"<java.util.UUID: int clockSequence()>","<java.util.UUID: int clockSequence()>"
"<android.hardware.camera2.params.OutputConfiguration: void setDynamicRangeProfile(long)>","<android.hardware.camera2.params.OutputConfiguration: void setDynamicRangeProfile(long)>"
"<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>","<android.media.session.MediaSession: void setPlaybackToLocal(android.media.AudioAttributes)>"
"<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder addLight(android.hardware.lights.Light,android.hardware.lights.LightState)>","<android.hardware.lights.LightsRequest$Builder: android.hardware.lights.LightsRequest$Builder addLight(android.hardware.lights.Light,android.hardware.lights.LightState)>"
"<android.view.contentcapture.ContentCaptureSessionId: void <init>()>","<android.view.contentcapture.ContentCaptureSessionId: void <init>()>"
"<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>","<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
"<java.util.concurrent.TimeUnit: void <clinit>()>","<java.util.concurrent.TimeUnit: void <clinit>()>"
"<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>","<android.hardware.Camera$Parameters: void setFlashMode(java.lang.String)>"
"<android.view.OrientationEventListener: void <init>(android.content.Context)>","<android.view.OrientationEventListener: void <init>(android.content.Context)>"
"<android.os.VibrationAttributes: void <init>()>","<android.os.VibrationAttributes: void <init>()>"
"<android.view.View: int getPaddingStart()>","<android.view.View: int getPaddingStart()>"
"<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>","<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>"
"<java.time.Month: java.lang.Object query(java.time.temporal.TemporalQuery)>","<java.time.Month: java.lang.Object query(java.time.temporal.TemporalQuery)>"
"<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>","<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)>"
